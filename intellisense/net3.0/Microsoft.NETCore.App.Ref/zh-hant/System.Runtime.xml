<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
      <summary>為 Win32 關鍵控制代碼實作提供基底類別，此實作中，-1 值表示無效的控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid">
      <summary>取得值，這個值表示控制代碼是否無效。</summary>
      <returns>如果控制代碼無效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid">
      <summary>為 Win32 關鍵控制代碼實作提供基底類別，此實作中，0 或 -1 值表示無效的控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>取得值，這個值表示控制代碼是否無效。</summary>
      <returns>如果控制代碼無效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeFileHandle">
      <summary>代表檔案控制代碼的包裝函式類別。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> 類別的新執行個體。</summary>
      <param name="preexistingHandle">
        <see cref="T:System.IntPtr" /> 物件，表示要使用的既有控制代碼。</param>
      <param name="ownsHandle">
        <see langword="true" /> 表示確實在結束階段釋放控制代碼，否則為 <see langword="false" />，用以免除確實釋放 (不建議)。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeFileHandle.IsInvalid">
      <summary>取得值，這個值表示控制代碼是否無效。</summary>
      <returns>如果控制代碼無效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
      <summary>為 Win32 安全控制代碼實作提供基底類別，此實作中，-1 值表示無效的控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid" /> 類別的新執行個體，指定是否要確實地釋放控制代碼。</summary>
      <param name="ownsHandle">
        <see langword="true" /> 表示確實在結束階段釋放控制代碼，否則為 <see langword="false" />，用以免除確實釋放 (不建議)。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
      <summary>取得值，這個值表示控制代碼是否無效。</summary>
      <returns>如果控制代碼無效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
      <summary>提供基底類別 (Base Class) 給 Win32 安全控制代碼實作，此實作中，0 或 -1 值指出無效的控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" /> 類別的新執行個體，指定是否要確實地釋放控制代碼。</summary>
      <param name="ownsHandle">
        <see langword="true" /> 表示確實在結束階段釋放控制代碼，否則為 <see langword="false" />，用以免除確實釋放 (不建議)。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>取得值，這個值表示控制代碼是否無效。</summary>
      <returns>如果控制代碼無效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>代表等候控制代碼的包裝函式類別。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> 類別的新執行個體。</summary>
      <param name="existingHandle">
        <see cref="T:System.IntPtr" /> 物件，表示要使用的既有控制代碼。</param>
      <param name="ownsHandle">
        <see langword="true" /> 表示確實在結束階段釋放控制代碼，否則為 <see langword="false" />，用以免除確實釋放 (不建議)。</param>
    </member>
    <member name="T:System.AccessViolationException">
      <summary>嘗試讀取或寫入受保護的記憶體時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</summary>
      <param name="info">含有序列化物件資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Action">
      <summary>封裝沒有參數且沒有傳回值的方法。</summary>
    </member>
    <member name="T:System.Action`1">
      <summary>封裝具有單一參數的方法，並且不會傳回值。</summary>
      <param name="obj">這個委派所封裝之方法的參數。</param>
      <typeparam name="T">這個委派所封裝之方法的參數型別。</typeparam>
    </member>
    <member name="T:System.Action`10">
      <summary>封裝有 10 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>封裝有 11 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>封裝有 12 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>封裝有 13 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>封裝有 14 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <param name="arg14">這個委派所封裝之方法的第 14 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>封裝有 15 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <param name="arg14">這個委派所封裝之方法的第 14 個參數。</param>
      <param name="arg15">這個委派所封裝之方法的第 15 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>封裝有 16 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <param name="arg14">這個委派所封裝之方法的第 14 個參數。</param>
      <param name="arg15">這個委派所封裝之方法的第 15 個參數。</param>
      <param name="arg16">這個委派所封裝之方法的第 16 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
      <typeparam name="T16">這個委派所封裝方法之第 16 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`2">
      <summary>封裝有兩個參數且沒有傳回值的方法。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
    </member>
    <member name="T:System.Action`3">
      <summary>封裝具有三個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
    </member>
    <member name="T:System.Action`4">
      <summary>封裝有四個參數且沒有傳回值的方法。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`5">
      <summary>封裝有具有五個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`6">
      <summary>封裝具有六個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`7">
      <summary>封裝具有七個參數且沒有傳回值的方法。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`8">
      <summary>封裝具有八個參數且沒有傳回值的方法。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>封裝具有九個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>包含本機或遠端建立物件類型的方法，或者取得對現有遠端物件的參考。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String)">
      <summary>使用具名組件和無參數建構函式，建立具有已指定名稱的 COM 物件執行個體。</summary>
      <param name="assemblyName">要在其中搜尋名稱為 <paramref name="typeName" /> 之類型的組件名稱。 如果 <paramref name="assemblyName" /> 為 <see langword="null" />，則會搜尋執行中的組件。</param>
      <param name="typeName">慣用類型的完整名稱。</param>
      <returns>必須解除包裝的控制代碼，用來存取新建立的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">您無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">透過反映叫用並擲回例外狀況的建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" />取得。</exception>
      <exception cref="T:System.NotSupportedException">不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。  
-或- 
目前載入的是 Common Language Runtime (CLR) 2.0 版或更新版本，且已使用比目前載入之版本更新的 CLR 版本來編譯 <paramref name="assemblyName" />。 請注意，.NET Framework 2.0、3.0 和 3.5 版全部都會使用 CLR 2.0 版。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。  
 -或-  
 組件名稱或程式碼基底無效。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>使用具名組件和最符合指定參數的建構函式，建立已具有指定名稱之類型的執行個體。</summary>
      <param name="assemblyName">要在其中搜尋名稱為 <paramref name="typeName" /> 之類型的組件名稱。 如果 <paramref name="assemblyName" /> 為 <see langword="null" />，則會搜尋執行中的組件。</param>
      <param name="typeName">慣用類型的完整名稱。</param>
      <param name="ignoreCase">
        <see langword="true" /> 指定 <paramref name="typeName" /> 的搜尋不區分大小寫，<see langword="false" /> 指定搜尋區分大小寫。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="typeName" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">物件，使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 來搜尋及識別 <paramref name="typeName" /> 建構函式。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="args">引數的陣列，此引數在數目、順序和類型上符合要叫用的建構函式的參數。 如果 <paramref name="args" /> 是空陣列或 <see langword="null" />，則會叫用未採用參數的建構函式 (無參數建構函式)。</param>
      <param name="culture">特定文化特性的資訊，其可控制 <paramref name="args" /> 到型式類型 (為 <paramref name="typeName" /> 建構函式宣告) 的強制轉型。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。  
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>必須解除包裝的控制代碼，用來存取新建立的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">透過反映叫用並擲回例外狀況的建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" />取得。</exception>
      <exception cref="T:System.NotSupportedException">不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
 <paramref name="activationAttributes" /> 不是空的陣列，而建立中的類型不是衍生自 <see cref="T:System.MarshalByRefObject" />。  
-或- 
最符合 <paramref name="args" /> 的建構函式有 <see langword="varargs" /> 引數。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。  
-或- 
目前載入的是 Common Language Runtime (CLR) 2.0 版或更新版本，且已使用比目前載入之版本更新的 CLR 版本來編譯 <paramref name="assemblyName" />。 請注意，.NET Framework 2.0、3.0 和 3.5 版全部都會使用 CLR 2.0 版。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。  
 -或-  
 組件名稱或程式碼基底無效。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])">
      <summary>使用具名組件和無參數建構函式，建立具有已指定名稱的 COM 物件執行個體。</summary>
      <param name="assemblyName">要在其中搜尋名稱為 <paramref name="typeName" /> 之類型的組件名稱。 如果 <paramref name="assemblyName" /> 為 <see langword="null" />，則會搜尋執行中的組件。</param>
      <param name="typeName">慣用類型的完整名稱。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。  
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>必須解除包裝的控制代碼，用來存取新建立的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.NotSupportedException">不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
 <paramref name="activationAttributes" /> 不是空的陣列，而建立中的類型不是衍生自 <see cref="T:System.MarshalByRefObject" />。  
-或- 
 <paramref name="activationAttributes" /> 不是 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />。  
陣列。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的組件。  
-或- 
目前載入的是 Common Language Runtime (CLR) 2.0 版或更新版本，且已使用比目前載入之版本更新的 CLR 版本來編譯 <paramref name="assemblyName" />。 請注意，.NET Framework 2.0、3.0 和 3.5 版全部都會使用 CLR 2.0 版。</exception>
      <exception cref="T:System.IO.FileLoadException">使用兩個不同的辨識項載入組件或模組兩次。  
 -或-  
 組件名稱或程式碼基底無效。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">嘗試在 <paramref name="activationAttributes" /> 所指定之目標中進行遠端啟動時發生錯誤。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>使用所指定類型的無參數建構函式，建立該類型的執行個體。</summary>
      <param name="type">要建立的物件類型。</param>
      <returns>新建立物件的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="type" /> 是開放式泛型類型 (也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
-或- 
不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MissingMemberException" />。  


            

 找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但用來取得類型的類別識別項無效，或已識別的類別未經登錄。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的類型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
      <summary>使用所指定類型的無參數建構函式，建立該類型的執行個體。</summary>
      <param name="type">要建立的物件類型。</param>
      <param name="nonPublic">如果公用或非公用無參數建構函式可相符，則為 <see langword="true" />；如果只有公用無參數建構函式可相符，則為 <see langword="false" />。</param>
      <returns>新建立物件的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="type" /> 是開放式泛型類型 (也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
-或- 
不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但用來取得類型的類別識別項無效，或已識別的類別未經登錄。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的類型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>使用最符合指定參數的建構函式，建立指定類型的執行個體。</summary>
      <param name="type">要建立的物件類型。</param>
      <param name="args">引數的陣列，此引數在數目、順序和類型上符合要叫用的建構函式的參數。 如果 <paramref name="args" /> 是空陣列或 <see langword="null" />，則會叫用未採用參數的建構函式 (無參數建構函式)。</param>
      <returns>新建立物件的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="type" /> 是開放式泛型類型 (也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
-或- 
不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。  
-或- 
最符合 <paramref name="args" /> 的建構函式有 <see langword="varargs" /> 引數。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MissingMemberException" />。  


            

 找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但用來取得類型的類別識別項無效，或已識別的類別未經登錄。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的類型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
      <summary>使用最符合指定參數的建構函式，建立指定類型的執行個體。</summary>
      <param name="type">要建立的物件類型。</param>
      <param name="args">引數的陣列，此引數在數目、順序和類型上符合要叫用的建構函式的參數。 如果 <paramref name="args" /> 是空陣列或 <see langword="null" />，則會叫用未採用參數的建構函式 (無參數建構函式)。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。  
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>新建立物件的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="type" /> 是開放式泛型類型 (也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
-或- 
不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
 <paramref name="activationAttributes" /> 不是空的陣列，而建立中的類型不是衍生自 <see cref="T:System.MarshalByRefObject" />。  
-或- 
包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。  
-或- 
最符合 <paramref name="args" /> 的建構函式有 <see langword="varargs" /> 引數。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但用來取得類型的類別識別項無效，或已識別的類別未經登錄。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的類型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用最符合指定參數的建構函式，建立指定類型的執行個體。</summary>
      <param name="type">要建立的物件類型。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="type" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">物件，使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 來搜尋及識別 <paramref name="type" /> 建構函式。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="args">引數的陣列，此引數在數目、順序和類型上符合要叫用的建構函式的參數。 如果 <paramref name="args" /> 是空陣列或 <see langword="null" />，則會叫用未採用參數的建構函式 (無參數建構函式)。</param>
      <param name="culture">特定文化特性的資訊，其可控制 <paramref name="args" /> 到型式類型 (為 <paramref name="type" /> 建構函式宣告) 的強制轉型。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>新建立物件的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="type" /> 是開放式泛型類型 (也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
-或- 
不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。  
-或- 
最符合 <paramref name="args" /> 的建構函式有 <see langword="varargs" /> 引數。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但用來取得類型的類別識別項無效，或已識別的類別未經登錄。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的類型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>使用最符合指定參數的建構函式，建立指定類型的執行個體。</summary>
      <param name="type">要建立的物件類型。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="type" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">物件，使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 來搜尋及識別 <paramref name="type" /> 建構函式。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="args">引數的陣列，此引數在數目、順序和類型上符合要叫用的建構函式的參數。 如果 <paramref name="args" /> 是空陣列或 <see langword="null" />，則會叫用未採用參數的建構函式 (無參數建構函式)。</param>
      <param name="culture">特定文化特性的資訊，其可控制 <paramref name="args" /> 到型式類型 (為 <paramref name="type" /> 建構函式宣告) 的強制轉型。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。  
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>新建立物件的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="type" /> 是開放式泛型類型 (也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不可以是 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
-或- 
不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 類型或這些類型的陣列。  
-或- 
 <paramref name="activationAttributes" /> 不是空的陣列，而建立中的類型不是衍生自 <see cref="T:System.MarshalByRefObject" />。  
-或- 
包含 <paramref name="type" /> 的組件是以 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 建立的動態組件。  
-或- 
最符合 <paramref name="args" /> 的建構函式有 <see langword="varargs" /> 引數。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在呼叫的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">COM 類型不是透過 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 取得。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但用來取得類型的類別識別項無效，或已識別的類別未經登錄。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的類型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>使用無參數建構函式，建立由指定之泛型類型參數所指定之類型的執行個體。</summary>
      <typeparam name="T">要建立的類型。</typeparam>
      <returns>新建立物件的參考。</returns>
      <exception cref="T:System.MissingMethodException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MissingMemberException" />。  


            

 針對 <paramref name="T" /> 指定的類型沒有無參數建構函式。</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String)">
      <summary>使用具名組件檔案和無參數建構函式，建立已具有指定名稱的類型執行個體。</summary>
      <param name="assemblyFile">檔案的名稱，該檔案包含要在其中搜尋名稱為 <paramref name="typeName" /> 之類型的組件。</param>
      <param name="typeName">慣用類型的名稱。</param>
      <returns>必須解除包裝的控制代碼，用來存取新建立的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">透過反映叫用並擲回例外狀況的建構函式。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端具有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。  
-或- 
目前載入的是 Common Language Runtime (CLR) 2.0 版或更新版本，且已使用比目前載入之版本更新的 CLR 版本來編譯 <paramref name="assemblyName" />。 請注意，.NET Framework 2.0、3.0 和 3.5 版全部都會使用 CLR 2.0 版。</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>使用具名組件檔案和最符合指定參數的建構函式，建立已具有指定名稱之類型的執行個體。</summary>
      <param name="assemblyFile">檔案的名稱，該檔案包含要在其中搜尋名稱為 <paramref name="typeName" /> 之類型的組件。</param>
      <param name="typeName">慣用類型的名稱。</param>
      <param name="ignoreCase">
        <see langword="true" /> 指定 <paramref name="typeName" /> 的搜尋不區分大小寫，<see langword="false" /> 指定搜尋區分大小寫。</param>
      <param name="bindingAttr">零或多個位元旗標的組合，此位元旗標會影響 <paramref name="typeName" /> 建構函式的搜尋。 如果 <paramref name="bindingAttr" /> 為零，則會針對公用建構函式執行區分大小寫的搜尋。</param>
      <param name="binder">物件，使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 來搜尋及識別 <paramref name="typeName" /> 建構函式。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="args">引數的陣列，此引數在數目、順序和類型上符合要叫用的建構函式的參數。 如果 <paramref name="args" /> 是空陣列或 <see langword="null" />，則會叫用未採用參數的建構函式 (無參數建構函式)。</param>
      <param name="culture">特定文化特性的資訊，其可控制 <paramref name="args" /> 到型式類型 (為 <paramref name="typeName" /> 建構函式宣告) 的強制轉型。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。  
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>必須解除包裝的控制代碼，用來存取新建立的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">透過反映叫用並擲回例外狀況的建構函式。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> 不是空的陣列，而建立中的類型不是衍生自 <see cref="T:System.MarshalByRefObject" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。  
-或- 
目前載入的是 Common Language Runtime (CLR) 2.0 版或更新版本，且已使用比目前載入之版本更新的 CLR 版本來編譯 <paramref name="assemblyName" />。 請注意，.NET Framework 2.0、3.0 和 3.5 版全部都會使用 CLR 2.0 版。</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>使用具名組件檔案和無參數建構函式，建立已具有指定名稱的類型執行個體。</summary>
      <param name="assemblyFile">檔案的名稱，該檔案包含要在其中搜尋名稱為 <paramref name="typeName" /> 之類型的組件。</param>
      <param name="typeName">慣用類型的名稱。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。  
此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>必須解除包裝的控制代碼，用來存取新建立的執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中找不到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有呼叫這個建構函式的權限。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">透過反映叫用並擲回例外狀況的建構函式。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> 不是空的陣列，而建立中的類型不是衍生自 <see cref="T:System.MarshalByRefObject" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端具有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。  
-或- 
目前載入的是 Common Language Runtime (CLR) 2.0 版或更新版本，且已使用比目前載入之版本更新的 CLR 版本來編譯 <paramref name="assemblyName" />。 請注意，.NET Framework 2.0、3.0 和 3.5 版全部都會使用 CLR 2.0 版。</exception>
    </member>
    <member name="T:System.AggregateException">
      <summary>代表應用程式執行期間所發生的一或多個錯誤。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>使用造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目為 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Exception[])">
      <summary>使用造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目為 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 引數為 null。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">無法將例外狀況正確還原序列化。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目為 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerException" /> 引數為 null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目為 Null。</exception>
    </member>
    <member name="M:System.AggregateException.Flatten">
      <summary>將 <see cref="T:System.AggregateException" /> 執行個體簡維成單一新執行個體。</summary>
      <returns>簡維的新 <see cref="T:System.AggregateException" />。</returns>
    </member>
    <member name="M:System.AggregateException.GetBaseException">
      <summary>傳回這個例外狀況之根本原因的 <see cref="T:System.AggregateException" />。</summary>
      <returns>屬於這個例外狀況根本原因的 <see cref="T:System.AggregateException" />。</returns>
    </member>
    <member name="M:System.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 引數為 null。</exception>
    </member>
    <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
      <summary>對這個 <see cref="T:System.Exception" /> 包含的每個 <see cref="T:System.AggregateException" /> 叫用處理常式。</summary>
      <param name="predicate">要對每個例外狀況執行的述詞。 述詞會接受要處理的 <see cref="T:System.Exception" /> 做為引數，並傳回表示是否已處理例外狀況的布林值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 引數為 null。</exception>
      <exception cref="T:System.AggregateException">未處理此 <see cref="T:System.AggregateException" /> 所包含的例外狀況。</exception>
    </member>
    <member name="P:System.AggregateException.InnerExceptions">
      <summary>取得造成目前例外狀況之 <see cref="T:System.Exception" /> 執行個體的唯讀集合。</summary>
      <returns>造成目前例外狀況之<see cref="T:System.Exception" />實例的唯讀集合。</returns>
    </member>
    <member name="P:System.AggregateException.Message">
      <summary>取得描述例外狀況的訊息。</summary>
      <returns>說明例外狀況的訊息。</returns>
    </member>
    <member name="M:System.AggregateException.ToString">
      <summary>建立並傳回目前 <see cref="T:System.AggregateException" /> 的字串表示。</summary>
      <returns>目前例外狀況的字串表示。</returns>
    </member>
    <member name="T:System.AppContext">
      <summary>提供成員，用於設定和擷取應用程式內容的相關資料。</summary>
    </member>
    <member name="P:System.AppContext.BaseDirectory">
      <summary>取得組件解析程式用來探查組件之基底目錄的路徑名稱。</summary>
      <returns>組件解析程式用來探查組件之基底目錄的路徑名稱。</returns>
    </member>
    <member name="M:System.AppContext.GetData(System.String)">
      <summary>傳回指派給目前應用程式定義域的具名資料元素值。</summary>
      <param name="name">資料元素的名稱。</param>
      <returns>如果 <paramref name="name" /> 識別出具名的值，則為 <paramref name="name" /> 的值，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
      <summary>設定參數的值。</summary>
      <param name="switchName">參數的名稱。</param>
      <param name="isEnabled">參數的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="switchName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="switchName" /> 為 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="P:System.AppContext.TargetFrameworkName">
      <summary>取得目前應用程式設為目標的 Framework 版本名稱。</summary>
      <returns>目前應用程式設為目標的 Framework 版本名稱。</returns>
    </member>
    <member name="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
      <summary>嘗試取得參數的值。</summary>
      <param name="switchName">參數的名稱。</param>
      <param name="isEnabled">當這個方法傳回時，如果找到 <paramref name="switchName" />，則會包含 <paramref name="switchName" /> 的值；如果找不到 <paramref name="switchName" />，則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果已設定 <paramref name="switchName" /> 且 <paramref name="isEnabled" /> 引數包含參數的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="switchName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="switchName" /> 為 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="T:System.ApplicationException">
      <summary>作為應用程式定義例外狀況的基底類別。</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor">
      <summary>初始化 <see cref="T:System.ApplicationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ApplicationException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ApplicationException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.ApplicationException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.ArgIterator">
      <summary>表示可變長度的引數清單，也就是說，使用引數變數的函式參數。</summary>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle)">
      <summary>使用指定的引數清單，初始化 <see cref="T:System.ArgIterator" /> 結構的新執行個體。</summary>
      <param name="arglist">包含強制和選擇性引數的引數清單。</param>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)">
      <summary>使用指定的引數清單和指向清單項目的指標，初始化 <see cref="T:System.ArgIterator" /> 結構的新執行個體。</summary>
      <param name="arglist">包含強制和選擇性引數的引數清單。</param>
      <param name="ptr">要先存取的 <paramref name="arglist" /> 中之引數指標，若 <paramref name="arglist" /> 為 <see langword="null" />，則為 <paramref name="ptr" /> 中的第一個強制引數。</param>
    </member>
    <member name="M:System.ArgIterator.End">
      <summary>結束處理由這個執行個體代表的可變長度的引數清單。</summary>
    </member>
    <member name="M:System.ArgIterator.Equals(System.Object)">
      <summary>不支援這個方法，而且永遠會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="o">要與這個執行個體比較的物件。</param>
      <returns>這個比較不受支援。 沒有傳回值。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.ArgIterator.GetHashCode">
      <summary>傳回這個物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ArgIterator.GetNextArg">
      <summary>傳回可變長度引數清單中的下一個引數。</summary>
      <returns>做為 <see cref="T:System.TypedReference" /> 物件的下一個引數。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試進行超過清單結尾的讀取。</exception>
    </member>
    <member name="M:System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)">
      <summary>傳回可變長度引數清單中的具有指定型別的下一個引數。</summary>
      <param name="rth">識別要擷取引數型別的 Runtime 型別控制代碼。</param>
      <returns>做為 <see cref="T:System.TypedReference" /> 物件的下一個引數。</returns>
      <exception cref="T:System.InvalidOperationException">嘗試進行超過清單結尾的讀取。</exception>
      <exception cref="T:System.ArgumentNullException">至剩餘引數的滑鼠指標為零。</exception>
    </member>
    <member name="M:System.ArgIterator.GetNextArgType">
      <summary>傳回下一個引數的型別。</summary>
      <returns>下一個引數的型別。</returns>
    </member>
    <member name="M:System.ArgIterator.GetRemainingCount">
      <summary>傳回引數清單中剩餘的引數數目。</summary>
      <returns>剩餘的引數數目。</returns>
    </member>
    <member name="T:System.ArgumentException">
      <summary>當其中一個提供給方法的引數為無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的參數名稱，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、參數名稱和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以參數名稱和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 物件為 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>取得錯誤訊息和參數名稱，或如果參數名稱未設定時只取得錯誤訊息。</summary>
      <returns>描述例外狀況之詳細資料的文字字串。 這個屬性值是下列兩種形式中的一種： 
  條件 
  值 
  <paramref name="paramName" /> 是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 或長度為零。  
  傳遞給建構函式的 <paramref name="message" /> 字串。  
  <paramref name="paramName" /> 不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 且長度大於零。  
  與無效參數名稱附加在一起的 <paramref name="message" /> 字串。</returns>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>取得造成這個例外狀況的參數名稱。</summary>
      <returns>參數名稱。</returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>例外狀況，這個例外狀況會在 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 被傳遞至不接受其為有效引數的方法時擲回。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">物件，描述序列化資料的來源或目的地。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>使用造成這個例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的例外狀況，初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
      <param name="message">解釋這個例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentNullException" /> 類別的執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>當引數值超出了叫用 (Invoke) 方法所定義值的容許範圍時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">物件，描述序列化資料的來源或目的地。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>使用造成這個例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成這個例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的例外狀況，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">解釋這個例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>使用參數名稱引數值和指定的錯誤訊息，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="actualValue">造成例外狀況的引數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>使用造成這個例外狀況的參數名稱和指定的錯誤訊息，初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>取得造成這個例外狀況的引數值。</summary>
      <returns>
        <see langword="Object" />，包含造成目前 <see cref="T:System.Exception" /> 的參數值。</returns>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以無效的引數值和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">物件，描述序列化資料的來源或目的地。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>取得錯誤訊息和無效引數值的字串表示，或如果引數值是 null 時，只取得錯誤訊息。</summary>
      <returns>這個例外狀況的文字訊息。 這個屬性值是下列兩種形式中的一種：  
  條件 
  值 
  <paramref name="actualValue" /> 為 <see langword="null" />。  

  傳遞給建構函式的 <paramref name="message" /> 字串。  

  <paramref name="actualValue" /> 不是 <see langword="null" />。  

  與代表無效參數名稱之字串附加在一起的 <paramref name="message" /> 字串。</returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>當算術、轉型或轉換作業發生錯誤時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Array">
      <summary>提供建立、管理、搜尋和排序陣列的方法，可在 Common Language Runtime 時做為所有陣列的基底類別。</summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>傳回指定之陣列的唯讀包裝函式。</summary>
      <param name="array">要在唯讀 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包裝函式中包裝的以零為起始的一維陣列。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>指定之陣列的唯讀 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>使用陣列的每個項目和指定之值所實作的 <see cref="T:System.IComparable" /> 介面，在已排序的一維陣列內某個範圍的項目中搜尋值。</summary>
      <param name="array">要搜尋之已排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。  
-或- 
 <paramref name="value" /> 的類型與 <paramref name="array" /> 項目不相容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，且搜尋時遇到未實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 介面，在已排序的一維陣列內某範圍的項目中搜尋值。</summary>
      <param name="array">要搜尋之已排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。  
-或- 
 <paramref name="comparer" /> 是 <see langword="null" />，且 <paramref name="value" /> 的類型與 <paramref name="array" /> 項目不相容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 是 <see langword="null" />，<paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，且搜尋時遇到未實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>使用陣列每個項目和指定物件所實作的 <see cref="T:System.IComparable" /> 介面，在整個一維已排序的陣列中搜尋特定的項目。</summary>
      <param name="array">要搜尋之已排序的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的類型與 <paramref name="array" />項目不相容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，且搜尋時遇到未實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 介面，在整個一維已排序的陣列中搜尋值。</summary>
      <param name="array">要搜尋之已排序的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 為 <see langword="null" />，且 <paramref name="value" /> 的類型與 <paramref name="array" />的項目不相容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 是 <see langword="null" />，<paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，且搜尋時遇到未實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>使用 <see cref="T:System.Array" /> 的每個項目和指定之物件所實作的 <see cref="T:System.IComparable`1" /> 泛型介面，在整個已排序的一維陣列中搜尋特定的項目。</summary>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" /> (其以零為起始且已排序)。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 不實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，在整個已排序的一維陣列中搜尋值。</summary>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" /> (其以零為起始且已排序)。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable`1" /> 實作。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 為 <see langword="null" />，且 <paramref name="value" /> 的類型與 <paramref name="array" /> 的項目不相容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，且 <paramref name="T" /> 未實作 <see cref="T:System.IComparable`1" /> 泛型介面</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>使用 <see cref="T:System.Array" /> 的每個項目和指定值所實作的 <see cref="T:System.IComparable`1" /> 泛型介面，在一維已排序的陣列內某個範圍的項目中搜尋值。</summary>
      <param name="array">要搜尋的已排序且為一維之以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。  
-或- 
 <paramref name="value" /> 的類型與 <paramref name="array" /> 項目不相容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 不實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，在已排序的一維陣列內某範圍的項目中搜尋值。</summary>
      <param name="array">要搜尋的已排序且為一維之以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable`1" /> 實作。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>如果找到 <paramref name="value" />，則為指定的 <paramref name="array" /> 中指定的 <paramref name="value" /> 索引；否則為負數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 的一或多個項目，傳回的負數是大於 <paramref name="value" /> 的第一個項目索引的位元補數。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大於 <paramref name="array" /> 的所有項目，傳回的負數是 (最後一個項目索引加 1) 的位元補數。 如果以未排序的 <paramref name="array" /> 來呼叫這個方法，傳回值會不正確且可能傳回負數，即使 <paramref name="value" /> 出現在 <paramref name="array" /> 中也一樣。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。  
-或- 
 <paramref name="comparer" /> 是 <see langword="null" />，且 <paramref name="value" /> 的類型與 <paramref name="array" /> 的項目不相容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，且 <paramref name="T" /> 未實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>將陣列中的項目範圍設定為每個項目類型的預設值。</summary>
      <param name="array">項目需要加以清除的陣列。</param>
      <param name="index">要清除之元素範圍的起始索引。</param>
      <param name="length">要清除的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。  
-或- 
<paramref name="index" /> 和 <paramref name="length" /> 的總和大於 <paramref name="array" /> 的大小。</exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>建立 <see cref="T:System.Array" /> 的淺層複本。</summary>
      <returns>
        <see cref="T:System.Array" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的項目 (從指定的來源索引開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從指定的目的索引開始)。  如果此複本未完全成功，則保證所有的變更一定未完成。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">32 位元的整數，代表 <paramref name="sourceArray" /> 中的索引，由此開始複製。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">32 位元的整數，代表 <paramref name="destinationArray" /> 中的索引，由此開始儲存。</param>
      <param name="length">32 位元整數，表示要複製的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 <see langword="null" />。  
-或- 
 <paramref name="destinationArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的順位不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 類型不同於、也非衍生自 <paramref name="destinationArray" /> 類型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 至少有一個項目無法轉換成 <paramref name="destinationArray" /> 的類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小於 <paramref name="sourceArray" /> 的第一個維度下限。  
-或- 
 <paramref name="destinationIndex" /> 小於 <paramref name="destinationArray" /> 的第一個維度下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於從 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 結尾的項目數。  
-或- 
 <paramref name="length" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 結尾的項目數。</exception>
    </member>
    <member name="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})">
      <summary>將某一個類型的陣列轉換成另一個類型的陣列。</summary>
      <param name="array">要轉換成目標類型之以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="converter">
        <see cref="T:System.Converter`2" />，可將某一個類型的每一個項目轉換成另一個類型。</param>
      <typeparam name="TInput">來源陣列項目的類型。</typeparam>
      <typeparam name="TOutput">目標陣列項目的類型。</typeparam>
      <returns>目標類型的陣列，其中包含來源陣列中已轉換的項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="converter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的項目 (從第一個項目開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從第一個項目開始)。 長度已指定為 32 位元整數。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="length">32 位元整數，表示要複製的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 <see langword="null" />。  
-或- 
 <paramref name="destinationArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的順位不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 類型不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 至少有一個項目無法轉換成 <paramref name="destinationArray" /> 的類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於 <paramref name="sourceArray" /> 的項目數。  
-或- 
 <paramref name="length" /> 大於 <paramref name="destinationArray" /> 的項目數。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int64)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的項目 (從第一個項目開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從第一個項目開始)。 長度是以 64 位元整數方式指定。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="length">64 位元整數，表示要複製的項目數目。 這個整數必須在零和 <see cref="F:System.Int32.MaxValue" /> 之間 (包含頭尾)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 <see langword="null" />。  
-或- 
 <paramref name="destinationArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的順位不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 類型不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 至少有一個項目無法轉換成 <paramref name="destinationArray" /> 的類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於 0 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於 <paramref name="sourceArray" /> 的項目數。  
-或- 
 <paramref name="length" /> 大於 <paramref name="destinationArray" /> 的項目數。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的項目 (從指定的來源索引開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從指定的目的索引開始)。 長度與索引都指定為 32 位元的整數。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">32 位元的整數，代表 <paramref name="sourceArray" /> 中的索引，由此開始複製。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">32 位元的整數，代表 <paramref name="destinationArray" /> 中的索引，由此開始儲存。</param>
      <param name="length">32 位元整數，表示要複製的項目數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 <see langword="null" />。  
-或- 
 <paramref name="destinationArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的順位不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 類型不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 至少有一個項目無法轉換成 <paramref name="destinationArray" /> 的類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小於 <paramref name="sourceArray" /> 的第一個維度下限。  
-或- 
 <paramref name="destinationIndex" /> 小於 <paramref name="destinationArray" /> 的第一個維度下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於從 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 結尾的項目數。  
-或- 
 <paramref name="length" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 結尾的項目數。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
      <summary>從 <see cref="T:System.Array" /> 複製某範圍的項目 (從指定的來源索引開始)，並且將它們貼至另一個 <see cref="T:System.Array" /> (從指定的目的索引開始)。 長度與索引都指定為 64 位元的整數。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">64 位元的整數，代表 <paramref name="sourceArray" /> 中的索引，由此開始複製。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">64 位元的整數，代表 <paramref name="destinationArray" /> 中的索引，由此開始儲存。</param>
      <param name="length">64 位元整數，表示要複製的項目數目。 這個整數必須在零和 <see cref="F:System.Int32.MaxValue" /> 之間 (包含頭尾)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 <see langword="null" />。  
-或- 
 <paramref name="destinationArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的順位不同。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 類型不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 至少有一個項目無法轉換成 <paramref name="destinationArray" /> 的類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 超出 <paramref name="sourceArray" /> 的有效索引範圍。  
-或- 
 <paramref name="destinationIndex" /> 超出 <paramref name="destinationArray" /> 的有效索引範圍。  
-或- 
 <paramref name="length" /> 小於 0 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於從 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" />結尾的項目數。  
-或- 
 <paramref name="length" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 結尾的項目數。</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>將目前一維陣列的所有項目複製到指定的一維陣列 (從指定的目的陣列索引開始)。 索引已指定為 32 位元整數。</summary>
      <param name="array">一維陣列，從目前陣列複製過來的項目之目的端。</param>
      <param name="index">32 位元的整數，代表 <paramref name="array" /> 中的索引，由此開始複製。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。  
-或- 
來源陣列中的項目數大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用項目數。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">來源 <see cref="T:System.Array" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
      <exception cref="T:System.RankException">來源陣列是多維。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Array" /> 中至少有一個項目無法轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int64)">
      <summary>將目前一維陣列的所有項目複製到指定的一維陣列 (從指定的目的陣列索引開始)。 索引已指定為 64 位元整數。</summary>
      <param name="array">一維陣列，從目前陣列複製過來的項目之目的端。</param>
      <param name="index">64 位元的整數，代表 <paramref name="array" /> 中的索引，由此開始複製。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="array" /> 的有效索引範圍。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。  
-或- 
來源陣列中的項目數大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用項目數。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">來源 <see cref="T:System.Array" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
      <exception cref="T:System.RankException">來源 <see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Array" /> 中至少有一個項目無法轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>建立指定 <see cref="T:System.Array" /> 和長度的一維 <see cref="T:System.Type" /> (具有以零起始的索引)。</summary>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length">要建立的 <see cref="T:System.Array" /> 的大小。</param>
      <returns>新的一維 <see cref="T:System.Array" />，具有指定的長度和指定的 <see cref="T:System.Type" />，並使用以零起始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。 例如，<see cref="T:System.Void" /> 不受支援。  
-或- 
 <paramref name="elementType" /> 是開放式泛型類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
      <summary>建立指定 <see cref="T:System.Type" /> 和維度長度的二維 <see cref="T:System.Array" /> (具有以零為起始的索引)。</summary>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length1">要建立之 <see cref="T:System.Array" /> 的第一個維度大小。</param>
      <param name="length2">要建立之 <see cref="T:System.Array" /> 的第二個維度大小。</param>
      <returns>新的二維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度，並使用以零為起始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。 例如，<see cref="T:System.Void" /> 不受支援。  
-或- 
 <paramref name="elementType" /> 是開放式泛型類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> 小於零。  
-或- 
 <paramref name="length2" /> 小於零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
      <summary>建立指定 <see cref="T:System.Type" /> 和維度長度的三維 <see cref="T:System.Array" /> (具有以零為起始的索引)。</summary>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length1">要建立之 <see cref="T:System.Array" /> 的第一個維度大小。</param>
      <param name="length2">要建立的 <see cref="T:System.Array" /> 的第二個維度大小。</param>
      <param name="length3">要建立的 <see cref="T:System.Array" /> 的第三個維度大小。</param>
      <returns>指定之 <see cref="T:System.Type" /> 的新三維 <see cref="T:System.Array" />，且每個維度具有指定的長度，並使用以零為起始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。 例如，<see cref="T:System.Void" /> 不受支援。  
-或- 
 <paramref name="elementType" /> 是開放式泛型類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> 小於零。  
-或- 
 <paramref name="length2" /> 小於零。  
-或- 
 <paramref name="length3" /> 小於零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>建立指定 <see cref="T:System.Array" /> 和維度長度的多維 <see cref="T:System.Type" /> (具有以零起始的索引)。 維度長度已指定在 32 位元整數的陣列中。</summary>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">32 位元整數的陣列，代表 <see cref="T:System.Array" /> 所建立之每個維度的大小。</param>
      <returns>新的多維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度，並使用以零起始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 <see langword="null" />。  
-或- 
 <paramref name="lengths" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。  
-或- 
<paramref name="lengths" /> 陣列包含少於一個項目。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。 例如，<see cref="T:System.Void" /> 不受支援。  
-或- 
 <paramref name="elementType" /> 是開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值小於零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>建立指定 <see cref="T:System.Type" /> 和維度長度的多維 <see cref="T:System.Array" /> (具有指定的下限)。</summary>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一維陣列，包含要建立的 <see cref="T:System.Array" /> 的每個維度大小。</param>
      <param name="lowerBounds">一維陣列，包含要建立的 <see cref="T:System.Array" /> 的每個維度下限 (起始索引)。</param>
      <returns>新的多維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度和下限。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 <see langword="null" />。  
-或- 
 <paramref name="lengths" /> 為 <see langword="null" />。  
-或- 
 <paramref name="lowerBounds" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。  
-或- 
<paramref name="lengths" /> 陣列包含少於一個項目。  
-或- 
<paramref name="lengths" /> 和 <paramref name="lowerBounds" /> 陣列未包含相同數目的項目。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。 例如，<see cref="T:System.Void" /> 不受支援。  
-或- 
 <paramref name="elementType" /> 是開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值小於零。  
-或- 
<paramref name="lowerBounds" /> 中的任何值非常大，使用維度的下限和長度總和大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int64[])">
      <summary>建立指定 <see cref="T:System.Array" /> 和維度長度的多維 <see cref="T:System.Type" /> (具有以零起始的索引)。 維度長度是在 64 位元整數的陣列中指定的。</summary>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">64 位元整數的陣列，代表要建立的 <see cref="T:System.Array" /> 的每個維度大小。 陣列中的每一個整數必須在零和 <see cref="F:System.Int32.MaxValue" /> 之間 (包含頭尾)。</param>
      <returns>新的多維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度，並使用以零起始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 <see langword="null" />。  
-或- 
 <paramref name="lengths" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。  
-或- 
<paramref name="lengths" /> 陣列包含少於一個項目。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <paramref name="elementType" />。 例如，<see cref="T:System.Void" /> 不受支援。  
-或- 
 <paramref name="elementType" /> 是開放式泛型類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值小於零或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Array.Empty``1">
      <summary>傳回空陣列。</summary>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>空的陣列。</returns>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>判斷指定的陣列是否包含符合指定之述詞 (Predicate) 所定義的條件之元素。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義搜尋元素之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>如果 <paramref name="array" /> 包含的一個或多個元素符合指定之述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0)">
      <param name="array" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)">
      <param name="array" />
      <param name="value" />
      <param name="startIndex" />
      <param name="count" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內第一個相符的項目。</summary>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="match">定義要搜尋項目之條件的述詞。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>第一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>擷取符合指定之述詞所定義的條件之所有項目。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義搜尋元素之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>
        <see cref="T:System.Array" />，其中包含符合指定之述詞所定義的條件之所有元素 (如果有找到的話)，否則為空的 <see cref="T:System.Array" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Array" /> 中從指定之索引開始，且包含指定之項目數目的項目範圍內第一個符合項目之以零為起始的索引。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。  
-或- 
 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Array" /> 內 (從指定之索引延伸到最後一個項目)，於某項目範圍中第一次出現之以零為起始的索引。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回整個 <see cref="T:System.Array" /> 內第一次出現之以零為起始的索引。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>第一次出現符合 <paramref name="match" /> 所定義之條件的項目以零為起始的索引 (如有找到)；否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內最後一個相符的項目。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>最後一個符合指定之述詞所定義的條件之項目 (如有找到)，否則為類型 <paramref name="T" /> 的預設值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中包含指定之元素數目，且結束於指定之索引的元素範圍內最後一個符合項目之以零起始的索引。</summary>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。  
-或- 
 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之項目，並傳回 <see cref="T:System.Array" /> 中從第一個項目延伸到指定之索引的項目範圍內，最後一個符合項目之以零為起始的索引。</summary>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內最後一個相符項目之以零起始的索引。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="match">定義要搜尋項目之條件的 <see cref="T:System.Predicate`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>符合 <paramref name="match" /> 所定義條件的元素，最後一次出現項目之以零為起始的索引 (若有找到)，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>在指定之陣列的每一個元素上執行指定之動作。</summary>
      <param name="array">以零起始的一維 <see cref="T:System.Array" />，要在其元素上執行動作。</param>
      <param name="action">要在 <paramref name="array" /> 的每一個元素上執行的 <see cref="T:System.Action`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="action" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Array" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Array" />。</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>取得代表 <see cref="T:System.Array" /> 指定維度之元素數目的 32 位元整數。</summary>
      <param name="dimension">需要決定長度之 <see cref="T:System.Array" /> 的以零起始維度。</param>
      <returns>32 位元的整數，代表指定維度的元素數目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。  
-或- 
 <paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetLongLength(System.Int32)">
      <summary>取得代表 <see cref="T:System.Array" /> 指定維度之元素數目的 64 位元整數。</summary>
      <param name="dimension">需要決定長度之 <see cref="T:System.Array" /> 的以零起始維度。</param>
      <returns>64 位元的整數，代表指定維度的元素數目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。  
-或- 
 <paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>取得陣列中指定之維度的第一個項目的索引。</summary>
      <param name="dimension">需要決定開始索引之陣列的以零起始維度。</param>
      <returns>陣列中指定之維度的第一個項目的索引。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。  
-或- 
 <paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>取得陣列中指定之維度的最後一個項目的索引。</summary>
      <param name="dimension">需要決定上限之陣列的以零起始維度。</param>
      <returns>陣列中指定之維度的最後一個項目的索引，如果指定之維度是空的則為 -1。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。  
-或- 
 <paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>取得一維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引已指定為 32 位元整數。</summary>
      <param name="index">32 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的位置。</param>
      <returns>一維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32)">
      <summary>取得二維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引已指定為 32 位元整數。</summary>
      <param name="index1">32 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">32 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第二維索引。</param>
      <returns>二維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好二維的維度。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超過目前 <see cref="T:System.Array" /> 之對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)">
      <summary>取得三維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引已指定為 32 位元整數。</summary>
      <param name="index1">32 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">32 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第二維索引。</param>
      <param name="index3">32 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第三維索引。</param>
      <returns>三維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好三維的維度。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超過目前 <see cref="T:System.Array" /> 對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>取得多維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引已指定為 32 位元整數的陣列。</summary>
      <param name="indices">32 位元整數的一維陣列，代表索引，指定要取得的 <see cref="T:System.Array" /> 元素的位置。</param>
      <returns>多維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的元素數目。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任一元素超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64)">
      <summary>取得一維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引已指定為 64 位元整數。</summary>
      <param name="index">64 位元整數，代表要取得之 <see cref="T:System.Array" /> 元素的位置。</param>
      <returns>一維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64)">
      <summary>取得二維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引是以 64 位元整數的方式指定的。</summary>
      <param name="index1">64 位元整數，代表要取得的 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">64 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第二維索引。</param>
      <returns>二維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好二維的維度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超過目前 <see cref="T:System.Array" /> 之對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)">
      <summary>取得三維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引是以 64 位元整數的方式指定的。</summary>
      <param name="index1">64 位元整數，代表要取得的 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">64 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第二維索引。</param>
      <param name="index3">64 位元整數，表示要取得的 <see cref="T:System.Array" /> 元素的第三維索引。</param>
      <returns>三維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好三維的維度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超過目前 <see cref="T:System.Array" /> 對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64[])">
      <summary>取得多維 <see cref="T:System.Array" /> 中位於指定位置的值。 索引是以 64 位元整數的陣列的方式指定的。</summary>
      <param name="indices">64 位元整數的一維陣列，代表指定要取得之 <see cref="T:System.Array" /> 元素位置的索引。</param>
      <returns>多維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的元素數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indices" /> 中的任一元素超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>搜尋指定的物件，並傳回一維陣列中第一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <returns>如有找到，則為 <paramref name="array" /> 中 <paramref name="value" /> 第一個相符項目的索引；否則為陣列的下限減 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>在一維陣列的元素範圍中搜尋指定的物件，並傳回其第一次出現的索引。 此範圍從指定的索引延伸到陣列的結尾。</summary>
      <param name="array">要搜尋的一維陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋的起始索引。 0 (零) 在空白陣列中有效。</param>
      <returns>如有找到，則為 <paramref name="array" /> 中從 <paramref name="startIndex" /> 延伸至最後一個項目的項目範圍內，第一次出現之 <paramref name="value" /> 的索引；否則為陣列的下限減 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>在一維陣列的項目範圍中搜尋指定的物件，並傳回其第一次出現的索引。 此範圍的延伸起點為指定項目數的指定索引。</summary>
      <param name="array">要搜尋的一維陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋的起始索引。 0 (零) 在空白陣列中有效。</param>
      <param name="count">要搜尋的項目數目。</param>
      <returns>如有找到，則為 <paramref name="array" /> 中從索引 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> -1 的範圍內，第一次出現之 <paramref name="value" /> 的索引；否則為陣列的下限減 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。  
-或- 
 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>搜尋指定的物件，並傳回一維陣列中第一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>整個 <paramref name="array" /> 中第一次出現 <paramref name="value" /> 之以零為起始的索引；如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>在一維陣列的元素範圍中搜尋指定的物件，並傳回其第一次出現的索引。 此範圍從指定的索引延伸到陣列的結尾。</summary>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。 0 (零) 在空白陣列中有效。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>
        <paramref name="array" /> 中從 <paramref name="startIndex" /> 到最後一個項目的項目範圍內，第一次出現 <paramref name="value" /> 之以零為起始的索引；如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>在一維陣列的元素範圍中搜尋指定的物件，並傳回其第一次出現的索引。 此範圍的延伸起點為指定項目數的指定索引。</summary>
      <param name="array">要搜尋的一維、以零為起始的陣列。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。 0 (零) 在空白陣列中有效。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>在 <paramref name="array" /> 中從 <paramref name="startIndex" /> 開始且包含 <paramref name="count" /> 中指定項目數的項目範圍內，第一次出現 <paramref name="value" /> 之以零為起始的索引；如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。  
-或- 
 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>呼叫實值型別的無參數建構函式，初始化實值型別 <see cref="T:System.Array" /> 的每個項目。</summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Array" /> 是否有固定的大小。</summary>
      <returns>所有陣列的這個屬性永遠為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Array" /> 是否唯讀。</summary>
      <returns>所有陣列的這個屬性永遠為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Array" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>所有陣列的這個屬性永遠為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>搜尋指定物件，並且傳回整個一維 <see cref="T:System.Array" /> 中最後一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <returns>如果找到的話，則為整個 <paramref name="value" /> 中 <paramref name="array" /> 的最後一個相符項目的索引，否則為陣列的下限減 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜尋指定的物件，並傳回一維 <see cref="T:System.Array" /> 內從第一個元素延伸至指定之索引的元素範圍中，最後一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">反向搜尋的起始索引。</param>
      <returns>如果找到的話，則為 <paramref name="value" /> 中從第一個元素延伸到 <paramref name="array" /> 的元素範圍內，<paramref name="startIndex" /> 的最後一個相符項目的索引，否則為陣列的下限減 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回一維 <see cref="T:System.Array" /> 中包含指定之元素數且結束於指定之索引的元素範圍內，最後一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">反向搜尋的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>如果找到的話，則為在 <paramref name="value" /> 中包含 <paramref name="array" /> 內指定之元素數且結束於 <paramref name="count" /> 的元素範圍內，<paramref name="startIndex" /> 的最後一個相符項目之索引，否則為陣列的下限減 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。  
-或- 
 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Array" /> 中最後一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>整個 <paramref name="array" /> 中最後一次出現 <paramref name="value" /> 之以零為起始的索引；如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>搜尋指定的物件，並傳回在 <see cref="T:System.Array" /> 內從第一個元素延伸至指定之索引的元素範圍中，最後一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>
        <paramref name="array" /> 中從第一個項目到 <paramref name="startIndex" /> 的項目範圍內，最後一次出現 <paramref name="value" /> 之以零為起始的索引；如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回 <see cref="T:System.Array" /> 中包含指定之元素數且結束於指定之索引的元素範圍內，最後一個相符項目的索引。</summary>
      <param name="array">要搜尋的一維且以零為起始的 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中尋找的物件。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>在 <paramref name="array" /> 中包含 <paramref name="count" /> 中指定項目數且結束於 <paramref name="startIndex" /> 的項目範圍內，最後一次出現 <paramref name="value" /> 之以零為起始的索引；如未找到則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="array" /> 的有效索引範圍。  
-或- 
 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>取得 <see cref="T:System.Array" /> 所有維度的元素總數。</summary>
      <returns>
        <see cref="T:System.Array" /> 所有維度的項目總數；如果陣列中沒有項目，則為零。</returns>
      <exception cref="T:System.OverflowException">陣列是多維的且包含多個<see cref="F:System.Int32.MaxValue" />項目。</exception>
    </member>
    <member name="P:System.Array.LongLength">
      <summary>取得代表 <see cref="T:System.Array" /> 所有維度的元素總數之 64 位元整數。</summary>
      <returns>64 位元的整數，代表 <see cref="T:System.Array" /> 所有維度的元素總數。</returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>取得 <see cref="T:System.Array" /> 的陣序 (維度數目)。 例如，一維陣列傳回 1，二維陣列傳回 2，依此類推。</summary>
      <returns>
        <see cref="T:System.Array" /> 的陣序規範 (維度數目)。</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>將一維陣列中的項目數目變更為指定的新大小。</summary>
      <param name="array">要調整大小之以零為起始的一維陣列，或是 <see langword="null" />，表示要以指定之大小建立新陣列。</param>
      <param name="newSize">新陣列的大小。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> 小於零。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>反轉整個一維 <see cref="T:System.Array" /> 中的元素順序。</summary>
      <param name="array">要反轉的一維 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>將一維 <see cref="T:System.Array" /> 中某個範圍的元素之元素順序顛倒。</summary>
      <param name="array">要反轉的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要反轉之區段的起始索引。</param>
      <param name="length">區段中要反轉的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。</exception>
    </member>
    <member name="M:System.Array.Reverse``1(``0[])">
      <param name="array" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Reverse``1(``0[],System.Int32,System.Int32)">
      <param name="array" />
      <param name="index" />
      <param name="length" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>設定一維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引已指定為 32 位元整數。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index">32 位元整數，表示要設定的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 無法轉換成目前 <see cref="T:System.Array" />的項目類型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)">
      <summary>設定二維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引已指定為 32 位元整數。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">32 位元整數，表示要設定的 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">32 位元整數，表示要設定的 <see cref="T:System.Array" /> 元素的第二維索引。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好二維的維度。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超過目前 <see cref="T:System.Array" /> 之對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
      <summary>設定三維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引已指定為 32 位元整數。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">32 位元整數，表示要設定的 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">32 位元整數，表示要設定的 <see cref="T:System.Array" /> 項目的第二維索引。</param>
      <param name="index3">32 位元整數，表示要設定的 <see cref="T:System.Array" /> 元素的第三維索引。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好三維的維度。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超過目前 <see cref="T:System.Array" /> 對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>設定多維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引已指定為 32 位元整數的陣列。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="indices">32 位元整數的一維陣列，代表指定要設定之元素位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的元素數目。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任一元素超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64)">
      <summary>設定一維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引已指定為 64 位元整數。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index">64 位元整數，表示要設定的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 無法轉換成目前 <see cref="T:System.Array" />的項目類型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64)">
      <summary>設定二維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引是以 64 位元整數的方式指定的。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">64 位元整數，表示要設定之 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">64 位元整數，表示要設定之 <see cref="T:System.Array" /> 元素的第二維索引。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好二維的維度。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超過目前 <see cref="T:System.Array" /> 之對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)">
      <summary>設定三維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引是以 64 位元整數的方式指定的。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">64 位元整數，表示要設定之 <see cref="T:System.Array" /> 元素的第一維索引。</param>
      <param name="index2">64 位元整數，表示要設定之 <see cref="T:System.Array" /> 元素的第二維索引。</param>
      <param name="index3">64 位元整數，表示要設定之 <see cref="T:System.Array" /> 元素的第三維索引。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好三維的維度。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超過目前 <see cref="T:System.Array" /> 對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64[])">
      <summary>設定多維 <see cref="T:System.Array" /> 中指定位置之元素的值。 索引是以 64 位元整數的陣列的方式指定的。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="indices">64 位元整數的一維陣列，代表指定要設定之元素位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的元素數目。</exception>
      <exception cref="T:System.InvalidCastException">不可以將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indices" /> 中的任一元素超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素的 <see cref="T:System.IComparable" /> 實作，排序整個一維 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>使用每個索引鍵的 <see cref="T:System.Array" /> 實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的 <see cref="T:System.IComparable" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。  
-或- 
 <see langword="null" /> 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。  
-或- 
<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一或多個元素不會實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Array" />，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的<see cref="T:System.Collections.IComparer" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。  
-或- 
 <see langword="null" /> 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。  
-或- 
<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。  
-或- 
<paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一或多個元素不會實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>使用每個索引鍵的 <see cref="T:System.Array" /> 實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的 <see cref="T:System.IComparable" /> 物件中某個範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。  
-或- 
 <see langword="null" /> 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。  
-或- 
<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="keys" /> 的長度大於 <paramref name="items" />的長度。  
-或- 
 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效範圍。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="items" /><see cref="T:System.Array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一或多個元素不會實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Array" />，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的 <see cref="T:System.Collections.IComparer" /> 物件中某範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。  
-或- 
 <see langword="null" /> 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多維的。  
-或- 
<paramref name="items" /><see cref="T:System.Array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。  
-或- 
 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效範圍。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="items" /><see cref="T:System.Array" /> 中的有效範圍。  
-或- 
<paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一或多個元素不會實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Array" />，排序一維 <see cref="T:System.Collections.IComparer" /> 中的元素。</summary>
      <param name="array">要排序的一維陣列。</param>
      <param name="comparer">比較元素時所要使用的實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素的 <see cref="T:System.IComparable" /> 實作，排序一維 <see cref="T:System.Array" /> 中某個元素範圍內的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Array" />，排序一維 <see cref="T:System.Collections.IComparer" /> 中元素範圍內的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">比較項目時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。  
-或- 
 <see langword="null" /> 表示會使用每個項目的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多維的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。  
-或- 
<paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素之 <see cref="T:System.IComparable`1" /> 泛型介面實作，排序整個 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Array" /> 泛型介面，排序 <see cref="T:System.Collections.Generic.IComparer`1" /> 中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 <see langword="null" /> 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>使用指定的 <see cref="T:System.Array" />，排序 <see cref="T:System.Comparison`1" /> 中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="comparison">比較項目時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="comparison" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparison" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素之 <see cref="T:System.IComparable`1" /> 泛型介面實作，排序 <see cref="T:System.Array" /> 中某個元素範圍中的元素。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Array" /> 泛型介面，對 <see cref="T:System.Collections.Generic.IComparer`1" /> 中的某個元素範圍內的元素進行排序。</summary>
      <param name="array">要排序之以零起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 <see langword="null" /> 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="array" /> 中的有效範圍。  
-或- 
<paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="array" /> 中的一個或多個元素沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>使用每個索引鍵的 <see cref="T:System.Array" /> 泛型介面實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.IComparable`1" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；<see langword="null" /> 則表示只會排序 <paramref name="keys" />。</param>
      <typeparam name="TKey">索引鍵陣列元素的型別。</typeparam>
      <typeparam name="TValue">項目陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="keys" /> 下限與 <paramref name="items" />的下限不相符。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個元素不會實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Array" /> 泛型介面，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.Collections.Generic.IComparer`1" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；<see langword="null" /> 則表示只會排序 <paramref name="keys" />。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 <see langword="null" /> 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="TKey">索引鍵陣列元素的型別。</typeparam>
      <typeparam name="TValue">項目陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="keys" /> 下限與 <paramref name="items" />的下限不相符。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。  
-或- 
<paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一或多個元素未實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>使用每個索引鍵的 <see cref="T:System.Array" /> 泛型介面實作，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.IComparable`1" /> 物件中某個範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；<see langword="null" /> 則表示只會排序 <paramref name="keys" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <typeparam name="TKey">索引鍵陣列元素的型別。</typeparam>
      <typeparam name="TValue">項目陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。  
-或- 
 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效範圍。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="items" /><see cref="T:System.Array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個元素不會實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Array" /> 泛型介面，根據第一個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.Collections.Generic.IComparer`1" /> 物件中某範圍的元素 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；<see langword="null" /> 則表示只會排序 <paramref name="keys" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">在比較項目時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 <see langword="null" /> 以使用每個項目的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="TKey">索引鍵陣列元素的型別。</typeparam>
      <typeparam name="TValue">項目陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。  
-或- 
 <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，並且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。  
-或- 
 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效範圍。  
-或- 
 <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未指定 <paramref name="items" /><see cref="T:System.Array" /> 中的有效範圍。  
-或- 
<paramref name="comparer" /> 的實作在排序期間造成錯誤。 例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 <see langword="null" />，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一或多個元素未實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Array" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Array" /> 的物件。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>取得 <see cref="T:System.Array" /> 中所包含的項目數。</summary>
      <returns>集合中所包含的項目數目。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="value">要加入 <see cref="T:System.Collections.IList" /> 的物件。</param>
      <returns>不支援將值加入陣列。 沒有傳回值。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>從 <see cref="T:System.Collections.IList" /> 中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>判斷某項目是否在 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要在目前清單中尋找的物件。 對於參考型別而言，要尋找的元素可以是 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="value" />，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value">要在目前清單中尋找的物件。</param>
      <returns>如果在清單中有找到，則為值的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">應該插入 <paramref name="value" /> 處的索引。</param>
      <param name="value">要插入的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 是 <see cref="T:System.Collections.IList" /> 中的 null 參考。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定的元素之索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不具有剛好一維的維度。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Collections.IList" /> 項目。</summary>
      <param name="index">要移除的項目索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">索引不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>判斷目前的集合物件在排序次序中位於另一個物件之前、相同位置或之後。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">將目前的物件與 <paramref name="other" /> 相比較的物件。</param>
      <returns>整數，表示目前集合物件與 other 的關聯性，如下表所示。  
  傳回值 
  說明 
  -1 
  目前的執行個體在 <paramref name="other" /> 之前。  

  0 
  目前的執行個體與 <paramref name="other" /> 相等。  

  1 
  目前的執行個體在 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>判斷物件與目前的執行個體是否相等。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">物件，判斷目前的執行個體與 <paramref name="other" /> 是否相等。</param>
      <returns>如果兩個物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <param name="comparer">物件，會計算目前物件的雜湊碼。</param>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>判斷陣列中的每一個元素是否符合指定之述詞所定義的條件。</summary>
      <param name="array">要檢查之以零起始的一維 <see cref="T:System.Array" /> 所根據的條件。</param>
      <param name="match">述詞，可定義檢查項目所根據的條件。</param>
      <typeparam name="T">陣列項目的類型。</typeparam>
      <returns>如果 <paramref name="array" /> 中的每一個元素都符合指定之述詞所定義的條件，則為 <see langword="true" />，否則為 <see langword="false" />。 如果陣列中沒有元素，則傳回值為 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。  
-或- 
 <paramref name="match" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>分隔一維陣列的區段。</summary>
      <typeparam name="T">陣列區段中的項目類型。</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 結構的新執行個體，這個新執行個體會分隔指定陣列中的所有項目。</summary>
      <param name="array">要包裝的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 結構的新執行個體，這個新執行個體會分隔指定陣列中的指定項目範圍。</summary>
      <param name="array">包含要分隔之項目範圍的陣列。</param>
      <param name="offset">陣列中第一個項目的以零起始的索引。</param>
      <param name="count">範圍中的項目數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效範圍。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>取得原始陣列，這個陣列包含陣列區段分隔的項目範圍。</summary>
      <returns>傳遞給建構函式的原始陣列，並且這個陣列包含 <see cref="T:System.ArraySegment`1" /> 分隔的範圍。</returns>
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[])">
      <param name="destination" />
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[],System.Int32)">
      <param name="destination" />
      <param name="destinationIndex" />
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(System.ArraySegment{`0})">
      <param name="destination" />
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>取得陣列區段分隔範圍中的項目數目。</summary>
      <returns>
        <see cref="T:System.ArraySegment`1" /> 分隔範圍中的項目數目。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Empty" />
    <member name="T:System.ArraySegment`1.Enumerator">
      <typeparam name="T" />
    </member>
    <member name="P:System.ArraySegment`1.Enumerator.Current" />
    <member name="M:System.ArraySegment`1.Enumerator.Dispose" />
    <member name="M:System.ArraySegment`1.Enumerator.MoveNext" />
    <member name="P:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Current" />
    <member name="M:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Reset" />
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>判斷指定的 <see cref="T:System.ArraySegment`1" /> 結構和目前的執行個體是否相等。</summary>
      <param name="obj">要與目前執行個體比較的結構。</param>
      <returns>如果指定的 <see cref="T:System.ArraySegment`1" /> 結構和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>判斷指定的物件是否和目前的執行個體相等。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>如果指定的物件是 <see cref="T:System.ArraySegment`1" /> 結構，並且和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.GetEnumerator" />
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>取得陣列區段分隔範圍中的第一個項目位置，相對於原始陣列的開頭。</summary>
      <returns>
        <see cref="T:System.ArraySegment`1" /> 分隔範圍中的第一個項目位置，相對於原始陣列的開頭。</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指出兩個 <see cref="T:System.ArraySegment`1" /> 結構是否相等。</summary>
      <param name="a">結構，位在相等運算子的左側。</param>
      <param name="b">相等運算子右側的結構。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="a" />，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Implicit(T[])~System.ArraySegment{`0}">
      <param name="array" />
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指出兩個 <see cref="T:System.ArraySegment`1" /> 結構是否不相等。</summary>
      <param name="a">不等運算子左側的結構。</param>
      <param name="b">不等運算子右側的結構。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="a" />，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32,System.Int32)">
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至陣列區段。</summary>
      <param name="item">要加入至陣列區段的物件。</param>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>從陣列區段中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>判斷此陣列區段是否包含特定的值。</summary>
      <param name="item">要在陣列區段中尋找的物件。</param>
      <returns>如果在陣列區段中找到 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出陣列區段是否為唯讀。</summary>
      <returns>如果陣列區段是唯讀的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從陣列區段中移除第一次出現的特定物件。</summary>
      <param name="item">要從陣列區段中移除的物件。</param>
      <returns>如果已順利從陣列區段中移除 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。 如果在陣列區段中找不到 <paramref name="item" />，這個方法也會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回列舉值，該值可逐一查看陣列區段。</summary>
      <returns>可用來逐一查看陣列區段的列舉值。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>判斷陣列區段中特定項目的索引。</summary>
      <param name="item">要在陣列區段中尋找的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>將項目插入位於指定之索引處的陣列區段中。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入陣列區段中的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是陣列區段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">已設定該屬性，陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>在指定的索引處移除陣列區段項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是陣列區段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">此陣列區段是唯讀的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>取得位於陣列區段之指定索引位置的項目。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回列舉值，該值可逐一查看陣列區段。</summary>
      <returns>可用來逐一查看陣列區段的列舉值。</returns>
    </member>
    <member name="M:System.ArraySegment`1.ToArray" />
    <member name="T:System.ArrayTypeMismatchException">
      <summary>嘗試在陣列中儲存錯誤型別的元素時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>參考要在對應之非同步 (Asynchronous) 作業完成時呼叫的方法。</summary>
      <param name="ar">非同步作業的結果。</param>
    </member>
    <member name="T:System.Attribute">
      <summary>代表自訂屬性的基底類別。</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與這個執行個體或 <see langword="null" /> 相比較的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="obj" /> 和這個執行個體是相同的類型並擁有完全相同的欄位值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>擷取套用至指定之組件的自訂屬性。 參數會指定組件，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>擷取套用至組件的自訂屬性。 參數會指定組件、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取套用至型別成員的自訂屬性。 參數會指定成員，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取套用至型別成員的自訂屬性。 參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>擷取套用至模組的自訂屬性。 參數會指定模組，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>擷取套用至模組的自訂屬性。 參數會指定模組、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取套用至方法參數的自訂屬性。 參數會指定方法參數，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取套用至方法參數的自訂屬性。 參數會指定方法參數、要搜尋的自訂屬性型別，以及是否要搜尋方法參數的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>擷取套用至組件的自訂屬性陣列。 參數會指定組件。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>擷取套用至組件的自訂屬性陣列。 參數會指定組件和忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>擷取套用至組件的自訂屬性陣列。 參數會指定組件，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="attributeType" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>擷取套用至組件的自訂屬性陣列。 參數會指定組件、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="attributeType" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>擷取套用至型別成員的自訂屬性陣列。 參數會指定成員。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取套用至型別成員的自訂屬性陣列。 參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取套用至型別成員的自訂屬性陣列。 參數會指定成員，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <param name="type">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="type" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取套用至型別成員的自訂屬性陣列。 參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <param name="type">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="type" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>擷取套用至模組的自訂屬性陣列。 參數會指定模組。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>擷取套用至模組的自訂屬性陣列。 參數會指定模組和忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>擷取套用至模組的自訂屬性陣列。 參數會指定模組，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="attributeType" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>擷取套用至模組的自訂屬性陣列。 參數會指定模組、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="attributeType" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>擷取套用至方法參數的自訂屬性陣列。 參數會指定方法參數。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取套用至方法參數的自訂屬性陣列。 參數會指定方法參數，以及是否要搜尋方法參數的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>包含套用至 <paramref name="element" /> 之自訂屬性的 <see cref="T:System.Attribute" /> 陣列；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> 的 <see cref="P:System.Reflection.ParameterInfo.Member" /> 屬性為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取套用至方法參數的自訂屬性陣列。 參數會指定方法參數，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="attributeType" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取套用至方法參數的自訂屬性陣列。 參數會指定方法參數、要搜尋的自訂屬性型別，以及是否要搜尋方法參數的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="attributeType" /> 的型別 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Attribute.IsDefaultAttribute">
      <summary>在衍生類別中覆寫時，表示這個執行個體的值是衍生類別的預設值。</summary>
      <returns>如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>判斷是否將任何自訂屬性套用至組件。 參數會指定組件，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至組件。 參數會指定組件、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>判斷是否將任何自訂屬性套用至型別成員。 參數會指定成員，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至型別成員。 參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述建構函式、事件、欄位、方法或類別的屬性 (Property) 成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>判斷是否將任何指定型別的自訂屬性套用至模組。 參數會指定模組，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至模組。 參數會指定模組、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">這個參數會被忽略，且不會影響這個方法的作業。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>判斷是否將任何自訂屬性套用至方法參數。 參數會指定方法參數，以及要搜尋的自訂屬性型別。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至方法參數。 參數會指定方法參數、要搜尋的自訂屬性型別，以及是否要搜尋方法參數的祖系。</summary>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 <see langword="true" />，指定也會為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> 不是方法、建構函式或型別。</exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>在衍生類別中覆寫時，會傳回值，表示這個執行個體是否等於指定物件。</summary>
      <param name="obj">與 <see cref="T:System.Object" /> 的這個執行個體相互比較的 <see cref="T:System.Attribute" />。</param>
      <returns>如果這個執行個體等於 <paramref name="obj" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Attribute.TypeId">
      <summary>在衍生類別中實作時，取得這個 <see cref="T:System.Attribute" /> 的唯一識別碼。</summary>
      <returns>
        <see cref="T:System.Object" />，屬性的唯一識別項。</returns>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>指定有效套用屬性的應用程式項目。</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>屬性可以套用至任何應用程式項目。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>屬性可以套用至組件。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>屬性可以套用至類別。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>屬性可以套用至建構函式。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>屬性可以套用至委派。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>屬性可以套用至列舉型別。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>屬性可以套用至事件。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>屬性可以套用至欄位。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>屬性可以套用至泛型參數。 此屬性目前僅適用於 C#、Microsoft Intermediate Language (MSIL) 和已發出的程式碼。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>屬性可以套用至介面。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>屬性可以套用至方法。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>屬性可以套用至模組。 <see langword="Module" /> 是指可攜式執行檔 (.dll 或 .exe)，且不是 Visual Basic 標準模組。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>屬性可以套用至參數。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>屬性 (Attibute) 可以套用至屬性 (Property)。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>屬性可以套用至傳回值。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>屬性可以套用至結構，也就是實值型別 (Value Type)。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>指定另一個屬性 (Attribute) 類別的使用方法。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>使用指定的 <see cref="T:System.AttributeUsageAttribute" /> 清單、<see cref="T:System.AttributeTargets" /> 值和 <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 值，初始化 <see cref="P:System.AttributeUsageAttribute.Inherited" /> 類別的新執行個體。</summary>
      <param name="validOn">使用位元的 OR 運算所結合的數值集，用來指示那個程式項目有效。</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>取得或設定布林值 (Boolean)，指出所指定屬性的幾個執行個體能否指定給單一程式項目。</summary>
      <returns>如果允許指定一個以上的執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>取得或設定 <see cref="T:System.Boolean" /> 值，判斷指示的屬性是否由衍伸類別繼承並覆寫成員。</summary>
      <returns>如果屬性可以由衍伸類別繼承並覆寫成員，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>取得一組數值，辨識哪些程式項目可套用所指定的屬性。</summary>
      <returns>一個或多個 <see cref="T:System.AttributeTargets" /> 值。 預設為 <see langword="All" />。</returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>當動態連結程式庫 (DLL) 或可執行程式的檔案映像無效時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和檔案名稱，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>取得造成這個例外狀況的檔案名稱。</summary>
      <returns>具有無效影像的檔案名稱；如果沒有檔案名稱傳遞給目前執行個體的建構函式，則為 Null 參考。</returns>
    </member>
    <member name="P:System.BadImageFormatException.FusionLog">
      <summary>取得描述為什麼組件 (Assembly) 載入失敗的記錄檔。</summary>
      <returns>
        <see langword="String" />，包含組件 (Assembly) 快取報告的錯誤。</returns>
    </member>
    <member name="M:System.BadImageFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用檔案名稱、組件快取記錄檔和額外的例外狀況資訊，來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>取得造成這個例外狀況的錯誤訊息和檔案名稱。</summary>
      <returns>字串，包含造成這個例外狀況的錯誤訊息和檔案名稱。</returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>傳回這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>字串，包含這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</returns>
    </member>
    <member name="T:System.Boolean">
      <summary>代表布林值 (<see langword="true" /> 或 <see langword="false" />)。</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>比較這個執行個體與指定的 <see cref="T:System.Boolean" /> 物件，並傳回整數，這個整數表示兩者彼此的關聯性。</summary>
      <param name="value">要與這個執行個體相比較的 <see cref="T:System.Boolean" /> 物件。</param>
      <returns>帶正負號的整數，表示這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  條件 
  小於零 
  這個執行個體是 <see langword="false" /> 而且 <paramref name="value" /> 是 <see langword="true" />。  

  零 
  這個執行個體和 <paramref name="value" /> 相同 (同為 <see langword="true" /> 或為 <see langword="false" />)。  

  大於零 
  這個執行個體是 <see langword="true" /> 而且 <paramref name="value" /> 是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回整數，這個整數表示兩者彼此的關聯性 (Relationship)。</summary>
      <param name="obj">要與這個執行個體相比較的物件，或為 <see langword="null" />。</param>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="obj" /> 的相對順序。  
  傳回值 
  條件 
  小於零 
  這個執行個體是 <see langword="false" /> 而且 <paramref name="obj" /> 是 <see langword="true" />。  

  零 
  這個執行個體和 <paramref name="obj" /> 相同 (同為 <see langword="true" /> 或為 <see langword="false" />)。  

  大於零 
  這個執行個體是 <see langword="true" /> 而且 <paramref name="obj" /> 是 <see langword="false" />。  

-或- 
 <paramref name="obj" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Boolean" />。</exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>傳回表示這個執行個體是否等於指定 <see cref="T:System.Boolean" /> 物件的值。</summary>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Boolean" /> 值。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" />，且具有與這個執行個體相同的值，則為 <see cref="T:System.Boolean" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>將布林值 <see langword="false" /> 表示為字串。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.Boolean" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>傳回 <see cref="T:System.Boolean" /> 實值類型的類型程式碼。</summary>
      <returns>列舉的常數 <see cref="F:System.TypeCode.Boolean" />。</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.ReadOnlySpan{System.Char})">
      <param name="value" />
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>將指定之邏輯值的字串表示，轉換為相等的 <see cref="T:System.Boolean" />。</summary>
      <param name="value">字串，包含要轉換的值。</param>
      <returns>如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.TrueString" />，則為 <see langword="true" />；如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.FalseString" /> 則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">您嘗試將 <see cref="T:System.Boolean" /> 值轉換成 <see cref="T:System.Char" /> 值。 不支援這個轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">您嘗試將 <see cref="T:System.Boolean" /> 值轉換成 <see cref="T:System.DateTime" /> 值。 不支援這個轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">所要的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關特定文化特性資訊。</param>
      <returns>指定類型的物件，其值等於這個 <see langword="Boolean" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">不支援要求的類型轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果這個執行個體為 <see langword="true" />，則為 1，否則為 0。</returns>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>將這個執行個體的值轉換為它的對等字串表示 ("True" 或 "False")。</summary>
      <returns>如果這個執行個體的值是 <see langword="true" />，則為 "True" (<see cref="F:System.Boolean.TrueString" /> 屬性值)；如果這個執行個體的值是 <see langword="false" />，則為 "False" (<see cref="F:System.Boolean.FalseString" /> 屬性值)。</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>將這個執行個體的值轉換為它的對等字串表示 ("True" 或 "False")。</summary>
      <param name="provider">(已保留) <see cref="T:System.IFormatProvider" /> 物件。</param>
      <returns>如果這個執行個體的值是 <see cref="F:System.Boolean.TrueString" />，則為 <see langword="true" />；如果這個執行個體的值是 <see cref="F:System.Boolean.FalseString" /> 則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>將布林值 <see langword="true" /> 表示為字串。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Boolean.TryFormat(System.Span{System.Char},System.Int32@)">
      <param name="destination" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Boolean.TryParse(System.ReadOnlySpan{System.Char},System.Boolean@)">
      <param name="value" />
      <param name="result" />
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>嘗試將指定之邏輯值的字串表示轉換成對等的 <see cref="T:System.Boolean" />。 傳回值會指出轉換成功或失敗。</summary>
      <param name="value">字串，包含要轉換的值。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則會在 <see langword="true" /> 等於 <paramref name="value" /> 時包含 <see cref="F:System.Boolean.TrueString" />，或在 <see langword="false" /> 等於 <paramref name="value" /> 時包含 <see cref="F:System.Boolean.FalseString" />。 如果轉換失敗，則包含 <see langword="false" />。 如果 <paramref name="value" /> 為 <see langword="null" />，或者不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 欄位的值，則轉換失敗。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffer">
      <summary>操作基本類型的陣列。</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>在從特定位移 (Offset) 開始的來源陣列中，複製指定的位元組數到從特定位移開始的目的陣列上。</summary>
      <param name="src">來源緩衝區。</param>
      <param name="srcOffset">
        <paramref name="src" /> 中以零為起始的位元組位移。</param>
      <param name="dst">目的緩衝區。</param>
      <param name="dstOffset">
        <paramref name="dst" /> 中以零為起始的位元組位移。</param>
      <param name="count">要複製的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> 或 <paramref name="dst" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> 或 <paramref name="dst" /> 不是基本的陣列。  
-或- 
<paramref name="src" /> 中的位元組數目小於 <paramref name="srcOffset" /> 加上 <paramref name="count" />。  
-或- 
<paramref name="dst" /> 中的位元組數目小於 <paramref name="dstOffset" /> 加上 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />、<paramref name="dstOffset" /> 或 <paramref name="count" /> 小於 0。</exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>傳回指定陣列中的位元組數目。</summary>
      <param name="array">陣列。</param>
      <returns>陣列中的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> 大於 2 GB。</exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>在指定陣列的指定位置擷取位元組。</summary>
      <param name="array">陣列。</param>
      <param name="index">陣列中的位置。</param>
      <returns>位於陣列所指定位置的位元組。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 為負數或大於 <paramref name="array" /> 的長度。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> 大於 2 GB。</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
      <summary>將指定為長整數值的位元組數目從記憶體中的一個位址複製到另一個位址。  
 此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="source">要複製的位元組位置。</param>
      <param name="destination">目標位址。</param>
      <param name="destinationSizeInBytes">目的地記憶體區塊可用的位元組數。</param>
      <param name="sourceBytesToCopy">要複製的位元組數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大於 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
      <summary>將指定為不帶正負號之長整數值的位元組數目從記憶體中的一個位址複製到另一個位址。  
 此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="source">要複製的位元組位置。</param>
      <param name="destination">目標位址。</param>
      <param name="destinationSizeInBytes">目的地記憶體區塊可用的位元組數。</param>
      <param name="sourceBytesToCopy">要複製的位元組數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大於 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>指派指定的值給指定陣列中特定位置的位元組。</summary>
      <param name="array">陣列。</param>
      <param name="index">陣列中的位置。</param>
      <param name="value">要指派的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 為負數或大於 <paramref name="array" /> 的長度。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" /> 大於 2 GB。</exception>
    </member>
    <member name="T:System.Buffers.IMemoryOwner`1">
      <summary>識別記憶體區塊的擁有者，該擁有者負責妥善地處置基礎記憶體。</summary>
      <typeparam name="T">要儲存在記憶體中的元素類型。</typeparam>
    </member>
    <member name="P:System.Buffers.IMemoryOwner`1.Memory">
      <summary>取得屬於此擁有者的記憶體。</summary>
      <returns>屬於此擁有者的記憶體。</returns>
    </member>
    <member name="T:System.Buffers.IPinnable">
      <summary>提供釘選和取消釘選物件的機制，以防止記憶體回收行程移動這些物件。</summary>
    </member>
    <member name="M:System.Buffers.IPinnable.Pin(System.Int32)">
      <summary>釘選記憶體區塊。</summary>
      <param name="elementIndex">所傳回 <see cref="T:System.Buffers.MemoryHandle" /> 指向的記憶體緩衝區內項目位移。</param>
      <returns>記憶體區塊的控制代碼。</returns>
    </member>
    <member name="M:System.Buffers.IPinnable.Unpin">
      <summary>釋放釘選的記憶體區塊。</summary>
    </member>
    <member name="T:System.Buffers.MemoryHandle">
      <summary>提供記憶體區塊的記憶體控制代碼。</summary>
    </member>
    <member name="M:System.Buffers.MemoryHandle.#ctor(System.Void*,System.Runtime.InteropServices.GCHandle,System.Buffers.IPinnable)">
      <summary>建立記憶體區塊的新記憶體控制代碼。</summary>
      <param name="pointer">記憶體的指標。</param>
      <param name="handle">用來釘選陣列緩衝區的控制代碼。</param>
      <param name="pinnable">手動受控物件的參考；如果沒有記憶體管理員，則為 <see langword="default" />。</param>
    </member>
    <member name="M:System.Buffers.MemoryHandle.Dispose">
      <summary>釋放釘選的控制代碼並釋出 <see cref="T:System.Buffers.IPinnable" /> 執行個體。</summary>
    </member>
    <member name="P:System.Buffers.MemoryHandle.Pointer">
      <summary>傳回記憶體區塊的指標。</summary>
      <returns>記憶體區塊的指標。</returns>
    </member>
    <member name="T:System.Buffers.MemoryManager`1">
      <summary>用以取代 <see cref="T:System.Memory`1" /> 實作的抽象基底類別。</summary>
      <typeparam name="T">此記憶體管理員所管理之記憶體緩衝區中的專案類型。</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.#ctor">
      <summary>初始化 <see cref="T:System.Buffers.MemoryManager`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32)">
      <summary>從目前記憶體管理員所管理的記憶體中，傳回包含指定項目數目的記憶體緩衝區。</summary>
      <param name="length">記憶體緩衝區中，從位移 0 開始的項目數目。</param>
      <returns>記憶體緩衝區。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32,System.Int32)">
      <summary>從目前記憶體管理員所管理的記憶體中，傳回包含從指定位移開始之指定項目數目的記憶體緩衝區。</summary>
      <param name="start">已傳回記憶體緩衝區之起始項目位置的位移。</param>
      <param name="length">已傳回記憶體緩衝區中要包含的項目數目。</param>
      <returns>包含從位移 <paramref name="start" /> 開始之 <paramref name="length" /> 個項目的記憶體緩衝區。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Dispose(System.Boolean)">
      <summary>釋出目前記憶體管理員所使用的全部資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.GetSpan">
      <summary>傳回包裝基礎記憶體緩衝區的記憶體範圍。</summary>
      <returns>包裝基礎記憶體緩衝區的記憶體範圍。</returns>
    </member>
    <member name="P:System.Buffers.MemoryManager`1.Memory">
      <summary>讓這個 <see cref="T:System.Buffers.MemoryManager`1" /> 來處理記憶體區塊。</summary>
      <returns>這個<see cref="T:System.Buffers.MemoryManager`1" />所處理的記憶體區塊。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Pin(System.Int32)">
      <summary>傳回已釘選，且可取用其位址的記憶體控制代碼。</summary>
      <param name="elementIndex">傳回之 <see cref="T:System.Buffers.MemoryHandle" /> 所指向的記憶體緩衝區項目位移。</param>
      <returns>已釘選的記憶體控制代碼。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.System#IDisposable#Dispose">
      <summary>釋出記憶體管理員所使用的全部資源。</summary>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.TryGetArray(System.ArraySegment{`0}@)">
      <summary>傳回陣列區段。</summary>
      <param name="segment">要寫入的陣列區段。</param>
      <returns>如果方法成功擷取陣列區段，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Unpin">
      <summary>取消釘選的記憶體，以便記憶體回收行程可以自由移動它。</summary>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>定義可以從範圍型作業傳回的值，這些作業支援處理多個不連續緩衝區中包含的輸入。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>輸入會經過部分處理，最多到可納入目的地緩衝區的程度。 呼叫者可以放大目的地緩衝區、適當地分割緩衝區，然後重試。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>整個輸入緩衝區已經過處理，而且此作業已完成。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>輸入包含無法處理的無效位元組。 如果輸入已經過部分處理，目的地會包含部分結果。 如此可保證，附加至輸入的其他任何資料都不會使無效的序列變成有效。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>輸入經過部分處理，最多到可使用之輸入的最後一個有效區塊。 呼叫者可以將剩餘未處理的輸入與其他資料拼接在一起、適當地分割緩衝區，然後重試。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySpanAction`2">
      <param name="span" />
      <param name="arg" />
      <typeparam name="T" />
      <typeparam name="TArg" />
    </member>
    <member name="T:System.Buffers.SpanAction`2">
      <param name="span" />
      <param name="arg" />
      <typeparam name="T" />
      <typeparam name="TArg" />
    </member>
    <member name="T:System.Byte">
      <summary>代表 8 位元不帶正負號的整數。</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>將這個執行個體與指定的 8 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的 8 位元不帶正負號的整數。</param>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Byte" />。</exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Byte" /> 物件是否表示相同的值。</summary>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Byte" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Byte" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.Byte" />。</returns>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>表示 <see cref="T:System.Byte" />最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>表示 <see cref="T:System.Byte" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Byte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>將數字的字串表示，轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定樣式和特定文化特性的格式) 轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 格式的相關特定文化特性資訊。 如果 <paramref name="provider" /> 是 <see langword="null" />，則會使用執行緒目前的文化特性。</param>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>將使用指定特定文化特性格式之數字的字串表示轉換為其相等的 <see cref="T:System.Byte" />。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 的相關特定文化特性剖析資訊。 如果 <paramref name="provider" /> 是 <see langword="null" />，則會使用執行緒目前的文化特性。</param>
      <returns>位元組值，該值相當於 <paramref name="s" /> 中包含的數字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Byte" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">不支援要求的類型轉換。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>將目前 <see cref="T:System.Byte" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>這個物件值的字串表示，由沒有零的前置字元且範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將目前 <see cref="T:System.Byte" /> 物件的數值轉換為其相等的字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個物件值的字串表示，採用 <paramref name="provider" /> 參數所指定的格式。</returns>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.Byte" /> 物件的值，轉換為其相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>目前 <see cref="T:System.Byte" /> 物件的字串表示，按照 <paramref name="format" /> 參數所指定來格式化。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含不支援的規範。 支援的格式規範列在＜備註＞一節。</exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.Byte" /> 物件的值，轉換為其相等的字串表示。</summary>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.Byte" /> 物件的字串表示，按照 <paramref name="format" /> 及 <paramref name="provider" /> 參數所指定來格式化。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含不支援的規範。 支援的格式規範列在＜備註＞一節。</exception>
    </member>
    <member name="M:System.Byte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Byte@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>嘗試將數字的字串表示轉換成其相等的 <see cref="T:System.Byte" />，並傳回一個值表示轉換是否成功。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則會包含相當於 <see cref="T:System.Byte" /> 中所含之數字的 <paramref name="s" /> 值；如果轉換失敗則為零。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>將數字的字串表示 (使用指定樣式和特定文化特性的格式) 轉換為其相等的 <see cref="T:System.Byte" />。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。 如果 <paramref name="provider" /> 是 <see langword="null" />，則會使用執行緒目前的文化特性。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 8 位元不帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="T:System.Char">
      <summary>表示 UTF-16 程式碼單位 字元。</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>比較這個執行個體與指定的 <see cref="T:System.Char" /> 物件，並且表示這個執行個體在排序次序中，位於所指定 <see cref="T:System.Char" /> 物件之前、之後或相同位置。</summary>
      <param name="value">要比較的 <see cref="T:System.Char" /> 物件。</param>
      <returns>帶正負號的數字，指出這個執行個體在排序順序中的位置與 <paramref name="value" /> 參數的相對關係。  
  傳回值 
  說明 
  小於零 
  這個執行個體位於 <paramref name="value" /> 之前。  

  零 
  這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。  

  大於零 
  這個執行個體位於 <paramref name="value" /> 之後。</returns>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>比較這個執行個體與指定的物件，並且表示這個執行個體在排序次序中，位於所指定 <see cref="T:System.Object" /> 之前、之後或相同位置。</summary>
      <param name="value">要與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體在排序順序中的位置與 <paramref name="value" /> 參數的相對關係。  
  傳回值 
  說明 
  小於零 
  這個執行個體位於 <paramref name="value" /> 之前。  

  零 
  這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。  

  大於零 
  這個執行個體位於 <paramref name="value" /> 之後。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Char" /> 物件。</exception>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>將指定之 Unicode 字碼指標轉換成 UTF-16 編碼的字串。</summary>
      <param name="utf32">21 位元 Unicode 字碼指標。</param>
      <returns>由一個 <see cref="T:System.Char" /> 物件或 <see cref="T:System.Char" /> 物件的 Surrogate 字組所組成的字串，這些物件相當於 <paramref name="utf32" /> 參數所指定的字碼指標。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> 不是範圍從 U+0 到 U+10FFFF，且排除範圍從 U+D800 到 U+DFFF 之 Surrogate 字組的有效 21 位元 Unicode 字碼指標。</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>將 UTF-16 編碼之 Surrogate 字組的值轉換成 Unicode 字碼指標。</summary>
      <param name="highSurrogate">高 Surrogate 字碼單位 (也就是從 U+D800 到 U+DBFF 範圍內的字碼單位)。</param>
      <param name="lowSurrogate">低 Surrogate 字碼單位 (也就是從 U+DC00 到 U+DFFF 範圍內的字碼單位)。</param>
      <returns>以 <paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 參數代表的 21 位元 Unicode 字碼指標。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不在 U+D800 到 U+DBFF 的範圍內，或 <paramref name="lowSurrogate" /> 不在 U+DC00 到 U+DFFF 的範圍內。</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>將字串中指定之位置上的 UTF-16 編碼之字元或 Surrogate 字組的值轉換成 Unicode 字碼指標。</summary>
      <param name="s">包含字元或 Surrogate 字組的字串。</param>
      <param name="index">
        <paramref name="s" /> 中字元或 Surrogate 配對的索引位置。</param>
      <returns>21 位元 Unicode 字碼指標，以 <paramref name="s" /> 參數中由 <paramref name="index" /> 參數指定之位置處的字元或 Surrogate 字組來代表。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 內的位置。</exception>
      <exception cref="T:System.ArgumentException">指定的索引位置包含 Surrogate 字組，但字組的第一個字元不是有效的高 Surrogate，或字組的第二個字元不是有效的低 Surrogate。</exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Char" /> 物件。</summary>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <returns>當 <see langword="true" /> 參數等於這個執行個體的值時為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體或 <see langword="null" /> 相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Char" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>將指定的數字 Unicode 字元轉換成雙精確度浮點數。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <returns>如果該字元代表一個數字，則為 <paramref name="c" /> 的數值，否則為 -1.0。</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>將指定字串中指定位置的數字 Unicode 字元轉換成雙精確度浮點數。</summary>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <returns>如果該字元代表一個數字，則為 <paramref name="index" /> 中 <paramref name="s" /> 位置處的字元數值，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Char" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.Char" />。</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>將指定的 Unicode 字元分類至由其中一個 <see cref="T:System.Globalization.UnicodeCategory" /> 值所識別的群組。</summary>
      <param name="c">要分類的 Unicode 字元。</param>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 值，指出包含 <paramref name="c" /> 的群組。</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>將指定字串中指定位置處的字元，分類至由其中一個 <see cref="T:System.Globalization.UnicodeCategory" /> 值所識別的群組。</summary>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 列舉常數，指出包含在 <paramref name="index" /> 中位於 <paramref name="s" /> 之字元的群組。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為控制字元。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是控制字元時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為控制字元。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是控制字元時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為十進位數字。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是十進位數字時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為十進位數字。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是十進位數字時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>指出指定的 <see cref="T:System.Char" /> 物件是否為高 Surrogate。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 參數的數值範圍是從 U+D800 到 U+DBFF 時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>表示字串中指定位置處的 <see cref="T:System.Char" /> 物件是否為高 Surrogate。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 參數中指定字元的數值範圍是從 U+D800 到 U+DBFF 時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 內的位置。</exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>表示指定的 Unicode 字元是否分類為 Unicode 字母。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是字母時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為 Unicode 字母。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是字母時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為字母或十進位數字。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是字母或十進位數字時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為字母或十進位數字。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是字母或十進位數字時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為小寫字母。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是小寫字母時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為小寫字母。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位在 <paramref name="index" /> 的字元是小寫字母時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>指出指定的 <see cref="T:System.Char" /> 物件是否為低 Surrogate。</summary>
      <param name="c">要評估的字元。</param>
      <returns>當 <see langword="true" /> 參數的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>表示字串中指定位置處的 <see cref="T:System.Char" /> 物件是否為低 Surrogate。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 參數中指定字元的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 內的位置。</exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為數字。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是數字時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為數字。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是數字時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為標點符號。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是標點符號時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為標點符號。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是標點符號時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為分隔符號字元。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是分隔符號字元時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為分隔符號字元。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於<paramref name="index" /> 的字元是分隔符號字元時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>指出指定的字元是否有 Surrogate 字碼單位。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 為高 Surrogate 或低 Surrogate 時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>指出位於指定的字串中指定位置處的字元是否有 Surrogate 字碼單位。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元為高 Surrogate 或低 Surrogate 時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>表示兩個指定的 <see cref="T:System.Char" /> 物件是否組成 Surrogate 字組。</summary>
      <param name="highSurrogate">要評估為 Surrogate 字組之高 Surrogate 的字元。</param>
      <param name="lowSurrogate">要評估為 Surrogate 字組之低 Surrogate 的字元。</param>
      <returns>當 <see langword="true" /> 參數的數值範圍是從 U+D800 到 U+DBFF，且 <paramref name="highSurrogate" /> 參數的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="lowSurrogate" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>表示字串中指定位置處的兩個相鄰 <see cref="T:System.Char" /> 物件是否組成 Surrogate 字組。</summary>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中要評估之字元字組的開始位置。</param>
      <returns>當 <see langword="true" /> 參數位於 <paramref name="s" /> 和 <paramref name="index" /> +1 時包含相鄰的字元，而且位於 <paramref name="index" /> 之字元的數值範圍是從 U+D800 到 U+DBFF，同時位於 <paramref name="index" /> +1 之字元的數值範圍是從 U+DC00 到 U+DFFF 時為 <paramref name="index" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 內的位置。</exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為符號字元。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是符號字元時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為符號字元。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是符號字元時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為大寫字母。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是大寫字母時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為大寫字母。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是大寫字母時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>指示指定的 Unicode 字元是否分類為泛空白字元。</summary>
      <param name="c">要評估的 Unicode 字元。</param>
      <returns>當 <see langword="true" /> 是空白字元時為 <paramref name="c" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>指示指定的字串中指定位置處的字元是否分類為泛空白字元。</summary>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <returns>當 <see langword="true" /> 中位於 <paramref name="index" /> 的字元是空白字元時為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後一個位置。</exception>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>表示 <see cref="T:System.Char" /> 最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>表示 <see cref="T:System.Char" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>將指定的字串值轉換成它的對等 Unicode 字元。</summary>
      <param name="s">包含單一字元的字串，或 <see langword="null" />。</param>
      <returns>Unicode 字元，相當於 <paramref name="s" /> 中的唯一字元。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的長度不是 1。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。 嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的值未變更。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。 嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。 嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。 嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。 嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">不支援這個轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 物件。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。</param>
      <returns>指定類型的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">無法將目前 <see cref="T:System.Char" /> 物件的值轉換成 <paramref name="type" /> 參數所指定的類型。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。 (指定 <see langword="null" />，因為已忽略 <paramref name="provider" /> 參數。)</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。 (指定 <see langword="null" />，因為已忽略 <paramref name="provider" /> 參數。)</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。 (指定 <see langword="null" />，因為已忽略 <paramref name="provider" /> 參數。)</param>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>將 Unicode 字元值轉換成它的對等小寫。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <returns>
        <paramref name="c" /> 的對等小寫；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的特定文化特性格式資訊，將指定的 Unicode 字元值轉換成它的對等小寫。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <returns>
        <paramref name="c" /> 的對等小寫 (已根據 <paramref name="culture" /> 修改)；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>使用不因文化特性而異 (Invariant Culture) 的轉換規則，將 Unicode 字元的值轉換成其小寫的同等項目。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <returns>
        <paramref name="c" /> 參數的對等小寫；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
    </member>
    <member name="M:System.Char.ToString">
      <summary>將這個執行個體的值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>將指定的 Unicode 字元轉換成它的對等字串表示。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <returns>
        <paramref name="c" /> 值的字串表示。</returns>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將這個執行個體的值轉換為它的對等字串表示。</summary>
      <param name="provider">(保留) 物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>將 Unicode 字元值轉換成它的對等大寫。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <returns>
        <paramref name="c" /> 的對等大寫；如果 <paramref name="c" /> 已經是大寫、沒有對等大寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的特定文化特性格式資訊，將指定的 Unicode 字元值轉換成它的對等大寫。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <returns>
        <paramref name="c" /> 的對等大寫 (已根據 <paramref name="culture" /> 修改)；如果 <paramref name="c" /> 已經是大寫、沒有對等大寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>使用不因文化特性而異的轉換規則，將 Unicode 字元的值轉換成其大寫的同等項目。</summary>
      <param name="c">要轉換的 Unicode 字元。</param>
      <returns>
        <paramref name="c" /> 參數的對等大寫；如果 <paramref name="c" /> 已經是大寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>將指定的字串值轉換成它的對等 Unicode 字元。 傳回碼 (Return Code) 會指出轉換是成功或是失敗。</summary>
      <param name="s">包含單一字元的字串，或 <see langword="null" />。</param>
      <param name="result">當這個方法傳回時，如果轉換成功則包含相當於 <paramref name="s" /> 中唯一字元的 Unicode 字元；如果轉換失敗，則為未定義的值。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <paramref name="s" /> 的長度不是 1。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.CharEnumerator">
      <summary>支援逐一查看 <see cref="T:System.String" /> 物件和讀取其個別字元。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.CharEnumerator.Clone">
      <summary>建立目前 <see cref="T:System.CharEnumerator" /> 物件的複本。</summary>
      <returns>
        <see cref="T:System.Object" />，是目前 <see cref="T:System.CharEnumerator" /> 物件的複本。</returns>
    </member>
    <member name="P:System.CharEnumerator.Current">
      <summary>取得此 <see cref="T:System.CharEnumerator" /> 物件所列舉的字串中目前所參考的字元。</summary>
      <returns>此 <see cref="T:System.CharEnumerator" /> 物件目前所參考的 Unicode 字元。</returns>
      <exception cref="T:System.InvalidOperationException">索引無效，也就是，索引位於列舉字串的第一個字元前或最後一個字元後。</exception>
    </member>
    <member name="M:System.CharEnumerator.Dispose">
      <summary>釋放 <see cref="T:System.CharEnumerator" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.CharEnumerator.MoveNext">
      <summary>將目前 <see cref="T:System.CharEnumerator" /> 物件的內部索引遞增到列舉字串的下一個字元。</summary>
      <returns>如果索引遞增成功且在列舉字串內，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CharEnumerator.Reset">
      <summary>將索引初始化至邏輯上位於列舉字串第一個字元前的位置。</summary>
    </member>
    <member name="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
      <summary>取得此 <see cref="T:System.CharEnumerator" /> 物件所列舉的字串中目前所參考的字元。 如需這個成員的說明，請參閱 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>此 <see cref="T:System.CharEnumerator" /> 物件目前所參考的 boxed Unicode 字元。</returns>
      <exception cref="T:System.InvalidOperationException">列舉尚未啟動。  
 -或-  
 列舉已經結束。</exception>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>表示程式項目是否符合 Common Language Specification (CLS) 標準。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>使用布林值初始化 <see cref="T:System.CLSCompliantAttribute" /> 類別的執行個體，該布林值會指出指定的程式項目是否符合 CLS 標準。</summary>
      <param name="isCompliant">如果符合 CLS 標準，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>取得布林值，表示指定程式項目是否符合 CLS 標準。</summary>
      <returns>如果程式項目符合 CLS 標準，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>定義可設定或擷取的字典索引鍵/值組配對。</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>初始化具有指定索引鍵和值之 <see cref="T:System.Collections.DictionaryEntry" /> 型別的執行個體。</summary>
      <param name="key">在每個索引鍵/值組配對中定義的物件。</param>
      <param name="value">與 <paramref name="key" /> 關聯的定義。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />，而且 .NET Framework 版本為 1.0 或 1.1。</exception>
    </member>
    <member name="M:System.Collections.DictionaryEntry.Deconstruct(System.Object@,System.Object@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>取得或設定索引鍵/值組配對中的索引鍵。</summary>
      <returns>索引鍵/值組配對中的索引鍵。</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>取得或設定索引鍵/值組配對中的值。</summary>
      <returns>索引鍵/值組配對中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerable`1">
      <summary>公開可在指定型別值上提供非同步反覆項目的列舉程式。</summary>
      <typeparam name="T">集合中的項目型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
      <summary>傳回以非同步方式逐一查看集合的列舉程式。</summary>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" />，可用來取消非同步的反覆項目。</param>
      <returns>可用來以非同步方式逐一查看集合的列舉值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
      <summary>支援泛型集合上的簡單非同步反覆項目。</summary>
      <typeparam name="T">集合中的項目型別。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
      <summary>以非同步方式讓列舉程式前進至集合的下個元素。</summary>
      <returns>如果列舉程式成功前進至下個元素，則為使用 <see langword="true" /> 結果完成的 <see cref="T:System.Threading.Tasks.ValueTask`1" />；如果列舉程式已超過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>定義管理泛型集合的方法。</summary>
      <typeparam name="T">集合中的項目型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的物件。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>從特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的項目數目，大於 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" /> 中所包含的項目數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中所包含的項目數。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="item">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除的物件。</param>
      <returns>如果 <see langword="true" /> 已成功從 <paramref name="item" /> 中移除，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。 如果在原本的 <see langword="false" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>定義型別會實作其以比較兩個物件的方法。</summary>
      <typeparam name="T">要比較之物件的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>比較兩個物件並傳回值，指出其中一個物件為小於、等於或大於另一個物件。</summary>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。  
  值 
  意義 
  小於零 
 <paramref name="x" /> 小於 <paramref name="y" />。  

  零 
 <paramref name="x" />等於 <paramref name="y" />。  

  大於零 
 <paramref name="x" /> 大於 <paramref name="y" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>表示索引鍵/值組的泛型集合。</summary>
      <typeparam name="TKey">字典中之索引鍵的類型。</typeparam>
      <typeparam name="TValue">字典中之值的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>將具有提供索引鍵和值的元素加入至 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <param name="key">做為要加入項目之索引鍵的物件。</param>
      <param name="value">做為要加入項目之值的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同索引鍵的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否包含具有指定之索引鍵的項目。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有該索引鍵的項目，則為 <see cref="T:System.Collections.Generic.IDictionary`2" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">要取得或設定之項目的索引鍵。</param>
      <returns>具有指定索引鍵的項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除具有指定之索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
      <returns>如果成功移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。  如果在原始的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中找不到 <paramref name="key" />，則這個方法也會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <param name="key">要取得其值的索引鍵。</param>
      <param name="value">這個方法傳回時，如果找到索引鍵，則為與指定索引鍵關聯的值，否則為 <paramref name="value" /> 參數的型別預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件包含具有指定索引鍵的元素，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>公開支援指定型別集合上簡單反覆運算的列舉值。</summary>
      <typeparam name="T">要列舉之物件的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>支援泛型集合上的簡單反覆運算。</summary>
      <typeparam name="T">要列舉之物件的型別。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>定義支援物件之相等比較的方法。</summary>
      <typeparam name="T">要比較之物件的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>判斷指定的物件是否相等。</summary>
      <param name="x">要比較之型別 <paramref name="T" /> 的第一個物件。</param>
      <param name="y">要比較之型別 <paramref name="T" /> 的第二個物件。</param>
      <returns>如果指定的物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>傳回指定物件的雜湊碼。</summary>
      <param name="obj">要傳回雜湊碼的 <see cref="T:System.Object" />。</param>
      <returns>指定物件的雜湊碼。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>表示可以個別由索引存取之物件的集合。</summary>
      <typeparam name="T">清單中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.IList`1" /> 中指定項目的索引。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1" /> 中尋找的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入 <see cref="T:System.Collections.Generic.IList`1" /> 的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Collections.Generic.IList`1" /> 項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>表示項目的強型別、唯讀集合。</summary>
      <typeparam name="T">項目的型別。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>取得集合中的項目數。</summary>
      <returns>集合中的項目數。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>表示索引鍵/值組的唯讀集合。</summary>
      <typeparam name="TKey">唯讀字典中的索引鍵類型。</typeparam>
      <typeparam name="TValue">唯讀字典中值的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>判斷唯讀字典是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要尋找的索引鍵。</param>
      <returns>如果唯讀字典中包含有指定之索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>取得在唯讀字典中擁有指定索引鍵的項目。</summary>
      <param name="key">要尋找的索引鍵。</param>
      <returns>在唯讀字典中擁有指定索引鍵的項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>取得可列舉集合，其中包含唯讀字典中的索引鍵。</summary>
      <returns>包含唯讀字典中索引鍵的可列舉集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定之索引鍵相關聯的值。</summary>
      <param name="key">要尋找的索引鍵。</param>
      <param name="value">這個方法傳回時，如果找到索引鍵，則為與指定索引鍵關聯的值，否則為 <paramref name="value" /> 參數的型別預設值。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果實作 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 介面之物件包含具有指定之索引鍵的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>取得可列舉集合，其中包含唯讀字典中的值。</summary>
      <returns>包含唯讀字典中之值的可列舉集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>表示可由索引存取之項目的唯讀集合。</summary>
      <typeparam name="T">唯讀清單中的項目型別。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>取得唯讀清單中指定索引處的項目。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>唯讀清單中指定索引處的項目。</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>為資料集的抽象提供基底介面。</summary>
      <typeparam name="T">資料集中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>將項目加入至目前資料集，並傳回表示是否成功加入項目的值。</summary>
      <param name="item">要加入至集合的項目。</param>
      <returns>如果項目加入至資料集，則為 <see langword="true" />，如果項目已經在資料集中，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的資料集中，移除指定之集合內的所有項目。</summary>
      <param name="other">要從資料集移除的項目集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的適當 (嚴格) 超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷資料集是否為指定之集合的子集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的子集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的超集。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前資料集是 <paramref name="other" /> 的超集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否與指定的集合重疊。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集和指定的集合是否包含相同項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <returns>如果目前的資料集等於 <paramref name="other" />，則為 <see langword="true" />，否則為 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其包含目前資料集和 (或) 指定集合中出現的所有項目。</summary>
      <param name="other">要與目前資料組比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>當為存取集合中的項目所指定的索引鍵與集合中的任何索引鍵都不相符時，擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>使用預設的屬性值，初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair" />
    <member name="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)">
      <param name="key" />
      <param name="value" />
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>定義可設定或擷取的索引鍵/值組。</summary>
      <typeparam name="TKey">索引鍵的類型。</typeparam>
      <typeparam name="TValue">值的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>使用指定的索引鍵和值，初始化 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構的新執行個體。</summary>
      <param name="key">在每個索引鍵/值組配對中定義的物件。</param>
      <param name="value">與 <paramref name="key" /> 關聯的定義。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.Deconstruct(`0@,`1@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>取得索引鍵/值組中的索引鍵。</summary>
      <returns>
        <typeparamref name="TKey" />，其為 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>使用索引鍵和值的字串表示，傳回 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字串表示。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字串表示，包含索引鍵和值的字串表示。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>取得索引鍵/值組中的值。</summary>
      <returns>
        <typeparamref name="TValue" />，其為 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的值。</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>定義所有非泛型集合的大小、列舉值和同步處理方法。</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 中的項目數目，大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>公開比較兩個物件的方法。</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>比較兩個物件並傳回值，指出其中一個物件為小於、等於或大於另一個物件。</summary>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值：   - 如果小於 0，<paramref name="x" /> 小於 <paramref name="y" />。   - 如果為 0，<paramref name="x" /> 等於 <paramref name="y" />。   - 如果大於 0，<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不實作 <see cref="T:System.IComparable" /> 介面。  
-或- 
 <paramref name="x" /> 和 <paramref name="y" /> 是不同的型別，而且二者都不能處理與另外一方的比較。</exception>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>表示索引鍵/值組的非泛型集合。</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>將隨附有索引鍵和值的項目加入至 <see cref="T:System.Collections.IDictionary" /> 物件。</summary>
      <param name="key">
        <see cref="T:System.Object" />，用做要加入之項目的索引鍵。</param>
      <param name="value">
        <see cref="T:System.Object" />，用做要加入之項目的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">具有相同索引鍵的項目已經存在 <see cref="T:System.Collections.IDictionary" /> 物件中。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>將所有項目從 <see cref="T:System.Collections.IDictionary" /> 物件移除。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IDictionary" /> 物件是否包含具有指定索引鍵的項目。</summary>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 物件中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有該索引鍵的項目，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件的 <see cref="T:System.Collections.IDictionary" /> 物件。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 物件是否具有固定的大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.IDictionary" /> 物件是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">要取得或設定之項目的索引鍵。</param>
      <returns>具有指定的索引鍵的項目，或是如果索引鍵不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">已設定該屬性，<see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。  
-或- 
屬性已設定、<paramref name="key" /> 不在於集合中，而且 <see cref="T:System.Collections.IDictionary" /> 的大小固定。</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 物件，其中包含 <see cref="T:System.Collections.IDictionary" /> 物件的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，其中包含 <see cref="T:System.Collections.IDictionary" /> 物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IDictionary" /> 物件中移除具有指定索引鍵的項目。</summary>
      <param name="key">要移除的項目索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。  
-或- 
<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 物件，其中含有 <see cref="T:System.Collections.IDictionary" /> 物件中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，其中含有 <see cref="T:System.Collections.IDictionary" /> 物件中的值。</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>列舉非泛型字典的元素。</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>取得目前字典項目的索引鍵和值。</summary>
      <returns>
        <see cref="T:System.Collections.DictionaryEntry" />，含有目前字典元素的索引鍵和值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第一個元素之前，或最後一個元素之後。</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>取得目前字典項目的索引鍵。</summary>
      <returns>列舉型別目前元素的索引鍵。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第一個元素之前，或最後一個元素之後。</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>取得目前字典項目的值。</summary>
      <returns>列舉型別目前元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第一個元素之前，或最後一個元素之後。</exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>公開能逐一查看非泛型集合內容一次的列舉程式。</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用於逐一查看集合。</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>支援非泛型集合上的簡單反覆運算。</summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>取得集合中位於列舉值目前位置的元素。</summary>
      <returns>位於列舉值中目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>將列舉值往前推至下集合中的下一個項目。</summary>
      <returns>如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，集合已修改。</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>設定列舉值至它的初始位置，這是在集合中第一個項目之前。</summary>
      <exception cref="T:System.InvalidOperationException">建立列舉值之後，集合已修改。</exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>定義支援物件之相等比較的方法。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>判斷指定的物件是否相等。</summary>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
      <returns>如果指定的物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 是不同的型別，而且二者都不能處理與另外一方的比較。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>傳回指定物件的雜湊碼。</summary>
      <param name="obj">要傳回雜湊碼的 <see cref="T:System.Object" />。</param>
      <returns>指定物件的雜湊碼。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>表示可以個別由索引存取之物件的非泛型集合。</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Collections.IList" /> 的物件。</param>
      <returns>插入新項目的位置，或是 -1，表示此項目沒有插入集合中。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>從 <see cref="T:System.Collections.IList" /> 中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 是 <see cref="T:System.Collections.IList" /> 中的 null 參考。</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.Collections.IList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Collections.IList" /> 項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。  
-或- 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>支援集合物件的結構比較。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>判斷目前的集合物件在排序次序中位於另一個物件之前、相同位置或之後。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">物件，此物件會比較目前集合物件的成員與對應的 <paramref name="other" /> 成員。</param>
      <returns>一個帶正負號的整數，指出排序次序中目前集合物件與 <paramref name="other" /> 的關聯性： - 若小於 0，目前的執行個體在 <paramref name="other" /> 之前。 - 若等於 0，目前的執行個體與 <paramref name="other" /> 相等。 - 若大於 0，目前的執行個體在 <paramref name="other" /> 之後。  
  傳回值 
  說明 
  -1 
  目前的執行個體在 <paramref name="other" /> 之前。  

  0 
  目前的執行個體與 <paramref name="other" /> 相等。  

  1 
  目前的執行個體在 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">這個執行個體和 <paramref name="other" /> 屬於不相同的型別。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>定義支援物件之結構相等比較的方法。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>判斷物件與目前的執行個體在結構上是否相等。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">物件，判斷目前的執行個體與 <paramref name="other" /> 是否相等。</param>
      <returns>如果兩個物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <param name="comparer">物件，會計算目前物件的雜湊碼。</param>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>提供泛型集合的基底類別。</summary>
      <typeparam name="T">集合中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 類別的新執行個體，這個執行個體是空白的。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 類別的新執行個體，將其當做指定清單的包裝函式。</summary>
      <param name="list">由新的集合所包裝的清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>將物件加入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的末端。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 結尾的物件。 參考類型的值可以是 <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中的所有項目。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中的所有項目。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>判斷某項目是否在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中。</summary>
      <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.ObjectModel.Collection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引開始，將整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 複製到相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中的項目數目，大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中實際包含的項目數目。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中實際包含的項目數目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>傳回在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中第一個相符項目之以零起始的索引。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>整個 <paramref name="item" /> 中第一個出現 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 之以零為起始的索引 (如有找到)，否則為 -1。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>將項目插入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定的索引位置。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>將項目插入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定的索引位置。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>取得 <see cref="T:System.Collections.Generic.IList`1" /> 周圍的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 包裝函式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 周圍的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 包裝函式。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="item">要從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果成功移除 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。  如果在原始的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 之指定索引處的項目。</summary>
      <param name="index">移除項目之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 之指定索引處的項目。</summary>
      <param name="index">移除項目之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>取代指定之索引處的項目。</summary>
      <param name="index">要取代的項目之以零起始的索引。</param>
      <param name="item">指定之索引處的項目新值。 參考類型的值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。  
-或- 
 <paramref name="array" /> 沒有以零起始的索引。  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 中的項目數目，大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>插入新項目的位置。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入 <see cref="T:System.Collections.IList" /> 中指定的索引處。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">屬性已設定，且 <paramref name="value" /> 具有無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的類型。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>提供泛型唯讀集合的基底類別。</summary>
      <typeparam name="T">集合中項目的類型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 類別的新執行個體，這個執行個體是指定之清單周圍的唯讀包裝函式。</summary>
      <param name="list">要包裝的清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>判斷某項目是否在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中。</summary>
      <param name="value">要在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="value" />，則為 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引開始，將整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 複製到相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中的項目數目，大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>取得包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 執行個體中的項目數目。</summary>
      <returns>包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 執行個體中的項目數目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>傳回在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中第一個相符項目之以零起始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。 參考類型的值可以是 <see langword="null" />。</param>
      <returns>整個 <paramref name="item" /> 中第一個出現 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 之以零為起始的索引 (如有找到)，否則為 -1。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>取得位在指定索引處的元素。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>傳回 <see cref="T:System.Collections.Generic.IList`1" /> 所包裝的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 所包裝的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有項目。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除特定物件之第一個符合的元素。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除的物件。</param>
      <returns>如果 <see langword="true" /> 已成功從 <paramref name="value" /> 中移除，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.Generic.IList`1" />。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.Generic.IList`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>取得位在指定索引處的元素。 如果您嘗試在指定索引處設定項目，就會發生 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.NotSupportedException">如果屬性已設定，則一定會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Collections.Generic.IList`1" /> 項目。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Collections.ICollection" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之項目的目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維的。  
-或- 
 <paramref name="array" /> 沒有以零起始的索引。  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 中的項目數目，大於 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。  
-或- 
來源 <see cref="T:System.Collections.ICollection" /> 的類型無法自動轉換成目的 <paramref name="array" /> 的類型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>插入新項目的位置。</returns>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>從 <see cref="T:System.Collections.IList" /> 中移除所有項目。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 之型別不是為泛型型別參數 <paramref name="T" /> 所指定的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 之型別不是為泛型型別參數 <paramref name="T" /> 所指定的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性永遠會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得位在指定索引處的元素。 如果您嘗試在指定索引處設定項目，就會發生 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">如果屬性已設定，則一定會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Collections.IList" /> 項目。  這個實作一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">一律擲回。</exception>
    </member>
    <member name="T:System.Comparison`1">
      <summary>表示比較兩個相同型別之物件的方法。</summary>
      <param name="x">要比較的第一個物件。</param>
      <param name="y">要比較的第二個物件。</param>
      <typeparam name="T">要比較之物件的型別。</typeparam>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。  
  值 
  意義 
  小於 0 
 <paramref name="x" /> 小於 <paramref name="y" />。  

  0 
 <paramref name="x" />等於 <paramref name="y" />。  

  大於 0 
 <paramref name="x" /> 大於 <paramref name="y" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定屬性的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值來初始化 <see cref="T:System.Boolean" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 <see cref="T:System.Boolean" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>使用 8 位元不帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>使用 Unicode 字元來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 Unicode 字元。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>使用雙精確度浮點數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的雙精確度浮點數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>使用 16 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>使用 32 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">作為預設值的 32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>使用 64 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">作為預設值的 64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">表示預設值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.SByte)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值來初始化 <see cref="T:System.SByte" /> 類別的新執行個體。</summary>
      <param name="value">預設帶正負號的位元組 (byte) 值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>使用單精確度浮點數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的單精確度浮點數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 來初始化 <see cref="T:System.String" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>將指定的值轉換為指定型別，並使用不變文化特性 (Invariant Culture) 做為轉譯內容，初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="type">要數值轉換成的 <see cref="T:System.Type" />。</param>
      <param name="value">
        <see cref="T:System.String" />，可以使用類型的 <see cref="T:System.ComponentModel.TypeConverter" /> 和美式英語文化特性 (Culture) 來轉換為該類型。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt16)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值來初始化 <see cref="T:System.UInt16" /> 類別的新執行個體。</summary>
      <param name="value">預設不帶正負號的 16 位元整數值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt32)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值來初始化 <see cref="T:System.UInt32" /> 類別的新執行個體。</summary>
      <param name="value">預設不帶正負號的整數值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt64)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值來初始化 <see cref="T:System.UInt64" /> 類別的新執行個體。</summary>
      <param name="value">預設不帶正負號的長整數值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>設定這個屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</summary>
      <param name="value">預設值。</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>取得這個屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</summary>
      <returns>
        <see cref="T:System.Object" />，表示這個屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定在編輯器中可檢視的屬性或方法。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>使用將 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 設定為預設狀態，初始化 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />，初始化 <see cref="T:System.ComponentModel.EditorBrowsableState" /> 類別的新執行個體。</summary>
      <param name="state">
        <see cref="T:System.ComponentModel.EditorBrowsableState" />，以設定 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>取得屬性或方法的可瀏覽狀態。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" />，屬性或方法的可瀏覽狀態。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>從編輯器中指定屬性或方法的可瀏覽狀態。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>屬性或方法是只有進階使用者能看到的功能。 編輯器可以顯示或是隱藏這樣的屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>屬性或方法可以從編輯器中瀏覽。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>屬性或方法永遠無法從編輯器中瀏覽。</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
      <summary>指定用於雜湊檔案和產生強式名稱 (Strong Name) 的所有雜湊演算法。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
      <summary>擷取 MD5 訊息摘要演算法。 MD5 是由 Rivest 於 1991 年所開發的。 基本上，它是加強安全性的 MD4，雖然速度比 MD4 稍慢，但卻更加安全。 演算法包含四個不同的步驟，與 MD4 設計的方法有些不同。 訊息摘要大小，由於必須配合需求，因此是一樣的。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
      <summary>指示沒有雜湊演算法的遮罩。 如果您為多模組組件指定 <see langword="None" />，Common Language Runtime 會預設成 SHA1 演算法，因為多模組組件需要產生雜湊。 由於 SHA1 的衝突問題，Microsoft 建議使用 SHA256。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
      <summary>用於擷取安全雜湊演算法 (Secure Hash Algorithm) 修訂版的遮罩，其修正在 SHA 中沒有發行的漏洞。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA256">
      <summary>用來擷取安全雜湊演算法 (Secure Hash Algorithm) 版本的遮罩，其雜湊大小為 256 位元。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA384">
      <summary>用來擷取安全雜湊演算法 (Secure Hash Algorithm) 版本的遮罩，其雜湊大小為 384 位元。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA512">
      <summary>用來擷取安全雜湊演算法 (Secure Hash Algorithm) 版本的遮罩，其雜湊大小為 512 位元。</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
      <summary>定義不同型別的組件版本相容性。 此功能在 .NET Framework 1.0 版中無法使用。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
      <summary>如果組件在相同的應用程式定義域中執行時，就無法與其他版本一起執行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
      <summary>如果組件在相同的電腦上執行，就無法與其他版本一起執行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
      <summary>如果組件在相同的處理序中執行，就無法與其他版本一起執行。</summary>
    </member>
    <member name="T:System.Converter`2">
      <summary>表示將物件從某個型別轉換成另一個型別的方法。</summary>
      <param name="input">要轉換的物件。</param>
      <typeparam name="TInput">要轉換的成員型別。</typeparam>
      <typeparam name="TOutput">輸入物件要轉換成的型別。</typeparam>
      <returns>
        <typeparamref name="TOutput" />，表示轉換的 <typeparamref name="TInput" />。</returns>
    </member>
    <member name="T:System.DateTime">
      <summary>表示時間的瞬間，通常以一天的日期和時間表示。</summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月和日。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月和日。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年數)。</param>
      <param name="month">月 (1 到 <paramref name="calendar" /> 中的月數)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="calendar">用以解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的行事曆。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
-或- 
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分和秒。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" />中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定年、月、日、時、分、秒以及國際標準時間 (UTC) 或本地時間。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="kind">指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" />中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月、日、時、分和秒。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年數)。</param>
      <param name="month">月 (1 到 <paramref name="calendar" /> 中的月數)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="calendar">用以解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的行事曆。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
-或- 
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" />中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。 
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分、秒和毫秒。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" />中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定年、月、日、時、分、秒、毫秒以及國際標準時間 (UTC) 或本地時間。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="kind">指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" />中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月、日、時、分、秒和毫秒。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年數)。</param>
      <param name="month">月 (1 到 <paramref name="calendar" /> 中的月數)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="calendar">用以解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的行事曆。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
-或- 
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" />中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定行事曆的指定年、月、日、時、分、秒、毫秒以及國際標準時間 (UTC) 或本地時間。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年數)。</param>
      <param name="month">月 (1 到 <paramref name="calendar" /> 中的月數)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="calendar">用以解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的行事曆。</param>
      <param name="kind">指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支援的範圍內。  
-或- 
 <paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 中的月數。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" />中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為刻度的指定數目。</summary>
      <param name="ticks">以 0001 年 1 月 1 日 00:00:00.000 (西曆) 以來經過的 100 奈秒間隔數表示的日期和時間。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的刻度數以及國際標準時間 (UTC) 或本地時間。</summary>
      <param name="ticks">以 0001 年 1 月 1 日 00:00:00.000 (西曆) 以來經過的 100 奈秒間隔數表示的日期和時間。</param>
      <param name="kind">指出 <paramref name="ticks" /> 是指定本地時間或國際標準時間 (UTC)，或是兩者皆非的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定之 <see cref="T:System.TimeSpan" /> 的值。</summary>
      <param name="value">正數或負數時間間隔。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間間隔的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的天數。</summary>
      <param name="value">整數和小數的天數。 <paramref name="value" /> 參數可以是負數或正數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示天數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的時數。</summary>
      <param name="value">整數和小數的時數。 <paramref name="value" /> 參數可以是負數或正數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的毫秒數。</summary>
      <param name="value">整數和小數的毫秒數。 <paramref name="value" /> 參數可以是負數或正數。 請注意，這個值會四捨五入為最接近的整數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示毫秒數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的分鐘數。</summary>
      <param name="value">整數和小數的分鐘數。 <paramref name="value" /> 參數可以是負數或正數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示分鐘數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的月數。</summary>
      <param name="months">月份數。 <paramref name="months" /> 參數可以是負數或正數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="months" /> 的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。  
-或- 
 <paramref name="months" /> 小於 -120,000 或大於 120,000。</exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的秒數。</summary>
      <param name="value">整數和小數的秒數。 <paramref name="value" /> 參數可以是負數或正數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示秒數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的刻度數。</summary>
      <param name="value">100 毫微秒刻度數。 <paramref name="value" /> 參數可以是正數或負數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，將這個執行個體的值加上指定的年數。</summary>
      <param name="value">年份數。 <paramref name="value" /> 參數可以是負數或正數。</param>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示年數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 或產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>比較 <see cref="T:System.DateTime" /> 的兩個執行個體，並傳回整數，這個整數表示第一個執行個體早於、同於或晚於第二個執行個體。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>帶正負號的數字，該數字表示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相對值。  
  實值類型 
  條件 
  小於零 
 <paramref name="t1" /> 早於 <paramref name="t2" />。  

  零 
 <paramref name="t1" /> 與 <paramref name="t2" /> 相同。  

  大於零 
 <paramref name="t1" /> 晚於 <paramref name="t2" />。</returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>比較這個執行個體的值與指定的 <see cref="T:System.DateTime" /> 值，並且傳回一個整數，指出這個執行個體是早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value">要與目前執行個體相比較的物件。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 參數的相對值。  
  值 
  說明 
  小於零 
  這個執行個體早於 <paramref name="value" />。  

  零 
  這個執行個體和 <paramref name="value" /> 相同。  

  大於零 
  這個執行個體晚於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>比較這個執行個體的值與含有指定之 <see cref="T:System.DateTime" /> 值的指定物件，並且傳回一個整數，指出這個執行個體是早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value">要比較的 Boxed 物件，或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  值 
  說明 
  小於零 
  這個執行個體早於 <paramref name="value" />。  

  零 
  這個執行個體和 <paramref name="value" /> 相同。  

  大於零 
  這個執行個體晚於 <paramref name="value" />，或者 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>取得這個執行個體的日期部分。</summary>
      <returns>新的物件，具有與這個執行個體相同的日期，並將時間值設定為午夜 12:00:00 (00:00:00)。</returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>取得由這個執行個體表示的月份天數。</summary>
      <returns>日期元件，以 1 到 31 之間的值表示。</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>取得由這個執行個體表示的一週天數。</summary>
      <returns>列舉的常數，表示這個 <see cref="T:System.DateTime" /> 值代表的是一週的哪一天。</returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>取得由這個執行個體表示的一年天數。</summary>
      <returns>一年中的日期，以 1 到 366 之間的值表示。</returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>傳回所指定年份中指定月份的天數。</summary>
      <param name="year">年。</param>
      <param name="month">月 (範圍從 1 到 12 的數字)。</param>
      <returns>指定 <paramref name="month" /> 的 <paramref name="year" /> 中的天數。  
例如，如果 <paramref name="month" /> 等於 2 (表示二月)，傳回值是 28 或 29 (根據 <paramref name="year" /> 是否為閏年)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="year" /> 小於 1 或大於 9999。</exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>傳回值，該值指出這個執行個體的值是否等於指定之 <see cref="T:System.DateTime" /> 執行個體的值。</summary>
      <param name="value">與這個執行個體相比較的物件。</param>
      <returns>當 <see langword="true" /> 參數等於這個執行個體的值時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>傳回值，指出兩個 <see cref="T:System.DateTime" /> 執行個體是否有相同的日期和時間值。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>當兩個值相等時為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="value">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="value" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.DateTime" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>還原序列化 64 位元的二進位值，並重新建立原始的序列化 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="dateData">64 位元帶正負號的整數，可在 2 位元欄位中編碼 <see cref="P:System.DateTime.Kind" /> 屬性，並在 62 位元欄位中編碼 <see cref="P:System.DateTime.Ticks" /> 屬性。</param>
      <returns>物件，與 <see cref="T:System.DateTime" /> 方法所序列化的 <see cref="M:System.DateTime.ToBinary" /> 物件相等。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
      <param name="fileTime">Windows 檔案時間以刻度表示。</param>
      <returns>物件，表示 <paramref name="fileTime" /> 參數所表示日期和時間的本地時間對應項。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小於 0 或代表大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的 UTC 時間。</summary>
      <param name="fileTime">Windows 檔案時間以刻度表示。</param>
      <returns>物件，表示 <paramref name="fileTime" /> 參數所表示日期和時間的 UTC 時間對應項。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小於 0 或代表大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>傳回等於指定 OLE Automation 日期的 <see cref="T:System.DateTime" />。</summary>
      <param name="d">OLE Automation 日期值。</param>
      <returns>物件，表示和 <paramref name="d" /> 相同的日期和時間。</returns>
      <exception cref="T:System.ArgumentException">日期不是有效的 OLE Automation 日期值。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>將這個執行個體的值轉換為標準日期和時間格式規範所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個元素都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範所支援的所有字串表示。</summary>
      <param name="format">標準日期和時間格式字串。</param>
      <returns>字串陣列，其中的每個項目都是這個執行個體的值使用 <paramref name="format" /> 標準日期和時間格式規範所格式化的表示。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範和特定文化特性格式資訊所支援的所有字串表示。</summary>
      <param name="format">日期和時間格式字串。</param>
      <param name="provider">物件，提供關於這個執行個體的文化特性格式資訊。</param>
      <returns>字串陣列，其中的每個元素都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>將這個執行個體的值轉換為標準日期和時間格式規範和指定的特定文化特性格式資訊所支援的所有字串表示。</summary>
      <param name="provider">物件，提供關於這個執行個體的文化特性格式資訊。</param>
      <returns>字串陣列，其中的每個元素都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.DateTime" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.DateTime" />。</returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>取得這個執行個體所表示日期的小時元件。</summary>
      <returns>小時元件，以 0 到 23 之間的值表示。</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>指出這個 <see cref="T:System.DateTime" /> 執行個體是否在目前時區的日光節約時間範圍內。</summary>
      <returns>當 <see langword="true" /> 屬性的值為 <see cref="P:System.DateTime.Kind" /> 或 <see cref="F:System.DateTimeKind.Local" />，且這個 <see cref="F:System.DateTimeKind.Unspecified" /> 執行個體的值位於當地時區的日光節約時間範圍內時為 <see cref="T:System.DateTime" />；當 <see langword="false" /> 是 <see cref="P:System.DateTime.Kind" /> 時為 <see cref="F:System.DateTimeKind.Utc" />。</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>傳回指定年份是否為閏年的指示。</summary>
      <param name="year">4 位數的年份。</param>
      <returns>當 <see langword="true" /> 是閏年時為 <paramref name="year" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。</exception>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>取得值，指出這個執行個體表示的時間是根據本地時間、國際標準時間 (UTC)，或兩者皆非。</summary>
      <returns>一個列舉值，表示目前時間表示的是什麼時間。 預設為 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>代表 <see cref="T:System.DateTime" /> 最大的可能值。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>取得這個執行個體所表示日期的毫秒元件。</summary>
      <returns>毫秒元件，以 0 到 999 之間的值表示。</returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>取得這個執行個體所表示日期的分鐘元件。</summary>
      <returns>分鐘元件，以 0 到 59 之間的值表示。</returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>代表 <see cref="T:System.DateTime" /> 最小的可能值。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>取得這個執行個體所表示日期的月份元件。</summary>
      <returns>月份元件，以 1 到 12 之間的值表示。</returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以本地時間表示。</summary>
      <returns>物件，其值為目前的本地日期和時間。</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>將指定的日期和時間加上指定的時間間隔，產生新的日期和時間。</summary>
      <param name="d">要加上的日期和時間值。</param>
      <param name="t">要加入的時間間隔。</param>
      <returns>物件，這個物件是 <paramref name="d" /> 和 <paramref name="t" /> 之值的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定執行個體是否相等。</summary>
      <param name="d1">要比較的第一個物件。</param>
      <param name="d2">要比較的第二個物件。</param>
      <returns>當 <see langword="true" /> 和 <paramref name="d1" /> 代表相同的日期和時間時為 <paramref name="d2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否晚於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>當 <see langword="true" /> 晚於 <paramref name="t1" /> 時為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>判斷某個指定之 <see cref="T:System.DateTime" /> 表示的是同於還是晚於另一個指定之 <see cref="T:System.DateTime" /> 的日期和時間。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>當 <see langword="true" /> 與 <paramref name="t1" /> 為同時或更晚時為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定執行個體是否不相等。</summary>
      <param name="d1">要比較的第一個物件。</param>
      <param name="d2">要比較的第二個物件。</param>
      <returns>當 <see langword="true" /> 和 <paramref name="d1" /> 不代表相同的日期和時間時為 <paramref name="d2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否早於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>當 <see langword="true" /> 早於 <paramref name="t1" /> 時為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>判斷某個指定之 <see cref="T:System.DateTime" /> 表示的是同於還是早於另一個指定之 <see cref="T:System.DateTime" /> 的日期和時間。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>當 <paramref name="t1" /> 與 <paramref name="t2" /> 為同時或更早時為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>將另一個指定的日期和時間減去指定的日期和時間，並傳回時間間隔。</summary>
      <param name="d1">位於減號左邊的日期和時間值 (被減數)。</param>
      <param name="d2">位於減號右邊的日期和時間值 (減數)。</param>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 之間的時間間隔，也就是 <paramref name="d1" /> 減 <paramref name="d2" />。</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>將指定的日期和時間減去指定的時間間隔，並傳回新的日期和時間。</summary>
      <param name="d">位於減號左邊的日期和時間值。</param>
      <param name="t">要減去的時間間隔。</param>
      <returns>物件，其值為 <paramref name="d" /> 值減掉 <paramref name="t" /> 值的差異值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用文化特定格式資訊及格式化樣式，將包含日期與時間字串表示的記憶體範圍轉換成相等 <see cref="T:System.DateTime" />。</summary>
      <param name="s">包含要剖析字串的記憶體範圍。 如需詳細資訊，請參閱要剖析的字串。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。  請參閱剖析和文化特性慣例</param>
      <param name="styles">列舉值的位元組合，表示可以在 <paramref name="s" /> 中出現使剖析作業成功，以及定義如何解譯剖析的日期與目前時區或目前日期之間關聯性的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="provider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期與時間的有效字串表示。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合。 如需範例，請參閱 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 與 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>使用目前執行緒文化特性的慣例，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">字串，包含要轉換的日期和時間。 如需詳細資訊，請參閱要剖析的字串。</param>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期與時間的有效字串表示。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>使用特定文化特性格式資訊，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">字串，包含要轉換的日期和時間。 如需詳細資訊，請參閱要剖析的字串。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。  請參閱剖析和文化特性慣例</param>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期與時間的有效字串表示。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用特定文化特性格式資訊及格式樣式，將日期和時間的字串表示轉換為其相等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">字串，包含要轉換的日期和時間。 如需詳細資訊，請參閱要剖析的字串。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。  請參閱剖析和文化特性慣例</param>
      <param name="styles">列舉值的位元組合，表示可以在 <paramref name="s" /> 中出現使剖析作業成功，以及定義如何解譯剖析的日期與目前時區或目前日期之間關聯性的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="provider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期與時間的有效字串表示。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合。 如需範例，請參閱 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 與 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="s" />
      <param name="format" />
      <param name="provider" />
      <param name="style" />
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="s" />
      <param name="formats" />
      <param name="provider" />
      <param name="style" />
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，其定義 <paramref name="s" /> 所需的格式。 如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。</param>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 為空字串。  
-或- 
 <paramref name="s" /> 不包含與 <paramref name="format" /> 中所指定之模式對應的日期和時間。  
-或- 
小時元件和 <paramref name="s" /> 中的 AM/PM 指示項不相符。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式，否則會擲回例外狀況。</summary>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="format">格式規範，其定義 <paramref name="s" /> 所需的格式。 如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="style">列舉值的位元組合，提供有關 <paramref name="s" />、可以出現在 <paramref name="s" /> 中的樣式項目，或是從 <paramref name="s" /> 轉換成 <see cref="T:System.DateTime" /> 值的詳細資訊。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 為空字串。  
-或- 
 <paramref name="s" /> 不包含與 <paramref name="format" /> 中所指定之模式對應的日期和時間。  
-或- 
小時元件和 <paramref name="s" /> 中的 AM/PM 指示項不相符。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合。 如需範例，請參閱 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 與 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須至少完全符合其中一個指定的格式，否則會擲回例外狀況。</summary>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="formats">
        <paramref name="s" /> 允許的格式陣列。 如需詳細資訊，請參閱＜備註＞一節。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>物件，與 <paramref name="s" /> 中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="formats" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 為空字串。  
-或- 
<paramref name="formats" /> 的項目為空字串。  
-或- 
 <paramref name="s" /> 不包含對應 <paramref name="formats" /> 任何項目的日期和時間。  
-或- 
小時元件和 <paramref name="s" /> 中的 AM/PM 指示項不相符。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合。 如需範例，請參閱 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 與 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>取得這個執行個體所表示日期的秒數元件。</summary>
      <returns>秒數元件，以 0 到 59 之間的值表示。</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>建立新的 <see cref="T:System.DateTime" /> 物件，此物件的刻度數與指定的 <see cref="T:System.DateTime" /> 相同，但依指定的 <see cref="T:System.DateTimeKind" /> 值所示，指定為本地時間、國際標準時間 (Coordinated Universal Time，UTC)，或兩者都不是。</summary>
      <param name="value">日期和時間。</param>
      <param name="kind">其中一個列舉值，表示新的物件表示本地時間、UTC，或兩者都不是。</param>
      <returns>新物件，這個物件的刻度數與 <paramref name="value" /> 參數代表的物件相同，且具有 <see cref="T:System.DateTimeKind" /> 參數指定的 <paramref name="kind" /> 值。</returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>傳回會將指定日期和時間從此執行個體的值減去的新 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要減去的日期和時間。</param>
      <returns>時間間隔，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">這個結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>傳回會將指定期間從此執行個體的值減去的新 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要減去的時間間隔。</param>
      <returns>物件，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的時間間隔。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">這個結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>傳回目前的 <see cref="T:System.DateTime" />物件。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>目前的物件。</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>將目前的 <see cref="T:System.DateTime" /> 物件轉換為指定類型的物件。</summary>
      <param name="type">所要的類型。</param>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>
        <paramref name="type" /> 參數所指定之類型的物件，包含相當於目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DateTime" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料，填入 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="info">要填入資料的物件。</param>
      <param name="context">這個序列化的目的端。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>取得表示這個執行個體日期和時間的刻度數目。</summary>
      <returns>刻度數目，表示這個執行個體的日期和時間。 值介於 <see langword="DateTime.MinValue.Ticks" /> 和 <see langword="DateTime.MaxValue.Ticks" /> 之間。</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>取得這個執行個體的一天時間。</summary>
      <returns>時間間隔，表示從午夜以來已經過的當天部分。</returns>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>將目前的 <see cref="T:System.DateTime" /> 物件序列化成 64 位元的二進位值，之後可以用這個值來重新建立 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>64 位元帶正負號的整數，可以編碼 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 屬性。</returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>取得目前的日期。</summary>
      <returns>物件，設定為今天的日期，且時間元件設定為 00:00:00。</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間會代表西元 1601 年 1 月 1 日午夜 12:00 之前的日期和時間。 UTC。</exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間會代表西元 1601 年 1 月 1 日午夜 12:00 之前的日期和時間。 UTC。</exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成本地時間。</summary>
      <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，而其值為與目前 <see cref="T:System.DateTime" /> 物件的值相等的本地時間；如果轉換過的值太大，而無法由 <see cref="F:System.DateTime.MaxValue" /> 物件表示，則為 <see cref="T:System.DateTime" />；如果轉換過的值太小，而無法表示為 <see cref="F:System.DateTime.MinValue" /> 物件，則為 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的完整日期 (Long Date) 字串表示。</summary>
      <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的完整日期字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的完整時間 (Long Time) 字串表示。</summary>
      <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的完整時間字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>將這個執行個體的值轉換為相等的 OLE Automation 日期。</summary>
      <returns>雙精確度浮點數，含有等於這個執行個體值的 OLE Automation 日期。</returns>
      <exception cref="T:System.OverflowException">這個執行個體的值無法表示為 OLE Automation 日期。</exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的簡短日期 (Short Date) 字串表示。</summary>
      <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的簡短日期字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的簡短時間 (Short Time) 字串表示。</summary>
      <returns>字串，內含目前 <see cref="T:System.DateTime" /> 物件的簡短時間字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>使用目前文化特性的格式化慣例，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出 <paramref name="provider" /> 使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>使用指定的格式和目前文化特性的格式化慣例，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其相等的字串表示。</summary>
      <param name="format">標準或自訂的日期和時間格式字串。</param>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 長度為 1，而且不屬於針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定義的格式規範字元。  
-或- 
 <paramref name="format" /> 不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值，轉換為其相等的字串表示。</summary>
      <param name="format">標準或自訂的日期和時間格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如 <paramref name="format" /> 及 <paramref name="provider" />所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 長度為 1，而且不屬於針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定義的格式規範字元。  
-或- 
 <paramref name="format" /> 不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出 <paramref name="provider" /> 使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成國際標準時間 (UTC)。</summary>
      <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Utc" />，而其值為與目前 <see cref="T:System.DateTime" /> 物件的值相等的 UTC 時間；如果轉換過的值太大，而無法由 <see cref="F:System.DateTime.MaxValue" /> 物件表示，則為 <see cref="T:System.DateTime" />；如果轉換過的值太小，而無法表示為 <see cref="F:System.DateTime.MinValue" /> 物件，則為 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="provider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />，並傳回一個值表示轉換是否成功。</summary>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 參數為 <see langword="null" />、為空字串 ("") 或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTime" />，並傳回值，這個值表示轉換是否成功。</summary>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，這個組合會定義如何根據目前時區或目前日期解譯已剖析的日期。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 參數為 <see langword="null" />、為空字串 ("") 或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> 是中性文化特性，不能用在剖析作業。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="format" />
      <param name="provider" />
      <param name="style" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="formats" />
      <param name="provider" />
      <param name="style" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須完全符合指定的格式。 此方法會傳回值，這個值表示轉換是否成功。</summary>
      <param name="s">字串，含有要轉換的日期和時間。</param>
      <param name="format">
        <paramref name="s" /> 的必要格式。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="style">一個或多個列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="format" /> 參數為 <see langword="null" />、空字串，或不包含與 <paramref name="format" /> 中指定之模式相對應的日期和時間，則此轉換作業會失敗。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTime" />。 字串表示的格式必須至少完全符合其中一個指定格式。 此方法會傳回值，這個值表示轉換是否成功。</summary>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="formats">
        <paramref name="s" /> 允許的格式陣列。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之特定文化特性格式資訊的物件。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <see cref="T:System.DateTime" /> 中內含之日期與時間相等的 <paramref name="s" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="formats" /> 為 <see langword="null" />、<paramref name="s" /> 或 <paramref name="formats" /> 的一個項目為空字串，或是 <paramref name="s" /> 的格式沒有與 <paramref name="formats" /> 中的至少一個格式模式所指定的內容完全相同，則此轉換作業會失敗。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 <paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
    </member>
    <member name="F:System.DateTime.UnixEpoch" />
    <member name="P:System.DateTime.UtcNow">
      <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以國際標準時間 (UTC) 表示。</summary>
      <returns>物件，其值為目前的 UTC 日期和時間。</returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>取得這個執行個體所表示日期的年份元件。</summary>
      <returns>年份，在 1 和 9999 之間。</returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>指定 <see cref="T:System.DateTime" /> 物件是否表示本地時間、Coordinated Universal Time (UTC) 或是兩者皆非。</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>表示的時間為本地時間。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>表示的時間既未指定為本地時間，也未指定為 Coordinated Universal Time (UTC)。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>表示的時間為 UTC。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>表示一個時間點，通常以一天的日期和時間表示 (相對於國際標準時間)。</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="dateTime">日期和時間。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">套用位移所產生的國際標準時間 (UTC) 日期與時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
套用位移所產生的 UTC 日期與時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值及位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="dateTime">日期和時間。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Utc" />，且 <paramref name="offset" /> 不等於零。  
-或- 
 <paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Local" />，且 <paramref name="offset" /> 不等於該系統的當地時區位移。  
-或- 
 <paramref name="offset" /> 未指定以分鐘為單位。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於 -14 小時或大於 14 小時。  
-或- 
 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>使用指定之曆法的指定年、月、日、時、分、秒、毫秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="calendar">用以解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的行事曆。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 不可以是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 <paramref name="calendar" /> 參數的 <see langword="MinSupportedDateTime.Year" /> 或大於 <see langword="MaxSupportedDateTime.Year" />。  
-或- 
 <paramref name="month" /> 小於或大於 <paramref name="calendar" /> 中 <paramref name="year" /> 的月數。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="offset" /> 小於 -14 小時或大於 14 小時。  
-或- 
<paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 參數無法以日期和時間值表示。  
-或- 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、時、分、秒、毫秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="offset" /> 小於 -14 或大於 14。  
-或- 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、時、分、秒和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。  
-或- 
 <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="offset" /> 小於 -14 小時或大於 14 小時。  
-或- 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>使用指定數目的刻度和位移，初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="ticks">以 0001 年 1 月 1 日午夜 12:00:00 以來已經過的 100 奈秒間隔數表示的日期和時間。</param>
      <param name="offset">國際標準時間 (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 未指定以分鐘為單位。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性早於 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。  
-或- 
 <paramref name="ticks" /> 小於 <see langword="DateTimeOffset.MinValue.Ticks" /> 或大於 <see langword="DateTimeOffset.MaxValue.Ticks" />。  
-或- 
 <paramref name="Offset" /> 小於 -14 小時或大於 14 小時。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的時間間隔。</summary>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> 物件，表示正的或負的時間間隔。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="timeSpan" /> 所表示之時間間隔的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的整數和小數天數。</summary>
      <param name="days">整數和小數的天數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="days" /> 所表示之天數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，這個物件將這個執行個體的值加上指定的整數和小數時數。</summary>
      <param name="hours">整數和小數的時數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所代表之日期和時間加上 <paramref name="hours" /> 所代表之時數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的毫秒數。</summary>
      <param name="milliseconds">整數和小數的毫秒數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="milliseconds" /> 所表示之整數毫秒數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的整數和小數分鐘數。</summary>
      <param name="minutes">整數和小數的分鐘數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="minutes" /> 所表示之分鐘數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的月數。</summary>
      <param name="months">整數月份數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="months" /> 所表示之月份數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的整數和小數秒數。</summary>
      <param name="seconds">整數和小數的秒數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="seconds" /> 所表示之秒數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的刻度數。</summary>
      <param name="ticks">100 毫微秒刻度數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="ticks" /> 所表示之刻度數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTimeOffset" /> 物件，將這個執行個體的值加上指定的年數。</summary>
      <param name="years">年份數。 可以是負數或正數。</param>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期及時間加上 <paramref name="years" /> 所表示之年份數的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>比較兩個 <see cref="T:System.DateTimeOffset" /> 物件，並指出第一個日期是早於、等於還是晚於第二個日期。</summary>
      <param name="first">要比較的第一個物件。</param>
      <param name="second">要比較的第二個物件。</param>
      <returns>帶正負號的整數，表示 <paramref name="first" /> 參數的值是早於、晚於或等於 <paramref name="second" /> 參數的值，如下表所示。  
  傳回值 
  意義 
  小於零 
 <paramref name="first" /> 早於 <paramref name="second" />。  

  零 
 <paramref name="first" /> 等於 <paramref name="second" />。  

  大於零 
 <paramref name="first" /> 晚於 <paramref name="second" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件進行比較，並指示目前物件是早於、等於還是晚於第二個 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
      <returns>帶正負號的整數，表示目前 <see cref="T:System.DateTimeOffset" /> 物件和 <paramref name="other" /> 之間的關係，如下表所示。  
  傳回值 
  說明 
  小於零 
  目前 <see cref="T:System.DateTimeOffset" /> 物件早於 <paramref name="other" />。  

  零 
  目前 <see cref="T:System.DateTimeOffset" /> 物件等於 <paramref name="other" />。  

  大於零。  

  目前 <see cref="T:System.DateTimeOffset" /> 物件晚於 <paramref name="other" />。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之月份中的第幾天。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的天數元件，以 1 到 31 之間的數值表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示的星期幾。</summary>
      <returns>一個列舉值，表示目前 <see cref="T:System.DateTimeOffset" /> 物件的星期幾。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之一年中的第幾天。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件之一年中的第幾天，以 1 到 366 之間的數值表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
      <param name="other">要與目前的 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
      <param name="first">要比較的第一個物件。</param>
      <param name="second">要比較的第二個物件。</param>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>判斷 <see cref="T:System.DateTimeOffset" /> 物件與指定的物件是否代表相同的時間點。</summary>
      <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件進行比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 參數為 <see cref="T:System.DateTimeOffset" /> 物件且與目前 <see cref="T:System.DateTimeOffset" /> 物件代表相同的時間點，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間且具有相同的位移。</summary>
      <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件進行比較的物件。</param>
      <returns>如果目前 <see cref="T:System.DateTimeOffset" /> 物件與 <paramref name="other" /> 具有相同的日期和時間值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
      <param name="fileTime">Windows 檔案時間，以刻度表示。</param>
      <returns>物件，表示位移已經設定為本地時間位移之 <paramref name="fileTime" /> 的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> 小於零。  
-或- 
 <paramref name="filetime" /> 大於 <see langword="DateTimeOffset.MaxValue.Ticks" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)">
      <summary>將自 1970-01-01T00:00:00Z 以來所經過的 Unix 時間 (以毫秒數表示)，轉換成 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="milliseconds">自 1970-01-01T00:00:00Z (1970 年 1 月 1 日上午 12:00 UTC) 以來所經過的 Unix 時間 (以毫秒數表示)。 若是在此日期之前的 Unix 時間點，其值為負數。</param>
      <returns>表示與 Unix 時間相同時間點的日期和時間值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 小於 -62,135,596,800,000。  
-或- 
 <paramref name="milliseconds" /> 大於 253,402,300,799,999。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)">
      <summary>將自 1970-01-01T00:00:00Z 以來所經過的 Unix 時間 (以秒數表示)，轉換成 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="seconds">自 1970-01-01T00:00:00Z (1970 年 1 月 1 日上午 12:00 UTC) 以來所經過的 Unix 時間 (以秒數表示)。 若是在此日期之前的 Unix 時間點，其值為負數。</param>
      <returns>表示與 Unix 時間相同時間點的日期和時間值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 小於 -62,135,596,800。  
-或- 
 <paramref name="seconds" /> 大於 253,402,300,799。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>傳回目前 <see cref="T:System.DateTimeOffset" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件表示之時間的時數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的時數元件。 這個屬性使用 24 小時制，且值的範圍從 0 到 23。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的本地日期和時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的當地日期和時間。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。 此欄位為唯讀。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> 已超出目前或指定的文化特性的預設行事曆範圍。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的毫秒數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的毫秒數元件，以 0 到 999 之間的整數表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的分鐘數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的分鐘數元件，以 0 到 59 之間的整數表示。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>表示最早的 <see cref="T:System.DateTimeOffset" /> 可能值。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的月份元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的月份元件，以 1 到 12 之間的整數表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，這個物件的日期和時間已設定為目前電腦上的目前日期和時間，而位移已設定為本地時間相對於國際標準時間 (UTC) 的位移。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件，其日期和時間為目前本地時間，而位移為本地時區相對於國際標準時間 (UTC) 的位移。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>取得 Coordinated Universal Time (UTC) 的時間位移。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的時間值和 Coordinated Universal Time (UTC) 之間的時差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>將指定的時間間隔加入具有指定日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件中，並產生具有新日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <param name="dateTimeOffset">要在其中加入時間間隔的物件。</param>
      <param name="timeSpan">要加入的時間間隔。</param>
      <returns>物件，其值為 <paramref name="dateTimeTz" /> 和 <paramref name="timeSpan" /> 值的總和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否代表相同的時間點。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或晚於) 第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或等於) 第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等於或晚於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>定義從 <see cref="T:System.DateTime" /> 物件到 <see cref="T:System.DateTimeOffset" /> 物件的隱含轉換。</summary>
      <param name="dateTime">要轉換的物件。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">套用位移所產生的國際標準時間 (UTC) 日期與時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
套用位移所產生的 UTC 日期與時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否參照不同的時間點。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第二個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>從其他 <see cref="T:System.DateTimeOffset" /> 物件減去一個物件並產生時間間隔。</summary>
      <param name="left">被減數。</param>
      <param name="right">減數。</param>
      <returns>物件，代表 <paramref name="left" /> 和 <paramref name="right" /> 之間的差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>從指定的日期和時間減去指定的時間間隔，並產生新的日期和時間。</summary>
      <param name="dateTimeOffset">當做被減數的日期和時間物件。</param>
      <param name="timeSpan">要減去的時間間隔。</param>
      <returns>物件，等於 <paramref name="dateTimeOffset" /> 減去 <paramref name="timeSpan" /> 的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>將日期、時間和位移的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期與時間的有效字串表示。  
-或- 
 <paramref name="input" /> 包含不含日期或時間之位移值的字串表示。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="formatProvider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期與時間的有效字串表示。  
-或- 
 <paramref name="input" /> 包含不含日期或時間之位移值的字串表示。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
-或- 
 <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 <paramref name="styles" /> 包含不支援的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 <paramref name="styles" /> 包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期與時間的有效字串表示。  
-或- 
 <paramref name="input" /> 包含不含日期或時間之位移值的字串表示。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、文化特性特定格式資訊與樣式，將代表日期和時間的字元，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 日期和時間表示的格式必須完全符合指定的格式。</summary>
      <param name="input">代表日期和時間的字元範圍。</param>
      <param name="format">包含定義 <paramref name="input" /> 預期格式之格式規範的字元範圍。</param>
      <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
      <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或-<paramref name="styles" /> 參數包含不支援的值。-或-<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 是空的字元範圍。 -或- <paramref name="input" /> 不包含日期和時間的有效字串表示。 -或- <paramref name="format" /> 是空的字元範圍。 -或- 小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、文化特性特定格式資訊與樣式，將包含日期和時間字串表示的字元範圍，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 日期和時間表示的格式必須完全符合其中一個指定的格式。</summary>
      <param name="input">包含要轉換之日期和時間的字元範圍。</param>
      <param name="formats">格式規範陣列，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
      <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或- <paramref name="styles" /> 包括不支援的值。-或-<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 是空的字元範圍。-或- <paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="formats" /> 的項目未包含有效的格式規範。-或-小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，其定義 <paramref name="input" /> 應有的格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。  
-或- 
 <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 為空字串 ("")。  
-或- 
 <paramref name="input" /> 不包含日期與時間的有效字串表示。  
-或- 
 <paramref name="format" /> 為空字串。  
-或- 
小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，其定義 <paramref name="input" /> 應有的格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
      <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
-或- 
<paramref name="styles" /> 參數包含不支援的值。  
-或- 
<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。  
-或- 
 <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 為空字串 ("")。  
-或- 
 <paramref name="input" /> 不包含日期與時間的有效字串表示。  
-或- 
 <paramref name="format" /> 為空字串。  
-或- 
小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formats">格式規範陣列，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
      <returns>物件，與 <paramref name="input" /> 參數中包含的日期和時間相等，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。  
-或- 
 <paramref name="styles" /> 包含不支援的值。  
-或- 
<paramref name="styles" /> 參數包含無法搭配使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 為空字串 ("")。  
-或- 
 <paramref name="input" /> 不包含日期與時間的有效字串表示。  
-或- 
<paramref name="formats" /> 的項目未包含有效的格式規範。  
-或- 
小時元件和 <paramref name="input" /> 中的 AM/PM 指示項不相符。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時鐘時間的秒數元件。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件的秒數元件，以 0 到 59 之間的整數表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>從目前的 <see cref="T:System.DateTimeOffset" /> 物件減去表示特定日期和時間的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="value">物件，表示要減去的值。</param>
      <returns>物件，指定兩個 <see cref="T:System.DateTimeOffset" /> 物件的間隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>從目前 <see cref="T:System.DateTimeOffset" /> 物件減去指定的時間間隔。</summary>
      <param name="value">要減去的時間間隔。</param>
      <returns>物件，等於目前 <see cref="T:System.DateTimeOffset" /> 物件所代表的日期和時間減去 <paramref name="value" /> 所代表的時間間隔。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值與相同型別的其他物件進行比較。</summary>
      <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
      <returns>32 位元帶正負號的整數，表示目前 <see cref="T:System.DateTimeOffset" /> 物件是小於、等於還是大於 <paramref name="obj" />。 方法的傳回值依如下解譯： 
  傳回值 
  說明 
  小於零 
  目前 <see cref="T:System.DateTimeOffset" /> 物件小於 (早於) <paramref name="obj" />。  
  零 
  目前 <see cref="T:System.DateTimeOffset" /> 物件等於 <paramref name="obj" /> (時間點相同)。  
  大於零 
  目前 <see cref="T:System.DateTimeOffset" /> 物件大於 (晚於) <paramref name="obj" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在物件完成還原序列化時執行。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料填入 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <param name="info">要填入資料的物件。</param>
      <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>取得刻度數，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之時鐘時間的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件之時間的刻度數。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件之一天中的時間。</summary>
      <returns>自午夜起已經過之目前日期的時間間隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的值，以 Windows 檔案時間表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜以前的日期和時間， 以 Coordinated Universal Time (UTC) 時間計算。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示本地時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，表示轉換為本地時間之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為位移值指定的日期和時間。</summary>
      <param name="offset">要將 <see cref="T:System.DateTimeOffset" /> 值轉換成的位移。</param>
      <returns>物件，等於起始 <see cref="T:System.DateTimeOffset" /> 物件 (即它們的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法都會傳回相同的時間點) 但其 <see cref="P:System.DateTimeOffset.Offset" /> 屬性設定成 <paramref name="offset" />。</returns>
      <exception cref="T:System.ArgumentException">產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值早於 <see cref="F:System.DateTimeOffset.MinValue" />。  
-或- 
產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於 -14 小時。  
-或- 
 <paramref name="offset" /> 大於 14 小時。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>包含附加至字串尾端之位移的 <see cref="T:System.DateTimeOffset" /> 物件之字串表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>使用指定的文化特性特定格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示 (如 <paramref name="formatProvider" /> 所指定)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出 <paramref name="formatProvider" /> 使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值，轉換為其相等字串表示。</summary>
      <param name="format">格式字串。</param>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示 (如 <paramref name="format" /> 所指定)。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 長度為 1，而且不屬於針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定義的標準格式規範字元。  
-或- 
 <paramref name="format" /> 不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出目前文化特性使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值，轉換為其相等的字串表示。</summary>
      <param name="format">格式字串。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示，如 <paramref name="format" /> 及 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 長度為 1，而且不屬於針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定義的標準格式規範字元。  
-或- 
 <paramref name="format" /> 不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出 <paramref name="formatProvider" /> 使用之曆法所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示 Coordinated Universal Time (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>物件，表示轉換為 Coordinated Universal Time (UTC) 之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeMilliseconds">
      <summary>傳回自 1970-01-01T00:00:00.000Z 以來所經過的毫秒數。</summary>
      <returns>自 1970-01-01T00:00:00.000Z 以來所經過的毫秒數。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeSeconds">
      <summary>傳回自 1970-01-01T00:00:00Z 以來所經過的秒數。</summary>
      <returns>自 1970-01-01T00:00:00Z 以來所經過的秒數。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>嘗試將日期和時間之指定的字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />，並傳回一個值，指出轉換是否成功。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 參數為 <see langword="null" />，或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>嘗試將日期和時間的指定字串表示轉換為其相等的 <see cref="T:System.DateTimeOffset" />，並傳回表示轉換是否成功的值。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">提供關於 <paramref name="input" /> 之特定文化特性格式資訊的物件。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。</param>
      <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 值就會和 <paramref name="input" /> 的日期和時間相等，或者，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 參數為 <see langword="null" />，或者不包含日期和時間的有效字串表示，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
-或- 
 <paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、文化特性特定格式資訊與樣式，將字元範圍內的日期和時間表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 日期和時間表示的格式必須完全符合指定的格式。</summary>
      <param name="input">包含要轉換之日期和時間表示的字元範圍。</param>
      <param name="format">格式規範，其定義 <paramref name="input" /> 所需的格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
      <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 若...，轉換會失敗。</param>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或- 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。-或- <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或- 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。-或- <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，其定義 <paramref name="input" /> 所需的格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 input 所允許的輸入格式。 一般會指定的值是 <see langword="None" />。</param>
      <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 參數為 <see langword="null" />，或包含的日期和時間不是採用 <paramref name="format" /> 和 <c>provider</c> 所定義預期格式的有效字串表示。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
-或- 
 <paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示，轉換為其相等的 <see cref="T:System.DateTimeOffset" />。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formats">陣列，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 input 所允許的輸入格式。 一般會指定的值是 <see langword="None" />。</param>
      <param name="result">如果轉換成功，方法傳回時內含的 <see cref="T:System.DateTimeOffset" /> 就會和 <paramref name="input" /> 的日期和時間相等；如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 不包含日期和時間的有效字串表示，或者不包含 <paramref name="format" /> 定義之預期格式的日期和時間，或者 <paramref name="formats" /> 為 <see langword="null" />，則轉換會失敗。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <paramref name="input" /> 參數轉換成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
-或- 
 不支援 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
-或- 
 <paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="F:System.DateTimeOffset.UnixEpoch" />
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 日期和時間。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 日期和時間。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，這個物件的日期和時間已設定為目前 Coordinated Universal Time (UTC) 日期和時間，且位移為 <see cref="F:System.TimeSpan.Zero" />。</summary>
      <returns>其日期和時間為目前 Coordinated Universal Time (UTC)，且其位移為 <see cref="F:System.TimeSpan.Zero" /> 的物件。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>取得刻度數，這個值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之 Coordinated Universal Time (UTC) 的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 刻度數。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的年份元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的年份元件，以 0 到 9999 之間的整數表示。</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>指定一週中的星期名稱。</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>表示星期五。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>表示星期一。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>表示星期六。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>表示星期天。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>表示星期四。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>表示星期二。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>表示星期三。</summary>
    </member>
    <member name="T:System.DBNull">
      <summary>表示不存在的值。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.DBNull.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>實作 <see cref="T:System.Runtime.Serialization.ISerializable" /> 介面，並傳回序列化 <see cref="T:System.DBNull" /> 物件所需的資料。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，包含序列化 <see cref="T:System.DBNull" /> 物件所需的資訊。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含與 <see cref="T:System.DBNull" /> 物件相關之序列化資料流的來源與目的端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>取得 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.DBNull" /> 值。</summary>
      <returns>
        <see cref="T:System.TypeCode" /> 的 <see cref="T:System.DBNull" /> 值，其為 <see cref="F:System.TypeCode.DBNull" />。</returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>將目前的 <see cref="T:System.DBNull" /> 物件轉換成指定的型別。</summary>
      <param name="type">要將目前 <see cref="T:System.DBNull" /> 物件轉換成的型別。</param>
      <param name="provider">物件，實作 <see cref="T:System.IFormatProvider" /> 介面並由於擴大轉換。 如果指定 <see langword="null" />，則會從目前的文化特性 (Culture) 取得格式資訊。</param>
      <returns>如果支援該轉換，則為目前 <see cref="T:System.DBNull" /> 物件的 Boxed 對等項目，否則會擲回例外狀況，且不傳回任何值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <returns>無。 不使用此成員的傳回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 類型不支援這個轉換。</exception>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>傳回空字串 (<see cref="F:System.String.Empty" />)。</summary>
      <returns>空字串 (<see cref="F:System.String.Empty" />)。</returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>使用指定的 <see cref="T:System.IFormatProvider" /> 來傳回空字串。</summary>
      <param name="provider">用來格式化傳回值的 <see cref="T:System.IFormatProvider" />。  
-或- 
 <see langword="null" />，用來從作業系統的目前地區設定 (Locale) 取得格式資訊。</param>
      <returns>空字串 (<see cref="F:System.String.Empty" />)。</returns>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>表示 <see cref="T:System.DBNull" /> 類別的唯一執行個體。</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>代表十進位浮點數。</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定雙精確度浮點數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 32 位元帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>從指定執行個體組成部分的參數，初始化 <see cref="T:System.Decimal" /> 的新執行個體。</summary>
      <param name="lo">96 位元整數的低 32 位元。</param>
      <param name="mid">96 位元整數的中 32 位元。</param>
      <param name="hi">96 位元整數的高 32 位元。</param>
      <param name="isNegative">
        <see langword="true" /> 表示負數，<see langword="false" /> 表示正數。</param>
      <param name="scale">範圍從 0 到 28 的 10 乘冪。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> 大於 28。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為以二進位表示並包含在指定陣列中的十進位值。</summary>
      <param name="bits">32 位元帶正負號整數的陣列，包含十進位值的表示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bits" /> 的長度不是 4。  
-或- 
<paramref name="bits" /> 中的十進位值表示法無效。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 64 位元帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定單精確度浮點數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 32 位元不帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定 64 位元不帶正負號整數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>加入兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="d1">要相加的第一個值。</param>
      <param name="d2">要相加的第二個值。</param>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 的總和。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d1" /> 和 <paramref name="d2" /> 的總和小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>傳回大於或等於指定之十進位數字的最小整數值。</summary>
      <param name="d">十進位數字。</param>
      <returns>大於或等於 <paramref name="d" /> 參數的最小整數值。 請注意，這個方法會傳回 <see cref="T:System.Decimal" />，而不是整數類型。</returns>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>比較兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>帶正負號的數字，該數字表示 <paramref name="d1" /> 和 <paramref name="d2" /> 的相對值。  
  傳回值 
  意義 
  小於零 
 <paramref name="d1" /> 小於 <paramref name="d2" />。  

  零 
 <paramref name="d1" /> 和 <paramref name="d2" /> 相等。  

  大於零 
 <paramref name="d1" /> 大於 <paramref name="d2" />。</returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>將這個執行個體與指定的 <see cref="T:System.Decimal" /> 物件相比較，並傳回其相對值的比較。</summary>
      <param name="value">與這個執行個體相互比較的物件。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  意義 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們相對值的比較。</summary>
      <param name="value">要與這個執行個體比較的物件，或為 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  意義 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Decimal" />。</exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的結果。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為零。</exception>
      <exception cref="T:System.OverflowException">傳回值 (也就是商數) 小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Decimal" /> 物件是否表示相同的值。</summary>
      <param name="value">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>傳回數值，指出 <see cref="T:System.Decimal" /> 的兩個指定執行個體是否表示相同的值。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體和指定的 <see cref="T:System.Object" /> 是否表示相同的類型和值。</summary>
      <param name="value">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Decimal" />，並等於這個執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字往負無限大方向捨入為最接近的整數。</summary>
      <param name="d">要捨入的值。</param>
      <returns>如果 <paramref name="d" /> 具有小數部分，則為往負無限大方向，小於 <paramref name="d" /> 的下一個 <see cref="T:System.Decimal" /> 整數。  
-或- 
如果 <paramref name="d" /> 不具有小數部分，則傳回的 <paramref name="d" /> 不變更。 請注意，方法會傳回 <see cref="T:System.Decimal" /> 類型的整數值。</returns>
    </member>
    <member name="M:System.Decimal.FromOACurrency(System.Int64)">
      <summary>將包含 OLE Automation 貨幣值的指定 64 位元帶正負號整數，轉換為對等的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="cy">OLE Automation 貨幣值。</param>
      <returns>包含 <see cref="T:System.Decimal" /> 對等值的 <paramref name="cy" />。</returns>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 的指定執行個體值轉換為其對等二進位表示。</summary>
      <param name="d">要進行轉換的值。</param>
      <returns>32 位元帶正負號的整數陣列，具有包含 <paramref name="d" /> 二進位表示的四個項目。</returns>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Decimal" />。</summary>
      <returns>列舉的常數 <see cref="F:System.TypeCode.Decimal" />。</returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>代表 <see cref="T:System.Decimal" /> 最大的可能值。 這個欄位是不變且唯讀的。</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>表示數字負一 (-1)。</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>代表 <see cref="T:System.Decimal" /> 最小的可能值。 這個欄位是不變且唯讀的。</summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <param name="d1">被乘數。</param>
      <param name="d2">乘數。</param>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 相乘的乘積。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>傳回指定的 <see cref="T:System.Decimal" /> 值乘以負一的乘積。</summary>
      <param name="d">要變換正負號的值。</param>
      <returns>
        <paramref name="d" /> 的十進位數值，但正負號相反。  
-或- 
零 (如果 <paramref name="d" /> 是零)。</returns>
    </member>
    <member name="F:System.Decimal.One">
      <summary>表示數字一 (1)。</summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>加入兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="d1">要相加的第一個值。</param>
      <param name="d2">要相加的第二個值。</param>
      <returns>
        <paramref name="d1" /> 與 <paramref name="d2" /> 相加的結果。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 運算元減一。</summary>
      <param name="d">要遞減的值。</param>
      <returns>
        <paramref name="d" /> 減一的值。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的結果。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為零。</exception>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>傳回值，指出兩個 <see cref="T:System.Decimal" /> 值是否相等。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 8 位元不帶正負號整數的明確轉換。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>8 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 Unicode 字元的明確轉換。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>Unicode 字元，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" /> 或大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>定義從 <see cref="T:System.Decimal" /> 到雙精確度浮點數的明確轉換。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>雙精確度浮點數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 16 位元帶正負號整數的明確轉換。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>16 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 32 位元帶正負號整數的明確轉換。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>32 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 64 位元帶正負號整數的明確轉換。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>64 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 8 位元帶正負號整數的明確轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>8 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>定義從 <see cref="T:System.Decimal" /> 到單精確度浮點數的明確轉換。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>單精確度浮點數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 16 位元不帶正負號整數的明確轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>16 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 32 位元不帶正負號整數的明確轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>32 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>定義從 <see cref="T:System.Decimal" /> 到 64 位元不帶正負號整數的明確轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要進行轉換的值。</param>
      <returns>64 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 是負值或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>定義從雙精確度浮點數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <param name="value">要轉換的雙精確度浮點數。</param>
      <returns>轉換的雙精確度浮點數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>定義從單精確度浮點數到 <see cref="T:System.Decimal" /> 的明確轉換。</summary>
      <param name="value">要轉換的單精確度浮點數。</param>
      <returns>轉換的單精確度浮點數。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否大於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>如果 <see langword="true" /> 大於 <paramref name="d1" /> 則為 <paramref name="d2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否大於或等於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>如果 <paramref name="d1" /> 大於或等於 <paramref name="d2" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>定義從 8 位元不帶正負號整數到 <see cref="T:System.Decimal" /> 的隱含轉換。</summary>
      <param name="value">要轉換之 8 位元不帶正負號的整數。</param>
      <returns>轉換的 8 位元不帶正負號整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>定義從 Unicode 字元到 <see cref="T:System.Decimal" /> 的隱含轉換。</summary>
      <param name="value">要轉換的 Unicode 字元。</param>
      <returns>轉換過的 Unicode 字元。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>定義從 16 位元帶正負號的整數到 <see cref="T:System.Decimal" /> 的隱含轉換。</summary>
      <param name="value">要轉換的 16 位元帶正負號的整數。</param>
      <returns>轉換過的 16 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>定義從 32 位元帶正負號的整數到 <see cref="T:System.Decimal" /> 的隱含轉換。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>轉換過的 32 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>定義從 64 位元帶正負號的整數到 <see cref="T:System.Decimal" /> 的隱含轉換。</summary>
      <param name="value">要轉換的 64 位元帶正負號的整數。</param>
      <returns>轉換過的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>定義從 8 位元帶正負號的整數到 <see cref="T:System.Decimal" /> 的隱含轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要轉換的 8 位元帶正負號的整數。</param>
      <returns>轉換過的 8 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>定義從 16 位元不帶正負號的整數到 <see cref="T:System.Decimal" /> 的隱含轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要轉換之 16 位元不帶正負號的整數。</param>
      <returns>轉換的 16 位元不帶正負號整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>定義從 32 位元不帶正負號整數到 <see cref="T:System.Decimal" /> 的隱含轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要轉換之 32 位元不帶正負號的整數。</param>
      <returns>轉換的 32 位元不帶正負號整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>定義從 64 位元不帶正負號整數到 <see cref="T:System.Decimal" /> 的隱含轉換。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要轉換之 64 位元不帶正負號的整數。</param>
      <returns>轉換的 64 位元不帶正負號整數。</returns>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 運算元加 1。</summary>
      <param name="d">要遞增的值。</param>
      <returns>加 1 的 <paramref name="d" /> 值。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>傳回值，指出兩個 <see cref="T:System.Decimal" /> 物件是否有不同的值。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否小於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>如果 <paramref name="d1" /> 小於 <paramref name="d2" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Decimal" /> 是否小於或等於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比較的第一個值。</param>
      <param name="d2">要比較的第二個值。</param>
      <returns>如果 <paramref name="d1" /> 小於或等於 <paramref name="d2" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>傳回從兩個指定的 <see cref="T:System.Decimal" /> 值相除所得的餘數。</summary>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 所得的餘數。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為 <see langword="zero" />。</exception>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <param name="d1">要相乘的第一個值。</param>
      <param name="d2">要相乘的第二個值。</param>
      <returns>
        <paramref name="d1" /> 乘以 <paramref name="d2" /> 的結果。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相減。</summary>
      <param name="d1">被減數。</param>
      <param name="d2">減數。</param>
      <returns>
        <paramref name="d2" /> 減去 <paramref name="d1" /> 的結果。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 運算元值變換正負號。</summary>
      <param name="d">要變換正負號的值。</param>
      <returns>
        <paramref name="d" /> 乘以負一 (-1) 的乘積。</returns>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>傳回 <see cref="T:System.Decimal" /> 運算元的值 (運算元的正負號不變)。</summary>
      <param name="d">要傳回的運算元。</param>
      <returns>運算元 <paramref name="d" /> 的值。</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>將數字的字串表示，轉換為其相等的 <see cref="T:System.Decimal" />。</summary>
      <param name="s">要轉換的數字的字串表示。</param>
      <returns>與 <paramref name="s" /> 中包含的數字相等的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換為其相等的 <see cref="T:System.Decimal" />。</summary>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出可出現在 <paramref name="s" /> 中的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="style" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定的樣式和特定文化特性格式，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。</summary>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出可出現在 <paramref name="s" /> 中的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，提供關於 <paramref name="s" /> 格式的特定文化特性資訊。</param>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="style" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。</summary>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性剖析資訊。</param>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>計算將兩個 <see cref="T:System.Decimal" /> 值相除後的餘數。</summary>
      <param name="d1">被除數。</param>
      <param name="d2">除數。</param>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 後的餘數。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為零。</exception>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal)">
      <summary>將十進位值四捨五入為最接近的整數。</summary>
      <param name="d">要捨入的十進位數字。</param>
      <returns>最接近 <paramref name="d" /> 參數的整數。 如果 <paramref name="d" /> 介於兩個整數中間，一個為偶數，一個為奇數，則會傳回偶數。</returns>
      <exception cref="T:System.OverflowException">結果超出 <see cref="T:System.Decimal" /> 值的範圍。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>將 <see cref="T:System.Decimal" /> 值捨入為指定的小數位數。</summary>
      <param name="d">要捨入的十進位數字。</param>
      <param name="decimals">從 0 到 28 的值，這個值指定要捨入到的小數位數。</param>
      <returns>十進位數字，等於捨入為 <paramref name="d" /> 小數位數的 <paramref name="decimals" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 不是從 0 到 28 的值。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>將十進位的值捨入至指定的精確度。 如果值介於兩個其他數字之間，參數會指定如何捨入該值。</summary>
      <param name="d">要捨入的十進位數字。</param>
      <param name="decimals">在傳回值中的有效小數位數 (精確度)。</param>
      <param name="mode">此值指定當 <paramref name="d" /> 介於另外兩個數字中間時的捨入法。</param>
      <returns>最接近 <paramref name="d" /> 參數的數字，有效位數等於 <paramref name="decimals" /> 參數。 如果 <paramref name="d" /> 在兩個數字的中間 (一個為偶數，另一個為奇數)，<paramref name="mode" /> 參數會判斷要傳回兩個數字中的哪一個。 如果 <paramref name="d" /> 的精確度少於 <paramref name="decimals" />，則 <paramref name="d" /> 傳回時不會變更。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小於 0 或大於 28。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">結果超出 <see cref="T:System.Decimal" /> 物件的範圍。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)">
      <summary>將十進位值四捨五入為最接近的整數。 如果值介於兩個其他數字之間，參數會指定如何捨入該值。</summary>
      <param name="d">要捨入的十進位數字。</param>
      <param name="mode">此值指定當 <paramref name="d" /> 介於另外兩個數字中間時的捨入法。</param>
      <returns>最接近 <paramref name="d" /> 參數的整數。 如果 <paramref name="d" /> 在兩個數字的中間 (一個為偶數，另一個為奇數)，<paramref name="mode" /> 參數會判斷要傳回兩個數字中的哪一個。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">結果超出 <see cref="T:System.Decimal" /> 物件的範圍。</exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>將另一個值減去一個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="d1">被減數。</param>
      <param name="d2">減數。</param>
      <returns>
        <paramref name="d2" /> 減去 <paramref name="d1" /> 的結果。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>無。 不支援這個轉換。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>無。 不支援這個轉換。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">將這個 <see cref="T:System.Decimal" /> 執行個體的值轉換成此類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關特定文化特性資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">不支援要求的類型轉換。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在物件完成還原序列化時執行。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Decimal" /> 物件包含無效或損毀的資料。</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 8 位元不帶正負號整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的雙精確度浮點數。</summary>
      <param name="d">要轉換的十進位數字。</param>
      <returns>雙精確度浮點數，等於 <paramref name="d" />。</returns>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 16 位元帶正負號整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 32 位元帶正負號整數。</summary>
      <param name="d">要轉換的十進位數字。</param>
      <returns>32 位元帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 64 位元帶正負號整數。</summary>
      <param name="d">要轉換的十進位數字。</param>
      <returns>64 位元帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToOACurrency(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 OLE Automation 貨幣值，這個值包含在 64 位元帶正負號的整數中。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>64 位元帶正負號的整數，包含 <paramref name="value" /> 的對等 OLE Automation。</returns>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 8 位元帶正負號整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的單精確度浮點數。</summary>
      <param name="d">要轉換的十進位數字。</param>
      <returns>單精確度浮點數，等於 <paramref name="d" /> 的值。</returns>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>字串，表示這個執行個體的值。</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">標準或自訂數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 16 位元不帶正負號整數。</summary>
      <param name="value">要轉換的十進位數字。</param>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt16.MaxValue" /> 或小於 <see cref="F:System.UInt16.MinValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 32 位元不帶正負號整數。</summary>
      <param name="d">要轉換的十進位數字。</param>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 是負值或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 64 位元不帶正負號整數。</summary>
      <param name="d">要轉換的十進位數字。</param>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 是負值或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>傳回指定 <see cref="T:System.Decimal" /> 的整數數字；捨棄任何小數數字。</summary>
      <param name="d">要截斷的十進位數字。</param>
      <returns>將 <paramref name="d" /> 趨近零捨入為最接近之整數的結果。</returns>
    </member>
    <member name="M:System.Decimal.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Decimal@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>將數字的字串表示，轉換為其相等的 <see cref="T:System.Decimal" />。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="result">當此方法傳回時，包含相當於 <paramref name="s" /> 中所包含數值的 <see cref="T:System.Decimal" /> 數，或若轉換失敗，則傳回零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的數字，或者代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字，這項轉換就會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都會被覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>使用指定的樣式和特定文化特性格式，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 的相關特定文化特性剖析資訊。</param>
      <param name="result">當此方法傳回時，包含相當於 <paramref name="s" /> 中所包含數值的 <see cref="T:System.Decimal" /> 數，或若轉換失敗，則傳回零。 若 <paramref name="s" /> 參數是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />不是符合 <paramref name="style" /> 格式規範的數字或代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都會被覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>表示數字零 (0)。</summary>
    </member>
    <member name="T:System.Delegate">
      <summary>表示委派，它是參考到靜態方法或該類別的類別執行個體和執行個體方法 (Instance Method) 的資料結構。</summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>初始化委派，這個委派會在指定的類別執行個體上叫用指定的執行個體方法。</summary>
      <param name="target">委派用來叫用 <paramref name="method" /> 的類別執行個體。</param>
      <param name="method">委派表示的執行個體方法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">繫結至目標方法時發生錯誤。</exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>初始化委派，這個委派會從指定的類別叫用指定的靜態方法。</summary>
      <param name="target">
        <see cref="T:System.Type" />，表示定義 <paramref name="method" /> 的類別。</param>
      <param name="method">委派表示的靜態方法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="target" /> 表示開放式泛型型別。</exception>
    </member>
    <member name="M:System.Delegate.Clone">
      <summary>建立委派的淺層複本 (Shallow Copy)。</summary>
      <returns>委派的淺層複本。</returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>串連兩個委派的引動過程清單。</summary>
      <param name="a">引動過程清單首先到達的委派。</param>
      <param name="b">引動過程清單最後到達的委派。</param>
      <returns>具有引動過程清單的新委派，這個清單可以該順序串連 <paramref name="a" /> 和 <paramref name="b" /> 的引動過程清單。 如果 <paramref name="b" /> 為 <see langword="null" />，則會傳回 <paramref name="a" />；如果 <paramref name="a" /> 為 Null 參考，則會傳回 <paramref name="b" />；如果 <paramref name="a" /> 和 <paramref name="b" /> 兩者都是 Null 參考，則會傳回 Null 參考。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 和 <paramref name="b" /> 都不是 <see langword="null" />，而且 <paramref name="a" /> 和 <paramref name="b" /> 不是相同委派類型的執行個體。</exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>串連委派陣列的引動過程清單。</summary>
      <param name="delegates">要結合的委派陣列。</param>
      <returns>具有引動過程清單的新委派，此清單可串連 <paramref name="delegates" /> 陣列中委派的引動過程清單。 如果 <paramref name="delegates" /> 是 <see langword="null" />、<paramref name="delegates" /> 包含零個元素，或者 <paramref name="delegates" /> 中的每個項目都是 <see langword="null" />，則會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegates" /> 中的所有非 Null 元素並非都是相同委派型別的執行個體。</exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>串連指定的多點傳送 (可結合的) 委派和目前多點傳送 (可結合的) 委派的引動過程清單。</summary>
      <param name="d">多點傳送 (可結合的) 委派，其引動過程清單要附加到目前多點傳送 (可結合的) 委派的引動過程清單末端。</param>
      <returns>具有引動過程清單的新多點傳送 (可結合式) 委派，此清單可串連目前多點傳送 (可結合式) 委派的引動過程清單和 <paramref name="d" /> 的引動過程清單之委派；而在 <paramref name="d" /> 為 <see langword="null" /> 時，則為目前多點傳送 (可結合式) 委派。</returns>
      <exception cref="T:System.MulticastNotSupportedException">一律擲回。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>建立指定之類型的委派，其表示指定之靜態或執行個體方法，並有指定第一個引數。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="firstArgument">此委派要繫結的物件，或是 <see langword="null" />，表示將 <paramref name="method" /> 視為 <see langword="static" /> (Visual Basic 中則為 <see langword="Shared" />)。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。</param>
      <returns>指定之類型的委派，其表示指定的靜態或執行個體方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 無法繫結 <paramref name="method" />。  
-或- 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 請參閱反映中的執行階段類型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>建立指定之類型的委派，其表示指定之靜態或執行個體方法，並有指定第一個引數以及繫結失敗時所發生的行為。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要建立的委派之類型。</param>
      <param name="firstArgument">
        <see cref="T:System.Object" />，委派所表示的方法之第一個引數。 對於執行個體方法而言，它必須與執行個體類型相容。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。</param>
      <param name="throwOnBindFailure">
        <paramref name="method" /> 表示如果無法繫結 <see langword="true" /> 時，則擲回例外狀況；否則為 <see langword="false" />。</param>
      <returns>指定之類型的委派，表示指定之靜態或執行個體方法；如果 <paramref name="throwOnBindFailure" /> 為 <see langword="false" />，且委派無法繫結至 <paramref name="method" />，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 無法繫結 <paramref name="method" />，而且 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。  
-或- 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 請參閱反映中的執行階段類型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>建立指定類型的委派，這個委派表示要在指定的類別執行個體上叫用的指定執行個體方法。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="target">叫用 <paramref name="method" /> 的類別執行個體。</param>
      <param name="method">委派要表示的執行個體方法名稱。</param>
      <returns>指定類型的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="method" /> 不是執行個體方法。  
-或- 
 例如，因為找不到 <paramref name="method" />，所以無法將其繫結。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>建立指定型別的委派，這個委派表示要在指定的類別執行個體上，使用指定的大小寫區分來叫用的指定執行個體方法。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="target">叫用 <paramref name="method" /> 的類別執行個體。</param>
      <param name="method">委派要表示的執行個體方法名稱。</param>
      <param name="ignoreCase">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</param>
      <returns>指定類型的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="method" /> 不是執行個體方法。  
-或- 
 例如，因為找不到 <paramref name="method" />，所以無法將其繫結。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>建立指定之類型的委派，其表示要在指定的類別執行個體上叫用的指定執行個體方法，且會指定區分大小寫的方式以及在繫結失敗時要發生的行為。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="target">叫用 <paramref name="method" /> 的類別執行個體。</param>
      <param name="method">委派要表示的執行個體方法名稱。</param>
      <param name="ignoreCase">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</param>
      <param name="throwOnBindFailure">
        <paramref name="method" /> 表示如果無法繫結 <see langword="true" /> 時，則擲回例外狀況；否則為 <see langword="false" />。</param>
      <returns>指定類型的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="method" /> 不是執行個體方法。  
-或- 
 無法繫結 <paramref name="method" />，例如因為找不到該方法，以及 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>建立指定型別的委派來表示指定的靜態方法。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。 在 .NET Framework 1.0 和 1.1 版中只支援靜態方法。</param>
      <returns>指定類型的委派，用來表示指定的靜態方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="method" /> 不是靜態方法，而 .NET Framework 版本為 1.0 或 1.1。  
-或- 
 無法繫結 <paramref name="method" />。  
-或- 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 請參閱反映中的執行階段類型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>建立指定之類型的委派，用來表示指定之靜態方法，並包含在繫結失敗時發生的指定之行為。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，描述委派所要表示的靜態或執行個體方法。</param>
      <param name="throwOnBindFailure">
        <paramref name="method" /> 表示如果無法繫結 <see langword="true" /> 時，則擲回例外狀況；否則為 <see langword="false" />。</param>
      <returns>指定類型的委派，用來表示指定的靜態方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 無法繫結 <paramref name="method" />，而且 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。  
-或- 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 請參閱反映中的執行階段類型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>建立指定類型的委派，這個委派表示指定類別的指定靜態方法。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="target">
        <see cref="T:System.Type" />，代表可實作 <paramref name="method" /> 的類別。</param>
      <param name="method">委派要表示的靜態方法名稱。</param>
      <returns>指定類型的委派，表示指定類別的指定靜態方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="target" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="target" /> 是開放式泛型類型。 亦即，其 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。  
-或- 
 <paramref name="method" /> 不是 <see langword="static" /> 方法 (Visual Basic 中的 <see langword="Shared" /> 方法)。  
-或- 
 無法繫結 <paramref name="method" />，例如因為找不到該方法，以及 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>建立指定之類型的委派，其表示指定之類別的指定靜態方法，且指定區分大小寫的方式。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="target">
        <see cref="T:System.Type" />，代表可實作 <paramref name="method" /> 的類別。</param>
      <param name="method">委派要表示的靜態方法名稱。</param>
      <param name="ignoreCase">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</param>
      <returns>指定類型的委派，表示指定類別的指定靜態方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="target" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="target" /> 是開放式泛型類型。 亦即，其 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。  
-或- 
 <paramref name="method" /> 不是 <see langword="static" /> 方法 (Visual Basic 中的 <see langword="Shared" /> 方法)。  
-或- 
 例如，因為找不到 <paramref name="method" />，所以無法將其繫結。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>建立指定之類型的委派，其表示指定之類別的指定靜態方法，且會指定區分大小寫的方式以及在繫結失敗時要發生的行為。</summary>
      <param name="type">要建立之委派的 <see cref="T:System.Type" />。</param>
      <param name="target">
        <see cref="T:System.Type" />，代表可實作 <paramref name="method" /> 的類別。</param>
      <param name="method">委派要表示的靜態方法名稱。</param>
      <param name="ignoreCase">布林值 (Boolean)，指出是否在比較方法名稱時忽略大小寫。</param>
      <param name="throwOnBindFailure">
        <paramref name="method" /> 表示如果無法繫結 <see langword="true" /> 時，則擲回例外狀況；否則為 <see langword="false" />。</param>
      <returns>指定類型的委派，表示指定類別的指定靜態方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。  
-或- 
 <paramref name="target" /> 為 <see langword="null" />。  
-或- 
 <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不會繼承 <see cref="T:System.MulticastDelegate" />。  
-或- 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 請參閱反映中的執行階段類型。  
-或- 
 <paramref name="target" /> 不是 <see langword="RuntimeType" />。  
-或- 
 <paramref name="target" /> 是開放式泛型類型。 亦即，其 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 <see langword="true" />。  
-或- 
 <paramref name="method" /> 不是 <see langword="static" /> 方法 (Visual Basic 中的 <see langword="Shared" /> 方法)。  
-或- 
 無法繫結 <paramref name="method" />，例如因為找不到該方法，以及 <paramref name="throwOnBindFailure" /> 為 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有存取 <paramref name="method" /> 所需的權限。</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>動態叫用 (晚期繫結) 目前委派所表示的方法。</summary>
      <param name="args">物件的陣列，這些物件是要傳遞至目前委派所表示方法的引數。  
-或- 
 如果目前委派所表示的方法不需要引數，則為 <see langword="null" />。</param>
      <returns>物件，由委派所表示的方法傳回。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。  
-或- 
在 <paramref name="args" /> 中列示的參數數目、順序或型別是無效的。</exception>
      <exception cref="T:System.ArgumentException">委派所表示的方法在不支援該方法的物件或類別上被叫用。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">委派所表示的方法是執行個體方法，並且目標物件是 <see langword="null" />。  
-或- 
其中一個封裝的方法會擲回例外狀況。</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvokeImpl(System.Object[])">
      <summary>動態叫用 (晚期繫結) 目前委派所表示的方法。</summary>
      <param name="args">物件的陣列，這些物件是要傳遞至目前委派所表示方法的引數。  
-或- 
 如果目前委派所表示的方法不需要引數，則為 <see langword="null" />。</param>
      <returns>物件，由委派所表示的方法傳回。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。  
-或- 
在 <paramref name="args" /> 中列示的參數數目、順序或型別是無效的。</exception>
      <exception cref="T:System.ArgumentException">委派所表示的方法在不支援該方法的物件或類別上被叫用。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">委派所表示的方法是執行個體方法，並且目標物件是 <see langword="null" />。  
-或- 
其中一個封裝的方法會擲回例外狀況。</exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>判斷指定的物件和目前的委派是否具有相同類型，並共用相同的目標、方法和引動過程清單。</summary>
      <param name="obj">要與目前委派比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 和目前的委派具有相同的目標、方法和引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>傳回委派的雜湊碼。</summary>
      <returns>委派的雜湊碼。</returns>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>傳回委派的引動過程清單。</summary>
      <returns>委派的陣列，表示目前委派的引動過程清單。</returns>
    </member>
    <member name="M:System.Delegate.GetMethodImpl">
      <summary>取得目前委派所表示的靜態方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，描述目前委派所表示的靜態方法。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</exception>
    </member>
    <member name="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>不支援。</summary>
      <param name="info">不支援。</param>
      <param name="context">不支援。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>取得委派所表示的方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，描述委派所表示的方法。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>判斷指定的委派是否相等。</summary>
      <param name="d1">要比較的第一個委派。</param>
      <param name="d2">要比較的第二個委派。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="d1" />，則為 <paramref name="d2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>判斷指定的委派是否不相等。</summary>
      <param name="d1">要比較的第一個委派。</param>
      <param name="d2">要比較的第二個委派。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="d1" />，則為 <paramref name="d2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>從另一個委派的引動過程清單，移除委派的引動過程清單上最後一個項目。</summary>
      <param name="source">委派，要從其中移除 <paramref name="value" /> 的引動過程清單。</param>
      <param name="value">委派，提供要從 <paramref name="source" /> 的引動過程清單移除的引動過程清單。</param>
      <returns>如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="value" /> 的引動過程清單並移除 <paramref name="source" /> 的引動過程清單上最後一個項目所形成的引動過程清單)。 如果 <paramref name="source" /> 是 <see langword="null" />，或未在 <paramref name="value" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。 如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單，或是 <paramref name="source" /> 等於 null 參考，則會傳回 null 參考。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</exception>
      <exception cref="T:System.ArgumentException">委派型別不相符。</exception>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>從另一個委派的引動過程清單，移除委派的引動過程清單上所有的項目。</summary>
      <param name="source">委派，要從其中移除 <paramref name="value" /> 的引動過程清單。</param>
      <param name="value">委派，提供要從 <paramref name="source" /> 的引動過程清單移除的引動過程清單。</param>
      <returns>如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="value" /> 的引動過程清單並移除 <paramref name="source" /> 的引動過程清單上所有的項目所形成的引動過程清單)。 如果 <paramref name="source" /> 是 <see langword="null" />，或未在 <paramref name="value" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。 如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單、<paramref name="source" /> 只包含等於 <paramref name="value" /> 引動過程清單的一系列引動過程清單，或是 <paramref name="source" /> 為 null 參考時，會傳回 null 參考。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</exception>
      <exception cref="T:System.ArgumentException">委派型別不相符。</exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>從另一個委派的引動過程清單移除委派的引動過程清單。</summary>
      <param name="d">委派，提供要從目前委派的引動過程清單移除的引動過程清單。</param>
      <returns>如果在目前委派的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得目前委派的引動過程清單並移除 <paramref name="value" /> 的引動過程清單所形成的引動過程清單)。 如果 <paramref name="value" /> 是 <see langword="null" />，或未在目前委派的引動過程清單中找到 <paramref name="value" /> 的引動過程清單時，會傳回目前的委派。 如果 <paramref name="value" /> 的引動過程清單等於目前委派的引動過程清單，則會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</exception>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>取得目前的委派用來叫用執行個體方法的類別執行個體。</summary>
      <returns>如果目前的委派表示執行個體方法時，則為目前委派用來叫用執行個體方法的物件；如果此委派表示靜態方法，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
      <summary>指定即使對應的型別不允許，也可以將 <see langword="null" /> 作為輸入。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
      <summary>指定即使對應的型別允許，也不允許將 <see langword="null" /> 作為輸入。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
      <summary>指定方法在任何情況下都不會傳回。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
      <summary>指定若相關聯的 <see cref="T:System.Boolean" /> 參數收到指定值，方法便不會傳回。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
      <summary>使用所指定參數值初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> 類別的新執行個體。</summary>
      <param name="parameterValue">條件參數值。 當對相關聯參數傳遞的引數符合此值時，診斷便會將方法之後的程式碼視為執行不到的程式碼。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
      <summary>取得條件參數值。</summary>
      <returns>條件參數值。 當對相關聯參數傳遞的引數符合此值時，診斷便會將方法之後的程式碼視為執行不到的程式碼。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
      <summary>指定即使對應的型別不允許，輸出也可以是 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
      <summary>指定當方法傳回 <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" /> 時，即使對應的型別不允許，參數也可以是 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
      <summary>使用指定的傳回值條件初始化屬性。</summary>
      <param name="returnValue">傳回值的條件。 若方法傳回此值，則相關聯的參數可能會是 <see langword="null" />。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
      <summary>取得傳回值的條件。</summary>
      <returns>傳回值的條件。 若方法傳回此值，則相關聯的參數可能會是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
      <summary>指定即使對應的型別允許，輸出也不會是 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
      <summary>指定若具名參數並非 Null，則輸出也不會是 Null。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
      <summary>使用相關聯的參數名稱初始化屬性。</summary>
      <param name="parameterName">相關聯的參數名稱。  若對指定參數傳遞的引數並非 Null，則輸出也不會是 Null。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
      <summary>取得相關聯的參數名稱。</summary>
      <returns>相關聯的參數名稱。 若對指定參數傳遞的引數並非 Null，則輸出也不會是 Null。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
      <summary>指定當方法傳回 <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" /> 時，即使對應的型別允許，參數也不會是 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
      <summary>使用指定的傳回值條件初始化屬性。</summary>
      <param name="returnValue">傳回值的條件。 若方法傳回此值，則相關聯的參數將不會是 <see langword="null" />。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
      <summary>取得傳回值的條件。</summary>
      <returns>傳回值的條件。 若方法傳回此值，則相關聯的參數將不會是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>表示編譯器應該忽略方法呼叫或屬性，除非已定義指定的條件式編譯符號。</summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 類別的新執行個體。</summary>
      <param name="conditionString">字串，指定與此屬性相關聯之區分大小寫的條件式編譯符號。</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>取得與 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 屬性相關聯的條件式編譯符號。</summary>
      <returns>字串，指定與 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 屬性相關聯之區分大小寫的條件式編譯符號。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>修改 Runtime Just-In-Time (JIT) 偵錯的程式碼產生。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>用指定的 JIT (just-in-time) 編譯器追蹤與最佳化選項，初始化 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 類別的新執行個體。</summary>
      <param name="isJITTrackingEnabled">若要啟用偵錯，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="isJITOptimizerDisabled">若要停用執行的最佳化工具，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>用指定的 JIT (just-in-time) 編譯器偵錯模式，將 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 類別的新執行個體初始化。</summary>
      <param name="modes">由各種 <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 值經過逐一位元合併組成的結果，代表 JIT 編譯器的偵錯模式。</param>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.DebuggingFlags">
      <summary>取得屬性的偵錯模式。</summary>
      <returns>由各種 <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 值經過逐一位元合併組成的結果，描述 JIT (just-in-time) 編譯器的偵錯模式。 預設為 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>指定 Just-In-Time (JIT) 編譯器的偵錯模式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>指示 Just-In-Time (JIT) 編譯器使用其預設行為，這些行為包括啟用最佳化設定、停用編輯後繼續支援，以及使用符號存放區的序列點 (如果有的話)。 從 .NET Framework 2.0 版開始，永遠會產生 JIT 追蹤資訊 (方法中 Microsoft 中間語言 (MSIL) 位移至機器碼位移)。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>停用編譯器執行的最佳化，可讓您的輸出檔案變得更小、更快、更有效率。 最佳化是在輸出檔案中程式碼重新排列所產生的結果，它可能會造成偵錯困難。 一般來說，偵錯時應該停用最佳化。 在 2.0 (含) 以後版本中，這個值與 Default (Default | DisableOptimizations) 結合以啟用 JIT 追蹤並停用最佳化。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>啟用 [編輯後繼續]。 [編輯後繼續] 可以讓您在程式處於中斷模式時，變更您的原始程式碼。 編輯後繼續的功能與編譯器有相依性。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>使用隱含式 MSIL 序列點，不是程式資料庫 (PDB) 序列點。 符號資訊通常會為每個來源行包括至少一個 Microsoft Intermediate Language (MSIL) 位移。 Just-In-Time (JIT) 編譯器要編譯方法時，會為應該保留的 MSIL 位移清單要求逐步分析服務。 這些 MSIL 位移稱為「序列點」。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>從 .NET Framework 2.0 版開始，永遠會產生 JIT 追蹤資訊，而且這個旗標與 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" /> 的作用相同，除了它會設定 <see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> 屬性為 <see langword="false" /> 以外。 不過，因為永遠啟用 JIT 追蹤，在 2.0 版本或更新版本中會忽略這個屬性值。  
請注意，不同於 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations" /> 旗標，<see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None" /> 旗標不能用來停用 JIT 最佳化。</summary>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITOptimizerDisabled">
      <summary>取得值，表示 Runtime 最佳化工具是否停用。</summary>
      <returns>如果 Runtime 最佳化工具要停用，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled">
      <summary>取得值，表示 Runtime 是否會在產生程式碼期間為偵錯工具追蹤資訊。</summary>
      <returns>如果 Runtime 會在產生程式碼期間為偵錯工具追蹤資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>嘗試將整數或 <see cref="T:System.Decimal" /> 值除以零時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Double">
      <summary>表示雙精度浮點數。</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>比較這個執行個體與雙精確度的浮點數值，並且傳回一個整數，指出這個執行個體的值是小於、等於或大於特定的雙精確度浮點數值。</summary>
      <param name="value">要比較的雙精確度浮點數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

-或- 
這個執行個體是非數字 (<see cref="F:System.Double.NaN" />)，而且 <paramref name="value" /> 是數字。  

  零 
  這個執行個體等於 <paramref name="value" />。  

-或- 
這個執行個體和 <paramref name="value" /> 都不會是數字 (<see cref="F:System.Double.NaN" />)、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Double.NaN" />)。</returns>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>比較這個執行個體與特定物件，並且傳回一個整數，指出這個執行個體的值是小於、等於或大於特定物件的值。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  值 
  說明 
  負整數 
  這個執行個體小於 <paramref name="value" />。  

-或- 
這個執行個體是非數字 (<see cref="F:System.Double.NaN" />)，而且 <paramref name="value" /> 是數字。  

  零 
  這個執行個體等於 <paramref name="value" />。  

-或- 
這個執行個體和 <paramref name="value" /> 都是 <see langword="Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /> 正整數 
  這個執行個體大於 <paramref name="value" />。  

-或- 
這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Double.NaN" />)。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>代表大於零的最小正 <see cref="T:System.Double" /> 值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Double" /> 物件是否表示相同的值。</summary>
      <param name="obj">要與這個執行個體相比較的 <see cref="T:System.Double" /> 物件。</param>
      <returns>如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Double" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Double" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.Double" />。</returns>
    </member>
    <member name="M:System.Double.IsFinite(System.Double)">
      <summary>判斷指定的值是否為有限 (零、偏低或一般)。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果值為有限 (零、偏低或一般)，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>傳回值，指出指定的數字是否計算結果為負或正的無限大。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>傳回值，這個值表示指定的值是否不是數字 (<see cref="F:System.Double.NaN" />)。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.NaN" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNegative(System.Double)">
      <summary>判斷指定的值是否為負數。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果值為負數，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>傳回值，指出指定的數字是否計算結果為負的無限大。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.NegativeInfinity" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNormal(System.Double)">
      <summary>判斷指定的值是否為正常。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果值為正常，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>傳回值，指出指定數字是否計算結果為正的無限大。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果 <paramref name="d" /> 計算結果為 <see cref="F:System.Double.PositiveInfinity" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsSubnormal(System.Double)">
      <summary>判斷指定的值是否為偏低。</summary>
      <param name="d">雙精確度浮點數。</param>
      <returns>如果值為偏低，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>表示 <see cref="T:System.Double" /> 最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>表示 <see cref="T:System.Double" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>代表不是數字 (<see langword="NaN" />) 的值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>表示負無限大。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Double" /> 值是否相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否大於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否大於或等於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 大於或等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Double" /> 值是否不相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否小於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Double" /> 值是否小於或等於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>將數字的字串表示轉換為其相等的雙精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是格式有效的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將數字的字串表示 (使用指定樣式) 轉換為其相等的雙精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 與 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是格式有效的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 包含 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定樣式和特定文化特性格式，將數字的字串表示轉換為其相等的雙精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不代表數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的特定文化特性格式) 轉換為其相等的雙精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>雙精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是格式有效的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>表示正無限大。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" /></summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Double" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關特定文化特性資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Double.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>將數字的字串表示轉換為其相等的雙精確度浮點數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法傳回時會包含相當於 <paramref name="s" /> 參數的雙精確度浮點數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的數字，或者代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字，這項轉換就會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>使用指定樣式和特定文化特性格式，將數字的字串表示轉換為其相等的雙精確度浮點數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 的允許格式。 要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <param name="result">當此方法傳回時，若轉換成功，包含相當於 <paramref name="s" /> 中包含之數值或符號的雙精確度浮點數；若轉換失敗，則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是符合 <paramref name="style" /> 的格式、代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字，或 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 列舉常數的有效組合。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 包含 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="T:System.DuplicateWaitObjectException">
      <summary>當物件在同步物件 (Synchronization Object) 陣列中出現一次以上時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor">
      <summary>初始化 <see cref="T:System.DuplicateWaitObjectException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.DuplicateWaitObjectException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String)">
      <summary>使用造成這個例外狀況的參數名稱來初始化 <see cref="T:System.DuplicateWaitObjectException" /> 類別的新執行個體。</summary>
      <param name="parameterName">造成例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.DuplicateWaitObjectException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的參數名稱，初始化 <see cref="T:System.DuplicateWaitObjectException" /> 類別的新執行個體。</summary>
      <param name="parameterName">造成例外狀況的參數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>當試著載入類別卻因沒有進入方法而告失敗時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.EntryPointNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.EntryPointNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.EntryPointNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.EntryPointNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Enum">
      <summary>提供列舉的基底類別。</summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>初始化 <see cref="T:System.Enum" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="target">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="target" /> 的相對值。  
  值 
  意義 
  小於零 
  這個執行個體的值小於 <paramref name="target" /> 的值。  

  零 
  這個執行個體的值等於 <paramref name="target" /> 的值。  

  大於零 
  這個執行個體的值大於 <paramref name="target" /> 的值。  

-或- 
 <paramref name="target" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 與這個執行個體的類型不同。</exception>
      <exception cref="T:System.InvalidOperationException">這個執行個體不是類型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" />。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 Null。</exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <paramref name="obj" /> 是與這個執行個體具有相同類型及基礎值的列舉值則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>根據指定的格式，將指定列舉類型的指定值轉換為相等的字串表示。</summary>
      <param name="enumType">要轉換的數值列舉類型。</param>
      <param name="value">要進行轉換的值。</param>
      <param name="format">要使用的輸出格式。</param>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" />、<paramref name="value" /> 或 <paramref name="format" /> 參數是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 參數不是 <see cref="T:System.Enum" /> 類型。  
-或- 
<paramref name="value" /> 來自與 <paramref name="enumType" /> 類型不同的列舉。  
-或- 
類型 <paramref name="value" /> 不是 <paramref name="enumType" /> 的基礎類型。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數包含無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等於 "X"，但列舉類型未知。</exception>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>傳回這個執行個體值的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>擷取有指定數值之指定列舉的常數名稱。</summary>
      <param name="enumType">列舉類型。</param>
      <param name="value">就其基礎類型而論的特定列舉常數值。</param>
      <returns>字串 (包含值為 <paramref name="value" /> 之 <paramref name="enumType" /> 中的列舉常數名稱)；如果找不到這類常數，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
-或- 
 <paramref name="value" /> 既不是類型 <paramref name="enumType" />，也沒有和 <paramref name="enumType" /> 一樣的基礎類型。</exception>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>在指定的列舉中擷取常數名稱的陣列。</summary>
      <param name="enumType">列舉類型。</param>
      <returns>在 <paramref name="enumType" /> 中的常數名稱字串陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 參數不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>傳回這個列舉成員的基礎類型的類型代碼。</summary>
      <returns>這個執行個體的基礎類型的類型代碼。</returns>
      <exception cref="T:System.InvalidOperationException">列舉類型未知。</exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>傳回指定列舉的基礎類型。</summary>
      <param name="enumType">要擷取其基礎類型的列舉。</param>
      <returns>
        <paramref name="enumType" /> 的基礎類型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>在指定的列舉中擷取常數值的陣列。</summary>
      <param name="enumType">列舉類型。</param>
      <returns>含有 <paramref name="enumType" /> 中之常數值的陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
      <exception cref="T:System.InvalidOperationException">僅限反射內容中的反射叫用了方法。 
-或- 
 <paramref name="enumType" /> 屬於在僅限反射內容中載入之組件的類型。</exception>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>判斷目前執行個體中是否設定一或多個位元欄位。</summary>
      <param name="flag">列舉值。</param>
      <returns>如果目前執行個體中設定了 <paramref name="flag" /> 中設定的一或多個位元欄位，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 的類型與目前執行個體的類型不同。</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>傳回布林值，告知指定整數值或其作為字串的名稱，是否存在於指定的列舉中。</summary>
      <param name="enumType">列舉類型。</param>
      <param name="value">在 <paramref name="enumType" /> 中常數的數值或名稱。</param>
      <returns>如果在 <paramref name="enumType" /> 中的常數有等於 <paramref name="value" /> 的數值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see langword="Enum" />。  
-或- 
類型 <paramref name="value" /> 是列舉，但不是 <paramref name="enumType" /> 列舉類型。  
-或- 
類型 <paramref name="value" /> 不是 <paramref name="enumType" /> 的基礎類型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不是類型 <see cref="T:System.SByte" />、 <see cref="T:System.Int16" />、 <see cref="T:System.Int32" />、 <see cref="T:System.Int64" />、 <see cref="T:System.Byte" />、 <see cref="T:System.UInt16" />、 <see cref="T:System.UInt32" />、 <see cref="T:System.UInt64" /> 或 <see cref="T:System.String" />。</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。</summary>
      <param name="enumType">列舉類型。</param>
      <param name="value">字串，包含要轉換的名稱或數值。</param>
      <returns>
        <paramref name="enumType" /> 類型的物件，其值以 <paramref name="value" /> 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
-或- 
 <paramref name="value" /> 為空字串 ("") 或只包含空格。  
-或- 
 <paramref name="value" /> 為名稱，但不是為列舉所定義的其中一個具名常數。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出 <paramref name="enumType" /> 之基礎類型的範圍。</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。 參數會定義運算是否區分大小寫。</summary>
      <param name="enumType">列舉類型。</param>
      <param name="value">字串，包含要轉換的名稱或數值。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示忽略大小寫，<see langword="false" /> 表示區分大小寫。</param>
      <returns>
        <paramref name="enumType" /> 類型的物件，其值以 <paramref name="value" /> 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
-或- 
 <paramref name="value" /> 為空字串 ("") 或只包含空格。  
-或- 
 <paramref name="value" /> 為名稱，但不是為列舉所定義的其中一個具名常數。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出 <paramref name="enumType" /> 之基礎類型的範圍。</exception>
    </member>
    <member name="M:System.Enum.Parse``1(System.String)">
      <param name="value" />
      <typeparam name="TEnum" />
    </member>
    <member name="M:System.Enum.Parse``1(System.String,System.Boolean)">
      <param name="value" />
      <param name="ignoreCase" />
      <typeparam name="TEnum" />
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成布林值 (Boolean)。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 8 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 Unicode 字元。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 <see cref="T:System.DateTime" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 <see cref="T:System.Decimal" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成雙精確度浮點數。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 16 位元帶正負號的整數 (Signed Integer)。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 32 位元帶正負號的整數 (Signed Integer)。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 64 位元帶正負號的整數 (Signed Integer)。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 8 位元帶正負號的整數。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成單精確度浮點數。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個成員一定會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成指定的類型。</summary>
      <param name="type">要轉換的目標類型。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 16 位元不帶正負號的整數。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 32 位元不帶正負號的整數。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>根據基礎類型，將目前值轉換成 64 位元不帶正負號的整數。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>轉換的值。</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>將具有整數值的指定物件轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>值為 <paramref name="value" /> 的列舉物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
-或- 
 <paramref name="value" /> 不是類型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt32)">
      <summary>將指定的 32 位元不帶正負號的整數值轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt64)">
      <summary>將指定的 64 位元不帶正負號的整數值轉換為列舉成員。</summary>
      <param name="enumType">要傳回的列舉類型。</param>
      <param name="value">要轉換為列舉成員的值。</param>
      <returns>設定為 <paramref name="value" /> 的列舉執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>將這個執行個體的值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>這個方法多載已淘汰，請改用 <see cref="M:System.Enum.ToString" />。</summary>
      <param name="provider">(已過時)</param>
      <returns>這個執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的值轉換為它的相等字串表示。</summary>
      <param name="format">格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含無效的規格。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等於 "X"，但列舉類型未知。</exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>這個方法多載已淘汰，請改用 <see cref="M:System.Enum.ToString(System.String)" />。</summary>
      <param name="format">格式規格。</param>
      <param name="provider">(已過時。)</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不包含有效的格式規格。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等於 "X"，但列舉類型未知。</exception>
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)">
      <param name="enumType" />
      <param name="value" />
      <param name="ignoreCase" />
      <param name="result" />
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Object@)">
      <param name="enumType" />
      <param name="value" />
      <param name="result" />
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。 指出轉換是否成功的傳回值。</summary>
      <param name="value">要轉換之列舉名稱或基礎值之區分大小寫的字串表示。</param>
      <param name="result">當這個方法傳回時，如果剖析作業成功，則 <paramref name="result" /> 會包含類型為 <c>TEnum</c> 的物件，而物件的值會以 <paramref name="value" /> 表示。 如果剖析作業失敗，則 <paramref name="result" /> 會包含 <c>TEnum</c> 基礎類型的預設值。 請注意，這個值不一定要是 <c>TEnum</c> 列舉的成員。 這個參數會以未初始化的狀態傳遞。</param>
      <typeparam name="TEnum">
        <paramref name="value" /> 轉換所得的列舉類型。</typeparam>
      <returns>如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是列舉類型。</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>把一或多個列舉常數的名稱或數值的字串表示轉換為一個相等列舉物件。 參數會指定運算是否區分大小寫。 指出轉換是否成功的傳回值。</summary>
      <param name="value">要轉換之列舉名稱或基礎值的字串表示。</param>
      <param name="ignoreCase">
        <see langword="true" /> 以忽略大小寫，<see langword="false" /> 以區分大小寫。</param>
      <param name="result">當這個方法傳回時，如果剖析作業成功，則 <paramref name="result" /> 會包含類型為 <c>TEnum</c> 的物件，而物件的值會以 <paramref name="value" /> 表示。 如果剖析作業失敗，則 <paramref name="result" /> 會包含 <c>TEnum</c> 基礎類型的預設值。 請注意，這個值不一定要是 <c>TEnum</c> 列舉的成員。 這個參數會以未初始化的狀態傳遞。</param>
      <typeparam name="TEnum">
        <paramref name="value" /> 轉換所得的列舉類型。</typeparam>
      <returns>如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是列舉類型。</exception>
    </member>
    <member name="T:System.EventArgs">
      <summary>表示含有事件資料之類別的基底類別，並提供值以用於不包含事件資料的事件。</summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>初始化 <see cref="T:System.EventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>提供值以搭配沒有事件資料的事件使用。</summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>代表處理不含事件資料之事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">不包含事件資料的物件。</param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>代表事件提供資料時處理事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的物件。</param>
      <typeparam name="TEventArgs">此事件所產生的事件資料型別。</typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>代表應用程式執行期間所發生的錯誤。</summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">類別名稱為 <see langword="null" /> 或 <see cref="P:System.Exception.HResult" /> 為零 (0)。</exception>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況，若未指定內部例外狀況，則為 null 參考 (Visual Basic 中為 <see langword="Nothing" />)。</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>取得提供例外狀況之其他使用者定義相關資訊的索引鍵/值組集合。</summary>
      <returns>實作 <see cref="T:System.Collections.IDictionary" /> 介面的物件，含有由使用者定義之索引鍵/值組所組成的集合。 預設為空集合。</returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>在衍生類別中覆寫時，傳回一或多個後續的例外狀況的根本原因 <see cref="T:System.Exception" />。</summary>
      <returns>例外狀況鏈結中所擲回的第一個例外狀況。 如果目前的例外狀況的 <see cref="P:System.Exception.InnerException" /> 屬性為 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則這個屬性會傳回目前的例外狀況。</returns>
    </member>
    <member name="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在衍生類別中覆寫時，使用例外狀況的資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>取得目前執行個體的執行階段類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表目前執行個體的確實執行階段型別。</returns>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>取得或設定與這個例外狀況相關聯的說明檔連結。</summary>
      <returns>Uniform Resource Name (URN) 或統一資源定位器 (URL)。</returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>取得或設定 HRESULT，它是指派給特定例外狀況的編碼數值。</summary>
      <returns>HRESULT 值。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>取得造成目前例外狀況的 <see cref="T:System.Exception" /> 執行個體。</summary>
      <returns>物件，描述造成目前例外狀況的錯誤。 <see cref="P:System.Exception.InnerException" /> 屬性會傳回與傳遞到 <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> 建構函式中相同的值；如果沒有提供內部例外狀況值給建構函式，則傳回 <see langword="null" /> 。 這個屬性是唯讀的。</returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>取得描述目前例外狀況的訊息。</summary>
      <returns>解釋例外狀況原因的錯誤訊息，或空字串 ("")。</returns>
    </member>
    <member name="E:System.Exception.SerializeObjectState">
      <summary>當例外狀況序列化，以建立包含例外狀況相關序列化資料的例外狀況狀態物件時，就會發生此事件。</summary>
    </member>
    <member name="P:System.Exception.Source">
      <summary>取得或設定造成錯誤的應用程式或物件的名稱。</summary>
      <returns>造成錯誤的應用程式或物件的名稱。</returns>
      <exception cref="T:System.ArgumentException">此物件必須是執行階段 <see cref="N:System.Reflection" /> 物件。</exception>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>取得呼叫堆疊上即時運算框架的字串表示。</summary>
      <returns>字串，描述呼叫堆疊的立即框架。</returns>
    </member>
    <member name="P:System.Exception.TargetSite">
      <summary>取得擲回目前例外狀況的方法。</summary>
      <returns>擲回目前例外狀況的 <see cref="T:System.Reflection.MethodBase" />。</returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>建立並傳回目前例外狀況的字串表示。</summary>
      <returns>目前例外狀況的字串表示。</returns>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>當 Common Language Runtime 執行引擎中有內部錯誤時，會擲回的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor">
      <summary>初始化 <see cref="T:System.ExecutionEngineException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ExecutionEngineException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.ExecutionEngineException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>當嘗試存取類別內私用的或保護的欄位為不合法時，會擲回的例外狀況。</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>初始化 <see cref="T:System.FieldAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.FieldAccessException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.FieldAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.FieldAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.FileStyleUriParser">
      <summary>根據檔案配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>根據檔案配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>指出可將列舉視為位元欄位，也就是一組旗標。</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.FlagsAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>引數格式無效或複合格式字串格式不正確時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.FormattableString">
      <summary>代表複合格式字串以及要格式化的引數。</summary>
    </member>
    <member name="M:System.FormattableString.#ctor">
      <summary>執行個體化 <see cref="T:System.FormattableString" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.FormattableString.ArgumentCount">
      <summary>取得要格式化的引數數目。</summary>
      <returns>要格式化的引數數目。</returns>
    </member>
    <member name="M:System.FormattableString.CurrentCulture(System.FormattableString)">
      <summary>傳回結果字串，其引數會使用目前文化特性的慣例來格式化。</summary>
      <param name="formattable">要格式化的字串。</param>
      <returns>使用目前文化特性慣例將目前執行個體格式化所產生的字串。</returns>
    </member>
    <member name="P:System.FormattableString.Format">
      <summary>傳回複合格式字串。</summary>
      <returns>複合格式字串。</returns>
    </member>
    <member name="M:System.FormattableString.GetArgument(System.Int32)">
      <summary>傳回在指定索引位置處的引數。</summary>
      <param name="index">引數的索引。 其值的範圍可以介於零到小於 <see cref="P:System.FormattableString.ArgumentCount" /> 的值之間。</param>
      <returns>引數。</returns>
    </member>
    <member name="M:System.FormattableString.GetArguments">
      <summary>傳回物件陣列，其中包含一或多個要格式化的物件。</summary>
      <returns>物件陣列，其中包含一或多個要格式化的物件。</returns>
    </member>
    <member name="M:System.FormattableString.Invariant(System.FormattableString)">
      <summary>傳回結果字串，其引數是使用不因文化特性 (Culture) 而異的慣例來格式化。</summary>
      <param name="formattable">要轉換為結果字串的物件。</param>
      <returns>使用不因文化特性 (Culture) 而異的慣例將目前執行個體格式化所產生的字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formattable" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>傳回使用指定文化特性 (Culture) 的格式化慣例將格式字串及其引數格式化所產生的字串。</summary>
      <param name="ignored">字串。 忽略這個引數。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>使用 <paramref name="formatProvider" /> 參數的慣例格式化的字串。</returns>
    </member>
    <member name="M:System.FormattableString.ToString">
      <summary>傳回使用目前文化特性 (Culture) 的格式化慣例將複合格式字串及其引數格式化所產生的字串。</summary>
      <returns>使用目前文化特性 (Culture) 的慣例格式化的結果字串。</returns>
    </member>
    <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
      <summary>傳回使用指定文化特性 (Culture) 的格式化慣例將複合格式字串及其引數格式化所產生的字串。</summary>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>使用 <paramref name="formatProvider" /> 的慣例格式化的結果字串。</returns>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>根據檔案傳輸通訊協定 (File Transfer Protocol，FTP) 配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>根據檔案傳輸通訊協定 (FTP) 配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.Func`1">
      <summary>封裝沒有參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</summary>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`10">
      <summary>封裝具有九個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之型別的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`11">
      <summary>封裝具有 10 個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之型別的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`12">
      <summary>封裝具有 11 個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之類型的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`13">
      <summary>封裝具有 12 個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之類型的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`14">
      <summary>封裝具有 13 個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之類型的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`15">
      <summary>封裝具有 14 個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之類型的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <param name="arg14">這個委派所封裝之方法的第 14 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`16">
      <summary>封裝具有 15 個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之類型的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <param name="arg14">這個委派所封裝之方法的第 14 個參數。</param>
      <param name="arg15">這個委派所封裝之方法的第 15 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`17">
      <summary>封裝具有 16 個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之類型的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <param name="arg9">這個委派所封裝之方法的第 9 個參數。</param>
      <param name="arg10">這個委派所封裝之方法的第 10 個參數。</param>
      <param name="arg11">這個委派所封裝之方法的第 11 個參數。</param>
      <param name="arg12">這個委派所封裝之方法的第 12 個參數。</param>
      <param name="arg13">這個委派所封裝之方法的第 13 個參數。</param>
      <param name="arg14">這個委派所封裝之方法的第 14 個參數。</param>
      <param name="arg15">這個委派所封裝之方法的第 15 個參數。</param>
      <param name="arg16">這個委派所封裝之方法的第 16 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="T9">這個委派所封裝方法之第 9 個參數的型別。</typeparam>
      <typeparam name="T10">這個委派所封裝方法之第 10 個參數的型別。</typeparam>
      <typeparam name="T11">這個委派所封裝方法之第 11 個參數的型別。</typeparam>
      <typeparam name="T12">這個委派所封裝方法之第 12 個參數的型別。</typeparam>
      <typeparam name="T13">這個委派所封裝方法之第 13 個參數的型別。</typeparam>
      <typeparam name="T14">這個委派所封裝方法之第 14 個參數的型別。</typeparam>
      <typeparam name="T15">這個委派所封裝方法之第 15 個參數的型別。</typeparam>
      <typeparam name="T16">這個委派所封裝方法之第 16 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`2">
      <summary>封裝具有一個參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</summary>
      <param name="arg">這個委派所封裝之方法的參數。</param>
      <typeparam name="T">這個委派所封裝之方法的參數型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`3">
      <summary>封裝具有兩個參數的方法，並傳回 <typeparamref name="TResult" /> 參數所指定的型別值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`4">
      <summary>封裝具有三個參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`5">
      <summary>封裝具有四個參數並傳回 <typeparamref name="TResult" /> 參數所指定之型別值的方法。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`6">
      <summary>封裝具有五個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之型別的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`7">
      <summary>封裝具有六個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之型別的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`8">
      <summary>封裝具有七個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之型別的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.Func`9">
      <summary>封裝具有八個參數的方法，並傳回由 <typeparamref name="TResult" /> 參數指定之型別的值。</summary>
      <param name="arg1">由這個委派所封裝之方法的第一個參數。</param>
      <param name="arg2">這個委派所封裝之方法的第二個參數。</param>
      <param name="arg3">這個委派所封裝之方法的第三個參數。</param>
      <param name="arg4">這個委派所封裝之方法的第四個參數。</param>
      <param name="arg5">這個委派所封裝之方法的第 5 個參數。</param>
      <param name="arg6">這個委派所封裝之方法的第 6 個參數。</param>
      <param name="arg7">這個委派所封裝之方法的第 7 個參數。</param>
      <param name="arg8">這個委派所封裝之方法的第 8 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。</typeparam>
      <typeparam name="T2">這個委派所封裝方法的第二個參數之型別。</typeparam>
      <typeparam name="T3">這個委派所封裝方法的第三個參數之型別。</typeparam>
      <typeparam name="T4">這個委派所封裝方法之第四個參數的型別。</typeparam>
      <typeparam name="T5">這個委派所封裝方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">這個委派所封裝方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">這個委派所封裝方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">這個委派所封裝方法之第 8 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。</typeparam>
      <returns>這個委派所封裝之方法的傳回值。</returns>
    </member>
    <member name="T:System.GC">
      <summary>控制系統記憶體回收行程，它是自動回收未使用之記憶體的服務。</summary>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>告知執行階段，在排定記憶體回收時應考慮的大量 Unmanaged 記憶體配置。</summary>
      <param name="bytesAllocated">已配置的 Unmanaged 記憶體累加數量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小於或等於 0。  
-或- 
在 32 位元電腦上，<paramref name="bytesAllocated" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.GC.CancelFullGCNotification">
      <summary>取消註冊記憶體回收通知。</summary>
      <exception cref="T:System.InvalidOperationException">啟用並行記憶體回收時，無法使用這個成員。 如需如何停用並行記憶體回收的資訊，請參閱 &lt;gcConcurrent&gt; 執行階段設定。</exception>
    </member>
    <member name="M:System.GC.Collect">
      <summary>強制立即執行所有層代的記憶體回收。</summary>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>強制立即執行層代 0 至指定層代的記憶體回收。</summary>
      <param name="generation">要進行記憶體回收的最舊層代數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>在 <see cref="T:System.GCCollectionMode" /> 值所指定的時間，強制執行層代 0 至指定層代的記憶體回收。</summary>
      <param name="generation">要進行記憶體回收的最舊層代數目。</param>
      <param name="mode">列舉值，指定是要強制記憶體回收 (<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />) 還是進行最佳化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。  
-或- 
 <paramref name="mode" /> 不是其中一個 <see cref="T:System.GCCollectionMode" /> 值。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>在 <see cref="T:System.GCCollectionMode" /> 值 (含有指定是否應該封鎖回收作業的值) 所指定的時間，強制執行從層代 0 到指定之層代的記憶體回收。</summary>
      <param name="generation">要進行記憶體回收的最舊層代數目。</param>
      <param name="mode">列舉值，指定是要強制記憶體回收 (<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />) 還是進行最佳化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <param name="blocking">
        <see langword="true" /> 表示要執行封鎖記憶體回收，<see langword="false" /> 表示要盡可能執行背景記憶體回收。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。  
-或- 
 <paramref name="mode" /> 不是其中一個 <see cref="T:System.GCCollectionMode" /> 值。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)">
      <summary>在 <see cref="T:System.GCCollectionMode" /> 值 (含有指定是否應該封鎖及壓縮回收作業的值) 所指定的時間，強制執行從層代 0 到指定之層代的記憶體回收。</summary>
      <param name="generation">要進行記憶體回收的最舊層代數目。</param>
      <param name="mode">列舉值，指定是要強制記憶體回收 (<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />) 還是進行最佳化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <param name="blocking">
        <see langword="true" /> 表示要執行封鎖記憶體回收，<see langword="false" /> 表示要盡可能執行背景記憶體回收。</param>
      <param name="compacting">
        <see langword="true" /> 表示壓縮小型物件堆積；<see langword="false" /> 表示僅整理。</param>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>傳回指定物件層代已發生記憶體回收的次數。</summary>
      <param name="generation">要判斷記憶體回收計數的物件層代。</param>
      <returns>自從啟動處理序之後，指定層代已發生記憶體回收的次數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 小於 0。</exception>
    </member>
    <member name="M:System.GC.EndNoGCRegion">
      <summary>結束無 GC 區域延遲模式。</summary>
      <exception cref="T:System.InvalidOperationException">記憶體回收行程不在無 GC 區域延遲模式下。  
-或- 
無 GC 區域延遲模式之前已結束，因為已包含記憶體回收。  
-或- 
記憶體配置超過 <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> 方法呼叫中所指定的數量。</exception>
    </member>
    <member name="M:System.GC.GetAllocatedBytesForCurrentThread">
      <summary>取得自目前執行緒的存留期開始，已配置給該執行緒的位元組總數。</summary>
      <returns>自目前執行緒的存留期開始，已配置給該執行緒的位元組總數。</returns>
    </member>
    <member name="M:System.GC.GetGCMemoryInfo">
      <summary>取得記憶體回收的記憶體資訊。</summary>
      <returns>物件，其中包含記憶體回收行程的記憶體使用量相關資訊。</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>傳回指定物件的目前層代編號。</summary>
      <param name="obj">要為其擷取層代資訊的物件。</param>
      <returns>
        <paramref name="obj" /> 的目前層代編號。</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.WeakReference)">
      <summary>傳回指定弱式參考之目標的目前層代編號。</summary>
      <param name="wo">
        <see cref="T:System.WeakReference" />，參考要判斷層代編號的目標物件。</param>
      <returns>
        <paramref name="wo" /> 之目標的目前層代編號。</returns>
      <exception cref="T:System.ArgumentException">在 <paramref name="wo" /> 上已執行記憶體回收。</exception>
    </member>
    <member name="M:System.GC.GetTotalAllocatedBytes(System.Boolean)">
      <summary>取得處理序存留期間配置的位元組計數。</summary>
      <param name="precise">如果為 <see langword="true" />，則收集精確數目；否則收集近似計數。 收集精確值會導致效能大幅降低。</param>
      <returns>處理序存留期間配置的位元組總數。</returns>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>擷取目前被視為已配置的位元組數。 參數會指出這個方法是否可以先等待短暫間隔後再傳回，以便讓系統回收記憶體和最終處理物件。</summary>
      <param name="forceFullCollection">如果這個方法可以等待記憶體回收發生後再傳回則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>數目，為目前配置於 Managed 記憶體中位元組的最佳可用近似數目。</returns>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>參考指定的物件，使它從目前常式的開始至呼叫這個方法時都不適合記憶體回收。</summary>
      <param name="obj">要參考的物件。</param>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>取得系統目前支援的最大層代編號。</summary>
      <returns>範圍從零至所支援最大層代編號的值。</returns>
    </member>
    <member name="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)">
      <summary>指定當情況需要完整記憶體回收時和回收完成時，應引發記憶體回收通知。</summary>
      <param name="maxGenerationThreshold">範圍從 1 到 99 的數字，指定何時應根據層代 2 中所配置的物件加以引發通知。</param>
      <param name="largeObjectHeapThreshold">範圍從 1 到 99 的數字，指定何時根據大型物件堆積中所配置的物件加以引發通知。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxGenerationThreshold" /> 或 <paramref name="largeObjectHeapThreshold" /> 未介於 1 和 99 之間。</exception>
      <exception cref="T:System.InvalidOperationException">啟用並行記憶體回收時，無法使用這個成員。 如需如何停用並行記憶體回收的資訊，請參閱 &lt;gcConcurrent&gt; 執行階段設定。</exception>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>告知執行階段，Unmanaged 記憶體已釋放，所以排定記憶體回收時不需要再考慮它。</summary>
      <param name="bytesAllocated">已釋放的 Unmanaged 記憶體數量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小於或等於 0。  
-或- 
在 32 位元電腦上，<paramref name="bytesAllocated" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>要求系統為指定物件 (先前已經為其呼叫 <see cref="M:System.GC.SuppressFinalize(System.Object)" />) 呼叫完成項。</summary>
      <param name="obj">必須呼叫完成項的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>要求 Common Language Runtime 不要為指定之物件呼叫完成項。</summary>
      <param name="obj">完成項不得執行的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64)">
      <summary>嘗試在有指定數量記憶體可用時，於執行關鍵路徑期間，禁止記憶體回收。</summary>
      <param name="totalSize">在不觸發記憶體回收的情況下，要配置的記憶體數量 (以位元組為單位)。 該值必須小於或等於暫時區段的大小。 如需暫時區段大小的資訊，請參閱記憶體回收的基本概念一文中的＜暫時層代和區段＞一節。</param>
      <returns>如果執行階段可以認可所需的記憶體數量且記憶體回收行程可以進入無 GC 區域延遲模式，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> 超過暫時區段的大小。</exception>
      <exception cref="T:System.InvalidOperationException">處理序處於無 GC 區域延遲模式。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)">
      <summary>嘗試在有指定數量記憶體可用時，於執行關鍵路徑期間，禁止記憶體回收，並控制在最初沒有足夠的記憶體可用時，記憶體回收行程是否執行完全封鎖記憶體回收。</summary>
      <param name="totalSize">在不觸發記憶體回收的情況下，要配置的記憶體數量 (以位元組為單位)。 該值必須小於或等於暫時區段的大小。 如需暫時區段大小的資訊，請參閱記憶體回收的基本概念一文中的＜暫時層代和區段＞一節。</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> 表示如果記憶體回收行程最初無法配置 <paramref name="totalSize" /> 個位元組，則省略完全封鎖記憶體回收；否則為 <see langword="false" />。</param>
      <returns>如果執行階段可以認可所需的記憶體數量且記憶體回收行程可以進入無 GC 區域延遲模式，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> 超過暫時區段的大小。</exception>
      <exception cref="T:System.InvalidOperationException">處理序處於無 GC 區域延遲模式。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)">
      <summary>嘗試在大型物件堆積與小型物件堆積有指定數量記憶體可用時，於執行關鍵路徑期間，禁止記憶體回收。</summary>
      <param name="totalSize">在不觸發記憶體回收的情況下，要配置的記憶體數量 (以位元組為單位)。 <paramref name="totalSize" /> -<paramref name="lohSize" /> 必須小於或等於暫時區段的大小。 如需暫時區段大小的資訊，請參閱記憶體回收的基本概念一文中的＜暫時層代和區段＞一節。</param>
      <param name="lohSize">
        <paramref name="totalSize" /> 中要用於大型物件堆積 (LOH) 配置的位元組數目。</param>
      <returns>如果執行階段可以認可所需的記憶體數量且記憶體回收行程可以進入無 GC 區域延遲模式，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> 超過暫時區段大小。</exception>
      <exception cref="T:System.InvalidOperationException">處理序處於無 GC 區域延遲模式。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)">
      <summary>嘗試在大型物件堆積與小型物件堆積有指定數量記憶體可用時，於執行關鍵路徑期間，禁止記憶體回收，並控制在最初沒有足夠的記憶體可用時，記憶體回收行程是否執行完全封鎖記憶體回收。</summary>
      <param name="totalSize">在不觸發記憶體回收的情況下，要配置的記憶體數量 (以位元組為單位)。 <paramref name="totalSize" /> -<paramref name="lohSize" /> 必須小於或等於暫時區段的大小。 如需暫時區段大小的資訊，請參閱記憶體回收的基本概念一文中的＜暫時層代和區段＞一節。</param>
      <param name="lohSize">
        <paramref name="totalSize" /> 中要用於大型物件堆積 (LOH) 配置的位元組數目。</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> 表示如果記憶體回收行程最初無法在小型物件堆積 (SOH) 及 LOH 上配置指定的記憶體，則省略完全封鎖記憶體回收；否則為 <see langword="false" />。</param>
      <returns>如果執行階段可以認可所需的記憶體數量且記憶體回收行程可以進入無 GC 區域延遲模式，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> 超過暫時區段大小。</exception>
      <exception cref="T:System.InvalidOperationException">處理序處於無 GC 區域延遲模式。</exception>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach">
      <summary>傳回註冊通知的狀態，以判斷 Common Language Runtime 是否即將執行完整的封鎖記憶體回收。</summary>
      <returns>已註冊記憶體回收通知的狀態。</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach(System.Int32)">
      <summary>在指定的逾時期間傳回註冊通知的狀態，以判斷 Common Language Runtime 是否即將執行完整的封鎖記憶體回收。</summary>
      <param name="millisecondsTimeout">在可以取得通知之前所要等待的時間長度。 指定 -1 會無限期等待。</param>
      <returns>已註冊記憶體回收通知的狀態。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 必須為非負數，或是小於或等於 <see cref="F:System.Int32.MaxValue" /> 或 -1。</exception>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete">
      <summary>傳回註冊通知的狀態，以判斷 Common Language Runtime 是否已完成完整的封鎖記憶體回收。</summary>
      <returns>已註冊記憶體回收通知的狀態。</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete(System.Int32)">
      <summary>在指定的逾時期間傳回註冊通知的狀態，以判斷 Common Language Runtime 是否已完成完整的封鎖記憶體回收。</summary>
      <param name="millisecondsTimeout">在可以取得通知之前所要等待的時間長度。 指定 -1 會無限期等待。</param>
      <returns>已註冊記憶體回收通知的狀態。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="millisecondsTimeout" /> 必須為非負數，或是小於或等於 <see cref="F:System.Int32.MaxValue" /> 或 -1。</exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>暫止目前的執行緒，直到處理完成項佇列的執行緒已經清空該佇列為止。</summary>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>指定強制進行記憶體回收的行為。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>這個列舉型別 (Enumeration) 的預設值，目前為 <see cref="F:System.GCCollectionMode.Forced" />。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>強制立即執行記憶體回收。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>允許記憶體回收以判斷現在是否為回收物件的最佳時間。</summary>
    </member>
    <member name="T:System.GCMemoryInfo">
      <summary>提供一組可用來擷取記憶體回收資訊的 API。</summary>
    </member>
    <member name="P:System.GCMemoryInfo.FragmentedBytes">
      <summary>取得發生最後一次記憶體回收時的總分散程度。</summary>
      <returns>整數, 代表上一次垃圾收集發生時的總片段。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.HeapSizeBytes">
      <summary>取得發生最後一次記憶體回收時的總堆積大小。</summary>
      <returns>最後一次垃圾收集發生時的堆積大小總計 (以位元組為單位)。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.HighMemoryLoadThresholdBytes">
      <summary>取得發生最後一次記憶體回收時的高記憶體負載閾值。</summary>
      <returns>上一次垃圾收集發生時的高記憶體負載閾值 (以位元組為單位)。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.MemoryLoadBytes">
      <summary>取得發生最後一次記憶體回收時的記憶體負載。</summary>
      <returns>發生最後一次垃圾收集時的記憶體負載。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.TotalAvailableMemoryBytes">
      <summary>取得發生最後一次記憶體回收時記憶體回收行程的總可用記憶體。</summary>
      <returns>最後一次垃圾收集發生時, 垃圾收集行程所使用的可用記憶體總計 (以位元組為單位)。</returns>
    </member>
    <member name="T:System.GCNotificationStatus">
      <summary>提供有關下次完整記憶體回收的目前通知註冊資訊。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Canceled">
      <summary>使用者已取消目前的註冊。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Failed">
      <summary>通知因為任何原因而失敗。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.NotApplicable">
      <summary>下列原因可能導致此結果：沒有記憶體回收通知的目前註冊、已啟用並行記憶體回收，或針對 <paramref name="millisecondsTimeout" /> 參數指定的時間已到期且未取得記憶體回收通知 (如需如何停用並行記憶體回收的資訊，請參閱 &lt;gcConcurrent&gt; 執行階段設定)。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Succeeded">
      <summary>通知成功且註冊未取消。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Timeout">
      <summary>已超過 <see cref="M:System.GC.WaitForFullGCApproach(System.Int32)" /> 或 <see cref="M:System.GC.WaitForFullGCComplete(System.Int32)" /> 兩者之一的 <paramref name="millisecondsTimeout" /> 參數所指定的時間。</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>階層式 URI 的可自訂剖析器。</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>建立階層式 URI 的可自訂剖析器。</summary>
      <param name="options">指定這個 <see cref="T:System.GenericUriParser" /> 的選項。</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>指定 <see cref="T:System.UriParser" /> 的選項。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>剖析器允許不含授權的 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>剖析器：需要授權單位；將反斜線轉換成正斜線；不逸出路徑點、正斜線和反斜線；移除尾端的句號、空區段和只包含點的區段。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>剖析器不會規範化 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>剖析器不會將反斜線轉換成斜線。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>剖析器不會逸出路徑點、斜線或反斜線。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>剖析器允許登錄架構的授權。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>剖析器支援國際化網域名稱 (IDN) 剖析主機名稱的 (IDN)。 是否使用 IDN 是透過組態值所指定。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>剖析器支援在 RFC 3987 中，針對國際資源識別元 (IRI) 指定的剖析規則。 是否使用 IRI 是透過組態值所指定。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>配置不會定義片段組件。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>配置不會定義連接埠。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>配置不會定義查詢組件。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>配置不會定義使用者資訊組件。</summary>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>代表劃分的時間，例如週、月和年。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.Calendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定日數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將日數加入的 <see cref="T:System.DateTime" />。</param>
      <param name="days">要加入的日數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定日數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="days" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定時數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將小時加入的 <see cref="T:System.DateTime" />。</param>
      <param name="hours">要加入的時數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定時數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hours" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定毫秒數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要加入毫秒的 <see cref="T:System.DateTime" />。</param>
      <param name="milliseconds">要加入的毫秒數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定毫秒數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定分鐘數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將分鐘加入的 <see cref="T:System.DateTime" />。</param>
      <param name="minutes">要加入的分鐘數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定分鐘數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minutes" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定秒數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將秒鐘加入的 <see cref="T:System.DateTime" />。</param>
      <param name="seconds">要加入的秒數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定秒數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定週數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將週加入的 <see cref="T:System.DateTime" />。</param>
      <param name="weeks">要加入的週數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的週數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weeks" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>其中一個 <see cref="T:System.Globalization.CalendarAlgorithmType" /> 值。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.Clone">
      <summary>建立目前 <see cref="T:System.Globalization.Calendar" /> 物件複本的新物件。</summary>
      <returns>
        <see cref="T:System.Object" /> 的新執行個體，它是目前 <see cref="T:System.Globalization.Calendar" /> 物件的成員複製品。</returns>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>表示目前曆法的目前紀元。 此欄位的值為 0。</summary>
    </member>
    <member name="P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear">
      <summary>取得 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 屬性指定之年的前一年的天數。</summary>
      <returns>
        <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 指定之年的前一年的天數。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>當在衍生類別中覆寫時，取得目前曆法中的紀元清單。</summary>
      <returns>整數陣列，表示目前曆法中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>正整數，表示 <paramref name="time" /> 參數中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示 <paramref name="time" /> 參數中一週的日期。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中年份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>正整數，表示 <paramref name="time" /> 參數中年份的日期。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>傳回目前紀元之指定月份和年份中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <returns>在目前紀元中指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，傳回指定月份、年份和紀元中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>傳回目前紀元之指定年份中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <returns>在目前紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，傳回指定年份和紀元中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，代表 <paramref name="time" /> 的紀元。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的小時值。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 0 至 23 的整數，表示 <paramref name="time" /> 中的小時。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32)">
      <summary>計算指定年份的閏月。</summary>
      <param name="year">一年。</param>
      <returns>正整數，指出在指定的年份中的閏月。  
-或- 
如果這個曆法不支援閏月，或 <paramref name="year" /> 參數不代表閏年，則為零。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
      <returns>正整數，指出在指定的年份及紀元中的閏月。  
-或- 
如果這個曆法不支援閏月，或 <paramref name="year" /> 和 <paramref name="era" /> 參數未指定閏年，則為零。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的毫秒值。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>0 到 999 的雙精確度浮點數，表示 <paramref name="time" /> 參數中的毫秒。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的分鐘值。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 0 至 59 的整數，表示 <paramref name="time" /> 中的分鐘。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>正整數，表示 <paramref name="time" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>傳回目前紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <returns>在目前紀元的指定年份中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回指定紀元的指定年份中月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的秒值。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 0 至 59 的整數，表示 <paramref name="time" /> 中的秒。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，其中包含指定之 <see cref="T:System.DateTime" /> 值中的日期。</summary>
      <param name="time">日期和時間值。</param>
      <param name="rule">定義日曆週的列舉值。</param>
      <param name="firstDayOfWeek">表示一週第一天的列舉值。</param>
      <returns>正整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 早於 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚於 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。  
-或- 
 <paramref name="firstDayOfWeek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。  
-或- 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>表示 <paramref name="time" /> 中年份的整數。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>判斷目前紀元中指定日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，判斷指定紀元中的指定日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>判斷目前紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <returns>如果指定的月份是閏月，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的月份是閏月，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>判斷目前紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Globalization.Calendar" /> 物件是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Globalization.Calendar" /> 物件是唯讀的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.Calendar" /> 物件所支援的最晚日期和時間。</summary>
      <returns>受此曆法所支援的最晚日期和時間。 預設為 <see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.Calendar" /> 物件所支援的最早日期和時間。</summary>
      <returns>受此曆法所支援的最早日期和時間。 預設為 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)">
      <summary>傳回指定之 <see cref="T:System.Globalization.Calendar" /> 物件的唯讀版本。</summary>
      <param name="calendar">
        <see cref="T:System.Globalization.Calendar" /> 物件。</param>
      <returns>如果 <paramref name="calendar" /> 是唯讀的，則為 <paramref name="calendar" /> 參數所指定的 <see cref="T:System.Globalization.Calendar" /> 物件。  
-或- 
如果 <paramref name="calendar" /> 不是唯讀的，則為 <paramref name="calendar" /> 所指定之 <see cref="T:System.Globalization.Calendar" /> 物件的唯讀成員複製品。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回設定為目前紀元中指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回設定為指定紀元中指定的日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.Calendar" /> 物件是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.CalendarAlgorithmType">
      <summary>指定曆法是以陽曆為主、以陰曆為主，或以陰陽曆為主。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.LunarCalendar">
      <summary>以陰曆為主的曆法。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar">
      <summary>以陰陽曆為主的曆法。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.SolarCalendar">
      <summary>以陽曆為主的曆法。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.Unknown">
      <summary>未知的曆法基準。</summary>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>定義決定年份的第一週的各種規則 (Rule)。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>指示一年的第一週開始於該年的第一天，並結束於被指定為該週第一天的前一天。 該值為 0。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>指示一年的第一週有四天以上在被指定為該週的第一天之前。 值為 2。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>指示一年的第一週開始於，一年的第一天當天或之後被指定為一週第一天的那天。 值為 1。</summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
      <summary>擷取 Unicode 字元的相關資訊。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)">
      <summary>取得指定之數字字元的十進位數值。</summary>
      <param name="ch">要取得十進位數值的 Unicode 字元。</param>
      <returns>指定之數字字元的十進位數值。  
 -或-  
 如果指定的字元不是十進位數字，則為 -1。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)">
      <summary>取得數字字元的十進位數值，其位於指定字串的指定索引處。</summary>
      <param name="s">
        <see cref="T:System.String" />，包含要取得十進位數值的 Unicode 字元。</param>
      <param name="index">要取得十進位數值之 Unicode 字元的索引。</param>
      <returns>數字字元的十進位數值，其位於指定字串的指定索引處。  
 -或-  
 如果位於指定字串之指定索引處的字元不是十進位數字，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)">
      <summary>取得指定之數字字元的數值。</summary>
      <param name="ch">要取得數值的 Unicode 字元。</param>
      <returns>指定之數字字元的數值。  
 -或-  
 如果指定的字元不是數字，則為 -1。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)">
      <summary>取得數字字元的數值，其位於指定字串的指定索引處。</summary>
      <param name="s">
        <see cref="T:System.String" />，包含要取得數值的 Unicode 字元。</param>
      <param name="index">要取得數值之 Unicode 字元的索引。</param>
      <returns>數字字元的數值，其位於指定字串的指定索引處。  
 -或-  
 如果位於指定字串之指定索引處的字元不是數字，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
      <summary>取得與指定字元關聯的數值。</summary>
      <param name="ch">要取得數值的 Unicode 字元。</param>
      <returns>與指定字元關聯的數值。  
 -或-  
 如果指定的字元不是數字字元，則為 -1。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
      <summary>取得數值，該值與指定字串之指定索引處的字元關聯。</summary>
      <param name="s">
        <see cref="T:System.String" />，包含要取得數值的 Unicode 字元。</param>
      <param name="index">要取得數值之 Unicode 字元的索引。</param>
      <returns>數值，該值與指定字串之指定索引處的字元關聯。  
 -或-  
 如果位於指定字串之指定索引處的字元不是數字字元，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
      <summary>取得指定之字元的 Unicode 分類。</summary>
      <param name="ch">要取得 Unicode 分類的 Unicode 字元。</param>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 值，指出指定之字元的分類。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)">
      <param name="codePoint" />
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
      <summary>取得字元的 Unicode 分類，其位於指定字串的指定索引處。</summary>
      <param name="s">
        <see cref="T:System.String" />，包含要取得 Unicode 分類的 Unicode 字元。</param>
      <param name="index">要取得 Unicode 分類之 Unicode 字元的索引。</param>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 值，指出位於指定字串之指定索引處的字元分類。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="T:System.Globalization.ChineseLunisolarCalendar">
      <summary>表示劃分的時間，例如月、日和年。 年份是使用中國曆法計算，而日期和月份則是使用陰陽曆計算。</summary>
    </member>
    <member name="M:System.Globalization.ChineseLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.Globalization.ChineseLunisolarCalendar.ChineseEra">
      <summary>指定對應到目前 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 物件的紀元。</summary>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>取得 <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> 屬性指定之年的前一年的天數。</summary>
      <returns>
        <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> 指定之年的前一年的天數。</returns>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.Eras">
      <summary>取得對應至目前 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 物件所支援之日期與時間範圍的紀元。</summary>
      <returns>32 位元帶正負號整數的陣列，指定相關的紀元。 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 物件的傳回值永遠是包含一個與 <see cref="F:System.Globalization.ChineseLunisolarCalendar.ChineseEra" /> 值相等項目的陣列。</returns>
    </member>
    <member name="M:System.Globalization.ChineseLunisolarCalendar.GetEra(System.DateTime)">
      <summary>擷取對應於所指定 <see cref="T:System.DateTime" /> 型別的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" /> 型別。</param>
      <returns>整數，表示 <paramref name="time" /> 參數中的紀元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小於 <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 類別所支援的日期和時間的最大值。</summary>
      <returns>一<see cref="T:System.DateTime" />種類型, 代表西曆中2101年1月28日的最後一次, 大約等於「函數<c>日期時間」 (2101, 1, 28, 23, 59, 59, 999)</c>。</returns>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 類別所支援的日期和時間的最小值。</summary>
      <returns>代表西曆中1901年2月19日的類型,這相當於此「日期時間」、「DateTime」(1901,2,19)。<see cref="T:System.DateTime" /><c></c></returns>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>實作區分文化特性 (Culture) 的字串比較的一組方法。</summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>將一個字串的區段與另一個字串的區段相比較。</summary>
      <param name="string1">要比較的第一個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中要開始比較字元的以零起始的索引。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比較的連續字元數。</param>
      <param name="string2">要比較的第二個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中要開始比較字元的以零起始的索引。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比較的連續字元數。</param>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。
  值

  條件

  零

  兩個字串相等。

  小於零

  <paramref name="string1" /> 的指定區段小於 <paramref name="string2" /> 的指定區段。

  大於零

  <paramref name="string1" /> 的指定區段大於 <paramref name="string2" /> 的指定區段。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="length1" /> 或 <paramref name="offset2" /> 或 <paramref name="length2" /> 小於零。
-或-
 <paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。
-或-
 <paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。
-或-
 <paramref name="length1" /> 大於從 <paramref name="offset1" /> 到 <paramref name="string1" /> 結尾的字元數。
-或-
 <paramref name="length2" /> 大於從 <paramref name="offset2" /> 到 <paramref name="string2" /> 結尾的字元數。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，將一個字串的區段與另一個字串的區段相比較。</summary>
      <param name="string1">要比較的第一個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中要開始比較字元的以零起始的索引。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比較的連續字元數。</param>
      <param name="string2">要比較的第二個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中要開始比較字元的以零起始的索引。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比較的連續字元數。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。
  值

  條件

  零

  兩個字串相等。

  小於零

  <paramref name="string1" /> 的指定區段小於 <paramref name="string2" /> 的指定區段。

  大於零

  <paramref name="string1" /> 的指定區段大於 <paramref name="string2" /> 的指定區段。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="length1" /> 或 <paramref name="offset2" /> 或 <paramref name="length2" /> 小於零。
-或-
 <paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。
-或-
 <paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。
-或-
 <paramref name="length1" /> 大於從 <paramref name="offset1" /> 到 <paramref name="string1" /> 結尾的字元數。
-或-
 <paramref name="length2" /> 大於從 <paramref name="offset2" /> 到 <paramref name="string2" /> 結尾的字元數。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>將字串的結尾區段與另一個字串的結尾區段相比較。</summary>
      <param name="string1">要比較的第一個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中要開始比較字元的以零起始的索引。</param>
      <param name="string2">要比較的第二個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中要開始比較字元的以零起始的索引。</param>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。
  值

  條件

  零

  兩個字串相等。

  小於零

  <paramref name="string1" /> 的指定區段小於 <paramref name="string2" /> 的指定區段。

  大於零

  <paramref name="string1" /> 的指定區段大於 <paramref name="string2" /> 的指定區段。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小於零。
-或-
 <paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。
-或-
 <paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，將字串的結尾區段與另一個字串的結尾區段相比較。</summary>
      <param name="string1">要比較的第一個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中要開始比較字元的以零起始的索引。</param>
      <param name="string2">要比較的第二個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中要開始比較字元的以零起始的索引。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。
  值

  條件

  零

  兩個字串相等。

  小於零

  <paramref name="string1" /> 的指定區段小於 <paramref name="string2" /> 的指定區段。

  大於零

  <paramref name="string1" /> 的指定區段大於 <paramref name="string2" /> 的指定區段。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小於零。
-或-
 <paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。
-或-
 <paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>比較兩個字串。</summary>
      <param name="string1">要比較的第一個字串。</param>
      <param name="string2">要比較的第二個字串。</param>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。
  值

  條件

  零

  兩個字串相等。

  小於零

 <paramref name="string1" /> 小於 <paramref name="string2" />。

  大於零

 <paramref name="string1" /> 大於 <paramref name="string2" />。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值來比較兩個字串。</summary>
      <param name="string1">要比較的第一個字串。</param>
      <param name="string2">要比較的第二個字串。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。
  值

  條件

  零

  兩個字串相等。

  小於零

 <paramref name="string1" /> 小於 <paramref name="string2" />。

  大於零

 <paramref name="string1" /> 大於 <paramref name="string2" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的 <see cref="T:System.Globalization.CompareInfo" /> 物件。</summary>
      <param name="value">要與目前 <see cref="T:System.Globalization.CompareInfo" /> 比較的物件。</param>
      <returns>如果指定的物件等於目前的 <see cref="T:System.Globalization.CompareInfo" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)">
      <summary>初始化新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，這個物件與具有所指定識別項的文化特性相關聯。</summary>
      <param name="culture">表示文化特性識別項的整數。</param>
      <returns>新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，與其相關聯的文化特性具有指定之識別項，並使用目前的 <see cref="T:System.Reflection.Assembly" /> 中的字串比較方法。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)">
      <summary>初始化新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，這個物件與所指定文化特性相關聯，而且使用所指定 <see cref="T:System.Reflection.Assembly" /> 中的字串比較方法。</summary>
      <param name="culture">表示文化特性識別項的整數。</param>
      <param name="assembly">
        <see cref="T:System.Reflection.Assembly" />，含有要使用的字串比較方法。</param>
      <returns>新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，與其相關聯的文化特性具有指定之識別項，並使用目前的 <see cref="T:System.Reflection.Assembly" /> 中的字串比較方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 屬於無效的類型。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>初始化新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，這個物件與具有所指定名稱的文化特性相關聯。</summary>
      <param name="name">代表文化特性名稱的字串。</param>
      <returns>新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，與其相關聯的文化特性具有指定之識別項，並使用目前的 <see cref="T:System.Reflection.Assembly" /> 中的字串比較方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為無效的文化特性名稱。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)">
      <summary>初始化新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，這個物件與所指定文化特性相關聯，而且使用所指定 <see cref="T:System.Reflection.Assembly" /> 中的字串比較方法。</summary>
      <param name="name">代表文化特性名稱的字串。</param>
      <param name="assembly">
        <see cref="T:System.Reflection.Assembly" />，含有要使用的字串比較方法。</param>
      <returns>新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，與其相關聯的文化特性具有指定之識別項，並使用目前的 <see cref="T:System.Reflection.Assembly" /> 中的字串比較方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
 <paramref name="assembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為無效的文化特性名稱。
-或-
 <paramref name="assembly" /> 屬於無效的類型。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.CompareInfo" /> 的雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
      <returns>目前 <see cref="T:System.Globalization.CompareInfo" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode(System.ReadOnlySpan{System.Char},System.Globalization.CompareOptions)">
      <summary>根據所指定比較選項取得字元範圍的雜湊碼。</summary>
      <param name="source">要傳回其雜湊碼的字元範圍。</param>
      <param name="options">決定如何比較字串的值。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)">
      <summary>根據指定的比較選項，取得字串的雜湊碼。</summary>
      <param name="source">要傳回其雜湊碼的字串。</param>
      <param name="options">決定如何比較字串的值。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String)">
      <summary>取得指定之字串的排序鍵。</summary>
      <param name="source">取得 <see cref="T:System.Globalization.SortKey" /> 物件的字串。</param>
      <returns>
        <see cref="T:System.Globalization.SortKey" /> 物件，包含指定之字串的排序鍵。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.SortKey" /> 值，取得指定之字串的 <see cref="T:System.Globalization.CompareOptions" /> 物件。</summary>
      <param name="source">取得 <see cref="T:System.Globalization.SortKey" /> 物件的字串。</param>
      <param name="options">下列其中一個或多個列舉值的位元組合，這些值會定義排序鍵的計算方式：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>
        <see cref="T:System.Globalization.SortKey" /> 物件，包含指定之字串的排序鍵。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>搜尋指定的字元，並傳回整個來源字串內第一個相符項目的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <returns>
        <paramref name="value" /> 中 <paramref name="source" /> 第一次出現之以零起始的索引 (如果找得到的話)，否則為 -1。 如果<paramref name="value" />是一個可忽略的字元，則傳回 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回整個來源字串內第一個相符項目的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="options">定義應該如何比較字串的值。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 內，使用指定的比較選項，找到 <paramref name="source" /> 第一次出現的以零起始的索引，否則為 -1。 如果<paramref name="value" />是一個可忽略的字元，則傳回 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)">
      <summary>搜尋指定的字元，並傳回第一個相符項目 (在來源字串中從指定索引延伸至字串結尾的區段內) 的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 延伸至 <paramref name="startIndex" /> 結尾) 內，<paramref name="source" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回第一個相符項目 (在來源字串中從指定索引延伸至字串結尾的區段內) 的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 延伸至 <paramref name="startIndex" /> 結尾) 內，使用指定的比較選項，找到 <paramref name="source" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜尋指定的字元，並傳回來源字串區段 (起始於指定索引並且含有指定的項目數) 內第一個相符項目的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (開始於 <paramref name="source" />，並包含 <paramref name="startIndex" /> 所指定數目的項目) 內，<paramref name="count" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回第一個相符項目 (在來源字串中起始於指定索引且含有指定項目數的區段內) 的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (開始於 <paramref name="source" />，並包含 <paramref name="startIndex" /> 所指定數目的項目) 內，使用指定的比較選項，找到 <paramref name="count" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>搜尋指定的子字串，並傳回來源字串內第一個相符項目的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <returns>
        <paramref name="value" /> 中 <paramref name="source" /> 第一次出現之以零起始的索引 (如果找得到的話)，否則為 -1。 如果<paramref name="value" />是一個可忽略的字元，則傳回 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回整個來源字串內第一個相符項目的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 內，使用指定的比較選項，找到 <paramref name="source" /> 第一次出現的以零起始的索引，否則為 -1。 如果<paramref name="value" />是一個可忽略的字元，則傳回 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)">
      <summary>搜尋指定的子字串，並傳回第一個相符項目 (在來源字串中從指定索引延伸至字串結尾的區段內) 的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 延伸至 <paramref name="startIndex" /> 結尾) 內，<paramref name="source" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回第一個相符項目 (在來源字串中從指定索引延伸至字串結尾的區段內) 的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 延伸至 <paramref name="startIndex" /> 結尾) 內，使用指定的比較選項，找到 <paramref name="source" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜尋指定的子字串，並傳回來源字串的區段 (起始於指定索引且含有指定項目數) 內第一個相符項目以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (開始於 <paramref name="source" />，並包含 <paramref name="startIndex" /> 所指定數目的項目) 內，<paramref name="count" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回第一個相符項目 (在來源字串中起始於指定索引且含有指定項目數的區段內) 的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (開始於 <paramref name="source" />，並包含 <paramref name="startIndex" /> 所指定數目的項目) 內，使用指定的比較選項，找到 <paramref name="count" /> 第一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>判斷指定的來源字串是否以指定字首開始。</summary>
      <param name="source">要在其中搜尋的字串。</param>
      <param name="prefix">要與 <paramref name="source" /> 的開頭相比較的字串。</param>
      <returns>如果 <paramref name="prefix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="prefix" /> 開始，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="prefix" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，判斷指定的來源字串是否以指定字首開始。</summary>
      <param name="source">要在其中搜尋的字串。</param>
      <param name="prefix">要與 <paramref name="source" /> 的開頭相比較的字串。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="prefix" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果 <paramref name="prefix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="prefix" /> 開始，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="prefix" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSortable(System.Char)">
      <summary>指出指定的 Unicode 字元是否可排序。</summary>
      <param name="ch">Unicode 字元。</param>
      <returns>如果 <paramref name="ch" /> 參數可排序，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSortable(System.String)">
      <summary>指出指定的 Unicode 字串是否可排序。</summary>
      <param name="text">零或更多 Unicode 字元的字串。</param>
      <returns>如果 <paramref name="str" /> 參數不是空字串 ("")，且 <paramref name="str" /> 中所有的 Unicode 字元都是可排序的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>判斷指定的來源字串是否以指定字尾結束。</summary>
      <param name="source">要在其中搜尋的字串。</param>
      <param name="suffix">要與 <paramref name="source" /> 的結尾相比較的字串。</param>
      <returns>如果 <paramref name="suffix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="suffix" /> 結束，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="suffix" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，判斷指定的來源字串是否以指定字尾結束。</summary>
      <param name="source">要在其中搜尋的字串。</param>
      <param name="suffix">要與 <paramref name="source" /> 的結尾相比較的字串。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="suffix" />。 <paramref name="options" /> 若不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果 <paramref name="suffix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="suffix" /> 結束，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="suffix" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>搜尋指定的字元，並傳回整個來源字串內最後一個相符項目的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <returns>
        <paramref name="value" /> 中 <paramref name="source" /> 最後一次出現之以零起始的索引 (如果找得到的話)，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回整個來源字串內最後一個相符項目的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 內，使用指定的比較選項，找到 <paramref name="source" /> 最後一次出現的以零起始的索引，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)">
      <summary>搜尋指定的字元，並傳回最後一個相符項目 (在來源字串中從字串開頭延伸至指定索引的區段內) 的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 的開頭延伸至 <paramref name="source" />) 內，<paramref name="startIndex" /> 最後一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回最後一個相符項目 (在來源字串中從字串開頭延伸至指定索引的區段內) 的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 的開頭至 <paramref name="source" />) 內，使用指定的比較選項，找到 <paramref name="startIndex" /> 最後一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜尋指定的字元，並傳回最後一個相符項目 (在來源字串中含有指定項目數且結束於指定索引的區段內) 的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (包含 <paramref name="source" /> 所指定數目的項目，且結束於 <paramref name="count" />) 內，<paramref name="startIndex" /> 最後一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回最後一個相符項目 (在來源字串中含有指定項目數且結束於指定索引的區段內) 的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (包含 <paramref name="source" /> 所指定數目的項目，並結束於 <paramref name="count" />) 內，使用指定的比較選項，找到最後一次出現的 <paramref name="startIndex" /> 以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>搜尋指定的子字串，並傳回整個來源字串中最後一個相符項目的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <returns>
        <paramref name="value" /> 中 <paramref name="source" /> 最後一次出現之以零起始的索引 (如果找得到的話)，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回整個來源字串內最後一個相符項目的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 內，使用指定的比較選項，找到 <paramref name="source" /> 最後一次出現的以零起始的索引，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)">
      <summary>搜尋指定的子字串，並傳回最後一個相符項目 (在來源字串中從字串開頭延伸至指定索引的區段內) 的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 的開頭延伸至 <paramref name="source" />) 內，<paramref name="startIndex" /> 最後一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回在來源字串的區段 (從字串開頭延伸至指定索引) 內最後一個相符項目的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (從 <paramref name="source" /> 的開頭至 <paramref name="source" />) 內，使用指定的比較選項，找到 <paramref name="startIndex" /> 最後一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜尋指定的子字串，並傳回最後一個相符項目 (在來源字串中含有指定項目數且結束於指定索引的區段內) 的以零為起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (包含 <paramref name="source" /> 所指定數目的項目，且結束於 <paramref name="count" />) 內，<paramref name="startIndex" /> 最後一次出現的以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回最後一個相符項目 (在來源字串中含有指定項目數且結束於指定索引的區段內) 的以零起始的索引。</summary>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">向後搜尋之以零為起始的起始索引。</param>
      <param name="count">區段中要搜尋的項目數目。</param>
      <param name="options">值，這個值會定義應該如何比較 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 若不是 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 列舉值，就是下列一個或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果有找到，則是在 <paramref name="value" /> 的區段 (包含 <paramref name="source" /> 所指定數目的項目，並結束於 <paramref name="count" />) 內，使用指定的比較選項，找到最後一次出現的 <paramref name="startIndex" /> 以零起始的索引，否則為 -1。 如果 <paramref name="startIndex" /> 一個可忽略的字元，則傳回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。
-或-
 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出 <paramref name="source" /> 的有效索引範圍。
-或-
 <paramref name="count" /> 小於零。
-或-
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="source" /> 中的有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.LCID">
      <summary>為目前的 <see cref="T:System.Globalization.CompareInfo" /> 取得正確格式的文化特性識別項。</summary>
      <returns>目前 <see cref="T:System.Globalization.CompareInfo" /> 的正確格式之文化特性識別項。</returns>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
      <summary>取得由此 <see cref="T:System.Globalization.CompareInfo" /> 物件進行排序作業所使用之文化特性的名稱。</summary>
      <returns>文化特性的名稱。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>執行於整個物件 Graph 已經還原序列化時。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。</param>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>傳回表示目前 <see cref="T:System.Globalization.CompareInfo" /> 物件的字串。</summary>
      <returns>代表目前 <see cref="T:System.Globalization.CompareInfo" /> 物件的字串。</returns>
    </member>
    <member name="P:System.Globalization.CompareInfo.Version">
      <summary>取得用於比較和排序字串的 Unicode 版本的相關資訊。</summary>
      <returns>包含用於比較和排序字串之 Unicode 版本相關資訊的物件。</returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>定義與 <see cref="T:System.Globalization.CompareInfo" /> 一起使用的字串比較選項。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>指示字串比較必須忽略大小寫。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>指示字串比較必須忽略假名類型。 假名類型意指日文平假名和片假名字元，表示日本語言中的語音。 平假名用於本土日文的語句和字詞，而片假名則用於自其他語言引進的字詞，例如「computer」或「Internet」。 平假名和片假名都可以用來表達語音。 如果選取這個值，就會將代表一個語音的平假名字元視為等於代表相同語音的片假名字元。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>指示字串比較必須忽略無間距的組合字元，例如變音符號。 Unicode Standard (Unicode 標準)，將組合字元定義為結合基底字元以產生新字元的字元。 無間距的組合字元在呈現時本身並不佔用間距位置。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>指示字串比較必須忽略符號，例如空白字元、標點符號、貨幣符號、百分比符號、數學符號、＆ 符號等等。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>指示字串比較必須忽略字元寬度。 例如，日文片假名字元可以書寫為全型或半型。 如果選取這個值，則片假名字元會書寫為全型並視為等同於以半型書寫的相同字元。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>指示字串比較的預設選項設定值。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>表示字串比較必須使用字串的連續 Unicode UTF-16 編碼值 (逐一程式碼單位比較)，這是快速的比較但不區分文化特性。 如果程式碼單位 XXXX16 小於 YYYY16，則以 XXXX16 開始的字串會比以 YYYY16 開始的字串優先。 這個值無法與其他 <see cref="T:System.Globalization.CompareOptions" /> 值搭配使用，而且必須單獨使用。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
      <summary>字串比較必須忽略大小寫，然後執行序數比較。 這項技術等於使用非變異文化特性將字串轉換成大寫，然後在結果上執行序數比較。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>指示字串比較必須使用字串排序演算法。 在字串排序中，連字號 (-)、所有格符號 (') 以及其他非英數字元的順序會比英數字元優先。</summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>提供有關特定文化特性 (Culture) 的資訊 (文化特性在 Unmanaged 程式碼開發中稱為「地區設定」)。 這項資訊包含文化特性的名稱、書寫系統、使用的曆法、字串的排序次序，以及日期和數字的格式。</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32)">
      <summary>根據文化特性識別項所指定的文化特性，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
      <param name="culture">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 識別項、現有 <see cref="T:System.Globalization.CultureInfo" /> 物件的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 屬性，或 Windows 專用文化特性識別項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> 小於零。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> 不是有效的文化特性識別項。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)">
      <summary>根據文化特性識別項所指定的文化特性，並根據指定是否要使用系統中使用者選取的文化特性設定的布林值，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
      <param name="culture">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 識別項、現有 <see cref="T:System.Globalization.CultureInfo" /> 物件的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 屬性，或 Windows 專用文化特性識別項。</param>
      <param name="useUserOverride">代表使用使用者選取的文化特性設定 (<see langword="true" />) 或預設文化特性設定 (<see langword="false" />) 的布林值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> 小於零。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> 不是有效的文化特性識別項。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>根據名稱所指定的文化特性，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
      <param name="name">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 名稱、現有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" />，或 Windows 專用文化特性名稱。 <paramref name="name" /> 不區分大小寫。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 不是有效的文化特性名稱。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)">
      <summary>根據名稱所指定的文化特性，並根據指示是否要從系統中使用使用者選取的文化特性設定的布林值，初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
      <param name="name">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 名稱、現有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" />，或 Windows 專用文化特性名稱。 <paramref name="name" /> 不區分大小寫。</param>
      <param name="useUserOverride">代表使用使用者選取的文化特性設定 (<see langword="true" />) 或預設文化特性設定 (<see langword="false" />) 的布林值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 不是有效的文化特性名稱。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>取得文化特性使用的預設曆法。</summary>
      <returns>
        <see cref="T:System.Globalization.Calendar" />，代表文化特性所使用的預設曆法。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ClearCachedData">
      <summary>重新整理已快取的文化特性相關資訊。</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>建立目前 <see cref="T:System.Globalization.CultureInfo" /> 的複本。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的複本。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>取得 <see cref="T:System.Globalization.CompareInfo" />，定義此文化特性如何比較字串。</summary>
      <returns>
        <see cref="T:System.Globalization.CompareInfo" />，定義此文化特性如何比較字串。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)">
      <summary>建立 <see cref="T:System.Globalization.CultureInfo" />，代表與指定名稱相關的特定文化特性。</summary>
      <param name="name">預先定義的 <see cref="T:System.Globalization.CultureInfo" /> 名稱或現有 <see cref="T:System.Globalization.CultureInfo" /> 物件的名稱。 <paramref name="name" /> 不區分大小寫。</param>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" /> 物件，代表： 
如果 <paramref name="name" /> 是空字串 ("")，則為不因文化特性而異 (Invariant Culture)。  
-或- 
如果 <paramref name="name" /> 是中性文化特性，則為與 <paramref name="name" /> 關聯的特定文化特性。  
-或- 
如果 <paramref name="name" /> 已經是特定文化特性，則為 <paramref name="name" /> 所指定的文化特性。</returns>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 不是有效的文化特性名稱。  
-或- 
<paramref name="name" /> 所指定的文化特性沒有相關聯的特定文化特性。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.CultureTypes">
      <summary>取得和目前 <see cref="T:System.Globalization.CultureInfo" /> 物件關聯的文化特性類型。</summary>
      <returns>一或多個 <see cref="T:System.Globalization.CultureTypes" /> 值的位元組合。 它沒有預設值。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>取得或設定 <see cref="T:System.Globalization.CultureInfo" /> 物件，這個物件代表目前執行緒使用的文化特性。</summary>
      <returns>物件，代表目前執行緒使用的文化特性。</returns>
      <exception cref="T:System.ArgumentNullException">該屬性設定為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>取得或設定 <see cref="T:System.Globalization.CultureInfo" /> 物件，此物件代表 Resource Manager 用於執行階段查詢特定文化特性資源的目前使用者介面文化特性。</summary>
      <returns>資源管理員用來在執行階段查詢特定文化特性資源的文化特性。</returns>
      <exception cref="T:System.ArgumentNullException">該屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此屬性設為無法用來尋找資源檔的文化特性名稱。 資源檔名稱只能包含字母、數字、連字號或底線。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>取得或設定 <see cref="T:System.Globalization.DateTimeFormatInfo" />，定義日期和時間在文化特性上適當的顯示格式。</summary>
      <returns>
        <see cref="T:System.Globalization.DateTimeFormatInfo" />，定義日期和時間在文化特性上適當的顯示格式。</returns>
      <exception cref="T:System.ArgumentNullException">此屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 屬性或任何 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 屬性已設定，而且 <see cref="T:System.Globalization.CultureInfo" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture">
      <summary>取得或設定目前應用程式定義域中之執行緒的預設文化特性。</summary>
      <returns>在目前的應用程式定義域中為執行緒的預設文化特性，若目前的系統文化特性是應用程式定義域中的預設執行緒文化特性，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture">
      <summary>取得或設定目前應用程式定義域中之執行緒的預設 UI 文化特性。</summary>
      <returns>在目前的應用程式定義域中為執行緒的預設 UI 文化特性，若目前的系統 UI 文化特性是應用程式定義域中的預設執行緒 UI 文化特性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">設定作業中，<see cref="P:System.Globalization.CultureInfo.Name" /> 屬性值無效。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>取得完整當地語系化文化特性名稱。</summary>
      <returns>完整當地語系化文化特性名稱，格式languagefull [country/regionfull]，其中languagefull是語言的完整名稱和country/regionfull是國家/地區的完整名稱。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>取得格式為 languagefull [country/regionfull] 的英文文化特性名稱。</summary>
      <returns>格式的文化特性名稱languagefull [country/regionfull]，其中languagefull是語言的完整名稱和國家 （地區) /regionfull是國家/地區的完整名稱。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>判斷指定物件是否與目前 <see cref="T:System.Globalization.CultureInfo" /> 為相同的文化特性。</summary>
      <param name="value">要與目前 <see cref="T:System.Globalization.CultureInfo" /> 比較的物件。</param>
      <returns>如果 <paramref name="value" /> 與目前 <see cref="T:System.Globalization.CultureInfo" /> 為相同的文化特性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture">
      <summary>在預設的圖形使用者介面 (Graphic User Interface，GUI) 的文化特性不適合主控台應用程式 (Console Application) 時，取得適合的替代使用者介面文化特性。</summary>
      <returns>替代的文化特性，用來在主控台上讀取和顯示文字。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)">
      <summary>使用指定的文化特性識別項，擷取已快取的唯讀文化特性執行個體。</summary>
      <param name="culture">地區設定識別項 (LCID)。</param>
      <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> 小於零。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> 指定不支援的文化特性 (Culture)。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)">
      <summary>使用指定的文化特性名稱，擷取已快取的唯讀文化特性執行個體。</summary>
      <param name="name">文化特性的名稱。 <paramref name="name" /> 不區分大小寫。</param>
      <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 指定不支援的文化特性 (Culture)。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)">
      <summary>擷取文化特性的快取、唯讀執行個體。 這些參數會指定文化特性，這個文化特性使用另一個文化特性所指定的 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 物件來初始化。</summary>
      <param name="name">文化特性的名稱。 <paramref name="name" /> 不區分大小寫。</param>
      <param name="altName">文化特性的名稱，這個文化特性提供 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 物件，而這些物件是用來初始化 <paramref name="name" />。 <paramref name="altName" /> 不區分大小寫。</param>
      <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="altName" /> 為 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 或 <paramref name="altName" /> 指定不支援的文化特性 (Culture)。 如需詳細資訊，請參閱＜呼叫者注意事項＞一節。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)">
      <summary>已取代。 擷取唯讀的 <see cref="T:System.Globalization.CultureInfo" /> 物件，其語言特性是透過指定的 RFC 4646 語言標籤所辨識。</summary>
      <param name="name">透過 RFC 4646 標準指定的語言名稱。</param>
      <returns>唯讀 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 未對應到支援的文化特性。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)">
      <summary>取得支援的文化特性清單，此清單經過指定的 <see cref="T:System.Globalization.CultureTypes" /> 參數篩選。</summary>
      <param name="types">列舉值的位元 (Bitwise) 組合，這些值可篩選要擷取的文化特性。</param>
      <returns>包含 <paramref name="types" /> 參數所指定之文化特性的陣列。 文化特性陣列是未排序的。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="types" /> 指定無效的 <see cref="T:System.Globalization.CultureTypes" /> 值組合。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>取得定義如何格式化指定型別的物件。</summary>
      <param name="formatType">要取得其格式化物件的 <see cref="T:System.Type" />。 這個方法只支援 <see cref="T:System.Globalization.NumberFormatInfo" /> 和 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 型別。</param>
      <returns>
        <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 屬性的值；如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.NumberFormatInfo" /> 類別的 <see cref="T:System.Globalization.CultureInfo" /> 物件，則這會是包含目前 <see cref="T:System.Type" /> 的預設數值格式資訊的 <see cref="T:System.Globalization.NumberFormatInfo" />。  
-或- 
<see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 屬性的值；如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 類別的 <see cref="T:System.Globalization.CultureInfo" /> 物件，則這會是包含目前 <see cref="T:System.Type" /> 的預設日期及時間格式資訊的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。  
-或- 
null，如果 <paramref name="formatType" /> 為其他任何物件。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.CultureInfo" /> 的雜湊函式，適合於雜湊演算法和資料結構 (如雜湊資料表)。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IetfLanguageTag">
      <summary>已取代。 取得語言的 RFC 4646 標準識別。</summary>
      <returns>表示語言的 RFC 4646 標準識別的字串。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InstalledUICulture">
      <summary>取得 <see cref="T:System.Globalization.CultureInfo" />，表示作業系統所安裝的文化特性。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" />，表示作業系統所安裝的文化特性。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>取得與文化特性無關的 (不變的) <see cref="T:System.Globalization.CultureInfo" /> 物件。</summary>
      <returns>與文化特性無關的 (不變的) 物件。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 是否表示中性文化特性。</summary>
      <returns>如果目前 <see cref="T:System.Globalization.CultureInfo" /> 表示中性文化特性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 是否為唯讀。</summary>
      <returns>如果目前 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Globalization.CultureInfo" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.KeyboardLayoutId">
      <summary>取得使用中的輸入地區設定識別項 (Input Locale Identifier)。</summary>
      <returns>32 位元帶正負號的數字，指定輸入地區設定識別項。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.LCID">
      <summary>取得目前 <see cref="T:System.Globalization.CultureInfo" /> 的文化特性識別項。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的文化特性識別項。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>取得格式為 languagecode2-country/regioncode2 的文化特性名稱。</summary>
      <returns>格式的文化特性名稱languagecode2-country/regioncode2。 languagecode2衍生自 ISO 639-1 的小寫雙字母代碼。 country/regioncode2衍生自 ISO 3166，通常是由兩個大寫字母或 BCP-47 語言標記所組成。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>取得文化特性設定為要顯示的文化特性名稱，由語言、國家/地區和選擇性 (Optional) 指令碼組成。</summary>
      <returns>文化特性名稱。 由語言的完整名稱、國家/地區的完整名稱和選擇性字集組成。 這種格式會在 <see cref="T:System.Globalization.CultureInfo" /> 類別的描述中討論。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>取得或設定 <see cref="T:System.Globalization.NumberFormatInfo" />，定義數字、貨幣和百分比在文化特性上適當的顯示格式。</summary>
      <returns>
        <see cref="T:System.Globalization.NumberFormatInfo" />，定義數字、貨幣和百分比在文化特性上適當的顯示格式。</returns>
      <exception cref="T:System.ArgumentNullException">此屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 屬性或任何 <see cref="T:System.Globalization.NumberFormatInfo" /> 屬性已設定，而且 <see cref="T:System.Globalization.CultureInfo" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>取得可為文化特性所使用的曆法清單。</summary>
      <returns>
        <see cref="T:System.Globalization.Calendar" /> 型別的陣列，表示可為目前 <see cref="T:System.Globalization.CultureInfo" /> 表示之文化特性所使用的曆法。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>取得 <see cref="T:System.Globalization.CultureInfo" />，表示目前 <see cref="T:System.Globalization.CultureInfo" /> 的父文化特性。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" />，表示目前 <see cref="T:System.Globalization.CultureInfo" /> 的父文化特性。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>傳回指定 <see cref="T:System.Globalization.CultureInfo" /> 物件的唯讀包裝函式。</summary>
      <param name="ci">要包裝的 <see cref="T:System.Globalization.CultureInfo" /> 物件。</param>
      <returns>
        <paramref name="ci" /> 的唯讀 <see cref="T:System.Globalization.CultureInfo" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ci" /> 為 null。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>取得 <see cref="T:System.Globalization.TextInfo" />，定義與文化特性相關的書寫系統。</summary>
      <returns>
        <see cref="T:System.Globalization.TextInfo" />，定義與文化特性相關的書寫系統。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName">
      <summary>取得目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-2 三個字母代碼。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-2 三個字母代碼。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName">
      <summary>取得該語言在 Windows API 定義中的三個字母代碼。</summary>
      <returns>Windows API 中所定義的語言的三個字母代碼。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>傳回包含目前 <see cref="T:System.Globalization.CultureInfo" /> 名稱的字串，其格式為 languagecode2-country/regioncode2。</summary>
      <returns>包含目前 <see cref="T:System.Globalization.CultureInfo" /> 名稱的字串。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>取得目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-1 兩個字母代碼。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-1 兩個字母代碼。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.UseUserOverride">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 是否使用使用者選取的文化特性設定。</summary>
      <returns>如果目前 <see cref="T:System.Globalization.CultureInfo" /> 使用使用者選取的文化特性設定，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Globalization.CultureNotFoundException">
      <summary>當方法嘗試建構無法使用的文化特性時，會擲回例外狀況。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor">
      <summary>使用將其訊息字串設定為系統提供的訊息，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化資料和內容，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">與這個例外狀況一起顯示的錯誤訊息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">與這個例外狀況一起顯示的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Int32,System.Exception)">
      <summary>使用指定的錯誤訊息、無效的文化特性 ID 和造成這個例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">與這個例外狀況一起顯示的錯誤訊息。</param>
      <param name="invalidCultureId">找不到的文化特性 ID。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Int32,System.String)">
      <summary>使用指定的錯誤訊息、無效的文化特性 ID 和造成這個例外狀況的參數名稱，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="invalidCultureId">找不到的文化特性 ID。</param>
      <param name="message">與這個例外狀況一起顯示的錯誤訊息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的參數名稱，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="message">與這個例外狀況一起顯示的錯誤訊息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、無效的文化特性名稱和造成這個例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">與這個例外狀況一起顯示的錯誤訊息。</param>
      <param name="invalidCultureName">找不到的文化特性名稱。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的錯誤訊息、無效的文化特性名稱和造成這個例外狀況的參數名稱，初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="invalidCultureName">找不到的文化特性名稱。</param>
      <param name="message">與這個例外狀況一起顯示的錯誤訊息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以參數名稱和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureId">
      <summary>取得找不到的文化特性識別碼。</summary>
      <returns>無效的文化特性識別碼。</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureName">
      <summary>取得找不到的文化特性名稱。</summary>
      <returns>無效的文化特性名稱。</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.Message">
      <summary>取得解釋例外狀況原因的錯誤訊息。</summary>
      <returns>描述例外狀況之詳細資料的文字字串。</returns>
    </member>
    <member name="T:System.Globalization.CultureTypes">
      <summary>定義可使用 <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> 方法擷取的文化特性類型清單。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.AllCultures">
      <summary>.NET 識別的所有文化特性，包括中性和特定文化特性，以及使用者所建立的自訂文化特性。
在 Windows 上執行的 .NET Framework 4 和更新版本以及 .NET Core，其包括 Windows 作業系統提供的文化特性資料。 在 Linux 和 macOS 上執行的 .NET Core，其包括 ICU 程式庫中定義的文化特性資料。
 <see cref="F:System.Globalization.CultureTypes.AllCultures" /> 是複合欄位，包含 <see cref="F:System.Globalization.CultureTypes.NeutralCultures" />、<see cref="F:System.Globalization.CultureTypes.SpecificCultures" /> 和 <see cref="F:System.Globalization.CultureTypes.InstalledWin32Cultures" /> 值。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.FrameworkCultures">
      <summary>已取代這個成員，使用這個值與 <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> 會傳回隨附於 .NET Framework 2.0 的中性和特定文化特性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.InstalledWin32Cultures">
      <summary>已取代這個成員。 Windows 作業系統中安裝的所有文化特性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.NeutralCultures">
      <summary>與語言關聯、但不專屬於國家/地區的文化特性 (Culture)。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.ReplacementCultures">
      <summary>已取代這個成員。 使用者所建立的自訂文化特性，用來取代 .NET Framework 隨附的文化特性 (Culture)。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.SpecificCultures">
      <summary>國家/地區專用的文化特性 (Culture)。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.UserCustomCulture">
      <summary>已取代這個成員。 使用者所建立的自訂文化特性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.WindowsOnlyCultures">
      <summary>已取代這個成員並已忽略。</summary>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>提供關於日期和時間值格式的特定文化特性資訊。</summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>初始化與文化特性無關 (不因文化特性而異) 之 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 類別的可寫入新執行個體。</summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>取得或設定包含特定文化特性之星期縮寫名稱的一維陣列 (型別為 <see cref="T:System.String" />)。</summary>
      <returns>包含特定文化特性之星期縮寫名稱的一維陣列 (型別為 <see cref="T:System.String" />)。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri" 和 "Sat"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 7 的陣列。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
      <summary>取得或設定字串陣列，這個陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的縮寫月份名稱。</summary>
      <returns>縮寫月份名稱的陣列。</returns>
      <exception cref="T:System.ArgumentException">在 set 作業中，陣列式多維的，或者長度不是剛好為 13。</exception>
      <exception cref="T:System.ArgumentNullException">在 set 作業中，陣列或陣列的其中一個元素為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>取得或設定包含特定文化特性之月份縮寫名稱的一維字串陣列。</summary>
      <returns>包含特定文化特性之月份縮寫名稱且具有 13 個元素的一維字串陣列。 針對 12 月制曆法，陣列的第 13 個元素為空字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec" 和 ""。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 13 的陣列。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>取得或設定 "ante meridiem" (正午以前) 小時的字串指示項。</summary>
      <returns>"ante meridiem" (正午以前) 小時的字串指示項。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "AM"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>取得或設定目前文化特性所使用的曆法。</summary>
      <returns>目前文化特性所使用的曆法。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值是 <see cref="T:System.Globalization.GregorianCalendar" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正被設定為對目前文化特性而言並非有效的 <see cref="T:System.Globalization.Calendar" /> 物件。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>取得或設定數值，指定要使用哪一個規則 (Rule) 來決定一年中的第一個日曆週。</summary>
      <returns>判斷一年中第一個日曆週的值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正被設定為不是有效 <see cref="T:System.Globalization.CalendarWeekRule" /> 值的值。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>建立 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的淺層複本。</summary>
      <returns>從原始 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 複製的新 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>取得根據目前文化特性格式化值的唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</summary>
      <returns>唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，根據的是目前執行緒的 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DateSeparator">
      <summary>取得或設定分隔日期組成部分 (即年、月和日) 的字串。</summary>
      <returns>分隔日期組成部分 (即年、月和日) 的字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "/"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>取得或設定包含特定文化特性之星期完整名稱的一維字串陣列。</summary>
      <returns>包含特定文化特性之星期完整名稱的一維字串陣列。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday" 和 "Saturday"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 7 的陣列。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>取得或設定週的第一天。</summary>
      <returns>表示一週第一天的列舉值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 <see cref="F:System.DayOfWeek.Sunday" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正被設定為不是有效 <see cref="T:System.DayOfWeek" /> 值的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>取得或設定完整日期和時間值的自訂格式字串。</summary>
      <returns>完整日期和時間值的自訂格式字串。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回一星期內指定某一天的文化特性特有縮寫名稱。</summary>
      <param name="dayofweek">
        <see cref="T:System.DayOfWeek" /> 值。</param>
      <returns>
        <paramref name="dayofweek" /> 所表示的星期的特定文化特性之縮寫名稱。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>如果縮寫存在的話，傳回含有指定紀元縮寫名稱的字串。</summary>
      <param name="era">表示紀元的整數。</param>
      <returns>含有指定紀元縮寫名稱的字串 (如果縮寫存在的話)。  
 -或-  
 含有紀元完整名稱的字串 (如果縮寫不存在的話)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 屬性所指定曆法的有效紀元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回指定月份的文化特性特有縮寫名稱。</summary>
      <param name="month">從 1 到 13 的整數，表示要擷取的月份名稱。</param>
      <returns>
        <paramref name="month" /> 所表示月份的特定文化特性之縮寫名稱。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小於 1 或大於 13。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns">
      <summary>傳回可格式化日期和時間值的所有標準模式。</summary>
      <returns>陣列，其中包含可格式化日期和時間值的標準模式。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)">
      <summary>傳回可以使用所指定標準格式字串來格式化日期和時間值的所有模式。</summary>
      <param name="format">標準格式字串。</param>
      <returns>包含標準模式的陣列，其中的日期和時間值可以使用指定的格式字串格式化。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> 不是有效的標準格式字串。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回一星期內指定某一天的文化特性特有完整名稱。</summary>
      <param name="dayofweek">
        <see cref="T:System.DayOfWeek" /> 值。</param>
      <returns>
        <paramref name="dayofweek" /> 所表示星期的特定文化特性之完整名稱。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>傳回表示指定紀元的整數。</summary>
      <param name="eraName">含有紀元名稱的字串。</param>
      <returns>如果 <paramref name="eraName" /> 有效，則為表示紀元的整數，否則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eraName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>傳回含有指定紀元名稱的字串。</summary>
      <param name="era">表示紀元的整數。</param>
      <returns>含有紀元名稱的字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 屬性所指定曆法的有效紀元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>傳回指定的類型的物件，以提供日期和時間格式服務。</summary>
      <param name="formatType">需要的格式服務的類型。</param>
      <returns>如果 <paramref name="formatType" /> 與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的類型相同，則為目前的物件，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>傳回與指定 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 關聯的 <see cref="T:System.IFormatProvider" /> 物件。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，此提供者會取得 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。  
-或- 
 若要取得<see langword="null" /> ，則為 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />。</param>
      <returns>與 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 相關聯的 <see cref="T:System.IFormatProvider" /> 物件。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回指定月份的文化特性特有完整名稱。</summary>
      <param name="month">從 1 到 13 的整數，表示要擷取的月份名稱。</param>
      <returns>
        <paramref name="month" /> 所表示月份的特定文化特性之完整名稱。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小於 1 或大於 13。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)">
      <summary>為與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的星期內指定的某一天，取得最短的縮寫日名稱。</summary>
      <param name="dayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值。</param>
      <returns>縮寫星期名稱，對應於 <paramref name="dayOfWeek" /> 參數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayOfWeek" /> 不是 <see cref="T:System.DayOfWeek" /> 列舉中的值。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>取得與文化特性無關 (非變異) 的預設唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</summary>
      <returns>與文化特性無關 (非變異) 的唯讀物件。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是否唯讀。</summary>
      <returns>如果 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>取得或設定完整日期值的自訂格式字串。</summary>
      <returns>完整日期值的自訂格式字串。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>取得或設定完整時間值的自訂格式字串。</summary>
      <returns>完整時間值的格式模式。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>取得或設定月份和日值的自訂格式字串。</summary>
      <returns>月份和日值的自訂格式字串。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
      <summary>取得或設定字串陣列，這個陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的月份名稱。</summary>
      <returns>月份名稱的字串陣列。</returns>
      <exception cref="T:System.ArgumentException">在 set 作業中，陣列式多維的，或者長度不是剛好為 13。</exception>
      <exception cref="T:System.ArgumentNullException">在設定作業中，陣列或其中一個項目是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>取得或設定包含特定文化特性之月份完整名稱的一維陣列 (型別為 <see cref="T:System.String" />)。</summary>
      <returns>包含特定文化特性之月份完整名稱的一維陣列 (型別為 <see cref="T:System.String" />)。 在 12 月制曆法中，陣列的第 13 個元素為空字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December" 和 ""。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">正在將屬性設定為多維或長度不是剛好為 13 的陣列。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName">
      <summary>取得行事曆的原生 (Native) 名稱，這個行事曆與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯。</summary>
      <returns>如果有原生行事曆名稱可用，則為用於文化特性中與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件相關聯之行事曆的原生名稱，如果沒有原生行事曆名稱可用，則為空字串 ("")。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>取得或設定 "post meridiem" (正午以後) 小時的字串指示項。</summary>
      <returns>"post meridiem" (正午以後) 小時的字串指示項。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "PM"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>傳回唯讀的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包裝函式。</summary>
      <param name="dtfi">要包裝的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</param>
      <returns>唯讀的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dtfi" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>取得時間值的自訂格式字串，這個字串是根據網際網路工程任務推動小組 (Internet Engineering Task Force，IETF) 要求建議 (RFC) 1123 規格。</summary>
      <returns>根據 IETF RFC 1123 規格的時間值的自訂格式字串。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)">
      <summary>設定對應於指定之標準格式字串的自訂日期和時間格式字串。</summary>
      <param name="patterns">自訂格式字串的陣列。</param>
      <param name="format">與 <paramref name="patterns" /> 參數中所指定的自訂格式字串相關聯的標準格式字串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="patterns" /> 為 <see langword="null" /> 或長度為零的陣列。  
-或- 
 <paramref name="format" />不是一個有效的標準格式字串，或者是不能設定形式的標準格式字串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="patterns" /> 有 <see langword="null" /> 值的陣列元素。</exception>
      <exception cref="T:System.InvalidOperationException">這個 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>取得或設定簡短日期值的自訂格式字串。</summary>
      <returns>簡短日期值的自訂格式字串。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
      <summary>取得或設定字串陣列，這個陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的最短唯一縮寫日名稱。</summary>
      <returns>日名稱的字串陣列。</returns>
      <exception cref="T:System.ArgumentException">在設定作業中，陣列未確切包含七個元素。</exception>
      <exception cref="T:System.ArgumentNullException">在設定的作業中，數值陣列或數值陣列的其中一個元素為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>取得或設定簡短時間值的自訂格式字串。</summary>
      <returns>簡短時間值的自訂格式字串。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>取得可排序日期和時間值的自訂格式字串。</summary>
      <returns>可排序日期和時間值的自訂格式字串。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.TimeSeparator">
      <summary>取得或設定分隔時間組成部分 (即時、分和秒) 的字串。</summary>
      <returns>分隔時間組成部分的字串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 ":"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>取得自訂格式字串，以取得由 ISO 8601 所定義的國際標準、可排序日期和時間字串。</summary>
      <returns>國際標準、可排序日期和時間字串的自訂格式字串。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>取得或設定年月值的自訂格式字串。</summary>
      <returns>年份和月份值的自訂格式字串。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>定義格式化選項，這些選項會自訂一些日期和時間剖析方法的字串剖析。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>日期和時間會以 Coordinated Universal Time (UTC) 表示。 如果輸入字串代表當地時間 (透過時區規範或 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />)，則日期和時間會從當地時區轉換成 UTC。 如果輸入字串代表 UTC 時間 (透過時區規範或 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)，則不會進行轉換。 如果輸入字串不是代表當地或 UTC 時間，則不會進行轉換，而且產生的 <see cref="P:System.DateTime.Kind" /> 屬性是 <see cref="F:System.DateTimeKind.Unspecified" />。 這個值不可搭配 <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> 使用。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>除非字串中間的額外空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>除非前置空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>除非結尾空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>除非字串中任意位置的額外空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。 這個值是 <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />、 <see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" />和 <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> 值的組合。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>如果未在剖析字串中指定時區，則會假設字串是代表當地時間。 這個值不可搭配 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 或 <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> 使用。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>如果未在剖析字串中指定時區，則會假設字串是代表 UTC。 這個值不可搭配 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 或 <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> 使用。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>如果受剖析字串只含時間而未含日期，則剖析方法會假設為西曆日期，其中年 = 1、月 = 1 而日 = 1。 如果未使用這個值，則假設為目前日期。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>必須使用預設格式化選項。 這個值表示 <see cref="M:System.DateTime.Parse(System.String)" />、 <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />和 <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> 方法的預設樣式。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>使用 "o" 或 "r" 標準格式規範將 <see cref="T:System.DateTimeKind" /> 物件轉換為字串，再將字串轉換回 <see cref="T:System.DateTime" /> 物件時，會保留日期的 <see cref="T:System.DateTime" /> 欄位。</summary>
    </member>
    <member name="T:System.Globalization.DaylightTime">
      <summary>定義日光節約時間的期間。</summary>
    </member>
    <member name="M:System.Globalization.DaylightTime.#ctor(System.DateTime,System.DateTime,System.TimeSpan)">
      <summary>使用指定的開始、結束和時間差異資訊，初始化 <see cref="T:System.Globalization.DaylightTime" /> 類別的新執行個體。</summary>
      <param name="start">物件，表示日光節約期間開始的日期和時間。 這值必須是當地時間。</param>
      <param name="end">物件，表示日光節約期間結束的日期和時間。 這值必須是當地時間。</param>
      <param name="delta">物件，表示標準時間與日光節約時間的時差 (以秒為單位)。</param>
    </member>
    <member name="P:System.Globalization.DaylightTime.Delta">
      <summary>取得時間間隔，表示標準時間與日光節約時間的時差。</summary>
      <returns>時間間隔，表示標準時間與日光節約時間的時差。</returns>
    </member>
    <member name="P:System.Globalization.DaylightTime.End">
      <summary>取得物件，表示日光節約期間結束的日期和時間。</summary>
      <returns>物件，表示日光節約期間結束的日期和時間。 這值以當地時間計。</returns>
    </member>
    <member name="P:System.Globalization.DaylightTime.Start">
      <summary>取得物件，表示日光節約期間開始的日期和時間。</summary>
      <returns>物件，表示日光節約期間開始的日期和時間。 這值以當地時間計。</returns>
    </member>
    <member name="T:System.Globalization.DigitShapes">
      <summary>表示以適合特定文化的方式顯示數字。</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.Context">
      <summary>依照同一份輸出中，先前的數字來決定數字形狀。 拉丁文字後面跟著歐洲數字、阿拉伯文字後面跟著阿拉伯-印度數字，而泰文後面則跟著泰式數字。</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.NativeNational">
      <summary>數字圖形是與 0 到 9 對等的原生數字。 從 0 到 9 的 ASCII 數字會取代為對等的原生國家數字。</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.None">
      <summary>不變更數字形狀。 保留完整的 Unicode 相容性。</summary>
    </member>
    <member name="T:System.Globalization.EastAsianLunisolarCalendar">
      <summary>表示曆法，這個曆法會將時間分割成月、日、年和紀元，並根據太陽和月亮的循環週期來產生日期。</summary>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>計算與指定日期相差指定月數的日期。</summary>
      <param name="time">要將 <paramref name="months" /> 加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>新 <see cref="T:System.DateTime" />，將所指定月數加入至 <paramref name="time" /> 參數所產生。</returns>
      <exception cref="T:System.ArgumentException">結果不在 <see cref="T:System.DateTime" /> 支援的範圍內。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000 或大於 120000。  
-或- 
 <paramref name="time" /> 小於 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>計算與指定日期相差指定年份的日期。</summary>
      <param name="time">要將 <paramref name="years" /> 加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>新 <see cref="T:System.DateTime" />，將所指定年份加入至 <paramref name="time" /> 參數所產生。</returns>
      <exception cref="T:System.ArgumentException">結果不在 <see cref="T:System.DateTime" /> 支援的範圍內。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小於 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="P:System.Globalization.EastAsianLunisolarCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar" />。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)">
      <summary>計算以六十年 (60 年) 為週期中指定年份的天干。</summary>
      <param name="sexagenaryYear">1 到 60 的整數，表示以六十年為週期的年份。</param>
      <returns>從 1 到 10 的數目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sexagenaryYear" /> 小於 1 或大於 60。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)">
      <summary>計算指定日期中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 的整數，表示 <paramref name="time" /> 參數中所指定之月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)">
      <summary>計算指定日期中一週的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>其中一個 <see cref="T:System.DayOfWeek" /> 值，表示在 <paramref name="time" /> 參數中所指定之一週的日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小於 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)">
      <summary>計算指定日期中年份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 354 的整數 (一般年份中)，或是 1 到 384 的整數 (閏年中)，表示 <paramref name="time" /> 參數中所指定之年份的日期。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的指定月份中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">1 到 12 的整數 (一般年份中 )，或 1 到 13 的整數 (閏年中)，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>指定的年份與紀元中指定月份的天數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在這個日曆支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>指定年份和紀元中的天數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>1 到 13 的正整數，表示在指定的年份及紀元中的閏月。  
-或- 
如果這個曆法不支援閏月，或是 <paramref name="year" /> 和 <paramref name="era" /> 參數沒有指定閏年，便為零。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定日期中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 13 的整數，表示 <paramref name="time" /> 參數中所指定的月份。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的月數。 傳回值為 12 個月 (一般年份中)，或是 13 個月 (閏年中)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)">
      <summary>計算以六十年 (60 年) 為週期中對應至指定日期的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>六十年為週期中對應至 <paramref name="date" /> 參數之 1 到 60 的數目。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)">
      <summary>計算以六十年 (60 年) 為週期中指定年份的地支。</summary>
      <param name="sexagenaryYear">1 到 60 的整數，表示以六十年為週期的年份。</param>
      <returns>1 到 12 的整數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sexagenaryYear" /> 小於 1 或大於 60。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)">
      <summary>傳回指定日期中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="day">1 到 31 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 在這個曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定年份和紀元中的指定月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果 <paramref name="month" /> 參數是閏月，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在這個日曆支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回 <see cref="T:System.DateTime" /> 物件，其設定為指定日期、時間和紀元。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="day">1 到 31 的整數，表示日期。</param>
      <param name="hour">0 到 23 的整數，表示小時。</param>
      <param name="minute">0 到 59 的整數，表示分鐘。</param>
      <param name="second">0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>設定為所指定日期、時間和紀元的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、<paramref name="millisecond" /> 或 <paramref name="era" /> 在這個曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換成 4 位數年份。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 參數的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.EastAsianLunisolarCalendar" /> 是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於 99 或大於目前曆法中可支援的最大年份。</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
      <summary>表示西曆。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
      <summary>使用預設的 <see cref="T:System.Globalization.GregorianCalendar" /> 值來初始化 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
      <summary>使用指定的 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，初始化 <see cref="T:System.Globalization.GregorianCalendar" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，代表要建立曆法的哪個語言版本。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="type" /> 不是 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 列舉的成員。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。  
-或- 
 <paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
      <summary>取得或設定 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，代表目前 <see cref="T:System.Globalization.GregorianCalendar" /> 的語言版本。</summary>
      <returns>
        <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，代表目前 <see cref="T:System.Globalization.GregorianCalendar" /> 的語言版本。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值並非 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 列舉的成員。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.GregorianCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.GregorianCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 31 的整數，表示 <paramref name="time" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示 <paramref name="time" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 366 的整數，表示 <paramref name="time" /> 中年份的日期。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>表示 <paramref name="time" /> 中紀元的整數。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。 請指定 <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> 或 <see langword="GregorianCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>一定是 0，因為西曆無法辨識閏月。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於西曆年度 1 年或大於西曆 9999 年。  
-或- 
 <paramref name="era" /> 不是 <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> 或 <see langword="GregorianCalendar.Eras[Calendar.CurrentEra]" />。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 12 的整數，表示 <paramref name="time" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>表示 <paramref name="time" /> 中年份的整數。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>這個方法永遠傳回 <see langword="false" />，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.GregorianCalendar" /> 型別所支援的最晚日期和時間。</summary>
      <returns>此<see cref="T:System.Globalization.GregorianCalendar" />類型所支援的最晚日期和時間, 也就是9999年12月31日的最後一刻 和相當於<see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.GregorianCalendar" /> 型別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.GregorianCalendar" />類型支援的最早日期和時間, 也就是西元0001年1月1日的第一刻 和相當於<see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值小於 99。  
-或- 
在設定作業中指定的值大於 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
      <summary>定義西曆的各種語言版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
      <summary>參考西曆的阿拉伯版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
      <summary>參考西曆的當地語系化版本，並根據使用 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的語言。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
      <summary>參考西曆的中東法文版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
      <summary>參考西曆的音譯英文版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
      <summary>參考西曆的音譯法文版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
      <summary>指的是參考西曆的美式英文版本。</summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
      <summary>代表希伯來曆法。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.HebrewCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將 <paramref name="months" /> 加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120,000 或大於 120,000。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將 <paramref name="years" /> 加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.HebrewCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.HebrewCalendar" /> 型別中的紀元。 傳回值永遠為包含一個與 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 相等元素的陣列。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 30 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 385 的整數，代表指定的 <see cref="T:System.DateTime" /> 中一年中的日期 。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 早於西曆中的 1583 年 9 月 17 日，或者大於 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="Calendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的紀元。 傳回值永遠都會是 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" />。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>正整數，指出在指定的年份及紀元中的閏月。 如果 <paramref name="year" /> 和 <paramref name="era" /> 參數指定閏年，則傳回值是 7，但如果不是閏年，則傳回 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不是 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。  
-或- 
 <paramref name="year" /> 小於希伯來曆法 5343 年或大於希伯來曆法 5999 年。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 13 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小於 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>在指定紀元的指定年份中的月數。 一般年份的傳回值為 12，閏年則為 13。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定之 <see cref="T:System.DateTime" /> 值中的年份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件所支援的範圍之外。</exception>
    </member>
    <member name="F:System.Globalization.HebrewCalendar.HebrewEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 在這個曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>如果指定的月份是閏月，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在這個日曆支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.HebrewCalendar" /> 型別所支援的最晚日期和時間。</summary>
      <returns>此<see cref="T:System.Globalization.HebrewCalendar" />類型所支援的最晚日期和時間, 相當於西元2239年9月29日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.HebrewCalendar" /> 型別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.HebrewCalendar" />類型所支援的最早日期和時間, 相當於西元1583年1月1日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。 請指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件所支援的範圍之外。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">2 位數年份從 0 到 99，或 4 位數希伯來曆法年份從 5343 到 5999。</param>
      <returns>如果 <paramref name="year" /> 參數是 2 位數年份，則傳回值為對應的 4 位數年份。 如果 <paramref name="year" /> 參數是 4 位數年份，則傳回值會是未變更的 <paramref name="year" /> 參數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 0。  
-或- 
 <paramref name="year" /> 小於 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.HebrewCalendar" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業時，希伯來曆法的年份值小於 5343 但不是 90，或是年份值大於 5999。</exception>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
      <summary>表示回曆。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.HijriCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要加入月份的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">結果為 <see cref="T:System.DateTime" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。  
-或- 
 <paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要加入年份的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>取得 <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" /> 屬性指定之年的前一年的天數。</summary>
      <returns>
        <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" /> 指定之年的前一年的天數。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.HijriCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.HijriCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 30 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 355 的整數，表示指定的 <see cref="T:System.DateTime" /> 中一年中的日期。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回指定年份和紀元之指定月份中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="year" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="month" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回指定年份和紀元中的天數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>指定年份和紀元中的天數。 一般年份有 354 天，閏年有 355 天。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。 指定 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 或 <see cref="F:System.Globalization.HijriCalendar.HijriEra" />。</param>
      <returns>一定是 0，因為 <see cref="T:System.Globalization.HijriCalendar" /> 型別不支援閏月的概念。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於回曆年度 1 年，或大於 9666 年。  
-或- 
 <paramref name="era" /> 不是 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 或 <see cref="F:System.Globalization.HijriCalendar.HijriEra" />。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回指定年份和紀元中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>指定年份和紀元中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.HijriAdjustment">
      <summary>取得或設定要在曆法中加減的日數，因應 Ramadan 始末之間的變動和各國家/區域之間的日期差距。</summary>
      <returns>從 -2 至 2 的整數，表示要在曆法中加減的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正要設定為無效的值。</exception>
    </member>
    <member name="F:System.Globalization.HijriCalendar.HijriEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="year" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="month" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="day" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定年份和紀元中的指定月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>這個方法一律會傳回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="year" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="month" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MaxSupportedDateTime">
      <summary>取得受此曆法所支援的最晚日期和時間。</summary>
      <returns>此<see cref="T:System.Globalization.HijriCalendar" />類型所支援的最晚日期和時間, 相當於西元9999年12月31日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MinSupportedDateTime">
      <summary>取得受此曆法所支援的最早日期和時間。</summary>
      <returns>此<see cref="T:System.Globalization.HijriCalendar" />類型所支援的最早日期和時間, 相當於西元622年7月18日的第一個點。 在西曆中。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回 <see cref="T:System.DateTime" /> 物件，其設定為指定日期、時間和紀元。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="year" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="month" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="day" /> 在這個日曆所支援的範圍之外。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">這個曆法是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於 100 或大於 9666。</exception>
    </member>
    <member name="T:System.Globalization.IdnMapping">
      <summary>網際網路網域名稱支援使用非 ASCII 字元。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Globalization.IdnMapping.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.IdnMapping" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Globalization.IdnMapping.AllowUnassigned">
      <summary>取得或設定值，指出目前 <see cref="T:System.Globalization.IdnMapping" /> 物件成員執行的作業中是否使用未指定的 Unicode 字碼指標。</summary>
      <returns>如果作業中使用未指定的字碼指標則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.Equals(System.Object)">
      <summary>指出指定的物件和目前的 <see cref="T:System.Globalization.IdnMapping" /> 物件是否相等。</summary>
      <param name="obj">要與目前的物件進行比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 參數指定的物件是從 <see cref="T:System.Globalization.IdnMapping" /> 衍生，並且其 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String)">
      <summary>將網域名稱標籤的字串 (包含 Unicode 字元) 編碼為 US-ASCII 字元範圍中可顯示的 Unicode 字元字串。 此字串是依據 IDNA 標準來格式化。</summary>
      <param name="unicode">要轉換的字串，其包含以標籤分隔符號分隔的一個或多個網域名稱標籤。</param>
      <returns>由 <paramref name="unicode" /> 參數指定的字串的對等用法，以 US-ASCII 字元範圍 (U+0020 到 U+007E) 中可顯示的 Unicode 字元組成，並根據 IDNA 標準進行格式化。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="unicode" /> 無效。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)">
      <summary>將包含 US-ASCII 字元範圍以外之 Unicode 字元的網域名稱標籤子字串編碼。 子字串會轉換成 US-ASCII 字元範圍中可顯示的 Unicode 字元，並根據 IDNA 標準進行格式化。</summary>
      <param name="unicode">要轉換的字串，其包含以標籤分隔符號分隔的一個或多個網域名稱標籤。</param>
      <param name="index">針對 <paramref name="unicode" /> 以零為起始的位移，指定要轉換的子字串起點。 轉換作業會持續到 <paramref name="unicode" /> 字串尾端。</param>
      <returns>由 <paramref name="unicode" /> 和 <paramref name="index" /> 參數指定的子字串的對等用法，以 US-ASCII 字元範圍 (U+0020 到 U+007E) 中可顯示的 Unicode 字元組成，並根據 IDNA 標準進行格式化。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <paramref name="unicode" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="unicode" /> 無效。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)">
      <summary>在包含 US-ASCII 字元範圍以外之 Unicode 字元的網域名稱標籤子字串中，將指定數目的字元編碼。 子字串會轉換成 US-ASCII 字元範圍中可顯示的 Unicode 字元，並根據 IDNA 標準進行格式化。</summary>
      <param name="unicode">要轉換的字串，其包含以標籤分隔符號分隔的一個或多個網域名稱標籤。</param>
      <param name="index">針對 <paramref name="unicode" /> 以零起始的位移，指定子字串起點。</param>
      <param name="count">子字串中要轉換的字元數，此子字串從 <paramref name="index" /> 字串中的 <paramref name="unicode" /> 所指定的位置開始。</param>
      <returns>由 <paramref name="unicode" />、<paramref name="index" /> 和 <paramref name="count" /> 參數指定的子字串對等用法，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中可顯示的 Unicode 字元組成，並根據 IDNA 標準進行格式化。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <paramref name="unicode" /> 的長度。  
-或- 
 <paramref name="index" /> 大於 <paramref name="unicode" /> 減去 <paramref name="count" /> 之後的長度。</exception>
      <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="unicode" /> 無效。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Globalization.IdnMapping" /> 物件的雜湊程式碼。</summary>
      <returns>四個 32 位元帶正負號的常數的其中一個，這些常數是從 <see cref="T:System.Globalization.IdnMapping" /> 物件的屬性衍生。  傳回值沒有特別意義，且不適合在雜湊程式碼演算法中使用。</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String)">
      <summary>將根據 IDNA 標準編碼的一個或多個網域名稱標籤字串解碼為 Unicode 字元字串。</summary>
      <param name="ascii">要解碼的字串，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中一個或多個標籤，根據 IDNA 標準編碼。</param>
      <returns>IDNA 子字串的 Unicode 對等用法，由 <paramref name="ascii" /> 參數指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="ascii" /> 無效。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)">
      <summary>將根據 IDNA 標準編碼的一個或多個網域名稱標籤子字串解碼為 Unicode 字元字串。</summary>
      <param name="ascii">要解碼的字串，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中一個或多個標籤，根據 IDNA 標準編碼。</param>
      <param name="index">針對 <paramref name="ascii" /> 以零為起始的位移，指定要解碼的子字串起點。 解碼作業會持續到 <paramref name="ascii" /> 字串尾端。</param>
      <returns>
        <paramref name="ascii" /> 和 <paramref name="index" /> 參數指定 IDNA 子字串的 Unicode 對等用法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <paramref name="ascii" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="ascii" /> 無效。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)">
      <summary>將根據 IDNA 標準編碼的一個或多個網域名稱標籤的指定長度子字串，解碼為 Unicode 字元字串。</summary>
      <param name="ascii">要解碼的字串，其包含 US-ASCII 字元範圍 (U+0020 到 U+007E) 中一個或多個標籤，根據 IDNA 標準編碼。</param>
      <param name="index">針對 <paramref name="ascii" /> 以零起始的位移，指定子字串起點。</param>
      <param name="count">子字串中要轉換的字元數，此子字串從 <paramref name="ascii" /> 字串中 <paramref name="index" /> 所指定的位置開始。</param>
      <returns>
        <paramref name="ascii" />、<paramref name="index" /> 和 <paramref name="count" /> 參數指定 IDNA 子字串的 Unicode 對等用法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 大於 <paramref name="ascii" /> 的長度。  
-或- 
 <paramref name="index" /> 大於 <paramref name="ascii" /> 減去 <paramref name="count" /> 之後的長度。</exception>
      <exception cref="T:System.ArgumentException">根據 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 屬性以及 IDNA 標準，<paramref name="ascii" /> 無效。</exception>
    </member>
    <member name="P:System.Globalization.IdnMapping.UseStd3AsciiRules">
      <summary>取得或設定值，指出目前 <see cref="T:System.Globalization.IdnMapping" /> 物件成員執行的作業中是否使用標準或寬鬆命名慣例。</summary>
      <returns>如果作業中使用標準命名慣例，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Globalization.ISOWeek">
      <summary>提供靜態成員以便支援 ISO 週日期，這是由國際標準組織 (ISO) 所發行 ISO 8601 日期和時間標準的一部分。</summary>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetWeekOfYear(System.DateTime)">
      <summary>計算指定西曆日期的 ISO 週數。</summary>
      <param name="date">以西曆表示的日期。</param>
      <returns>介於 1 到 53 之間的數字，表示指定西曆日期的 ISO 週數。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetWeeksInYear(System.Int32)">
      <summary>計算所指定 ISO 週編號年中的週數。</summary>
      <param name="year">ISO 週編號年 (另外非正式地稱為 ISO 年)。</param>
      <returns>年中的 ISO 週數。 傳回 52 或 53。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYear(System.DateTime)">
      <summary>計算對應至輸入西曆日期的 ISO 週編號年 (另外非正式地稱為 ISO 年)。</summary>
      <param name="date">以西曆表示的日期。</param>
      <returns>ISO 週編號年，介於 1 到 9999 之間</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYearEnd(System.Int32)">
      <summary>計算週編號年的西曆結束日期。</summary>
      <param name="year">ISO 週編號年 (另外非正式地稱為 ISO 年)。</param>
      <returns>週編號年的西曆結束日期。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYearStart(System.Int32)">
      <summary>計算週編號年的西曆開始日期。</summary>
      <param name="year">ISO 週編號年 (另外非正式地稱為 ISO 年)。</param>
      <returns>週編號年的西曆開始日期。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.ToDateTime(System.Int32,System.Int32,System.DayOfWeek)">
      <summary>將以所指定 ISO 年、週數和星期幾表示的 ISO 週日期，對應至對等的西曆日期。</summary>
      <param name="year">ISO 週編號年 (另外非正式地稱為 ISO 年)。</param>
      <param name="week">所指定 ISO 週編號年中的 ISO 週數。</param>
      <param name="dayOfWeek">所指定 ISO 週內的星期幾。</param>
      <returns>相當於輸入 ISO 週日期的西曆日期。</returns>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
      <summary>代表日本曆法。</summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.JapaneseCalendar" /> 類別的新執行個體。</summary>
      <exception cref="T:System.TypeInitializationException">由於缺少文化特性資訊，無法初始化 <see cref="T:System.Globalization.JapaneseCalendar" /> 物件。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。  
-或- 
 <paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在 <see cref="T:System.Globalization.JapaneseCalendar" /> 型別支援的範圍之外。  
-或- 
 <paramref name="years" /> 小於 -10,000 或大於 10,000。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.JapaneseCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.JapaneseCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 366 的整數，表示指定之 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的紀元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.JapaneseCalendar" /> 型別不支援閏月的概念。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在 <see cref="T:System.Globalization.JapaneseCalendar" /> 型別支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>傳回值一定是 12。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，表示一週的第一天。</param>
      <returns>從 1 起始的整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。  
-或- 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日子是閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>這個方法永遠傳回 <see langword="false" />，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份是閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime">
      <summary>取得受目前 <see cref="T:System.Globalization.JapaneseCalendar" /> 物件所支援的最晚日期和時間。</summary>
      <returns>此<see cref="T:System.Globalization.JapaneseCalendar" />類型所支援的最晚日期和時間, 相當於西元9999年12月31日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime">
      <summary>取得受目前 <see cref="T:System.Globalization.JapaneseCalendar" /> 物件所支援的最早日期和時間。</summary>
      <returns>此<see cref="T:System.Globalization.JapaneseCalendar" />類型所支援的最早日期和時間, 相當於西元1868年9月8日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">表示要轉換年份的整數 (通常是兩位數)。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值小於 99。  
-或- 
在設定作業中指定的值大於 8011 (或 <see langword="MaxSupportedDateTime.Year" />)。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.JapaneseLunisolarCalendar">
      <summary>表示劃分的時間，例如月、日和年。 年份的計算方式與日本曆法相同，而日期與月份則是使用陰陽曆計算。</summary>
    </member>
    <member name="M:System.Globalization.JapaneseLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>取得 <see cref="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime" /> 屬性指定之年的前一年的天數。</summary>
      <returns>
        <see cref="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime" /> 指定之年的前一年的天數。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.Eras">
      <summary>取得與 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 物件相關的紀元。</summary>
      <returns>32 位元帶正負號整數的陣列，指定相關的紀元。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseLunisolarCalendar.GetEra(System.DateTime)">
      <summary>擷取對應於指定的 <see cref="T:System.DateTime" /> 之紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示 <paramref name="time" /> 參數中指定的紀元。</returns>
    </member>
    <member name="F:System.Globalization.JapaneseLunisolarCalendar.JapaneseEra">
      <summary>指定目前的紀元。</summary>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 類別所支援的日期和時間的最大值。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseLunisolarCalendar" />類別所支援的最晚日期和時間, 相當於西元2050年1月22日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 類別所支援的日期和時間的最小值。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseLunisolarCalendar" />類別所支援的最早日期和時間, 相當於西元1960年1月28日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="T:System.Globalization.JulianCalendar">
      <summary>代表凱撒曆法。</summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.JulianCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。  
-或- 
 <paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.JulianCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.JulianCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.JulianCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.JulianCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 31 的整數，表示 <paramref name="time" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示 <paramref name="time" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 366 的整數，表示 <paramref name="time" /> 中年份的日期。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>表示 <paramref name="time" /> 中紀元的整數。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>正整數，指出在指定的年份及紀元中的閏月。 如果曆法不支援閏月，或 <paramref name="year" /> 和 <paramref name="era" /> 未指定閏年，則這個方法也會傳回零。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 12 的整數，表示 <paramref name="time" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>表示 <paramref name="time" /> 中年份的整數。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>這個方法永遠傳回 <see langword="false" />，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="F:System.Globalization.JulianCalendar.JulianEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="P:System.Globalization.JulianCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.JulianCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.JulianCalendar" />類別所支援的最晚日期和時間, 相當於西元9999年12月31日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.JulianCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.JulianCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.JulianCalendar" />類別所支援的最早日期和時間, 相當於西元0001年1月1日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.JulianCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.JulianCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值小於 99。  
-或- 
在設定作業中指定的值大於 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
      <summary>表示韓國曆法。</summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.KoreanCalendar" /> 類別的新執行個體。</summary>
      <exception cref="T:System.TypeInitializationException">由於缺少文化特性資訊，無法初始化 <see cref="T:System.Globalization.KoreanCalendar" /> 物件。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。  
-或- 
 <paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 或 <paramref name="time" /> 超出範圍。</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.KoreanCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.KoreanCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 366 的整數，表示指定之 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.KoreanCalendar" /> 類別不支援閏月的概念。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，表示一週的第一天。</param>
      <returns>從 1 起始的整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。  
-或- 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>這個方法永遠傳回 <see langword="false" />，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.KoreanCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanCalendar" />類別所支援的最晚日期和時間, 相當於西元9999年12月31日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.KoreanCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanCalendar" />類別所支援的最早日期和時間, 相當於西元0001年1月1日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值小於 99。  
-或- 
在設定作業中指定的值大於 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.KoreanLunisolarCalendar">
      <summary>表示劃分的時間，例如月、日和年。 年份是使用西曆計算，而日期和月份則是使用陰陽曆計算。</summary>
    </member>
    <member name="M:System.Globalization.KoreanLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>取得 <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> 屬性指定之年的前一年的天數。</summary>
      <returns>
        <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> 指定之年的前一年的天數。</returns>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.Eras">
      <summary>取得對應至目前 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 物件所支援之日期與時間範圍的紀元。</summary>
      <returns>32 位元帶正負號整數的陣列，指定相關的紀元。 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 物件的傳回值永遠是包含一個與 <see cref="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra" /> 值相等項目的陣列。</returns>
    </member>
    <member name="M:System.Globalization.KoreanLunisolarCalendar.GetEra(System.DateTime)">
      <summary>擷取對應於指定的 <see cref="T:System.DateTime" /> 之紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示 <paramref name="time" /> 參數指定的紀元。 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 物件的傳回值一定是 <see cref="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 表示日期和時間小於 <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.KoreanLunisolarCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra">
      <summary>指定對應到目前 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 物件的西元。</summary>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 類別所支援的日期和時間的最大值。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanLunisolarCalendar" />類別所支援的最晚日期和時間, 相當於西元2051年2月10日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 類別所支援的日期和時間的最小值。</summary>
      <returns>取得 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 類別所支援的最早日期和時間。</returns>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>提供文化特性特定的格式和剖析數值資訊。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>初始化與文化特性無關 (不因文化特性而異) 之 <see cref="T:System.Globalization.NumberFormatInfo" /> 類別的可寫入新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>建立 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件的淺層複本 (Shallow Copy)。</summary>
      <returns>從原始 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件複製的新物件。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>取得或設定要在貨幣值中使用的小數位數。</summary>
      <returns>要在貨幣值中使用的小數位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>取得或設定要做為貨幣值中小數分隔符號的字串。</summary>
      <returns>要做為貨幣值中小數分隔符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">正在將屬性設定為空字串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>取得或設定分隔貨幣值中小數點左邊數字群組的字串。</summary>
      <returns>分隔貨幣值中小數點左邊數字群組的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>取得或設定貨幣值內小數點左邊數字的各個群組中的位數。</summary>
      <returns>貨幣值內小數點左邊數字的各個群組中的位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個項目 (已設定為 3) 的一維陣列。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">將設定此屬性，且此陣列包含小於 0 或大於 9 的項目。  
 -或-  
 將設定此屬性，且此陣列除了最後一個項目之外包含一個項目，此項目會設定為 0。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>取得或設定負數貨幣值的格式模式。</summary>
      <returns>負數貨幣值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "($n)"；其中 "$" 為 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，而 <paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 15 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>取得或設定正數貨幣值的格式模式。</summary>
      <returns>正數貨幣值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "$n"，其中 "$" 為 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，而 <paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>取得或設定要做為貨幣符號的字串。</summary>
      <returns>要做為貨幣符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "¤"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>取得根據目前文化特性格式化值的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" />。</summary>
      <returns>根據目前執行緒文化特性的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.DigitSubstitution">
      <summary>取得或設定數值，指定圖形使用者介面顯示數字圖案的方式。</summary>
      <returns>列舉值之一，指定文化特性特定的數字形狀。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">設定作業中的值不是有效的 <see cref="T:System.Globalization.DigitShapes" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>取得指定類型的物件，以提供數字格式化服務。</summary>
      <param name="formatType">必要格式服務的 <see cref="T:System.Type" />。</param>
      <returns>如果 <paramref name="formatType" /> 與目前 <see cref="T:System.Globalization.NumberFormatInfo" /> 的類型相同，則為目前的 <see cref="T:System.Globalization.NumberFormatInfo" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>取得與指定的 <see cref="T:System.Globalization.NumberFormatInfo" /> 相關聯的 <see cref="T:System.IFormatProvider" />。</summary>
      <param name="formatProvider">
        <see cref="T:System.IFormatProvider" />，用來取得 <see cref="T:System.Globalization.NumberFormatInfo" />。  
-或- 
 若要取得<see langword="null" /> ，則為 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" />。</param>
      <returns>與指定 <see cref="T:System.Globalization.NumberFormatInfo" /> 相關聯的 <see cref="T:System.IFormatProvider" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>取得與文化特性無關 (非變異) 的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件。</summary>
      <returns>與文化特性無關 (非變異) 的唯讀物件。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>取得值，表示這個 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是否為唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Globalization.NumberFormatInfo" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>取得或設定代表 IEEE NaN (Not a Number) 值的字串。</summary>
      <returns>代表 IEEE NaN (Not a Number) 值的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "NaN"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NativeDigits">
      <summary>取得或設定字串陣列，其中包含對等於西方數字 0 到 9 之當地慣用的數字。</summary>
      <returns>字串陣列，其中包含對等於西方數字 0 到 9 之當地慣用的數字。 預設值是具有項目 "0"、"1"、"2"、"3"、"4"、"5"、"6"、"7"、"8" 和 "9" 的陣列。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。  
-或- 
在設定作業中，數值陣列的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">在設定作業中，數值陣列不包含 10 個項目。  
-或- 
在設定作業中，數值陣列項目不包含單一的 <see cref="T:System.Char" /> 物件，或由 Surrogate 字組組成的一對 <see cref="T:System.Char" /> 物件。  
-或- 
在設定作業中，數值陣列項目與由 Unicode 標準所定義的數字不同。 亦即，陣列項目中的數字沒有 Unicode <see langword="Number, Decimal Digit" /> (Nd) 一般類別值。  
-或- 
在設定作業中，數值陣列的項目數值不符合陣列中項目的位置。 亦即，位於索引 0 的項目，即陣列的第一個項目，沒有數值 0；或是位於索引 1 的項目，沒有數值 1。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>取得或設定代表負無限大的字串。</summary>
      <returns>字串，代表負無限大。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "-Infinity"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>取得或設定代表相關數字為負數的字串。</summary>
      <returns>代表相關數字為負數的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "-"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>取得或設定要在數值中使用的小數位數。</summary>
      <returns>要在數值中使用的小數位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>取得或設定要做為數值中小數分隔符號的字串。</summary>
      <returns>要做為數值中小數分隔符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">正在將屬性設定為空字串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>取得或設定分隔數值中小數點左邊數字群組的字串。</summary>
      <returns>分隔數值中小數點左邊數字群組的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>取得或設定數值內小數點左邊數字的各個群組中的位數。</summary>
      <returns>數值內小數點左邊數字的各個群組中的位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個項目 (已設定為 3) 的一維陣列。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">將設定此屬性，且此陣列包含小於 0 或大於 9 的項目。  
 -或-  
 將設定此屬性，且此陣列除了最後一個項目之外包含一個項目，此項目會設定為 0。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>取得或設定負數值的格式模式。</summary>
      <returns>負數值的格式模式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 4 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>取得或設定要在百分比值中使用的小數位數。</summary>
      <returns>要在百分比值中使用的小數位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>取得或設定要做為百分比值中小數分隔符號使用的字串。</summary>
      <returns>要做為百分比值中小數分隔符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">正在將屬性設定為空字串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>取得或設定百分比值中分隔小數點左邊數字群組的字串。</summary>
      <returns>百分比值中分隔小數點左邊數字群組的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>取得或設定百分比值內小數點左邊數字的各個群組中的位數。</summary>
      <returns>百分比值內小數點左邊數字的各個群組中的位數。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個項目 (已設定為 3) 的一維陣列。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">將設定此屬性，且此陣列包含小於 0 或大於 9 的項目。  
 -或-  
 將設定此屬性，且此陣列除了最後一個項目之外包含一個項目，此項目會設定為 0。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>取得或設定負數百分比值的格式模式。</summary>
      <returns>負數百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "-n %"，其中 "%" 為 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，而 <paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 11 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>取得或設定正數百分比值的格式模式。</summary>
      <returns>正數百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，代表 "n %"，其中 "%" 為 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，而 <paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性已設定為小於 0 或大於 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>取得或設定要當做百分比符號的字串。</summary>
      <returns>要當做百分比符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "%"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>取得或設定要當做千分之一符號的字串。</summary>
      <returns>要當做千分之一符號的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "‰"，也就是 Unicode 字元 U+2030。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>取得或設定代表正無限大的字串。</summary>
      <returns>代表正無限大的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "Infinity"。</returns>
      <exception cref="T:System.ArgumentNullException">正在將屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>取得或設定用來表示相關數字為正數的字串。</summary>
      <returns>用來表示相關數字為正數的字串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "+"。</returns>
      <exception cref="T:System.ArgumentNullException">在 set 作業中，要指派的值小於 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件為唯讀。</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>傳回唯讀的 <see cref="T:System.Globalization.NumberFormatInfo" /> 包裝函式。</summary>
      <param name="nfi">要包裝的 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
      <returns>
        <paramref name="nfi" /> 的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 包裝函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nfi" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>決定數值字串引數中允許的樣式，這些引數是傳遞給整數及浮點數值型別的 <see langword="Parse" /> 和 <see langword="TryParse" /> 方法。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>指出數字字串是否可以包含貨幣符號。 有效貨幣符號是由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 屬性來決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>指示數值字串可以有小數點。 如果 <see cref="T:System.Globalization.NumberStyles" /> 值包含 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 旗標，且剖析的值包含貨幣符號，則十進位分隔符號字元由<see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> 屬性決定。 否則，小數分隔符號字元是由 <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>指示數值字串可以採用指數標記法。 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 旗標允許剖析的字串包含以 "E" 或 "e" 字元開頭，後面跟著選擇性正負號和整數的指數。 換句話說，它能成功剖析 nnnExx、nnnE+xx 和 nnnE-xx 形式的字串。 它不允許有效數字或尾數中的小數分隔符號或正負號。為了要讓字串中的這些項目得以剖析，請使用 <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 旗標，或是使用包含這些個別旗標的複合樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>指示數值字串會表示十六進位值。 有效十六進位值包括數值位數 0-9 和十六進位位數 A-F 和 a-f， 使用這個樣式剖析的字串不能在前面加上 "0x" 或 &amp;h"。 使用 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 樣式剖析的字串一定會解譯為十六進位值。 其他可合併的旗標僅限 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />。 <see cref="T:System.Globalization.NumberStyles" /> 列舉包含 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 複合樣式，此樣式是由這三個旗標所組成。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>指示數值字串可以有前置正負號。 有效前置正負號字元是由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>表示前置空白字元可以出現在剖析的字串中。 有效泛空白字元有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。 請注意，這是字元的子集，<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法會針對此子集傳回 <see langword="true" />。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>指示數值字串可以有一對括住數字的括弧。 括號表示要剖析的字串代表負數。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>表示數值字串可以有群組分隔符號 (例如，隔開百位與千位的符號)。 如果 <see cref="T:System.Globalization.NumberStyles" /> 值包含 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 旗標，且要剖析的字串包含貨幣符號，則有效群組分隔符號字元由<see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> 屬性決定，且每個群組中的位數由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> 屬性決定。 否則，有效群組分隔符號字元是由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> 屬性所決定，而每個群組中的位數則由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>指示數值字串可以有尾端正負號。 有效尾端正負號字元由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 屬性所決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>表示尾端空白字元可以出現在剖析的字串中。 有效泛空白字元有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。 請注意，這是字元的子集，<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法會針對此子集傳回 <see langword="true" />。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>指示使用除了 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 之外的所有樣式。 這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>指示使用除了 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 之外的所有樣式。 這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 樣式。 這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 樣式。 這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 樣式。 這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>表示剖析的字串中不可出現樣式元素，例如前置或尾端空白、千分位分隔符號或十分位分隔符號。 要剖析的字串必須只能由整數位數和小數位數組成。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 樣式。 這是複合的數字樣式。</summary>
    </member>
    <member name="T:System.Globalization.PersianCalendar">
      <summary>代表波斯曆。</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.PersianCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回 <see cref="T:System.DateTime" /> 物件，這個物件與指定之 <see cref="T:System.DateTime" /> 物件相差指定月數。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的正或負月數。</param>
      <returns>
        <see cref="T:System.DateTime" /> 物件，代表將由 <paramref name="months" /> 參數指定的月數加入至由 <paramref name="time" /> 參數指定的日期所產生的日期。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120,000 或大於 120,000。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回 <see cref="T:System.DateTime" /> 物件，這個物件與所指定 <see cref="T:System.DateTime" /> 物件相差指定的年數。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的正或負年份。</param>
      <returns>
        <see cref="T:System.DateTime" /> 物件，由將指定的年份加入指定的 <see cref="T:System.DateTime" /> 物件所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 小於 -10,000 或大於 10,000。</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.AlgorithmType">
      <summary>取得值，表示目前的曆法是以陽曆為主、以陰曆為主，或以陰陽曆為主。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.PersianCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.PersianCalendar" /> 物件中的紀元清單。</summary>
      <returns>整數陣列，代表 <see cref="T:System.Globalization.PersianCalendar" /> 物件中的紀元。 陣列是由值為 <see cref="F:System.Globalization.PersianCalendar.PersianEra" /> 的單一項目組成。</returns>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 物件中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 的整數，表示指定之 <see cref="T:System.DateTime" /> 物件中月份的日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 參數表示小於 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 物件中一週的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示指定之 <see cref="T:System.DateTime" /> 物件中一週的日期。</returns>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 物件中年份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 366 的整數，表示指定之 <see cref="T:System.DateTime" /> 物件中年份的日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 參數表示小於 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回指定年份和紀元之指定月份中的天數。</summary>
      <param name="year">從 1 到 9378 的整數，表示年份。</param>
      <param name="month">整數，表示月份，如果 <paramref name="year" /> 不是 9378，則範圍為 1 到 12，如果 <paramref name="year" /> 是 9378，則範圍為 1 到 10。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>指定的年份與紀元中指定月份的天數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在這個日曆支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">從 1 到 9378 的整數，表示年份。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>指定年份和紀元中的天數。 一般年份有 365 天，閏年有 366 天。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 物件中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>一律傳回 <see cref="F:System.Globalization.PersianCalendar.PersianEra" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 參數表示小於 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>傳回指定之年份和紀元的閏月。</summary>
      <param name="year">1 到 9378 的整數，表示要轉換的年份。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>傳回值一定是 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 物件中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 的整數，表示指定之 <see cref="T:System.DateTime" /> 物件中的月份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 參數表示小於 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">從 1 到 9378 的整數，表示年份。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>如果 <paramref name="year" /> 參數是 9378，則傳回 10，否則永遠傳回 12。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 物件中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 9378 的整數，表示所指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 參數表示小於 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定的日期是否為閏日。</summary>
      <param name="year">從 1 到 9378 的整數，表示年份。</param>
      <param name="month">整數，表示月份，如果 <paramref name="year" /> 不是 9378，則範圍為 1 到 12，如果 <paramref name="year" /> 是 9378，則範圍為 1 到 10。</param>
      <param name="day">1 到 31 的整數，表示日期。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 在這個曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定年份和紀元中的指定月份是否為閏月。</summary>
      <param name="year">從 1 到 9378 的整數，表示年份。</param>
      <param name="month">整數，表示月份，如果 <paramref name="year" /> 不是 9378，則範圍為 1 到 12，如果 <paramref name="year" /> 是 9378，則範圍為 1 到 10。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>因為 <see langword="false" /> 類別不支援閏月的概念，所以一律會傳回 <see cref="T:System.Globalization.PersianCalendar" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在這個日曆支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">從 1 到 9378 的整數，表示年份。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.PersianCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>取得 <see cref="T:System.Globalization.PersianCalendar" /> 類別所支援的最晚日期和時間。</returns>
    </member>
    <member name="P:System.Globalization.PersianCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.PersianCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>取得 <see cref="T:System.Globalization.PersianCalendar" /> 類別所支援的最早日期和時間。</returns>
    </member>
    <member name="F:System.Globalization.PersianCalendar.PersianEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回設定為指定日期、時間和紀元的 <see cref="T:System.DateTime" /> 物件。</summary>
      <param name="year">從 1 到 9378 的整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">1 到 31 的整數，表示日期。</param>
      <param name="hour">0 到 23 的整數，表示小時。</param>
      <param name="minute">0 到 59 的整數，表示分鐘。</param>
      <param name="second">0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">0 到 999 的整數，表示毫秒。</param>
      <param name="era">從 0 到 1 的整數，表示紀元。</param>
      <returns>設定為目前紀元中所指定日期和時間的 <see cref="T:System.DateTime" /> 物件。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、<paramref name="millisecond" /> 或 <paramref name="era" /> 在這個曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為四位數年份表示。</summary>
      <param name="year">1 到 9378 的整數，表示要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 0 或大於 9378。</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">這個曆法是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於 100 或大於 9378。</exception>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>包含關於國家/地區的資訊。</summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.Int32)">
      <summary>根據與指定文化特性識別項相關的國家/地區，初始化 <see cref="T:System.Globalization.RegionInfo" /> 類別的新執行個體。</summary>
      <param name="culture">文化特性識別項。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="culture" /> 指定不變、自訂或中性文化特性。</exception>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>根據由名稱指定的國家/地區或特定文化特性，初始化 <see cref="T:System.Globalization.RegionInfo" /> 類別的新執行個體。</summary>
      <param name="name">字串，包含 ISO 3166 中針對國家/地區定義的兩個字母代碼。  
 -或-  
 包含特定文化特性、自訂文化特性或 Windows 專用文化特性之文化特性名稱的字串。 如果文化特性名稱的格式不是 RFC 4646，則應用程式應該會指定整個文化特性名稱，而不單是國家/地區。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的國家/地區名稱或特定文化特性名稱。</exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencyEnglishName">
      <summary>取得國家/地區中使用的貨幣名稱 (以英文表示)。</summary>
      <returns>國家/地區中使用的貨幣名稱 (以英文表示)。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencyNativeName">
      <summary>取得國家/地區中使用的貨幣名稱 (以國家/地區的母語格式表示)。</summary>
      <returns>國家/地區中使用之貨幣的原生名稱 (以與 ISO 3166 國家/地區碼相關聯的語言格式表示)。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>取得與國家/地區相關的貨幣符號。</summary>
      <returns>與國家/地區相關的貨幣符號。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>取得 <see cref="T:System.Globalization.RegionInfo" />，表示目前執行緒所使用的國家/地區。</summary>
      <returns>
        <see cref="T:System.Globalization.RegionInfo" />，表示目前執行緒所使用的國家/地區。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>以 .NET Framework 當地語系化版本的語言，取得國家/地區的完整名稱。</summary>
      <returns>.NET Framework 當地語系化版本語言之國家/地區的完整名稱。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>取得國家/地區的完整英文名稱。</summary>
      <returns>國家/地區的完整英文名稱。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>判斷指定物件與目前 <see cref="T:System.Globalization.RegionInfo" /> 是否為相同的執行個體。</summary>
      <param name="value">要與目前 <see cref="T:System.Globalization.RegionInfo" /> 比較的物件。</param>
      <returns>如果 <paramref name="value" /> 參數是 <see cref="T:System.Globalization.RegionInfo" /> 物件，而且其 <see cref="P:System.Globalization.RegionInfo.Name" /> 屬性同於目前 <see cref="P:System.Globalization.RegionInfo.Name" /> 物件的 <see cref="T:System.Globalization.RegionInfo" /> 屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.GeoId">
      <summary>取得地區、國家、縣市或位置的唯一識別碼。</summary>
      <returns>32 位元帶正負號的數字，專門識別地理位置。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.RegionInfo" /> 的雜湊函式，適合於雜湊演算法和資料結構 (如雜湊資料表)。</summary>
      <returns>目前 <see cref="T:System.Globalization.RegionInfo" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>取得值，指出國家/地區是否使用公制系統為度量。</summary>
      <returns>如果國家/地區使用公制系統為度量，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>取得與國家/地區相關的三個字元的 ISO 4217 貨幣符號。</summary>
      <returns>與國家/地區相關的三個字元的 ISO 4217 貨幣符號。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>取得目前 <see cref="T:System.Globalization.RegionInfo" /> 物件的名稱或 ISO 3166 兩個字母國家/地區代碼。</summary>
      <returns>由 <see cref="M:System.Globalization.RegionInfo.#ctor(System.String)" /> 建構函式的 <paramref name="name" /> 參數所指定的值。 傳回值是以大寫表示。  
-或- 
ISO 3166 中針對由 <see cref="M:System.Globalization.RegionInfo.#ctor(System.Int32)" /> 建構函式的 <paramref name="culture" /> 參數所指定的國家/地區，而定義的兩個字母代碼。 傳回值是以大寫表示。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
      <summary>取得國家/地區的名稱 (以國家/地區的母語格式表示)。</summary>
      <returns>國家/地區的原生名稱 (以與 ISO 3166 國家/地區碼相關聯的語言格式表示)。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterISORegionName">
      <summary>取得國家/地區定義於 ISO 3166 中的三個字母代碼。</summary>
      <returns>國家/地區的定義於 ISO 3166 中的三個字母代碼。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName">
      <summary>取得 Windows 指派給由這個 <see cref="T:System.Globalization.RegionInfo" /> 代表之國家/地區的三個字母代碼。</summary>
      <returns>Windows 指派給由這個 <see cref="T:System.Globalization.RegionInfo" /> 代表之國家/地區的三個字母代碼。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>傳回字串，其中包含針對目前 <see cref="T:System.Globalization.RegionInfo" /> 所指定的文化特性名稱或 ISO 3166 兩個字母國家/地區代碼。</summary>
      <returns>字串，包含針對目前 <see cref="T:System.Globalization.RegionInfo" /> 定義的文化特性名稱或 ISO 3166 兩個字母國家/地區代碼。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>取得國家/地區定義於 ISO 3166 中的兩個字母代碼。</summary>
      <returns>國家/地區定義於 ISO 3166 中的兩個字母代碼。</returns>
    </member>
    <member name="T:System.Globalization.SortKey">
      <summary>表示將字串對應至其排序鍵的結果。</summary>
    </member>
    <member name="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)">
      <summary>比較兩個排序鍵。</summary>
      <param name="sortkey1">要比較的第一個排序鍵。</param>
      <param name="sortkey2">要比較的第二個排序鍵。</param>
      <returns>帶正負號的整數，表示 <paramref name="sortkey1" /> 與 <paramref name="sortkey2" /> 之間的關聯性。  
  值 
  條件 
  小於零 
 <paramref name="sortkey1" /> 小於 <paramref name="sortkey2" />。  

  零 
 <paramref name="sortkey1" /> 等於 <paramref name="sortkey2" />。  

  大於零 
 <paramref name="sortkey1" /> 大於 <paramref name="sortkey2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortkey1" /> 或 <paramref name="sortkey2" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.SortKey.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的 <see cref="T:System.Globalization.SortKey" /> 物件。</summary>
      <param name="value">要與目前 <see cref="T:System.Globalization.SortKey" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="value" /> 參數等於目前的 <see cref="T:System.Globalization.SortKey" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.SortKey.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.SortKey" /> 物件的雜湊函式，亦即適用於雜湊演算法和資料結構 (如雜湊表)。</summary>
      <returns>目前 <see cref="T:System.Globalization.SortKey" /> 物件的雜湊碼。</returns>
    </member>
    <member name="P:System.Globalization.SortKey.KeyData">
      <summary>取得表示目前 <see cref="T:System.Globalization.SortKey" /> 物件的位元組陣列。</summary>
      <returns>表示目前 <see cref="T:System.Globalization.SortKey" /> 物件的位元組陣列。</returns>
    </member>
    <member name="P:System.Globalization.SortKey.OriginalString">
      <summary>取得用來建立目前 <see cref="T:System.Globalization.SortKey" /> 物件的原始字串。</summary>
      <returns>用以建立目前 <see cref="T:System.Globalization.SortKey" /> 物件的原始字串。</returns>
    </member>
    <member name="M:System.Globalization.SortKey.ToString">
      <summary>傳回表示目前 <see cref="T:System.Globalization.SortKey" /> 物件的字串。</summary>
      <returns>代表目前 <see cref="T:System.Globalization.SortKey" /> 物件的字串。</returns>
    </member>
    <member name="T:System.Globalization.SortVersion">
      <summary>提供用於比較和排序字串之 Unicode 版本的相關資訊。</summary>
    </member>
    <member name="M:System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)">
      <summary>建立 <see cref="T:System.Globalization.SortVersion" /> 類別的新執行個體。</summary>
      <param name="fullVersion">版本號碼。</param>
      <param name="sortId">排序 ID。</param>
    </member>
    <member name="M:System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)">
      <summary>傳回值，指出這個 <see cref="T:System.Globalization.SortVersion" /> 執行個體是否等於指定的 <see cref="T:System.Globalization.SortVersion" /> 物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="other" /> 表示的版本與這個執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.Equals(System.Object)">
      <summary>傳回值，指出這個 <see cref="T:System.Globalization.SortVersion" /> 執行個體是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 是表示與這個執行個體版本相同的 <see cref="T:System.Globalization.SortVersion" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.SortVersion.FullVersion">
      <summary>取得 <see cref="T:System.Globalization.SortVersion" /> 物件的完整版本號碼。</summary>
      <returns>這個 <see cref="T:System.Globalization.SortVersion" /> 物件的版本號碼。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)">
      <summary>表示兩個 <see cref="T:System.Globalization.SortVersion" /> 執行個體是否相等。</summary>
      <param name="left">要比較的第一個執行個體。</param>
      <param name="right">要比較的第二個執行個體。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)">
      <summary>表示兩個 <see cref="T:System.Globalization.SortVersion" /> 執行個體是否不相等。</summary>
      <param name="left">要比較的第一個執行個體。</param>
      <param name="right">要比較的第二個執行個體。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.SortVersion.SortId">
      <summary>取得這個 <see cref="T:System.Globalization.SortVersion" /> 物件的全域唯一識別項。</summary>
      <returns>此 <see cref="T:System.Globalization.SortVersion" /> 物件的全域唯一識別項。</returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>提供將字串分隔為文字項目並逐一查看那些文字項目的功能。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.StringInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
      <summary>將 <see cref="T:System.Globalization.StringInfo" /> 類別的新執行個體 (Instance) 初始化為指定的字串。</summary>
      <param name="value">用來初始化這個 <see cref="T:System.Globalization.StringInfo" /> 物件的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
      <summary>指示目前的 <see cref="T:System.Globalization.StringInfo" /> 物件是否等於指定的物件。</summary>
      <param name="value">物件。</param>
      <returns>如果 <paramref name="value" /> 參數是 <see cref="T:System.Globalization.StringInfo" /> 物件，而且其 <see cref="P:System.Globalization.StringInfo.String" /> 屬性等於這個 <see cref="P:System.Globalization.StringInfo.String" /> 物件的 <see cref="T:System.Globalization.StringInfo" /> 屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
      <summary>計算目前 <see cref="T:System.Globalization.StringInfo" /> 物件值的雜湊碼。</summary>
      <returns>以這個 <see cref="T:System.Globalization.StringInfo" /> 物件的字串值為基礎的 32 位元帶正負號的整數 (Signed Integer) 的雜湊碼。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>取得指定字串中的第一個文字項目。</summary>
      <param name="str">要從其中取得文字項目的字串。</param>
      <returns>含有指定字串中第一個文字項目的字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>取得在指定字串中指定索引處的文字項目。</summary>
      <param name="str">要從其中取得文字項目的字串。</param>
      <param name="index">文字項目開始處的以零起始的索引。</param>
      <returns>含有指定字串中指定索引處的文字項目的字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="str" /> 的有效索引範圍。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>傳回可以逐一查看整個字串文字項目的列舉值。</summary>
      <param name="str">要逐一查看的字串。</param>
      <returns>整個字串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>傳回可以從指定索引處開始來逐一查看字串文字項目的列舉值。</summary>
      <param name="str">要逐一查看的字串。</param>
      <param name="index">要從該處開始反覆查看之以零起始的索引。</param>
      <returns>起始於 <paramref name="index" /> 之字串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="str" /> 的有效索引範圍。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
      <summary>取得目前 <see cref="T:System.Globalization.StringInfo" /> 物件中的文字元素數目。</summary>
      <returns>這個 <see cref="T:System.Globalization.StringInfo" /> 物件中的基底字元、Surrogate 字組及組合字元序列數目。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>傳回所指定字串內各個基底字元、高 Surrogate 或控制字元的索引。</summary>
      <param name="str">要搜尋的字串。</param>
      <returns>整數陣列，包含所指定字串內各個基底字元、高 Surrogate 或控制字元的以零起始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
      <summary>取得或設定目前 <see cref="T:System.Globalization.StringInfo" /> 物件的值。</summary>
      <returns>做為目前 <see cref="T:System.Globalization.StringInfo" /> 物件值的字串。</returns>
      <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
      <summary>在目前的 <see cref="T:System.Globalization.StringInfo" /> 物件中擷取文字項目的子字串，範圍從指定的文字項目開始，一直持續到最後一個文字項目。</summary>
      <param name="startingTextElement">
        <see cref="T:System.Globalization.StringInfo" /> 物件中文字項目之以零為起始的索引。</param>
      <returns>這個 <see cref="T:System.Globalization.StringInfo" /> 物件中的文字項目的子字串，範圍從 <paramref name="startingTextElement" /> 參數指定的文字項目索引開始，一直持續到這個物件中的最後一個文字項目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startingTextElement" /> 小於零。  
-或- 
做為目前 <see cref="T:System.Globalization.StringInfo" /> 物件值的字串是空字串 ("")。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
      <summary>在目前 <see cref="T:System.Globalization.StringInfo" /> 物件中擷取文字項目的子字串，範圍從指定的文字項目開始，一直持續到指定的文字項目數目。</summary>
      <param name="startingTextElement">
        <see cref="T:System.Globalization.StringInfo" /> 物件中文字項目之以零為起始的索引。</param>
      <param name="lengthInTextElements">要擷取的文字項目數目。</param>
      <returns>這個 <see cref="T:System.Globalization.StringInfo" /> 物件中的文字項目的子字串。 子字串由 <paramref name="lengthInTextElements" /> 參數所指定的文字項目數目所組成，而且從 <paramref name="startingTextElement" /> 參數所指定的文字項目索引開始。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startingTextElement" /> 小於零。  
-或- 
 <paramref name="startingTextElement" /> 大於或等於字串的長度，這個字串就是目前 <see cref="T:System.Globalization.StringInfo" /> 物件的值。  
-或- 
 <paramref name="lengthInTextElements" /> 小於零。  
-或- 
做為目前 <see cref="T:System.Globalization.StringInfo" /> 物件值的字串是空字串 ("")。  
-或- 
 <paramref name="startingTextElement" /> + <paramref name="lengthInTextElements" /> 指定一個索引，其大於這個 <see cref="T:System.Globalization.StringInfo" /> 物件中的文字項目數目。</exception>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
      <summary>台灣曆法。</summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別的新執行個體。</summary>
      <exception cref="T:System.TypeInitializationException">由於缺少文化特性資訊，無法初始化 <see cref="T:System.Globalization.TaiwanCalendar" /> 物件。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。  
-或- 
 <paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.TaiwanCalendar" /> 中的紀元清單。</summary>
      <returns>陣列，由值永遠為目前紀元的單一元素組成。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 366 的整數，表示指定之 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別不支援閏月的概念。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，表示一週的第一天。</param>
      <returns>正整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。  
-或- 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>這個方法永遠傳回 <see langword="false" />，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanCalendar" />類別所支援的最晚日期和時間, 相當於西元9999年12月31日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanCalendar" />類別所支援的最早日期和時間, 相當於西元1912年1月1日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值小於 99。  
-或- 
在設定作業中指定的值大於 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.TaiwanLunisolarCalendar">
      <summary>表示台灣使用的陰陽曆。 和台灣使用的曆法相同，使用西曆計算年份，而日期和月份則使用陰陽曆計算。</summary>
    </member>
    <member name="M:System.Globalization.TaiwanLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>取得 <see cref="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime" /> 屬性指定之年的前一年的天數。</summary>
      <returns>
        <see cref="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime" /> 指定之年的前一年的天數。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.Eras">
      <summary>取得與目前 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 物件相關的紀元。</summary>
      <returns>陣列，由值永遠為目前紀元的單一元素組成。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanLunisolarCalendar.GetEra(System.DateTime)">
      <summary>擷取對應於指定的 <see cref="T:System.DateTime" /> 之紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示 <paramref name="time" /> 參數中指定的紀元。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 類別所支援的日期和時間的最大值。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanLunisolarCalendar" />類別所支援的最晚日期和時間, 相當於西元2051年2月10日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 類別所支援的日期和時間的最小值。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanLunisolarCalendar" />類別所支援的最早日期和時間, 相當於西元1912年2月18日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>列舉字串的文字項目。</summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>取得字串中目前的文字項目。</summary>
      <returns>含有字串中目前文字項目的物件。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值位於字串的第一個文字項目之前，或最後一個文字項目之後。</exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>取得列舉值目前所位在的文字項目的索引。</summary>
      <returns>列舉值目前所位在的文字項目的索引。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值位於字串的第一個文字項目之前，或最後一個文字項目之後。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>取得字串中目前的文字項目。</summary>
      <returns>含有正被讀取字串中的目前文字項目的新字串。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值位於字串的第一個文字項目之前，或最後一個文字項目之後。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>將列舉值前移至字串的下一個文字項目。</summary>
      <returns>如果列舉值成功地前移至下一個文字項目則為 <see langword="true" />；如果列舉值已經傳遞字串的結尾則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>設定列舉值至它的初始位置，這是在字串中第一個文字項目之前。</summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>定義文字屬性和行為，例如書寫系統特有的大小寫。</summary>
    </member>
    <member name="P:System.Globalization.TextInfo.ANSICodePage">
      <summary>取得目前 <see cref="T:System.Globalization.TextInfo" /> 所代表的書寫系統使用的美國國家標準局 (ANSI) 字碼頁 (Code Page)。</summary>
      <returns>目前 <see cref="T:System.Globalization.TextInfo" /> 所代表書寫系統使用的 ANSI 字碼頁。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Clone">
      <summary>建立目前 <see cref="T:System.Globalization.TextInfo" /> 物件複本的新物件。</summary>
      <returns>
        <see cref="T:System.Object" /> 的新執行個體，它是目前 <see cref="T:System.Globalization.TextInfo" /> 物件的成員複製品。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
      <summary>取得文化特性的名稱，這個文化特性與目前 <see cref="T:System.Globalization.TextInfo" /> 物件關聯。</summary>
      <returns>文化特性的名稱。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.EBCDICCodePage">
      <summary>取得目前 <see cref="T:System.Globalization.TextInfo" /> 所代表書寫系統使用的擴充二進碼十進位交換碼 (EBCDIC) 字碼頁。</summary>
      <returns>目前 <see cref="T:System.Globalization.TextInfo" /> 所代表書寫系統使用的 EBCDIC 字碼頁。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>判斷指定的物件是否代表與目前 <see cref="T:System.Globalization.TextInfo" /> 物件相同的書寫系統。</summary>
      <param name="obj">要與目前 <see cref="T:System.Globalization.TextInfo" /> 比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 代表與目前 <see cref="T:System.Globalization.TextInfo" /> 相同的書寫系統，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.TextInfo" /> 的雜湊函式，適合於雜湊演算法和資料結構 (如雜湊資料表)。</summary>
      <returns>目前 <see cref="T:System.Globalization.TextInfo" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.TextInfo" /> 物件是否為唯讀。</summary>
      <returns>如果目前 <see cref="T:System.Globalization.TextInfo" /> 物件是唯讀的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsRightToLeft">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.TextInfo" /> 物件是否表示從右到左書寫文字的書寫系統。</summary>
      <returns>如果從右到左書寫文字，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.LCID">
      <summary>取得與目前 <see cref="T:System.Globalization.TextInfo" /> 物件關聯之文化特性的文化特性識別項。</summary>
      <returns>識別文化特性的數字，目前的 <see cref="T:System.Globalization.TextInfo" /> 物件就是從該文化特性建立的。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>取得或設定清單中分隔項目的字串。</summary>
      <returns>在清單中分隔項目的字串。</returns>
      <exception cref="T:System.ArgumentNullException">設定作業中的值是 null。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.TextInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.TextInfo.MacCodePage">
      <summary>取得目前 <see cref="T:System.Globalization.TextInfo" /> 所代表的書寫系統使用的 Macintosh 字碼頁。</summary>
      <returns>目前 <see cref="T:System.Globalization.TextInfo" /> 所代表的書寫系統使用的 Macintosh 字碼頁。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.OEMCodePage">
      <summary>取得目前 <see cref="T:System.Globalization.TextInfo" /> 所代表的書寫系統使用的原來設備製造商 (OEM) 字碼頁。</summary>
      <returns>目前 <see cref="T:System.Globalization.TextInfo" /> 所代表的書寫系統使用的 OEM 字碼頁。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo)">
      <summary>傳回指定之 <see cref="T:System.Globalization.TextInfo" /> 物件的唯讀版本。</summary>
      <param name="textInfo">
        <see cref="T:System.Globalization.TextInfo" /> 物件。</param>
      <returns>如果 <paramref name="textInfo" /> 是唯讀的，則為 <paramref name="textInfo" /> 參數所指定的 <see cref="T:System.Globalization.TextInfo" /> 物件。  
-或- 
如果 <paramref name="textInfo" /> 不是唯讀的，則為 <paramref name="textInfo" /> 所指定之 <see cref="T:System.Globalization.TextInfo" /> 物件的唯讀成員複製品。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textInfo" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>還原序列化 (Deserialization) 完成後，引發還原序列化事件。</summary>
      <param name="sender">還原序列化之事件的來源。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>轉換指定字元為小寫。</summary>
      <param name="c">要轉換為小寫的字元。</param>
      <returns>轉換為小寫的指定字元。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>轉換指定字串為小寫。</summary>
      <param name="str">要轉換為小寫的字串。</param>
      <returns>轉換為小寫的指定字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>傳回表示目前 <see cref="T:System.Globalization.TextInfo" /> 的字串。</summary>
      <returns>字串，代表目前的 <see cref="T:System.Globalization.TextInfo" />。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToTitleCase(System.String)">
      <summary>將指定的字串轉換為字首大寫 (除了視為縮略字的完全大寫文字例外)。</summary>
      <param name="str">要轉換為字首大寫的字串。</param>
      <returns>轉換為字首大寫的指定字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>轉換指定字元為大寫。</summary>
      <param name="c">要轉換為大寫的字元。</param>
      <returns>轉換為大寫的指定字元。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>轉換指定字串為大寫。</summary>
      <param name="str">要轉換為大寫的字元。</param>
      <returns>轉換為大寫的指定字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
      <summary>表示泰國佛教曆法。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。  
-或- 
 <paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別中的紀元清單。</summary>
      <returns>陣列，由值永遠為目前紀元的單一元素組成。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 中一年中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 366 的整數，表示指定之 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別不支援閏月的概念。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，表示一週的第一天。</param>
      <returns>從 1 起始的正整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。  
-或- 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>這個方法永遠傳回 <see langword="false" />，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.ThaiBuddhistCalendar" />類別所支援的最晚日期和時間, 相當於西元9999年12月31日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.ThaiBuddhistCalendar" />類別所支援的最早日期和時間, 相當於西元0001年1月1日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">表示年份的整數。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">表示紀元的整數。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="month" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="day" /> 不在曆法支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。  
-或- 
 <paramref name="era" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">兩位數或四位數整數，代表要轉換的年份。</param>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在曆法支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值小於 99。  
-或- 
在設定作業中指定的值大於 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>定義格式化選項，這些格式化選項自訂 <see cref="Overload:System.TimeSpan.ParseExact" /> 和 <see cref="Overload:System.TimeSpan.TryParseExact" /> 方法的字串剖析。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>表示一律將輸入解譯為負時間間隔。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>表示只有在負號存在時，才將輸入解譯為負時間間隔。</summary>
    </member>
    <member name="T:System.Globalization.UmAlQuraCalendar">
      <summary>表示沙烏地阿拉伯回教 (Um Al Qura) 曆法。</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>計算與指定初始日期相差指定月數的日期。</summary>
      <param name="time">要在其中加入月份的日期。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 11/16/2077 23:59:59 (西曆日期) 的日期。</param>
      <param name="months">要加入的正或負月數。</param>
      <returns>由 <paramref name="months" /> 參數指定的月數加入至由 <paramref name="time" /> 參數指定的日期所產生的日期。</returns>
      <exception cref="T:System.ArgumentException">產生的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120,000 或大於 120,000。  
-或- 
 <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>計算與指定初始日期相差指定年份的日期。</summary>
      <param name="time">要在其中加入年份的日期。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 11/16/2077 23:59:59 (西曆日期) 的日期。</param>
      <param name="years">要加入的正或負年份。</param>
      <returns>由 <paramref name="years" /> 參數指定的年數加入至由 <paramref name="time" /> 參數指定的日期所產生的日期。</returns>
      <exception cref="T:System.ArgumentException">產生的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 小於 -10,000 或大於 10,000。  
-或- 
 <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.AlgorithmType">
      <summary>取得值，指出目前的月曆是以陽曆為主、以陰曆為主，還是同時包含兩種曆法。</summary>
      <returns>一律傳回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>取得 <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" /> 屬性指定之年的前一年的天數。</summary>
      <returns>
        <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" /> 指定之年的前一年的天數。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.Eras">
      <summary>取得目前 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 支援的紀元清單。</summary>
      <returns>陣列，由值為 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" /> 的單一元素組成。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)">
      <summary>計算指定的日期發生在月份中的哪一天。</summary>
      <param name="time">要讀取的日期值。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 11/16/2077 23:59:59 (西曆日期) 的日期。</param>
      <returns>1 到 30 的整數，表示 <paramref name="time" /> 參數所指定月份的日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)">
      <summary>計算指定的日期發生在一週中的哪一天。</summary>
      <param name="time">要讀取的日期值。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 11/16/2077 23:59:59 (西曆日期) 的日期。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，表示 <paramref name="time" /> 參數所指定之一週的日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)">
      <summary>計算指定的日期發生在一年中的哪一天。</summary>
      <param name="time">要讀取的日期值。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 11/16/2077 23:59:59 (西曆日期) 的日期。</param>
      <returns>1 到 355 的整數，表示 <paramref name="time" /> 參數所指定之年份的日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的指定月份中的天數。</summary>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>指定的年份與紀元中指定月份的天數。 一般年份的傳回值為 29，閏年則為 30。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>計算指定紀元的指定年份中的天數。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>指定年份和紀元中的天數。 一般年份有 354 天，閏年有 355 天。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)">
      <summary>計算指定日期發生的年份。</summary>
      <param name="time">要讀取的日期值。</param>
      <returns>永遠都傳回 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>一定是 0，因為 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別不支援閏月。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1318 或大於 1450。  
-或- 
 <paramref name="era" /> 不是 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)">
      <summary>計算指定日期發生的月份。</summary>
      <param name="time">要讀取的日期值。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 11/16/2077 23:59:59 (西曆日期) 的日期。</param>
      <returns>1 到 12 的整數，表示 <paramref name="time" /> 參數所指定日期的月份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>計算指定紀元的指定年份中的月數。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuaraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>一律為 12。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)">
      <summary>計算由所指定 <see cref="T:System.DateTime" /> 表示的日期年份。</summary>
      <param name="time">要讀取的日期值。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 11/16/2077 23:59:59 (西曆日期) 的日期。</param>
      <returns>整數，表示 <paramref name="time" /> 參數所指定的年份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定的日期是否為閏日。</summary>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">1 到 30 的整數，表示日期。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>如果指定的日期為閏日，則為 <see langword="true" />，否則為 <see langword="false" />。 傳回值永遠都會是 <see langword="false" />，因為 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別不支援閏月。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定年份和紀元中的指定月份是否為閏月。</summary>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>一定是 <see langword="false" />，因為 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別不支援閏月。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <param name="year">一年。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>如果指定的年份為閏年，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime">
      <summary>取得受此曆法所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.UmAlQuraCalendar" />類別所支援的最晚日期和時間, 相當於西元2077年11月16日的最後一刻 在西曆中。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime">
      <summary>取得受此曆法所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.UmAlQuraCalendar" />類別所支援的最早日期和時間, 相當於西元1900年4月30日的第一個時刻。 在西曆中。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回 <see cref="T:System.DateTime" /> 物件，其設定為指定日期、時間和紀元。</summary>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">1 到 29 的整數，表示日期。</param>
      <param name="hour">0 到 23 的整數，表示小時。</param>
      <param name="minute">0 到 59 的整數，表示分鐘。</param>
      <param name="second">0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">0 到 999 的整數，表示毫秒。</param>
      <param name="era">一紀元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。  
-或- 
 <paramref name="hour" /> 小於 0 或大於 23。  
-或- 
 <paramref name="minute" /> 小於 0 或大於 59。  
-或- 
 <paramref name="second" /> 小於 0 或大於 59。  
-或- 
 <paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <param name="year">從 0 到 99 的 2 位數年份，或是從 1318 到 1450 的 4 位數 Um Al Qura 曆法年份。</param>
      <returns>如果 <paramref name="year" /> 參數是 2 位數年份，則傳回值為對應的 4 位數年份。 如果 <paramref name="year" /> 參數是 4 位數年份，則傳回值會是未變更的 <paramref name="year" /> 參數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">這個曆法是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，Um Al Qura 曆法的年份值小於 1318 但不是 99，或大於 1450。</exception>
    </member>
    <member name="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra">
      <summary>代表目前的紀元。 這個欄位是常數。</summary>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>定義字元的 Unicode 分類。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>成對標點符號標記中的一個結束字元，例如括弧、方括弧和大括號。 由 Unicode 名稱 "Pe" (Punctuation, close) 表示。 值為 21。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>連接兩個字元的連接子標點符號。 由 Unicode 名稱 "Pc" (Punctuation, connector) 表示。 值為 18。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>控制程式碼字元，其 Unicode 值為 U+007F 或在 U+0000 至 U+001F 或 U+0080 至 U+009F 的範圍中。 由 Unicode 名稱 "Cc" (Other, control) 表示。 值為 14。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>貨幣符號字元。 由 Unicode 名稱 "Sc" (Symbol, currency) 表示。 值為 26。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>虛線或連字號字元。 由 Unicode 名稱 "Pd" (Punctuation, dash) 表示。 值為 19。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>十進位數字字元，即範圍 0 到 9 的字元。 由 Unicode 名稱 "Nd" (number, decimal digit) 表示。 值為 8。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>含括標記是非間距組合字元，它會包圍直到基底字元以前 (含) 的所有字元。 由 Unicode 名稱 "Me" (Mark, enclosing) 表示。 值為 7。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>結束或終結的引號字元。 由 Unicode 名稱 "Pf" (Punctuation, final quote) 表示。 值為 23。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>格式字元，會影響文字的配置或文字處理的作業，但一般不會呈現。 由 Unicode 名稱 "Cf" (Other, format) 表示。 值為 15。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>開頭或起始引號字元。 由 Unicode 名稱 "Pi" (Punctuation, initial quote) 表示。 值為 22。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>以字母 (而非十進位數字) 表示的數字 (例如，代表五的羅馬數字為 "V")。 指示器 (Indicator) 是透過 Unicode 名稱 "Nl" (number, letter) 表示。 值為 9。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>用來分隔文字行的字元。 由 Unicode 名稱 "Zl" (Separator, line) 表示。 值為 12。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>小寫字母。 由 Unicode 名稱 "Ll" (Letter, lowercase) 表示。 值為 1。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>數學符號字元，例如 "+" 或 "="。 由 Unicode 名稱 "Sm" (Symbol, math) 表示。 值為 25。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>修飾詞字母字元，是獨立式的間距字元，會指示前面字母的修飾。 由 Unicode 名稱 "Lm" (Letter, modifier) 表示。 值為 3。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>修飾詞符號字元，它會指示周圍字元的修飾。 例如，分數斜線指示左邊的數字為分子，而右邊的數字為分母。 指示器是透過 Unicode 名稱 "Sk" (symbol, modifier) 表示。 值為 27。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>非間距字元，指出基底字元的修飾。 由 Unicode 名稱 "Mn" (Mark, nonspacing) 表示。 值為 5。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>成對標點符號標記中的一個開頭字元，例如括弧、方括弧和大括號。 由 Unicode 名稱 "Ps" (Punctuation, open) 表示。 值為 20。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>不是大寫字母、小寫字母、首字大寫字母或修飾詞字母的字母。 由 Unicode 名稱 "Lo" (Letter, other) 表示。 值為 4。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>沒有指派給任何 Unicode 分類的字元。 由 Unicode 名稱 "Cn" (Other, not assigned) 表示。 值為 29。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>既不是十進位數字也不是字母數字的數字 (例如，分數 1/2)。 指示器是透過 Unicode 名稱 "No" (number, other) 表示。 值為 10。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>不是連接子、破折號、開頭標點符號、結束標點符號、起始引號或終結引號的標點符號字元。 由 Unicode 名稱 "Po" (Punctuation, other) 表示。 值為 24。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>不是數學符號、貨幣符號或修飾詞符號的符號字元。 由 Unicode 名稱 "So" (Symbol, other) 表示。 值為 28。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>用來分隔段落的字元。 由 Unicode 名稱 "Zp" (Separator, paragraph) 表示。 值為 13。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>私人使用字元，其 Unicode 值在 U+E000 至 U+F8FF 的範圍中。 由 Unicode 名稱 "Co" (Other, private use) 表示。 值為 17。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>空白字元，它沒有圖像 (Glyph)，但也不是控制或格式字元。 由 Unicode 名稱 "Zs" (Separator, space) 表示。 值為 11。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>佔空間字元，表示基底字元的修改，並影響該基底字元的圖像寬度。 由 Unicode 名稱 "Mc" (Mark, spacing combining) 表示。 值為 6。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>高 Surrogate 或低 Surrogate 字元。 Surrogate 代碼的值在 U+D800 至 U+DFFF 的範圍。 由 Unicode 名稱 "Cs" (Other, surrogate) 表示。 值為 16。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>字首大寫的字母。 由 Unicode 名稱 "Lt" (Letter, titlecase) 表示。 值為 2。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>大寫字母。 由 Unicode 名稱 "Lu" (Letter, uppercase) 表示。 該值為 0。</summary>
    </member>
    <member name="T:System.GopherStyleUriParser">
      <summary>根據 Gopher 配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.GopherStyleUriParser.#ctor">
      <summary>根據 Gopher 配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.Guid">
      <summary>表示全域唯一識別項 (GUID)。</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>使用指定的位元組陣列，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="b">16 個元素位元組陣列，包含要用來初始化 GUID 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> 的長度不是 16 個位元組。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的整數和位元組，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 的下一個位元組。</param>
      <param name="e">GUID 的下一個位元組。</param>
      <param name="f">GUID 的下一個位元組。</param>
      <param name="g">GUID 的下一個位元組。</param>
      <param name="h">GUID 的下一個位元組。</param>
      <param name="i">GUID 的下一個位元組。</param>
      <param name="j">GUID 的下一個位元組。</param>
      <param name="k">GUID 的下一個位元組。</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>使用指定的整數和位元組陣列，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 剩餘的 8 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 的長度不是 8 個位元組。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.ReadOnlySpan{System.Byte})">
      <param name="b" />
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>使用指定字串表示的值，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="g">字串，包含下列格式之一的 GUID ("d" 代表十六進位數字，忽略大小寫)：  
 32 個連續數字：  
 dddddddddddddddddddddddddddddddd  
 -或-  
 8、4、4、4 和 12 個數字的群組，其間以短破折號相隔。 整個 GUID 可以選擇性地用對稱的大括號或括號括起來：  
 dddddddd-dddd-dddd-dddd-dddddddddddd  
 -或-  
 {dddddddd-dddd-dddd-dddd-dddddddddddd}  
 -或-  
 (dddddddd-dddd-dddd-dddd-dddddddddddd)  
 -或-  
 8、4 和 4 個數字的群組，與一個 2 個數字形成之八個群組的子集，而每個群組都以 "0x" 或 "0X" 做為字首，並且以逗號分隔。 整個 GUID 和子集都用對稱的大括號括起來︰  
 {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}  
 所有的大括號、逗號和 "0x" 都是必要的。 所有內嵌的空白都會被忽略。 群組中所有前置的零都會被忽略。  
 群組中所顯示的數字是可以出現在群組中有意義的數字數目上限。 您可以指定從 1 到群組所顯示的數字數目。 所指定的數字會假設為群組的低序位數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="g" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="g" /> 的格式無效。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.Byte,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定不帶正負號的整數 (Unsigned Integer) 和位元組，初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="k">GUID 的下一個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 的下一個位元組。</param>
      <param name="e">GUID 的下一個位元組。</param>
      <param name="f">GUID 的下一個位元組。</param>
      <param name="g">GUID 的下一個位元組。</param>
      <param name="h">GUID 的下一個位元組。</param>
      <param name="i">GUID 的下一個位元組。</param>
      <param name="j">GUID 的下一個位元組。</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>將這個執行個體與指定的 <see cref="T:System.Guid" /> 物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">與這個執行個體相比較的物件。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  負整數 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  正整數 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  負整數 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  正整數 
  這個執行個體大於 <paramref name="value" />，或者 <paramref name="value" /> 是 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Guid" />。</exception>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <see cref="T:System.Guid" /> 結構的唯讀執行個體，其值全為零。</summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Guid" /> 物件是否表示相同的值。</summary>
      <param name="g">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="g" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="o">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="o" /> 是與這個執行個體有相同值的 <see cref="T:System.Guid" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>初始化 <see cref="T:System.Guid" /> 結構的新執行個體。</summary>
      <returns>新的 GUID 物件。</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>表示兩個指定之 <see cref="T:System.Guid" /> 物件的值是否相等。</summary>
      <param name="a">要比較的第一個物件。</param>
      <param name="b">要比較的第二個物件。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>表示兩個指定之 <see cref="T:System.Guid" /> 物件的值是否不相等。</summary>
      <param name="a">要比較的第一個物件。</param>
      <param name="b">要比較的第二個物件。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.Parse(System.ReadOnlySpan{System.Char})">
      <param name="input" />
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構。</summary>
      <param name="input">要轉換的字串。</param>
      <returns>包含所剖析之值的結構。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式無法辨識。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <param name="input" />
      <param name="format" />
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構，但字串必須是指定的格式。</summary>
      <param name="input">要轉換的 GUID。</param>
      <param name="format">下列其中一個指定名稱，明確指出在解譯 <paramref name="input" /> 時要使用的格式："N"、"D"、"B"、"P" 或 "X"。</param>
      <returns>包含所剖析之值的結構。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不是 <paramref name="format" /> 所指定的格式。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>傳回 16 個元素的位元組陣列，位元組陣列會包含這個執行個體的值。</summary>
      <returns>16 個元素的位元組陣列。</returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>以登錄格式傳回這個執行個體的值的字串表示。</summary>
      <returns>這個<see cref="T:System.Guid" />的值，已使用 "D" 格式規範來格式化，如下所示： 
 <c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>  
其中的 GUID 值是以一系列小寫的十六進位數字表示，按照 8、4、4、4 和 12 位數分組，以連字號分開。 傳回值的範例是 "382c74c3-721d-4f34-80e5-57657b6cbc27"。 若要將從 a 到 f 的十六進位數字轉換為大寫，請呼叫所傳回之字串的 <see cref="M:System.String.ToUpper" /> 方法。</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>根據提供的格式規範，傳回這個 <see cref="T:System.Guid" /> 執行個體的值的字串表示。</summary>
      <param name="format">單一格式規範，指出如何格式化這個 <see cref="T:System.Guid" /> 值。 <paramref name="format" /> 參數可能是 "N"、"D"、"B"、"P" 或 "X"。 如果 <paramref name="format" /> 是 <see langword="null" /> 或空字串 ("")，則使用 "D"。</param>
      <returns>這個 <see cref="T:System.Guid" /> 值，其按照指定的格式，以一系列小寫的十六進位數字來表示。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 值不是 <see langword="null" />、空字串 ("")、"N"、"D"、"B"、"P" 或 "X"。</exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>根據提供的格式規範和特定文化特性格式資訊，傳回這個 <see cref="T:System.Guid" /> 類別執行個體值的字串表示。</summary>
      <param name="format">單一格式規範，指出如何格式化這個 <see cref="T:System.Guid" /> 值。 <paramref name="format" /> 參數可能是 "N"、"D"、"B"、"P" 或 "X"。 如果 <paramref name="format" /> 是 <see langword="null" /> 或空字串 ("")，則使用 "D"。</param>
      <param name="provider">(保留) 物件，提供特定文化特性格式資訊。</param>
      <returns>這個 <see cref="T:System.Guid" /> 值，其按照指定的格式，以一系列小寫的十六進位數字來表示。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 值不是 <see langword="null" />、空字串 ("")、"N"、"D"、"B"、"P" 或 "X"。</exception>
    </member>
    <member name="M:System.Guid.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char})">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Guid.TryParse(System.ReadOnlySpan{System.Char},System.Guid@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構。</summary>
      <param name="input">要轉換的 GUID。</param>
      <param name="result">要包含所剖析之值的結構。 如果方法傳回 <see langword="true" />，則 <paramref name="result" /> 包含有效的 <see cref="T:System.Guid" />。 如果方法會傳回 <see langword="false" />，則 <paramref name="result" /> 等於 <see cref="F:System.Guid.Empty" />。</param>
      <returns>如果剖析作業成功則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Guid@)">
      <param name="input" />
      <param name="format" />
      <param name="result" />
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 結構，但字串必須是指定的格式。</summary>
      <param name="input">要轉換的 GUID。</param>
      <param name="format">下列其中一個指定名稱，明確指出在解譯 <paramref name="input" /> 時要使用的格式："N"、"D"、"B"、"P" 或 "X"。</param>
      <param name="result">要包含所剖析之值的結構。 如果方法傳回 <see langword="true" />，則 <paramref name="result" /> 包含有效的 <see cref="T:System.Guid" />。 如果方法會傳回 <see langword="false" />，則 <paramref name="result" /> 等於 <see cref="F:System.Guid.Empty" />。</param>
      <returns>如果剖析作業成功則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.TryWriteBytes(System.Span{System.Byte})">
      <param name="destination" />
    </member>
    <member name="T:System.HashCode">
      <summary>將多個值的雜湊碼合併成單一雜湊碼。</summary>
    </member>
    <member name="M:System.HashCode.Add``1(``0)">
      <summary>將單一值新增至雜湊碼。</summary>
      <param name="value">要新增至雜湊碼的值。</param>
      <typeparam name="T">要加入至雜湊碼的數值型別。</typeparam>
    </member>
    <member name="M:System.HashCode.Add``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>將單一值新增至雜湊碼，以指定提供雜湊碼函式的型別。</summary>
      <param name="value">要新增至雜湊碼的值。</param>
      <param name="comparer">用來計算雜湊碼的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。
這個值可以是 Null 參考 (在 Visual Basic 中為 Nothing)，這會使用預設相等比較子 <typeparamref name="T" />。</param>
      <typeparam name="T">要加入至雜湊碼的數值型別。</typeparam>
    </member>
    <member name="M:System.HashCode.Combine``1(``0)">
      <summary>擴散指定值所傳回的雜湊碼。</summary>
      <param name="value1">要新增至雜湊碼的值。</param>
      <typeparam name="T1">要加入雜湊碼的數值型別。</typeparam>
      <returns>雜湊碼，代表單一值。</returns>
    </member>
    <member name="M:System.HashCode.Combine``2(``0,``1)">
      <summary>將兩個值合併成雜湊碼。</summary>
      <param name="value1">要合併成雜湊碼的第一個值。</param>
      <param name="value2">要合併成雜湊碼的第二個值。</param>
      <typeparam name="T1">要合併成雜湊碼的第一個值的型別。</typeparam>
      <typeparam name="T2">要合併成雜湊碼的第二個值的型別。</typeparam>
      <returns>雜湊碼，代表兩個值。</returns>
    </member>
    <member name="M:System.HashCode.Combine``3(``0,``1,``2)">
      <summary>將三個值合併成雜湊碼。</summary>
      <param name="value1">要合併成雜湊碼的第一個值。</param>
      <param name="value2">要合併成雜湊碼的第二個值。</param>
      <param name="value3">要合併成雜湊碼的第三個值。</param>
      <typeparam name="T1">要合併成雜湊碼的第一個值的型別。</typeparam>
      <typeparam name="T2">要合併成雜湊碼的第二個值的型別。</typeparam>
      <typeparam name="T3">要合併成雜湊碼的第三個值的型別。</typeparam>
      <returns>雜湊碼，代表三個值。</returns>
    </member>
    <member name="M:System.HashCode.Combine``4(``0,``1,``2,``3)">
      <summary>將四個值合併成雜湊碼。</summary>
      <param name="value1">要合併成雜湊碼的第一個值。</param>
      <param name="value2">要合併成雜湊碼的第二個值。</param>
      <param name="value3">要合併成雜湊碼的第三個值。</param>
      <param name="value4">要合併成雜湊碼的第四個值。</param>
      <typeparam name="T1">要合併成雜湊碼的第一個值的型別。</typeparam>
      <typeparam name="T2">要合併成雜湊碼的第二個值的型別。</typeparam>
      <typeparam name="T3">要合併成雜湊碼的第三個值的型別。</typeparam>
      <typeparam name="T4">要合併成雜湊碼的第四個值的型別。</typeparam>
      <returns>雜湊碼，代表四個值。</returns>
    </member>
    <member name="M:System.HashCode.Combine``5(``0,``1,``2,``3,``4)">
      <summary>將五個值合併成雜湊碼。</summary>
      <param name="value1">要合併成雜湊碼的第一個值。</param>
      <param name="value2">要合併成雜湊碼的第二個值。</param>
      <param name="value3">要合併成雜湊碼的第三個值。</param>
      <param name="value4">要合併成雜湊碼的第四個值。</param>
      <param name="value5">要合併成雜湊碼的第五個值。</param>
      <typeparam name="T1">要合併成雜湊碼的第一個值的型別。</typeparam>
      <typeparam name="T2">要合併成雜湊碼的第二個值的型別。</typeparam>
      <typeparam name="T3">要合併成雜湊碼的第三個值的型別。</typeparam>
      <typeparam name="T4">要合併成雜湊碼的第四個值的型別。</typeparam>
      <typeparam name="T5">要合併成雜湊碼的第五個值的型別。</typeparam>
      <returns>雜湊碼，代表五個值。</returns>
    </member>
    <member name="M:System.HashCode.Combine``6(``0,``1,``2,``3,``4,``5)">
      <summary>將六個值合併成雜湊碼。</summary>
      <param name="value1">要合併成雜湊碼的第一個值。</param>
      <param name="value2">要合併成雜湊碼的第二個值。</param>
      <param name="value3">要合併成雜湊碼的第三個值。</param>
      <param name="value4">要合併成雜湊碼的第四個值。</param>
      <param name="value5">要合併成雜湊碼的第五個值。</param>
      <param name="value6">要合併成雜湊碼的第六個值。</param>
      <typeparam name="T1">要合併成雜湊碼的第一個值的型別。</typeparam>
      <typeparam name="T2">要合併成雜湊碼的第二個值的型別。</typeparam>
      <typeparam name="T3">要合併成雜湊碼的第三個值的型別。</typeparam>
      <typeparam name="T4">要合併成雜湊碼的第四個值的型別。</typeparam>
      <typeparam name="T5">要合併成雜湊碼的第五個值的型別。</typeparam>
      <typeparam name="T6">要合併成雜湊碼的第六個值的型別。</typeparam>
      <returns>雜湊碼，代表六個值。</returns>
    </member>
    <member name="M:System.HashCode.Combine``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>將七個值合併成一個雜湊碼。</summary>
      <param name="value1">要合併成雜湊碼的第一個值。</param>
      <param name="value2">要合併成雜湊碼的第二個值。</param>
      <param name="value3">要合併成雜湊碼的第三個值。</param>
      <param name="value4">要合併成雜湊碼的第四個值。</param>
      <param name="value5">要合併成雜湊碼的第五個值。</param>
      <param name="value6">要合併成雜湊碼的第六個值。</param>
      <param name="value7">要合併成雜湊碼的第七個值。</param>
      <typeparam name="T1">要合併成雜湊碼的第一個值的型別。</typeparam>
      <typeparam name="T2">要合併成雜湊碼的第二個值的型別。</typeparam>
      <typeparam name="T3">要合併成雜湊碼的第三個值的型別。</typeparam>
      <typeparam name="T4">要合併成雜湊碼的第四個值的型別。</typeparam>
      <typeparam name="T5">要合併成雜湊碼的第五個值的型別。</typeparam>
      <typeparam name="T6">要合併成雜湊碼的第六個值的型別。</typeparam>
      <typeparam name="T7">要合併成雜湊碼的第七個值的型別。</typeparam>
      <returns>雜湊碼，代表七個值。</returns>
    </member>
    <member name="M:System.HashCode.Combine``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>將八個值合併成雜湊碼。</summary>
      <param name="value1">要合併成雜湊碼的第一個值。</param>
      <param name="value2">要合併成雜湊碼的第二個值。</param>
      <param name="value3">要合併成雜湊碼的第三個值。</param>
      <param name="value4">要合併成雜湊碼的第四個值。</param>
      <param name="value5">要合併成雜湊碼的第五個值。</param>
      <param name="value6">要合併成雜湊碼的第六個值。</param>
      <param name="value7">要合併成雜湊碼的第七個值。</param>
      <param name="value8">要合併成雜湊碼的第八個值。</param>
      <typeparam name="T1">要合併成雜湊碼的第一個值的型別。</typeparam>
      <typeparam name="T2">要合併成雜湊碼的第二個值的型別。</typeparam>
      <typeparam name="T3">要合併成雜湊碼的第三個值的型別。</typeparam>
      <typeparam name="T4">要合併成雜湊碼的第四個值的型別。</typeparam>
      <typeparam name="T5">要合併成雜湊碼的第五個值的型別。</typeparam>
      <typeparam name="T6">要合併成雜湊碼的第六個值的型別。</typeparam>
      <typeparam name="T7">要合併成雜湊碼的第七個值的型別。</typeparam>
      <typeparam name="T8">要合併成雜湊碼的第八個值的型別。</typeparam>
      <returns>雜湊碼，代表八個值。</returns>
    </member>
    <member name="M:System.HashCode.Equals(System.Object)">
      <summary>不支援且不應該呼叫這個方法。</summary>
      <param name="obj">忽略。</param>
      <returns>這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">呼叫這個方法時一律會擲回。</exception>
    </member>
    <member name="M:System.HashCode.GetHashCode">
      <summary>不支援且不應該呼叫這個方法。</summary>
      <returns>這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">呼叫這個方法時一律會擲回。</exception>
    </member>
    <member name="M:System.HashCode.ToHashCode">
      <summary>計算在連續 <see cref="Overload:System.HashCode.Add" /> 引動過程之後的最終雜湊碼。</summary>
      <returns>計算的雜湊碼。</returns>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>根據 HTTP 配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>根據 HTTP 配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.IAsyncDisposable">
      <summary>提供用於非同步釋放非受控資源的機制。</summary>
    </member>
    <member name="M:System.IAsyncDisposable.DisposeAsync">
      <summary>非同步執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之由應用程式定義的工作。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>表示非同步作業 (Asynchronous Operation) 的狀態。</summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>取得使用者定義的物件，這個物件符合或包含非同步作業的相關資訊。</summary>
      <returns>使用者定義的物件，這個物件符合或包含非同步作業的相關資訊。</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>取得 <see cref="T:System.Threading.WaitHandle" />，用來等候非同步作業完成。</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" />，用來等候非同步作業完成。</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>取得指出非同步作業是否同步完成的值。</summary>
      <returns>如果非同步作業同步完成，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>取得指出非同步作業是否已經完成的值。</summary>
      <returns>如果作業已完成，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ICloneable">
      <summary>支援複製 (Clone)，使用與現有執行個體 (Instance) 相同的值建立新的執行個體。</summary>
    </member>
    <member name="M:System.ICloneable.Clone">
      <summary>建立目前執行個體複本的新物件。</summary>
      <returns>這個執行個體複本的新物件。</returns>
    </member>
    <member name="T:System.IComparable">
      <summary>定義通用的型別特定比較方法，實值型別 (Value Type) 或類別 (Class) 會實作這個方法，以排列或排序其執行個體。</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>將目前的執行個體與相同型別的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>值，表示所比較之物件的相對順序。 傳回值具有這些意義： 
  值 
  意義 
  小於零 
  這個執行個體在排序次序中會在 <paramref name="obj" /> 之前。  
  零 
  這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。  
  大於零 
  這個執行個體在排序次序中會跟隨在 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 與這個執行個體的型別不同。</exception>
    </member>
    <member name="T:System.IComparable`1">
      <summary>定義通用的比較方法，實值型別或類別會實作這個方法，以建立特定類型的比較方法來排序其執行個體。</summary>
      <typeparam name="T">要比較之物件的類型。</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>將目前的執行個體與相同型別的另一個物件相比較，並傳回整數，這個整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <returns>值，表示所比較之物件的相對順序。 傳回值具有這些意義： 
  值 
  意義 
  小於零 
  這個執行個體在排序次序中會在 <paramref name="other" /> 之前。  
  零 
  這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。  
  大於零 
  這個執行個體在排序次序中會跟隨在 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="T:System.IConvertible">
      <summary>定義方法，該方法會將實作參考的值或 實值類型轉換成具有等值的 Common Language Runtime 類型。</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>傳回這個執行個體的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數，該常數是實作這個介面的類型或實值型別的 <see cref="T:System.TypeCode" />。</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>使用指定的特定文化特性 (Culture) 之格式資訊，將這個執行個體的值轉換為相等的布林 (Boolean) 值。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>布林值，等於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>8 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 Unicode 字元。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>Unicode 字元，等於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 <see cref="T:System.DateTime" />。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>
        <see cref="T:System.DateTime" /> 執行個體，等於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>等於這個執行個體值的 <see cref="T:System.Decimal" /> 數字。</returns>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的雙精確度浮點數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>雙精確度浮點數，等於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 16 位元帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>16 位元帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>使用指定的文化特性 (Culture) 特定格式資訊，將這個執行個體的值轉換為相等的 32 位元帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>32 位元帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>使用指定的文化特性 (Culture) 特定格式資訊，將這個執行個體的值轉換為相等的 64 位元帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>64 位元帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>使用指定的文化特性 (Culture) 特定格式資訊，將這個執行個體的值轉換為相等的 8 位元帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>8 位元帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的單精確度浮點數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>單精確度浮點數，等於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為相等的 <see cref="T:System.String" />。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>
        <see cref="T:System.String" /> 執行個體，等於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將這個執行個體的值轉換為具有等值的指定 <see cref="T:System.Object" /> 的 <see cref="T:System.Type" />。</summary>
      <param name="conversionType">這個執行個體的值要轉換成的 <see cref="T:System.Type" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>型別 <paramref name="conversionType" /> 的 <see cref="T:System.Object" /> 執行個體，其值等於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>使用指定的文化特性 (Culture) 特定格式資訊，將這個執行個體的值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>16 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>使用指定的文化特性 (Culture) 特定格式資訊，將這個執行個體的值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>32 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>使用指定的文化特性 (Culture) 特定格式資訊，將這個執行個體的值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <returns>64 位元不帶正負號的整數，相當於這個執行個體的值。</returns>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>定義可支援物件值之自訂格式的方法。</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性 (Culture) 的格式資訊，將指定物件值轉換成相等的字串表示。</summary>
      <param name="format">格式字串，包含格式規格。</param>
      <param name="arg">要格式化的物件。</param>
      <param name="formatProvider">物件，可提供目前的執行個體相關格式資訊。</param>
      <returns>
        <paramref name="arg" /> 值的字串表示，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 根據指示格式化。</returns>
    </member>
    <member name="T:System.IDisposable">
      <summary>提供用於釋放 Unmanaged 資源的機制。</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>定義通用的方法，實值類型或類別會實作這個方法，以建立特定類型的方法來判斷執行個體是否相等。</summary>
      <typeparam name="T">要比較之物件的類型。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>指出目前的物件是否等於另一個具有相同型別的物件。</summary>
      <param name="other">要與此物件進行比較的物件。</param>
      <returns>如果目前的物件等於 <paramref name="other" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>提供機制來擷取要控制格式的物件。</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>傳回物件，這個物件為所指定型別提供格式化服務。</summary>
      <param name="formatType">物件，指定要傳回的格式化物件的型別。</param>
      <returns>如果 <see cref="T:System.IFormatProvider" /> 實作可以提供該型別的物件則為 <paramref name="formatType" /> 所指定的物件執行個體，否則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.IFormattable">
      <summary>提供將物件的值格式化成以字串表示的功能。</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式，格式化目前執行個體的值。</summary>
      <param name="format">要使用的格式。  
-或- 
若要使用為 <see cref="T:System.IFormattable" /> 實作類型所定義的預設格式，則為 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <param name="formatProvider">要用來格式化值的提供者。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，用於取得作業系統目前地區設定中的數值格式資訊。</param>
      <returns>目前執行個體的值，使用指定的格式。</returns>
    </member>
    <member name="T:System.Index">
      <summary>表示類型可以用於從開頭或結尾來為集合編制索引。</summary>
    </member>
    <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
      <summary>初始化具有指定索引位置的新 <see cref="T:System.Index" />，以及會指出索引是來自集合開頭或結尾的值。</summary>
      <param name="value">索引值。 必須大於或等於零。</param>
      <param name="fromEnd">布林值，指出索引是來自集合的開頭 (<see langword="false" />) 或是結尾 (<see langword="true" />)。</param>
    </member>
    <member name="P:System.Index.End">
      <summary>取得指向最後一個項目之後的 <see cref="T:System.Index" />。</summary>
      <returns>
        <see cref="T:System.Index" />指向最後一個元素之後的。</returns>
    </member>
    <member name="M:System.Index.Equals(System.Index)">
      <summary>傳回值，這個值指出目前的物件是否與其他 <see cref="T:System.Index" /> 物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <returns>若目前索引物件等於 <paramref name="other" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Index.Equals(System.Object)">
      <summary>指出目前索引物件是否等於指定的物件。</summary>
      <param name="value">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="value" /> 為 <see cref="T:System.Index" /> 類型且等於目前的執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Index.FromEnd(System.Int32)">
      <summary>在指定索引位置從集合的結尾建立 <see cref="T:System.Index" />。</summary>
      <param name="value">來自集合結尾的索引值。</param>
      <returns>索引值。</returns>
    </member>
    <member name="M:System.Index.FromStart(System.Int32)">
      <summary>在集合開頭的指定索引建立 <see cref="T:System.Index" />。</summary>
      <param name="value">來自集合開頭的索引位置。</param>
      <returns>索引值。</returns>
    </member>
    <member name="M:System.Index.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>雜湊碼。</returns>
    </member>
    <member name="M:System.Index.GetOffset(System.Int32)">
      <summary>使用指定的集合長度，從開頭開始計算位移。</summary>
      <param name="length">將與索引搭配使用的集合長度。 必須是正值。</param>
      <returns>位移。</returns>
    </member>
    <member name="P:System.Index.IsFromEnd">
      <summary>取得值，指出索引是來自開頭或結尾。</summary>
      <returns>
        <see langword="true" />如果索引來自結尾, 則為,否則為&lt;see. langword="false"&gt;&lt;/see.&gt;。</returns>
    </member>
    <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
      <summary>將整數值轉換為索引。</summary>
      <param name="value">要轉換的整數。</param>
      <returns>表示整數的索引。</returns>
    </member>
    <member name="P:System.Index.Start">
      <summary>取得指向集合中第一個項目的 <see cref="T:System.Index" />。</summary>
      <returns>指向集合中第一個元素的實例。</returns>
    </member>
    <member name="M:System.Index.ToString">
      <summary>傳回目前 <see cref="T:System.Index" /> 執行個體的字串表示。</summary>
      <returns>
        <see cref="T:System.Index" /> 的字串表示。</returns>
    </member>
    <member name="P:System.Index.Value">
      <summary>取得索引值。</summary>
      <returns>索引值。</returns>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>嘗試使用陣列或集合以外索引來存取陣列或集合項目時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InsufficientExecutionStackException">
      <summary>當沒有足夠可用的執行堆疊以允許大部分的方法執行時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor">
      <summary>初始化 <see cref="T:System.InsufficientExecutionStackException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InsufficientExecutionStackException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InsufficientExecutionStackException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <c>inner</c> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.InsufficientMemoryException">
      <summary>記憶體是否足夠的檢查失敗時，所擲回的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.InsufficientMemoryException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.InsufficientMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InsufficientMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Int16">
      <summary>表示 16 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>比較這個執行個體與指定的 16 位元帶正負號整數，並且傳回整數，這個整數表示這個執行個體的值小於、等於或大於所指定 16 位元帶正負號整數的值。</summary>
      <param name="value">要比較的整數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>比較這個執行個體與指定的物件，並且傳回整數，這個整數表示這個執行個體的值小於、等於或大於物件的值。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Int16" /> 值。</summary>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Int16" /> 值。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Int16" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Int16" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.Int16" />。</returns>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>代表 <see cref="T:System.Int16" /> 最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>代表 <see cref="T:System.Int16" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Int16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <returns>16 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Int16" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和文化特性特定的格式資訊，將這個執行個體的數值轉換成它的對等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Int16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Int16@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 16 位元帶正負號的整數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">當這個方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中所含數字的 16 位元帶正負號的整數，如果轉換失敗則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>將數字的字串表示轉換成它的對等 16 位元帶正負號的整數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">當這個方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中所含數字的 16 位元帶正負號的整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Int32">
      <summary>表示 32 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>將這個執行個體與指定的 32 元帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的整數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Int32" /> 值。</summary>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Int32" /> 值。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Int32" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Int32" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.Int32" />。</returns>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>代表 <see cref="T:System.Int32" /> 最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>代表 <see cref="T:System.Int32" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Int32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供 <paramref name="s" /> 格式的相關特定文化特性資訊。</param>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>32 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Int32" /> 值轉換所得的類型。</param>
      <param name="provider">物件，可提供傳回值的格式相關資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及沒有零的前置字元且範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">標準或自訂數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效或不受支援。</exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效或不受支援。</exception>
    </member>
    <member name="M:System.Int32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 32 位元帶正負號的整數。 傳回指示轉換是否成功的值。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元帶正負號整數，如果轉換失敗則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>將數字的字串表示轉換成它的對等 32 位元帶正負號的整數。 傳回指示轉換是否成功的值。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Int64">
      <summary>表示 64 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>將這個執行個體與指定的 64 元帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的整數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.Int64" /> 值。</summary>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Int64" /> 值。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，且等於這個執行個體的值，則為 <see cref="T:System.Int64" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Int64" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.Int64" />。</returns>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>代表 <see langword="Int64" /> 最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>代表 <see langword="Int64" /> 的最小可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Int64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 的允許格式。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。  
-或- 
 <paramref name="style" /> 支援小數數字，但 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供 <paramref name="s" /> 的相關特定文化特性格式資訊。</param>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。  
-或- 
 <paramref name="style" /> 支援小數數字，但 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>64 位元帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Int64" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效或不受支援。</exception>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供關於這個執行個體的文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效或不受支援。</exception>
    </member>
    <member name="M:System.Int64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Int64@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成它的對等 64 位元帶正負號的整數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元帶正負號整數，如果轉換失敗則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>將數字的字串表示轉換成它的對等 64 位元帶正負號的整數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.IntPtr">
      <summary>平台專用的類型，用以代表指標或控點。</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>使用指定的 32 位元指標或控點，初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 32 位元帶正負號整數中的指標或控點。</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>使用指定的 64 位元指標，初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 64 位元帶正負號整數中的指標或控點。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大或太小，以致於無法表示為 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>對未指定的類型使用指定的指標，初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">未指定的類型之指標。</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>將指標的值加上位移。</summary>
      <param name="pointer">要加上位移的指標。</param>
      <param name="offset">要加上的位移。</param>
      <returns>新的指標，其可反映將 <paramref name="offset" /> 加至 <paramref name="pointer" /> 的結果。</returns>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體或 <see langword="null" /> 相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.IntPtr" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>將指標的值加上位移。</summary>
      <param name="pointer">要加上位移的指標。</param>
      <param name="offset">要加上的位移。</param>
      <returns>新的指標，其可反映將 <paramref name="offset" /> 加至 <paramref name="pointer" /> 的結果。</returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>判斷 <see cref="T:System.IntPtr" /> 的兩個指定執行個體是否相等。</summary>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <returns>如果 <paramref name="value1" /> 等於 <paramref name="value2" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>將 32 位元帶正負號整數的值轉換為 <see cref="T:System.IntPtr" />。</summary>
      <param name="value">32 位元帶正負號的整數。</param>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>將 64 位元帶正負號整數的值轉換為 <see cref="T:System.IntPtr" />。</summary>
      <param name="value">64 位元帶正負號的整數。</param>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 的新執行個體。</returns>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為 32 位元帶正負號的整數。</summary>
      <param name="value">要轉換的指標或控點。</param>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，<paramref name="value" /> 的值太大，以致於無法表示為 32 位元帶正負號的整數。</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為 64 位元帶正負號的整數。</summary>
      <param name="value">要轉換的指標或控點。</param>
      <returns>
        <paramref name="value" /> 的內容。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為未指定的類型指標。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要轉換的指標或控點。</param>
      <returns>
        <paramref name="value" /> 的內容。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>將指定的指標轉換為 <see cref="T:System.IntPtr" /> 的未指定類型。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">未指定的類型之指標。</param>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.IntPtr" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>判斷 <see cref="T:System.IntPtr" /> 的兩個指定執行個體是否不相等。</summary>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <returns>如果 <paramref name="value1" /> 不等於 <paramref name="value2" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>將指標值減去移位。</summary>
      <param name="pointer">要減去位移的指標。</param>
      <param name="offset">要減去的位移。</param>
      <returns>新的指標，其可反映從 <paramref name="pointer" /> 減去 <paramref name="offset" />  的結果。</returns>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>取得這個執行個體的大小。</summary>
      <returns>這個處理序中指標或控點的大小，以位元組為單位。 這個屬性的值在 32 位元處理序中為 4，而在 64 位元處理序中為 8。 您可以定義程序類型，方法是在使用 C# 和 Visual Basic 編譯器編譯程式碼時，設定 <see langword="/platform" /> 參數。</returns>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>將指標值減去移位。</summary>
      <param name="pointer">要減去位移的指標。</param>
      <param name="offset">要減去的位移。</param>
      <returns>新的指標，其可反映從 <paramref name="pointer" /> 減去 <paramref name="offset" />  的結果。</returns>
    </member>
    <member name="M:System.IntPtr.System#IEquatable{System#IntPtr}#Equals(System.IntPtr)">
      <param name="other" />
    </member>
    <member name="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料，填入 <see cref="T:System.IntPtr" /> 物件。</summary>
      <param name="info">要填入資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">這個序列化的目的端。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>將這個執行個體的值轉換為 32 位元帶正負號的整數。</summary>
      <returns>等於這個執行個體值的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，這個執行個體的值太大或太小，以致於無法表示為 32 位元帶正負號的整數。</exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>將這個執行個體的值轉換為 64 位元帶正負號的整數。</summary>
      <returns>等於這個執行個體的 64 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>將這個執行個體的值轉換為未指定類型的指標。</summary>
      <returns>
        <see cref="T:System.Void" /> 的指標，也就是包含未指定類型資料的記憶體指標。</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>將目前 <see cref="T:System.IntPtr" /> 物件的數值，轉換為其相等的字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>將目前 <see cref="T:System.IntPtr" /> 物件的數值，轉換為其相等的字串表示。</summary>
      <param name="format">格式的規格，其管理如何轉換目前的 <see cref="T:System.IntPtr" /> 物件。</param>
      <returns>目前 <see cref="T:System.IntPtr" /> 物件值的字串表示。</returns>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>表示已經初始化為零的指標或控點之唯讀欄位。</summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>無效的轉型 (Casting) 或明確轉換所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>使用指定的訊息和錯誤碼，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">訊息，指出例外狀況發生的原因。</param>
      <param name="errorCode">與這個例外狀況相關聯的錯誤碼 (HRESULT) 值。</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>當方法呼叫對物件的目前狀態無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>例外狀況，當程式包含無效的 Microsoft Intermediate Language (MSIL) 或中繼資料 (Metadata) 時會擲回這個例外狀況。 通常，這表示在產生程式的編譯中有錯誤。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>時區資訊無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>使用系統提供的訊息，初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>從序列化資料中，初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
      <param name="info">包含已序列化資料的物件。</param>
      <param name="context">包含已序列化資料的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="context" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>使用指定的訊息字串，初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。</param>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>找不到檔案或目錄的一部分時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>將其訊息字串設定為系統提供的訊息且將其 HRESULT 設定為 COR_E_DIRECTORYNOTFOUND，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_DIRECTORYNOTFOUND，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.IO.FileAccess">
      <summary>定義檔案讀取、寫入或讀取/寫入存取的常數。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
      <summary>檔案的讀取權限， 資料可以從檔案讀取， 與讀/寫存取的 <see langword="Write" /> 結合。</summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
      <summary>讀取和寫入檔案的存取權限， 資料可以寫入檔案和從檔案讀取。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
      <summary>寫入檔案的存取權限， 資料可以寫入檔案， 與讀/寫存取的 <see langword="Read" /> 結合。</summary>
    </member>
    <member name="T:System.IO.FileAttributes">
      <summary>提供檔案和目錄的屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
      <summary>此檔案標示為包含在增量備份作業中。 Windows 會在每次修改檔案時設定這個屬性，而備份軟體應該在增量備份期間處理檔案時將其清除。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
      <summary>檔案已壓縮。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
      <summary>保留供未來使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
      <summary>檔案是目錄。 Windows、Linux 及 macOS 支援 <see langword="Directory" />。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
      <summary>檔案或目錄已加密。 對檔案而言，這表示檔案中的所有資料都被加密。 對於目錄而言，這表示加密 (Encryption) 是新建檔案和目錄的預設值。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
      <summary>檔案是隱藏的，因此不會包括在一般目錄的清單內。 Windows、Linux 及 macOS 支援 <see langword="Hidden" />。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.IntegrityStream">
      <summary>包含資料完整性支援的檔案或目錄。 將這個值套用至檔案時，檔案中的所有資料流都有整合性支援。 將這個值套用至目錄時，該目錄中所有新的檔案和子目錄預設會包含完整性支援。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
      <summary>此檔案是沒有特殊屬性的標準檔案。 此屬性只有在單獨使用時有效。 Windows、Linux 及 macOS 支援 <see langword="Normal" />。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NoScrubData">
      <summary>從資料完整性掃描中排除的檔案或目錄。 將這個值套用至目錄時，預設會從資料完整性中排除該目錄中所有新的檔案和子目錄。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
      <summary>作業系統的內容索引服務將不會編製檔案的索引。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
      <summary>檔案為離線狀態。 檔案資料不是直接可供使用的。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
      <summary>檔案是唯讀的。 Windows、Linux 及 macOS 支援 <see langword="ReadOnly" />。 在 Linux 和 macOS 上，變更 <see langword="ReadOnly" /> 旗標是權限作業。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
      <summary>檔案包含重新剖析的位置，它是與檔案或目錄有關聯的使用者定義的區塊。 Windows、Linux 及 macOS 支援 <see langword="ReparsePoint" />。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
      <summary>檔案是疏鬆檔案。 疏鬆檔案基本上為其資料幾乎包含零值的大型檔案。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
      <summary>檔案是系統檔案。 也就是說，檔案是作業系統的一部分，或由作業系統獨佔使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
      <summary>檔案是暫存的。 暫存檔案，包含應用程式正在執行時所需的資料（但卻是應用程式完成後不需要的資料）。 檔案系統會嘗試將所有資料保留在記憶體中以便更快速存取，而不是將資料清除回大型存放區。 不再需要暫存檔案時，應用程式應盡快加以刪除。</summary>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>找到 Managed 組件但是無法載入時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體，將新執行個體的 <see cref="P:System.Exception.Message" /> 屬性設定為系統提供的說明錯誤的訊息，例如「無法載入指定的檔案」。 此訊息會考量目前的系統文化特性。</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和無法載入的檔案名稱，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="fileName">
        <see cref="T:System.String" />，包含未載入的檔案名稱。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、無法載入的檔案名稱和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.FileLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="fileName">
        <see cref="T:System.String" />，包含未載入的檔案名稱。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>取得造成這個例外狀況的檔案名稱。</summary>
      <returns>包含具有無效影像的檔案名稱的 <see cref="T:System.String" />，如果沒有檔案名稱傳遞給目前執行個體的建構函式，則為 null 參考。</returns>
    </member>
    <member name="P:System.IO.FileLoadException.FusionLog">
      <summary>取得描述為什麼組件 (Assembly) 載入失敗的記錄檔。</summary>
      <returns>字串，包含組件 (Assembly) 快取報告的錯誤。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.IO.FileLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以檔案名稱和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>取得造成這個例外狀況的錯誤訊息和檔案名稱。</summary>
      <returns>字串，包含造成這個例外狀況的錯誤訊息和檔案名稱。</returns>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>傳回目前例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>字串，包含這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤 (視使用哪個 <see cref="T:System.IO.FileLoadException" /> 建構函式而定)。</returns>
    </member>
    <member name="T:System.IO.FileMode">
      <summary>指定作業系統應該如何開啟檔案。</summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
      <summary>在檔案存在時開啟它並搜尋至檔案末端，或建立新檔案。 這個需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /> 使用權限。 <see langword="FileMode.Append" /> 只能與 <see langword="FileAccess.Write" /> 一起使用。 嘗試搜尋到檔案結尾前的位置會擲回 <see cref="T:System.IO.IOException" /> 例外狀況，而且任何讀取嘗試都會失敗並擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
      <summary>指定作業系統應該建立新檔案。 如果檔案已經存在，將覆寫此檔案。 這個需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 使用權限。 <see langword="FileMode.Create" /> 等於要求檔案不存在時使用 <see cref="F:System.IO.FileMode.CreateNew" />，否則使用 <see cref="F:System.IO.FileMode.Truncate" />。 若檔案已經存在但為隱藏檔，則擲回 <see cref="T:System.UnauthorizedAccessException" /> 例外狀況。</summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
      <summary>指定作業系統應該建立新檔案。 這個需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 使用權限。 如果檔案已經存在，則會擲回 <see cref="T:System.IO.IOException" /> 例外狀況。</summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
      <summary>指定作業系統應該開啟現有的檔案。 能否順利開啟檔案，取決於 <see cref="T:System.IO.FileAccess" /> 列舉指定的值。 如果檔案不存在，就會擲回 <see cref="T:System.IO.FileNotFoundException" /> 例外狀況。</summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
      <summary>指定作業系統，如果檔案存在應該開啟檔案，否則，應該建立新的檔案。 如果檔案是以 <see langword="FileAccess.Read" /> 開啟，則需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> 使用權限。 如果檔案存取方式是 <see langword="FileAccess.Write" />，則需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 使用權限。 如果檔案是以 <see langword="FileAccess.ReadWrite" /> 開啟，則需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> 和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 使用權限。</summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
      <summary>指定作業系統應該開啟現有的檔案。 檔案一旦開啟，應該截斷檔案使其大小為零個位元組。 這個需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 使用權限。 嘗試讀取以 <see langword="FileMode.Truncate" /> 開啟的檔案會導致 <see cref="T:System.ArgumentException" /> 例外狀況。</summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>嘗試存取不存在於磁碟上的檔案失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>使用將其訊息字串設定為系統提供的訊息，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info">物件，存放關於所擲回例外狀況的已序列化物件資料。</param>
      <param name="context">物件，包含關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和無法找到的檔案名稱，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述，或 <see langword="null" /> 以使用具有給定 <paramref name="fileName" /> 的系統提供訊息。 <paramref name="message" /> 的內容應能讓人了解。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性當地語系化。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、無法找到的檔案名稱和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>取得找不到的檔案名稱。</summary>
      <returns>檔案名稱，如果沒有傳遞檔案名稱給這個執行個體的建構函式，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.IO.FileNotFoundException.FusionLog">
      <summary>取得記錄檔，其描述組件 (Assembly) 載入失敗的原因。</summary>
      <returns>組件快取所報告的錯誤。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.IO.FileNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以檔案名稱和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">物件，存放關於所擲回例外狀況的已序列化物件資料。</param>
      <param name="context">物件，包含關於來源或目的端的內容資訊。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>取得解釋例外狀況原因的錯誤訊息。</summary>
      <returns>錯誤訊息。</returns>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>傳回這個例外狀況的完整名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>這個例外狀況的完整名稱、可能的錯誤訊息、內部例外狀況的名稱和堆疊追蹤。</returns>
    </member>
    <member name="T:System.IO.FileOptions">
      <summary>表示用於建立 <see cref="T:System.IO.FileStream" /> 物件的進階選項。</summary>
    </member>
    <member name="F:System.IO.FileOptions.Asynchronous">
      <summary>表示檔案可用於非同步讀取和寫入。</summary>
    </member>
    <member name="F:System.IO.FileOptions.DeleteOnClose">
      <summary>表示檔案不再使用時會自動刪除。</summary>
    </member>
    <member name="F:System.IO.FileOptions.Encrypted">
      <summary>表示檔案已加密，而且只能使用相同的加密使用者帳戶才能解密。</summary>
    </member>
    <member name="F:System.IO.FileOptions.None">
      <summary>表示建立 <see cref="T:System.IO.FileStream" /> 物件時，不應使用任何其他選項。</summary>
    </member>
    <member name="F:System.IO.FileOptions.RandomAccess">
      <summary>表示檔案是隨機存取的。 系統可使用這個做為最佳化檔案快取的提示。</summary>
    </member>
    <member name="F:System.IO.FileOptions.SequentialScan">
      <summary>表示檔案是按順序從開頭至結尾依序存取。 系統可使用這個做為最佳化檔案快取的提示。 如果應用程式藉移動檔案指標來進行隨機存取，則可能不會發生最佳快取；然而，仍然保證正確的作業。 指定此旗標在某些情況下可提升效能。</summary>
    </member>
    <member name="F:System.IO.FileOptions.WriteThrough">
      <summary>表示系統應透過中繼快取直接寫入磁碟。</summary>
    </member>
    <member name="T:System.IO.FileShare">
      <summary>包含常數，用來控制其他 <see cref="T:System.IO.FileStream" /> 物件對於相同檔案可以用的存取方式。</summary>
    </member>
    <member name="F:System.IO.FileShare.Delete">
      <summary>允許後續刪除檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
      <summary>使檔案控制代碼 (File Handle) 可由子處理序 (Process) 來繼承。 這並非直接由 Win32 來支援。</summary>
    </member>
    <member name="F:System.IO.FileShare.None">
      <summary>拒絕共用目前檔案。 任何 (由這個處理序或其他處理序) 開啟檔案的要求將會失敗，直到關閉檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
      <summary>允許後序開啟檔案進行讀取。 如果未指定這個旗標，任何 (由這個處理序或其他處理序) 開啟檔案進行讀取的要求將會失敗，直到關閉檔案。 然而，即使有指定這個旗標，可能仍然需要其他使用權限，才能存取檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
      <summary>允許後序開啟檔案進行讀取或寫入。 如果未指定這個旗標，任何要開啟檔案以進行讀取或寫入的要求 (由這個處理序或其他處理序) 將會失敗，直到關閉檔案。 然而，即使有指定這個旗標，可能仍然需要其他使用權限，才能存取檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
      <summary>允許後序開啟檔案進行寫入。 如果未指定這個旗標，任何 (由這個處理序或其他處理序) 開啟檔案進行寫入的要求將會失敗，直到關閉檔案。 然而，即使有指定這個旗標，可能仍然需要其他使用權限，才能存取檔案。</summary>
    </member>
    <member name="T:System.IO.FileStream">
      <summary>為檔案提供 <see cref="T:System.IO.Stream" />，同時支援同步與非同步讀取和寫入作業。</summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
      <summary>使用指定的讀取/寫入權限，初始化指定檔案控制代碼之 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="handle">目前 <see langword="FileStream" /> 物件將會封裝之檔案的檔案控制代碼。</param>
      <param name="access">常數，設定 <see langword="FileStream" /> 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的欄位。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如磁碟錯誤。  
 -或-  
 資料流已關閉。</exception>
      <exception cref="T:System.UnauthorizedAccessException">作業系統不允許 <paramref name="access" /> 要求用於指定的檔案控制代碼，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案控制代碼設為唯讀存取時。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
      <summary>使用指定的讀取/寫入權限和緩衝區大小，初始化指定的檔案控制代碼之 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="handle">目前 <see langword="FileStream" /> 物件將會封裝之檔案的檔案控制代碼。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 常數，它會設定 <see langword="FileStream" /> 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。</param>
      <param name="bufferSize">大於 0 的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。 預設緩衝區大小為 4096。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 參數是無效的控制代碼。  
-或- 
<paramref name="handle" /> 參數是同步的控制代碼，且曾以非同步方式使用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 參數為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如磁碟錯誤。  
 -或-  
 資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">作業系統不允許 <paramref name="access" /> 要求用於指定的檔案控制代碼，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案控制代碼設為唯讀存取時。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
      <summary>使用指定的讀取/寫入權限、緩衝區大小和同步或非同步狀態，初始化指定的檔案控制代碼之 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="handle">這個 <see langword="FileStream" /> 物件將會封裝之檔案的檔案控制代碼。</param>
      <param name="access">常數，設定 <see langword="FileStream" /> 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。</param>
      <param name="bufferSize">大於 0 的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。 預設緩衝區大小為 4096。</param>
      <param name="isAsync">如果控制代碼為非同步開啟 (也就是，在重疊 I/O 模式)，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 參數是無效的控制代碼。  
-或- 
<paramref name="handle" /> 參數是同步的控制代碼，且曾以非同步方式使用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 參數為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如磁碟錯誤。  
 -或-  
 資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">作業系統不允許 <paramref name="access" /> 要求用於指定的檔案控制代碼，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案控制代碼設為唯讀存取時。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
      <summary>使用指定的讀取/寫入權限，初始化指定檔案控制代碼之 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="handle">目前 <see langword="FileStream" /> 物件將會封裝之檔案的檔案控制代碼。</param>
      <param name="access">常數，設定 <see langword="FileStream" /> 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的欄位。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如磁碟錯誤。  
 -或-  
 資料流已關閉。</exception>
      <exception cref="T:System.UnauthorizedAccessException">作業系統不允許 <paramref name="access" /> 要求用於指定的檔案控制代碼，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案控制代碼設為唯讀存取時。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
      <summary>使用指定的讀取/寫入權限和 <see cref="T:System.IO.FileStream" /> 執行個體擁有權，初始化指定檔案控制代碼之 <see langword="FileStream" /> 類別的新執行個體。</summary>
      <param name="handle">目前 <see langword="FileStream" /> 物件將會封裝之檔案的檔案控制代碼。</param>
      <param name="access">常數，設定 <see langword="FileStream" /> 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。</param>
      <param name="ownsHandle">如果這個 <see langword="FileStream" /> 執行個體將擁有檔案控制代碼，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的欄位。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如磁碟錯誤。  
 -或-  
 資料流已關閉。</exception>
      <exception cref="T:System.UnauthorizedAccessException">作業系統不允許 <paramref name="access" /> 要求用於指定的檔案控制代碼，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案控制代碼設為唯讀存取時。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
      <summary>使用指定的讀取/寫入權限、<see langword="FileStream" /> 執行個體擁有權和緩衝區大小，初始化指定檔案控制代碼之 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="handle">這個 <see langword="FileStream" /> 物件將會封裝之檔案的檔案控制代碼。</param>
      <param name="access">常數，設定 <see langword="FileStream" /> 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。</param>
      <param name="ownsHandle">如果這個 <see langword="FileStream" /> 執行個體將擁有檔案控制代碼，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <param name="bufferSize">大於 0 的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。 預設緩衝區大小為 4096。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如磁碟錯誤。  
 -或-  
 資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">作業系統不允許 <paramref name="access" /> 要求用於指定的檔案控制代碼，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案控制代碼設為唯讀存取時。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
      <summary>使用指定的讀取/寫入權限、<see langword="FileStream" /> 執行個體擁有權、緩衝區大小和同步或非同步狀態，初始化指定檔案控制代碼之 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="handle">這個 <see langword="FileStream" /> 物件將會封裝之檔案的檔案控制代碼。</param>
      <param name="access">常數，設定 <see langword="FileStream" /> 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。</param>
      <param name="ownsHandle">如果這個 <see langword="FileStream" /> 執行個體將擁有檔案控制代碼，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <param name="bufferSize">大於 0 的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。 預設緩衝區大小為 4096。</param>
      <param name="isAsync">如果控制代碼為非同步開啟 (也就是，在重疊 I/O 模式)，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="access" /> 小於 <see langword="FileAccess.Read" /> 或大於 <see langword="FileAccess.ReadWrite" />，或者 <paramref name="bufferSize" /> 小於或等於 0。</exception>
      <exception cref="T:System.ArgumentException">控制代碼無效。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如磁碟錯誤。  
 -或-  
 資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">作業系統不允許 <paramref name="access" /> 要求用於指定的檔案控制代碼，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案控制代碼設為唯讀存取時。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>使用指定的路徑和建立模式初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 <see langword="FileStream" /> 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">常數，決定如何開啟或建立檔案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")，只包含空格或包含一或多個無效字元。  
-或- 
 <paramref name="path" /> 的參考對象為非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如當 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，而且 <paramref name="path" /> 指定的檔案不存在。 這些模式中必須有此檔案。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 會指定唯讀的檔案。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如當 <paramref name="path" /> 指定的檔案已存在時指定 <see langword="FileMode.CreateNew" />。  
-或- 
資料流已關閉。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>使用指定路徑、建立模式和讀取/寫入權限，初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 <see langword="FileStream" /> 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">常數，決定如何開啟或建立檔案。</param>
      <param name="access">常數，決定 <see langword="FileStream" /> 物件如何存取檔案。 這也可以判斷 <see langword="FileStream" /> 物件之 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性傳回的值。 如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 <see langword="true" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")，只包含空格或包含一或多個無效字元。  
-或- 
 <paramref name="path" /> 的參考對象為非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如當 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，而且 <paramref name="path" /> 指定的檔案不存在。 這些模式中必須有此檔案。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如當 <paramref name="path" /> 指定的檔案已存在時指定 <see langword="FileMode.CreateNew" />。  
-或- 
資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定的 <paramref name="path" /> 作業系統不允許 <paramref name="access" /> 要求，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案或目錄設為唯讀存取時。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>使用指定路徑、建立模式、讀取/寫入權限和共用權限，初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 <see langword="FileStream" /> 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">常數，決定如何開啟或建立檔案。</param>
      <param name="access">常數，決定 <see langword="FileStream" /> 物件如何存取檔案。 這也可以判斷 <see langword="FileStream" /> 物件之 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性傳回的值。 如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 <see langword="true" />。</param>
      <param name="share">常數，決定處理序如何共用檔案。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")，只包含空格或包含一或多個無效字元。  
-或- 
 <paramref name="path" /> 的參考對象為非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如當 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，而且 <paramref name="path" /> 指定的檔案不存在。 這些模式中必須有此檔案。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如當 <paramref name="path" /> 指定的檔案已存在時指定 <see langword="FileMode.CreateNew" />。  
-或- 
系統正在執行 Windows 98 或 Windows 98 Second Edition，而 <paramref name="share" /> 設為 <see langword="FileShare.Delete" />。  
-或- 
資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定的 <paramref name="path" /> 作業系統不允許 <paramref name="access" /> 要求，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案或目錄設為唯讀存取時。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>使用指定路徑、建立模式、讀取/寫入與共用權限與緩衝區大小，初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 <see langword="FileStream" /> 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">常數，決定如何開啟或建立檔案。</param>
      <param name="access">常數，決定 <see langword="FileStream" /> 物件如何存取檔案。 這也可以判斷 <see langword="FileStream" /> 物件之 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性傳回的值。 如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 <see langword="true" />。</param>
      <param name="share">常數，決定處理序如何共用檔案。</param>
      <param name="bufferSize">大於 0 的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。 預設緩衝區大小為 4096。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")，只包含空格或包含一或多個無效字元。  
-或- 
 <paramref name="path" /> 的參考對象為非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值或零。  
-或- 
 <paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含無效的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如當 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，而且 <paramref name="path" /> 指定的檔案不存在。 這些模式中必須有此檔案。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如當 <paramref name="path" /> 指定的檔案已存在時指定 <see langword="FileMode.CreateNew" />。  
-或- 
系統正在執行 Windows 98 或 Windows 98 Second Edition，而 <paramref name="share" /> 設為 <see langword="FileShare.Delete" />。  
-或- 
資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定的 <paramref name="path" /> 作業系統不允許 <paramref name="access" /> 要求，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案或目錄設為唯讀存取時。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
      <summary>使用指定路徑、建立模式、讀取/寫入與共用權限、緩衝大小與同步或非同步狀態，初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 <see langword="FileStream" /> 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">常數，決定如何開啟或建立檔案。</param>
      <param name="access">常數，決定 <see langword="FileStream" /> 物件如何存取檔案。 這也可以判斷 <see langword="FileStream" /> 物件之 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性傳回的值。 如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 <see langword="true" />。</param>
      <param name="share">常數，決定處理序如何共用檔案。</param>
      <param name="bufferSize">大於 0 的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。 預設緩衝區大小為 4096。</param>
      <param name="useAsync">指定要使用非同步 I/O 或同步 I/O。 但是，請注意：基礎作業系統可能並不支援非同步 I/O，所以在指定 <see langword="true" /> 時，可能會視平台以同步方式開啟控制代碼。 在以非同步方式開啟時，<see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 與 <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法對大量讀取或寫入的作業會有較佳的效能，但對於少量讀取和寫入的作業卻會比較慢。 如果要將應用程式設計成使用非同步 I/O，請將 <paramref name="useAsync" /> 參數設定為 <see langword="true" />。 正確地使用非同步 I/O，可以讓應用程式的執行快上十倍，但如果沒有配合非同步 I/O 的需求重新設計應用程式，卻會降低十倍的效能。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")，只包含空格或包含一或多個無效字元。  
-或- 
 <paramref name="path" /> 的參考對象為非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值或零。  
-或- 
 <paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含無效的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如當 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，而且 <paramref name="path" /> 指定的檔案不存在。 這些模式中必須有此檔案。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如當 <paramref name="path" /> 指定的檔案已存在時指定 <see langword="FileMode.CreateNew" />。  
-或- 
系統正在執行 Windows 98 或 Windows 98 Second Edition，而 <paramref name="share" /> 設為 <see langword="FileShare.Delete" />。  
-或- 
資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定的 <paramref name="path" /> 作業系統不允許 <paramref name="access" /> 要求，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案或目錄設為唯讀存取時。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>使用指定的路徑、建立模式、讀取/寫入與共用權限、其他 FileStream 對同一檔案的存取權、緩衝區大小和其他檔案選項，初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 <see langword="FileStream" /> 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">常數，決定如何開啟或建立檔案。</param>
      <param name="access">常數，決定 <see langword="FileStream" /> 物件如何存取檔案。 這也可以判斷 <see langword="FileStream" /> 物件之 <see cref="P:System.IO.FileStream.CanRead" /> 與 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性傳回的值。 如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 <see langword="true" />。</param>
      <param name="share">常數，決定處理序如何共用檔案。</param>
      <param name="bufferSize">大於 0 的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。 預設緩衝區大小為 4096。</param>
      <param name="options">值，指定其他檔案選項。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")，只包含空格或包含一或多個無效字元。  
-或- 
 <paramref name="path" /> 的參考對象為非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等等。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值或零。  
-或- 
 <paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含無效的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如當 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，而且 <paramref name="path" /> 指定的檔案不存在。 這些模式中必須有此檔案。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如當 <paramref name="path" /> 指定的檔案已存在時指定 <see langword="FileMode.CreateNew" />。  
-或- 
資料流已關閉。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位於未對應的磁碟機上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定的 <paramref name="path" /> 作業系統不允許 <paramref name="access" /> 要求，例如當 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，而檔案或目錄設為唯讀存取時。  
-或- 
 針對 <paramref name="options" /> 指定了 <see cref="F:System.IO.FileOptions.Encrypted" />，但目前平台不支援檔案加密。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的讀取作業。 請考慮改用 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。</summary>
      <param name="array">要讀取資料的緩衝區。</param>
      <param name="offset">在 <paramref name="array" /> 中要開始讀取的位元組位移。</param>
      <param name="numBytes">要讀取的最大位元組數。</param>
      <param name="callback">在非同步讀取作業完成時所呼叫的方法。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步讀取的要求。</param>
      <returns>物件，參考非同步讀取。</returns>
      <exception cref="T:System.ArgumentException">陣列長度減去 <paramref name="offset" /> 會小於 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 是負數。</exception>
      <exception cref="T:System.IO.IOException">在超過檔案結尾處嘗試了非同步讀取。</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的寫入作業。 請考慮改用 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。</summary>
      <param name="array">包含要寫入目前資料流之資料的緩衝區。</param>
      <param name="offset">
        <paramref name="array" /> 中以零起始的位元組位移，即開始將位元組複製到目前資料流的位置。</param>
      <param name="numBytes">寫入的最大位元組數。</param>
      <param name="callback">在非同步寫入作業完成時所呼叫的方法。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步寫入的要求。</param>
      <returns>物件，參考非同步寫入。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 長度減去 <paramref name="offset" /> 小於 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 為負。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
      <summary>取得值，表示目前資料流是否支援讀取。</summary>
      <returns>如果資料流支援讀取，則為 <see langword="true" />；如果資料流已關閉或以唯寫存取開啟，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
      <summary>取得值，表示目前資料流是否支援搜尋。</summary>
      <returns>如果資料流支援搜尋，則為 <see langword="true" />；如果資料流已關閉或如果 <see langword="FileStream" /> 是從作業系統控制代碼 (例如管道或主控台的輸出) 建構，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
      <summary>取得值，表示目前資料流是否支援寫入。</summary>
      <returns>如果資料流支援寫入，則為 <see langword="true" />；如果資料流已關閉或以唯讀存取開啟，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.FileStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的緩衝區大小和取消語彙基元，以非同步方式從目前檔案資料流讀取位元組，並將其寫入另一個資料流。</summary>
      <param name="destination">要將目前檔案資料流內容複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值必須大於零。 預設大小為 81920。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步複製作業的工作。</returns>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.FileStream" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.FileStream.DisposeAsync">
      <summary>以非同步方式釋放 <see cref="T:System.IO.FileStream" /> 使用的不受控資源。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
      <summary>等候暫止的非同步讀取作業完成。 (請考慮用 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="asyncResult">要等候的暫止非同步要求的參考。</param>
      <returns>自資料流讀取的位元組數，在 0 和您所要求的位元組數目之間。 在資料流末端資料流只傳回 0，否則，他們應該封鎖直到至少有 1 位元組可用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">這個 <see cref="T:System.IAsyncResult" /> 物件不是透過對這個類別呼叫 <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 所建立。</exception>
      <exception cref="T:System.InvalidOperationException">多次呼叫<see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /> 。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉或發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
      <summary>結束非同步寫入作業並封鎖，直到 I/O 作業完成。 (請考慮用 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /> 替代。)</summary>
      <param name="asyncResult">暫止的非同步 I/O 要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">這個 <see cref="T:System.IAsyncResult" /> 物件不是透過對這個類別呼叫 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 所建立。</exception>
      <exception cref="T:System.InvalidOperationException">多次呼叫<see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> 。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉或發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
      <summary>確認釋出資源，並在記憶體回收行程再利用 <see langword="FileStream" /> 時執行其他清除作業。</summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
      <summary>清除這個資料流的緩衝區，讓所有緩衝資料全部寫入檔案。</summary>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
    </member>
    <member name="M:System.IO.FileStream.Flush(System.Boolean)">
      <summary>清除此資料流的緩衝區，讓所有緩衝資料全部寫入檔案，同時也清除所有的中繼檔案緩衝區。</summary>
      <param name="flushToDisk">
        <see langword="true" /> 表示排清所有中繼檔案緩衝區；否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>以非同步的方式清除這個資料流的所有緩衝區，造成所有緩衝資料都寫入基礎裝置，並且監視取消要求。</summary>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
    </member>
    <member name="P:System.IO.FileStream.Handle">
      <summary>取得目前 <see langword="FileStream" /> 物件封裝之檔案的作業系統檔案控制代碼。</summary>
      <returns>這個 <see langword="FileStream" /> 物件所封裝的檔案之作業系統檔案控制代碼；如果 <see langword="FileStream" /> 已關閉，則為 -1。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="P:System.IO.FileStream.IsAsync">
      <summary>取得值，指出 <see langword="FileStream" /> 是以非同步或同步方式開啟。</summary>
      <returns>如果 <see langword="FileStream" /> 是非同步開啟，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.FileStream.Length">
      <summary>取得資料流的位元組長度。</summary>
      <returns>代表資料流長度的長數值 (以位元組為單位)。</returns>
      <exception cref="T:System.NotSupportedException">這個資料流的 <see cref="P:System.IO.FileStream.CanSeek" /> 是 <see langword="false" />。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如檔案已關閉。</exception>
    </member>
    <member name="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
      <summary>防止其他處理程序讀取或寫入 <see cref="T:System.IO.FileStream" />。</summary>
      <param name="position">鎖定的範圍開頭。 這個參數的值必須等於或大於零 (0)。</param>
      <param name="length">要鎖定的範圍。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 或 <paramref name="length" /> 為負。</exception>
      <exception cref="T:System.ObjectDisposedException">檔案已關閉。</exception>
      <exception cref="T:System.IO.IOException">處理序無法存取檔案，因為其他處理序鎖定了該檔案的一部分。</exception>
    </member>
    <member name="P:System.IO.FileStream.Name">
      <summary>取得在 <see langword="FileStream" /> 中開啟之檔案的絕對路徑。</summary>
      <returns>字串, 它是檔案的絕對路徑。</returns>
    </member>
    <member name="P:System.IO.FileStream.Position">
      <summary>取得或設定這個資料流的目前位置。</summary>
      <returns>這個資料流的目前位置。</returns>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。  
-或-
 位置設為非常大的值，超出 Windows 98 或更早版本的資料流結尾。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">嘗試將位置設為負數值。</exception>
      <exception cref="T:System.IO.EndOfStreamException">嘗試搜尋超過資料流的結尾，但不支援此作業。</exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>從資料流讀取位元組區塊，並將資料寫入指定緩衝區。</summary>
      <param name="array">當這個方法傳回時，會包含指定的位元組陣列，這個陣列具有介於 <paramref name="offset" /> 到 (<paramref name="offset" /> + <paramref name="count" /> - 1<c>)</c> 之間的值，已由讀取自目前來源的位元組所取代。</param>
      <param name="offset">要在其中放置讀取位元組之 <paramref name="array" /> 的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法提供那麼多的位元組數目，則這個數目可能小於所要求的位元組數；如果已經到達資料流末端，則為零。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" /> 中的無效範圍。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Span{System.Byte})">
      <summary>從目前的檔案資料流讀取位元組序列，並依讀取的位元組數將檔案資料流中位置往前移。</summary>
      <param name="buffer">記憶體區域。 當這個方法傳回時，讀取自目前檔案資料流的位元組會取代此區域內容。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法取得足夠的位元組，則這個數目可能小於緩衝區所配置的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
    </member>
    <member name="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步方式從目前的檔案資料流讀取位元組序列、將其寫入位元組陣列 (從指定的位移開始)、依讀取的位元組數將檔案資料流中位置往前移，並監視取消要求。</summary>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">開始於此處自資料流寫入資料的 <paramref name="buffer" /> 中的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步讀取作業並會將位元組總數包裝到緩衝區的工作。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.FileStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式從目前的檔案資料流讀取位元組序列、將其寫入記憶體區域、依讀取的位元組數將檔案資料流中位置往前移，並監視取消要求。</summary>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業並會將位元組總數包裝到緩衝區的工作。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
      <summary>從檔案讀取一個位元組，並將讀取位置前移一個位元組。</summary>
      <returns>轉換為 <see cref="T:System.Int32" /> 的位元組，如果已經到達資料流的末端，則為 -1。</returns>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流已關閉。</exception>
    </member>
    <member name="P:System.IO.FileStream.SafeFileHandle">
      <summary>取得 <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> 物件，這個物件代表目前的 <see cref="T:System.IO.FileStream" /> 物件封裝之檔案的作業系統檔案控制代碼。</summary>
      <returns>代表目前 <see cref="T:System.IO.FileStream" /> 物件封裝之檔案的作業系統檔案控制代碼的物件。</returns>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>設定這個資料流的目前位置為指定的數值。</summary>
      <param name="offset">相對於 <paramref name="origin" /> 的搜尋起點。</param>
      <param name="origin">使用 <paramref name="offset" /> 類型的值，指定開頭、結尾或目前位置做為 <see cref="T:System.IO.SeekOrigin" /> 的參考點。</param>
      <returns>資料流中的新位置。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋，例如如果 <see langword="FileStream" /> 是從管道或主控台輸出所建構。</exception>
      <exception cref="T:System.ArgumentException">在資料流開始之前嘗試搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
      <summary>設定這個資料流長度為指定的數值。</summary>
      <param name="value">資料流的新長度。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入和搜尋。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">已嘗試將 <paramref name="value" /> 參數設定為小於 0。</exception>
    </member>
    <member name="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
      <summary>允許其他處理序存取先前鎖定之檔案的全部或一部分。</summary>
      <param name="position">解除鎖定範圍的開頭。</param>
      <param name="length">要解除鎖定的範圍。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 或 <paramref name="length" /> 為負。</exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組區塊寫入檔案資料流中。</summary>
      <param name="array">包含要寫入資料流之資料的緩衝區。</param>
      <param name="offset">
        <paramref name="array" /> 中以零起始的位元組位移，要從其中開始將位元組複製至資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" />中的無效範圍。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。  
-或-
 另一個執行緒可能會在作業系統之檔案控制代碼的位置，造成未預期的變更。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流執行個體不支援寫入。</exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>將位元組序列從唯讀範圍寫入目前的檔案資料流，並依寫入的位元組數將此檔案資料流中目前位置往前移。</summary>
      <param name="buffer">記憶體區域。 這個方法會將此區域內容複製到目前的檔案資料流。</param>
    </member>
    <member name="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式將一連串的位元組寫入目前的資料流，由這個資料流中目前的位置前移寫入的位元組數目，並且監視取消要求。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，要從其中開始將位元組複製至資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的寫入作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.FileStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步方式將位元組序列從記憶體區域寫入目前的檔案資料流、依寫入的位元組數將此檔案資料流中目前位置往前移，並監視取消要求。</summary>
      <param name="buffer">資料寫入來源的記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
      <summary>寫入一個位元組到檔案資料流中的目前位置。</summary>
      <param name="value">要寫入資料流的位元組。</param>
      <exception cref="T:System.ObjectDisposedException">資料流已關閉。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>指定子處理序是否能繼承基礎控制代碼。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>指定子處理序可繼承控制代碼。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>指定子處理序不可繼承控制代碼。</summary>
    </member>
    <member name="T:System.IO.IOException">
      <summary>當 I/O 錯誤發生時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>使用其訊息字串設定為空字串 ("")、其 HRESULT 設定為 COR_E_IO 和其內部例外狀況設定為 Null 參考，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="info">用於序列化或還原序列化物件的資料。</param>
      <param name="context">物件的來源和目的端。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" />、其 HRESULT 設定為 COR_E_IO 和其內部例外狀況設定為 <see langword="null" />，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其使用者定義的 HRESULT，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="hresult">識別已發生錯誤的整數。</param>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>路徑名稱或完整檔案名稱超過系統定義的最大長度時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>使用其 HRESULT 設定為 COR_E_PATHTOOLONG，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_PATHTOOLONG，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>指定資料流中要用於搜尋的位置。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>指定資料流的開端。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>指定資料流中的目前位置。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>指定資料流的末端。</summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>提供位元組順序的一般觀點。 這是 abstract 類別。</summary>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的讀取作業。 (請考慮用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</summary>
      <param name="buffer">讀取資料的緩衝區。</param>
      <param name="offset">開始寫入自資料流讀取資料的 <paramref name="buffer" /> 位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="callback">選擇性的非同步回呼，在讀取完成時呼叫。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步讀取的要求。</param>
      <returns>
        <see cref="T:System.IAsyncResult" />，代表可能還在擱置中的非同步讀取。</returns>
      <exception cref="T:System.IO.IOException">嘗試超越資料流結尾的非同步讀取，或發生磁碟錯誤。</exception>
      <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
      <exception cref="T:System.NotSupportedException">目前的 <see langword="Stream" /> 實作不支援讀取作業。</exception>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的寫入作業。 (請考慮用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中要開始寫入之處的位元組位移。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="callback">選擇性的非同步回呼，在寫入完成時呼叫。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出這個特定非同步寫入的要求。</param>
      <returns>
        <see langword="IAsyncResult" />，代表可能還在擱置中的非同步寫入。</returns>
      <exception cref="T:System.IO.IOException">嘗試超出資料流結尾的非同步寫入，或發生磁碟錯誤。</exception>
      <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
      <exception cref="T:System.NotSupportedException">目前的 <see langword="Stream" /> 實作不支援寫入作業。</exception>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>在衍生類別中覆寫時，取得指示目前的資料流是否支援讀取的數值。</summary>
      <returns>如果資料流支援讀取，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>在衍生類別中覆寫時，取得指示目前資料流是否支援搜尋的數值。</summary>
      <returns>如果資料流支援搜尋，則為 <see langword="true" />，否則，為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>取得值，該值判斷目前的資料流是否可以逾時。</summary>
      <returns>值，判斷目前的資料流是否可以逾時。</returns>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>在衍生類別中覆寫時，取得指示目前資料流是否支援寫入的數值。</summary>
      <returns>如果資料流支援寫入，則為 <see langword="true" />；否則，為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>關閉目前資料流和釋放與目前資料流相關聯的任何資源 (例如通訊端和檔案控制代碼)。 請確定正確地處置資料流，而非呼叫這個方法。</summary>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
      <summary>從目前資料流讀取位元組，並將其寫入另一個資料流中。</summary>
      <param name="destination">目前資料流的內容將複製到其中的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取。  
-或- 
 <paramref name="destination" /> 不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或 <paramref name="destination" /> 已經在呼叫 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法之前關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>使用指定的緩衝區大小，從目前資料流讀取所有位元組，並將其寫入另一個資料流中。</summary>
      <param name="destination">目前資料流的內容將複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小。 這個值必須大於零。 預設大小為 81920。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值或零。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取。  
-或- 
 <paramref name="destination" /> 不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或 <paramref name="destination" /> 已經在呼叫 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法之前關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
      <summary>以非同步的方式從目前資料流讀取所有位元組，並將其寫入另一個資料流中。</summary>
      <param name="destination">目前資料流的內容將複製到其中的資料流。</param>
      <returns>表示非同步複製作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或目的資料流已處置。</exception>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取，或目的資料流不支援寫入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
      <summary>使用指定的緩衝區大小，以非同步的方式從目前資料流讀取所有位元組，並將其寫入另一個資料流中。</summary>
      <param name="destination">目前資料流的內容將複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值必須大於零。 預設大小為 81920。</param>
      <returns>表示非同步複製作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 為負值或零。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或目的資料流已處置。</exception>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取，或目的資料流不支援寫入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的緩衝區大小和取消語彙基元，以非同步的方式從目前資料流讀取位元組，並將其寫入另一個資料流。</summary>
      <param name="destination">目前資料流的內容將複製到其中的資料流。</param>
      <param name="bufferSize">緩衝區的大小 (以位元組為單位)。 這個值必須大於零。 預設大小為 81920。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步複製作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 為負值或零。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或目的資料流已處置。</exception>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取，或目的資料流不支援寫入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>使用指定的取消權杖，以非同步的方式從目前資料流讀取位元組，並將其寫入另一個資料流。</summary>
      <param name="destination">目前資料流的內容將複製到其中的資料流。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步複製作業的工作。</returns>
    </member>
    <member name="M:System.IO.Stream.CreateWaitHandle">
      <summary>配置 <see cref="T:System.Threading.WaitHandle" /> 物件。</summary>
      <returns>所配置 <see langword="WaitHandle" /> 的參考。</returns>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>釋放 <see cref="T:System.IO.Stream" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.Stream" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.Stream.DisposeAsync">
      <summary>以非同步方式釋放 <see cref="T:System.IO.Stream" /> 使用的不受控資源。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>等候暫止的非同步讀取完成。 (請考慮用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</summary>
      <param name="asyncResult">要完成的擱置中非同步要求的參考。</param>
      <returns>從資料流讀取的位元組數，位於零 (0) 和您所要求的位元組數之間。 資料流只在資料流結尾傳回零 (0)，否則，它們應該封鎖，直到至少有一個位元組可用為止。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">暫止讀取作業的控制代碼無法使用。  
 -或-  
 暫止的作業不支援讀取。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不是來自目前資料流的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉或發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>結束非同步的寫入作業。 (請考慮用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 替代。)</summary>
      <param name="asyncResult">未處理的非同步 I/O 要求的參考。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">暫止寫入作業的控制代碼無法使用。  
 -或-  
 暫止的作業不支援寫入。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不是來自目前資料流的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">資料流已關閉或發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>當在衍生類別中覆寫時，會清除這個資料流的所有緩衝區，並造成所有緩衝資料都寫入基礎裝置。</summary>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync">
      <summary>以非同步的方式清除這個資料流的所有緩衝區，並造成所有緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
      <summary>以非同步的方式清除這個資料流的所有緩衝區，造成所有緩衝資料都寫入基礎裝置，並且監視取消要求。</summary>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步排清作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>在衍生類別中覆寫時，取得資料流的長度 (以位元組為單位)。</summary>
      <returns>代表資料流長度的長數值 (以位元組為單位)。</returns>
      <exception cref="T:System.NotSupportedException">衍生自 <see langword="Stream" /> 的類別不支援搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>沒有底層存放區的 <see langword="Stream" />。</summary>
    </member>
    <member name="M:System.IO.Stream.ObjectInvariant">
      <summary>提供 <see cref="T:System.Diagnostics.Contracts.Contract" /> 的支援。</summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>在衍生類別中覆寫時，取得或設定在目前資料流的位置。</summary>
      <returns>在資料流的目前位置。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，自目前資料流讀取一連串的位元組，並依所讀取的位元組數目進階資料流中的位置。</summary>
      <param name="buffer">位元組陣列。 當這個方法傳回時，緩衝區會包含指定的位元組陣列，這個陣列具有介於 <paramref name="offset" /> 到 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之間的值，已由讀取自目前來源的位元組所取代。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，即開始儲存讀取自目前資料流之資料的位置。</param>
      <param name="count">自目前資料流讀取的最大位元組數。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法取得足夠的位元組，則這個數目可能小於所要求的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Span{System.Byte})">
      <summary>當在衍生類別中覆寫時，自目前資料流讀取一連串的位元組，並依所讀取的位元組數目進階資料流中的位置。</summary>
      <param name="buffer">記憶體區域。 當這個方法傳回時，讀取自目前來源的位元組會取代此區域內容。</param>
      <returns>緩衝區所讀取的總位元組數。 如果目前無法取得足夠的位元組，則這個數目可能小於緩衝區所配置的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式從目前的資料流讀取位元組序列，並依讀取的位元組數將資料流中的位置往前移。</summary>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">開始於此處自資料流寫入資料的 <paramref name="buffer" /> 中的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式從目前資料流讀取一連串的位元組、依所讀取的位元組數目進階資料流中的位置，以及監視取消要求。</summary>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">開始於此處自資料流寫入資料的 <paramref name="buffer" /> 中的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 <paramref name="TResult" /> 參數的值會包含讀取至緩衝區的位元組總數。 如果目前可供使用的位元組數目少於所要求的數目，結果值可能會小於所要求的位元組數目，或者如果已經到達資料流末端，則可能為 0 (零)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的讀取作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步的方式從目前資料流讀取一連串的位元組、依所讀取的位元組數目進階資料流中的位置，以及監視取消要求。</summary>
      <param name="buffer">要寫入資料的記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步讀取作業的工作。 其 <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 屬性值包含讀入緩衝區的位元組總數。 如果目前無法取得足夠的位元組，則結果值可能小於緩衝區所配置的位元組數，如果已經到達資料流末端，則為 0 (零)。</returns>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>從資料流讀取一個位元組，並將資料流的位置推進一個位元組；如果在資料流末端，則傳回 -1。</summary>
      <returns>轉型為 <see langword="Int32" /> 的不帶正負號位元組，如果在資料流末端，則為 -1。</returns>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>取得或設定值 (以毫秒為單位)，這個值決定在逾時前資料流將嘗試讀取多長時間。</summary>
      <returns>值 (以毫秒為單位)，決定在逾時前資料流將嘗試讀取多長時間。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.ReadTimeout" /> 方法必須擲回 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>在衍生類別中覆寫時，設定在目前資料流的位置。</summary>
      <param name="offset">相對於 <paramref name="origin" /> 參數的位元組位移。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 類型的值，表示用來取得新位置的參考點。</param>
      <returns>目前資料流的新位置。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋，例如資料流為管道或主控台 (Console) 輸出所建構。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>在衍生類別中覆寫時，設定目前資料流的長度。</summary>
      <param name="value">想要的目前資料流長度 (單位為位元組)。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入和搜尋，例如，如果資料流是從管道或主控台 (Console) 輸出所建構。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Synchronized(System.IO.Stream)">
      <summary>在指定的 <see cref="T:System.IO.Stream" /> 物件周圍建立安全執行緒 (同步處理) 的包裝函式。</summary>
      <param name="stream">要同步處理的 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns>安全執行緒的 <see cref="T:System.IO.Stream" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將一連串的位元組寫入目前的資料流，並且由這個資料流中目前的位置前移寫入的位元組數目。</summary>
      <param name="buffer">位元組陣列。 此方法會從 <paramref name="buffer" /> 複製 <paramref name="count" /> 位元組到目前資料流。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，即開始將位元組複製到目前資料流的位置。</param>
      <param name="count">寫入目前資料流的位元組數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如找不到指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>在衍生類別中覆寫時，將一連串的位元組寫入目前的資料流，並且由這個資料流中目前的位置前移寫入的位元組數目。</summary>
      <param name="buffer">記憶體區域。 這個方法會將此區域內容複製到目前的資料流。</param>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步的方式將位元組序列寫入至目前的資料流，並依寫入的位元組數將資料流中目前的位置往前移。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，要從其中開始將位元組複製至資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的寫入作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式將一連串的位元組寫入目前的資料流，由這個資料流中目前的位置前移寫入的位元組數目，並且監視取消要求。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，要從其中開始將位元組複製至資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">資料流已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">之前的寫入作業目前正在使用資料流。</exception>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>以非同步的方式將一連串的位元組寫入目前的資料流，由這個資料流中目前的位置前移寫入的位元組數目，並且監視取消要求。</summary>
      <param name="buffer">資料寫入來源的記憶體區域。</param>
      <param name="cancellationToken">用來監視是否有取消要求的語彙基元。 預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示非同步寫入作業的工作。</returns>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>寫入一個位元組至資料流的目前位置，並將資料流位置推進一個位元組。</summary>
      <param name="value">寫入資料流的位元組。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入，或資料流已經關閉。</exception>
      <exception cref="T:System.ObjectDisposedException">關閉資料流後呼叫了方法。</exception>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>取得或設定值 (以毫秒為單位)，這個值決定在逾時前資料流將嘗試寫入多長時間。</summary>
      <returns>值 (以毫秒為單位)，決定在逾時前資料流將嘗試寫入多長時間。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.WriteTimeout" /> 方法必須擲回 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="T:System.IObservable`1">
      <summary>定義推入型通知的提供者。</summary>
      <typeparam name="T">提供通知資訊的物件。</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>通知提供者有觀察器要接收通知。</summary>
      <param name="observer">要接收通知的物件。</param>
      <returns>介面的參考，這個介面允許觀察器在提供者完成通知的傳送前停止接收通知。</returns>
    </member>
    <member name="T:System.IObserver`1">
      <summary>提供接收推入型通知的機制。</summary>
      <typeparam name="T">提供通知資訊的物件。</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>通知觀察者，提供者已完成傳送推播通知。</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>向觀察器告知提供者已發生錯誤狀況。</summary>
      <param name="error">物件，提供錯誤的其他相關資訊。</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>提供觀察者新的資料。</summary>
      <param name="value">目前通知資訊。</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>定義進度更新的提供者。</summary>
      <typeparam name="T">進度更新值的型別。</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>報告進度更新。</summary>
      <param name="value">已更新的進度的值。</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>提供延遲初始設定的支援。</summary>
      <typeparam name="T">要延遲初始化之物件的類型。</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 當發生延遲初始設定時，會使用目標類型的無參數建構函式。</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(`0)">
      <summary>將使用預先初始化指定值之 <see cref="T:System.Lazy`1" /> 類別的執行個體初始化。</summary>
      <param name="value">要使用的預先初始化值。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 當發生延遲初始設定時，會使用目標類型的無參數建構函式和所指定初始設定模式。</summary>
      <param name="isThreadSafe">
        <see langword="true" /> 表示這個執行個體可供多個執行緒同時使用，<see langword="false" /> 表示執行個體一次只能供一個執行緒使用。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 當延遲初始設定發生時，會使用指定的初始設定函式。</summary>
      <param name="valueFactory">委派，在需要時會呼叫它來產生延遲初始化的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。 當延遲初始設定發生時，會使用指定的初始設定函式和初始設定模式。</summary>
      <param name="valueFactory">委派，在需要時會呼叫它來產生延遲初始化的值。</param>
      <param name="isThreadSafe">
        <see langword="true" /> 表示這個執行個體可供多個執行緒同時使用，<see langword="false" /> 表示這個執行個體一次只能供一個執行緒使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新行個體，這個執行個體會使用指定的初始設定函式和執行緒安全模式。</summary>
      <param name="valueFactory">委派，在需要時會呼叫它來產生延遲初始化的值。</param>
      <param name="mode">指定執行緒安全模式的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體，這個執行個體會使用 <paramref name="T" /> 的無參數建構函式和所指定執行緒安全模式。</summary>
      <param name="mode">指定執行緒安全模式的其中一個列舉值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>取得值，這個值表示是否已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值。</summary>
      <returns>如果已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>建立並傳回這個執行個體之 <see cref="P:System.Lazy`1.Value" /> 屬性的字串表示。</summary>
      <returns>針對此執行個體在 <see cref="M:System.Object.ToString" /> 屬性上呼叫 <see cref="P:System.Lazy`1.Value" /> 方法的結果，前提是已經建立此值 (也就是說，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性傳回 <see langword="true" />)。 否則，尚未建立表示此值的字串。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="P:System.Lazy`1.Value" /> 屬性為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>取得目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</summary>
      <returns>目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</returns>
      <exception cref="T:System.MemberAccessException">
        <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化類型的無參數建構函式，且遺失建構函式的存取權限。</exception>
      <exception cref="T:System.MissingMemberException">
        <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化類型的無參數建構函式，且該類型沒有公用無參數建構函式。</exception>
      <exception cref="T:System.InvalidOperationException">初始設定函式嘗試存取這個執行個體的 <see cref="P:System.Lazy`1.Value" />。</exception>
    </member>
    <member name="T:System.Lazy`2">
      <summary>提供對物件和其相關聯中繼資料的延遲間接參考，供 Managed Extensibility Framework 使用。</summary>
      <typeparam name="T">參考之物件的型別。</typeparam>
      <typeparam name="TMetadata">中繼資料的型別。</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>使用指定的中繼資料，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體。</summary>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>使用指定的中繼資料和執行緒安全值，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體。</summary>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="isThreadSafe">表示建立的 <see cref="T:System.Lazy`2" /> 物件是否會具備執行緒安全。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的中繼資料和執行緒同步處理模式，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體。</summary>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="mode">執行緒同步處理模式。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>使用指定的中繼資料初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體，這個執行個體會使用指定的函數來取得參考的物件。</summary>
      <param name="valueFactory">函數，傳回參考的物件。</param>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>使用指定的中繼資料和執行緒安全值初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體，這個執行個體會使用指定的函數來取得參考的物件。</summary>
      <param name="valueFactory">函數，傳回參考的物件。</param>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="isThreadSafe">表示建立的 <see cref="T:System.Lazy`2" /> 物件是否會具備執行緒安全。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的中繼資料和執行緒同步處理模式，初始化 <see cref="T:System.Lazy`2" /> 類別的新執行個體，這個執行個體會使用指定的函數來取得參考的物件。</summary>
      <param name="valueFactory">函數，傳回參考的物件。</param>
      <param name="metadata">與參考之物件相關聯的中繼資料。</param>
      <param name="mode">執行緒同步處理模式。</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>取得與參考之物件相關聯的中繼資料。</summary>
      <returns>與參考之物件相關聯的中繼資料。</returns>
    </member>
    <member name="T:System.LdapStyleUriParser">
      <summary>根據輕量型目錄存取協定 (LDAP) 配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.LdapStyleUriParser.#ctor">
      <summary>根據輕量型目錄存取協定 (LDAP) 配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.MarshalByRefObject">
      <summary>在支援遠端處理的應用程式中啟用跨應用程式定義域界限存取物件。</summary>
    </member>
    <member name="M:System.MarshalByRefObject.#ctor">
      <summary>初始化 <see cref="T:System.MarshalByRefObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MarshalByRefObject.GetLifetimeService">
      <summary>擷取控制這個執行個體存留期 (Lifetime) 原則的目前存留期服務物件。</summary>
      <returns>型別 <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 的物件，用來控制這個執行個體的存留期原則。</returns>
      <exception cref="T:System.Security.SecurityException">立即呼叫端沒有基礎結構使用權限。</exception>
    </member>
    <member name="M:System.MarshalByRefObject.InitializeLifetimeService">
      <summary>取得存留期服務物件，以控制這個執行個體的存留期原則。</summary>
      <returns>型別 <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 的物件，用來控制這個執行個體的存留期原則。 如果存在目前存留期服務物件，則這是這個執行個體的目前存留期服務物件，否則為新的存留期服務物件，其初始化為 <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> 屬性 (Property) 的值。</returns>
      <exception cref="T:System.Security.SecurityException">立即呼叫端沒有基礎結構使用權限。</exception>
    </member>
    <member name="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
      <summary>建立目前 <see cref="T:System.MarshalByRefObject" /> 物件的淺層複本。</summary>
      <param name="cloneIdentity">
        <see langword="false" />，刪除目前 <see cref="T:System.MarshalByRefObject" /> 物件的識別 (Identity)，則會在跨遠端界限進行封送處理時將新的識別指定給物件。 <see langword="false" /> 的值通常是適當的。 <see langword="true" /> 表示會將目前 <see cref="T:System.MarshalByRefObject" /> 物件的識別複製到其複製品，而造成將遠端用戶端呼叫傳送至遠端伺服器物件。</param>
      <returns>目前 <see cref="T:System.MarshalByRefObject" /> 物件的淺層複本。</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>嘗試存取類別成員失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Memory`1">
      <summary>代表連續的記憶體區域。</summary>
      <typeparam name="T">中的專案類型<see cref="T:System.Memory`1" />。</typeparam>
    </member>
    <member name="M:System.Memory`1.#ctor(`0[])">
      <summary>在整個指定的陣列上建立新的 <see cref="T:System.Memory`1" /> 物件。</summary>
      <param name="array">要從中建立 <see cref="T:System.Memory`1" /> 物件的陣列。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 是參考型別，且 <paramref name="array" /> 不是 <paramref name="T" /> 型別的陣列。
-或-
陣列是 Covariant。</exception>
    </member>
    <member name="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>建立新的 <see cref="T:System.Memory`1" /> 物件，其中包含開始於指定索引之陣列的指定項目數。</summary>
      <param name="array">來源陣列。</param>
      <param name="start">要包含在新的 <see cref="T:System.Memory`1" /> 中之第一個項目的索引。</param>
      <param name="length">要包含在新的 <see cref="T:System.Memory`1" /> 中的項目數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 為 <see langword="null" />，但 <paramref name="start" /> 或 <paramref name="length" /> 為非零。
-或-
<paramref name="start" /> 在陣列的界限之外。
-或-
<paramref name="start" /> 和 <paramref name="length" /> 超過陣列中的項目數。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 是參考型別，且 <paramref name="array" /> 不是 <paramref name="T" /> 型別的陣列。</exception>
    </member>
    <member name="M:System.Memory`1.CopyTo(System.Memory{`0})">
      <summary>將 <see cref="T:System.Memory`1" /> 物件的內容複製到目的地 <see cref="T:System.Memory`1" /> 物件。</summary>
      <param name="destination">目的地 <see cref="T:System.Memory`1" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 的長度小於目前執行個體的長度。</exception>
    </member>
    <member name="P:System.Memory`1.Empty">
      <summary>傳回空的 <see cref="T:System.Memory`1" /> 物件。</summary>
      <returns>空的物件。</returns>
    </member>
    <member name="M:System.Memory`1.Equals(System.Memory{`0})">
      <summary>判斷指定的 <see cref="T:System.Memory`1" /> 物件是否等於目前的物件。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>如果目前的執行個體和 <paramref name="other" /> 相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Memory`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>如果目前的執行個體和 <paramref name="obj" /> 相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Memory`1.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Memory`1.IsEmpty">
      <summary>指出目前的執行個體是否為空的。</summary>
      <returns>
        <see langword="true" />如果目前的實例是空的, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Memory`1.Length">
      <summary>取得目前執行個體中的項目數目。</summary>
      <returns>目前實例中的專案數。</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}">
      <summary>定義從 <see cref="T:System.ArraySegment`1" /> 物件到 <see cref="T:System.Memory`1" /> 物件的隱含轉換。</summary>
      <param name="segment">要轉換的物件。</param>
      <returns>轉換的 <see cref="T:System.ArraySegment`1" /> 物件。</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}">
      <summary>定義從 <see cref="T:System.Memory`1" /> 物件到 <see cref="T:System.ReadOnlyMemory`1" /> 物件的隱含轉換。</summary>
      <param name="memory">要轉換的物件。</param>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(T[])~System.Memory{`0}">
      <summary>定義從陣列到 <see cref="T:System.Memory`1" /> 物件的隱含轉換。</summary>
      <param name="array">要轉換的陣列。</param>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Memory`1.Pin">
      <summary>建立 <see cref="T:System.Memory`1" /> 物件的控制代碼。</summary>
      <returns>
        <see cref="T:System.Memory`1" /> 物件的控制代碼。</returns>
      <exception cref="T:System.ArgumentException">不可以將含有非基本 (非 Blittable) 成員的執行個體固定。</exception>
    </member>
    <member name="M:System.Memory`1.Slice(System.Int32)">
      <summary>從起始於指定索引的目前記憶體形成配量。</summary>
      <param name="start">要開始配量的索引。</param>
      <returns>包含目前執行個體所有元素的物件，從 <paramref name="start" /> 到執行個體結尾。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小於零或大於 <see cref="P:System.Memory`1.Length" />。</exception>
    </member>
    <member name="M:System.Memory`1.Slice(System.Int32,System.Int32)">
      <summary>從起始於指定索引之指定長度的目前記憶體形成配量。</summary>
      <param name="start">要開始配量的索引。</param>
      <param name="length">配量中要包含的元素數目。</param>
      <returns>從目前執行個體的 <paramref name="start" /> 起始，包含 <paramref name="length" /> 元素的物件。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小於零或大於 <see cref="P:System.Memory`1.Length" />。
-或-
<paramref name="length" /> 大於 <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></exception>
    </member>
    <member name="P:System.Memory`1.Span">
      <summary>傳回目前執行個體的範圍。</summary>
      <returns>從目前<see cref="T:System.Memory`1" />物件建立的範圍。</returns>
    </member>
    <member name="M:System.Memory`1.ToArray">
      <summary>將記憶體的內容複製到新的陣列。</summary>
      <returns>陣列，其中包含目前記憶體中的元素。</returns>
    </member>
    <member name="M:System.Memory`1.ToString">
      <summary>傳回此 <see cref="T:System.Memory`1" /> 物件的字串表示。</summary>
      <returns>此 <see cref="T:System.Memory`1" /> 物件的字串表示。</returns>
    </member>
    <member name="M:System.Memory`1.TryCopyTo(System.Memory{`0})">
      <summary>將記憶體的內容複製到目的地 <see cref="T:System.Memory`1" /> 執行個體。</summary>
      <param name="destination">目的地 <see cref="T:System.Memory`1" /> 物件。</param>
      <returns>若複製作業成功，即為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>當嘗試存取某個方法 (例如，從部分信任的程式碼中存取私用方法) 而無效時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體，設定新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「嘗試存取方法失敗」。 此訊息會考量目前的系統文化特性。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.MidpointRounding">
      <summary>指定數學捨入方法遇到剛好位於兩個數字中間的數字時，應採用何種處理方式。</summary>
    </member>
    <member name="F:System.MidpointRounding.AwayFromZero">
      <summary>當某個數字剛好位於另外兩個數字之間的中點時，朝向遠離零的方向將其捨入成距離最近的數字。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToEven">
      <summary>當某個數字剛好位於另外兩個數字之間的中點時，將其捨入成為距離最近的偶數。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToNegativeInfinity">
      <summary>當某個數字剛好位於另外兩個數字之間的中點時，將其捨入成為距離最近的結果，且不大於無限精確的結果。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToPositiveInfinity">
      <summary>當某個數字剛好位於另外兩個數字之間的中點時，將其捨入成為距離最近的結果，且不小於無限精確的結果。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToZero">
      <summary>當某個數字剛好位於另外兩個數字之間的中點時，將其捨入成為距離最近的結果，且大小不大於無限精確的結果。</summary>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>當嘗試動態存取不存在的欄位時，所擲回的例外狀況。 如果類別庫 (Class Library) 中的欄位被移除或重新命名，請重新編譯參考該類別庫的任何組件。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.String)">
      <summary>使用指定的類別名稱和欄位名稱，初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="className">類別名稱，嘗試在該類別中存取不存在的欄位。</param>
      <param name="fieldName">無法存取的欄位名稱。</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>取得顯示遺漏欄位的簽章、類別名稱和欄位名稱的文字字串。 這個屬性是唯讀的。</summary>
      <returns>錯誤訊息字串。</returns>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>嘗試動態存取不存在或未宣告為公開的類別成員時，所擲回的例外狀況。 如果移除或重新命名類別庫 (Class Library) 中的成員，請重新編譯參考該類別庫的任何組件。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況根本原因的內部例外參考，初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前 <see langword="Exception" /> 的 <see cref="T:System.Exception" /> 的執行個體。 如果 <paramref name="inner" /> 不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理 <paramref name="inner" /> 的 Catch 區塊中引發目前的 <see langword="Exception" />。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.String)">
      <summary>使用指定的類別名稱和成員名稱，初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="className">類別名稱，嘗試在該類別中存取不存在的成員。</param>
      <param name="memberName">無法存取的成員名稱。</param>
    </member>
    <member name="F:System.MissingMemberException.ClassName">
      <summary>保留遺漏成員的類別名稱。</summary>
    </member>
    <member name="M:System.MissingMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用類別名稱、成員名稱、遺漏成員的簽章和其他例外狀況資訊，來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="F:System.MissingMemberException.MemberName">
      <summary>保留遺漏成員的名稱。</summary>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>取得顯示類別名稱、成員名稱和遺漏成員簽章的文字字串。</summary>
      <returns>錯誤訊息字串。</returns>
    </member>
    <member name="F:System.MissingMemberException.Signature">
      <summary>保留遺漏成員的簽章 (Signature)。</summary>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>當嘗試動態存取不存在的方法時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.String)">
      <summary>使用指定的類別名稱和方法名稱，初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="className">類別名稱，嘗試在該類別中存取不存在的方法。</param>
      <param name="methodName">無法存取的方法名稱。</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>取得顯示類別名稱、方法名稱和遺漏方法簽章的文字字串。 這個屬性是唯讀的。</summary>
      <returns>錯誤訊息字串。</returns>
    </member>
    <member name="T:System.ModuleHandle">
      <summary>表示模組的執行階段控制代碼。</summary>
    </member>
    <member name="F:System.ModuleHandle.EmptyHandle">
      <summary>表示空的模組控制代碼。</summary>
    </member>
    <member name="M:System.ModuleHandle.Equals(System.ModuleHandle)">
      <summary>傳回 <see cref="T:System.Boolean" /> 值，指出指定的 <see cref="T:System.ModuleHandle" /> 結構是否等於目前的 <see cref="T:System.ModuleHandle" />。</summary>
      <param name="handle">要與目前的 <see cref="T:System.ModuleHandle" /> 相比較的 <see cref="T:System.ModuleHandle" /> 結構。</param>
      <returns>如果 <paramref name="handle" /> 等於目前的 <see cref="T:System.ModuleHandle" /> 結構，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.Equals(System.Object)">
      <summary>傳回 <see cref="T:System.Boolean" /> 值，指出指定的物件是否為 <see cref="T:System.ModuleHandle" /> 結構，並等於目前的 <see cref="T:System.ModuleHandle" />。</summary>
      <param name="obj">要與目前的 <see cref="T:System.ModuleHandle" /> 結構相比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.ModuleHandle" /> 結構，而且等於目前的 <see cref="T:System.ModuleHandle" /> 結構，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數，其為這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的欄位之執行階段控制代碼。</summary>
      <param name="fieldToken">識別模組內欄位的中繼資料語彙基元。</param>
      <returns>
        <paramref name="fieldToken" /> 所識別的欄位之 <see cref="T:System.RuntimeFieldHandle" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的方法或建構函式之執行階段方法控制代碼。</summary>
      <param name="methodToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <returns>
        <paramref name="methodToken" /> 所識別的方法或建構函式的 <see cref="T:System.RuntimeMethodHandle" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的型別之執行階段型別控制代碼。</summary>
      <param name="typeToken">識別模組內型別的中繼資料語彙基元。</param>
      <returns>
        <paramref name="typeToken" /> 所識別的型別之 <see cref="T:System.RuntimeTypeHandle" />。</returns>
    </member>
    <member name="P:System.ModuleHandle.MDStreamVersion">
      <summary>取得中繼資料流的版本。</summary>
      <returns>32 位元的整數，表示中繼資料流的版本。 高順序的兩位元表示主要的版本號碼，而低順序的兩位元則表示次要的版本號碼。</returns>
    </member>
    <member name="M:System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)">
      <summary>測試兩個 <see cref="T:System.ModuleHandle" /> 結構是否相等。</summary>
      <param name="left">位於等號比較運算子左方的 <see cref="T:System.ModuleHandle" /> 結構。</param>
      <param name="right">位於等號比較運算子右方的 <see cref="T:System.ModuleHandle" /> 結構。</param>
      <returns>如果 <see cref="T:System.ModuleHandle" /> 結構相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)">
      <summary>測試兩個 <see cref="T:System.ModuleHandle" /> 結構是否不相等。</summary>
      <param name="left">位於不等比較運算子左方的 <see cref="T:System.ModuleHandle" /> 結構。</param>
      <param name="right">位於不等比較運算子右方的 <see cref="T:System.ModuleHandle" /> 結構。</param>
      <returns>如果 <see cref="T:System.ModuleHandle" /> 結構不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.ResolveFieldHandle(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的欄位之執行階段控制代碼。</summary>
      <param name="fieldToken">識別模組內欄位的中繼資料語彙基元。</param>
      <returns>
        <paramref name="fieldToken" /> 所識別的欄位之 <see cref="T:System.RuntimeFieldHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 在目前模組範圍中不是欄位的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 可識別欄位，而此欄位的父代 <see langword="TypeSpec" /> 具有包含項目型別 <see langword="var" /> 或 <see langword="mvar" /> 的簽章。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是在空的欄位控制代碼上呼叫。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>傳回指定之中繼資料語彙基元所識別的欄位之執行階段欄位控制代碼，並指定此語彙基元所屬範圍中的型別和方法的泛型型別引數。</summary>
      <param name="fieldToken">識別模組內欄位的中繼資料語彙基元。</param>
      <param name="typeInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 結構的陣列，表示此語彙基元所屬範圍中的型別之泛型型別引數；如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="methodInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 結構的陣列，表示此語彙基元所屬範圍中的方法之泛型型別引數；如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <paramref name="fieldToken" /> 所識別的欄位之 <see cref="T:System.RuntimeFieldHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 在目前模組範圍中不是欄位的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 可識別欄位，而此欄位的父代 <see langword="TypeSpec" /> 具有包含項目型別 <see langword="var" /> 或 <see langword="mvar" /> 的簽章。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是在空的欄位控制代碼上呼叫。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldToken" /> 不是有效的權杖。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveMethodHandle(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的方法或建構函式之執行階段方法控制代碼。</summary>
      <param name="methodToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <returns>
        <paramref name="methodToken" /> 所識別的方法或建構函式的 <see cref="T:System.RuntimeMethodHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">在目前的模組中，<paramref name="methodToken" /> 對於方法而言並不是有效的中繼資料語彙基元。  
-或- 
 <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" />，其簽章包含項目型別 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是在空的方法控制代碼上呼叫。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>傳回指定之中繼資料語彙基元所識別的方法或建構函式之執行階段方法控制代碼，並指定此語彙基元所屬範圍中的型別和方法的泛型型別引數。</summary>
      <param name="methodToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <param name="typeInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 結構的陣列，表示此語彙基元所屬範圍中的型別之泛型型別引數；如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="methodInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 結構的陣列，表示此語彙基元所屬範圍中的方法之泛型型別引數；如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <paramref name="methodToken" /> 所識別的方法或建構函式的 <see cref="T:System.RuntimeMethodHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">在目前的模組中，<paramref name="methodToken" /> 對於方法而言並不是有效的中繼資料語彙基元。  
-或- 
 <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" />，其簽章包含項目型別 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是在空的方法控制代碼上呼叫。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="methodToken" /> 不是有效的權杖。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveTypeHandle(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的型別之執行階段型別控制代碼。</summary>
      <param name="typeToken">識別模組內型別的中繼資料語彙基元。</param>
      <returns>
        <paramref name="typeToken" /> 所識別的型別之 <see cref="T:System.RuntimeTypeHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">在目前的模組中，<paramref name="typeToken" /> 對於型別而言並不是有效的中繼資料語彙基元。  
-或- 
 <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是在空的型別控制代碼上呼叫。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>傳回指定之中繼資料語彙基元所識別的型別之執行階段型別控制代碼，並指定此語彙基元所屬範圍中的型別和方法的泛型型別引數。</summary>
      <param name="typeToken">識別模組內型別的中繼資料語彙基元。</param>
      <param name="typeInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 結構的陣列，表示此語彙基元所屬範圍中的型別之泛型型別引數；如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="methodInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 結構物件的陣列，表示此語彙基元所屬範圍中的方法之泛型型別引數；如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <paramref name="typeToken" /> 所識別的型別之 <see cref="T:System.RuntimeTypeHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">在目前的模組中，<paramref name="typeToken" /> 對於型別而言並不是有效的中繼資料語彙基元。  
-或- 
 <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是在空的型別控制代碼上呼叫。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="typeToken" /> 不是有效的權杖。</exception>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>指示應用程式的 COM 執行緒模型為多執行緒 Apartment (Multithreaded Apartment，MTA)。</summary>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.MTAThreadAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>表示多重傳送的委派 (Delegate)；也就是說，委派可以在它的引動過程清單中包含一個以上的項目。</summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>初始化 <see cref="T:System.MulticastDelegate" /> 類別的新執行個體。</summary>
      <param name="target">定義 <paramref name="method" /> 的物件。</param>
      <param name="method">建立委派的方法名稱。</param>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.MulticastDelegate" /> 類別的新執行個體。</summary>
      <param name="target">定義 <paramref name="method" /> 的物件型別。</param>
      <param name="method">建立委派的靜態 (Static) 方法名稱。</param>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>結合這個 <see cref="T:System.Delegate" /> 和指定的 <see cref="T:System.Delegate" />，形成新的委派。</summary>
      <param name="follow">要和這個委派結合的委派。</param>
      <returns>委派，為 <see cref="T:System.MulticastDelegate" /> 引動過程清單的新根目錄。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="follow" /> 與這個執行個體的型別不同。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>判斷這個多重傳送委派和指定的物件是否相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 和這個執行個體 (Instance) 具有相同的引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>依照引動過程的順序，傳回這個多重傳送委派的引動過程清單。</summary>
      <returns>委派陣列，其引動過程清單完全符合這個執行個體的引動過程清單。</returns>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetMethodImpl">
      <summary>傳回目前 <see cref="T:System.MulticastDelegate" /> 所表示的靜態方法。</summary>
      <returns>目前 <see cref="T:System.MulticastDelegate" /> 所表示的靜態方法。</returns>
    </member>
    <member name="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用所有序列化這個執行個體所需的資料，填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">物件，其保有序列化或還原序列化這個執行個體所需的所有資料。</param>
      <param name="context">(保留字) 位置，序列化資料在此處被儲存和擷取。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">發生序列化錯誤。</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>判斷兩個 <see cref="T:System.MulticastDelegate" /> 物件是否相等。</summary>
      <param name="d1">左運算元。</param>
      <param name="d2">右運算元。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 具有相同的引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>判斷兩個 <see cref="T:System.MulticastDelegate" /> 物件是否不相等。</summary>
      <param name="d1">左運算元。</param>
      <param name="d2">右運算元。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不具有相同的引動過程清單，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>從這個 <see cref="T:System.MulticastDelegate" /> 的引動過程清單中，移除和指定委派相等的項目。</summary>
      <param name="value">要在引動過程清單中搜尋的委派。</param>
      <returns>如果在這個執行個體的引動過程清單中找到 <paramref name="value" />，則傳回引動過程清單中沒有 <paramref name="value" /> 的新 <see cref="T:System.Delegate" />，否則，傳回含有原始引動過程清單的這個執行個體。</returns>
      <exception cref="T:System.MemberAccessException">無法建立抽象類別的執行個體，或者這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>例外狀況，擲回於嘗試組合以 <see cref="T:System.Delegate" /> 型別 (而不是 <see cref="T:System.MulticastDelegate" /> 型別) 為基礎的兩個委派 (Delegate) 時。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.MulticastNotSupportedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.MulticastNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.MulticastNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.NetPipeStyleUriParser">
      <summary>以 "Indigo" 系統的 NetPipe 機制為根據的剖析器。</summary>
    </member>
    <member name="M:System.NetPipeStyleUriParser.#ctor">
      <summary>建立以 "Indigo" 系統的 NetPipe 機制為根據的剖析器。</summary>
    </member>
    <member name="T:System.NetTcpStyleUriParser">
      <summary>以 "Indigo" 系統的 NetTcp 機制為根據的剖析器。</summary>
    </member>
    <member name="M:System.NetTcpStyleUriParser.#ctor">
      <summary>建立以 "Indigo" 系統的 NetTcp 機制為根據的剖析器。</summary>
    </member>
    <member name="T:System.NewsStyleUriParser">
      <summary>根據使用網路新聞傳送通訊協定 (Network News Transfer Protocol，NNTP) 的新聞配置，自訂的剖析器。</summary>
    </member>
    <member name="M:System.NewsStyleUriParser.#ctor">
      <summary>根據使用網路新聞傳送通訊協定 (NNTP) 的新聞配置，建立自訂的剖析器。</summary>
    </member>
    <member name="T:System.NonSerializedAttribute">
      <summary>指示可序列化類別的欄位不應該序列化。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.NonSerializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.NonSerializedAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>當浮點數值為正無限大、負無限大或非數字 (NaN) 時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Double)">
      <summary>使用無效的數字來初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="offendingNumber">造成該例外狀況的引數值。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double)">
      <summary>使用指定的錯誤訊息和無效的數字來初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="offendingNumber">造成該例外狀況的引數值。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double,System.Exception)">
      <summary>使用指定的錯誤訊息、無效的數字和造成這個例外狀況根本原因的內部例外參考，來初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="offendingNumber">造成該例外狀況的引數值。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況根本原因的內部例外狀況參考，初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以無效的數字和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.NotFiniteNumberException.OffendingNumber">
      <summary>取得正無限大、負無限大或非數字 (NaN) 的無效數字。</summary>
      <returns>無效的數字。</returns>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>當要求的方法或作業不實作時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>當不支援叫用的方法，或是嘗試讀取、搜尋或寫入不支援叫用功能的資料流時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體，設定該新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息。 此訊息會考量目前的系統文化特性。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Nullable">
      <summary>支援可以指派 <see langword="null" /> 的實值類型。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>比較兩個 <see cref="T:System.Nullable`1" /> 物件的相對值。</summary>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 參數的基礎實值型別。</typeparam>
      <returns>整數，表示 <paramref name="n1" /> 和 <paramref name="n2" /> 參數的相對值。  
  傳回值 
  說明 
  小於零 
  <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />，並且 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="true" />。  

-或- 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 <see langword="true" />，並且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值小於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。  

  零 
  <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 <see langword="false" />。  

-或- 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 <see langword="true" />，並且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值等於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。  

  大於零 
  <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="true" />，並且 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />。  

-或- 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 <see langword="true" />，並且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值大於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。</returns>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>指出兩個指定的 <see cref="T:System.Nullable`1" /> 物件是否相等。</summary>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 參數的基礎實值型別。</typeparam>
      <returns>如果 <paramref name="n1" /> 參數等於 <paramref name="n2" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。  
傳回值取決於兩個比較參數的 <see cref="P:System.Nullable`1.HasValue" /> 和 <see cref="P:System.Nullable`1.Value" /> 屬性。  
  傳回值 
  說明 
 <see langword="true" /><paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 <see langword="false" />。  

-或- 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 <see langword="true" />，並且參數的 <see cref="P:System.Nullable`1.Value" /> 屬性相等。  

 <see langword="false" /> 某個參數的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="true" />，另一個參數則為 <see langword="false" />。  

-或- 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 <see langword="true" />，並且參數的 <see cref="P:System.Nullable`1.Value" /> 屬性不相等。</returns>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>傳回已指定可為 null 型別的基礎型別引數。</summary>
      <param name="nullableType">
        <see cref="T:System.Type" /> 物件，描述封閉式泛型可為 null 的型別。</param>
      <returns>如果 <paramref name="nullableType" /> 參數是封閉式泛型可為 null 的型別，則為 <paramref name="nullableType" /> 參數的型別引數，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>表示可以指派 <see langword="null" /> 的實值類型。</summary>
      <typeparam name="T">
        <see cref="T:System.Nullable`1" /> 泛型型別的基礎實值型別。</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>將 <see cref="T:System.Nullable`1" /> 結構的新執行個體初始化為指定值。</summary>
      <param name="value">實值型別。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>指示目前的 <see cref="T:System.Nullable`1" /> 物件是否等於指定的物件。</summary>
      <param name="other">物件。</param>
      <returns>如果 <paramref name="other" /> 參數等於目前的 <see cref="T:System.Nullable`1" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。  
下表描述如何為比較值定義相等比較： 
  傳回值 
  說明 
 <see langword="true" /><see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />，而 <paramref name="other" /> 參數為 <see langword="null" />。 也就是說，兩個 null 值在定義上是相等的。  
-或- 
<see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="true" />，而 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回的值與 <paramref name="other" /> 參數相等。  
 <see langword="false" /> 目前 <see cref="P:System.Nullable`1.HasValue" /> 結構的 <see cref="T:System.Nullable`1" /> 屬性為 <see langword="true" />，而 <paramref name="other" /> 參數為 <see langword="null" />。  
-或- 
目前 <see cref="P:System.Nullable`1.HasValue" /> 結構的 <see cref="T:System.Nullable`1" /> 屬性為 <see langword="false" />，而 <paramref name="other" /> 參數不是 <see langword="null" />。  
-或- 
目前 <see cref="P:System.Nullable`1.HasValue" /> 結構的 <see cref="T:System.Nullable`1" /> 屬性為 <see langword="true" />，而 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回的值與 <paramref name="other" /> 參數不相等。</returns>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>擷取 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回之物件的雜湊碼。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.Value" /> 屬性為 <see langword="true" />，則為 <see cref="P:System.Nullable`1.HasValue" /> 屬性所傳回之物件的雜湊碼，或是如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />，則為零。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>擷取目前 <see cref="T:System.Nullable`1" /> 物件的值，或底層型別的預設值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性是 <see langword="true" />，則為 <see cref="P:System.Nullable`1.Value" /> 屬性的值；否則為底層型別的預設值。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>擷取目前 <see cref="T:System.Nullable`1" /> 物件的值，或指定的預設值。</summary>
      <param name="defaultValue">如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />，則為要傳回的值。</param>
      <returns>如果 <see cref="P:System.Nullable`1.Value" /> 屬性為 <see langword="true" />，則為 <see cref="P:System.Nullable`1.HasValue" /> 屬性的值，否則為 <paramref name="defaultValue" /> 參數。</returns>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>取得值，指出目前的 <see cref="T:System.Nullable`1" /> 物件是否具有其基礎類型的有效值。</summary>
      <returns>如果目前 <see cref="T:System.Nullable`1" /> 物件有值，則為 <see langword="true" />，如果目前 <see cref="T:System.Nullable`1" /> 物件沒有值，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~T">
      <summary>定義 <see cref="T:System.Nullable`1" /> 執行個體到其基礎值的明確轉換。</summary>
      <param name="value">可為 Null 的值。</param>
      <returns>
        <paramref name="value" /> 參數之 <see cref="P:System.Nullable`1.Value" /> 屬性的值。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(T)~System.Nullable{`0}">
      <summary>建立新 <see cref="T:System.Nullable`1" /> 已經初始化為指定值的物件。</summary>
      <param name="value">實值型別。</param>
      <returns>
        <see cref="T:System.Nullable`1" /> 物件，其 <see cref="P:System.Nullable`1.Value" /> 屬性已經使用 <paramref name="value" /> 參數加以初始化。</returns>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>傳回目前 <see cref="T:System.Nullable`1" /> 物件值的文字表示。</summary>
      <returns>如果 <see cref="T:System.Nullable`1" /> 屬性為 <see langword="true" />，則為目前 <see cref="P:System.Nullable`1.HasValue" /> 物件值的文字表示，如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />，則為空字串 ("")。</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>取得目前 <see cref="T:System.Nullable`1" /> 物件的值，如果這個物件已有指派的有效基礎值。</summary>
      <returns>如果 <see cref="T:System.Nullable`1" /> 屬性為 <see langword="true" />，則為目前 <see cref="P:System.Nullable`1.HasValue" /> 物件的值。 如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />，則會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Nullable`1.HasValue" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>當嘗試對 Null 物件取值時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體，設定該新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「當需要物件的執行個體時，找不到 'Null' 值」。 此訊息會考量目前的系統文化特性。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 <paramref name="message" /> 的內容必須能讓人了解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Object">
      <summary>支援 .NET 類別階層架構中的所有類別，提供衍生類別的低階服務。 這是所有 .NET 類別的超基底類別，是類別階層架構的根。</summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>初始化 <see cref="T:System.Object" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <param name="obj">要與目前物件比較的物件。</param>
      <returns>若指定的物件等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>判斷指定的物件執行個體是否視為相等。</summary>
      <param name="objA">要比較的第一個物件。</param>
      <param name="objB">要比較的第二個物件。</param>
      <returns>如果物件可視為相等則為 <see langword="true" />，否則為 <see langword="false" />。 如果 <paramref name="objA" /> 和 <paramref name="objB" /> 都是 null，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>允許物件在記憶體回收進行回收之前，嘗試釋放資源並執行其他清除作業。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>做為預設雜湊函式。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>目前執行個體的確切執行階段類型。</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>建立目前 <see cref="T:System.Object" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 執行個體是否為相同的執行個體。</summary>
      <param name="objA">要比較的第一個物件。</param>
      <param name="objB">要比較的第二個物件。</param>
      <returns>如果 <paramref name="objA" /> 與 <paramref name="objB" /> 為相同的執行個體或兩者皆為 null，則為 <see langword="true" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Object.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>當作業在處置物件上執行時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>使用含有處置物件的名稱來初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="objectName">字串，包含處置物件的名稱。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 不是 <see langword="null" />，則目前的例外狀況會在處理內部例外狀況的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>使用指定的物件名稱和訊息來初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="objectName">已配置物件的名稱。</param>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>擷取具有參數名稱和額外例外狀況資訊的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>取得描述錯誤的訊息。</summary>
      <returns>描述錯誤的字串。</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>取得處置物件的名稱。</summary>
      <returns>字串，包含處置物件的名稱。</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>標記不再使用的程式項目。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>使用指定的運算訊息來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
      <param name="message">說明其他運算的文字字串。</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>使用運算訊息和指示使用已過時項目是否視為錯誤的布林值 (Boolean)，來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
      <param name="message">說明其他運算的文字字串。</param>
      <param name="error">如果已淘汰的項目使用方式產生編譯器錯誤，則為 <see langword="true" />；如果產生編譯器警告，則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>取得指示編譯器 (Compiler) 是否將使用已過時程式項目視為錯誤的布林值。</summary>
      <returns>如果使用已過時項目視為錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>取得運算訊息，包含其他程式項目的說明。</summary>
      <returns>運算的文字字串。</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>當沒有足夠的記憶體繼續執行程式時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>當檢查內容中的算數、轉型 (Casting) 或轉換作業發生溢位時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>表示方法將允許在引動過程中使用不定數目的引數。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.ParamArrayAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>當某功能不在特定平台上執行時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">文字訊息，說明例外狀況的原因。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>表示定義一組準則的方法，並判斷指定的物件是否符合這些準則。</summary>
      <param name="obj">要比較的物件，根據這個委派表示方法中所定義的準則。</param>
      <typeparam name="T">要比較之物件的型別。</typeparam>
      <returns>如果 <paramref name="obj" /> 符合這個委派表示方法中所定義的準則，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Range">
      <summary>表示具有開始和結尾索引的範圍。</summary>
    </member>
    <member name="M:System.Range.#ctor(System.Index,System.Index)">
      <summary>使用指定的開始和結尾索引，具現化新的 <see cref="T:System.Range" /> 執行個體。</summary>
      <param name="start">範圍的內含開始索引。</param>
      <param name="end">範圍的內含結尾索引。</param>
    </member>
    <member name="P:System.Range.All">
      <summary>取得從第一個項目開始到結尾的 <see cref="T:System.Range" /> 物件。</summary>
      <returns>從開始到結尾的範圍。</returns>
    </member>
    <member name="P:System.Range.End">
      <summary>取得 <see cref="T:System.Index" />，其表示範圍的內含結尾索引。</summary>
      <returns>範圍的結束索引。</returns>
    </member>
    <member name="M:System.Range.EndAt(System.Index)">
      <summary>建立 <see cref="T:System.Range" /> 物件，從集合中第一個項目開始到指定的結尾索引。</summary>
      <param name="end">將建立 <see cref="T:System.Range" /> 物件的最後一個項目位置。</param>
      <returns>從第一個項目開始到 <paramref name="end" /> 的範圍。</returns>
    </member>
    <member name="M:System.Range.Equals(System.Object)">
      <summary>傳回值，這個值指出目前執行個體是否與指定的物件相等。</summary>
      <param name="value">要與此範圍物件進行比較的物件。</param>
      <returns>如果 <paramref name="value" /> 為 <see cref="T:System.Range" /> 類型且等於目前的執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Range.Equals(System.Range)">
      <summary>傳回值，這個值指出目前的執行個體是否與其他 <see cref="T:System.Range" /> 物件相等。</summary>
      <param name="other">要與此範圍物件進行比較的範圍物件。</param>
      <returns>如果目前的執行個體和 <paramref name="other" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Range.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>雜湊碼。</returns>
    </member>
    <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
      <param name="length" />
    </member>
    <member name="P:System.Range.Start">
      <summary>取得 <see cref="T:System.Range" /> 的內含開始索引。</summary>
      <returns>範圍的內含開始索引。</returns>
    </member>
    <member name="M:System.Range.StartAt(System.Index)">
      <summary>傳回新的 <see cref="T:System.Range" /> 執行個體，從指定的開始索引開始到集合結尾。</summary>
      <param name="start">將從中建立範圍的第一個項目位置。</param>
      <returns>從 <paramref name="start" /> 到集合結尾的範圍。</returns>
    </member>
    <member name="M:System.Range.ToString">
      <summary>傳回目前 <see cref="T:System.Range" /> 物件的字串表示。</summary>
      <returns>範圍的字串表示。</returns>
    </member>
    <member name="T:System.RankException">
      <summary>當將錯誤維度 (Dimension) 數目的陣列傳遞給方法時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.ReadOnlyMemory`1">
      <summary>表示連續的記憶體區域，類似於 <see cref="T:System.ReadOnlySpan`1" />。 不同於 <see cref="T:System.ReadOnlySpan`1" />，它不是類似 ByRef 的類型。</summary>
      <typeparam name="T">要從中讀取記憶體之連續區域的物件類型。</typeparam>
    </member>
    <member name="M:System.ReadOnlyMemory`1.#ctor(`0[])">
      <summary>在整個目標陣列上建立新記憶體區域。</summary>
      <param name="array">目標陣列。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>在起始於指定位置且包含指定元素數的目標陣列部分上建立新記憶體區域。</summary>
      <param name="array">目標陣列。</param>
      <param name="start">要開始記憶體區域的索引。</param>
      <param name="length">記憶體區域中的項目數。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" /> 是 Covariant，且陣列的類型不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 識別陣列範圍之外的位置。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.CopyTo(System.Memory{`0})">
      <summary>將唯讀記憶體區域的內容複製到目的地記憶體區域。</summary>
      <param name="destination">要將項目複製到其中的記憶體區域。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 小於來源記憶體區域。</exception>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Empty">
      <summary>取得空的 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
      <returns>空白的唯讀記憶體區域。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前唯讀記憶體區域。</summary>
      <param name="obj">要比較的物件。</param>
      <returns>如果目前的執行個體和 <paramref name="obj" /> 相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Equals(System.ReadOnlyMemory{`0})">
      <summary>判斷目前的執行個體和指定的 <see cref="T:System.ReadOnlyMemory`1" /> 物件是否相等。</summary>
      <param name="other">要比較的唯讀記憶體。</param>
      <returns>如果目前的執行個體和 <paramref name="other" /> 相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.GetHashCode">
      <summary>傳回這個 <see cref="T:System.ReadOnlyMemory`1" /> 的雜湊程式碼。</summary>
      <returns>雜湊碼。</returns>
    </member>
    <member name="P:System.ReadOnlyMemory`1.IsEmpty">
      <summary>取得值，指出這個唯讀記憶體區域是否為空的。</summary>
      <returns>
        <see langword="true" />如果唯讀的記憶體區域是空的 (也就是, 它<see cref="P:System.ReadOnlyMemory`1.Length" />是 0), 則為<see langword="false" />, 否則為。</returns>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Length">
      <summary>取得記憶體區域中的項目數。</summary>
      <returns>記憶體區域中的項目數。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlyMemory{`0}">
      <summary>定義從 <see cref="T:System.ArraySegment`1" /> 到 <see cref="T:System.ReadOnlyMemory`1" /> 的隱含轉換。</summary>
      <param name="segment">要轉換的陣列區段。</param>
      <returns>陣列區段的唯讀記憶體表示。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.op_Implicit(T[])~System.ReadOnlyMemory{`0}">
      <summary>定義從陣列到 <see cref="T:System.ReadOnlyMemory`1" /> 的隱含轉換。</summary>
      <param name="array">要轉換的 T 類型陣列。</param>
      <returns>T 類型陣列的唯讀記憶體表示。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Pin">
      <summary>建立記憶體的控制代碼。</summary>
      <returns>記憶體的控制代碼。</returns>
      <exception cref="T:System.ArgumentException">不可以 Pin 含有非基本 (非 Blittable) 成員的執行個體。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Slice(System.Int32)">
      <summary>從起始於指定位置一直到其結尾的指定記憶體區域形成配量。</summary>
      <param name="start">要開始此配量的索引。</param>
      <returns>表示所需配量的唯讀記憶體區域。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小於 0 或大於 <see cref="P:System.ReadOnlyMemory`1.Length" />。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Slice(System.Int32,System.Int32)">
      <summary>從起始於 <paramref name="start" /> 位置且具有 <paramref name="length" /> 個元素的指定記憶體區域形成配量。</summary>
      <param name="start">要開始此配量的索引。</param>
      <param name="length">配量所需的長度。</param>
      <returns>表示所需配量的唯讀記憶體區域。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 在目前執行個體的範圍之外。</exception>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Span">
      <summary>從記憶體區域取得範圍。</summary>
      <returns>記憶體範圍。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.ToArray">
      <summary>將記憶體區域的內容複製到新陣列。</summary>
      <returns>陣列。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.ToString">
      <summary>傳回這個唯讀記憶體執行個體的字串表示。</summary>
      <returns>針對 <see cref="T:System.ReadOnlyMemory`1" />，傳回新的字串執行個體，表示記憶體所指向的字元。 否則，傳回具有元素類型名稱和數目的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.TryCopyTo(System.Memory{`0})">
      <summary>嘗試將唯讀記憶體的內容複製到目的地並傳回值，指出複製作業是否成功。</summary>
      <param name="destination">要將項目複製到其中的記憶體區域。</param>
      <returns>如果複製作業成功，則為 <see langword="true" />。 如果 <paramref name="destination" /> 小於目前的執行個體且不會將任何資料寫入至 <paramref name="destination" />，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ReadOnlySpan`1">
      <summary>提供任意記憶體之連續區域的型別安全和記憶體安全唯讀表示。</summary>
      <typeparam name="T">中的專案類型<see cref="T:System.ReadOnlySpan`1" />。</typeparam>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[])">
      <summary>在整個指定的陣列上建立新的 <see cref="T:System.ReadOnlySpan`1" />。</summary>
      <param name="array">要從中建立 <see cref="T:System.ReadOnlySpan`1" /> 的陣列。</param>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>建立新的 <see cref="T:System.ReadOnlySpan`1" />，其中包含起始於指定索引之陣列的指定元素數目。</summary>
      <param name="array">要從中建立 <see cref="T:System.ReadOnlySpan`1" /> 的陣列。</param>
      <param name="start">要包括的第一個元素索引。</param>
      <param name="length">要包括的元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 為 <see langword="null" />，但 <paramref name="start" /> 或 <paramref name="length" /> 為非零。
-或-
<paramref name="start" /> 在陣列的界限之外。
-或-
<paramref name="start" /> 和 <paramref name="length" /> 超過陣列中的項目數。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)">
      <summary>透過指定的 <typeparamref name="T" /> 元素數目建立新 <see cref="T:System.ReadOnlySpan`1" />，從指定的記憶體位址開始。</summary>
      <param name="pointer">記憶體中指定 <typeparamref name="T" /> 元素數目的起始位址指標。</param>
      <param name="length">要包含在 <see cref="T:System.ReadOnlySpan`1" /> 中的 <typeparamref name="T" /> 元素數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 是參考型別或包含參考，因此無法儲存在非受控記憶體中。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 為負。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})">
      <summary>將這個 <see cref="T:System.ReadOnlySpan`1" /> 的內容複製到目的地 <see cref="T:System.Span`1" />。</summary>
      <param name="destination">要將項目複製到其中的範圍。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 比來源 <see cref="T:System.ReadOnlySpan`1" /> 短。</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.Empty">
      <summary>傳回空的 <see cref="T:System.ReadOnlySpan`1" />。</summary>
      <returns>空的 <see cref="T:System.ReadOnlySpan`1" />。</returns>
    </member>
    <member name="T:System.ReadOnlySpan`1.Enumerator">
      <summary>提供 <see cref="T:System.ReadOnlySpan`1" /> 項目的列舉值。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.ReadOnlySpan`1.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目參考。</summary>
      <returns>
        <see cref="T:System.ReadOnlySpan`1" /> 中位於目前列舉值位置的項目。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.ReadOnlySpan`1" /> 的下一個項目。</summary>
      <returns>如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果已傳遞範圍結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Equals(System.Object)">
      <summary>不支援。 擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="obj">不支援。</param>
      <returns>不支援。</returns>
      <exception cref="T:System.NotSupportedException">一律由此方法擲回。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetEnumerator">
      <summary>傳回這個 <see cref="T:System.ReadOnlySpan`1" /> 的列舉值。</summary>
      <returns>這個唯讀範圍的列舉程式。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetHashCode">
      <summary>不支援。 擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>不支援。</returns>
      <exception cref="T:System.NotSupportedException">一律由此方法擲回。</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.IsEmpty">
      <summary>傳回指出目前唯讀範圍是空的的值。</summary>
      <returns>
        <see langword="true" />當目前的範圍是空的時為;否則<see langword="false" />為。</returns>
    </member>
    <member name="P:System.ReadOnlySpan`1.Item(System.Int32)">
      <summary>從位於指定零基索引的唯讀範圍取得項目。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>唯讀範圍中的元素。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於零，或是大於或等於 <see cref="P:System.ReadOnlySpan`1.Length" />。</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.Length">
      <summary>唯讀範圍中的項目數目。</summary>
      <returns>項目的數目。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <summary>傳回值，這個值表示兩個 <see cref="T:System.ReadOnlySpan`1" /> 執行個體是否相等。</summary>
      <param name="left">要比較的第一個範圍。</param>
      <param name="right">要比較的第二個範圍。</param>
      <returns>如果兩個 <see cref="T:System.ReadOnlySpan`1" /> 執行個體相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}">
      <summary>定義從 <see cref="T:System.ArraySegment`1" /> 到 <see cref="T:System.ReadOnlySpan`1" /> 的隱含轉換。</summary>
      <param name="segment">要轉換成 <see cref="T:System.ReadOnlySpan`1" /> 的陣列區段。</param>
      <returns>對應到陣列區段的唯讀範圍。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(T[])~System.ReadOnlySpan{`0}">
      <summary>定義從陣列到 <see cref="T:System.ReadOnlySpan`1" /> 的隱含轉換。</summary>
      <param name="array">要轉換成 <see cref="T:System.ReadOnlySpan`1" /> 的陣列。</param>
      <returns>對應到 <paramref name="array" /> 的唯讀範圍。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <summary>傳回值，這個值表示兩個 <see cref="T:System.ReadOnlySpan`1" /> 執行個體是否不相等。</summary>
      <param name="left">要比較的第一個唯讀範圍。</param>
      <param name="right">要比較的第二個唯讀範圍。</param>
      <returns>如果兩個 <see cref="T:System.ReadOnlySpan`1" /> 執行個體不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32)">
      <summary>從起始於指定索引的目前唯讀範圍形成配量。</summary>
      <param name="start">要開始配量的索引。</param>
      <returns>由從 <paramref name="start" /> 到範圍結尾的目前範圍之所有項目組成的範圍。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 大於唯讀範圍中的項目數。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)">
      <summary>從起始於指定索引之指定長度的目前唯讀範圍形成配量。</summary>
      <param name="start">要開始此配量的索引。</param>
      <param name="length">配量所需的長度。</param>
      <returns>由起始於 <paramref name="start" /> 目前唯讀範圍之 <paramref name="length" /> 元素組成的範圍。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小於零或大於 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.ToArray">
      <summary>將這個唯讀範圍的內容複製到新的陣列。</summary>
      <returns>陣列，其中包含目前範圍中的資料。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.ToString">
      <summary>傳回這個 <see cref="T:System.ReadOnlySpan`1" /> 的字串表示。</summary>
      <returns>此執行個體的字串表示。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})">
      <summary>嘗試將此 <see cref="T:System.ReadOnlySpan`1" /> 的內容複製到 <see cref="T:System.Span`1" /> 並傳回指出作業是否成功的值。</summary>
      <param name="destination">複製作業的目標。</param>
      <returns>若複製作業成功，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>當繫結至成員時所擲回的例外狀況 (Exception) 會產生一個以上符合繫結準則的成員。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>使用設定為 <see langword="null" /> 的空訊息字串和根本原因例外狀況，來初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>使用在該類別中設定為指定訊息的訊息字串，和設定為 <see langword="null" /> 的根本原因例外狀況，來初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 類別的新執行個體。</summary>
      <param name="message">字串，表示這個例外狀況擲回的原因。</param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>表示組件 (Assembly)，此組件是可重複使用、可控制版本和自我描述的 Common Language Runtime 應用程式建置區塊。</summary>
    </member>
    <member name="M:System.Reflection.Assembly.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.Assembly" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.Assembly.CodeBase">
      <summary>取得組件位置，例如原先在 <see cref="T:System.Reflection.AssemblyName" /> 物件中指定的。</summary>
      <returns>原先指定的組件位置。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
      <summary>從這個組件找出指定類型，並使用系統啟動項，利用區分大小寫的搜尋，建立它的執行個體。</summary>
      <param name="typeName">要尋找的 <see cref="P:System.Type.FullName" /> 類型。</param>
      <returns>透過無參數建構函式建立之指定類型的執行個體；如果找不到 <paramref name="typeName" /> 則為 <see langword="null" />。 該類型在 <see cref="T:System.Reflection.BindingFlags" /> 設定為 <see langword="Public" /> 或 <see langword="Instance" /> 時，於未指定文化特性或啟動屬性的情況下，使用預設繫結器進行解析。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 為空字串 ("") 或以 null 字元開頭的字串。  
-或- 
目前的組件已載入到僅限反映的內容中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="typeName" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="typeName" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="typeName" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="typeName" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)">
      <summary>從這個組件找出指定類型，並使用系統啟動項，利用選擇性區分大小寫的搜尋，建立它的執行個體。</summary>
      <param name="typeName">要尋找的 <see cref="P:System.Type.FullName" /> 類型。</param>
      <param name="ignoreCase">若要忽略類型名稱的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>透過無參數建構函式建立之指定類型的執行個體；如果找不到 <paramref name="typeName" /> 則為 <see langword="null" />。 該類型在 <see cref="T:System.Reflection.BindingFlags" /> 設定為 <see langword="Public" /> 或 <see langword="Instance" /> 時，於未指定文化特性或啟動屬性的情況下，使用預設繫結器進行解析。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 為空字串 ("") 或以 null 字元開頭的字串。  
-或- 
目前的組件已載入到僅限反映的內容中。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="typeName" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="typeName" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="typeName" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="typeName" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>從這個組件找出指定類型，並使用系統啟動項，利用選擇性區分大小寫的搜尋，以及取得指定文化特性 (Culture)、引數和繫結和啟動屬性，建立它的執行個體。</summary>
      <param name="typeName">要尋找的 <see cref="P:System.Type.FullName" /> 類型。</param>
      <param name="ignoreCase">若要忽略類型名稱的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 該值是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標之組合。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="args">包含要傳遞至建構函式之引數的陣列。 這個引數陣列必須在數目、順序和類型上符合要叫用的建構函式的參數。 如果需要無參數建構函式，則 <paramref name="args" /> 必須是空陣列或 <see langword="null" />。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 <see langword="null" />，會使用目前執行緒的 <see langword="CultureInfo" />。 (例如，要將代表 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <param name="activationAttributes">一或多個屬性的陣列，此屬性可參與啟動過程。 陣列通常只會包含一個 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 物件來指定用以啟動遠端物件的 URL。  此參數與啟動了用戶端的物件相關。 用戶端啟動是一項舊的技術，保留目的在提供回溯相容性，不建議用於新的開發。 分散式應用程式應該改用 Windows Communication Foundation。</param>
      <returns>指定之類型的執行個體，如果找不到 <see langword="null" /> 則為 <paramref name="typeName" />。 所提供的引數會用來解析類型，以及繫結建立執行個體所用的建構函式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 為空字串 ("") 或以 null 字元開頭的字串。  
-或- 
目前的組件已載入到僅限反映的內容中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的建構函式。</exception>
      <exception cref="T:System.NotSupportedException">將非空白的啟用屬性陣列傳遞給不是繼承自 <see cref="T:System.MarshalByRefObject" /> 的類型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="typeName" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="typeName" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="typeName" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="typeName" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
      <summary>建立類型名稱，由其組件的顯示名稱所限定。</summary>
      <param name="assemblyName">組件的顯示名稱。</param>
      <param name="typeName">類型的完整名稱。</param>
      <returns>類型的完整名稱是由組件的顯示名稱所限定。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.CustomAttributes">
      <summary>取得包含此組件之自訂屬性的集合。</summary>
      <returns>包含此組件之自訂屬性的集合。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.DefinedTypes">
      <summary>取得這個組件中定義之類型的集合。</summary>
      <returns>這個組件中定義的類型集合。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>取得這個組件的進入點。</summary>
      <returns>物件，表示這個組件的進入點。 如果找不到進入點 (例如，組件是 DLL)，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Equals(System.Object)">
      <summary>判斷這個組件和指定的物件是否相等。</summary>
      <param name="o">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="o" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EscapedCodeBase">
      <summary>取得代表基礎碼的 URI，包括逸出字元。</summary>
      <returns>具有逸出字元的 URI。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ExportedTypes">
      <summary>取得在這個組件中定義的公用類型集合，而這些類型在組件外部是可見的。</summary>
      <returns>在這個組件中定義的公用類型，而這些類型在組件外部是可見的。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>取得組件的顯示名稱。</summary>
      <returns>組件的顯示名稱。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
      <summary>取得目前載入的組件，其中定義指定類型。</summary>
      <param name="type">物件，代表會傳回的組件類型。</param>
      <returns>組件，其中定義指定類型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>傳回方法的 <see cref="T:System.Reflection.Assembly" />，其叫用目前執行的方法。</summary>
      <returns>方法的 <see langword="Assembly" /> 物件，其叫用目前執行的方法。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>取得這個組件的所有自訂屬性。</summary>
      <param name="inherit">
        <see cref="T:System.Reflection.Assembly" /> 類型的物件會忽略這個引數。</param>
      <returns>包含此組件之自訂屬性的陣列。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>取得這個組件由類型所指定的自訂屬性。</summary>
      <param name="attributeType">要為其傳回自訂屬性的類型。</param>
      <param name="inherit">
        <see cref="T:System.Reflection.Assembly" /> 類型的物件會忽略這個引數。</param>
      <returns>包含這個組件之自訂屬性的陣列，這些自訂屬性是由 <paramref name="attributeType" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是執行階段類型。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributesData">
      <summary>傳回已套用至目前 <see cref="T:System.Reflection.Assembly" /> 之屬性的相關資訊，表示為 <see cref="T:System.Reflection.CustomAttributeData" /> 物件。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前組件之屬性的資料。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetEntryAssembly">
      <summary>取得預設應用程式定義域中的處理序可執行檔。 在其他應用程式定義域中，這是由 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" /> 執行的第一個可執行檔。</summary>
      <returns>組件，該組件是預設應用程式定義域中的處理序可執行檔，或是由 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" /> 執行的第一個可執行檔。 從 Unmanaged 程式碼呼叫時，可能會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>取得組件，其中含有目前正在執行的程式碼。</summary>
      <returns>包含目前正在執行之程式碼的組件。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>取得在這個組件中定義的公用類型，而這些類型在組件外部是可見的。</summary>
      <returns>陣列，表示在這個組件中定義的類型，而這些類型會在組件外部顯示。</returns>
      <exception cref="T:System.NotSupportedException">該組件是動態組件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">無法載入相依組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
      <summary>取得指定之檔案的 <see cref="T:System.IO.FileStream" />，這個指定之檔案位於這個組件的資訊清單檔案表中。</summary>
      <param name="name">指定檔案的名稱。 切勿包括該檔案的路徑。</param>
      <returns>包含指定之檔案的資料流，如果找不到檔案則為 <see langword="null" />。</returns>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 參數是空字串 ("")。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles">
      <summary>取得組件資訊清單檔案表中的檔案。</summary>
      <returns>包含檔案之資料流的陣列。</returns>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.BadImageFormatException">檔案不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
      <summary>取得組件資訊清單檔案表中的檔案，指定是否要包含資源模組。</summary>
      <param name="getResourceModules">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>包含檔案之資料流的陣列。</returns>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.BadImageFormatException">檔案不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetForwardedTypes" />
    <member name="M:System.Reflection.Assembly.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules">
      <summary>取得做為這個組件部分的所有載入模組。</summary>
      <returns>模組陣列。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
      <summary>取得做為這個組件部分的所有載入模組，指定是否要包含資源模組。</summary>
      <param name="getResourceModules">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>模組陣列。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>傳回指定資源已保存方式的資訊。</summary>
      <param name="resourceName">區分大小寫的資源名稱。</param>
      <returns>物件，其中會填入有關資源拓撲的資訊，如果找不到資源，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceName" /> 參數是空字串 ("")。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>傳回這個組件中的所有資源名稱。</summary>
      <returns>陣列，包含所有資源的名稱。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>載入來自這個組件的指定資訊清單資源。</summary>
      <param name="name">所要求的資訊清單資源的區分大小寫名稱。</param>
      <returns>資訊清單資源，而如果編譯期間未指定資源或是呼叫者看不到該資源，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 參數是空字串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.IO.IOException" />。  


            

 無法載入找到的檔案。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的組件。</exception>
      <exception cref="T:System.NotImplementedException">資源長度大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>從這個組件載入指定資訊清單資源，由指定類型的命名空間限定範圍。</summary>
      <param name="type">類型，其命名空間是用來限定資訊清單資源名稱的範圍。</param>
      <param name="name">所要求的資訊清單資源的區分大小寫名稱。</param>
      <returns>資訊清單資源，而如果編譯期間未指定資源或是呼叫者看不到該資源，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 參數是空字串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的組件。</exception>
      <exception cref="T:System.NotImplementedException">資源長度大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModule(System.String)">
      <summary>取得這個組件中的指定模組。</summary>
      <param name="name">所要求的模組名稱。</param>
      <returns>正在接受要求的模組，如果找不到模組，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 參數是空字串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>取得所有屬於這個組件的模組。</summary>
      <returns>模組陣列。</returns>
      <exception cref="T:System.IO.FileNotFoundException">要載入的模組未指定副檔名。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
      <summary>取得所有屬於這個組件的模組，指定是否要包含資源模組。</summary>
      <param name="getResourceModules">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>模組陣列。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>取得這個組件的 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <returns>物件，包含這個組件的完整剖析顯示名稱。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>取得這個組件的 <see cref="T:System.Reflection.AssemblyName" />，設定按照 <paramref name="copiedName" /> 指定的基礎碼。</summary>
      <param name="copiedName">若要將 <see langword="true" /> 設定為組件陰影複製以後的位置，則為 <see cref="P:System.Reflection.Assembly.CodeBase" />；若要將 <see langword="false" /> 設定為原始位置，則為 <see cref="P:System.Reflection.Assembly.CodeBase" />。</param>
      <returns>物件，包含這個組件的完整剖析顯示名稱。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用要重新執行個體化這個組件所需的所有資料，取得序列化 (Serialization) 資訊。</summary>
      <param name="info">要被填入 (Populate) 序列化資訊的物件。</param>
      <param name="context">序列化的目的端內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
      <summary>取得這個組件參考之所有組件的 <see cref="T:System.Reflection.AssemblyName" /> 物件。</summary>
      <returns>陣列，包含這個組件參考之所有組件的完整剖析顯示名稱。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>取得指定文化特性的附屬組件。</summary>
      <param name="culture">指定的文化特性。</param>
      <returns>指定的附屬組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找不到具有相符檔案名稱的附屬組件，但 <see langword="CultureInfo" /> 不符合所指定者。</exception>
      <exception cref="T:System.BadImageFormatException">此附屬組件不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>取得指定文化特性的附屬組件指定版本。</summary>
      <param name="culture">指定的文化特性。</param>
      <param name="version">附屬組件的版本。</param>
      <returns>指定的附屬組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到檔案名稱相符的附屬組件，但 <see langword="CultureInfo" /> 或版本不符合所指定者。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到組件。</exception>
      <exception cref="T:System.BadImageFormatException">此附屬組件不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>取得具有組件執行個體中指定名稱的 <see cref="T:System.Type" /> 物件。</summary>
      <param name="name">類型的完整名稱。</param>
      <returns>物件，表示指定的類別，如果找不到類別，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.IO.IOException" />。  

          找到 
          <paramref name="name" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="name" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="name" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>取得具有組件執行個體中指定之名稱的 <see cref="T:System.Type" /> 物件，並在找不到類型時選擇性地擲回例外狀況。</summary>
      <param name="name">類型的完整名稱。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，<see langword="false" /> 則表示傳回 <see langword="null" />。</param>
      <returns>表示指定之類別的物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 無效。  
-或- 
<paramref name="name" /> 的長度超過 1024 個字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="name" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="name" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="name" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>使用忽略大小寫和找不到類型時擲回例外狀況的選項，取得具有組件執行個體中指定之名稱的 <see cref="T:System.Type" /> 物件。</summary>
      <param name="name">類型的完整名稱。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，<see langword="false" /> 則表示傳回 <see langword="null" />。</param>
      <param name="ignoreCase">若要忽略類型名稱的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>表示指定之類別的物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 無效。  
-或- 
<paramref name="name" /> 的長度超過 1024 個字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="name" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="name" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="name" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>取得定義於這個組件中的類型。</summary>
      <returns>陣列，包含在這個組件中定義的所有類型。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">此組件包含一或多個無法載入的類型。 這個例外狀況的 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 屬性所傳回的陣列包含載入每個類型的 <see cref="T:System.Type" /> 物件和無法載入的每個類型的 <see langword="null" />，而 <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> 屬性包含無法載入之每個類型的例外狀況。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.GlobalAssemblyCache">
      <summary>取得值，指出組件是否從全域組件快取載入。</summary>
      <returns>如果組件是從全域組件快取載入，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.HostContext">
      <summary>取得用來載入組件的主應用程式內容。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，表示用來載入組件的主應用程式內容 (如果有)。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
      <summary>取得字串，表示儲存在含有資訊清單之檔案中的 Common Language Runtime (CLR) 版本。</summary>
      <returns>CLR 版本資料夾名稱。 這不是完整的路徑。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.IsCollectible">
      <summary>取得指出此組件是否在可回收 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中保存的值。</summary>
      <returns>
        <see langword="true" />如果這個元件保留在可回收<see cref="T:System.Runtime.Loader.AssemblyLoadContext" />中, 則為, <see langword="false" />否則為。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>指出是否已將指定的屬性套用至組件。</summary>
      <param name="attributeType">這個組件中要加以檢查的屬性類型。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>如果已將屬性套用至組件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 使用無效的類型。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
      <summary>取得值，這個值表示目前組件是否使用反映發出在目前處理序中動態產生。</summary>
      <returns>如果目前組件是在目前處理序中動態產生，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.IsFullyTrusted">
      <summary>取得值，這個值表示目前組件是否以完全信任來載入。</summary>
      <returns>如果目前組件是以完全信任來載入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
      <summary>載入具有通用物件檔案格式 (Common Object File Format，COFF) 之映像的組件 (包含發出的組件)。 組件會載入至呼叫端的應用程式定義域。</summary>
      <param name="rawAssembly">位元組陣列，該陣列是以 COFF 為基礎的影像，其中包含發出的組件。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="rawAssembly" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
      <summary>使用通用物件檔案格式 (COFF) 映像載入組件，其中包含已發出的組件，並可選擇性地包含組件的符號。 組件會載入至呼叫端的應用程式定義域。</summary>
      <param name="rawAssembly">位元組陣列，該陣列是以 COFF 為基礎的影像，其中包含發出的組件。</param>
      <param name="rawSymbolStore">位元組陣列，包含表示組件符號的未經處理位元組。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="rawAssembly" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
      <summary>載入組件，指定其 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <param name="assemblyRef">描述要載入之組件的物件。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyRef" />。</exception>
      <exception cref="T:System.IO.FileLoadException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.IO.IOException" />。  


            

 無法載入找到的檔案。
-或-
<paramref name="assemblyRef" /> 指定遠端組件，但已停用在遠端組件中執行程式碼的能力。 請參閱 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> 不是有效的組件。 -或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="assemblyRef" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>載入組件，其名稱指定為完整格式。</summary>
      <param name="assemblyString">組件名稱的完整格式。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> 是零長度字串</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyString" />。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="assemblyString" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFile(System.String)">
      <summary>載入指定路徑上組件檔案的內容。</summary>
      <param name="path">要載入的完整檔案路徑。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 引數不是絕對路徑。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。
-或-
已停用在遠端組件中執行程式碼的能力。 請參閱 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path" /> 參數為空字串 ("") 或不存在。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="path" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="path" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
      <summary>載入組件，指定其檔案名稱或路徑。</summary>
      <param name="assemblyFile">檔案的名稱或路徑，包含組件的資訊清單。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到<paramref name="assemblyFile" /> ，或您想載入的模組並未指定檔案的副檔名。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。
-或-
已停用在遠端組件中執行程式碼的能力。 請參閱 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件，例如 64 位元處理序中的 32 位元組件。 如需詳細資訊，請參閱例外狀況主題。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.Security.SecurityException">指定了並非以 "file://" 開頭的程式碼基底，且沒有必要的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 參數是空字串 ("")。</exception>
      <exception cref="T:System.IO.PathTooLongException">組件名稱超過系統定義的長度上限。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>指定組件的檔案名稱或路徑，雜湊值和雜湊演算法，來載入組件。</summary>
      <param name="assemblyFile">檔案的名稱或路徑，包含組件的資訊清單。</param>
      <param name="hashValue">計算的雜湊碼值。</param>
      <param name="hashAlgorithm">雜湊演算法，用於雜湊檔案和用來產生強式名稱 (Strong Name)。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />，或您想載入的模組並未指定檔案的副檔名。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。
-或-
已停用在遠端組件中執行程式碼的能力。 請參閱 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件，例如 64 位元處理序中的 32 位元組件。 如需詳細資訊，請參閱例外狀況主題。  
-或- 
 用以編譯 <paramref name="assemblyFile" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.Security.SecurityException">指定了並非以 "file://" 開頭的程式碼基底，且沒有必要的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 參數是空字串 ("")。</exception>
      <exception cref="T:System.IO.PathTooLongException">組件名稱超過系統定義的長度上限。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])">
      <summary>使用通用物件檔案格式 (COFF) 為基礎的映像 (包含發出的模組) 或是資源檔，載入組件的內部模組。</summary>
      <param name="moduleName">模組的名稱。 這個字串必須對應於這個組件的資訊清單中的檔案名稱。</param>
      <param name="rawModule">位元組陣列，是以 COFF 為基礎而含有發出模組的映像，或是資源。</param>
      <returns>載入的模組。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> 或 <paramref name="rawModule" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> 不符合這個組件的資訊清單中某個檔案項目。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> 不是有效的模組。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
      <summary>使用通用物件檔案格式 (COFF) 為基礎的映像 (包含發出的模組) 或是資源檔，載入組件的內部模組。 表示模組符號的未經處理位元組也載入。</summary>
      <param name="moduleName">模組的名稱。 這個字串必須對應於這個組件的資訊清單中的檔案名稱。</param>
      <param name="rawModule">位元組陣列，是以 COFF 為基礎而含有發出模組的映像，或是資源。</param>
      <param name="rawSymbolStore">位元組陣列，包含表示模組符號的未經處理位元組。 如果這是資源檔，則必須是 <see langword="null" />。</param>
      <returns>載入的模組。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> 或 <paramref name="rawModule" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> 不符合這個組件的資訊清單中某個檔案項目。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> 不是有效的模組。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String)">
      <summary>使用部分的名稱，從應用程式目錄或從全域組件快取載入組件。</summary>
      <param name="partialName">組件的顯示名稱。</param>
      <returns>載入的組件。 如果找不到 <paramref name="partialName" />，這個方法會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partialName" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="partialName" />。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.Location">
      <summary>取得包含資訊清單之載入檔的完整路徑或 UNC 位置。</summary>
      <returns>包含資訊清單之載入檔的位置。 如果載入檔已經過陰影複製，則該位置就是陰影複製後的檔案位置。 如果組件是從位元組陣列載入 (例如，使用 <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> 方法多載時)，則傳回值就是空字串 ("")。</returns>
      <exception cref="T:System.NotSupportedException">目前的組件是以 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 物件表示的動態組件。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
      <summary>取得包含目前組件之資訊清單的模組。</summary>
      <returns>包含組件之資訊清單的模組。</returns>
    </member>
    <member name="E:System.Reflection.Assembly.ModuleResolve">
      <summary>發生於 Common Language Runtime 類別載入器無法經由一般方法解析對組件內部模組的參考時。</summary>
    </member>
    <member name="P:System.Reflection.Assembly.Modules">
      <summary>取得包含這個組件中模組的集合。</summary>
      <returns>包含此組件中之模組的集合。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>表示兩個 <see cref="T:System.Reflection.Assembly" /> 物件是否相等。</summary>
      <param name="left">與 <paramref name="right" /> 比較的組件。</param>
      <param name="right">與 <paramref name="left" /> 比較的組件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>表示兩個 <see cref="T:System.Reflection.Assembly" /> 物件是否不相等。</summary>
      <param name="left">與 <paramref name="right" /> 比較的組件。</param>
      <param name="right">與 <paramref name="left" /> 比較的組件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ReflectionOnly">
      <summary>取得 <see cref="T:System.Boolean" /> 值，指出這個組件是否已載入僅限反映的內容中。</summary>
      <returns>如果這個組件已載入僅限反映的內容 (而非執行內容) 中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])">
      <summary>從以通用物件檔案格式 (COFF) 為基礎的映像 (包含發出的組件) 載入組件。 這個組件會載入呼叫端應用程式定義域之僅限反映的內容中。</summary>
      <param name="rawAssembly">位元組陣列，該陣列是以 COFF 為基礎的影像，其中包含發出的組件。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="rawAssembly" />。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入 <paramref name="rawAssembly" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援此成員。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)">
      <summary>將組件載入僅限反映的內容中，並指定其顯示名稱。</summary>
      <param name="assemblyString">組件的顯示名稱，如同 <see cref="P:System.Reflection.AssemblyName.FullName" /> 屬性所傳回。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> 為空字串 ("")。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyString" />。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="assemblyString" />，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="assemblyString" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援此成員。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)">
      <summary>將組件載入僅限反映的內容中，並指定其路徑。</summary>
      <param name="assemblyFile">檔案的路徑，該檔案包含組件的資訊清單。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />，或您想載入的模組並未指定檔案的副檔名。</exception>
      <exception cref="T:System.IO.FileLoadException">找到<paramref name="assemblyFile" /> ，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。  
-或- 
目前載入的是通用語言執行平台 2.0 版或更新版本，且已使用更新的版本來編譯 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.Security.SecurityException">指定了並非以 "file://" 開頭的程式碼基底，且沒有必要的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">組件名稱超過系統定義的長度上限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 為空字串 ("")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援此成員。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.SecurityRuleSet">
      <summary>取得值，這個值指出應針對此組件強制執行的 Common Language Runtime (CLR) 安全性規則組合。</summary>
      <returns>CLR 對這個組件強制執行的安全性規則組合。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>傳回組件的完整名稱，也稱為顯示名稱。</summary>
      <returns>組件的完整名稱或類別名稱 (如果無法判斷組件的完整名稱)。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)">
      <summary>將組件載入到載入內容中，並略過部分安全性檢查。</summary>
      <param name="assemblyFile">檔案的名稱或路徑，包含組件的資訊清單。</param>
      <returns>載入的組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到<paramref name="assemblyFile" /> ，或您想載入的模組並未指定檔案的副檔名。</exception>
      <exception cref="T:System.IO.FileLoadException">無法載入找到的檔案。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。  
-或- 
 用以編譯 <paramref name="assemblyFile" /> 的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.Security.SecurityException">指定了並非以 "file://" 開頭的程式碼基底，且沒有必要的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 參數是空字串 ("")。</exception>
      <exception cref="T:System.IO.PathTooLongException">組件名稱超過系統定義的長度上限。</exception>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
      <summary>指定要雜湊組件中所有檔案的演算法。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>使用其中一個 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> 成員表示雜湊演算法，以指定的雜湊演算法初始化 <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> 類別新執行個體。</summary>
      <param name="algorithmId">
        <see langword="AssemblyHashAlgorithm" /> 的成員，表示雜湊演算法。</param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
      <summary>使用不帶正負號的整數 (Unsigned Integer) 表示雜湊演算法，以指定的雜湊演算法初始化 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> 類別新執行個體。</summary>
      <param name="algorithmId">不帶正負號的整數，表示雜湊演算法。</param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
      <summary>取得組件資訊清單內容的雜湊演算法。</summary>
      <returns>不帶正負號的整數，表示組件雜湊演算法。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>定義組件資訊清單的公司名稱自訂屬性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> 類別的新執行個體。</summary>
      <param name="company">公司名稱資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>取得公司名稱資訊。</summary>
      <returns>字串，包含公司名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>指定組件的組建組態，例如零售或偵錯。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> 類別的新執行個體。</summary>
      <param name="configuration">組件組態。</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>取得組件組態資訊。</summary>
      <returns>字串，包含組件組態資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyContentType">
      <summary>提供組件所包含的程式碼類型的相關資訊。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.Default">
      <summary>組件包含 .NET Framework 程式碼。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.WindowsRuntime">
      <summary>組件包含 Windows 執行階段 程式碼。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>定義組件資訊清單的著作權自訂屬性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> 類別的新執行個體。</summary>
      <param name="copyright">著作權資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>取得著作權資訊。</summary>
      <returns>字串，包含著作權資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>指定組件所支援的文化特性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>使用屬性化組件所支援的文化特性 (Culture)，初始化 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 類別的新執行個體。</summary>
      <param name="culture">屬性化組件所支援的文化特性 (Culture)。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>取得屬性化組件所支援的文化特性 (Culture)。</summary>
      <returns>字串，含有所支援的文化特性的名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的易記預設別名 (Alias)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> 類別的新執行個體。</summary>
      <param name="defaultAlias">組件預設別名資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>取得預設別名資訊。</summary>
      <returns>字串，包含預設別名資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>指定建立組件 (Assembly) 時不要完整簽署。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> 類別的新執行個體。</summary>
      <param name="delaySign">如果啟動這個屬性所表示的功能，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>取得值，表示屬性的狀態。</summary>
      <returns>如果這個組件已經建置為延遲簽署，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>提供組件的文字描述。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description">組件描述。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>取得組件描述資訊。</summary>
      <returns>字串，包含組件描述。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>指示編譯器使用 Win32 檔案版本資源的指定版本號碼。 Win32 檔案版本不需要與組件的版本號碼相同。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> 類別的新執行個體，指定檔案版本。</summary>
      <param name="version">檔案版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>取得 Win32 檔案版本資源名稱。</summary>
      <returns>字串，包含檔案版本資源名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>為組件 (Assembly) 指定 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合，描述 Just-In-Time (JIT) 編譯器選項、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰 (Public Key)。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)">
      <summary>使用轉換成整數值的指定 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 旗標組合，來初始化 <see cref="T:System.Reflection.AssemblyNameFlags" /> 類別的新執行個體。</summary>
      <param name="assemblyFlags">轉換成整數值的 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標位元組合，表示 Just-In-Time (JIT) 編譯器選項、壽命、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰。</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>使用指定的 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 旗標組合，來初始化 <see cref="T:System.Reflection.AssemblyNameFlags" /> 類別的新執行個體。</summary>
      <param name="assemblyFlags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合，表示 Just-In-Time (JIT) 編譯器選項、壽命、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰。</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)">
      <summary>使用轉換成不帶正負號的整數值之指定 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 旗標組合，來初始化 <see cref="T:System.Reflection.AssemblyNameFlags" /> 類別的新執行個體。</summary>
      <param name="flags">轉換成不帶正負號的整數值之 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標位元組合，表示 Just-In-Time (JIT) 編譯器選項、壽命、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>取得整數值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的組合，而這些旗標是在建立此屬性執行個體時所指定。</summary>
      <returns>整數值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.Flags">
      <summary>取得不帶正負號的整數 (Unsigned Integer) 值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的組合，這些旗標是在建立此屬性執行個體時所指定。</summary>
      <returns>不帶正負號的整數值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>定義組件資訊清單的其他版本資訊。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="informationalVersion">組件版本資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>取得版本資訊。</summary>
      <returns>字串，包含版本資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>指定檔案的名稱，該檔案包含用來產生強式名稱 (Strong Name) 的金鑰組 (Key Pair)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>使用檔案名稱來初始化 <see langword="AssemblyKeyFileAttribute" /> 類別的新執行個體，該檔案包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <param name="keyFile">包含金鑰組的檔案名稱。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>取得檔案的名稱，該檔案包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <returns>字串，含有包含金鑰組的檔案名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>指定 CSP 內包含用來產生強式名稱金鑰組的金鑰容器名稱。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>使用容器名稱來初始化 <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> 類別的新執行個體，該容器包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <param name="keyName">包含金鑰組的容器名稱。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>取得容器的名稱，該容器包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <returns>字串，包含具有相關金鑰組之容器的名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>定義裝飾組件之金鑰/值的中繼資料組。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的中繼資料金鑰和值，初始化 <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> 類別的新執行個體。</summary>
      <param name="key">中繼資料金鑰。</param>
      <param name="value">中繼資料值。</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>取得中繼資料金鑰。</summary>
      <returns>中繼資料金鑰。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>取得中繼資料值。</summary>
      <returns>中繼資料值。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>完整描述組件的唯一識別。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyName" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
      <summary>使用指定的顯示名稱，初始化 <see cref="T:System.Reflection.AssemblyName" /> 類別的新執行個體。</summary>
      <param name="assemblyName">組件的顯示名稱，如同 <see cref="P:System.Reflection.AssemblyName.FullName" /> 屬性所傳回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 是零長度字串。</exception>
      <exception cref="T:System.IO.FileLoadException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.IO.IOException" />。  


            

 找不到或無法載入參考的組件。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
      <summary>建立這個 <see cref="T:System.Reflection.AssemblyName" /> 物件的複本。</summary>
      <returns>物件，是這個 <see cref="T:System.Reflection.AssemblyName" /> 物件的複本。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
      <summary>取得或設定做為 URL 之組件的位置。</summary>
      <returns>字串，是組件的 URL 位置。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.ContentType">
      <summary>取得或設定值，表示組件包含何種內容類型。</summary>
      <returns>表示組件包含何種內容類型的值。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>取得或設定組件所支援的文化特性。</summary>
      <returns>物件，表示組件所支援的文化特性。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureName">
      <summary>取得或設定與組建相關聯的文化特性名稱。</summary>
      <returns>文化特性名稱。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.EscapedCodeBase">
      <summary>取得代表基礎碼的 URI，包括逸出字元。</summary>
      <returns>具有逸出字元的 URI。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>取得或設定組件的屬性。</summary>
      <returns>表示組件之屬性的值。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>取得組件的完整名稱，也稱為顯示名稱。</summary>
      <returns>字串，是組件的完整名稱，也稱為顯示名稱。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
      <summary>取得指定檔案的 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <param name="assemblyFile">要傳回其 <see cref="T:System.Reflection.AssemblyName" /> 之組件的路徑。</param>
      <returns>表示指定之組件檔的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 無效，如具有無效文化特性的組件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有路徑探索權限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的組件。</exception>
      <exception cref="T:System.IO.FileLoadException">已使用兩組不同的辨識項載入組件或模組兩次。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>取得序列化 (Serialization) 資訊，包含重新建立這個 <see langword="AssemblyName" /> 執行個體所需的全部資料。</summary>
      <param name="info">要被填入 (Populate) 序列化資訊的物件。</param>
      <param name="context">序列化的目的端內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>取得組件的公開金鑰。</summary>
      <returns>位元組陣列，包含組件的公開金鑰。</returns>
      <exception cref="T:System.Security.SecurityException">已提供公開金鑰 (例如，藉由使用 <see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /> 方法)，但未提供公開金鑰語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>取得公開金鑰語彙基元，即是用於應用程式或組件簽名的公開金鑰 SHA-1 雜湊的最後 8 位元組。</summary>
      <returns>包含公開金鑰語彙基元的位元組陣列。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
      <summary>取得或設定組件資訊清單 (Assembly Manifest) 所使用的雜湊演算法。</summary>
      <returns>組件資訊清單所使用的雜湊演算法。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.KeyPair">
      <summary>取得或設定公開或私密的密碼編譯金鑰組，此金鑰組可用來建立組件的強式名稱簽章。</summary>
      <returns>要用來建立組件之強式名稱的公開及私密密碼編譯金鑰組。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>取得或設定組件的簡單名稱。 這通常 (但不一定) 是組件之資訊清單檔的檔名 (不含其副檔名)。</summary>
      <returns>組件的簡單名稱。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
      <summary>實作 <see cref="T:System.Runtime.Serialization.ISerializable" /> 介面並在還原序列化完成時，由還原序列化事件回呼。</summary>
      <param name="sender">還原序列化之事件的來源。</param>
    </member>
    <member name="P:System.Reflection.AssemblyName.ProcessorArchitecture">
      <summary>取得或設定值，這個值可識別可執行檔之目標平台的處理器以及每個字組的位元 (Bits-per-word)。</summary>
      <returns>其中一個列舉值，這個值可識別可執行檔之目標平台的處理器以及每個字組的位元。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
      <summary>傳回表示兩個組件名稱是否相同的值。 比較是根據簡單組件名稱進行。</summary>
      <param name="reference">參考組件名稱。</param>
      <param name="definition">要與參考組件比較的組件名稱。</param>
      <returns>如果簡單組件名稱相同則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>設定可識別組件的公開金鑰。</summary>
      <param name="publicKey">位元組陣列，包含組件的公開金鑰。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>設定公開金鑰語彙基元，即是用於簽署應用程式或組件之公開金鑰 SHA-1 雜湊的最後 8 個位元組。</summary>
      <param name="publicKeyToken">位元組陣列，包含組件的公開金鑰語彙基元。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>傳回組件的完整名稱，也稱為顯示名稱。</summary>
      <returns>組件的完整名稱，如果無法判斷組件的完整名稱，則為類別名稱。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>取得或設定組件的主要、次要、組建和修訂編號。</summary>
      <returns>物件，表示組件的主要、次要、組建和修訂編號。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
      <summary>取得或設定與組件和其他組件相容性相關的資訊。</summary>
      <returns>值，表示有關組件和其他組件相容性的資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>提供有關 <see cref="T:System.Reflection.Assembly" /> 參考的資訊。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
      <summary>指定已停用組件的 Just-In-Time (JIT) 編譯器最佳化。 這與成員名稱所表示的意義剛好相反。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
      <summary>指定已啟用組件的 Just-In-Time (JIT) 編譯器 (Compiler) 追蹤 (Tracking)。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>指定沒有旗標作用中。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>指定公開金鑰是由完整公開金鑰而非公開金鑰語彙基元 (Token) 所形成。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>指定組件可以在執行階段重定成不同發行者 (Publisher) 的組件。 這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的產品名稱自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyProductAttribute" /> 類別的新執行個體。</summary>
      <param name="product">產品名稱資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>取得產品名稱資訊。</summary>
      <returns>字串，包含產品名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>從舊的、較簡單的強式名稱金鑰移轉到具有較強的雜湊演算法、較大的金鑰。</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的公開金鑰和副署，建立 <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> 類別的新執行個體。</summary>
      <param name="publicKey">公開或識別金鑰。</param>
      <param name="countersignature">副署，也就是強式名稱金鑰的簽章金鑰部分。</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>取得這個組件的強式名稱副署。</summary>
      <returns>此簽章金鑰的副署。</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>取得用來簽署組件之強式名稱的公開金鑰。</summary>
      <returns>這個組件的公開金鑰。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>指定組件的說明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTitleAttribute" /> 類別的新執行個體。</summary>
      <param name="title">組件標題。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>取得組件標題資訊。</summary>
      <returns>組件標題。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>定義組件資訊清單的商標自訂屬性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> 類別的新執行個體。</summary>
      <param name="trademark">商標資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>取得商標資訊。</summary>
      <returns>
        <see langword="String" />，包含商標資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>指定使用屬性之組件的版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>使用正在屬性化之組件的版本號碼，初始化 <see langword="AssemblyVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="version">使用屬性之組件的版本號碼。</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>取得使用屬性之組件的版本號碼。</summary>
      <returns>字串，包含組件的版本號碼。</returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>從候選者清單中選取成員，並執行型別轉換，從實質引數 (Actual Argument) 型別轉換成型式引數 (Formal Argument) 型別。</summary>
    </member>
    <member name="M:System.Reflection.Binder.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.Binder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>根據指定的條件，從一組指定的欄位中選取欄位。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的欄位集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的欄位集合，通常是因為這些欄位具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="value">用來找出相符欄位的欄位值。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體 (Instance)，用來控制強制型轉型別的繫結器 (Binder) 實作中資料型別的強制型轉 (Coercion)。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。  
注意：例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同的文化特性中有不同的表示方式。 預設的繫結器不會處理這種字串強制型轉。</param>
      <returns>符合的欄位。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則包含同樣都與 <paramref name="value" /> 相符的多個欄位。 例如，<paramref name="value" /> 包含的 <c>MyClass</c> 物件會執行 <c>IMyClass</c> 介面，而 <paramref name="match" /> 包含 <c>MyClass</c> 類型的欄位和 <c>IMyClass</c> 類型的欄位。</exception>
      <exception cref="T:System.MissingFieldException">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則不會包含可以接受 <paramref name="value" /> 的欄位。</exception>
      <exception cref="T:System.NullReferenceException">如果是預設繫結器，<paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 則會是 <see langword="null" /> 或空白陣列。  
-或- 
 <paramref name="bindingAttr" /> 將包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="value" /> 則會是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>根據提供的引數，從一組指定的方法中選取要叫用 (Invoke) 的方法。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的方法集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="args">傳入的引數。 繫結器可能會變更此陣列中的引數順序；例如，如果使用 <paramref name="names" /> 參數來指定位置順序以外的其他順序，預設繫結器就會變更引數的順序。 如果繫結器實作強制型轉了引數型別 (Argument Type)，引數的型別和值也可能會變更。</param>
      <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。 預設繫結器實作時並不會使用這個參數。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體 (Instance)，用來控制強制型轉型別的繫結器 (Binder) 實作中資料型別的強制型轉 (Coercion)。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。  
注意：例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同的文化特性中有不同的表示方式。 預設的繫結器不會處理這種字串強制型轉。</param>
      <param name="names">如果比對時必須考慮參數名稱，便為參數名稱；如果只將引數視為單純的位置引數，則為 <see langword="null" />。 例如，如果位置順序中並未提供引數，您就必須使用參數名稱。</param>
      <param name="state">在此方法傳回之後，<paramref name="state" /> 就會包含繫結器提供的物件，用以記錄引數重新調整順序。 繫結器會建立這個物件，而且也是這個物件的唯一使用者。 如果 <see langword="null" /> 傳回時 <paramref name="state" /> 不是 <see langword="BindToMethod" />，而且您想要將 <paramref name="state" /> 還原成原來的順序，使您可以擷取 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" /> 參數) 的值，就必須將 <paramref name="args" /> 傳遞至 <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> 方法。</param>
      <returns>符合的方法。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="args" /> 相符的多個方法。 例如，<paramref name="args" /> 包含的 <c>MyClass</c> 物件會實作 <c>IMyClass</c> 介面，而 <paramref name="match" /> 則包含採用 <c>MyClass</c> 的方法及採用 <c>IMyClass</c> 的方法。</exception>
      <exception cref="T:System.MissingMethodException">如果是預設繫結器，<paramref name="match" /> 不會包含可以接受 <paramref name="args" /> 中提供之引數的方法。</exception>
      <exception cref="T:System.ArgumentException">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。</exception>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>將指定的 <see langword="Object" /> 型別變更為指定的 <see langword="Type" />。</summary>
      <param name="value">要變更為新 <see langword="Type" /> 的物件。</param>
      <param name="type">
        <paramref name="value" /> 將要變成的新 <see langword="Type" />。</param>
      <param name="culture">用來控制資料型別之強制型轉的 <see cref="T:System.Globalization.CultureInfo" /> 執行個體。 如果 <paramref name="culture" /> 為 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。  
注意：例如，將表示 1000 的 <see langword="String" /> 轉換為 <see langword="Double" /> 值時必須使用這個參數，因為 1000 在不同文化特性中有不同的表示方式。</param>
      <returns>物件，含有做為新型別的指定值。</returns>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>在從 <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> 傳回時，當 <paramref name="args" /> 引數來自 <see langword="BindToMethod" /> 時，將還原為本來的狀態。</summary>
      <param name="args">傳入的實質引數。 引數的型別和值都可以被變更。</param>
      <param name="state">繫結器提供的物件，記錄引數重新調整順序。</param>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>根據引數型別，從一組指定的方法中選取方法。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的方法集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="types">用來找出相符方法的參數型別。</param>
      <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</param>
      <returns>符合的方法，如果找到的話，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="types" /> 所描述之參數型別相符的多個方法。 例如，<paramref name="types" /> 中的陣列會包含 <c>MyClass</c> 的 <see cref="T:System.Type" /> 物件，而 <paramref name="match" /> 中的陣列則包含可取得 <c>MyClass</c> 之基底類別的方法，以及可取得 <c>MyClass</c> 所實作之介面的方法。</exception>
      <exception cref="T:System.ArgumentException">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。  
-或- 
<paramref name="types" /> 的一個項目衍生自 <see cref="T:System.Type" />，但不是 <see langword="RuntimeType" /> 型別。</exception>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>根據指定的條件，從一組指定的屬性中選取屬性。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的屬性集合。 例如，當 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 物件時，這個參數就會指定已由反映判定為可能相符的屬性集合，通常是因為這些屬性具有正確的成員名稱。 <see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="returnType">相符屬性必須有的傳回值。</param>
      <param name="indexes">要被搜尋的索引屬性型別。 用於索引屬性，像是類別的索引子。</param>
      <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</param>
      <returns>符合的屬性。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="returnType" /> 和 <paramref name="indexes" /> 相符的多個屬性。</exception>
      <exception cref="T:System.ArgumentException">如果是預設繫結器 (Binder)，<paramref name="match" /> 會是 <see langword="null" /> 或空白陣列。</exception>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>指定控制繫結的旗標和由反映執行的成員和類型搜尋方式。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
      <summary>指定反映應該建立指定類型的執行個體。 呼叫符合指定引數的建構函式。 所提供的成員名稱會被忽略。 如果未指定查閱類型，則會套用 (Instance | Public)。 無法呼叫類型初始設定式。  
這個旗標會傳遞至 <see langword="InvokeMember" /> 方法以叫用建構函式。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>指定只應考慮在所提供類型之階層層級宣告的成員。 不考慮繼承的成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
      <summary>指定不定義任何繫結旗標。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DoNotWrapExceptions" />
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>指定所提供的引數類型必須完全符合對應的型式參數類型。 如果呼叫端提供非 Null 的 <see langword="Binder" /> 物件，則反映會擲回例外狀況，因為那表示呼叫端正在提供會選擇適當方法的 <see langword="BindToXXX" /> 實作。 預設繫結器會忽略此旗標，而自訂繫結器則可實作此旗標的語意。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>指定應傳回在階層架構上的公用和受保護的靜態成員。 不會傳回繼承類別中的私用靜態成員。 靜態成員包括欄位、方法、事件和屬性。 不會傳回巢狀類型。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
      <summary>指定應傳回所指定欄位的值。  
這個旗標會傳遞至 <see langword="InvokeMember" /> 方法以取得欄位值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
      <summary>指定應傳回所指定屬性的值。  
這個旗標會傳遞至 <see langword="InvokeMember" /> 方法以叫用屬性 getter。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>指定繫結時不應考慮成員名稱的大小寫。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
      <summary>用於 COM Interop 以指定可忽略成員的傳回值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>指定要在搜尋中包含執行個體成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
      <summary>指定要叫用方法。 這不能是建構函式或類型初始設定式。  
這個旗標會傳遞至 <see langword="InvokeMember" /> 方法以叫用方法。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>指定要在搜尋中包含非公用成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>傳回成員集，其參數計數會符合所提供的引數數目。 這個繫結旗標可用於其參數具有預設值的方法，以及具有變數引數 (varargs) 的方法。 這個旗標應該只搭配 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 使用。具有預設值的參數僅限用於省略最後一個引數的呼叫。 它們必須是最後一個引數。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>指定要在搜尋中包含公用成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
      <summary>指定應叫用 COM 物件上的 <see langword="PROPPUT" /> 成員。 <see langword="PROPPUT" /> 會指定使用值的屬性設定函式。 如果屬性同時具有 <see langword="PROPPUT" /> 和 <see langword="PROPPUTREF" />，而且必須區分呼叫哪一個，則使用 <see langword="PutDispProperty" />。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
      <summary>指定應叫用 COM 物件上的 <see langword="PROPPUTREF" /> 成員。 <see langword="PROPPUTREF" /> 會指定使用參考而非值的屬性設定函式。 如果屬性同時具有 <see langword="PROPPUT" /> 和 <see langword="PROPPUTREF" />，而且必須區分呼叫哪一個，則使用 <see langword="PutRefDispProperty" />。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
      <summary>指定應設定所指定欄位的值。  
這個旗標會傳遞至 <see langword="InvokeMember" /> 方法以設定欄位值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
      <summary>指定應設定所指定屬性的值。 對於 COM 屬性來說，指定這個繫結旗標等同於指定 <see langword="PutDispProperty" /> 和 <see langword="PutRefDispProperty" />。  
這個旗標會傳遞至 <see langword="InvokeMember" /> 方法以叫用屬性 setter。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>指定要在搜尋中包含靜態成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
      <summary>未實作。</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>定義方法的有效呼叫慣例 (Calling Convention)。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>指定可能會使用 <see langword="Standard" /> 還是 <see langword="VarArgs" /> 呼叫慣例。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>指定簽章為函式指標簽章，表示呼叫執行個體或虛擬方法 (非靜態方法)。 如果設定 <see langword="ExplicitThis" />，也必須設定 <see langword="HasThis" />。 傳遞至呼叫方法的第一個引數仍是 <see langword="this" /> 指標，但第一個引數的型別目前未知。 因此，描述 <see langword="this" /> 指標之型別 (或類別) 的語彙基元會明確地儲存到它的中繼資料 (Metadata) 簽章中。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>指定執行個體或虛擬方法 (非靜態的方法)。 在執行階段期間，呼叫的方法傳遞指標至目標物件做為它的第一個引數 (<see langword="this" /> 指標)。 儲存在中繼資料的簽章並不包含這第一個引數的型別，因為已知方法，而且其擁有人類別可以從中繼資料找到。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>指定如同 Common Language Runtime 所判斷的預設呼叫慣例。 靜態方法要使用此呼叫慣例。 若為執行個體或虛擬方法，則需使用 <see langword="HasThis" />。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>指定有變數引數之方法的呼叫慣例。</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>探索類別建構函式的屬性，並提供建構函式中繼資料的存取。</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ConstructorInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>表示類別建構函式方法儲存在中繼資料時的名稱。 這個名稱永遠是「.ctor」。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>叫用包含指定參數的執行個體所反映的建構函式，為不常用的參數提供預設值。</summary>
      <param name="parameters">符合這個建構函式參數的數目、順序和型別 (在預設繫結器的條件約束下) 的值陣列。 如果這個建構函式不接受任何參數，則使用含零項目或 <see langword="null" /> 的陣列，例如 Object[] parameters = new Object[0]。 此陣列中任何未明確使用值初始化的物件，都會包含該物件類型的預設值。 對於參考型別項目，這個值為 <see langword="null" />。 對於實值型別項目，這個值為 0、0.0 或 <see langword="false" />，由特定的項目類型決定。</param>
      <returns>與建構函式相關聯的類別之執行個體。</returns>
      <exception cref="T:System.MemberAccessException">這個類別是抽象的。  
 -或-  
 建構函式是類別初始設定式。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 建構函式屬私用或受保護，且呼叫端缺少 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 陣列未包含與這個建構函式所接受型別相符的值。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">傳遞的參數數目不正確。</exception>
      <exception cref="T:System.NotSupportedException">不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的程式碼存取權限。</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在衍生類別中實作時，請叫用在指定 <see langword="ConstructorInfo" /> 條件約束 (Constraint) 下有指定引數的這個 <see langword="Binder" /> 所反映的建構函式。</summary>
      <param name="invokeAttr">其中一個 <see langword="BindingFlags" /> 值，指定繫結的型別。</param>
      <param name="binder">
        <see langword="Binder" />，其定義一組屬性，並使用反映來啟用繫結、引數型別的強制型轉和成員引動過程。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用 <see langword="Binder.DefaultBinding" />。</param>
      <param name="parameters">
        <see langword="Object" /> 型別的陣列，用於比對在 <paramref name="binder" /> 的限制下，這個建構函式的數字、順序和參數的型別。 如果這個建構函式不使用參數，則會使用零元素的陣列或 ，如同在 Object[] parameters = new Object[0] 一樣。 此陣列中任何未明確使用值初始化的物件，都會包含該物件類型的預設值。 對於參考型別項目，這個值為 <see langword="null" />。 對於實值型別項目，這個值為 0、0.0 或 <see langword="false" />，由特定的項目類型決定。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用來控制型別的強制型轉。 如果這是 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>與建構函式相關聯的類別之執行個體。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 陣列沒有包含符合這個建構函式所接受型別的值，在 <paramref name="binder" /> 的條件約束之下。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">傳遞的參數數目不正確。</exception>
      <exception cref="T:System.NotSupportedException">不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的程式碼存取權限。</exception>
      <exception cref="T:System.MemberAccessException">這個類別是抽象的。  
 -或-  
 建構函式是類別初始設定式。</exception>
      <exception cref="T:System.MethodAccessException">建構函式屬私用或受保護，且呼叫端缺少 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</exception>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為建構函式。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為建構函式。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Equality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.ConstructorInfo" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="right">要比較的第二個 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <returns>如果 <paramref name="left" /> 等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Inequality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.ConstructorInfo" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="right">要比較的第二個 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <returns>如果 <paramref name="left" /> 不等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>表示型別建構函式方法儲存在中繼資料時的名稱。 這個名稱永遠是「.cctor」。 這個屬性是唯讀的。</summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeData">
      <summary>提供已載入至僅限反映內容之組件、模組、類型、成員和參數的自訂屬性資料存取。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.CustomAttributeData" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.AttributeType">
      <summary>取得屬性的型別。</summary>
      <returns>屬性的型別。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.Constructor">
      <summary>取得 <see cref="T:System.Reflection.ConstructorInfo" /> 物件，表示已初始化自訂屬性的建構函式。</summary>
      <returns>一個物件，表示已初始化 <see cref="T:System.Reflection.CustomAttributeData" /> 類別目前執行個體所表示之自訂屬性的建構函式。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.ConstructorArguments">
      <summary>取得針對 <see cref="T:System.Reflection.CustomAttributeData" /> 物件所表示之屬性執行個體而指定的位置引數清單。</summary>
      <returns>結構的集合，表示針對自訂屬性執行個體所指定的位置引數。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <paramref name="obj" /> 等於目前的執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件的清單，表示已套用至目標組件之屬性的資料。</summary>
      <param name="target">此為要擷取其自訂屬性資料的組件。</param>
      <returns>物件的清單，表示已套用至目標組件之屬性的資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件的清單，表示已套用至目標成員之屬性的資料。</summary>
      <param name="target">此為要擷取其屬性資料的成員。</param>
      <returns>物件的清單，表示已套用至目標成員之屬性的資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
      <summary>傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件的清單，表示已套用至目標模組之屬性的資料。</summary>
      <param name="target">此為要擷取其自訂屬性資料的模組。</param>
      <returns>物件的清單，表示已套用至目標模組之屬性的資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件的清單，表示已套用至目標參數之屬性的相關資料。</summary>
      <param name="target">此為要擷取其自訂屬性資料的參數。</param>
      <returns>物件的清單，表示已套用至目標參數之屬性的相關資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetHashCode">
      <summary>做為特定型別的雜湊函式。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.NamedArguments">
      <summary>取得針對 <see cref="T:System.Reflection.CustomAttributeData" /> 物件所表示之屬性執行個體而指定的具名引數清單。</summary>
      <returns>結構的集合，表示針對自訂屬性執行個體所指定的具名引數。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.ToString">
      <summary>傳回自訂屬性的字串表示。</summary>
      <returns>字串值，表示自訂屬性。</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeExtensions">
      <summary>包含用來擷取自訂屬性的靜態方法。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定組件。</summary>
      <param name="element">要檢查的組件。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定成員。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取只訂型別的自訂屬性，此屬性套用至指定成員，並且可選擇性檢查該成員的祖系。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定模組。</summary>
      <param name="element">要檢查的模型。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定參數。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取只訂型別的自訂屬性，此屬性套用至指定參數，並且可選擇性檢查該參數的祖系。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，如果找不到這樣的屬性則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定組件。</summary>
      <param name="element">要檢查的組件。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>符合 <paramref name="T" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定成員。</summary>
      <param name="element">要檢查的成員。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>符合 <paramref name="T" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取只訂型別的自訂屬性，此屬性套用至指定成員，並且可選擇性檢查該成員的祖系。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>符合 <paramref name="T" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定模組。</summary>
      <param name="element">要檢查的模型。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>符合 <paramref name="T" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
      <summary>擷取指定型別的自訂屬性，此屬性套用至指定參數。</summary>
      <param name="element">要檢查的參數。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>符合 <paramref name="T" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取只訂型別的自訂屬性，此屬性套用至指定參數，並且可選擇性檢查該參數的祖系。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>符合 <paramref name="T" /> 的自訂屬性，如果找不到這類屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>擷取套用至指定組件的自訂屬性集合。</summary>
      <param name="element">要檢查的組件。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" />，如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定組件。</summary>
      <param name="element">要檢查的組件。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="attributeType" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>擷取套用至指定成員的自訂屬性集合。</summary>
      <param name="element">要檢查的成員。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" />，如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取自訂屬性集合，此集合套用至指定成員，並且可選擇性檢查該成員的祖系。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>自訂屬性的集合，這些屬性已套用至符合指定之準則的 <paramref name="element" />，如果沒有這樣的屬性則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定成員。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="attributeType" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定成員，並且可選擇性檢查該成員的祖系。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="attributeType" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)">
      <summary>擷取套用至指定模組的自訂屬性集合。</summary>
      <param name="element">要檢查的模型。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" />，如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定模組。</summary>
      <param name="element">要檢查的模型。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="attributeType" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>擷取套用至指定參數的自訂屬性集合。</summary>
      <param name="element">要檢查的參數。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" />，如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取自訂屬性集合，此集合套用至指定參數，並且可選擇性檢查該參數的祖系。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" />，如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定參數。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="attributeType" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定參數，並且可選擇性檢查該參數的祖系。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="attributeType" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定組件。</summary>
      <param name="element">要檢查的組件。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="T" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定成員。</summary>
      <param name="element">要檢查的成員。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="T" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定成員，並且可選擇性檢查該成員的祖系。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="T" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定模組。</summary>
      <param name="element">要檢查的模型。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="T" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定參數。</summary>
      <param name="element">要檢查的參數。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="T" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取指定型別的自訂屬性集合，此集合套用至指定參數，並且可選擇性檢查該參數的祖系。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <typeparam name="T">要搜尋的屬性類型。</typeparam>
      <returns>自訂屬性的集合，這些屬性已套用至 <paramref name="element" /> 且符合 <paramref name="T" />；如果沒有這類屬性存在，則為空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>指出是否將所指定型別的自訂屬性套用至指定的組件。</summary>
      <param name="element">要檢查的組件。</param>
      <param name="attributeType">要搜尋之屬性的型別。</param>
      <returns>如果指定的型別的屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>指出是否將所指定型別的自訂屬性套用至指定的成員。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>如果指定的型別的屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>指出指定之型別的自訂屬性是否會套用至指定的成員，以及選擇性地套用到其上階。</summary>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">要搜尋之屬性的型別。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>如果指定的型別的屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)">
      <summary>指出是否將所指定型別的自訂屬性套用至指定的模組。</summary>
      <param name="element">要檢查的模型。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>如果指定的型別的屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>指出是否將所指定型別的自訂屬性套用至指定的參數。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <returns>如果指定的型別的屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>指出指定之型別的自訂屬性是否會套用至指定的參數，以及選擇性地套用到其上階。</summary>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">要搜尋的屬性類型。</param>
      <param name="inherit">
        <see langword="true" /> 表示檢查<paramref name="element" />的祖系，否則為<see langword="false" />。</param>
      <returns>如果指定的型別的屬性套用至 <paramref name="element" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
      <summary>自訂屬性 (Attribute) 的二進位格式無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 類別的新執行個體。</summary>
      <param name="info">用於序列化或還原序列化自訂屬性的資料。</param>
      <param name="context">自訂屬性的來源和目的端。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 類別的新執行個體。</summary>
      <param name="message">訊息，表示擲回這個例外狀況的原因。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.CustomAttributeNamedArgument">
      <summary>代表在僅限反映的內容中自訂屬性的具名引數。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
      <summary>初始化 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 類別的新執行個體，這個執行個體表示自訂屬性 (Attribute) 的指定欄位或屬性 (Property)，並且指定欄位或屬性 (Property) 的值。</summary>
      <param name="memberInfo">自訂屬性 (Attribute) 的欄位或屬性 (Property)。 新的 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 物件，表示這個成員及其值。</param>
      <param name="value">自訂屬性 (Attribute) 之欄位或屬性 (Property) 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="memberInfo" /> 不是自訂屬性 (Attribute) 之欄位或屬性 (Property) 的值。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
      <summary>初始化 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 類別的新執行個體，這個執行個體表示自訂屬性 (Attribute) 的指定欄位或屬性 (Property)，並且指定 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 物件，描述欄位或屬性 (Property) 的型別和值。</summary>
      <param name="memberInfo">自訂屬性 (Attribute) 的欄位或屬性 (Property)。 新的 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 物件，表示這個成員及其值。</param>
      <param name="typedArgument">物件，描述欄位或屬性的型別和值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.IsField">
      <summary>取得值，指出具名引數是否為欄位。</summary>
      <returns>如果具名引數是欄位，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo">
      <summary>取得可用來設定具名引數的屬性成員。</summary>
      <returns>可用來設定具名引數的屬性成員。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberName">
      <summary>取得用來設定具名引數之屬性成員的名稱。</summary>
      <returns>用來設定具名引數的屬性成員的名稱。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>測試兩個 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 結構是否相等。</summary>
      <param name="left">位於等號比較運算子左方的結構。</param>
      <param name="right">位於等號比較運算子右方的結構。</param>
      <returns>如果這兩個 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 結構相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>測試兩個 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 結構是否不同。</summary>
      <param name="left">位於不等比較運算子左方的結構。</param>
      <param name="right">位於不等比較運算子右方的結構。</param>
      <returns>如果這兩個 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 結構不同，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.ToString">
      <summary>傳回字串，其中包含引數名稱、等號，以及引數值的字串表示。</summary>
      <returns>字串，其中包含引數名稱、等號，以及引數值的字串表示。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
      <summary>取得 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構，此結構可用來取得目前具名引數的型別和值。</summary>
      <returns>結構，可用來取得目前具名引數的型別和值。</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeTypedArgument">
      <summary>表示在僅限反映的內容中自訂屬性 (Attribute) 的引數，或是陣列引數的元素。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
      <summary>使用指定的值，初始化 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 類別的新執行個體。</summary>
      <param name="value">自訂屬性引數的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
      <summary>使用指定的型別和值，初始化 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 類別的新執行個體。</summary>
      <param name="argumentType">自訂屬性引數的型別。</param>
      <param name="value">自訂屬性引數的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argumentType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
      <summary>取得引數或陣列引數元素的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示引數或陣列元素的型別。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="obj">要比較的另一個物件。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體為同型別並表示相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數，其為這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>測試兩個 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構是否相等。</summary>
      <param name="left">位於等號比較運算子左方的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構。</param>
      <param name="right">位於等號比較運算子右方的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構。</param>
      <returns>如果這兩個 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>測試兩個 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構是否不同。</summary>
      <param name="left">位於不等比較運算子左方的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構。</param>
      <param name="right">位於不等比較運算子右方的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構。</param>
      <returns>如果這兩個 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構不同，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.ToString">
      <summary>傳回字串，其中包含引數名稱、等號，以及引數值的字串表示。</summary>
      <returns>包含引數名稱、等號，以及引數值的字串表示的字串。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.Value">
      <summary>針對簡單引數或陣列引數元素取得引數的值；針對陣列引數取得值集合。</summary>
      <returns>表示引數值或元素值的物件，或表示陣列型別引數值之 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的泛型 <see cref="T:System.Reflection.CustomAttributeTypedArgument" />。</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>定義 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 所使用之預設成員的型別成員。</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 類別的新執行個體。</summary>
      <param name="memberName">
        <see langword="String" />，含有要叫用 (Invoke) 的成員名稱。 這可能是建構函式、方法、屬性或欄位。 叫用成員時，必須指定適合的引動過程屬性。 類別的預設成員可以藉由將空 <see langword="String" /> 傳遞為成員名稱的方式來指定。  
型別的預設成員可以使用 <see langword="DefaultMemberAttribute" /> 自訂屬性來標記，或以一般方式在 COM 中標記。</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>從屬性取得名稱。</summary>
      <returns>表示成員名稱的字串。</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>指定事件的屬性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>指定事件沒有屬性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
      <summary>指定保留的旗標僅供 Common Language Runtime 使用。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>指定 Common Language Runtime 應該檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>指定由名稱所描述事件的特殊性。</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>探索事件的屬性 (Attribute) 並提供事件中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.#ctor">
      <summary>初始化 <see langword="EventInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>將事件處理常式加入至事件來源。</summary>
      <param name="target">事件的來源。</param>
      <param name="handler">封裝要在目標引發事件時叫用的一或多個方法。</param>
      <exception cref="T:System.InvalidOperationException">此事件不具公用 <see langword="add" /> 存取子。</exception>
      <exception cref="T:System.ArgumentException">無法使用傳入的處理常式。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET  中或可攜式類別庫中，改為擷取基底類別例外狀況 <see cref="T:System.MemberAccessException" />。  


            

 呼叫端無權存取該成員。</exception>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET 或可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  


            

 <paramref name="target" /> 參數是 <see langword="null" /> 且事件不是靜態的。  
-或- 
未在目標上宣告 <see cref="T:System.Reflection.EventInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.AddMethod">
      <summary>取得事件之 <see cref="T:System.Reflection.MethodInfo" /> 方法 (包括非公用方法) 的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 物件。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 方法的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 物件。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>取得這個事件的屬性。</summary>
      <returns>這個事件的唯讀屬性。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>取得與這個事件相關之目前的事件處理常式委派之 <see langword="Type" /> 物件。</summary>
      <returns>表示委派事件處理常式的唯讀 <see langword="Type" /> 物件。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>傳回用來將事件處理常式委派加入至事件來源的方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來將事件處理常式委派加入至事件來源的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>在衍生類別中覆寫時，針對事件的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法擷取 <see langword="MethodInfo" /> 物件，指定是否要傳回非公用方法。</summary>
      <param name="nonPublic">如果可以傳回非公用方法，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來將事件處理常式委派加入至事件來源的方法。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 <see langword="true" />、用來新增事件處理常式委派的方法為非公用的，而且呼叫端無權反映於非公用方法上。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods">
      <summary>傳回使用 <see langword=".other" /> 指示詞與中繼資料中的事件產生關聯的公用方法。</summary>
      <returns>陣列，表示已透過使用 <see langword=".other" /> 指示詞與中繼資料中事件建立關聯的公用方法。 如果沒有這類公用事件，則會傳回空白陣列。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
      <summary>傳回使用 <see langword=".other" /> 指示詞與中繼資料中的事件產生關聯的方法，並指定是否要包括非公用方法。</summary>
      <param name="nonPublic">
        <see langword="true" /> 是表示要包括非公用方法，否則為 <see langword="false" />。</param>
      <returns>陣列，表示已透過使用 <see langword=".other" /> 指示詞與中繼資料中事件建立關聯的方法。 如果沒有符合規格的方法，則會傳回空白陣列。</returns>
      <exception cref="T:System.NotImplementedException">這個方法尚未實作。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>傳回引發事件時所呼叫的方法。</summary>
      <returns>引發事件時所呼叫的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>在衍生類別中覆寫時，傳回在引發事件時所呼叫的方法，指定是否要傳回非公用方法。</summary>
      <param name="nonPublic">如果可以傳回非公用方法，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>在引發事件時呼叫的 <see langword="MethodInfo" /> 物件。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 <see langword="true" />、用來新增事件處理常式委派的方法為非公用的，而且呼叫端無權反映於非公用方法上。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>傳回用來從事件來源移除事件處理常式委派的方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來從事件來源移除事件處理常式委派的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>在衍生類別中覆寫時，擷取 <see langword="MethodInfo" /> 物件以移除事件的方法，指定是否要傳回非公用方法。</summary>
      <param name="nonPublic">如果可以傳回非公用方法，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，代表用來從事件來源移除事件處理常式委派的方法。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 是 <see langword="true" />、用來新增事件處理常式委派的方法為非公用的，而且呼叫端無權反映於非公用方法上。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>取得值，指出事件是否為多點傳送。</summary>
      <returns>如果委派是多點傳送委派的執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>取得值，指出 <see langword="EventInfo" /> 是否具有特殊意義的名稱。</summary>
      <returns>如果這個事件具有特殊名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為事件。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為事件。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.EventInfo" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.EventInfo" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.RaiseMethod">
      <summary>取得引發事件時所呼叫的方法，包括非公用方法。</summary>
      <returns>引發事件時所呼叫的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>從事件來源移除事件處理常式。</summary>
      <param name="target">事件的來源。</param>
      <param name="handler">要從目標所引發的事件取消關聯的委派。</param>
      <exception cref="T:System.InvalidOperationException">此事件不具公用 <see langword="remove" /> 存取子。</exception>
      <exception cref="T:System.ArgumentException">無法使用傳入的處理常式。</exception>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET 或可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  


            

 <paramref name="target" /> 參數是 <see langword="null" /> 且事件不是靜態的。  
-或- 
未在目標上宣告 <see cref="T:System.Reflection.EventInfo" />。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET  中或可攜式類別庫中，改為擷取基底類別例外狀況 <see cref="T:System.MemberAccessException" />。  


            

 呼叫端無權存取該成員。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.RemoveMethod">
      <summary>取得用來移除事件方法 (包括非公用方法) 的 <see langword="MethodInfo" /> 物件。</summary>
      <returns>用於移除該事件之方法的 <see langword="MethodInfo" /> 物件。</returns>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClause">
      <summary>表示結構化例外狀況處理 (Structured Exception Handling) 區塊中的子句。</summary>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ExceptionHandlingClause" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.CatchType">
      <summary>取得這個子句所處理之例外狀況的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示這個子句所處理之例外狀況的類型，但如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 屬性是 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 或 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />，則為 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">物件之目前狀態屬性的使用無效。</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
      <summary>取得在使用者提供之篩選條件程式碼的方法主體中的位移，以位元組為單位。</summary>
      <returns>在使用者提供之篩選條件程式碼的方法主體中的位移，以位元組為單位。 如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 屬性含有 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 以外的值，則這個屬性值就沒有任何意義。</returns>
      <exception cref="T:System.InvalidOperationException">無法取得位移，因為例外狀況處理子句不是篩選條件。</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.Flags">
      <summary>取得值，指出這個例外狀況處理子句是 finally 子句、型別篩選的子句或是使用者篩選的子句。</summary>
      <returns>
        <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> 值，表示這個子句會執行哪種動作。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
      <summary>取得這個例外狀況處理子句的主體長度，以位元組為單位。</summary>
      <returns>整數，表示構成這個例外狀況處理子句主體之 MSIL 的長度，以位元組為單位。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
      <summary>取得在這個例外狀況處理子句之方法主體中的位移，以位元組為單位。</summary>
      <returns>整數，表示在這個例外狀況處理子句之方法主體中的位移，以位元組為單位。</returns>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.ToString">
      <summary>例外狀況處理子句的字串表示。</summary>
      <returns>字串，其針對篩選子句型別列出適當的屬性值。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryLength">
      <summary>包含這個例外狀況處理子句之 try 區塊的總長度，以位元組為單位。</summary>
      <returns>包含這個例外狀況處理子句之 try 區塊的總長度，以位元組為單位。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryOffset">
      <summary>在包含這個例外狀況處理子句之 try 區塊的方法中的位移，以位元組為單位。</summary>
      <returns>整數，表示在包含這個例外狀況處理子句之 try 區塊的方法中的位移，以位元組為單位。</returns>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClauseOptions">
      <summary>識別例外狀況處理 (Exception Handling) 子句的類型。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Clause">
      <summary>此子句會接受所有衍生自指定之型別的例外狀況。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Fault">
      <summary>發生例外狀況時會執行此子句，但正常的控制流程完成時則不會執行。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Filter">
      <summary>此子句含有使用者指定的指令，可決定是否應忽略例外狀況 (亦即，正常性執行是否應繼續進行)、是否應由關聯的處理常式處理例外狀況，或者是否應將例外狀況傳遞至下一個子句。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Finally">
      <summary>每當 try 區塊結束 (不論是經由正常的控制流程或是由於未處理的例外狀況) 時，都會執行此子句。</summary>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>指定描述欄位屬性 (Attribute) 的旗標。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>指定在整個組件中欄位是可存取的。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>指定欄位只能由這個組件中的子型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>指定欄位只能由型別和子型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>指定欄位可以在任何地方和整個組件中由子型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>指定特定欄位的存取層級。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>指定此欄位含有預設值。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>指定欄位含有封送處理 (Marshaling) 資訊。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>指定欄位含有相對虛擬位址 (RVA)。 RVA 為目前影像中方法主體的位置，就像相對於影像檔所在位置的開始位址。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>指定欄位只初始化，而且只能在建構函式主體中設定。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>指定欄位的值為編譯時期常數 (靜態或早期繫結)， 任何對其進行設定的嘗試都會擲回 <see cref="T:System.FieldAccessException" />。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>指定當型別為遠端時，欄位不必序列化。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>保留供未來使用。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>指定欄位只能由父型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>指定無法參考此欄位。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>指定欄位可以讓能見到這個範圍的任何成員存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>指定 Common Language Runtime (中繼資料內部 API) 應檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>指定特殊方法，具有描述方法是如何特殊的名稱。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>指定表示定義型別的欄位，不然它就是一個執行個體。</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>探索欄位的屬性並提供欄位中繼資料的存取。</summary>
    </member>
    <member name="M:System.Reflection.FieldInfo.#ctor">
      <summary>初始化 <see langword="FieldInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>取得與這個欄位相關的屬性 (Attribute)。</summary>
      <returns>這個欄位的 <see langword="FieldAttributes" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>取得 <see langword="RuntimeFieldHandle" />，它是欄位內部中繼資料表示的控制代碼。</summary>
      <returns>欄位內部中繼資料表示的控制代碼。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>取得這個欄位物件的型別。</summary>
      <returns>這個欄位物件的型別。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>取得指定的控制代碼所表示之欄位的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <param name="handle">
        <see cref="T:System.RuntimeFieldHandle" /> 結構，包含欄位內部中繼資料表示的控制代碼。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，表示 <paramref name="handle" /> 所指定的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 無效。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>針對指定的泛型型別，取得指定的控制代碼所表示之欄位的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <param name="handle">
        <see cref="T:System.RuntimeFieldHandle" /> 結構，包含欄位內部中繼資料表示的控制代碼。</param>
      <param name="declaringType">
        <see cref="T:System.RuntimeTypeHandle" /> 結構，包含定義欄位之泛型型別的控制代碼。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，在 <paramref name="handle" /> 所指定的泛型型別中，表示 <paramref name="declaringType" /> 指定的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 無效。  
-或- 
 <paramref name="declaringType" /> 與 <paramref name="handle" /> 不相容。 例如，<paramref name="declaringType" /> 是泛型型別定義的執行階段型別控制代碼，且 <paramref name="handle" /> 來自建構的型別。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
      <summary>取得可識別欄位的選用自訂修飾詞的類型陣列。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，識別目前欄位的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
      <summary>使用編譯器傳回與欄位相關聯的常值。</summary>
      <returns>
        <see cref="T:System.Object" />，包含與欄位關聯的常值。 如果常值是元素值為零的類別類型，則傳回值會是 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">Unmanaged 中繼資料中的 Constant 資料表不包含目前欄位的常數值。</exception>
      <exception cref="T:System.FormatException">值的類型不是 Common Language Specification (CLS) 允許的類型之一。 請參閱 ECMA 規格第二篇的＜中繼資料邏輯格式：其他結構、簽章中使用的項目類型＞。</exception>
      <exception cref="T:System.NotSupportedException">未設定該欄位的常數值。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
      <summary>取得類型的陣列，識別屬性的必要自訂修飾詞。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，識別目前屬性的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>在衍生類別中覆寫時，傳回指定物件所支援欄位的值。</summary>
      <param name="obj">將傳回其欄位值的物件。</param>
      <returns>物件，包含這個執行個體所反映欄位的值。</returns>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET - 支援的應用程式開發介面 或是可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  


            

 欄位為非靜態，而 <paramref name="obj" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">欄位標記為常值，但欄位沒有其中一個可接受的常值類型。</exception>
      <exception cref="T:System.FieldAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 呼叫端沒有存取這個欄位的權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 的類別未宣告也未繼承這個方法。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
      <summary>傳回由指定物件支援的欄位值。</summary>
      <param name="obj">
        <see cref="T:System.TypedReference" /> 結構，其封裝位置的 Managed 指標和可能儲存在該位置之型別的執行階段表示。</param>
      <returns>含有欄位值的 <see langword="Object" />。</returns>
      <exception cref="T:System.NotSupportedException">呼叫端需要 Common Language Specification (CLS) 替代方式，但改為呼叫這個方法。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 是否描述此欄位的潛在可視性；亦即，最多只有相同組件 (Assembly) 中的其他型別可以看見該欄位，組件外部的衍生型別 (Derived Type) 則看不見它。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 已精確描述這個欄位的可視性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.Family" /> 是否描述此欄位的可視性；亦即，您只能在其類別和衍生類別內看見該欄位。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.Family" /> 有精確描述這個欄位的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 是否描述此欄位的可視性；亦即，只有當該欄位位於相同的組件時，衍生類別才能存取它。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 有精確描述這個欄位的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 是否描述此欄位的潛在可視性；亦即，無論該欄位位於何處，衍生類別以及相同組件中的類別都可以呼叫它。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 有精確描述這個欄位的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>取得值，指出欄位是否只能在建構函式主體中設定。</summary>
      <returns>如果欄位已設定 <see langword="true" /> 屬性，則為 <see langword="InitOnly" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>取得值，指出數值是否在編譯時間被寫入並且無法變更。</summary>
      <returns>如果欄位已設定 <see langword="true" /> 屬性，則為 <see langword="Literal" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
      <summary>取得值，指出這個欄位是否有 <see langword="NotSerialized" /> 屬性。</summary>
      <returns>如果欄位已設定 <see langword="true" /> 屬性，則為 <see langword="NotSerialized" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
      <summary>取得值，指出對應的 <see langword="PinvokeImpl" /> 屬性是否在 <see cref="T:System.Reflection.FieldAttributes" /> 中設定。</summary>
      <returns>如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中設定 <see langword="true" /> 屬性，則為 <see langword="PinvokeImpl" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>取得值，指出欄位是否為私用的。</summary>
      <returns>如果欄位是私用的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>取得值，指出欄位是否為公用的。</summary>
      <returns>如果欄位是公用的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityCritical">
      <summary>取得值，這個值表示目前欄位在目前信任層級上是否為安全性關鍵或安全性安全關鍵。</summary>
      <returns>如果目前欄位在目前信任層級上為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
      <summary>取得值，這個值表示目前欄位在目前信任層級上是否為安全性安全關鍵。</summary>
      <returns>如果目前欄位在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />，如果是安全性關鍵或透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityTransparent">
      <summary>取得值，這個值表示目前欄位在目前信任層級上是否為透明。</summary>
      <returns>如果欄位在目前信任層級上為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>取得值，指出在 <see cref="T:System.Reflection.FieldAttributes" /> 列舉值中是否設定對應的 <see langword="SpecialName" /> 屬性。</summary>
      <returns>如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中設定 <see langword="true" /> 屬性，則為 <see langword="SpecialName" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>取得值，指出欄位是否為靜態的。</summary>
      <returns>如果欄位是靜態的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為欄位。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.FieldInfo" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.FieldInfo" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>設定指定物件所支援的欄位值。</summary>
      <param name="obj">將設定其欄位值的物件。</param>
      <param name="value">要指派給欄位的值。</param>
      <exception cref="T:System.FieldAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 呼叫端沒有存取這個欄位的權限。</exception>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET - 支援的應用程式開發介面 或是可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  


            

 <paramref name="obj" /> 參數是 <see langword="null" />，且欄位為執行個體欄位。</exception>
      <exception cref="T:System.ArgumentException">物件上不存在該欄位。  
-或- 
<paramref name="value" /> 參數無法轉換並儲存在欄位中。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>當在衍生類別中覆寫時，請設定由指定物件所支援的欄位值。</summary>
      <param name="obj">將設定其欄位值的物件。</param>
      <param name="value">要指派給欄位的值。</param>
      <param name="invokeAttr">
        <see langword="Binder" /> 的欄位，指定想要繫結的型別 (例如，<see langword="Binder.CreateInstance" /> 或 <see langword="Binder.ExactBinding" /> )。</param>
      <param name="binder">透過反映來啟用繫結、強制引數型別和成員引動過程的一組屬性。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用 <see langword="Binder.DefaultBinding" />。</param>
      <param name="culture">特定文化特性 (Culture) 的軟體喜好設定。</param>
      <exception cref="T:System.FieldAccessException">呼叫端沒有存取這個欄位的權限。</exception>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 參數是 <see langword="null" />，且欄位為執行個體欄位。</exception>
      <exception cref="T:System.ArgumentException">物件上不存在該欄位。  
-或- 
<paramref name="value" /> 參數無法轉換並儲存在欄位中。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
      <summary>設定指定物件所支援的欄位值。</summary>
      <param name="obj">
        <see cref="T:System.TypedReference" /> 結構，其中封裝了某個位置的 Managed 指標和可儲存於該位置之型別的執行階段表示法。</param>
      <param name="value">要指派給欄位的值。</param>
      <exception cref="T:System.NotSupportedException">呼叫端需要 Common Language Specification (CLS) 替代方式，但改為呼叫這個方法。</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>描述泛型類型或方法之泛型型別參數的限制式。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>泛型型別參數是 Contravariant。 Contravariant 型別參數可顯示為方法簽章中的參數類型。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>泛型型別參數是 Covariant。 Covariant 型別參數可顯示為方法的結果類型、唯讀欄位的類型、宣告的基底類型或實作的介面。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>型別是無參數的建構函式時，可取代泛型型別參數。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>沒有任何特殊旗標。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>型別是值型別且不為 null 時，可取代泛型型別參數。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>型別是參考型別時，可取代泛型型別參數。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>選取所有特殊限制式旗標的組合。 這個值是使用邏輯 OR 結合下列旗標的結果︰<see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />、<see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" />和 <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" />。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>選取所有變異數旗標的組合。 這個值是使用邏輯 OR 結合下列旗標的結果︰<see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" />。</summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>提供自訂屬性以反映支援它們的物件。</summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>傳回這個成員中定義的所有自訂屬性的陣列 (但具名屬性除外)，如果沒有自訂屬性，則傳回空陣列。</summary>
      <param name="inherit">當 <see langword="true" /> 時，請查閱繼承自訂屬性的階層鏈結。</param>
      <returns>代表自訂屬性的物件陣列或空陣列。</returns>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性類型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">這個成員中定義了類別 <paramref name="attributeType" /> 的多個屬性。</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回這個成員中定義的自訂屬性陣列 (依類型識別)，如果沒有該類型的自訂屬性，則傳回空陣列。</summary>
      <param name="attributeType">自訂屬性的類型。</param>
      <param name="inherit">當 <see langword="true" /> 時，請查閱繼承自訂屬性的階層鏈結。</param>
      <returns>代表自訂屬性的物件陣列或空陣列。</returns>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>指出此成員上是否有定義一個或多個 <paramref name="attributeType" /> 執行個體。</summary>
      <param name="attributeType">自訂屬性的類型。</param>
      <param name="inherit">當 <see langword="true" /> 時，請查閱繼承自訂屬性的階層鏈結。</param>
      <returns>如果此成員上已定義 <paramref name="attributeType" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.ImageFileMachine">
      <summary>識別可執行檔的目標平台。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.AMD64">
      <summary>以 64 位元的 AMD 處理器為目標。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.ARM">
      <summary>以 ARM 處理器為目標。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.I386">
      <summary>以 32 位元的 Intel 處理器為目標。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.IA64">
      <summary>以 64 位元的 Intel 處理器為目標。</summary>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
      <summary>將介面的對應擷取到實作該介面的類別上的實質方法中。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
      <summary>顯示在介面上定義的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
      <summary>顯示表示介面的型別。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
      <summary>顯示實作介面的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
      <summary>表示用於建立介面對應的型別。</summary>
    </member>
    <member name="T:System.Reflection.IntrospectionExtensions">
      <summary>包含用來轉換 <see cref="T:System.Type" /> 物件的方法。</summary>
    </member>
    <member name="M:System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)">
      <summary>傳回指定之型別的 <see cref="T:System.Reflection.TypeInfo" /> 表示。</summary>
      <param name="type">要轉換的型別。</param>
      <returns>轉換的物件。</returns>
    </member>
    <member name="T:System.Reflection.InvalidFilterCriteriaException">
      <summary>當篩選準則對於您所使用的篩選器型別無效時，在 <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> 中擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 物件，包含要序列化這個執行個體的必要資訊。</param>
      <param name="context">
        <see langword="StreamingContext" /> 物件，包含與這個執行個體相關聯的已序列化資料流的來源和目的端。</param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String)">
      <summary>使用指定的 HRESULT 和訊息字串，初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 類別的新執行個體。</summary>
      <param name="message">例外狀況的訊息文字。</param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>與 IDispatch 介面交互操作。</summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回對應至指定之欄位和繫結端旗標的 <see cref="T:System.Reflection.FieldInfo" /> 物件。</summary>
      <param name="name">要尋找的欄位名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，包含符合 <paramref name="bindingAttr" /> 中所指定搜尋條件約束 (Constraint) 的具名物件欄位資訊。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件會使用相同名稱，實作多重欄位。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件陣列，對應至目前類別的所有欄位。</summary>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件陣列，包含符合 <paramref name="bindingAttr" /> 中所指定搜尋條件約束的這個反映物件所有欄位資訊。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件陣列，對應於所有公用成員或所有符合指定名稱的成員。</summary>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，這些物件符合 <paramref name="name" /> 參數。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件陣列，對應至所有公用成員或所有目前類別的成員。</summary>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件陣列，包含這個反映物件的所有成員資訊。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.MethodInfo" /> 物件，對應至所指定搜尋條件約束下的指定方法。</summary>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，包含方法資訊，並且符合是根據 <paramref name="bindingAttr" /> 中所指定的方法名稱和搜尋條件約束。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件會使用相同名稱，實作多重方法。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用 <see cref="T:System.Reflection.MethodInfo" /> 陣列從多載方法中選擇，擷取對應於指定方法的 <see cref="T:System.Type" /> 物件。</summary>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <param name="binder">該物件會實作 <see cref="T:System.Reflection.Binder" />，其中包含與此方法相關的屬性。</param>
      <param name="types">陣列，用來在多載方法中選擇。</param>
      <param name="modifiers">參數修飾詞的陣列，用來進行與參數簽章的繫結工作，其中該參數簽章的類別已修改。</param>
      <returns>要求方法，符合所有指定參數。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件會使用相同名稱，實作多重方法。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>使用所有公用方法或所有目前類別的方法，擷取 <see cref="T:System.Reflection.MethodInfo" /> 物件陣列。</summary>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件陣列，包含為符合 <paramref name="bindingAttr" /> 中所指定搜尋條件約束的這個反映物件定義的所有方法。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.PropertyInfo" /> 物件陣列，對應於所有公用屬性或所有目前類別的屬性。</summary>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>所有屬性的 <see cref="T:System.Reflection.PropertyInfo" /> 物件陣列，定義於反映物件上。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.PropertyInfo" /> 物件，對應於指定搜尋條件約束下的指定屬性。</summary>
      <param name="name">要尋找的屬性名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <returns>所找到屬性的 <see cref="T:System.Reflection.PropertyInfo" /> 物件 (符合 <paramref name="bindingAttr" /> 中所指定的搜尋條件約束) 或 <see langword="null" /> (如果未找到屬性)。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件會使用相同名稱，實作多重欄位。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>擷取 <see cref="T:System.Reflection.PropertyInfo" /> 物件，對應至具有指定之搜尋條件約束的指定屬性。</summary>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <param name="binder">該物件會實作 <see cref="T:System.Reflection.Binder" />，其中包含與此方法相關的屬性。</param>
      <param name="returnType">屬性的類型。</param>
      <param name="types">陣列，用來在具有相同名稱的多載方法中選擇。</param>
      <param name="modifiers">陣列，用來選擇參數修飾詞。</param>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件 (用於所找到的屬性，如果在這個反映物件中找到具有指定名稱的屬性) 或 <see langword="null" /> (如果找不到屬性)。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>叫用指定成員。</summary>
      <param name="name">要尋找的成員名稱。</param>
      <param name="invokeAttr">其中一個 <see cref="T:System.Reflection.BindingFlags" /> 引動過程屬性。 <paramref name="invokeAttr" /> 參數可能是建構函式、方法、屬性或欄位。 您必須指定適當的引動過程屬性。 藉由將空字串 ("") 傳遞為成員名稱的方式，叫用類別的預設成員。</param>
      <param name="binder">其中一個 <see cref="T:System.Reflection.BindingFlags" /> 位元旗標。 實作 <see cref="T:System.Reflection.Binder" />，包含這個方法的相關屬性。</param>
      <param name="target">要在其上叫用指定成員的物件。 對於靜態成員來說，會忽略這個參數。</param>
      <param name="args">物件陣列，包含要叫用的成員參數的數目、順序和型別。 如果沒有參數，則這是空陣列。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列。 這個陣列和 <paramref name="args" /> 參數具有相同的長度，並且表示中繼資料 (Metadata) 中被叫用成員的引數屬性。 參數可以具有下列屬性：<see langword="pdIn" />、<see langword="pdOut" />、<see langword="pdRetval" />、<see langword="pdOptional" /> 和 <see langword="pdHasDefault" />。 這些分別代表 [In]、[Out]、[retval]、[optional] 和預設參數。 這些屬性是由各種互通性 (Interoperability) 服務所使用。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 例如，<paramref name="culture" /> 會將表示 1000 的 <see langword="String" /> 轉換為 <see langword="Double" /> 值，因為 1000 在不同文化特性 (Culture) 中有不同的表示方式。 如果這個參數是 <see langword="null" />，則會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="namedParameters">參數的 <see langword="String" /> 陣列。</param>
      <returns>指定成員。</returns>
      <exception cref="T:System.ArgumentException">一個以上的引數會指定給欄位 <see langword="set" />。</exception>
      <exception cref="T:System.MissingFieldException">找不到欄位或屬性。</exception>
      <exception cref="T:System.MissingMethodException">找不到方法。</exception>
      <exception cref="T:System.Security.SecurityException">叫用私用 (Private) 成員，而不使用必要的 <see cref="T:System.Security.Permissions.ReflectionPermission" />。</exception>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>取得表示 <see cref="T:System.Reflection.IReflect" /> 物件的基礎型別。</summary>
      <returns>表示 <see cref="T:System.Reflection.IReflect" /> 物件的基礎型別。</returns>
    </member>
    <member name="T:System.Reflection.IReflectableType">
      <summary>表示可以反映的型別。</summary>
    </member>
    <member name="M:System.Reflection.IReflectableType.GetTypeInfo">
      <summary>擷取表示這個型別的物件。</summary>
      <returns>代表這個類型的物件。</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
      <summary>探索區域變數的屬性 (Attribute)，並提供區域變數中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.LocalVariableInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
      <summary>取得 <see cref="T:System.Boolean" /> 值，指出是否在記憶體中 Pin 區域變數所參考的物件。</summary>
      <returns>如果變數所參考的物件固定 (Pin) 在記憶體中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
      <summary>取得方法主體內區域變數的索引。</summary>
      <returns>整數值，表示方法主體內區域變數的宣告順序。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
      <summary>取得區域變數的型別。</summary>
      <returns>區域變數的型別。</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
      <summary>傳回描述區域變數的使用者可讀字串。</summary>
      <returns>字串，其中顯示區域變數的相關資訊，包括型別名稱、索引以及固定 (Pin) 的狀態。</returns>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>提供對資訊清單 (Manifest) 資源的存取，資訊清單資源就是描述應用程式相依性的 XML 檔案。</summary>
    </member>
    <member name="M:System.Reflection.ManifestResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.Reflection.ResourceLocation)">
      <summary>針對指定之組件和檔案所包含以及有指定之位置的資源，初始化 <see cref="T:System.Reflection.ManifestResourceInfo" /> 類別的新執行個體。</summary>
      <param name="containingAssembly">包含資訊清單資源的組件。</param>
      <param name="containingFileName">含有資訊清單資源的檔名 (如果該檔案與資訊清單檔不同)。</param>
      <param name="resourceLocation">列舉值的位元組合，提供關於資訊清單資源的位置資訊。</param>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>如果與資訊清單檔不同時，取得含有資訊清單資源的檔名。</summary>
      <returns>資訊清單資源的檔名。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>為資訊清單資源取得包含組件。</summary>
      <returns>資訊清單資源的包含組件。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>取得資訊清單資源的位置。</summary>
      <returns>
        <see cref="T:System.Reflection.ResourceLocation" /> 旗標的位元組合，表示資源清單資源的位置。</returns>
    </member>
    <member name="T:System.Reflection.MemberFilter">
      <summary>代表用來篩選成員清單的委派，這些成員為 <see cref="T:System.Reflection.MemberInfo" /> 物件陣列中代表的成員。</summary>
      <param name="m">要套用篩選條件的 <see cref="T:System.Reflection.MemberInfo" /> 物件。</param>
      <param name="filterCriteria">用來篩選清單的任意物件。</param>
      <returns>若要在篩選清單中包含成員，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>取得成員的屬性相關資訊，並提供成員中繼資料的存取。</summary>
    </member>
    <member name="M:System.Reflection.MemberInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MemberInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.CustomAttributes">
      <summary>取得包含此成員之自訂屬性的集合。</summary>
      <returns>包含此成員之自訂屬性的集合。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>取得宣告這個成員的類別。</summary>
      <returns>宣告這個成員之類別的 <see langword="Type" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>在衍生類別中覆寫時，傳回套用至此成員之所有自訂屬性的陣列。</summary>
      <param name="inherit">
        <see langword="true" /> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <see langword="false" />。 這個參數會忽略屬性和事件。</param>
      <returns>包含套用至此成員之所有自訂屬性的陣列，如果沒有定義屬性，則為包含零個元素的陣列。</returns>
      <exception cref="T:System.InvalidOperationException">這個成員所屬的型別已載入僅限反映的內容中。 請參閱如何：將組件載入僅限反映的內容。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>當在衍生的類別中覆寫時，會傳回套用至這個成員的自訂屬性陣列，並以 <see cref="T:System.Type" /> 識別。</summary>
      <param name="attributeType">要搜尋的屬性類型。 只會傳回可指派給這種類型的屬性。</param>
      <param name="inherit">
        <see langword="true" /> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <see langword="false" />。 這個參數會忽略屬性和事件。</param>
      <returns>套用至這個成員的自訂屬性陣列，或如果 <paramref name="attributeType" /> 沒有套用任何可指派的屬性，則為零個項目的陣列。</returns>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">這個成員所屬的型別已載入僅限反映的內容中。 請參閱如何：將組件載入僅限反映的內容。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributesData">
      <summary>傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件的清單，表示已套用至目標成員之屬性的資料。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目標成員之屬性的相關資料。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.HasSameMetadataDefinitionAs(System.Reflection.MemberInfo)">
      <param name="other" />
    </member>
    <member name="P:System.Reflection.MemberInfo.IsCollectible">
      <summary>取得指出此 <see cref="T:System.Reflection.MemberInfo" /> 物件是否為可回收 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中保存之組件一部分的值。</summary>
      <returns>
        <see langword="true" /> 如果<see cref="T:System.Reflection.MemberInfo" />保留在可回收組件載入內容的組件的一部分，否則<see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>在衍生類別中覆寫時，表示是否已有一個或多個具有指定型別或其衍生型別的屬性套用至這個成員。</summary>
      <param name="attributeType">要搜尋的自訂屬性型別。 此搜尋包括衍生型別。</param>
      <param name="inherit">
        <see langword="true" /> 表示要搜尋這個成員的繼承鏈結以尋找屬性；否則為 <see langword="false" />。 這個參數會忽略屬性和事件。</param>
      <returns>如果已有 <paramref name="attributeType" /> 或其任何衍生型別的一個或多個執行個體套用至這個成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>在衍生類別中覆寫時，取得 <see cref="T:System.Reflection.MemberTypes" /> 值，指出成員類型︰方法、建構函式、事件等。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，表示成員類型。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MetadataToken">
      <summary>取得值，這個值可識別中繼資料項目。</summary>
      <returns>將此值與 <see cref="P:System.Reflection.MemberInfo.Module" /> 相結合，即可唯一識別中繼資料項目。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Reflection.MemberInfo" /> 在其項目類型為尚未完成之動態類型的陣列類型上代表陣列方法 (例如 <see langword="Address" />)。 若要在此情況下取得中繼資料權杖，請將 <see cref="T:System.Reflection.MemberInfo" /> 物件傳遞給 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> 方法；或使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法直接取得權杖，而不是先使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法來取得 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
      <summary>取得用於定義型別的模組，該型別宣告以目前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成員。</summary>
      <returns>用於定義型別的 <see cref="T:System.Reflection.Module" />，該型別宣告以目前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成員。</returns>
      <exception cref="T:System.NotImplementedException">這個方法尚未實作。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>取得目前成員的名稱。</summary>
      <returns>含有這個成員名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.MemberInfo" /> 物件是否相等。</summary>
      <param name="left">要和 <paramref name="right" /> 比較的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="right">要和 <paramref name="left" /> 比較的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <returns>如果 <paramref name="left" /> 等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.MemberInfo" /> 物件是否不相等。</summary>
      <param name="left">要和 <paramref name="right" /> 比較的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="right">要和 <paramref name="left" /> 比較的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <returns>如果 <paramref name="left" /> 不等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>取得類別物件，是用來取得這個 <see langword="MemberInfo" /> 的執行個體。</summary>
      <returns>
        <see langword="Type" /> 物件，用來取得這個 <see langword="MemberInfo" /> 物件。</returns>
    </member>
    <member name="T:System.Reflection.MemberTypes">
      <summary>將所定義的每一種成員類型標記為 <see cref="T:System.Reflection.MemberInfo" /> 的衍生類別。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
      <summary>指定所有成員類型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
      <summary>指定成員為建構函式。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
      <summary>指定成員為自訂成員類型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
      <summary>指定成員為事件。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
      <summary>指定成員為欄位。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
      <summary>指定成員為方法。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
      <summary>指定成員為巢狀類型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
      <summary>指定成員為屬性。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
      <summary>指定成員為類型。</summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>指定方法屬性 (Attribute) 的旗標。 這些旗標都被定義在 corhdr.h 檔案中。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>指示類別不提供這個方法的實作。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>指示這個組件的任何類別可存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>指示方法只有在它也是可存取時才可以被覆寫。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>指示該方法只能讓這個型別的成員，以及這個型別在這個組件中的衍生型別存取。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>指示只有這個類別和其衍生類別的成員可以存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>指示任何位置的衍生類別以及組件中的任何類別都可存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>指示這個方法不能被覆寫。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>指示方法具有與它相關的安全性。 保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>指示方法依名稱和簽章隱藏；否則只依名稱隱藏。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>擷取存取範圍資訊。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>指示方法永遠取得 vtable 中的新位置。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>指示方法實作經由 PInvoke (平台引動服務) 轉寄。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>指示這個方法只能讓目前的類別存取。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>指示成員不能被參考。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>指示這個物件所在範圍內的任何物件可存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>指示方法呼叫含有安全程式碼的另一個方法。 保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
      <summary>指示保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>指示方法將重新使用 vtable 中的現有位置。 這是預設行為。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>指示 Common Language Runtime 檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>指示方法為特殊方法。 該名稱描述這個方法是如何特殊。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>指示方法是定義在型別上；否則就是定義在每個執行個體 (Instance) 上。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>指示 Managed 方法由 Thunk 匯出到 Unmanaged 程式碼。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>指示方法為虛擬的。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>擷取 vtable 屬性。</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>提供有關方法和建構函式的資訊。</summary>
    </member>
    <member name="M:System.Reflection.MethodBase.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MethodBase" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>取得與這個方法相關的屬性 (Attribute)。</summary>
      <returns>其中一個 <see cref="T:System.Reflection.MethodAttributes" /> 值。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>取得值，指出這個方法的呼叫慣例。</summary>
      <returns>這個方法的 <see cref="T:System.Reflection.CallingConventions" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>取得值，指出泛型方法是否包含未指派的泛型型別參數。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.MethodBase" /> 物件表示包含未指派泛型型別參數的泛型方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
      <summary>傳回代表目前執行方法的 <see langword="MethodBase" /> 物件。</summary>
      <returns>
        <see cref="M:System.Reflection.MethodBase.GetCurrentMethod" /> 是從執行方法中呼叫的靜態方法，並傳回關於該執行方法的資訊。  
代表目前執行方法的 <see langword="MethodBase" /> 物件。</returns>
      <exception cref="T:System.Reflection.TargetException">這個成員曾被晚期繫結機制叫用過。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件表示泛型方法的型別引數，或泛型方法定義的型別參數。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，這些物件表示泛型方法的型別引數，或泛型方法定義的型別參數。 如果目前的方法不是泛型方法，則會傳回空白陣列。</returns>
      <exception cref="T:System.NotSupportedException">目前物件為 <see cref="T:System.Reflection.ConstructorInfo" />。 .NET Framework 2.0 不支援泛型建構函式。 如果未在衍生類別中覆寫這個方法，則這個例外狀況就是預設行為。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodBody">
      <summary>在衍生類別中覆寫時，取得 <see cref="T:System.Reflection.MethodBody" /> 物件，其提供對目前方法之 MSIL 資料流、區域變數和例外狀況的存取。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodBody" /> 物件，其提供對目前方法之 MSIL 資料流、區域變數和例外狀況的存取。</returns>
      <exception cref="T:System.InvalidOperationException">除非在衍生類別中覆寫這個方法，否則該方法無效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>利用方法的內部中繼資料表示 (控制代碼) 取得方法資訊。</summary>
      <param name="handle">方法的控制代碼。</param>
      <returns>
        <see langword="MethodBase" />，包含方法的相關資訊。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 無效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>針對指定的泛型型別，取得指定的控制代碼所表示之建構函式或方法的 <see cref="T:System.Reflection.MethodBase" /> 物件。</summary>
      <param name="handle">建構函式或方法之內部中繼資料表示的控制代碼。</param>
      <param name="declaringType">定義建構函式或方法之泛型型別的控制代碼。</param>
      <returns>
        <see cref="T:System.Reflection.MethodBase" /> 物件，在 <paramref name="handle" /> 所指定的泛型型別中，表示 <paramref name="declaringType" /> 指定的方法或建構函式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 無效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
      <summary>在衍生類別中覆寫時，傳回 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標。</summary>
      <returns>
        <see langword="MethodImplAttributes" /> 旗標。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>在衍生類別中覆寫時，取得指定方法或建構函式的參數。</summary>
      <returns>
        <see langword="ParameterInfo" /> 型別的陣列，含有與這個 <see langword="MethodBase" /> 執行個體反映的方法 (或建構函式) 簽章相符的資訊。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>使用指定的參數叫用由目前執行個體代表的方法或建構函式。</summary>
      <param name="obj">要叫用方法或建構函式的物件。 如果方法是靜態的則會忽略這個引數。 如果建構函式是靜態的，此引數必須為 <see langword="null" />，或者為定義建構函式的類別執行個體。</param>
      <param name="parameters">叫用方法或建構函式的引數清單。 這是物件陣列，其數目、順序和型別與要叫用的方法或建構函式的參數相同。 如果沒有任何參數，<paramref name="parameters" /> 應該為 <see langword="null" />。  
如果此執行個體所代表的方法或建構函式採用 <see langword="ref" /> 參數 (Visual Basic 中的 <see langword="ByRef" />)，則針對該參數不需要特別的屬性以使用此函式叫用方法或建構函式。 此陣列中任何未明確使用值初始化的物件，都會包含該物件類型的預設值。 對於參考型別項目，這個值為 <see langword="null" />。 對於實值型別項目，這個值為 0、0.0 或 <see langword="false" />，由特定的項目類型決定。</param>
      <returns>包含叫用方法之傳回值的物件，或者 <see langword="null" /> (在建構函式的情況下)。</returns>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET 或可攜式類別庫中，改為擷取 <see cref="T:System.Exception" />。  


            

 <paramref name="obj" /> 參數為 <see langword="null" />，且方法不是靜態的。  
-或- 
方法並未由 <paramref name="obj" /> 類別宣告或繼承。  
-或- 
已叫用靜態建構函式，且 <paramref name="obj" /> 不是 <see langword="null" /> 或者宣告建構函式之類別的執行個體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 陣列項目不符合此執行個體所反映之方法或建構函式的簽章。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的方法或建構函式會擲回例外狀況。  
-或- 
目前的執行個體是包含無法驗證的程式碼的 <see cref="T:System.Reflection.Emit.DynamicMethod" />。 如需了解 <see cref="T:System.Reflection.Emit.DynamicMethod" />，請參閱＜備註＞中的＜驗證＞一節。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 陣列沒有正確的引數數目。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 呼叫端並沒有執行由目前執行個體所代表之方法或建構函式的權限。</exception>
      <exception cref="T:System.InvalidOperationException">宣告方法的型別是開放式泛型型別。 也就是，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會針對宣告型別傳回 <see langword="true" />。</exception>
      <exception cref="T:System.NotSupportedException">目前的執行個體是 <see cref="T:System.Reflection.Emit.MethodBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在衍生類別中覆寫時，需使用指定的參數叫用反映的方法或建構函式。</summary>
      <param name="obj">要叫用方法或建構函式的物件。 如果方法是靜態的則會忽略這個引數。 如果建構函式是靜態的，此引數必須為 <see langword="null" />，或者為定義建構函式的類別執行個體。</param>
      <param name="invokeAttr">由零或來自 <see cref="T:System.Reflection.BindingFlags" /> 的多個位元旗標組成的位元遮罩。 如果 <paramref name="binder" /> 為 <see langword="null" />，則指派給這個參數的值為 <see cref="F:System.Reflection.BindingFlags.Default" />，因此，不論您傳入什麼都會忽略。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="parameters">叫用方法或建構函式的引數清單。 這是物件陣列，其數目、順序和型別與要叫用的方法或建構函式的參數相同。 如果沒有參數，這應該是 <see langword="null" />。  
如果這個執行個體表示的方法或建構函式採用 ByRef 參數，該參數就不需要有特殊屬性，就能夠以這個函式叫用方法或建構函式。 此陣列中任何未明確使用值初始化的物件，都會包含該物件類型的預設值。 對於參考型別項目，這個值為 <see langword="null" />。 對於實值型別項目，這個值為 0、0.0 或 <see langword="false" />，由特定的項目類型決定。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 <see langword="null" />，會使用目前執行緒的 <see langword="CultureInfo" />。 (例如，要將代表 1000 的 <see langword="String" /> 轉換成 <see langword="Double" /> 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <returns>
        <see langword="Object" />，包含叫用方法的傳回值，但如果是建構函式，則為 <see langword="null" />，如果方法的傳回型別為 <see langword="null" />，則為 <see langword="void" />。 呼叫方法或建構函式之前，<see langword="Invoke" /> 會檢查使用者是否有存取權限，並驗證參數是否有效。</returns>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 參數為 <see langword="null" />，且方法不是靜態的。  
-或- 
方法並未由 <paramref name="obj" /> 類別宣告或繼承。  
-或- 
已叫用靜態建構函式，且 <paramref name="obj" /> 不是 <see langword="null" /> 或者宣告建構函式之類別的執行個體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 參數的型別與這個執行個體反映的方法或建構函式的簽章不相符。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 陣列沒有正確的引數數目。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的方法或建構函式會擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端並沒有執行由目前執行個體所代表之方法或建構函式的權限。</exception>
      <exception cref="T:System.InvalidOperationException">宣告方法的型別是開放式泛型型別。 也就是，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會針對宣告型別傳回 <see langword="true" />。</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>取得值，指出方法是否為抽象。</summary>
      <returns>如果方法是抽象，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 是否描述此方法或建構函式 (Constructor) 的潛在可視性；亦即，最多只有相同組件 (Assembly) 中的其他型別可以看見該方法或建構函式，組件外部的衍生型別 (Derived Type) 則看不見它們。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 已精確描述這個方法或建構函式的可視性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructedGenericMethod" />
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>取得值，指出方法是否為建構函示。</summary>
      <returns>如果這個方法是由 <see cref="T:System.Reflection.ConstructorInfo" /> 物件所表示的建構函式 (請參閱＜註解＞中有關 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 物件的備註)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.Family" /> 是否描述此方法或建構函式的可視性；亦即，您只能在其類別和衍生類別內看見該方法或建構函式。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.Family" /> 有精確描述這個方法或建構函式 (Constructor) 的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 是否描述此方法或建構函式的可視性；亦即，只有當該方法或建構函式位於相同的組件時，衍生類別才能呼叫它們。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 有精確描述這個方法或建構函式 (Constructor) 的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 是否描述此方法或建構函式的潛在可視性；亦即，無論該方法或建構函式位於何處，衍生類別以及相同組件中的類別都可以呼叫它們。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 有精確描述這個方法或建構函式 (Constructor) 的存取權限則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>取得值，指出這個方法是否為 <see langword="final" />。</summary>
      <returns>如果這個方法為 <see langword="final" /> 則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
      <summary>取得值，指出方法是否為泛型。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.MethodBase" /> 表示泛型方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
      <summary>取得值，指出方法是否為泛型方法定義。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.MethodBase" /> 物件表示泛型方法的定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>取得值，指出是否只有簽章完全一樣的同類成員隱藏於衍生類別中。</summary>
      <returns>如果成員是根據簽章而隱藏，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>取得值，指出這個成員是否為私用的 (Private)。</summary>
      <returns>如果對這個方法的存取限於類別本身的其他成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>取得值，指出這是否為公用的方法。</summary>
      <returns>如果這個方法是公用的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityCritical">
      <summary>取得值，這個值表示目前方法或建構函式在目前信任層級上是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</summary>
      <returns>如果目前方法或建構函式在目前信任層級上為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果它是透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecuritySafeCritical">
      <summary>取得值，這個值表示目前方法或建構函式在目前信任層級上是否為安全性安全關鍵，也就是說，它是否可以執行重要作業並且可供透明程式碼存取。</summary>
      <returns>如果方法或建構函式在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />，如果它是安全性關鍵或透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityTransparent">
      <summary>取得值，這個值表示目前方法或建構函式在目前信任層級上是否為透明，因此不得執行重要作業。</summary>
      <returns>如果方法或建構函式在目前信任層級上為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>取得值，指出這個方法是否有特別的名稱。</summary>
      <returns>如果這個方法有特別的名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>取得值指出方法是否為 <see langword="static" />。</summary>
      <returns>如果這個方法為 <see langword="static" /> 則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>取得值指出方法是否為 <see langword="virtual" />。</summary>
      <returns>如果這個方法為 <see langword="virtual" /> 則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>取得方法內部中繼資料 (Metadata) 表示的控制代碼。</summary>
      <returns>
        <see cref="T:System.RuntimeMethodHandle" /> 物件。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodImplementationFlags">
      <summary>取得 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，這些旗標會指定方法實作的屬性。</summary>
      <returns>方法實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>表示兩個 <see cref="T:System.Reflection.MethodBase" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>表示兩個 <see cref="T:System.Reflection.MethodBase" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.MethodBody">
      <summary>提供方法主體之中繼資料和 MSIL 的存取。</summary>
    </member>
    <member name="M:System.Reflection.MethodBody.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MethodBody" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.MethodBody.ExceptionHandlingClauses">
      <summary>取得包含在方法主體中之所有例外狀況處理子句的清單。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 的 <see cref="T:System.Reflection.ExceptionHandlingClause" /> 物件，代表方法主體中的例外狀況處理子句。</returns>
    </member>
    <member name="M:System.Reflection.MethodBody.GetILAsByteArray">
      <summary>傳回方法主體的 MSIL，當做位元組陣列。</summary>
      <returns>型別 <see cref="T:System.Byte" /> 的陣列，包含方法主體的 MSIL。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.InitLocals">
      <summary>取得值，指出方法主體中的區域變數是否初始化為其型別的預設值。</summary>
      <returns>如果方法主體含有程式碼，而此程式碼會將參考型別的區域變數初始化為 <see langword="true" />，或將實值型別 (Value Type) 的區域變數初始化為以零初始化的值，則為 <see langword="null" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalSignatureMetadataToken">
      <summary>取得簽章的中繼資料語彙基元，其描述中繼資料中的方法區域變數。</summary>
      <returns>表示中繼資料語彙基元的整數。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalVariables">
      <summary>取得方法主體中所宣告之區域變數的清單。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 物件的 <see cref="T:System.Reflection.LocalVariableInfo" />，其描述方法主體中所宣告的區域變數。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.MaxStackSize">
      <summary>取得執行此方法時，運算元堆疊上的最大項目數。</summary>
      <returns>執行此方法時，運算元堆疊上的最大項目數。</returns>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>指定方法實作的屬性旗標。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveInlining">
      <summary>指定可行時應內嵌方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveOptimization">
      <summary>指定可行時應最佳化的方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>指定有關程式碼類型的旗標。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>指定方法未定義。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>指定方法以 Microsoft 中繼語言 (MSIL) 實作。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>指定內部呼叫。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>指定方法是以 Managed 程式碼實作。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>指定方法是以 Managed 或 Unmanaged 程式碼實作。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
      <summary>指定範圍檢查值。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>指定方法實作為原生。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>指定方法無法內嵌。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
      <summary>指定對可能的程式碼產生問題進行偵錯時，方法不是由 Just-In-Time (JIT) 編譯器或原生程式碼產生最佳化 (請參閱 Ngen.exe)。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
      <summary>指定方法以最佳化中繼語言 (OPTIL) 實作。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>指定方法簽章完全依宣告方式匯出。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>指定方法實作由執行階段提供。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>指定方法是單一執行緒，透過主體。 靜態方法 (Visual Basic 中的<see langword="Shared" /> ) 鎖定類型，執行個體方法則鎖定執行個體。 針對此目的，您也可以使用 C# lock 陳述式 或 Visual Basic SyncLock 陳述式 。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>指定方法是以 Unmanaged 程式碼實作。</summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>探索方法的屬性 (Attribute) 並提供方法中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MethodInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
      <summary>從這個方法建立所指定類型的委派。</summary>
      <param name="delegateType">要建立之委派的類型。</param>
      <returns>這個方法的委派。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
      <summary>從這個方法以指定的目標建立所指定類型的委派。</summary>
      <param name="delegateType">要建立之委派的類型。</param>
      <param name="target">委派的目標物件。</param>
      <returns>這個方法的委派。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>在衍生類別中覆寫時，為直接或間接基底類別 (也就是這個執行個體所代表的方法第一次被宣告的地方) 中的方法傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件。</summary>
      <returns>這個方法首次實作的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
      <summary>傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件表示泛型方法的型別引數，或泛型方法定義的型別參數。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，這些物件表示泛型方法的型別引數，或泛型方法定義的型別參數。 如果目前的方法不是泛型方法，則會傳回空白陣列。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
      <summary>傳回表示泛型方法定義的 <see cref="T:System.Reflection.MethodInfo" /> 物件，利用此泛型方法定義就可以建構出目前的方法。</summary>
      <returns>表示泛型方法定義的 <see cref="T:System.Reflection.MethodInfo" /> 物件，利用此泛型方法定義就可以建構出目前的方法。</returns>
      <exception cref="T:System.InvalidOperationException">目前的方法不是泛型方法。 亦即，<see cref="P:System.Reflection.MethodBase.IsGenericMethod" /> 會傳回 <see langword="false" />。</exception>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
      <summary>使用類型陣列的項目取代目前泛型方法定義的類型參數，並傳回代表所產生之建構方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</summary>
      <param name="typeArguments">型別陣列，用來取代目前泛型方法定義的型別參數。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示用 <paramref name="typeArguments" /> 的元素取代目前泛型方法定義之型別參數所得到的建構方法。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Reflection.MethodInfo" /> 並非表示泛型方法定義。 亦即，<see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> 會傳回 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 為 <see langword="null" />。  
-或- 
<paramref name="typeArguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中的項目個數與目前泛型方法定義中的型別參數個數不同。  
-或- 
<paramref name="typeArguments" /> 中的元素無法滿足針對目前泛型方法定義之對應型別參數所指定的條件約束。</exception>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，表示這個成員為方法。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.MethodInfo" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.MethodInfo" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
      <summary>取得 <see cref="T:System.Reflection.ParameterInfo" /> 物件，其中含有方法之傳回型別的相關資訊，例如傳回型別是否含有自訂修飾詞 (Modifier)。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 物件，含有傳回型別的相關資訊。</returns>
      <exception cref="T:System.NotImplementedException">這個方法尚未實作。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>取得這個方法的傳回型別 (Return Type)。</summary>
      <returns>這個方法的傳回型別。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
      <summary>取得傳回型別的自訂屬性。</summary>
      <returns>
        <see langword="ICustomAttributeProvider" /> 物件，代表傳回類型的自訂屬性。</returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>表示遺漏的 <see cref="T:System.Object" />。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.Missing.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，其中具有重新建立 <see cref="T:System.Reflection.Missing" /> 物件的唯一執行個體所需的邏輯內容資訊。</summary>
      <param name="info">要填入序列化資訊的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，表示序列化的目的內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>表示 <see cref="T:System.Reflection.Missing" /> 類別的唯一執行個體。</summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>在模組上執行反映。</summary>
    </member>
    <member name="M:System.Reflection.Module.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.Module" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>取得這個 <see cref="T:System.Reflection.Assembly" /> 執行個體的合適 <see cref="T:System.Reflection.Module" />。</summary>
      <returns>
        <see langword="Assembly" /> 物件。</returns>
    </member>
    <member name="P:System.Reflection.Module.CustomAttributes">
      <summary>取得包含此模組之自訂屬性的集合。</summary>
      <returns>包含此模組之自訂屬性的集合。</returns>
    </member>
    <member name="M:System.Reflection.Module.Equals(System.Object)">
      <summary>判斷這個模組和指定的物件是否相等。</summary>
      <param name="o">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="o" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeName">
      <summary>
        <see langword="TypeFilter" /> 物件，其會根據名稱來篩選此模組中定義的類型清單。 這個欄位會區分大小寫且為唯讀狀態。</summary>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeNameIgnoreCase">
      <summary>
        <see langword="TypeFilter" /> 物件，其會根據名稱來篩選此模組中定義的類型清單。 這個欄位是不區分大小寫且為唯讀狀態。</summary>
    </member>
    <member name="M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)">
      <summary>傳回指定篩選器和篩選準則所接受的類別陣列。</summary>
      <param name="filter">用來篩選類別的委派。</param>
      <param name="filterCriteria">用來篩選類別的物件。</param>
      <returns>類型 <see langword="Type" /> 的陣列，其中包含篩選器所接受的類別。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">無法載入模組中的一或多個類別。</exception>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
      <summary>取得表示這個模組完整名稱和路徑的字串。</summary>
      <returns>完整的模組名稱。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
      <summary>傳回所有自訂屬性。</summary>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>
        <see langword="Object" /> 型別的陣列，包含所有自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>取得指定型別的自訂屬性。</summary>
      <param name="attributeType">要取得的屬性型別。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>
        <see langword="Object" /> 型別的陣列，包含指定型別的所有自訂屬性。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributesData">
      <summary>傳回目前模組的 <see cref="T:System.Reflection.CustomAttributeData" /> 物件清單，這些物件可用於僅限反映的內容中。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前模組之屬性的資料。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
      <summary>傳回具有指定名稱的欄位。</summary>
      <param name="name">欄位名稱。</param>
      <returns>具有指定名稱的 <see langword="FieldInfo" /> 物件，或者，如果欄位不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回具有指定名稱和繫結屬性的欄位。</summary>
      <param name="name">欄位名稱。</param>
      <param name="bindingAttr">其中一個 <see langword="BindingFlags" /> 位元旗標，用來控制搜尋。</param>
      <returns>具有指定名稱和繫結屬性的 <see langword="FieldInfo" /> 物件，或者，如果欄位不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
      <summary>傳回模組中定義的全域欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表模組中定義的全域欄位；如果沒有全域欄位，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回定義於模組上且符合指定繫結旗標的全域欄位。</summary>
      <param name="bindingFlags">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <returns>類型 <see cref="T:System.Reflection.FieldInfo" /> 的陣列，代表定義於模組上且符合指定繫結旗標的全域欄位；如果沒有任何全域欄位符合繫結旗標，即會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
      <summary>傳回具有指定名稱的方法。</summary>
      <param name="name">方法名稱。</param>
      <returns>具有指定名稱的 <see langword="MethodInfo" /> 物件，或者，如果方法不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>傳回方法，該方法具有指定的名稱、繫結資訊、呼叫慣例和參數類型及修飾詞。</summary>
      <param name="name">方法名稱。</param>
      <param name="bindingAttr">其中一個 <see langword="BindingFlags" /> 位元旗標，用來控制搜尋。</param>
      <param name="binder">該物件會實作 <see langword="Binder" />，其中包含與此方法相關的屬性。</param>
      <param name="callConvention">方法的呼叫慣例。</param>
      <param name="types">要搜尋的參數類型。</param>
      <param name="modifiers">參數修飾詞的陣列，用來進行與參數簽章的繫結工作，其中該參數簽章的類別已修改。</param>
      <returns>符合指定準則的 <see langword="MethodInfo" /> 物件；若方法不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />；<paramref name="types" /> 為 <see langword="null" />；或 <paramref name="types" /> (i) 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
      <summary>傳回具有指定名稱及參數類型的方法。</summary>
      <param name="name">方法名稱。</param>
      <param name="types">要搜尋的參數類型。</param>
      <returns>符合指定準則的 <see langword="MethodInfo" /> 物件；若方法不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />；<paramref name="types" /> 為 <see langword="null" />；或 <paramref name="types" /> (i) 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>傳回方法實作，根據指定準則。</summary>
      <param name="name">方法名稱。</param>
      <param name="bindingAttr">其中一個 <see langword="BindingFlags" /> 位元旗標，用來控制搜尋。</param>
      <param name="binder">該物件會實作 <see langword="Binder" />，其中包含與此方法相關的屬性。</param>
      <param name="callConvention">方法的呼叫慣例。</param>
      <param name="types">要搜尋的參數類型。</param>
      <param name="modifiers">參數修飾詞的陣列，用來進行與參數簽章的繫結工作，其中該參數簽章的類別已修改。</param>
      <returns>
        <see langword="MethodInfo" /> 物件，包含所指定的實作資訊；如果方法不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="types" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
      <summary>傳回模組中定義的全域方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，代表模組中定義的所有全域方法；如果沒有全域方法，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)">
      <summary>傳回定義於模組上且符合指定繫結旗標的全域方法。</summary>
      <param name="bindingFlags">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <returns>類型 <see cref="T:System.Reflection.MethodInfo" /> 的陣列，代表定義於模組上且符合指定繫結旗標的全域方法；如果沒有任何全域方法符合繫結旗標，即會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>提供序列化物件的 <see cref="T:System.Runtime.Serialization.ISerializable" /> 實作。</summary>
      <param name="info">序列化或還原序列化物件所需的資訊和資料。</param>
      <param name="context">序列化的內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>取得值組，表示模組中的程式碼性質，以及模組的目標平台。</summary>
      <param name="peKind">這個方法會傳回 <see cref="T:System.Reflection.PortableExecutableKinds" /> 值的組合，表示模組中的程式碼性質。</param>
      <param name="machine">這個方法會傳回其中一個 <see cref="T:System.Reflection.ImageFileMachine" /> 值，表示模組的目標平台。</param>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
      <summary>執行區分大小寫的搜尋，傳回指定的類型。</summary>
      <param name="className">要尋找的類型名稱。 名稱必須是命名空間的完整名稱。</param>
      <returns>
        <see langword="Type" /> 物件，如果指定的類型位於此模組中，則代表該類型；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用了類別初始設定式，並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是零長度字串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="className" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="className" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="className" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="className" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
      <summary>傳回指定的類型，使用指定的大小寫搜尋模組。</summary>
      <param name="className">要尋找的類型名稱。 名稱必須是命名空間的完整名稱。</param>
      <param name="ignoreCase">
        <see langword="true" /> 以進行不區分大小寫的搜尋；否則為 <see langword="false" />。</param>
      <returns>
        <see langword="Type" /> 物件，如果指定的類型位於此模組中，則代表該類型；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用了類別初始設定式，並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是零長度字串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="className" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="className" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="className" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="className" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>傳回指定的型別，並指定是否要對模組進行區分大小寫的搜尋，以及是否要在找不到型別時擲回例外狀況。</summary>
      <param name="className">要尋找的類型名稱。 名稱必須是命名空間的完整名稱。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。</param>
      <param name="ignoreCase">
        <see langword="true" /> 以進行不區分大小寫的搜尋；否則為 <see langword="false" />。</param>
      <returns>如果在這個模組中宣告型別，則為表示指定之型別的 <see cref="T:System.Type" /> 物件，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用了類別初始設定式，並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是零長度字串。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="className" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到 <paramref name="className" /> 所需的相依組件，但無法載入。  
-或- 
目前的組件已載入僅限反映的內容中，而且 <paramref name="className" /> 需要未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要相依組件，但這個檔案不是有效的組件。  
-或- 
 <paramref name="className" /> 所需的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
      <summary>傳回此模組中定義的所有類型。</summary>
      <returns>類型 <see langword="Type" /> 的陣列，其中包含這個執行個體所反映之模組中定義的類型。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">無法載入模組中的一或多個類別。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
      <summary>傳回值，這個值表示指定的屬性型別是否已套用至此模組。</summary>
      <param name="attributeType">所要測試之自訂屬性的型別。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>如果一個或多個 <paramref name="attributeType" /> 的執行個體已套用至這個模組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Module.IsResource">
      <summary>取得值，指出物件是否為資源。</summary>
      <returns>如果物件為資源，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Module.MDStreamVersion">
      <summary>取得中繼資料流的版本。</summary>
      <returns>32 位元的整數，表示中繼資料流的版本。 高順序的兩位元表示主要的版本號碼，而低順序的兩位元則表示次要的版本號碼。</returns>
    </member>
    <member name="P:System.Reflection.Module.MetadataToken">
      <summary>取得語彙基元，可識別中繼資料中的模組。</summary>
      <returns>整數語彙基元，可識別中繼資料中的目前模組。</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleHandle">
      <summary>取得模組的控制代碼。</summary>
      <returns>目前模組的 <see cref="T:System.ModuleHandle" /> 結構。</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleVersionId">
      <summary>取得可用來區別兩個模組版本的全域唯一識別碼 (UUID)。</summary>
      <returns>
        <see cref="T:System.Guid" />，可用來區別兩個模組版本。</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>取得 <see langword="String" />，表示路徑已移除的模組名稱。</summary>
      <returns>沒有路徑的模組名稱。</returns>
    </member>
    <member name="M:System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)">
      <summary>表示兩個 <see cref="T:System.Reflection.Module" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)">
      <summary>表示兩個 <see cref="T:System.Reflection.Module" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的欄位。</summary>
      <param name="metadataToken">識別模組內欄位的中繼資料語彙基元。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，表示指定之中繼資料語彙基元所識別的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組範圍中不是欄位的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 可識別欄位，而此欄位的父代 <see langword="TypeSpec" /> 具有包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數) 的簽章。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的欄位。</summary>
      <param name="metadataToken">識別模組內欄位的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，表示指定之中繼資料語彙基元所識別的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組範圍中不是欄位的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 可識別欄位，而此欄位的父代 <see langword="TypeSpec" /> 具有包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的必要泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的型別或成員。</summary>
      <param name="metadataToken">識別模組內型別或成員的中繼資料語彙基元。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件，表示指定之中繼資料語彙基元所識別的型別或成員。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別或成員的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" /> 或 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的可別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)。  
-或- 
 <paramref name="metadataToken" /> 識別屬性或事件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的型別或成員。</summary>
      <param name="metadataToken">識別模組內型別或成員的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件，表示指定之中繼資料語彙基元所識別的型別或成員。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別或成員的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" /> 或 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的必要泛型型別引數。  
-或- 
 <paramref name="metadataToken" /> 識別屬性或事件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的方法或建構函式。</summary>
      <param name="metadataToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <returns>
        <see cref="T:System.Reflection.MethodBase" /> 物件，表示指定之中繼資料語彙基元所識別的方法或建構函式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的方法或建構函式。</summary>
      <param name="metadataToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Reflection.MethodBase" /> 物件，表示指定之中繼資料語彙基元所識別的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="MethodSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveSignature(System.Int32)">
      <summary>傳回中繼資料語彙基元所識別的簽章 Blob (二進位大型物件)。</summary>
      <param name="metadataToken">識別模組內簽章的中繼資料語彙基元。</param>
      <returns>位元組的陣列，表示簽章 Blob。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />在目前模組的範圍中不是有效的 <see langword="MemberRef" />、<see langword="MethodDef" />、<see langword="TypeSpec" />、簽章或 <see langword="FieldDef" /> 語彙基元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveString(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的字串。</summary>
      <param name="metadataToken">中繼資料語彙基元，可識別模組字串堆積中的字串。</param>
      <returns>
        <see cref="T:System.String" />，包含中繼資料字串堆積中的字串值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組範圍中不是字串的語彙基元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的型別。</summary>
      <param name="metadataToken">識別模組內型別的中繼資料語彙基元。</param>
      <returns>
        <see cref="T:System.Type" /> 物件，表示指定之中繼資料語彙基元所識別的型別。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的型別。</summary>
      <param name="metadataToken">識別模組內型別的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Type" /> 物件，表示指定之中繼資料語彙基元所識別的型別。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。  
-或- 
 <paramref name="metadataToken" /> 是 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="P:System.Reflection.Module.ScopeName">
      <summary>取得表示模組名稱的字串。</summary>
      <returns>模組名稱。</returns>
    </member>
    <member name="M:System.Reflection.Module.ToString">
      <summary>傳回模組名稱。</summary>
      <returns>表示這個模組名稱的 <see langword="String" />。</returns>
    </member>
    <member name="T:System.Reflection.ModuleResolveEventHandler">
      <summary>代表將處理 <see cref="T:System.Reflection.Assembly" /> 的 <see cref="E:System.Reflection.Assembly.ModuleResolve" /> 事件之方法。</summary>
      <param name="sender">事件來源的組件。</param>
      <param name="e">描述事件的物件所提供的引數。</param>
      <returns>滿足此要求的模組。</returns>
    </member>
    <member name="T:System.Reflection.ObfuscateAssemblyAttribute">
      <summary>指示模糊化工具針對適當的組件 (Assembly) 型別，使用它們的標準模糊化規則。</summary>
    </member>
    <member name="M:System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.ObfuscateAssemblyAttribute" /> 類別的新執行個體，並指定要模糊化的組件是公用或私用。</summary>
      <param name="assemblyIsPrivate">如果組件是用於某個應用程式的範圍中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate">
      <summary>取得 <see cref="T:System.Boolean" /> 值，指出組件是否標記為私用。</summary>
      <returns>如果組件已標記為私用，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation">
      <summary>取得或設定 <see cref="T:System.Boolean" /> 值，指出模糊化工具是否應該在進行處理後移除屬性。</summary>
      <returns>如果模糊化工具應該在進行處理後移除屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 這個屬性的預設值為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Reflection.ObfuscationAttribute">
      <summary>指示模糊化工具針對組件 (Assembly)、型別或成員，採取指定的動作。</summary>
    </member>
    <member name="M:System.Reflection.ObfuscationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ObfuscationAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.ApplyToMembers">
      <summary>取得或設定 <see cref="T:System.Boolean" /> 值，指出某個型別的屬性是否要用至該型別的成員。</summary>
      <returns>如果屬性要用至該型別的成員，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Exclude">
      <summary>取得或設定 <see cref="T:System.Boolean" /> 值，指出模糊化工具是否應該將型別或成員排除模糊化。</summary>
      <returns>如果套用這項屬性的型別或成員應該排除模糊化，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Feature">
      <summary>取得或設定字串值，這個字串值是由模糊化工具所辨認，而且會指定處理選項。</summary>
      <returns>字串值，這個字串值是由模糊化工具所辨認，而且會指定處理選項。 預設值為 "all"。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.StripAfterObfuscation">
      <summary>取得或設定 <see cref="T:System.Boolean" /> 值，指出模糊化工具是否應該在進行處理後移除這項屬性。</summary>
      <returns>如果模糊化工具應該在進行處理後移除屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>定義可以與參數相關聯的屬性。 這些都在 CorHdr.h 中定義。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>指定此參數具有預設值。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>指定參數具有欄位封送處理 (Marshaling) 資訊。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>指定參數為輸入參數。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>指定參數為地區設定識別項 (Locale Identifier，LCID)。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>指定沒有參數屬性。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>指定參數為選擇項。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>指定參數為輸出參數。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
      <summary>指定參數為保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>指定參數為傳回值。</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>探索參數屬性 (Attribute) 並提供對參數中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
      <summary>初始化 <see langword="ParameterInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>取得這個參數的屬性。</summary>
      <returns>表示這個參數屬性的 <see langword="ParameterAttributes" /> 物件。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.AttrsImpl">
      <summary>參數的屬性。</summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.ClassImpl">
      <summary>參數的 <see langword="Type" />。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.CustomAttributes">
      <summary>取得包含此參數之自訂屬性的集合。</summary>
      <returns>包含此參數之自訂屬性的集合。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>如果參數有預設值，取得表示預設值的值。</summary>
      <returns>參數的預設值，或者，如果參數沒有預設值，則為 <see cref="F:System.DBNull.Value" />。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.DefaultValueImpl">
      <summary>參數的預設值。</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>取得在這個參數上所定義的所有自訂屬性。</summary>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>包含套用至此參數之所有自訂屬性的陣列。</returns>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>取得套用至此參數之指定型別及其衍生型別的自訂屬性。</summary>
      <param name="attributeType">依型別識別的自訂屬性。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>包含指定型別及其衍生型別之自訂屬性的陣列。</returns>
      <exception cref="T:System.ArgumentException">類型必須是基礎執行階段系統所提供的類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
      <summary>傳回目前參數的 <see cref="T:System.Reflection.CustomAttributeData" /> 物件清單，這些物件可用於僅限反映的內容中。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前參數之屬性的資料。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
      <summary>取得參數的選擇性自訂修飾詞。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，識別目前參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>傳回應該還原序列化的實際物件，而不是序列化資料流指定的物件。</summary>
      <param name="context">目前物件要從其中還原序列化的序列化資料流。</param>
      <returns>放入圖形中的實際物件。</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">其相關成員的參數清單中參數的位置對該成員的型別無效。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
      <summary>取得參數的必要自訂修飾詞。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，識別目前參數的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.HasDefaultValue">
      <summary>取得值，指出這個參數是否具有預設值。</summary>
      <returns>如果此參數具有預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>判斷是否已有指定之型別或其衍生型別的自訂屬性套用至此參數。</summary>
      <param name="attributeType">要搜尋的 <see langword="Type" /> 物件。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>如果已有 <paramref name="attributeType" /> 或其衍生型別的一個或多個執行個體套用至這個參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是由 Common Language Runtime 提供的 <see cref="T:System.Type" /> 物件。</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsIn">
      <summary>取得值，指出是否為輸入參數。</summary>
      <returns>如果參數為輸入參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsLcid">
      <summary>取得值，指出這個參數是否為地區設定識別項 (Locale Identifier，LCID)。</summary>
      <returns>如果參數是地區設定識別項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>取得值，指出這個參數是否為選擇項。</summary>
      <returns>如果參數為選擇項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>取得值，指出這是否為輸出參數。</summary>
      <returns>如果參數是輸出參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsRetval">
      <summary>取得值，指出這是否為 <see langword="Retval" /> 參數。</summary>
      <returns>如果參數是 <see langword="true" />，則為 <see langword="Retval" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>取得值，指出實作參數的成員。</summary>
      <returns>植入由這個 <see cref="T:System.Reflection.ParameterInfo" /> 所表示之參數的成員。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.MemberImpl">
      <summary>實作欄位的成員。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.MetadataToken">
      <summary>取得值，識別中繼資料中的這個參數。</summary>
      <returns>值，與模組組合後，可以唯一識別中繼資料中的這個參數。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>取得參數的名稱。</summary>
      <returns>這個參數的簡單名稱。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.NameImpl">
      <summary>參數名稱。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>取得這個參數的 <see langword="Type" />。</summary>
      <returns>
        <see langword="Type" /> 物件，表示這個參數的 <see langword="Type" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>取得型式參數清單中以零起始的參數位置。</summary>
      <returns>表示這個參數在參數清單中所佔據位置的整數。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.PositionImpl">
      <summary>參數清單中以零起始的參數位置。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.RawDefaultValue">
      <summary>如果參數有預設值，取得表示預設值的值。</summary>
      <returns>參數的預設值，或者，如果參數沒有預設值，則為 <see cref="F:System.DBNull.Value" />。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
      <summary>取得以字串表示的參數型別和名稱。</summary>
      <returns>包含參數型別和名稱的字串。</returns>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
      <summary>將修飾詞附加到參數，如此一來，繫結就能與已修改類型的參數簽章一同運作。</summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Reflection.ParameterModifier" /> 結構的新執行個體，代表指定的參數數目。</summary>
      <param name="parameterCount">參數的數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterCount" /> 為負。</exception>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
      <summary>取得或設定值，指定位於指定索引位置的參數是否要由目前的 <see cref="T:System.Reflection.ParameterModifier" /> 所修改。</summary>
      <param name="index">正在檢查或設定其修改狀態的參數索引位置。</param>
      <returns>如果位於這個索引位置的參數要由這個 <see cref="T:System.Reflection.ParameterModifier" /> 所修改，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.Pointer">
      <summary>提供指標的包裝函式類別。</summary>
    </member>
    <member name="M:System.Reflection.Pointer.Box(System.Void*,System.Type)">
      <summary>將所提供的 Unmanaged 記憶體指標和與指標關聯的型別裝至 Managed <see cref="T:System.Reflection.Pointer" /> 包裝函式物件中。 因為值和型別被儲存，所以可以在引動過程期間從機器碼存取它們。</summary>
      <param name="ptr">所提供的 Unmanaged 記憶體指標。</param>
      <param name="type">與 <paramref name="ptr" /> 參數關聯的型別。</param>
      <returns>指標物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是指標。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用檔案名稱、融合記錄檔和其他的例外狀況資訊，來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Reflection.Pointer.Unbox(System.Object)">
      <summary>傳回儲存的指標。</summary>
      <param name="ptr">儲存的指標。</param>
      <returns>這個方法會傳回虛值 (Void)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 不是指標。</exception>
    </member>
    <member name="T:System.Reflection.PortableExecutableKinds">
      <summary>識別可執行檔中的程式碼性質。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.ILOnly">
      <summary>可執行檔僅包含 Microsoft Intermediate Language (MSIL)，因此相對於 32 位元或 64 位元平台而言是中性的。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.NotAPortableExecutableImage">
      <summary>此檔案並非使用可攜式執行檔 (PE) 格式。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.PE32Plus">
      <summary>可執行檔需要 64 位元的平台。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Preferred32Bit">
      <summary>此為與平台無關的可執行檔，但應該盡可能在 32 位元平台上執行。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Required32Bit">
      <summary>可執行檔可以在 32 位元的平台上執行，也可以在 64 位元平台的 32 位元 Windows on Windows (WOW) 環境下執行。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Unmanaged32Bit">
      <summary>可執行檔包含純 Unmanaged 程式碼。</summary>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>識別可執行檔之目標平台的處理器以及每個字組的位元 (Bits-per-word)。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>根據 x64 架構的 64 位元處理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Arm">
      <summary>ARM 處理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>僅限 64 位元 Intel Itanium 處理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>相對於處理器和每個字組的位元而言是中性的。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>處理器和每個字組的位元組合是未知或尚未指定的。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>32 位元的 Intel 處理器 (原生或位於 64 位元平台 (WOW64) 的 Windows on Windows 環境中)。</summary>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>定義屬性 (Attribute)，其可能與屬性 (Property) 有關聯。 這些屬性 (Attribute) 值都被定義在 corhdr.h 中。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>指定屬性具有預設值。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>指定沒有屬性 (Attribute) 與屬性 (Property) 有關。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
      <summary>指定保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>指定中繼資料 (Metadata) 內部應用程式開發介面檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>指定屬性為特殊屬性，具有描述屬性是如何特殊的名稱。</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>探索屬性 (Property) 的屬性 (Attribute)，並提供屬性中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.PropertyInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.PropertyInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>取得這個屬性 (Property) 的屬性 (Attribute)。</summary>
      <returns>這個屬性 (Property) 的屬性 (Attribute)。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>取得值，指出是否可讀取屬性。</summary>
      <returns>如果可讀取這個屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>取得值，指出是否可寫入屬性。</summary>
      <returns>如果可寫入屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>傳回陣列，其項目會反映目前執行個體所反映屬性之公用的 <see langword="get" /> 和 <see langword="set" /> 存取子。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，這些物件會反映目前執行個體所反映屬性之公用的 <see langword="get" /> 和 <see langword="set" /> 存取子 (如能找到)；否則，這個方法會傳回項目都是零 (0) 的陣列。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>傳回陣列，其項目會反映目前執行個體所反映的屬性公用的和 (如果指定) 非公用的 <see langword="get" /> 和 <see langword="set" /> 存取子。</summary>
      <param name="nonPublic">表示非公用方法是否應該在傳回的陣列中傳回。 如果非公用方法要包含在內，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>陣列，其項目會反映目前執行個體所反映屬性的 <see langword="get" /> 和 <see langword="set" /> 存取子。 如果 <paramref name="nonPublic" /> 為 <see langword="true" />，則這個陣列包含公用的和非公用的 <see langword="get" /> 和 <see langword="set" /> 存取子。 如果 <paramref name="nonPublic" /> 為 <see langword="false" />，則這個陣列只包含公用的 <see langword="get" /> 和 <see langword="set" /> 存取子。 如果沒有找到具有指定可視性的存取子，則這個方法會傳回項目為零 (0) 的陣列。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
      <summary>使用編譯器傳回與屬性相關聯的常值。</summary>
      <returns>
        <see cref="T:System.Object" />，包含與屬性關聯的常值。 如果常值是元素值為零的類別類型，則傳回值會是 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">Unmanaged 中繼資料中的 Constant 資料表不包含目前屬性的常數值。</exception>
      <exception cref="T:System.FormatException">值的類型不是 Common Language Specification (CLS) 允許的類型之一。 請參閱＜ECMA Partition II specification＞的＜Metadata＞。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>傳回這個屬性的公用 <see langword="get" /> 存取子。</summary>
      <returns>
        <see langword="MethodInfo" /> 物件，代表這個屬性的公用 <see langword="get" /> 存取子，如果 <see langword="null" /> 存取子為非公用或不存在則為 <see langword="get" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>當在衍生類別中覆寫時，傳回這個屬性的公用或非公用 <see langword="get" /> 存取子。</summary>
      <param name="nonPublic">指出是否應該傳回非公用的 <see langword="get" /> 存取子。 如果要傳回非公用存取子，則為 <see langword="true" />否則為 <see langword="false" />。</param>
      <returns>
        <see langword="MethodInfo" /> 物件，代表這個屬性的 <see langword="get" /> 存取子 (如果 <paramref name="nonPublic" /> 為 <see langword="true" />)。 如果 <see langword="null" /> 為 <paramref name="nonPublic" /> 且 <see langword="false" /> 存取子為非公用，或，如果 <see langword="get" /> 為 <paramref name="nonPublic" /> 但沒有 <see langword="true" /> 存取子存在，則會傳回 <see langword="get" />。</returns>
      <exception cref="T:System.Security.SecurityException">要求的方法為非公用，而且呼叫端沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 可以反映這個非公用方法。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>當在衍生類別中覆寫時，傳回屬性的所有索引參數的陣列。</summary>
      <returns>
        <see langword="ParameterInfo" /> 型別的陣列，包含索引的參數。 如果此屬性未建立索引，則表示陣列有 0 (零) 個項目。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.GetMethod">
      <summary>取得這個屬性的 <see langword="get" /> 存取子。</summary>
      <returns>這個屬性的 <see langword="get" /> 存取子。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
      <summary>傳回類型的陣列，表示屬性的選擇性自訂修飾詞。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，識別目前屬性的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRawConstantValue">
      <summary>使用編譯器傳回與屬性相關聯的常值。</summary>
      <returns>
        <see cref="T:System.Object" />，包含與屬性關聯的常值。 如果常值是元素值為零的類別類型，則傳回值會是 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">Unmanaged 中繼資料中的 Constant 資料表不包含目前屬性的常數值。</exception>
      <exception cref="T:System.FormatException">值的類型不是 Common Language Specification (CLS) 允許的類型之一。 請參閱 ECMA 規格第二篇的＜中繼資料邏輯格式：其他結構、簽章中使用的項目類型＞。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
      <summary>傳回類型的陣列，表示屬性的必要自訂修飾詞。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，識別目前屬性的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>傳回這個屬性的公用 <see langword="set" /> 存取子。</summary>
      <returns>
        <see langword="MethodInfo" /> 物件，代表這個屬性的 <see langword="Set" /> 方法 (如果 <see langword="set" /> 存取子是公用的)，或 <see langword="null" /> (如果 <see langword="set" /> 存取子不是公用的)。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>當在衍生類別中覆寫時，傳回這個屬性的 <see langword="set" /> 存取子。</summary>
      <param name="nonPublic">指出若為非公用存取子，是否應該傳回。 如果要傳回非公用存取子，則為 <see langword="true" />否則為 <see langword="false" />。</param>
      <returns>這個屬性的 <see langword="Set" /> 方法或 <see langword="null" />，如下表所示。  
  值 
  條件 
  這個屬性的 <see langword="Set" /> 方法。  

  <see langword="set" /> 存取子為公用。  

-或- 
 <paramref name="nonPublic" /> 為 <see langword="true" />，且 <see langword="set" /> 存取子為非公用。  

 <see langword="null" /><paramref name="nonPublic" /> 為 <see langword="true" />，但屬性為唯讀。  

-或- 
 <paramref name="nonPublic" /> 為 <see langword="false" />，且 <see langword="set" /> 存取子為非公用。  

-或- 
沒有 <see langword="set" /> 存取子。</returns>
      <exception cref="T:System.Security.SecurityException">要求的方法為非公用，而且呼叫端沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 可以反映這個非公用方法。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
      <summary>傳回指定的物件的屬性值。</summary>
      <param name="obj">其屬性值將被傳回的物件。</param>
      <returns>指定之物件的屬性值。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>傳回指定的物件的屬性值，和索引屬性的選擇性索引值。</summary>
      <param name="obj">其屬性值將被傳回的物件。</param>
      <param name="index">索引屬性的選擇性索引值。 索引屬性的索引以零為起始。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <returns>指定之物件的屬性值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需的引數類型。  
-或- 
找不到屬性的 <see langword="get" /> 存取子。</exception>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET - 支援的應用程式開發介面 或是可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  


            

 物件不符合目標類型，或屬性是執行個體屬性但 <paramref name="obj" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的參數數目不符合索引屬性所接受的參數數目。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 曾不合法嘗試存取類別內的私用或保護方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">擷取屬性值時發生錯誤。 例如，為索引屬性指定的索引值超出範圍。 <see cref="P:System.Exception.InnerException" /> 屬性指出錯誤的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>當在衍生類別中覆寫時，傳回指定的物件的屬性值，此物件具有指定的繫結、索引和文化特性特定資訊。</summary>
      <param name="obj">其屬性值將被傳回的物件。</param>
      <param name="invokeAttr">下列可指定引動過程屬性之列舉成員的位元組合：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 和 <see langword="SetProperty" />。 您必須指定適當的引動過程屬性。 例如，要叫用靜態成員，就設定 <see langword="Static" /> 旗標。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="index">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <param name="culture">資源要當地語系化的文化特性。 如果未針對這個文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 <see cref="P:System.Globalization.CultureInfo.Parent" /> 屬性。 如果這個值是 <see langword="null" />，則會從 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 屬性取得特定文化特性資訊。</param>
      <returns>指定之物件的屬性值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需的引數類型。  
-或- 
找不到屬性的 <see langword="get" /> 存取子。</exception>
      <exception cref="T:System.Reflection.TargetException">物件不符合目標類型，或屬性是執行個體屬性但 <paramref name="obj" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的參數數目不符合索引屬性所接受的參數數目。</exception>
      <exception cref="T:System.MethodAccessException">曾不合法嘗試存取類別內的私用或保護方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">擷取屬性值時發生錯誤。 例如，為索引屬性指定的索引值超出範圍。 <see cref="P:System.Exception.InnerException" /> 屬性指出錯誤的原因。</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>取得值，指出屬性是否為特殊名稱。</summary>
      <returns>如果這個屬性為特殊名稱，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，指出這個成員為屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，指出這個成員為屬性。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.PropertyInfo" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>表示兩個 <see cref="T:System.Reflection.PropertyInfo" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>取得這個屬性的型別。</summary>
      <returns>這個屬性的型別。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.SetMethod">
      <summary>取得這個屬性的 <see langword="set" /> 存取子。</summary>
      <returns>這個屬性的 <see langword="set" /> 存取子；如果屬性是唯讀的，則為 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
      <summary>設定指定之物件的屬性值。</summary>
      <param name="obj">將設定其屬性值的物件。</param>
      <param name="value">新的屬性值。</param>
      <exception cref="T:System.ArgumentException">找不到屬性的 <see langword="set" /> 存取子。  
-或- 
 <paramref name="value" /> 無法轉換成 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />類型。</exception>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET - 支援的應用程式開發介面 或是可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  


            

 <paramref name="obj" /> 類型不符合目標類型，或屬性是執行個體屬性但 <paramref name="obj" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 曾不合法嘗試存取類別內的私用或保護方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">設定屬性值時發生錯誤。 <see cref="P:System.Exception.InnerException" /> 屬性指出錯誤的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>使用索引屬性的選擇性索引值，設定指定的物件的屬性值。</summary>
      <param name="obj">將設定其屬性值的物件。</param>
      <param name="value">新的屬性值。</param>
      <param name="index">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需的引數類型。  
-或- 
找不到屬性的 <see langword="set" /> 存取子。  
-或- 
 <paramref name="value" /> 無法轉換成 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />類型。</exception>
      <exception cref="T:System.Reflection.TargetException">在適用於 Windows 市集應用程式的 .NET - 支援的應用程式開發介面 或是可攜式類別庫中，改為攔截 <see cref="T:System.Exception" />。  


            

 物件不符合目標類型，或屬性是執行個體屬性但 <paramref name="obj" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的參數數目不符合索引屬性所接受的參數數目。</exception>
      <exception cref="T:System.MethodAccessException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MemberAccessException" />。  


            

 曾不合法嘗試存取類別內的私用或保護方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">設定屬性值時發生錯誤。 例如，為索引屬性指定的索引值超出範圍。 <see cref="P:System.Exception.InnerException" /> 屬性指出錯誤的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>當在衍生類別中覆寫時，設定指定的物件的屬性值，此物件具有指定的繫結、索引和文化特性特定資訊。</summary>
      <param name="obj">將設定其屬性值的物件。</param>
      <param name="value">新的屬性值。</param>
      <param name="invokeAttr">下列可指定引動過程屬性之列舉成員的位元組合：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。 您必須指定適當的引動過程屬性。 例如，要叫用靜態成員，就設定 <see langword="Static" /> 旗標。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="index">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <param name="culture">資源要當地語系化的文化特性。 如果未針對這個文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 <see cref="P:System.Globalization.CultureInfo.Parent" /> 屬性。 如果這個值是 <see langword="null" />，則會從 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 屬性取得特定文化特性資訊。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需的引數類型。  
-或- 
找不到屬性的 <see langword="set" /> 存取子。  
-或- 
 <paramref name="value" /> 無法轉換成 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 類型。</exception>
      <exception cref="T:System.Reflection.TargetException">物件不符合目標類型，或屬性是執行個體屬性但 <paramref name="obj" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的參數數目不符合索引屬性所接受的參數數目。</exception>
      <exception cref="T:System.MethodAccessException">曾不合法嘗試存取類別內的私用或保護方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">設定屬性值時發生錯誤。 例如，為索引屬性指定的索引值超出範圍。 <see cref="P:System.Exception.InnerException" /> 屬性指出錯誤的原因。</exception>
    </member>
    <member name="T:System.Reflection.ReflectionContext">
      <summary>表示可提供代表可提供反映物件的內容。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ReflectionContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)">
      <summary>取得此反映內容中指定之物件的型別表示。</summary>
      <param name="value">要表示的物件。</param>
      <returns>表示指定之物件類型的物件。</returns>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)">
      <summary>取得此反射內容中由來自另一個反射內容的物件所代表的表示。</summary>
      <param name="assembly">要在此內容中表示之組件的外部表示。</param>
      <returns>此反射內容中的組件表示。</returns>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)">
      <summary>取得此反射內容中由來自另一個反射內容的物件所代表的型別表示。</summary>
      <param name="type">要在此內容中表示之型別的外部表示。</param>
      <returns>此反射內容中的型別表示。</returns>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>無法載入模組中的任何類別時，<see cref="M:System.Reflection.Module.GetTypes" /> 方法擲回的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])">
      <summary>使用指定類別和它們的相關例外狀況，來初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 類別的新執行個體。</summary>
      <param name="classes">
        <see langword="Type" /> 型別的陣列，包含在模組中定義並且載入的類別。 這個陣列可以含有 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 值。</param>
      <param name="exceptions">
        <see langword="Exception" /> 型別的陣列，包含由類別載入器所擲回的例外狀況。 <paramref name="classes" /> 陣列中的 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 值會和這個 <paramref name="exceptions" /> 陣列中的例外狀況一致。</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)">
      <summary>使用指定的類別、它們的相關例外狀況和例外狀況描述來初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 類別的新執行個體。</summary>
      <param name="classes">
        <see langword="Type" /> 型別的陣列，包含在模組中定義並且載入的類別。 這個陣列可以含有 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 值。</param>
      <param name="exceptions">
        <see langword="Exception" /> 型別的陣列，包含由類別載入器所擲回的例外狀況。 <paramref name="classes" /> 陣列中的 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 值會和這個 <paramref name="exceptions" /> 陣列中的例外狀況一致。</param>
      <param name="message">描述擲回例外狀況原因的 <see langword="String" />。</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>提供序列化物件的 <see cref="T:System.Runtime.Serialization.ISerializable" /> 實作。</summary>
      <param name="info">序列化或還原序列化物件所需的資訊和資料。</param>
      <param name="context">序列化的內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <see langword="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>取得類別載入器擲回的例外狀況陣列。</summary>
      <returns>型別 <see langword="Exception" /> 的陣列，其中包含類別載入器擲回的例外狀況。 此執行個體的 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 陣列中的 null 值隨此陣列中的例外狀況而進入隊伍。</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Message">
      <summary>取得這個例外狀況的錯誤訊息。</summary>
      <returns>字串, 包含這個例外狀況的錯誤訊息。</returns>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.ToString">
      <summary>傳回這個例外狀況的完整名稱，以及適用於所有載入器例外狀況的訊息。</summary>
      <returns>字串，其中包含這個例外狀況的完整名稱，以及其載入器例外狀況的例外狀況訊息。</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>取得在模組中定義並且載入的類別之陣列。</summary>
      <returns>
        <see langword="Type" /> 型別的陣列，包含在模組中定義並且載入的類別。 這個陣列可包含某些 <see langword="null" /> 值。</returns>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
      <summary>指定資訊清單資源的屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
      <summary>用來擷取私用 (Private) 資訊清單資源的遮罩。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
      <summary>用來擷取公用 (Public) 資訊清單資源的遮罩。</summary>
    </member>
    <member name="T:System.Reflection.ResourceLocation">
      <summary>指定該資源的位置。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInAnotherAssembly">
      <summary>指定資源是被包含在另一個組件中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInManifestFile">
      <summary>指定資源是被包含在資訊清單檔中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.Embedded">
      <summary>指定內嵌 (也就是非連結) 的資源。</summary>
    </member>
    <member name="T:System.Reflection.RuntimeReflectionExtensions">
      <summary>提供用來在執行階段擷取型別資訊的方法。</summary>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)">
      <summary>取得表示特定委派所代表之方法的物件。</summary>
      <param name="del">要檢查的委派。</param>
      <returns>表示方法的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="del" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MemberAccessException">呼叫端無權存取由委派所表示的方法 (例如，如果方法是私用的)。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)">
      <summary>擷取物件，表示直接或間接基底類別上的指定方法 (在這個類別上首次宣告這個方法)。</summary>
      <param name="method">要擷取其相關資訊的方法。</param>
      <returns>物件，表示在基底類別上指定方法的初始宣告。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)">
      <summary>擷取表示指定之事件的物件。</summary>
      <param name="type">包含事件的型別。</param>
      <param name="name">事件的名稱。</param>
      <returns>物件，表示指定的事件，如果找不到事件，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。
-或-
<paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)">
      <summary>擷取集合，表示指定的型別所定義的所有事件。</summary>
      <param name="type">包含事件的型別。</param>
      <returns>所指定型別的事件集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)">
      <summary>擷取表示指定之欄位的物件。</summary>
      <param name="type">包含欄位的型別。</param>
      <param name="name">欄位的名稱。</param>
      <returns>物件，表示指定的欄位，如果找不到欄位，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。
-或-
<paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)">
      <summary>擷取集合，表示指定的型別所定義的所有欄位。</summary>
      <param name="type">包含欄位的型別。</param>
      <returns>所指定型別的欄位集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)">
      <summary>傳回指定型別和指定介面的介面對應。</summary>
      <param name="typeInfo">要擷取其對應的型別。</param>
      <param name="interfaceType">要擷取其對應的介面。</param>
      <returns>物件，表示所指定介面和型別的介面對應。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> 為 <see langword="null" />。
-或-
<paramref name="interfaceType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeInfo" /> 未實作 <paramref name="interfaceType" />。
-或-
<paramref name="interfaceType" /> 未參考介面。
-或-
<paramref name="typeInfo" /> 或 <paramref name="interfaceType" /> 是開放式泛型型別。
-或-
<paramref name="interfaceType" /> 是泛型介面，而 <paramref name="typeInfo" /> 是陣列類型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="typeInfo" /> 表示泛型型別參數。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="typeInfo" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 執行個體，尚未呼叫其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法。
-或-
基底類別不支援叫用的方法。 衍生類別必須提供實作。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])">
      <summary>擷取表示指定之方法的物件。</summary>
      <param name="type">包含方法的型別。</param>
      <param name="name">方法的名稱。</param>
      <param name="parameters">陣列，其中包含方法的參數。</param>
      <returns>物件，表示指定的方法，如果找不到方法，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。
-或-
<paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱的方法。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)">
      <summary>擷取集合，表示指定的型別所定義的所有方法。</summary>
      <param name="type">包含方法的型別。</param>
      <returns>所指定型別的方法集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)">
      <summary>擷取集合，表示指定的型別所定義的所有屬性。</summary>
      <param name="type">包含屬性的型別。</param>
      <returns>所指定類型的屬性集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)">
      <summary>擷取表示指定之屬性的物件。</summary>
      <param name="type">包含屬性的型別。</param>
      <param name="name">屬性的名稱。</param>
      <returns>物件，表示指定的屬性，如果找不到屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。
-或-
<paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">發現多個具有所要求名稱的屬性。</exception>
    </member>
    <member name="T:System.Reflection.StrongNameKeyPair">
      <summary>封裝公用或私密金鑰組 (用來簽名強式名稱組件) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 類別的新執行個體，建立來自 <see langword="byte" /> 陣列的金鑰組 (Key Pair)。</summary>
      <param name="keyPairArray">含有金鑰組的 <see langword="byte" /> 型別的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairArray" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.IO.FileStream)">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 類別的新執行個體，建置來自 <see langword="FileStream" /> 的金鑰組。</summary>
      <param name="keyPairFile">含有金鑰組的 <see langword="FileStream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairFile" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 類別的新執行個體，從序列化資料建置金鑰組。</summary>
      <param name="info">存放序列物件資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 類別的新執行個體，建置來自 <see langword="String" /> 的金鑰組。</summary>
      <param name="keyPairContainer">含有金鑰組的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairContainer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="P:System.Reflection.StrongNameKeyPair.PublicKey">
      <summary>取得金鑰組 (Key Pair) 公開金鑰 (Public Key) 或公開金鑰語彙基元 (Token) 的公開部分。</summary>
      <returns>
        <see langword="byte" /> 型別的陣列，包含金鑰組的公開金鑰或公開金鑰語彙基元。</returns>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>執行於整個物件 Graph 已經還原序列化時。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用要重新執行個體化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的所有資料，設定 <see cref="T:System.Reflection.StrongNameKeyPair" /> 物件。</summary>
      <param name="info">要被填入 (Populate) 序列化資訊的物件。</param>
      <param name="context">序列化的目的端內容。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Reflection.TargetException">
      <summary>代表嘗試叫用無效目標時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor">
      <summary>使用空的訊息和例外狀況的根本原因，初始化 <see cref="T:System.Reflection.TargetException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化 (Serialization) 和內容資訊，初始化 <see cref="T:System.Reflection.TargetException" /> 類別的新執行個體。</summary>
      <param name="info">用於序列化或還原序列化物件的資料。</param>
      <param name="context">物件的目的端和資源。</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String)">
      <summary>使用指定的訊息和例外狀況的根本原因，初始化 <see cref="T:System.Reflection.TargetException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see langword="String" />，描述發生例外狀況的原因。</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Reflection.TargetException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>透過反映叫用的方法所擲回的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>使用造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 類別的新執行個體。</summary>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>當引動過程的參數數目不符合所預期的數目時，就會擲回例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>使用空訊息字串和例外狀況的根本原因，來初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>使用其訊息字串設為指定的訊息和根本原因例外狀況，來初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 類別的新執行個體。</summary>
      <param name="message">
        <see langword="String" />，描述這個例外狀況擲回的原因。</param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>指定型別屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>指定此類型為抽象。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>LPTSTR 被解譯為 ANSI。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>LPTSTR 會自動被解譯。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>指定類別欄位會由 Common Language Runtime 自動配置。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>指定呼叫型別的靜態 (Static) 方法時不要強制系統將型別初始化。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>指定此類型為類別。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>指定類別語意 (Semantics) 資訊；目前的類別為依照上下文而定的 (否則為變動的)。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>LPSTR 由部分實作特定的方式進行解譯，這可能會擲回 <see cref="T:System.NotSupportedException" />。 不會用於 Microsoft .NET Framework 實作中。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>用於擷取機器碼互通性的非標準編碼資訊。 未指定這些 2 位元值的含義。 不會用於 Microsoft .NET Framework 實作中。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>指定類別欄位配置於指定位移 (Offset)。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>型別具有關聯的安全性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>指定類別或介面從其他的模組匯入。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>指定此類型為介面。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>指定類別配置資訊。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>指定類別是使用組件 (Assembly) 可視性所產生的巢狀，因此只能藉由組件中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>指定類別是使用組件和家族可視性所產生的巢狀，因此只能藉由在家族和組件交集中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>指定類別是使用家族可視性所產生的巢狀，因此只能藉由其型別和任何衍生型別中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>指定類別是使用家族或組件可視性所產生的巢狀，因此只能藉由在家族和組件聯集中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>指定類別是使用私用 (Private) 可視性所產生的巢狀。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>指定類別是使用公用 (Public) 可視性所產生的巢狀。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>指定類別不是公用。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>指定類別是公用。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
      <summary>保留供執行階段使用的屬性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>執行階段應該檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>指定類別為固定的，並且無法擴充。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>指定類別欄位會循序配置，依照欄位發出至中繼資料 (Metadata) 的順序。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>指定類別可以序列化。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>指定類別在名稱所表示的方法中為特殊的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>用來擷取機器碼互通性 (Interoperability) 的字串資訊。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>LPTSTR 被解譯為 UNICODE。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>指定型別可視性資訊。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.WindowsRuntime">
      <summary>指定 Windows 執行階段 類型。</summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
      <summary>包裝 <see cref="T:System.Type" /> 物件，並將方法委派 (Delegate) 給該 <see langword="Type" />。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Reflection.TypeDelegator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
      <summary>指定封裝執行個體來初始化 <see cref="T:System.Reflection.TypeDelegator" /> 類別的新執行個體。</summary>
      <param name="delegatingType">
        <see cref="T:System.Type" /> 類別的執行個體，會封裝對物件方法的呼叫。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegatingType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
      <summary>取得實作型別的組件 (assembly)。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 物件，表示實作型別的組件。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
      <summary>取得組件的完整名稱。</summary>
      <returns>
        <see langword="String" />，含有組件的完整名稱。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
      <summary>取得目前型別的基底型別 (Base Type)。</summary>
      <returns>型別的基底型別。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
      <summary>取得實作型別的完整名稱。</summary>
      <returns>
        <see langword="String" />，包含型別的完整名稱。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
      <summary>取得指派給 <see langword="TypeDelegator" /> 的屬性 (Attribute)。</summary>
      <returns>
        <see langword="TypeAttributes" /> 物件，表示實作屬性旗標。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>取得實作 <see langword="TypeDelegator" /> 的建構函式。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="callConvention">呼叫慣例。</param>
      <param name="types">
        <see langword="Type" /> 型別的陣列包含參數數目、順序和型別的清單。 型別不能是 <see langword="null" />，請使用適當的 <see langword="GetMethod" /> 方法或空白陣列以搜尋沒有參數的方法。</param>
      <param name="modifiers">
        <see langword="ParameterModifier" /> 型別的陣列擁有長度與 <paramref name="types" /> 陣列相同，其元素表示與要取得方法之參數相關的屬性。</param>
      <returns>方法的 <see langword="ConstructorInfo" /> 物件 (符合指定的準則)，或為 <see langword="null" /> (如果找不到符合的)。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，表示為型別定義的建構函式，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="ConstructorInfo" /> 型別的陣列，包含為這個類別定義的指定建構函式。 如果未定義建構函式，則會傳回空陣列。 依據指定參數的值而定，只有公用建構函式、或者公用和非公用建構函式會被傳回。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
      <summary>傳回為這個型別定義的所有自訂屬性，指定是否搜尋型別的繼承 (Inheritance) 鏈結。</summary>
      <param name="inherit">指定是否搜尋這個型別的繼承鏈結以尋找屬性。</param>
      <returns>物件的陣列包含為這個型別定義的所有自訂屬性。</returns>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回由型別識別的自訂屬性陣列。</summary>
      <param name="attributeType">由型別識別的自訂屬性陣列。</param>
      <param name="inherit">指定是否搜尋這個型別的繼承鏈結以尋找屬性。</param>
      <returns>物件的陣列包含這個型別中定義的自訂屬性，而這些屬性符合 <paramref name="attributeType" /> 參數，指定是否搜尋型別的繼承鏈結，或是如果這個型別上沒有定義自訂屬性，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
      <summary>傳回物件的 <see cref="T:System.Type" />，由目前陣列、指標或 ByRef 所包含或參考。</summary>
      <returns>物件的 <see cref="T:System.Type" /> (由目前的陣列、指標或 <see langword="ByRef" /> 所包含或參考)，或為 <see langword="null" /> (如果目前的 <see cref="T:System.Type" /> 不是陣列、指標或 <see langword="ByRef" />)。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>傳回指定的事件。</summary>
      <param name="name">要取得的事件名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件，表示這個型別以指定名稱宣告或繼承的事件。 如果找不到這類事件，則此方法會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
      <summary>傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，表示由目前的 <see langword="TypeDelegator" /> 所宣告或繼承的公用事件。</summary>
      <returns>陣列，包含目前類型已宣告或繼承的所有事件。 如果沒有任何事件，則會傳回空白陣列。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
      <summary>傳回 <paramref name="bindingAttr" /> 中所指定的事件，由目前的 <see langword="TypeDelegator" /> 所宣告或繼承。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="EventInfo" /> 型別的陣列，包含 <paramref name="bindingAttr" /> 中指定的事件。 如果沒有任何事件，則會傳回空白陣列。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件，表示具有指定名稱的欄位。</summary>
      <param name="name">要尋找的欄位名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="FieldInfo" /> 物件，表示這個 <see langword="TypeDelegator" /> 以指定名稱宣告或繼承的欄位。 如果找不到這種欄位，則會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，表示為型別定義的資料欄位，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="FieldInfo" /> 型別的陣列，包含由目前的 <see langword="TypeDelegator" /> 所宣告或繼承的欄位。 如果沒有符合的欄位，則傳回空白陣列。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
      <summary>傳回由型別實作的指定介面，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <param name="name">由目前類別所實作之介面的完整名稱。</param>
      <param name="ignoreCase">如果忽略大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>
        <see langword="Type" /> 物件，表示目前類別 (具有與指定名稱相符的完整名稱) 所實作 (直接或間接) 的介面。 如果找不到名稱相符的介面，則傳回 Null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
      <summary>傳回指定介面類型的介面對應。</summary>
      <param name="interfaceType">要擷取對應的介面的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Reflection.InterfaceMapping" /> 物件，表示 <paramref name="interfaceType" /> 的介面對應。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
      <summary>傳回在目前類別和其基底類別 (Base Class) 上實作的所有介面。</summary>
      <returns>
        <see langword="Type" /> 型別的陣列，包含在目前類別和其基底類別上實作的所有介面。 如果未定義，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>傳回成員 (屬性、方法、建構函式、欄位、事件和巢狀型別 (Nested Type))，由指定的 <paramref name="name" />、<paramref name="type" /> 和 <paramref name="bindingAttr" /> 所指定。</summary>
      <param name="name">要取得的成員名稱。</param>
      <param name="type">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="bindingAttr">要取得的成員型別。</param>
      <returns>
        <see langword="MemberInfo" /> 型別的陣列，包含符合指定準則之目前類別和其基底類別的所有成員。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
      <summary>傳回由 <paramref name="bindingAttr" /> 所指定的成員。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="MemberInfo" /> 型別的陣列，包含符合 <paramref name="bindingAttr" /> 篩選條件之目前類別和其基底類別的所有成員。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束和指定的呼叫慣例，來搜尋指定的方法，而該方法的參數符合指定的引數類型和修飾詞。</summary>
      <param name="name">方法名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="callConvention">呼叫慣例。</param>
      <param name="types">
        <see langword="Type" /> 型別的陣列包含參數數目、順序和型別的清單。 型別不能是 <see langword="null" />，請使用適當的 <see langword="GetMethod" /> 方法或空白陣列以搜尋沒有參數的方法。</param>
      <param name="modifiers">
        <see langword="ParameterModifier" /> 型別的陣列擁有長度與 <paramref name="types" /> 陣列相同，其元素表示與要取得方法之參數相關的屬性。</param>
      <returns>實作方法的 <see langword="MethodInfoInfo" /> 物件 (符合指定的準則)，或為 <see langword="null" /> (如果找不到符合的)。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，表示型別的指定方法，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="MethodInfo" /> 物件的陣列，表示在這個 <see langword="TypeDelegator" /> 上定義的方法。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>傳回巢狀型別，由 <paramref name="name" /> 和 <paramref name="bindingAttr" /> 中所指定，而且由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 表示之型別所宣告或繼承。</summary>
      <param name="name">巢狀型別的名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="Type" /> 物件，表示巢狀型別。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>傳回型別 (由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝) 所宣告或繼承指定在 <paramref name="bindingAttr" /> 中的巢狀型別。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="Type" /> 型別的陣列，包含巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，表示型別的屬性，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <returns>
        <see langword="PropertyInfo" /> 物件的陣列，表示在這個 <see langword="TypeDelegator" /> 上定義的屬性。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數類型和修飾詞的建構函式。</summary>
      <param name="name">要取得的屬性。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。 這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="types">參數型別的清單。 表示參數數目、順序和型別的清單。 型別不能是 Null，請使用適當的 <see langword="GetMethod" /> 方法或空白陣列以搜尋沒有參數的方法。</param>
      <param name="modifiers">與具有元素型別相同長度的陣列，這些元素表示與要取得方法之參數相關的屬性。</param>
      <returns>屬性的 <see cref="T:System.Reflection.PropertyInfo" /> 物件 (符合指定的準則)，或為 Null (如果找不到符合的)。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
      <summary>取得實作型別的 GUID (全域唯一識別項)。</summary>
      <returns>GUID。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
      <summary>取得值，指出目前 <see cref="T:System.Type" /> 是否內含或參考其他型別，也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或 ByRef。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是陣列、指標或 ByRef，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>叫用指定的成員。 根據指定繫結器和引動過程屬性的條件約束，所要叫用的方法必須可存取，並提供與指定引數清單最特定的符合項目。</summary>
      <param name="name">要叫用之成員的名稱。 這可能是建構函式、方法、屬性或欄位。 如果傳遞的是空字串 ("")，則會叫用預設成員。</param>
      <param name="invokeAttr">引動過程屬性。 這必須是下列其中一個 <see cref="T:System.Reflection.BindingFlags" />：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />, <see langword="GetProperty" /> 或 <see langword="SetProperty" />。 您必須指定適當的引動過程屬性。 如果要叫用靜態 (Static) 成員，則必須設定 <see langword="Static" /> 旗標。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="target">要在其上叫用指定成員的物件。</param>
      <param name="args">
        <see langword="Object" /> 型別的陣列，包含要叫用的成員參數的數目、順序和型別。 如果 <paramref name="args" /> 包含未初始化的 <see langword="Object" />，則會被視為具有預設繫結器的空字串，可被擴大為 0、0.0 或字串。</param>
      <param name="modifiers">與 <paramref name="args" /> 長度相同的 <see langword="ParameterModifier" /> 型別陣列，與元素一起時，表示與要叫用之成員引數相關的屬性。 參數在成員的簽章中具有與其相關聯的屬性。 針對 ByRef 要使用 <see langword="ParameterModifier.ByRef" />，而 None 則要使用 <see langword="ParameterModifier.None" />。 預設繫結器確實與這些相符。 屬性 (例如 <see langword="In" /> 和 <see langword="InOut" />) 不會用於繫結中，且可以使用 <see langword="ParameterInfo" /> 來檢視。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 例如，要將表示 1000 的字串轉換為 <see langword="Double" /> 值時，這是必要的，因為 1000 在不同文化特性 (Culture) 中有不同的表示方式。 如果 <paramref name="culture" /> 為 <see langword="null" />，則會使用目前執行緒的 <see langword="CultureInfo" /> 的 <see langword="CultureInfo" />。</param>
      <param name="namedParameters">
        <see langword="String" /> 型別陣列，包含從元素零開始即與 <paramref name="args" /> 陣列完全相符的參數名稱。 陣列中不能有空白位置。 如果 <paramref name="args" />. <see langword="Length" /> 大於 <paramref name="namedParameters" />。 <see langword="Length" />，則會依序填入其餘的參數。</param>
      <returns>
        <see langword="Object" />，表示叫用之成員的傳回值。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
      <summary>傳回值，這個值表示 <see cref="T:System.Type" /> 是否為陣列。</summary>
      <returns>如果 <see langword="true" /> 是陣列，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>傳回值，這個值表示指定的型別是否可以指派到這個型別。</summary>
      <param name="typeInfo">要檢查的類型。</param>
      <returns>如果指定的類型可以指派到這個類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
      <summary>傳回值，這個值表示 <see cref="T:System.Type" /> 是否由參照傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsByRefLike" />
    <member name="P:System.Reflection.TypeDelegator.IsCollectible">
      <summary>取得這個物件 <see cref="F:System.Reflection.TypeDelegator.typeImpl" /> 的 <see cref="P:System.Reflection.MemberInfo.IsCollectible" /> 值，指出這個物件 (也就是 <see cref="T:System.Reflection.MemberInfo" /> 實作) 是否為可回收 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中所含組件的一部分。</summary>
      <returns>
        <see langword="true" />如果這個物件是實作為<see cref="T:System.Reflection.MemberInfo" /> , 則是保留在可回收元件載入內容中之元件的一部分, <see langword="false" />否則為。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
      <summary>傳回值，指出 <see cref="T:System.Type" /> 是否為 COM 物件。</summary>
      <returns>如果 <see langword="true" /> 是 COM 物件，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
      <summary>取得值，指出這個物件是否表示建構的泛型類型。</summary>
      <returns>如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
      <summary>指出由 <paramref name="attributeType" /> 識別的自訂屬性是否定義。</summary>
      <param name="attributeType">指定是否搜尋這個型別的繼承鏈結以尋找屬性。</param>
      <param name="inherit">由型別識別的自訂屬性陣列。</param>
      <returns>如果由 <paramref name="attributeType" /> 所識別的自訂屬性已定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">無法載入自訂屬性類型。</exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsGenericMethodParameter" />
    <member name="P:System.Reflection.TypeDelegator.IsGenericTypeParameter" />
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
      <summary>傳回值，指出 <see cref="T:System.Type" /> 是否為指標。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指標，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
      <summary>傳回值，指出 <see cref="T:System.Type" /> 是否為其中一個基本型別 (Primitive Type)。</summary>
      <returns>如果 <see langword="true" /> 是其中一個基本類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsSZArray" />
    <member name="P:System.Reflection.TypeDelegator.IsTypeDefinition" />
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
      <summary>傳回值，指出型別是否為實值型別 (Value Type)，也就是說，不是類別或介面。</summary>
      <returns>如果型別為實值型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsVariableBoundArray" />
    <member name="P:System.Reflection.TypeDelegator.MetadataToken">
      <summary>取得值，用於識別中繼資料 (Metadata) 中的這個實體 (Entity)。</summary>
      <returns>此值與模組結合後，是唯一能識別中繼資料中的實體。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
      <summary>取得包含實作型別的模組。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" /> 物件，表示實作型別的模組。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
      <summary>取得實作型別的名稱 (路徑已移除)。</summary>
      <returns>
        <see langword="String" />，含有型別的不完整名稱。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
      <summary>取得實作型別的命名空間。</summary>
      <returns>
        <see langword="String" /> 包含型別的命名空間。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
      <summary>取得實作型別的內部中繼資料表示的控制代碼。</summary>
      <returns>
        <see langword="RuntimeTypeHandle" /> 物件。</returns>
    </member>
    <member name="F:System.Reflection.TypeDelegator.typeImpl">
      <summary>數值，表示型別資訊。</summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
      <summary>取得表示實作型別的基礎 <see cref="T:System.Type" />。</summary>
      <returns>基礎型別。</returns>
    </member>
    <member name="T:System.Reflection.TypeFilter">
      <summary>篩選 <see cref="T:System.Type" /> 物件陣列中表示的類別。</summary>
      <param name="m">要套用篩選條件的 <see langword="Type" /> 物件。</param>
      <param name="filterCriteria">用來篩選清單的任意物件。</param>
      <returns>若要在篩選清單中包含 <see cref="T:System.Type" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.TypeInfo">
      <summary>代表下列各項的類型宣告：類別類型、介面類型、陣列類型、值類型、列舉類型、型別參數、泛型類型定義，以及開放式或封閉式的建構泛型類型。</summary>
    </member>
    <member name="M:System.Reflection.TypeInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.TypeInfo" /> 執行個體。</summary>
    </member>
    <member name="M:System.Reflection.TypeInfo.AsType">
      <summary>以 <see cref="T:System.Type" /> 物件方式傳回目前類型。</summary>
      <returns>目前類型。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredConstructors">
      <summary>取得目前類型所宣告之建構函式的集合。</summary>
      <returns>目前類型所宣告之建構函式的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredEvents">
      <summary>取得目前類型所定義之事件的集合。</summary>
      <returns>目前類型所定義之事件的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredFields">
      <summary>取得目前類型所定義之欄位的集合。</summary>
      <returns>目前類型所定義之欄位的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMembers">
      <summary>取得目前類型所定義之成員的集合。</summary>
      <returns>目前類型所定義之成員的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMethods">
      <summary>取得目前類型所定義之方法的集合。</summary>
      <returns>目前類型所定義之方法的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
      <summary>取得目前類型所定義之巢狀類型的集合。</summary>
      <returns>目前類型所定義之巢狀類型的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredProperties">
      <summary>取得目前類型所定義之屬性的集合。</summary>
      <returns>目前類型所定義之屬性的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.GenericTypeParameters">
      <summary>取得目前執行個體之泛型類型的陣列。</summary>
      <returns>陣列，其中包含目前執行個體的泛型型別參數，或如果目前的執行個體沒有泛型型別參數，則為 <see cref="P:System.Array.Length" /> 零的陣列。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
      <summary>傳回物件，此物件代表目前類型所宣告的指定公用事件。</summary>
      <param name="name">事件的名稱。</param>
      <returns>如果有找到則為代表指定之事件的物件；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
      <summary>傳回物件，此物件代表目前類型所宣告的指定公用欄位。</summary>
      <param name="name">欄位的名稱。</param>
      <returns>如果有找到則為代表指定之欄位的物件；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
      <summary>傳回物件，此物件代表目前類型所宣告的指定公用方法。</summary>
      <param name="name">方法的名稱。</param>
      <returns>如果有找到則為代表指定之方法的物件；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
      <summary>傳回集合，其中包含所有在目前類型宣告之所有公用方法中符合指定名稱者。</summary>
      <param name="name">要尋找的方法名稱。</param>
      <returns>包含符合 <paramref name="name" /> 之方法的集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
      <summary>傳回物件，此物件代表目前類型所宣告的指定公用巢狀類型。</summary>
      <param name="name">巢狀類型的名稱。</param>
      <returns>如果有找到則為代表指定之巢狀類型的物件；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
      <summary>傳回物件，此物件代表目前類型所宣告的指定公用屬性。</summary>
      <param name="name">屬性的名稱。</param>
      <returns>如果有找到則為代表指定之屬性的物件；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.TypeInfo.ImplementedInterfaces">
      <summary>取得目前類型所實作之介面的集合。</summary>
      <returns>目前類型所實作之介面的集合。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>傳回值，這個值表示指定的類型是否可以指派到目前的類型。</summary>
      <param name="typeInfo">要檢查的類型。</param>
      <returns>如果指定的類型可以指派到這個類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
      <summary>以 <see cref="T:System.Reflection.TypeInfo" /> 物件形式傳回目前類型的表示。</summary>
      <returns>目前類型的參考。</returns>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>提供載入器解析事件 (例如，<see cref="E:System.AppDomain.TypeResolve" />、<see cref="E:System.AppDomain.ResourceResolve" />、<see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" /> 和 <see cref="E:System.AppDomain.AssemblyResolve" /> 事件) 的資料。</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>藉由指定要解析之項目的名稱，初始化 <see cref="T:System.ResolveEventArgs" /> 類別的新執行個體。</summary>
      <param name="name">要解析的項目名稱。</param>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
      <summary>藉由指定要解析之項目的名稱以及解析其相依性的組件，初始化 <see cref="T:System.ResolveEventArgs" /> 類別的新執行個體。</summary>
      <param name="name">要解析的項目名稱。</param>
      <param name="requestingAssembly">解析其相依性的組件。</param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>取得要解析的物件名稱。</summary>
      <returns>要解析的物件名稱。</returns>
    </member>
    <member name="P:System.ResolveEventArgs.RequestingAssembly">
      <summary>取得解析其相依性的組件。</summary>
      <returns>要求 <see cref="P:System.ResolveEventArgs.Name" /> 屬性所指定之項目的組件。</returns>
    </member>
    <member name="T:System.Runtime.AmbiguousImplementationException">
      <summary>當多個不相容的介面方法覆寫另一個方法時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.AmbiguousImplementationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Runtime.AmbiguousImplementationException" /> 類別的新執行個體。</summary>
      <param name="message">當地語系化的錯誤訊息字串。</param>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.AmbiguousImplementationException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的字串。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。</param>
    </member>
    <member name="T:System.Runtime.AssemblyTargetedPatchBandAttribute">
      <summary>指定 .NET Framework 目標修補的修補帶資訊。</summary>
    </member>
    <member name="M:System.Runtime.AssemblyTargetedPatchBandAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.AssemblyTargetedPatchBandAttribute" /> 類別的新執行個體。</summary>
      <param name="targetedPatchBand">修補帶。</param>
    </member>
    <member name="P:System.Runtime.AssemblyTargetedPatchBandAttribute.TargetedPatchBand">
      <summary>取得修補帶。</summary>
      <returns>修補帶資訊。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>指定存取屬性化 (Attributed) 欄位的屬性 (Property) 名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>使用用來存取屬性化 (Attributed) 欄位的屬性 (Property) 名稱，初始化 <see langword="AccessedThroughPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="propertyName">用來存取屬性化 (Attributed) 欄位的屬性 (Property) 名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>取得用來存取屬性化 (Attributed) 欄位的屬性 (Property) 名稱。</summary>
      <returns>用來存取屬性化 (Attributed) 欄位的屬性 (Property) 名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute">
      <summary>指出某個方法是否為非同步迭代器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基礎狀態機器類型的類型物件，該類型會被用來實作狀態機器方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
      <summary>指出非同步方法產生器的類型，作為非同步方法的傳回型別時，它應該由語言編譯器用來建置屬性化型別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute" /> 類別的新執行個體。</summary>
      <param name="builderType">相關聯產生器的類型。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
      <summary>取得相關聯產生器的類型。</summary>
      <returns>相關聯產生器的類型。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>表示方法是以 Async 還是以 async 修飾詞標記。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基礎狀態機器類型的類型物件，該類型會被用來實作狀態機器方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder">
      <summary>表示非同步方法產生器，會傳回 <see cref="T:System.Threading.Tasks.ValueTask" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder" /> 結構的執行個體。</summary>
      <returns>初始化的執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetException(System.Exception)">
      <summary>將工作標示為失敗，並將指定的例外狀況繫結至工作。</summary>
      <param name="exception">要繫結至工作的例外狀況。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetResult">
      <summary>將工作標記為已成功完成。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>將產生器與指定的狀態機器產生關聯。</summary>
      <param name="stateMachine">要和產生器產生關聯的狀態機器執行個體。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Start``1(``0@)">
      <summary>開始執行具有相關聯狀態機器的產生器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Task">
      <summary>取得此產生器的工作。</summary>
      <returns>此產生器的工作。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1">
      <summary>表示會傳回 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的非同步方法產生器。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排程狀態機器以在指定的 awaiter 完成時繼續下一個動作。</summary>
      <param name="awaiter">awaiter。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">awaiter 的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1" /> 結構的執行個體。</summary>
      <returns>初始化的執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>將工作標示為失敗，並將指定的例外狀況繫結至工作。</summary>
      <param name="exception">要繫結至工作的例外狀況。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(`0)">
      <summary>將工作標記為已成功完成。</summary>
      <param name="result">要用來完成工作的結果。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>將產生器與指定的狀態機器產生關聯。</summary>
      <param name="stateMachine">要和產生器產生關聯的狀態機器執行個體。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start``1(``0@)">
      <summary>開始執行具有相關聯狀態機器的產生器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的類型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Task">
      <summary>取得此產生器的工作。</summary>
      <returns>此產生器的工作。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
      <summary>允許擷取傳遞至方法的運算式。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> 類別的新執行個體。</summary>
      <param name="parameterName">目標參數的名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
      <summary>取得 CallerArgumentExpression 的目標參數名稱</summary>
      <returns>CallerArgumentExpression 之目標參數的名稱</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>可讓您取得包含呼叫端的原始程式檔完整路徑。 這是在編譯時的檔案路徑。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>可讓您取得呼叫這個方法之原始程式檔中的行號。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>可讓您取得方法呼叫端的方法或屬性名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
      <summary>指定參數，以便控制程式碼的嚴格程度，而此程式碼是由 Common Language Runtime 的 Just-In-Time (JIT) 編譯器所產生。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
      <summary>將組件 (Assembly) 標記為不需要字串常值 (String Literal) 暫留。 在應用程式定義域中，通用語言執行平台會為每個唯一的字串常值各建立一個字串物件，而不是建立多個複本。 這種行為稱為字串暫留，需要在內部建置取用記憶體資源的輔助資料表。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>控制由 Common Language Runtime 的 Just-In-Time (JIT) 編譯器所產生之程式碼的嚴格程度。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>使用指定的編譯 (Compilation) 寬鬆度，初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 類別的新執行個體。</summary>
      <param name="relaxations">編譯 (Compilation) 寬鬆度。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值，初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 類別的新執行個體。</summary>
      <param name="relaxations">其中一個 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>取得在建構目前的物件時所指定的編譯 (Compilation) 寬鬆度。</summary>
      <returns>在建構目前的物件時所指定的編譯 (Compilation) 寬鬆度。  
將 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 列舉型別與 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> 屬性搭配使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>區別編譯器產生的項目與使用者產生的項目。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute">
      <summary>指示類別應該視為具有全域範圍。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>讓編譯器動態地將物件欄位附加至 Managed 物件。</summary>
      <typeparam name="TKey">欄位所附加至的參考類型。</typeparam>
      <typeparam name="TValue">欄位的類型。 這必須是參考類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>將索引鍵加入至表格。</summary>
      <param name="key">要加入的索引鍵。 <paramref name="key" /> 代表要附加屬性的物件。</param>
      <param name="value">索引鍵的屬性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 已經存在。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)">
      <summary>如果索引鍵不存在，則新增索引鍵和值；如果存在，則更新現有的索引鍵值。</summary>
      <param name="key">要新增或更新的索引鍵。 可能不是 <see langword="null" />。</param>
      <param name="value">要與 <paramref name="key" /> 建立關聯的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear">
      <summary>清除所有的索引鍵/值組。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>代表方法，這個方法會建立非預設值，以作為索引鍵/值組的一部分加入 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 物件。</summary>
      <param name="key">屬於所要建立之值的索引鍵。</param>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
      <returns>參考類型的執行個體，代表要附加至所指定索引鍵的值。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>以不可分割方式搜尋表格中的指定索引鍵並傳回對應值。 如果索引鍵不存在於資料表中，則此方法會叫用表示資料表值之類別的無參數建構函式，以建立繫結至指定索引鍵的值。</summary>
      <param name="key">要搜尋的索引鍵。 <paramref name="key" /> 代表要附加屬性的物件。</param>
      <returns>如果 <paramref name="key" /> 已存在於資料表中，則為對應至 <paramref name="key" /> 的值；否則為 <paramref name="TValue" /> 泛型型別參數定義之類別的無參數建構函式所建立新值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.MissingMemberException" />。  


            

 表示資料表值未定義無參數建構函式的類別。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>以不可分割方式搜尋表格中的指定索引鍵並傳回對應值。 如果索引鍵不存在於表格中，則此方法會叫用回呼方法來建立繫結至指定索引鍵的值。</summary>
      <param name="key">要搜尋的索引鍵。 <paramref name="key" /> 代表要附加屬性的物件。</param>
      <param name="createValueCallback">方法的委派，可針對指定的 <paramref name="key" /> 建立值。 它具有類型為 <c>TKey</c> 的單一參數，並且會傳回 <c>TValue</c> 類型的值。</param>
      <returns>如果 <paramref name="key" /> 已存在於表格中，則為附加至 <paramref name="key" /> 的值，否則為 <paramref name="createValueCallback" /> 委派所傳回的新值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="createValueCallback" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>從表格移除索引鍵和其值。</summary>
      <param name="key">要移除的索引鍵。</param>
      <returns>如果已找到並移除索引鍵則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator" />
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>取得指定之索引鍵的值。</summary>
      <param name="key">索引鍵，表示具有附加屬性的物件。</param>
      <param name="value">這個方法傳回的內容會包含附加的屬性值。 如果找不到 <paramref name="key" />，則 <paramref name="value" /> 會包含預設值。</param>
      <returns>如果找到 <see langword="true" /> 則為 <paramref name="key" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable">
      <summary>提供 awaitable 物件，啟用工作上之設定的等候。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
      <summary>提供 awaitable (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable" />) 物件的 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
      <summary>結束等候已完成的工作。</summary>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">以出錯狀態完成的工作。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
      <summary>取得值，指出等候的工作是否已完成。</summary>
      <returns>如果等候的工作已完成，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>排程此 awaiter 相關工作的接續動作。</summary>
      <param name="continuation">等候作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>排程此 awaiter 相關工作的接續動作。</summary>
      <param name="continuation">等候作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
      <summary>傳回這個 awaitable 物件的 awaiter。</summary>
      <returns>awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
      <summary>提供 awaitable 物件，啟用工作上之設定的等候。</summary>
      <typeparam name="TResult">這個 <see cref="T:System.Threading.Tasks.Task`1" /> 所產生之結果的型別。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
      <summary>提供 awaitable 物件 (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1" />) 的 awaiter。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
      <summary>結束等候已完成的工作。</summary>
      <returns>已完成的工作的結果。</returns>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">以出錯狀態完成的工作。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
      <summary>取得值，指出等候的工作是否已完成。</summary>
      <returns>如果等候的工作已完成，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>排程此 awaiter 相關工作的接續動作。</summary>
      <param name="continuation">等候作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>排程此 awaiter 相關工作的接續動作。</summary>
      <param name="continuation">等候作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
      <summary>傳回這個 awaitable 物件的 awaiter。</summary>
      <returns>awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable">
      <summary>提供 awaitable 型別，啟用 <see cref="T:System.Threading.Tasks.ValueTask" /> 已設定的 await。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter">
      <summary>為 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 提供 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult">
      <summary>取得 ValueTask 的結果。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.IsCompleted">
      <summary>取得值，指出 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 是否已完成。</summary>
      <returns>
        <see langword="true" />如果已完成, 則為, <see langword="false" />否則為。 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>排程 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 的接續動作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 的接續動作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>排程 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 的接續動作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 的接續動作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.GetAwaiter">
      <summary>傳回此 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 執行個體的 awaiter。</summary>
      <returns>此執行個體的 awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1">
      <summary>提供可等候型別，啟用 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 上已設定的 await。</summary>
      <typeparam name="TResult">產生之結果的類型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter">
      <summary>提供 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 的 awaiter。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult">
      <summary>取得 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的結果。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的結果。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.IsCompleted">
      <summary>取得值，指出 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 是否已完成。</summary>
      <returns>
        <see langword="true" />如果已完成, 則為, <see langword="false" />否則為。 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>排程 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 的接續動作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 的接續動作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>排程 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 的接續動作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 的接續動作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.GetAwaiter">
      <summary>傳回此 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 執行個體的 awaiter。</summary>
      <returns>此執行個體的 awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>定義編譯器可以保存之欄位或方法參數的常數值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>取得這個屬性 (Attribute) 儲存的常數值。</summary>
      <returns>這個屬性儲存的常數值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>保存 (Persist) 欄位或參數的 8 位元組 <see cref="T:System.DateTime" /> 常數。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>使用表示這個執行個體 (Instance) 日期和時間的 100 奈秒 (Nanosecond) 刻度數字，初始化 <see langword="DateTimeConstantAttribute" /> 類別的新執行個體。</summary>
      <param name="ticks">100 奈秒刻度數字，表示這個執行個體的日期和時間。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>取得表示這個執行個體日期和時間的 100 奈秒刻度數字。</summary>
      <returns>100 奈秒刻度數字，表示這個執行個體的日期和時間。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>將 <see cref="T:System.Decimal" /> 常數值儲存於中繼資料 (Metadata) 中。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的帶正負號的整數 (Signed Integer) 值，初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 類別的新執行個體。</summary>
      <param name="scale">10 次方的縮放比例，表示小數點右方的數字數目。 有效值為 0 到 28 之間 (含)。</param>
      <param name="sign">0 的值表示正值，而 1 的值表示負值。</param>
      <param name="hi">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個高位元。</param>
      <param name="mid">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中間 32 個位元。</param>
      <param name="low">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個低位元。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>使用指定的不帶正負號的整數 (Unsigned Integer) 值，初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 類別的新執行個體。</summary>
      <param name="scale">10 次方的縮放比例，表示小數點右方的數字數目。 有效值為 0 到 28 之間 (含)。</param>
      <param name="sign">0 的值表示正值，而 1 的值表示負值。</param>
      <param name="hi">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個高位元。</param>
      <param name="mid">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中間 32 個位元。</param>
      <param name="low">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個低位元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>取得儲存在這個屬性中的十進位常數。</summary>
      <returns>儲存在這個屬性中的十進位常數。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DefaultDependencyAttribute">
      <summary>提供提示給 Common Language Runtime (CLR)，指出載入相依性的可能性。 這個類別是用於相依的組件中，表示當父代並未指定 <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> 屬性 (Attribute) 時，應該使用哪些提示。  這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DefaultDependencyAttribute.#ctor(System.Runtime.CompilerServices.LoadHint)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.DefaultDependencyAttribute" /> 繫結，初始化 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 類別的新執行個體。</summary>
      <param name="loadHintArgument">其中一個 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，表示預設繫結的喜好設定。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DefaultDependencyAttribute.LoadHint">
      <summary>取得 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，表示組件載入相依性的時機。</summary>
      <returns>其中一個 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DependencyAttribute">
      <summary>表示參考組件載入相依性的時機。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DependencyAttribute.#ctor(System.String,System.Runtime.CompilerServices.LoadHint)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，初始化 <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> 類別的新執行個體。</summary>
      <param name="dependentAssemblyArgument">要繫結至的相依組件。</param>
      <param name="loadHintArgument">其中一個 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.DependentAssembly">
      <summary>取得相依組件的值。</summary>
      <returns>相依組件的名稱。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.LoadHint">
      <summary>取得 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，表示組件載入相依性的時機。</summary>
      <returns>其中一個 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute">
      <summary>表示包含在組件類型中的任何私用成員不可用於反映。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DiscardableAttribute">
      <summary>標記型別定義為可棄置的。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DiscardableAttribute.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Runtime.CompilerServices.DiscardableAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.EnumeratorCancellationAttribute">
      <summary>允許非同步可列舉方法的使用者，針對應該從 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> 接收取消語彙基元值的參數進行標記。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.EnumeratorCancellationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.EnumeratorCancellationAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>表示方法是擴充方法，或表示類別或組件包含擴充方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
      <summary>在整個存留期 (Lifetime) 中，固定靜態值型別欄位的位址。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>表示欄位應視為包含指定基本類型的固定項目數。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> 類別的新執行個體。</summary>
      <param name="elementType">緩衝區中包含的項目型別。</param>
      <param name="length">緩衝區中的項目數。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>取得固定緩衝區中包含的項目型別。</summary>
      <returns>項目的型別。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>取得固定緩衝區中的項目數。</summary>
      <returns>固定緩衝區中的項目數。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
      <summary>提供靜態方法，從複合格式字串和其引數建立 <see cref="T:System.FormattableString" /> 物件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
      <summary>從複合格式字串和其引數建立 <see cref="T:System.FormattableString" /> 執行個體。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arguments">其字串表示要插入結果字串中的引數。</param>
      <returns>表示複合格式字串和其引數的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。  
-或- 
 <paramref name="arguments" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IAsyncStateMachine">
      <summary>表示針對非同步方法所產生的狀態機器。 這個型別僅供編譯器使用。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext">
      <summary>將狀態機器移到下一個狀態。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>使用堆積配置的複本設定狀態機器。</summary>
      <param name="stateMachine">堆積配置的複本。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion">
      <summary>表示在 await 作業完成時排程接續符號的 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(System.Action)">
      <summary>排程執行個體完成時所叫用的接續動作。</summary>
      <param name="continuation">作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數是 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>在不直接支援索引子 (Indexer) 的程式語言中指示可藉以得知索引子的名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> 類別的新執行個體。</summary>
      <param name="indexerName">索引子的名稱，當顯示給其他語言時。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.INotifyCompletion">
      <summary>表示在作業完成時排程接續符號的作業。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)">
      <summary>排程執行個體完成時所叫用的接續動作。</summary>
      <param name="continuation">作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數是 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>將通常只有在目前組件中可見的類型，指定為指定組件中可見的。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>使用指定的 Friend 組件名稱，初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyName">Friend 組件的名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
      <summary>這個屬性未實作。</summary>
      <returns>這個屬性不會傳回值。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>取得 friend 組件的名稱，以利使用 <see langword="internal" /> 關鍵字標記的所有型別和型別成員都能看見。</summary>
      <returns>表示 friend 組件之名稱的字串。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsByRefLikeAttribute">
      <summary>指出結構類似 ByRef。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IsByRefLikeAttribute.#ctor">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.IsByRefLikeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>表示修改的型別具有 <see langword="const" /> 修飾詞。 這個類別無法被繼承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsReadOnlyAttribute">
      <summary>將程式項目標示為唯讀。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IsReadOnlyAttribute.#ctor">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.IsReadOnlyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定義屬性，以存取物件所參考的值。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>取得或設定物件所參考的值。</summary>
      <returns>物件所參考的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>標記欄位為 Volatile。 這個類別無法被繼承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>指出 Visual Basic 的方法是否以 <see langword="Iterator" /> 修飾詞標記。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基礎狀態機器類型的類型物件，該類型會被用來實作狀態機器方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ITuple">
      <summary>定義一般用途的元組實作，允許存取元組執行個體成員，不需要知道基礎的元組類型。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)">
      <summary>傳回指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 <see langword="Tuple" /> 之 <see langword="Item1" /> 的 0，到小於 <see langword="Tuple" /> 的項目數目。</param>
      <returns>指定的 <see langword="Tuple" /> 項目值。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ITuple.Length">
      <summary>取得此 <see langword="Tuple" /> 執行個體中的元素數。</summary>
      <returns>此 <see langword="Tuple" /> 執行個體中的項目數。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.LoadHint">
      <summary>指定相依組件的慣用預設繫結。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Always">
      <summary>永遠載入相依性。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Default">
      <summary>沒有指定的喜好設定。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Sometimes">
      <summary>有時載入相依性。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>定義方法實作的方式。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>指定方法以 Microsoft 中繼語言 (MSIL) 實作。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>指定方法實作是採用機器碼。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
      <summary>指定方法實作是採用最佳化中繼語言 (OPTIL)。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>指定方法實作由執行階段提供。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>指定如何實作方式的詳細資料。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 類別的新執行個體。</summary>
      <param name="value">位元遮罩，表示所要的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，指定屬性方法的屬性。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 類別的新執行個體。</summary>
      <param name="methodImplOptions">
        <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，指定屬性化 (Attributed) 方法的屬性 (Property)。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> 值，表示要提供何種實作 (Implementation) 給這個方法。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>取得描述屬性方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</summary>
      <returns>描述屬性方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>定義方法實作方式的詳細資料。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>此方法應該盡可能內嵌。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization">
      <summary>此方法包含最忙碌路徑，因此應該進行最佳化。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>方法已宣告，但是其實作在其他地方提供。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>呼叫是內部的，亦即，它會呼叫在 Common Language Runtime 內實作的方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>方法無法內嵌。 內嵌是一項最佳化作業，透過該作業，方法呼叫可使用方法主體取代。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>對可能的程式碼產生問題進行偵錯時，方法不是由 Just-In-Time (JIT) 編譯器或原生程式碼產生最佳化 (請參閱 Ngen.exe)。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>方法簽章會完全依宣告方式匯出。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>方法一次只能由一個執行緒來執行。 靜態方法鎖定型別，而執行個體方法鎖定執行個體。 在任何執行個體函式中只能執行一個執行緒，且只有一個執行緒可在任何類別的靜態函式中執行。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>方法是以 Unmanaged 程式碼實作。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>識別做為參考組件的組件，這個組件包含中繼資料但沒有可執行程式碼。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>使用指定的描述，初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 類別的新執行個體。</summary>
      <param name="description">參考組件的描述。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>取得參考組件的描述。</summary>
      <returns>參考組件的描述。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>指定是否使用 <see cref="T:System.Exception" /> 物件來包裝不是衍生自 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 類別的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>取得或設定值，指出是否使用 <see cref="T:System.Exception" /> 物件來包裝不是衍生自 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 類別的例外狀況。</summary>
      <returns>如果不是衍生自 <see cref="T:System.Exception" /> 類別的例外狀況應該包裝在 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 物件中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeFeature">
      <summary>類別，其靜態 <see cref="M:System.Runtime.CompilerServices.RuntimeFeature.IsSupported(System.String)" /> 方法會檢查 Common Language Runtime 是否支援指定的功能。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.RuntimeFeature.DefaultImplementationsOfInterfaces">
      <summary>表示這個版本的執行階段支援預設介面方法實作。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeFeature.IsDynamicCodeCompiled">
      <summary>取得值，表示執行階段是否會編譯動態程式碼。</summary>
      <returns>
        <see langword="true" />如果執行時間編譯動態程式碼, 則為,<see langword="false" />如果沒有編譯動態程式碼, 或不知道這個屬性。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeFeature.IsDynamicCodeSupported">
      <summary>取得值，這個值會判斷執行階段是否支援動態程式碼。</summary>
      <returns>
        <see langword="true" />如果執行時間支援動態程式碼, 則為,<see langword="false" />如果不支援動態程式碼, 或不知道此屬性的相關資訊, 則為。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeFeature.IsSupported(System.String)">
      <summary>判斷 Common Language Runtime 是否支援指定的功能。</summary>
      <param name="feature">功能名稱。</param>
      <returns>如果支援 <paramref name="feature" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.RuntimeFeature.PortablePdb">
      <summary>取得可攜式 PDB 功能的名稱。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>提供支援編譯器的靜態方法和屬性。 這個類別無法被繼承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode">
      <summary>表示發生例外狀況時要執行的方法。</summary>
      <param name="userData">要傳遞至委派的資料。</param>
      <param name="exceptionThrown">
        <see langword="true" /> 表示已擲回例外狀況，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>確保其餘的堆疊空間夠大，足以執行一般的 .NET Framework 功能。</summary>
      <exception cref="T:System.InsufficientExecutionStackException">可用的堆疊空間不足，無法執行平均 .NET Framework 函式。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.Equals(System.Object,System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 執行個體是否視為相等。</summary>
      <param name="o1">要比較的第一個物件。</param>
      <param name="o2">要比較的第二個物件。</param>
      <returns>如果 <paramref name="o1" /> 參數是與 <paramref name="o2" /> 參數相同的執行個體，或兩者都是 <see langword="null" />，或 <c>o1.Equals(o2)</c> 傳回 <see langword="true" /> 的話，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)">
      <summary>使用 <see cref="T:System.Delegate" /> 執行程式碼，如果發生例外狀況，則使用另一個 <see cref="T:System.Delegate" /> 執行其他程式碼。</summary>
      <param name="code">要嘗試之程式碼的委派。</param>
      <param name="backoutCode">在發生例外狀況時執行的程式碼委派。</param>
      <param name="userData">要傳遞至 <paramref name="code" /> 和 <paramref name="backoutCode" /> 的資料。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>做為特定物件的雜湊函式，適合在使用雜湊碼之雜湊演算法及資料結構中使用。</summary>
      <param name="o">要為其擷取雜湊程式碼的物件。</param>
      <returns>由 <paramref name="o" /> 參數所識別之物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>對實值類型進行 Box 動作。</summary>
      <param name="obj">要進行 Box 的實值類型。</param>
      <returns>如果是值類別，則為 <paramref name="obj" /> Boxed 複本，否則為 <paramref name="obj" /> 本身。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
      <summary>使用所指定範圍來切割指定的陣列。</summary>
      <param name="array">要切割的陣列。</param>
      <param name="range">物件，用於決定要包含在配量中的 <paramref name="array" /> 部分。</param>
      <typeparam name="T">陣列中項目的型別。</typeparam>
      <returns>由 <paramref name="range" /> 定義的子陣列。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetUninitializedObject(System.Type)">
      <param name="type" />
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>提供從儲存在模組中的資料初始化陣列的快速方式。</summary>
      <param name="array">要初始化的陣列。</param>
      <param name="fldHandle">一種欄位控制代碼，可指定用來初始化陣列的資料位置。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.IsReferenceOrContainsReferences``1">
      <summary>傳回值，指出所指定類型是參考型別或包含參考的實值型別。</summary>
      <typeparam name="T">類型。</typeparam>
      <returns>若所指定類型是參考型別或包含參考的實值型別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>取得指定字串中資料的位移 (以位元組為單位)。</summary>
      <returns>從 <see cref="T:System.String" /> 物件開始到字串中之第一個字元的位元組位移。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions">
      <summary>指定一段程式碼主體做為限制的執行區域 (CER)。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegionsNoOP">
      <summary>指定程式碼主體做為限制的執行區域 (CER)，但不執行任何探查。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareContractedDelegate(System.Delegate)">
      <summary>提供讓應用程式動態準備 <see cref="T:System.AppDomain" /> 事件委派的方法。</summary>
      <param name="d">要準備的事件委派。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareDelegate(System.Delegate)">
      <summary>表示應該準備指定的委派，以便將該委派加入限制的執行區域 (CER)。</summary>
      <param name="d">要準備的委派類型。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)">
      <summary>準備要加入至限制的執行區域 (CER) 的方法。</summary>
      <param name="method">要準備的方法控制代碼。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle,System.RuntimeTypeHandle[])">
      <summary>使用指定的執行個體化 (Instantiation) 準備要加入至限制的執行區域 (CER) 的方法。</summary>
      <param name="method">要準備的方法控制代碼。</param>
      <param name="instantiation">要傳遞至方法的執行個體化。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack">
      <summary>探查特定的堆疊空間量，以確保後續的程式碼區塊中不會發生堆疊溢位 (假設您的程式碼只使用有限且適量的堆疊空間)。 建議您使用限制的執行區域 (CER) 來取代這個方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>確保所指定類型的類型初始設定式 (也稱為靜態建構函式) 已執行。</summary>
      <param name="type">指定應為其執行類型初始設定式之類型的類型控制代碼。</param>
      <exception cref="T:System.TypeInitializationException">類型初始設定式擲回例外狀況。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunModuleConstructor(System.ModuleHandle)">
      <summary>執行指定的模組建構函式方法。</summary>
      <param name="module">一種控制代碼，可指定要執行的模組建構函式方法。</param>
      <exception cref="T:System.TypeInitializationException">模組建構函式擲回例外狀況。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.TryCode">
      <summary>表示應在 try 區塊中執行的程式碼委派。</summary>
      <param name="userData">要傳遞至委派的資料。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.TryEnsureSufficientExecutionStack" />
    <member name="T:System.Runtime.CompilerServices.RuntimeWrappedException">
      <summary>包裝不是衍生自 <see cref="T:System.Exception" /> 類別的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.#ctor(System.Object)">
      <param name="thrownObject" />
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用與例外狀況相關的資訊來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，包含有關擲回之例外狀況的序列化物件資料。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException">
      <summary>取得 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 物件所包裝的物件。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 物件所包裝的物件。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SpecialNameAttribute">
      <summary>表示執行階段或工具會以特殊方式處理型別或成員。  這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SpecialNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SpecialNameAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>可讓您判斷方法是否為狀態機器方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基礎狀態機器型別的型別物件，編譯器產生此型別以實作狀態機器方法。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>傳回基礎狀態機器型別的型別物件，編譯器產生此型別以實作狀態機器方法。</summary>
      <returns>取得基礎狀態機器型別的型別物件，編譯器產生此型別以實作狀態機器方法。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StringFreezingAttribute">
      <summary>已取代。 使用 Ngen.exe (原生映像產生器) 建立原生映像時，凍結字串常值。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StringFreezingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StringFreezingAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>儲存值的參考。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考值的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>初始化新的 StrongBox，用於參考呼叫時可接收值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>使用提供的值來初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 將參考的值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>取得或設定 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 所參考的值。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.SuppressIldasmAttribute">
      <summary>防止 Ildasm.exe (IL 反組譯工具) 將組件反組譯。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SuppressIldasmAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SuppressIldasmAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
      <summary>提供等候非同步工作完成的物件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult">
      <summary>結束對非同步工作完成的等候。</summary>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" />物件未正確初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">完成的工作處於 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
      <summary>取得值，指出非同步工作是否已經完成。</summary>
      <returns>如果工作已完成，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" />物件未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
      <summary>設定 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 物件停止等待非同步工作完成時要執行時的動作。</summary>
      <param name="continuation">等候作業完成時要執行的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" />物件未正確初始化。</exception>
      <exception cref="T:System.InvalidOperationException">awaiter 未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>排程此 awaiter 相關聯的非同步工作的接續動作。</summary>
      <param name="continuation">等候作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">awaiter 未正確初始化。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter`1">
      <summary>表示等候非同步工作完成，並提供結果參數的物件。</summary>
      <typeparam name="TResult">工作的結果。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
      <summary>結束對非同步工作完成的等候。</summary>
      <returns>已完成的工作的結果。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" />物件未正確初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">完成的工作處於 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
      <summary>取得值，指出非同步工作是否已經完成。</summary>
      <returns>如果工作已完成，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" />物件未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
      <summary>設定 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 物件停止等待非同步工作完成時要執行時的動作。</summary>
      <param name="continuation">等候作業完成時要執行的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" />物件未正確初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>排程此 awaiter 相關聯的非同步工作的接續動作。</summary>
      <param name="continuation">等候作業完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正確初始化。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TupleElementNamesAttribute">
      <summary>指出應將成員上值元組的使用方式視為含有元素名稱的元組。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TupleElementNamesAttribute.#ctor(System.String[])">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TupleElementNamesAttribute" /> 類別的新執行個體。</summary>
      <param name="transformNames">字串陣列，以類型建構的前序深度優先走訪方式，指定哪些值元組出現之處應該包含元素名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TupleElementNamesAttribute.TransformNames">
      <summary>以類型建構的前序深度優先走訪方式，指定哪些值元組元素應該包含元素名稱。</summary>
      <returns>陣列，表示哪些值元組元素應該包含元素名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>指定另一個組件中的來源 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyFullName">另一個組件中的來源 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> 為 <see langword="null" /> 或是空的。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>取得來源型別的組件限定名稱。</summary>
      <returns>來源型別的組件限定名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>指定另一個組件中的目的 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> 類別的新執行個體，並指定目的 <see cref="T:System.Type" />。</summary>
      <param name="destination">另一個組件中的目的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>取得另一個組件中的目的 <see cref="T:System.Type" />。</summary>
      <returns>另一個組件中的目的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>指定某個型別含有可能會溢位的 Unmanaged 陣列。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter">
      <summary>為 <see cref="T:System.Threading.Tasks.ValueTask" /> 提供 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.GetResult">
      <summary>取得 ValueTask 的結果。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter.IsCompleted">
      <summary>取得值，指出 <see cref="T:System.Threading.Tasks.ValueTask" /> 是否已完成。</summary>
      <returns>
        <see langword="true" />如果 ValueTask 已完成, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>排程此 <see cref="T:System.Threading.Tasks.ValueTask" /> 的接續動作。</summary>
      <param name="continuation">這個 <see cref="T:System.Threading.Tasks.ValueTask" /> 的接續動作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>排程這個 ValueTask 的接續動作。</summary>
      <param name="continuation" />
    </member>
    <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter`1">
      <summary>為 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 提供 awaiter。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult">
      <summary>取得 ValueTask 的結果。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter`1.IsCompleted">
      <summary>取得值，指出 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 是否已完成。</summary>
      <returns>
        <see langword="true" />如果已完成, 則為, <see langword="false" />否則為。 <see cref="T:System.Threading.Tasks.ValueTask`1" /></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.OnCompleted(System.Action)">
      <summary>排程此 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的接續動作。</summary>
      <param name="continuation" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>排程這個 ValueTask 的接續動作。</summary>
      <param name="continuation">這個 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的接續動作。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
      <summary>以非同步方式切換到目標環境時，提供等候的內容。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
      <summary>擷取此類別執行個體的 <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> 物件。</summary>
      <returns>物件，用來監視非同步作業的完成。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
      <summary>提供要切換至目標環境的 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
      <summary>結束等候作業。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
      <summary>取得值，指出是否不需要 yield。</summary>
      <returns>永遠為 <see langword="false" />，這表示 <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> 永遠都要有 yield。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
      <summary>設定要叫用的接續符號。</summary>
      <param name="continuation">以非同步方式叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>將 <paramref name="continuation" /> 回傳至目前的內容。</summary>
      <param name="continuation">以非同步方式叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Cer">
      <summary>指定在限制之執行區域內呼叫時的方法行為。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
      <summary>在例外條件下，此方法可能失敗。 在這種情況下，此方法會向呼叫方法報告成功或失敗。 此方法必須在方法主體的週圍具備 CER 以確保它可以報告傳回值。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.None">
      <summary>方法、型別或組件沒有 CER 概念。 它不會利用 CER 保證。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.Success">
      <summary>在例外條件下，此方法會保證成功。 應永遠在呼叫的方法週圍建構 CER，即使它是從非 CER 區域中呼叫的也如此。 如果完成其預定要做的，則方法會成功。 例如，以 <c>ReliabilityContractAttribute(Cer.Success)</c> 標記 <see cref="P:System.Collections.ArrayList.Count" />，表示在 CER 下執行時，一律傳回 <see cref="T:System.Collections.ArrayList" /> 中的項目計數，絕不會讓內部欄位處於未定狀態。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Consistency">
      <summary>指定可靠性合約。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain">
      <summary>在例外條件下，Common Language Runtime (CLR) 將不保證目前應用程式定義域的狀態一致性。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance">
      <summary>在例外條件下，此方法將保證限制對目前執行個體的狀態損毀。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess">
      <summary>在例外條件下，CLR 不保證狀態一致性，也就是說，該條件可能會損毀處理序。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState">
      <summary>在例外條件下，此方法保證不會損毀狀態。 (這不保證方此法將一律不會失敗；不過，這保證此類失敗將一律不會造成狀態損毀。)</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
      <summary>確保衍生類別中所有的最終處理程式碼都標記為關鍵。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
      <summary>釋放 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> 類別使用的所有資源。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute">
      <summary>指示原生映像產生服務，準備要加入至限制之執行區域 (CER) 中的方法。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
      <summary>定義某個程式碼的作者與仰賴該程式碼的開發人員之間的可靠性合約。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)">
      <summary>使用指定的 <see cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute" /> 保證和 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 值，初始化 <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 類別的新執行個體。</summary>
      <param name="consistencyGuarantee">其中一個 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 值。</param>
      <param name="cer">其中一個 <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值。</param>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.Cer">
      <summary>取得值，以便決定在限制的執行區域 (CER) 下呼叫方法、型別或組件時的行為。</summary>
      <returns>其中一個 <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值。</returns>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.ConsistencyGuarantee">
      <summary>取得 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 可靠性合約的值。</summary>
      <returns>其中一個 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>表示在程式碼中某一點擷取其狀態的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>建立表示在程式碼目前作業點上指定之例外狀況的 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 物件。</summary>
      <param name="source">例外狀況的狀態已擷取，並用傳回的物件表示。</param>
      <returns>表示在程式碼中目前作業點上指定之例外狀況的物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>取得目前執行個體所表示的例外狀況。</summary>
      <returns>目前執行個體所表示的例外狀況。</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>在還原擷取例外狀況時所儲存的狀態之後，擲回目前<see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" />物件表示的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(System.Exception)">
      <param name="source" />
    </member>
    <member name="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs">
      <summary>在 Common Language Runtime 開始搜尋事件處理常式之前，為第一次發生 Managed 例外狀況時所引發的通知事件提供相關資料。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.#ctor(System.Exception)">
      <summary>使用指定的例外狀況，初始化 <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" /> 類別的新執行個體。</summary>
      <param name="exception">Managed 程式碼剛擲回且將由 <see cref="E:System.AppDomain.UnhandledException" /> 事件檢查的例外狀況。</param>
    </member>
    <member name="P:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception">
      <summary>與 Managed 程式碼所擲回的例外狀況對應的 Managed 例外狀況物件。</summary>
      <returns>剛擲回的例外狀況。</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute">
      <summary>啟用 Managed 程式碼，以處理表示處理序損毀狀態的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.GCLargeObjectHeapCompactionMode">
      <summary>表示下一個封鎖記憶體回收是否壓縮大型物件堆積 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce">
      <summary>在下一個封鎖層代 2 記憶體回收期間將會壓縮大型物件堆積 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.Default">
      <summary>不會壓縮大型物件堆積 (LOH)。</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>調整記憶體回收行程干擾應用程式的時間。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>停用記憶體回收並行存取並回收批次呼叫中的物件。 這是干擾最大的模式。 此模式的設計是為了達到最大輸送量，但無法兼具回應性。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>可讓記憶體回收並行，並且在應用程式執行時回收物件。 這是工作站的預設記憶體回收模式，而且干擾較 <see cref="F:System.Runtime.GCLatencyMode.Batch" /> 少。 它會在回應速度與處理量間取得平衡。 此模式相當於工作站上的並行記憶體回收。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>啟用回收物件時較為保守的記憶體回收。 只有在系統記憶體不足時，才會出現完整回收，較常出現的反而可能是層代 0 和層代 1 回收。 此模式不適用於伺服器記憶體回收行程。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.NoGCRegion">
      <summary>表示在應用程式執行關鍵路徑時，暫止記憶體回收。  
 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> 是唯讀值；也就是說，您無法將 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> 值指派給 <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 屬性。 透過呼叫 <see cref="Overload:System.GC.TryStartNoGCRegion" /> 方法，指定無 GC 區域延遲模式；並透過呼叫 <see cref="M:System.GC.EndNoGCRegion" /> 方法，將其終止。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>啟用嘗試在長時間上縮減延遲到最短的記憶體回收。 收集器只會嘗試執行層代 0、層代 1 和並行層代 2 收集。 如果系統處於記憶體壓力下，仍然可能發生完全封鎖集合。</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>指定目前處理序的記憶體回收設定。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>取得值，這個值表示伺服器記憶體回收是否已啟用。</summary>
      <returns>如果伺服器記憶體回收已啟用，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>取得或設定值，這個值表示完整的封鎖記憶體回收是否壓縮大型物件堆積 (LOH)。</summary>
      <returns>其中一個表示完整封鎖記憶體回收是否壓縮 LOH 的列舉值。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>為記憶體回收取得或設定目前的延遲模式。</summary>
      <returns>一個列舉值，指定延遲模式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 屬性已設定為無效值。  
-或- 
<see cref="P:System.Runtime.GCSettings.LatencyMode" /> 屬性無法設定為 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>指定應使用哪些封送處理字串的字元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>將字串封送處理為多位元組字元字串：Windows 上的系統預設 Windows (ANSI) 字碼頁，以及 Unix 上的 UTF-8。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>自動為目標作業系統妥善地封送處理字串。 如需詳細資訊，請參閱字元集與封送處理。 雖然 Common Language Runtime 預設為 <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />，但是語言可以覆寫此預設值。 例如，C# 和 Visual Basic 依預設會將所有方法和型別標示為 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>這個值已經過時，和 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" /> 有相同的行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>封送處理字串為 Unicode 2 個位元組字元字串。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>控制公開至 COM 之個別 Managed 類型或成員，或組件內所有類型的存取範圍。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see langword="ComVisibleAttribute" /> 類別的新執行個體。</summary>
      <param name="visibility">若為 COM 可見的型別，為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>取得值，表示 COM 型別是否為可見。</summary>
      <returns>若為可見的型別，為 <see langword="true" />，否則為 <see langword="false" />。 預設值為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>表示控制代碼資源的包裝函式類別 (Wrapper Class)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>使用指定的無效控制代碼值，初始化 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 類別的新執行個體。</summary>
      <param name="invalidHandleValue">無效控制代碼的值 (通常是 0 或 -1)。</param>
      <exception cref="T:System.TypeLoadException">衍生類別位於組件中，但是沒有 Unmanaged 程式碼存取權限。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Close">
      <summary>標記要釋出和釋放資源的控制代碼。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>釋放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 類別所使用的 Unmanaged 資源，指定是否要執行一般處置 (Dispose) 作業。</summary>
      <param name="disposing">
        <see langword="true" /> 表示一般處置作業，而 <see langword="false" /> 則表示完成控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>釋放與控制代碼相關的所有資源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>指定要包裝的控制代碼。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>取得值，指出控制代碼是否已關閉。</summary>
      <returns>如果控制代碼已關閉，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>在衍生類別中覆寫時，取得值以指出這個控制代碼值是否無效。</summary>
      <returns>如果控制代碼有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>在衍生類別中覆寫時，執行釋放控制代碼所需的程式碼。</summary>
      <returns>如果成功釋放控制代碼，則為 <see langword="true" />；如果發生嚴重失敗的事件，則為 <see langword="false" />。 在這種情況下，它會產生 releaseHandleFailed Managed 偵錯助理。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>將控制代碼設定為指定的既有控制代碼。</summary>
      <param name="handle">要使用的既有控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>將控制代碼標記為無效。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>所有 COM Interop 例外狀況 (Exception) 和結構化例外狀況處理 (Structured Exception Handling，SEH) 例外狀況的基底例外狀況類型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>使用預設屬性，初始化 <see langword="ExternalException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>從序列化 (Serialization) 資料，初始化 <see langword="ExternalException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see langword="ExternalException" /> 類別的新執行個體。</summary>
      <param name="message">指定例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.InteropServices.ExternalException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Int32)">
      <summary>使用指定的錯誤訊息和錯誤的 HRESULT，初始化 <see langword="ExternalException" /> 類別的新執行個體。</summary>
      <param name="message">指定例外狀況原因的錯誤訊息。</param>
      <param name="errorCode">錯誤的 HRESULT。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>取得錯誤的 <see langword="HRESULT" />。</summary>
      <returns>錯誤的 <see langword="HRESULT" /> 。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.ToString">
      <summary>傳回字串，其中包含錯誤的 HRESULT。</summary>
      <returns>表示 HRESULT 的字串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>指出在類別或結構的 Unmanaged 表示中欄位的實際位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>使用結構到欄位起始處的位移，初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 類別的新執行個體。</summary>
      <param name="offset">結構起始處到欄位起始處的位元組位移。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>取得結構起始處到欄位起始處的位移。</summary>
      <returns>取得從結構起始處到欄位起始處的位移。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>提供從 Unmanaged 記憶體存取 Managed 物件的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>擷取在 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 控制代碼中的物件位址。</summary>
      <returns>作為 <see cref="T:System.IntPtr" /> 的釘選物件位址。</returns>
      <exception cref="T:System.InvalidOperationException">控制代碼是除了 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 以外的任何型別。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>配置 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> 控制代碼給指定的物件。</summary>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的物件。</param>
      <returns>保護物件不被記憶體回收的新 <see cref="T:System.Runtime.InteropServices.GCHandle" />。 當不再需要時，這個 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 必須使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 來釋放。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>配置指定類型的控制代碼給指定的物件。</summary>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的物件。</param>
      <param name="type">
        <see cref="T:System.Runtime.InteropServices.GCHandleType" /> 值的其中之一，指出要建立的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 型別。</param>
      <returns>指定型別的新 <see cref="T:System.Runtime.InteropServices.GCHandle" />。 當不再需要時，這個 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 必須使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 來釋放。</returns>
      <exception cref="T:System.ArgumentException">不可以 Pin 含有非基本 (非 Blittable) 成員的執行個體。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件是否等於目前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</summary>
      <param name="o">要與目前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件比較的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</param>
      <returns>如果指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件等於目前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>釋放 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</summary>
      <exception cref="T:System.InvalidOperationException">控制代碼已釋放，或從未初始化。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>傳回新的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，而此物件是從 Managed 物件的控制代碼所建立。</summary>
      <param name="value">Managed 物件的 <see cref="T:System.IntPtr" /> 控制代碼，要從此控制代碼建立 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</param>
      <returns>新的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，其對應於實值參數。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 參數的值為 <see cref="F:System.IntPtr.Zero" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件的識別項。</summary>
      <returns>目前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件的識別項。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>取得值，指出控制代碼是否已配置。</summary>
      <returns>如果已配置控制代碼，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>傳回值，這個值表示兩個 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件是否相等。</summary>
      <param name="a">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，要與 <paramref name="b" /> 參數比較。</param>
      <param name="b">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，要與 <paramref name="a" /> 參數比較。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 參數相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 是使用內部整數表示來儲存。</summary>
      <param name="value">
        <see cref="T:System.IntPtr" />，指出需要轉換的控制代碼。</param>
      <returns>使用內部整數表示儲存的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 是使用內部整數表示來儲存。</summary>
      <param name="value">需要整數的 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</param>
      <returns>整數值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>傳回值，指出兩個 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件是否不相等。</summary>
      <param name="a">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，要與 <paramref name="b" /> 參數比較。</param>
      <param name="b">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，要與 <paramref name="a" /> 參數比較。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 參數不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>取得或設定這個控制代碼表示的物件。</summary>
      <returns>這個控制代碼表示的物件。</returns>
      <exception cref="T:System.InvalidOperationException">控制代碼已釋放，或從未初始化。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>傳回 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件的內部整數表示。</summary>
      <param name="value">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，要從此物件擷取內部整數表示。</param>
      <returns>
        <see cref="T:System.IntPtr" /> 物件，表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 類別可以配置的控制代碼的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>這個控制代碼型別表示不透明的控制代碼，意指您無法透過控制代碼解析固定物件的位址。 您可以使用這個型別來追蹤物件，避免它被記憶體回收行程回收。 當 Unmanaged 用戶端持有 Managed 物件的唯一參考，而且參考無法從記憶體回收行程偵測時，這個列舉成員就很有用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>這個控制代碼型別類似於 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />，但是讓 Pin 物件的位址可以被取得。 這會避免記憶體回收行程移動物件，並因而減低記憶體回收行程的效能。 使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 方法儘快釋放配置的控制代碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>這個控制代碼型別被用來追蹤物件，但允許物件被回收。 當收集某個物件時，會將 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的內容歸零。 <see langword="Weak" /> 參考會先歸零後，完成項才會執行，所以即使完成項重新啟動該物件，<see langword="Weak" /> 參考仍然會歸零。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>這個控制代碼型別和 <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" /> 類似，但如果物件在結束期間重新恢復的話，控制代碼不會歸零。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>指示資料應從呼叫端封送處理到被呼叫端，但不會封送處理回呼叫端。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.InAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>在匯出至 Unmanaged 程式碼時控制物件的配置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>執行階段會自動選擇 Unmanaged 記憶體中物件成員的適當配置。 使用這個列舉成員定義的物件不可以在 Managed 程式碼以外公開。 嘗試這麼做會產生例外狀況。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>Unmanaged 記憶體中每個物件成員的精確位置是被明確地控制（受制於<see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />欄位的設定）。 每個成員必須使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" />，表示該欄位在型別中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>物件的成員是依序配置的，其順序即是將它們匯出至 Unmanaged 記憶體時所出現的順序。 成員是根據 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 中所指定的封裝來配置。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>指示資料應從被呼叫端封送處理 (Marshal) 回呼叫端。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>表示作業系統控制代碼的包裝函式類別 (Wrapper Class)。 這個類別必須被繼承。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>使用指定的無效控制代碼值，初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別的新執行個體。</summary>
      <param name="invalidHandleValue">無效控制代碼的值 (通常是 0 或 -1)。  <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 的實作應該會針對此值，傳回 <see langword="true" />。</param>
      <param name="ownsHandle">
        <see langword="true" /> 表示確實讓 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 在結束階段釋放控制代碼，否則為 <see langword="false" /> (不建議)。</param>
      <exception cref="T:System.TypeLoadException">衍生類別位於組件中，但是沒有 Unmanaged 程式碼存取權限。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Close">
      <summary>標記要釋出和釋放資源的控制代碼。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>手動遞增 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 執行個體上的參考計數器。</summary>
      <param name="success">如果成功遞增參考計數器，則為<see langword="true" /> ，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>傳回 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 欄位的值。</summary>
      <returns>
        <see langword="IntPtr" />，表示 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 欄位的值。 如果此控制代碼已經用 <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> 標記為無效，則這個方法仍會傳回原始的控制代碼值，不過此值可能為過時的值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>手動遞減 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 執行個體上的參考計數器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>釋放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別所使用的所有資源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別所使用的 Unmanaged 資源，指定是否要執行一般處置 (Dispose) 作業。</summary>
      <param name="disposing">
        <see langword="true" /> 表示一般處置作業，而 <see langword="false" /> 則表示完成控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>釋放與控制代碼相關的所有資源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>指定要包裝的控制代碼。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>取得值，指出控制代碼是否已關閉。</summary>
      <returns>如果控制代碼已關閉，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>在衍生類別中覆寫時，取得值以指出這個控制代碼值是否無效。</summary>
      <returns>如果控制碼值無效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>在衍生類別中覆寫時，執行釋放控制代碼所需的程式碼。</summary>
      <returns>如果成功釋放控制代碼，則為 <see langword="true" />；如果發生嚴重失敗的事件，則為 <see langword="false" />。 在這種情況下，它會產生 releaseHandleFailed Managed 偵錯助理。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>將控制代碼設定為指定的既有控制代碼。</summary>
      <param name="handle">要使用的既有控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>將控制代碼標記為不再使用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>讓您控制記憶體中類別或結構之資料欄位的實際配置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 列舉型別 (Enumeration) 成員，初始化 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 類別的新執行個體。</summary>
      <param name="layoutKind">代表其中一個 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值的 16 位元整數，指定類別或結構的排列方式。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 列舉型別 (Enumeration) 成員，初始化 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 類別的新執行個體。</summary>
      <param name="layoutKind">其中一個列舉值，指定類別或結構的排列方式。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>表示根據預設，類別中的字串資料欄位應該封送處理為 <see langword="LPWSTR" />，還是 <see langword="LPSTR" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>控制記憶體中類別或結構之資料欄位的對齊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>指示結構或類別的絕對大小。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>取得 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，指定類別或結構的排列方式。</summary>
      <returns>其中一個列舉值，指定類別或結構的排列方式。</returns>
    </member>
    <member name="T:System.Runtime.MemoryFailPoint">
      <summary>在執行作業前檢查記憶體資源是否足夠。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 類別的新執行個體，並指定順利執行所需的記憶體容量。</summary>
      <param name="sizeInMegabytes">所需的記憶體大小，以 MB 為單位。 這個必須是正值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的記憶體大小為負數。</exception>
      <exception cref="T:System.InsufficientMemoryException">記憶體不足，無法開始執行閘道所保護的程式碼。</exception>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Dispose">
      <summary>釋放 <see cref="T:System.Runtime.MemoryFailPoint" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Finalize">
      <summary>確認釋出資源，並在記憶體回收行程回收 <see cref="T:System.Runtime.MemoryFailPoint" /> 物件時執行其他清除作業。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.ObjectHandle">
      <summary>包裝傳值封送處理的物件參考，並允許透過間接取值 (Indirection) 將它們傳回。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)">
      <summary>初始化包裝指定物件 <paramref name="o" /> 的 <see cref="T:System.Runtime.Remoting.ObjectHandle" /> 類別的新執行個體。</summary>
      <param name="o">由新的 <see cref="T:System.Runtime.Remoting.ObjectHandle" /> 所包裝的物件。</param>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
      <summary>傳回被包裝的物件。</summary>
      <returns>被包裝的物件。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IDeserializationCallback">
      <summary>指示在整個物件 Graph 的還原序列化 (Deserialization) 完成時告知類別。 請注意，使用 XmlSerializer (System.Xml.Serialization.XmlSerializer) 還原序列化時，不會呼叫這個介面。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)">
      <summary>執行於整個物件 Graph 已經還原序列化時。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
    </member>
    <member name="T:System.Runtime.Serialization.IFormatterConverter">
      <summary>提供 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 執行個體 (Instance) 和格式子提供類別之間的連接，最適用於在 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中剖析資料。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.Type)">
      <summary>將值轉換為指定的 <see cref="T:System.Type" />。</summary>
      <param name="value">要被轉換的物件。</param>
      <param name="type">
        <see cref="T:System.Type" />，<paramref name="value" /> 要轉換為該型別。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.TypeCode)">
      <summary>將值轉換為指定的 <see cref="T:System.TypeCode" />。</summary>
      <param name="value">要被轉換的物件。</param>
      <param name="typeCode">
        <see cref="T:System.TypeCode" />，<paramref name="value" /> 要轉換為該型別。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToBoolean(System.Object)">
      <summary>將值轉換成 <see cref="T:System.Boolean" />。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToByte(System.Object)">
      <summary>將值轉換為 8 位元的不帶正負號整數 (Unsigned Integer)。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToChar(System.Object)">
      <summary>將值轉換為 Unicode 字元。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDateTime(System.Object)">
      <summary>將值轉換成 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDecimal(System.Object)">
      <summary>將值轉換成 <see cref="T:System.Decimal" />。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDouble(System.Object)">
      <summary>將值轉換為雙精度浮點數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt16(System.Object)">
      <summary>將值轉換為 16 位元帶正負號的整數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt32(System.Object)">
      <summary>將值轉換為 32 位元帶正負號的整數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt64(System.Object)">
      <summary>將值轉換為 64 位元帶正負號的整數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSByte(System.Object)">
      <summary>將值轉換成 <see cref="T:System.SByte" />。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSingle(System.Object)">
      <summary>將值轉換為單精確度浮點數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToString(System.Object)">
      <summary>將值轉換成 <see cref="T:System.String" />。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt16(System.Object)">
      <summary>將值轉換為 16 位元不帶正負號的整數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt32(System.Object)">
      <summary>將值轉換為 32 位元不帶正負號的整數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt64(System.Object)">
      <summary>將值轉換為 64 位元不帶正負號的整數。</summary>
      <param name="value">要被轉換的物件。</param>
      <returns>已轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IObjectReference">
      <summary>指示目前的介面實作器是對其他物件的參考。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>傳回應該還原序列化的實際物件，而不是序列化資料流指定的物件。</summary>
      <param name="context">還原序列化目前物件的來源 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <returns>放入圖形中的實際物件。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。 呼叫無法在中度信任的伺服器上運作。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.ISafeSerializationData">
      <summary>在安全性透明程式碼中啟用自訂例外狀況資料序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization(System.Object)">
      <summary>還原序列化執行個體時會呼叫這個方法。</summary>
      <param name="deserialized">包含執行個體狀態的物件。</param>
    </member>
    <member name="T:System.Runtime.Serialization.ISerializable">
      <summary>允許物件控制它自己的序列化 (Serialization) 和還原序列化 (Deserialization)。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將序列化目標物件所需的資料填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
      <summary>套用至方法時，指定在還原序列化物件圖形中的物件後立即呼叫該方法。 還原序列化相對於圖形中其他物件的順序不具決定性。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
      <summary>套用至方法時，指定在還原序列化物件圖形中的物件期間呼叫該方法。 還原序列化相對於圖形中其他物件的順序不具決定性。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
      <summary>套用至方法時，指定在還原序列化物件圖形中的物件後呼叫該方法。 序列化相對於圖形中其他物件的順序不具決定性。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializedAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
      <summary>套用至方法時，指定在還原序列化物件圖形中的物件期間呼叫該方法。 序列化相對於圖形中其他物件的順序不具決定性。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializingAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OptionalFieldAttribute">
      <summary>指定可從序列化 (Serialization) 資料流中遺漏欄位，使 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 和 <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" /> 不會擲回例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OptionalFieldAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OptionalFieldAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded">
      <summary>取得或設定版本號碼以指出何時新增操作欄位。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.OptionalFieldAttribute" /> 的版本。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SafeSerializationEventArgs">
      <summary>提供 <see cref="E:System.Exception.SerializeObjectState" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SafeSerializationEventArgs.AddSerializedState(System.Runtime.Serialization.ISafeSerializationData)">
      <summary>儲存例外狀況的狀態。</summary>
      <param name="serializedState">透過執行個體序列化的狀態物件。</param>
    </member>
    <member name="P:System.Runtime.Serialization.SafeSerializationEventArgs.StreamingContext">
      <summary>取得或設定描述序列化資料流之來源和目的端的物件。</summary>
      <returns>描述序列化資料流之來源和目的端的物件。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationEntry">
      <summary>存留該值、<see cref="T:System.Type" /> 和已序列化物件的名稱。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Name">
      <summary>取得物件名稱。</summary>
      <returns>物件的名稱。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.ObjectType">
      <summary>取得物件的 <see cref="T:System.Type" />。</summary>
      <returns>物件的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Value">
      <summary>取得包含於物件中的值。</summary>
      <returns>包含於物件中的值。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
      <summary>當序列化 (Serialization) 或還原序列化 (Deserialization) 期間發生錯誤時，擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>從序列化資料中，初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 類別的新執行個體。</summary>
      <param name="info">序列化資訊物件，包含具有名稱/值形式的已序列化物件資料。</param>
      <param name="context">關於例外狀況的來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
      <summary>使用指定的訊息，初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 類別的新執行個體。</summary>
      <param name="message">指示發生例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfo">
      <summary>儲存序列化或還原序列化物件所需的所有資料。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)">
      <summary>建立 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 類別的新執行個體。</summary>
      <param name="type">要序列化的物件的 <see cref="T:System.Type" />。</param>
      <param name="converter">在還原序列化期間所使用的 <see cref="T:System.Runtime.Serialization.IFormatterConverter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="converter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter,System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 類別的新執行個體。</summary>
      <param name="type">要序列化的物件的 <see cref="T:System.Type" />。</param>
      <param name="converter">在還原序列化期間所使用的 <see cref="T:System.Runtime.Serialization.IFormatterConverter" />。</param>
      <param name="requireSameTokenInPartialTrust">指出物件是否在部分信任中需要相同的語彙基元。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)">
      <summary>加入布林值 (Boolean) 至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的布林值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)">
      <summary>加入 8 位元不帶正負號的整數值 (Unsigned Integer) 至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的位元組值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)">
      <summary>加入 Unicode 字元值至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的字元值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)">
      <summary>加入 <see cref="T:System.DateTime" /> 值至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 <see cref="T:System.DateTime" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)">
      <summary>加入十進位值至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的十進位值。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">如果值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)">
      <summary>加入雙精度浮點數值至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的雙精度浮點數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)">
      <summary>加入 16 位元帶正負號的整數值 (Signed Integer) 至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 <see langword="Int16" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)">
      <summary>將 32 位元帶正負號的整數值新增至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 <see langword="Int32" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)">
      <summary>將 64 位元帶正負號的整數值新增至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 Int64 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)">
      <summary>加入指定的物件至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區，該物件與存放區中指定的名稱相關聯。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的值。 這個物件的任何子系將會自動序列化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)">
      <summary>將值新增至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區，其中 <paramref name="value" /> 與 <paramref name="name" /> 建立關聯，並序列化為 <see cref="T:System.Type" /><paramref name="type" />。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的值。 這個物件的任何子系將會自動序列化。</param>
      <param name="type">與目前物件相關聯的 <see cref="T:System.Type" />。 這個參數必須永遠是物件本身或其中一個基底類別的型別。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="name" /> 或 <paramref name="type" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)">
      <summary>加入 8 位元帶正負號的整數值至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 <see langword="Sbyte" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)">
      <summary>加入單精確度浮點數值至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的單精準浮點數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)">
      <summary>加入 16 位元不帶正負號的整數值至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 <see langword="UInt16" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)">
      <summary>將 32 位元不帶正負號的整數值新增至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 <see langword="UInt32" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)">
      <summary>將 64 位元不帶正負號的整數值新增至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區。</summary>
      <param name="name">要與值產生關聯的名稱，可以在稍後還原序列化。</param>
      <param name="value">要序列化的 <see langword="UInt64" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">值已經與 <paramref name="name" /> 相關聯。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.AssemblyName">
      <summary>取得或設定僅在序列化期間序列化之型別的組件名稱。</summary>
      <returns>要序列之型別的組件完整名稱。</returns>
      <exception cref="T:System.ArgumentNullException">要設定的屬性值為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.FullTypeName">
      <summary>取得或設定要序列化之 <see cref="T:System.Type" /> 的完整名稱。</summary>
      <returns>要序列化之型別的完整名稱。</returns>
      <exception cref="T:System.ArgumentNullException">要設定的這個屬性值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取布林值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 相關聯的布林值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的數值無法轉換為布林值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetByte(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 8 位元不帶正負號的整數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 相關聯的 8 位元不帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的值不能轉換為 8 位元不帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetChar(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 Unicode 字元值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 相關聯的 Unicode 字元。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的數值無法轉換為 Unicode 字元。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)">
      <summary>從 <see cref="T:System.DateTime" /> 存放區擷取 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 相關聯的 <see cref="T:System.DateTime" /> 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的數值無法轉換為 <see cref="T:System.DateTime" /> 值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取十進位值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的十進位值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的值無法轉換為十進位。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取雙精度浮點數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 相關聯的雙精度浮點數值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的數值無法轉換為雙精度浮點數值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetEnumerator">
      <summary>傳回 <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" />，可用於逐一查看 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區中的名稱 / 值組。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" />，用於解析 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區中包含的名稱 / 值組。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 16 位元帶正負號的整數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 相關聯的 16 位元帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的值無法轉換為 16 位元帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 32 位元帶正負號的整數值。</summary>
      <param name="name">要擷取的值的名稱。</param>
      <returns>與 <paramref name="name" /> 建立關聯的 32 位元帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 建立關聯的值無法轉換為 32 位元帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 64 位元帶正負號的整數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 建立關聯的 64 位元帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 建立關聯的值無法轉換為 64 位元帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 8 位元帶正負號的整數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 建立關聯的 8 位元帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的值不能轉換為 8 位元帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取單精確度浮點數值。</summary>
      <param name="name">要擷取的值的名稱。</param>
      <returns>與 <paramref name="name" /> 相關聯的單精確度浮點數值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的數值無法轉換為單精確度浮點數值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetString(System.String)">
      <summary>從 <see cref="T:System.String" /> 存放區擷取 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <see cref="T:System.String" /> 相關聯的 <paramref name="name" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的數值無法轉換為 <see cref="T:System.String" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 16 位元不帶正負號的整數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 建立關聯的 16 位元不帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的值無法轉換為 16 位元不帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 32 位元不帶正負號的整數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 建立關聯的 32 位元不帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 建立關聯的值無法轉換為 32 位元不帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取 64 位元不帶正負號的整數值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <returns>與 <paramref name="name" /> 建立關聯的 64 位元不帶正負號的整數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 建立關聯的值無法轉換為 64 位元不帶正負號的整數。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)">
      <summary>從 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區擷取值。</summary>
      <param name="name">與要擷取的值相關聯的名稱。</param>
      <param name="type">要擷取之值的 <see cref="T:System.Type" />。 如果儲存的值無法轉換為這個型別，則系統將擲回 <see cref="T:System.InvalidCastException" />。</param>
      <returns>指定的 <see cref="T:System.Type" /> 的物件與 <paramref name="name" /> 相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">與 <paramref name="name" /> 相關聯的數值無法轉換為 <paramref name="type" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">在目前的執行個體中找不到具有指定名稱的項目。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.IsAssemblyNameSetExplicit">
      <summary>取得組件名稱是否已明確設定。</summary>
      <returns>
        <see langword="true" />如果已明確設定元件名稱, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.IsFullTypeNameSetExplicit">
      <summary>取得完整型別名稱是否已明確設定。</summary>
      <returns>
        <see langword="true" />如果已明確設定完整型別名稱, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.MemberCount">
      <summary>取得已經加入至 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存放區的成員數目。</summary>
      <returns>已經加入至目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的成員數目。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.ObjectType">
      <summary>傳回要序列化之物件的型別。</summary>
      <returns>序列化的物件型別。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)">
      <summary>設定要序列化之物件的 <see cref="T:System.Type" />。</summary>
      <param name="type">要序列化的物件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfoEnumerator">
      <summary>針對解析 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中的資料，提供易用的格式子 (Formatter) 機制。 這個類別無法被繼承。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Current">
      <summary>取得目前正在檢查的項目。</summary>
      <returns>目前正在檢查的項目。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值已經開始列舉項目，或已經達到列舉型別的結尾。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.MoveNext">
      <summary>更新列舉值至下一個項目。</summary>
      <returns>如果已找到新的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Name">
      <summary>取得目前正在檢查的項目名稱。</summary>
      <returns>項目名稱。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值已經開始列舉項目，或已經達到列舉型別的結尾。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.ObjectType">
      <summary>取得目前正在檢查的項目型別。</summary>
      <returns>目前正在檢查的項目型別。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值已經開始列舉項目，或已經達到列舉型別的結尾。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.Reset">
      <summary>將列舉值重設為第一個項目。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.System#Collections#IEnumerator#Current">
      <summary>取得集合中的目前項目。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.SerializationEntry" />，包含目前序列化 (Serialization) 資料。</returns>
      <exception cref="T:System.InvalidOperationException">列舉尚未啟動或已結束。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Value">
      <summary>取得目前正在檢查的項目值。</summary>
      <returns>目前正在檢查的項目值。</returns>
      <exception cref="T:System.InvalidOperationException">列舉值已經開始列舉項目，或已經達到列舉型別的結尾。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
      <summary>描述指定之序列化資料流的來源和目的端，並提供額外的呼叫端定義內容。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates)">
      <summary>使用指定的內容狀態，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="state">
        <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 數值的位元組合，指定這個 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的來源或目的端內容。</param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)">
      <summary>使用指定的內容狀態和某些額外的資訊，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="state">
        <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 數值的位元組合，指定這個 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的來源或目的端內容。</param>
      <param name="additional">與 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 相關聯的任何額外資訊。 任何實作 <see cref="T:System.Runtime.Serialization.ISerializable" /> 的物件或任何序列化 (Serialization) 代理都可以使用這項資訊。 大部分的使用者不需要設定這個參數。</param>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.Context">
      <summary>取得已指定為額外內容的一部分的內容。</summary>
      <returns>內容，已指定為額外內容的一部分。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 執行個體是否具有相同的值。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>如果指定的物件是 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的執行個體，而且目前執行個體的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
      <summary>傳回這個物件的雜湊程式碼。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 值，包含這個 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 之序列化的來源和目的端。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.State">
      <summary>取得已傳輸資料的來源或目的端。</summary>
      <returns>在序列化期間，已傳輸資料的目的端。 在還原序列化 (Deserialization) 期間，資料的來源。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContextStates">
      <summary>定義一組旗標，指定序列化期間資料流的來源或目的內容。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.All">
      <summary>指定序列化的資料可以傳輸到或接收自任何其他內容。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Clone">
      <summary>指定物件圖形會被複製。 使用者可以假設複製的圖形將會繼續存在相同的處理序內，且存取控制代碼或其他未受管理資源的參考是安全的。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossAppDomain">
      <summary>指定來源或目的內容為不同的 AppDomain。 (如需 AppDomain 的描述，請參閱應用程式定義域)。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine">
      <summary>指定來源或目的內容為不同的電腦。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossProcess">
      <summary>指定來源或目的內容為相同電腦上的不同處理序。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.File">
      <summary>指定來源或目的內容為檔案。 使用者可以假設檔案將會比建立它們的處理序更持久，並且不會以還原序列化將需要存取來自目前處理序之任何資料的方式序列化物件。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Other">
      <summary>指定序列化內容為未知。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Persistence">
      <summary>指定來源或目的內容為持續性存放區，其中可包括資料庫、檔案或其他備份存放區。 使用者可以假設持續性資料將會比建立該資料的處理序更持久，並且不會序列化物件，如此還原序列化將需要存取來自目前處理序的任何資料。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Remoting">
      <summary>指定資料是在未知的位置中遠端處理至內容。 無論這是否在相同電腦上，使用者無法做出任何假設。</summary>
    </member>
    <member name="T:System.Runtime.TargetedPatchingOptOutAttribute">
      <summary>表示套用此屬性的 .NET Framework Class Library 方法不會受到服務版本的影響，因此可以內嵌在原生影像產生器 (Native Image Generator，NGen) 的影像中。</summary>
    </member>
    <member name="M:System.Runtime.TargetedPatchingOptOutAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> 類別的新執行個體。</summary>
      <param name="reason">將套用了 <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> 屬性的方法視為符合資格，且可內嵌在不同原生影像產生器 (Native Image Generator，NGen) 影像中的原因。</param>
    </member>
    <member name="P:System.Runtime.TargetedPatchingOptOutAttribute.Reason">
      <summary>取得原因，該原因可說明為什麼套用此屬性的方法被視為符合資格，而且可以內嵌在不同原生影像產生器 (Native Image Generator，NGen) 影像中。</summary>
      <returns>視此方法為符合資格，且可內嵌在不同原生影像產生器影像中的原因。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>辨識編譯特定組件時使用的 .NET Framework 版本。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>藉由指定建置組件時使用的 .NET Framework 版本，以初始化 <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> 類別的執行個體。</summary>
      <param name="frameworkName">建置組件時使用的 .NET Framework 版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>取得建置組件時使用之 .NET Framework 版本的顯示名稱。</summary>
      <returns>.NET Framework 版本的顯示名稱。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>取得建置特定組件時使用之 .NET Framework 版本的名稱。</summary>
      <returns>建置組件時使用之 .NET Framework 版本的名稱。</returns>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>參考可變長度的引數清單。</summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>使用內部中繼資料 (Metadata) 語彙基元 (Token) 來表示欄位。</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>指出目前執行個體和指定的物件是否相等。</summary>
      <param name="obj">要與目前執行個體相比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeFieldHandle" />，並且等於目前執行個體的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>指出目前的執行個體和指定的 <see cref="T:System.RuntimeFieldHandle" /> 是否相等。</summary>
      <param name="handle">要與目前執行個體相比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <returns>如果 <paramref name="handle" /> 的值和目前執行個體的值相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數，其為這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用將由目前執行個體所表示欄位還原序列化的所需資料，來填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">使用序列化資訊來填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">(保留的) 要儲存並擷取序列化物件的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">目前執行個體的 <see cref="P:System.RuntimeFieldHandle.Value" /> 屬性不是有效的控點。</exception>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指出兩個 <see cref="T:System.RuntimeFieldHandle" /> 結構是否相等。</summary>
      <param name="left">要和 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要和 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指出兩個 <see cref="T:System.RuntimeFieldHandle" /> 結構是否不相等。</summary>
      <param name="left">要和 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要和 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>取得目前執行個體所表示欄位的控點。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 包含目前執行個體所表示欄位的控點。</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> 是方法內部中繼資料表示的控制碼。</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>指出這個執行個體是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體比較的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeMethodHandle" />，並且等於這個執行個體的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>指出這個執行個體是否等於指定的 <see cref="T:System.RuntimeMethodHandle" />。</summary>
      <param name="handle">與這個執行個體比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <returns>如果 <paramref name="handle" /> 等於這個執行個體的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetFunctionPointer">
      <summary>取得由這個執行個體所表示方法的指標。</summary>
      <returns>這個執行個體所表示方法的指標。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端並不具有執行這個作業的必要使用權限。</exception>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用還原序列化此執行個體所表示之欄位的所需資料，來填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要使用序列化資訊來填入的物件。</param>
      <param name="context">(保留的) 要儲存並擷取序列化物件的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeMethodHandle.Value" /> 無效。</exception>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指出 <see cref="T:System.RuntimeMethodHandle" /> 的兩個執行個體是否相等。</summary>
      <param name="left">與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <returns>如果 <paramref name="left" /> 的值等於 <paramref name="right" /> 的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指出 <see cref="T:System.RuntimeMethodHandle" /> 的兩個執行個體是否不相等。</summary>
      <param name="left">與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <returns>如果 <paramref name="left" /> 的值不等於 <paramref name="right" /> 的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>取得這個執行個體的值。</summary>
      <returns>
        <see cref="T:System.RuntimeMethodHandle" /> 是方法的內部中繼資料表示。</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>使用內部中繼資料 (Metadata) 語彙基元 (Token) 來表示型別。</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>指出指定的物件是否等於目前的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且等於這個執行個體的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>指出指定的 <see cref="T:System.RuntimeTypeHandle" /> 結構是否等於目前的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</summary>
      <param name="handle">要與目前執行個體相比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <returns>如果 <paramref name="handle" /> 的值等於這個執行個體的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetModuleHandle">
      <summary>取得模組控制代碼，這個模組包含由目前執行個體所表示的型別。</summary>
      <returns>
        <see cref="T:System.ModuleHandle" /> 結構表示模組控制代碼，這個模組包含由目前執行個體所表示的型別。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用要還原序列化由這個執行個體所表示型別的所需資料，來填入 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要被填入 (Populate) 序列化資訊的物件。</param>
      <param name="context">(保留的) 儲存和擷取序列化資料的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeTypeHandle.Value" /> 無效。</exception>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>指出物件和 <see cref="T:System.RuntimeTypeHandle" /> 結構是否相等。</summary>
      <param name="left">要與 <paramref name="right" /> 相比較的物件。</param>
      <param name="right">要與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>指出 <see cref="T:System.RuntimeTypeHandle" /> 結構是否等於物件。</summary>
      <param name="left">要與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <param name="right">要與 <paramref name="left" /> 相比較的物件。</param>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" />，並且等於 <paramref name="left" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>指出物件和 <see cref="T:System.RuntimeTypeHandle" /> 結構是否不相等。</summary>
      <param name="left">要與 <paramref name="right" /> 相比較的物件。</param>
      <param name="right">要與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" />，並且不等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>指出 <see cref="T:System.RuntimeTypeHandle" /> 結構是否不等於物件。</summary>
      <param name="left">要與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <param name="right">要與 <paramref name="left" /> 相比較的物件。</param>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且不等於 <paramref name="left" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.RuntimeTypeHandle.Value">
      <summary>取得由這個執行個體表示型別的控制代碼。</summary>
      <returns>這個執行個體表示型別的控制代碼。</returns>
    </member>
    <member name="T:System.SByte">
      <summary>代表 8 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="obj">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="obj" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="obj" />。  

  零 
  這個執行個體等於 <paramref name="obj" />。  

  大於零 
  這個執行個體大於 <paramref name="obj" />。  

-或- 
 <paramref name="obj" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.SByte" />。</exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>將這個執行個體與指定的 8 元帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的 8 位元帶正負號的整數。</param>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的相對順序。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.SByte" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.SByte" /> 值。</summary>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.SByte" /> 值。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.SByte" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.SByte" />。</returns>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>代表 <see cref="T:System.SByte" />最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>代表 <see cref="T:System.SByte" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.SByte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <returns>8 位元帶正負號的整數，這個整數等於 <paramref name="s" /> 參數中所包含的數字。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是由選擇性正負號後面接著一連串數字 (零到九) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>8 位元帶正負號的整數，這個整數等於 <paramref name="s" /> 中所指定的數字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 8 位元帶正負號的整數。</summary>
      <param name="s">字串，包含要轉換的數字。 這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。 如果 <paramref name="provider" /> 是 <see langword="null" />，則會使用執行緒目前的文化特性。</param>
      <returns>8 位元帶正負號的位元組值，等於 <paramref name="s" /> 參數中所指定的數字。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 的組合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" />不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>將指定特定文化特性格式之數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。 如果 <paramref name="provider" /> 是 <see langword="null" />，則會使用執行緒目前的文化特性。</param>
      <returns>8 位元帶正負號的整數，這個整數等於 <paramref name="s" /> 中所指定的數字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">不使用這個參數。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">不使用這個參數。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>無。 不支援這個轉換。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">不使用這個參數。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Type" /> 值轉換所得的 <see cref="T:System.SByte" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
      <returns>目前執行個體的值，轉換為類型為 <paramref name="type" /> 的物件。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，包含減號 (如果數值為負) 及沒有零的前置字元且範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">標準或自訂數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.SByte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.SByte@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>使用指定的文化特性特定格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.SByte" />，並傳回值，這個值表示轉換是否成功。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">當這個方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中所含數字的 8 位元帶正負號的整數，如果轉換失敗則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>嘗試將數字的字串表示轉換成其相等的 <see cref="T:System.SByte" />，並傳回一個值表示轉換是否成功。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 8 位元帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>允許組件由部分信任程式碼呼叫。 如果少了這項宣告，則只有完全受信任的呼叫端才能使用該組件。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel">
      <summary>取得或設定標記為 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> (APTCA) 屬性之程式碼的預設部分信任可視性。</summary>
      <returns>其中一個列舉值。 預設為 <see cref="F:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>密碼編譯作業中發生錯誤時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>使用指定的 <see langword="HRESULT" /> 錯誤碼，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="hr">
        <see langword="HRESULT" /> 錯誤碼。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>以指定的格式使用指定的錯誤訊息，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="format">用來輸出錯誤訊息的格式。</param>
      <param name="insert">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="T:System.Security.PartialTrustVisibilityLevel">
      <summary>針對已標記 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> (APTCA) 屬性的程式碼，指定預設的部分信任可視性。</summary>
    </member>
    <member name="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault">
      <summary>組件已針對部分信任進行稽核，但是不會在所有主機中對部分信任程式碼顯示。 若要對部分信任程式碼顯示組件，請將它加入 <see cref="P:System.AppDomainSetup.PartialTrustVisibleAssemblies" /> 屬性中。</summary>
    </member>
    <member name="F:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts">
      <summary>組件一律能透過部分信任程式碼呼叫。</summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>指定執行重視安全性之作業的程式碼或組件。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor(System.Security.SecurityCriticalScope)">
      <summary>使用指定的範圍，初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 類別的新執行個體。</summary>
      <param name="scope">其中一個列舉值，指定屬性的範圍。</param>
    </member>
    <member name="P:System.Security.SecurityCriticalAttribute.Scope">
      <summary>取得屬性的範圍。</summary>
      <returns>其中一個列舉值，指定屬性的範圍。 預設為 <see cref="F:System.Security.SecurityCriticalScope.Explicit" />，表示屬性只會套用至立即目標。</returns>
    </member>
    <member name="T:System.Security.SecurityCriticalScope">
      <summary>指定 <see cref="T:System.Security.SecurityCriticalAttribute" /> 的範圍。</summary>
    </member>
    <member name="F:System.Security.SecurityCriticalScope.Everything">
      <summary>屬性會套用到所有其後的程式碼。</summary>
    </member>
    <member name="F:System.Security.SecurityCriticalScope.Explicit">
      <summary>屬性只會套用到立即目標。</summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>當偵測到安全性錯誤時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type)">
      <summary>使用指定的錯誤訊息和造成此擲回例外狀況的使用權限類型，來初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="type">造成例外狀況擲回的使用權限類型。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type,System.String)">
      <summary>使用指定的錯誤訊息、導致擲回例外狀況的使用權限類型以及使用權限狀態，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="type">造成例外狀況擲回的使用權限類型。</param>
      <param name="state">造成例外狀況擲回的使用權限狀態。</param>
    </member>
    <member name="P:System.Security.SecurityException.Demanded">
      <summary>取得或設定失敗的要求安全性權限、使用權限集或使用權限集集合。</summary>
      <returns>使用權限、使用權限集或使用權限集集合物件。</returns>
    </member>
    <member name="P:System.Security.SecurityException.DenySetInstance">
      <summary>取得或設定引起要求失敗的拒絕安全性權限、使用權限集或使用權限集集合。</summary>
      <returns>使用權限、使用權限集或使用權限集集合物件。</returns>
    </member>
    <member name="P:System.Security.SecurityException.FailedAssemblyInfo">
      <summary>取得或設定失敗組件的相關資訊。</summary>
      <returns>
        <see cref="T:System.Reflection.AssemblyName" />，識別失敗的組件。</returns>
    </member>
    <member name="M:System.Security.SecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的資訊設定 <see cref="T:System.Security.SecurityException" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.SecurityException.GrantedSet">
      <summary>取得或設定引起 <see cref="T:System.Security.SecurityException" /> 之組件的授與使用權限集。</summary>
      <returns>組件授與集合的 XML 表示。</returns>
    </member>
    <member name="P:System.Security.SecurityException.Method">
      <summary>取得或設定與例外狀況相關方法的資訊。</summary>
      <returns>描述方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionState">
      <summary>取得或設定擲回例外狀況之使用權限的狀態。</summary>
      <returns>擲回例外狀況時使用權限的狀態。</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionType">
      <summary>取得或設定失敗的使用權限類型。</summary>
      <returns>失敗的使用權限類型。</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermitOnlySetInstance">
      <summary>取得或設定引起安全性檢查失敗之只允許堆疊框架其中一部分的使用權限、使用權限集或和使用權限集集合。</summary>
      <returns>使用權限、使用權限集或使用權限集集合物件。</returns>
    </member>
    <member name="P:System.Security.SecurityException.RefusedSet">
      <summary>取得或設定引起 <see cref="T:System.Security.SecurityException" /> 之組件的拒絕使用權限集。</summary>
      <returns>組件的拒絕使用權限集的 XML 表示。</returns>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>傳回目前 <see cref="T:System.Security.SecurityException" /> 的表示。</summary>
      <returns>目前 <see cref="T:System.Security.SecurityException" /> 物件的字串表示。</returns>
    </member>
    <member name="P:System.Security.SecurityException.Url">
      <summary>取得或設定引起例外狀況之組件的 URL。</summary>
      <returns>識別組件位置的 URL。</returns>
    </member>
    <member name="T:System.Security.SecurityRulesAttribute">
      <summary>表示 Common Language Runtime 應針對組件強制執行的一組安全性規則。</summary>
    </member>
    <member name="M:System.Security.SecurityRulesAttribute.#ctor(System.Security.SecurityRuleSet)">
      <summary>使用指定的規則集值，初始化 <see cref="T:System.Security.SecurityRulesAttribute" /> 類別的新執行個體。</summary>
      <param name="ruleSet">其中一個列舉值，指定透明度規則集。</param>
    </member>
    <member name="P:System.Security.SecurityRulesAttribute.RuleSet">
      <summary>取得要套用的規則集。</summary>
      <returns>其中一個列舉值，指定要套用的透明度規則。</returns>
    </member>
    <member name="P:System.Security.SecurityRulesAttribute.SkipVerificationInFullTrust">
      <summary>判斷完全信任的透明程式碼是否應略過 Microsoft intermediate language (MSIL) 驗證。</summary>
      <returns>如果應該略過 MSIL 驗證則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.SecurityRuleSet">
      <summary>識別 Common Language Runtime 應針對組件強制執行的一組安全性規則。</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.Level1">
      <summary>表示執行階段將強制執行等級 1 (.NET Framework 2.0) 的透明度規則。</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.Level2">
      <summary>表示執行階段將強制執行等級 2 的透明度規則。</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.None">
      <summary>不支援。 使用此值會造成擲回 <see cref="T:System.IO.FileLoadException" />。</summary>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>將型別或成員識別為重視安全性而且可由透明程式碼進行安全的存取。</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>指定組件不可以導致權限的提升。</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTransparentAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.SecurityTreatAsSafeAttribute">
      <summary>識別組件內的透明程式碼可以存取哪些非公用 <see cref="T:System.Security.SecurityCriticalAttribute" /> 成員。</summary>
    </member>
    <member name="M:System.Security.SecurityTreatAsSafeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTreatAsSafeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.SuppressUnmanagedCodeSecurityAttribute">
      <summary>允許 Managed 程式碼的呼叫進入 Unmanaged 程式碼，而不需堆疊查核行程 (Stack Walk)。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.UnverifiableCodeAttribute">
      <summary>標記含有未經驗證的程式碼的模組。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.UnverifiableCodeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.UnverifiableCodeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>例外狀況，是當安全性原則要求程式碼為型別安全 (Type-Safe) 而驗證處理序無法驗證程式碼為型別安全時被擲回。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>使用闡明的訊息初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
      <param name="message">指示例外狀況發生原因的訊息。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.SerializableAttribute">
      <summary>指示類別可以序列化。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.SerializableAttribute.#ctor">
      <summary>初始化 <see cref="T:System.SerializableAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Single">
      <summary>表示單精確度浮點數。</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>比較這個執行個體與特定物件，並且傳回一個整數，指出這個執行個體的值是小於、等於或大於特定物件的值。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

-或- 
這個執行個體是非數字 (<see cref="F:System.Single.NaN" />)，而且 <paramref name="value" /> 是數字。  

  零 
  這個執行個體等於 <paramref name="value" />。  

-或- 
這個執行個體和值皆為非數字 (<see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />)。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Single.NaN" />)。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Single" />。</exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>比較這個執行個體與指定的單精確度浮點數，並且傳回整數，這個整數表示這個執行個體的值是小於、等於或大於指定的單精確度浮點數。</summary>
      <param name="value">要比較的單精確度浮點數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

-或- 
這個執行個體是非數字 (<see cref="F:System.Single.NaN" />)，而且 <paramref name="value" /> 是數字。  

  零 
  這個執行個體等於 <paramref name="value" />。  

-或- 
這個執行個體和 <paramref name="value" /> 都不會是數字 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Single.NaN" />)。</returns>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>代表大於零的最小正 <see cref="T:System.Single" /> 值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.Single" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>傳回數值，指示這個執行個體和指定的 <see cref="T:System.Single" /> 物件是否表示相同的值。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 等於這個執行個體則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Single" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.Single" />。</returns>
    </member>
    <member name="M:System.Single.IsFinite(System.Single)">
      <summary>判斷指定的值是否為有限 (零、偏低或一般)。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果指定的值為有限 (零、偏低或一般)，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>傳回值，指出指定的數字是否計算結果為負或正的無限大。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果 <paramref name="f" /> 計算結果為 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>傳回值，這個值表示指定的值是否不是數字 (<see cref="F:System.Single.NaN" />)。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果 <paramref name="f" /> 的計算結果為非數值 (<see cref="F:System.Single.NaN" />)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNegative(System.Single)">
      <summary>判斷指定的值是否為負數。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果為負數，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>傳回值，指出指定的數字是否計算結果為負的無限大。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果 <paramref name="f" /> 計算結果為 <see cref="F:System.Single.NegativeInfinity" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNormal(System.Single)">
      <summary>判斷指定的值是否為正常。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果 <paramref name="f" /> 為正常，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>傳回值，指出指定數字是否計算結果為正的無限大。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果 <paramref name="f" /> 計算結果為 <see cref="F:System.Single.PositiveInfinity" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsSubnormal(System.Single)">
      <summary>判斷指定的值是否為偏低。</summary>
      <param name="f">單精確度浮點數。</param>
      <returns>如果 <paramref name="f" /> 為偏低，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>代表 <see cref="T:System.Single" /> 最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>代表 <see cref="T:System.Single" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>代表非數值 (<see langword="NaN" />)。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>表示負無限大。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Single" /> 值是否相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否大於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否大於或等於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 大於或等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Single" /> 值是否不相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否小於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>傳回值，這個值表示指定的 <see cref="T:System.Single" /> 值是否小於或等於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>將數字的字串表示轉換為其對等的單精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是格式有效的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將數字的字串表示 (使用指定樣式) 轉換為其對等的單精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 包含 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定樣式和的特定文化特性格式) 轉換為其對等的單精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不代表數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的特定文化特性格式) 轉換為其對等的單精確度浮點數。</summary>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>單精確度浮點數，相當於 <paramref name="s" /> 中指定的數值或符號。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是格式有效的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>表示正無限大。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Single" /> 值轉換所得的類型。</param>
      <param name="provider">物件，可提供傳回值格式的相關資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Single.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>使用指定格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
    </member>
    <member name="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>將數字的字串表示 (使用指定樣式和的特定文化特性格式) 轉換為其對等的單精確度浮點數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 要指定的一般值為 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則包含相當於 <paramref name="s" /> 中所包含之數值或符號的單精確度浮點數；如果轉換失敗，則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是符合 <paramref name="style" /> 的格式、代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字，或 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 列舉常數的有效組合。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>將數字的字串表示轉換為其對等的單精確度浮點數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則包含相當於 <paramref name="s" /> 中所包含之數值或符號的單精確度浮點數；如果轉換失敗，則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的數字，或者代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字，這項轉換就會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Span`1">
      <summary>提供任意記憶體之連續區域的型別和記憶體安全表示。</summary>
      <typeparam name="T">中的專案類型<see cref="T:System.Span`1" />。</typeparam>
    </member>
    <member name="M:System.Span`1.#ctor(`0[])">
      <summary>在整個指定的陣列上建立新的 <see cref="T:System.Span`1" /> 物件。</summary>
      <param name="array">要從中建立 <see cref="T:System.Span`1" /> 物件的陣列。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 是參考型別，且 <paramref name="array" /> 不是 <paramref name="T" /> 型別的陣列。</exception>
    </member>
    <member name="M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>建立新的 <see cref="T:System.Span`1" /> 物件，其中包含起始於指定索引之陣列的指定項目數。</summary>
      <param name="array">來源陣列。</param>
      <param name="start">要包含在新的 <see cref="T:System.Span`1" /> 中之第一個項目的索引。</param>
      <param name="length">要包含在新的 <see cref="T:System.Span`1" /> 中的項目數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 為 <see langword="null" />，但 <paramref name="start" /> 或 <paramref name="length" /> 為非零。
-或-
<paramref name="start" /> 在陣列的界限之外。
-或-
<paramref name="start" /> 和 <paramref name="length" /> 超過陣列中的項目數。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 是參考型別，且 <paramref name="array" /> 不是 <paramref name="T" /> 型別的陣列。</exception>
    </member>
    <member name="M:System.Span`1.#ctor(System.Void*,System.Int32)">
      <summary>透過指定的 <typeparamref name="T" /> 元素數目建立新 <see cref="T:System.Span`1" /> 物件，從指定的記憶體位址開始。</summary>
      <param name="pointer">記憶體中指定 <typeparamref name="T" /> 元素數目的起始位址指標。</param>
      <param name="length">要包含在 <see cref="T:System.Span`1" /> 中的 <typeparamref name="T" /> 元素數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 是參考型別或包含指標，因此無法儲存在非受控記憶體中。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 為負。</exception>
    </member>
    <member name="M:System.Span`1.Clear">
      <summary>清除這個 <see cref="T:System.Span`1" /> 物件的內容。</summary>
    </member>
    <member name="M:System.Span`1.CopyTo(System.Span{`0})">
      <summary>將這個 <see cref="T:System.Span`1" /> 的內容複製到目的地 <see cref="T:System.Span`1" />。</summary>
      <param name="destination">目的地 <see cref="T:System.Span`1" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 比來源 <see cref="T:System.Span`1" /> 短。</exception>
    </member>
    <member name="P:System.Span`1.Empty">
      <summary>傳回空的 <see cref="T:System.Span`1" /> 物件。</summary>
      <returns>空的 <see cref="T:System.Span`1" /> 物件。</returns>
    </member>
    <member name="T:System.Span`1.Enumerator">
      <summary>提供 <see cref="T:System.Span`1" /> 項目的列舉值。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Span`1.Enumerator.Current">
      <summary>取得位於目前列舉值位置的項目參考。</summary>
      <returns>
        <see cref="T:System.Span`1" /> 中位於目前列舉值位置的項目。</returns>
    </member>
    <member name="M:System.Span`1.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Span`1" /> 的下一個項目。</summary>
      <returns>如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果已傳遞範圍結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Span`1.Equals(System.Object)">
      <summary>不支援呼叫這個方法。</summary>
      <param name="obj">不支援。</param>
      <returns>不支援呼叫這個方法。</returns>
      <exception cref="T:System.NotSupportedException">不支援呼叫這個方法。</exception>
    </member>
    <member name="M:System.Span`1.Fill(`0)">
      <summary>以指定的值填入這個範圍的項目。</summary>
      <param name="value">要指派給範圍之每個項目的值。</param>
    </member>
    <member name="M:System.Span`1.GetEnumerator">
      <summary>傳回這個 <see cref="T:System.Span`1" /> 的列舉值。</summary>
      <returns>這個範圍的列舉值。</returns>
    </member>
    <member name="M:System.Span`1.GetHashCode">
      <summary>擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">不支援呼叫這個方法。</exception>
    </member>
    <member name="M:System.Span`1.GetPinnableReference">
      <summary>傳回索引位置為零之 <see cref="T:System.Span`1" /> 的項目參考。</summary>
      <returns>索引位置為零之 <see cref="T:System.Span`1" /> 的項目參考；如果 <see cref="P:System.Span`1.IsEmpty" /> 為 <see langword="true" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Span`1.IsEmpty">
      <summary>傳回值，指出目前的 <see cref="T:System.Span`1" /> 是否為空白。</summary>
      <returns>
        <see langword="true" />如果目前的範圍是空的, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Span`1.Item(System.Int32)">
      <summary>取得位於指定索引的元素，該索引以零起始。</summary>
      <param name="index">項目之以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於零，或是大於或等於 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="P:System.Span`1.Length">
      <summary>傳回目前範圍的長度。</summary>
      <returns>目前範圍的長度。</returns>
    </member>
    <member name="M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})">
      <summary>傳回值，指出兩個 <see cref="T:System.Span`1" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個範圍。</param>
      <param name="right">要比較的第二個範圍。</param>
      <returns>如果兩個 <see cref="T:System.Span`1" /> 物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}">
      <summary>定義從 <see cref="T:System.ArraySegment`1" /> 到 <see cref="T:System.Span`1" /> 的隱含轉換。</summary>
      <param name="segment">要轉換成 <see cref="T:System.Span`1" /> 的陣列區段。</param>
      <returns>對應至陣列區段的範圍。</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}">
      <summary>定義從 <see cref="T:System.Span`1" /> 到 <see cref="T:System.ReadOnlySpan`1" /> 的隱含轉換。</summary>
      <param name="span">物件，要轉換成 <see cref="T:System.ReadOnlySpan`1" />。</param>
      <returns>對應至目前執行個體的唯讀範圍。</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(T[])~System.Span{`0}">
      <summary>定義從陣列到 <see cref="T:System.Span`1" /> 的隱含轉換。</summary>
      <param name="array">要轉換成 <see cref="T:System.Span`1" /> 的陣列。</param>
      <returns>對應至 <paramref name="array" /> 的範圍。</returns>
    </member>
    <member name="M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})">
      <summary>傳回值，指出兩個 <see cref="T:System.Span`1" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個範圍。</param>
      <param name="right">要比較的第二個範圍。</param>
      <returns>如果兩個 <see cref="T:System.Span`1" /> 物件不相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32)">
      <summary>從起始於指定索引的目前範圍形成配量。</summary>
      <param name="start">要開始配量的索引。</param>
      <returns>由從 <paramref name="start" /> 到範圍結尾的目前範圍之所有項目組成的範圍。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小於零或大於 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32,System.Int32)">
      <summary>從起始於指定索引之指定長度的目前範圍形成配量。</summary>
      <param name="start">要開始此配量的索引。</param>
      <param name="length">配量所需的長度。</param>
      <returns>由起始於 <paramref name="start" /> 目前範圍之 <paramref name="length" /> 項目組成的範圍。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 或 <paramref name="start" /> + <paramref name="length" /> 小於零或大於 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="M:System.Span`1.ToArray">
      <summary>將這個範圍的內容複製到新的陣列。</summary>
      <returns>陣列，其中包含目前範圍中的資料。</returns>
    </member>
    <member name="M:System.Span`1.ToString">
      <summary>傳回此 <see cref="T:System.Span`1" /> 物件的字串表示。</summary>
      <returns>此 <see cref="T:System.Span`1" /> 物件的字串表示。</returns>
    </member>
    <member name="M:System.Span`1.TryCopyTo(System.Span{`0})">
      <summary>嘗試將目前的 <see cref="T:System.Span`1" /> 複製到目的地 <see cref="T:System.Span`1" />，並傳回值，指出複製作業是否成功。</summary>
      <param name="destination">複製作業的目標。</param>
      <returns>若複製作業成功，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>例外狀況，擲回於執行堆疊因為包含過多巢狀方法呼叫而溢位時。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>初始化 <see cref="T:System.StackOverflowException" /> 類別的新執行個體，設定新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「要求的作業造成堆疊溢位」。 此訊息會考量目前的系統文化特性。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.StackOverflowException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。 message 的內容必須能讓人瞭解。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.StackOverflowException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>指示應用程式的 COM 執行緒模型為單一執行緒 Apartment (Single-Threaded Apartment，STA)。</summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.STAThreadAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.String">
      <summary>以一連串的 UTF-16 字碼單位表示文字。</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列的指定指標所指示的值。</summary>
      <param name="value">Unicode 字元之 Null 終端陣列的指標</param>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的處理序沒有讀取所有定址字元的權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定包含無效 Unicode 字元的陣列，或 <paramref name="value" /> 指定小於 64000 的位址。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列、在陣列內起始字元的位置以及長度等等的指定指標所指示的值。</summary>
      <param name="value">Unicode 字元陣列的指標。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零、<paramref name="value" /> + <paramref name="startIndex" /> 導致指標溢位，或目前的處理序沒有所有定址字元的讀取權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定包含無效 Unicode 字元的陣列，或 <paramref name="value" /> + <paramref name="startIndex" /> 指定小於 64000 的位址。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為由重複指定次數的指定 Unicode 字元所指示的值。</summary>
      <param name="c">Unicode 字元。</param>
      <param name="count">
        <paramref name="c" /> 發生的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列所指示的值。</summary>
      <param name="value">Unicode 字元陣列。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列、在陣列內起始字元的位置和長度等等所指示的值。</summary>
      <param name="value">Unicode 字元陣列。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。  
-或- 
<paramref name="startIndex" /> 和 <paramref name="length" /> 的總和大於 <paramref name="value" /> 中的項目數。</exception>
    </member>
    <member name="M:System.String.#ctor(System.ReadOnlySpan{System.Char})">
      <param name="value" />
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 8 位元帶正負號整數 (Signed Integer) 陣列的指標所指示的值。</summary>
      <param name="value">以 null 結束之 8 位元帶正負號整數的陣列指標。 整數會使用目前的系統字碼頁編碼來解譯 (也就是由 <see cref="P:System.Text.Encoding.Default" /> 所指定的編碼)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">無法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新執行個體，假設 <paramref name="value" /> 是 ANSI 編碼。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">要初始化的新字串長度，由 <paramref name="value" /> 之 null 結束字元所決定，該長度太長而無法配置。</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" /> 指定了無效的位址。</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 8 位元帶正負號整數的陣列、在該陣列內開始位置和長度的指定指標所指示的值。</summary>
      <param name="value">8 位元帶正負號整數陣列的指標。 整數會使用目前的系統字碼頁編碼來解譯 (也就是由 <see cref="P:System.Text.Encoding.Default" /> 所指定的編碼)。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。  
-或- 
<paramref name="value" /> + <paramref name="startIndex" /> 指定的位址對於目前的平台而言太大，也就是位址計算溢位。  
-或- 
要初始化的新字串長度太大而無法配置。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> + <paramref name="startIndex" /> 指定的位址小於 64K。  
-或- 
無法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新執行個體，假設 <paramref name="value" /> 是 ANSI 編碼。</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定了無效的位址。</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 8 位元帶正負號整數的陣列、在該陣列內開始位置、長度和 <see cref="T:System.Text.Encoding" /> 物件的指定指標所指示的值。</summary>
      <param name="value">8 位元帶正負號整數陣列的指標。</param>
      <param name="startIndex">開始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
      <param name="enc">物件，指定以 <paramref name="value" /> 參考之陣列的編碼方式。 如果 <paramref name="enc" /> 為 <see langword="null" />，則假設使用 ANSI 編碼方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。  
-或- 
<paramref name="value" /> + <paramref name="startIndex" /> 指定的位址對於目前的平台而言太大，也就是位址計算溢位。  
-或- 
要初始化的新字串長度太大而無法配置。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> + <paramref name="startIndex" /> 指定的位址小於 64K。  
-或- 
無法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新執行個體，假設 <paramref name="value" /> 是依照 <paramref name="enc" /> 的指定所編碼。</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定了無效的位址。</exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>取得目前 <see cref="T:System.Char" /> 物件中指定位置的 <see cref="T:System.String" /> 物件。</summary>
      <param name="index">目前字串中的位置。</param>
      <returns>在 <paramref name="index" /> 位置的物件。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 大於或等於此物件的長度或小於零。</exception>
    </member>
    <member name="M:System.String.Clone">
      <summary>傳回對 <see cref="T:System.String" />這個執行個體的參考。</summary>
      <returns>
        <see cref="T:System.String" /> 的這個執行個體。</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件子字串，並傳回一個整數，指出它們在排序順序中的相對位置。</summary>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。  
  值 
  條件 
  小於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之前。  

  零 
  子字串出現在排序次序中的相同位置，或 <paramref name="length" /> 為零。  

  大於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之後。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexB" /> 大於 <paramref name="strB" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 是負數。  
-或- 
<paramref name="indexA" /> 或 <paramref name="indexB" /> 為 <see langword="null" />，且 <paramref name="length" /> 大於零。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>比較兩個指定之 <see cref="T:System.String" /> 物件的子字串，忽略或區分兩者的大小寫，並傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示在比較時忽略大小寫，否則為 <see langword="false" />。</param>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。  
  值 
  條件 
  小於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之前。  

  零 
  子字串出現在排序次序中的相同位置，或 <paramref name="length" /> 為零。  

  大於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之後。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexB" /> 大於 <paramref name="strB" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 是負數。  
-或- 
<paramref name="indexA" /> 或 <paramref name="indexB" /> 為 <see langword="null" />，且 <paramref name="length" /> 大於零。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
      <summary>比較兩個指定之 <see cref="T:System.String" /> 物件的子字串，忽略或區分兩者的大小寫，並使用文化特性資訊來影響比較，然後傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示在比較時忽略大小寫，否則為 <see langword="false" />。</param>
      <param name="culture">物件，提供文化特性相關的比較資訊。</param>
      <returns>整數，表示兩個比較元 (Comparand) 之間的語彙關係。  
  值 
  條件 
  小於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之前。  

  零 
  子字串出現在排序次序中的相同位置，或 <paramref name="length" /> 為零。  

  大於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之後。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexB" /> 大於 <paramref name="strB" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 是負數。  
-或- 
<paramref name="strA" /> 或 <paramref name="strB" /> 為 <see langword="null" />，且 <paramref name="length" /> 大於零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件的子字串，使用指定的比較選項及特定文化特性資訊影響比較，然後傳回整數，這個整數表示這兩個子字串在排序次序中彼此的關聯性。</summary>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的開始位置。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的開始位置。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <param name="culture">物件，提供文化特性相關的比較資訊。</param>
      <param name="options">執行比較時要使用的選項 (例如忽略大小寫或符號)。</param>
      <returns>整數，這個整數表示兩個子字串之間的語彙關係，如下表所示。  
  值 
  條件 
  小於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之前。  

  零 
  子字串出現在排序次序中的相同位置，或 <paramref name="length" /> 為零。  

  大於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 <paramref name="strA" /><see langword=".Length" />。  
-或- 
 <paramref name="indexB" /> 大於 <paramref name="strB" /><see langword=".Length" />。  
-或- 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 是負數。  
-或- 
<paramref name="strA" /> 或 <paramref name="strB" /> 為 <see langword="null" />，且 <paramref name="length" /> 大於零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>使用指定的規則比較兩個指定之 <see cref="T:System.String" /> 物件的子字串，並傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。  
  值 
  條件 
  小於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之前。  

  零 
  相同排序次序中相同位置出現的子字串，或 <paramref name="length" /> 參數為零。  

  大於零 
  <paramref name="strA" /> 中的子字串的排序次序在 <paramref name="strB" /> 中的子字串之後。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexB" /> 大於 <paramref name="strB" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 是負數。  
-或- 
<paramref name="indexA" /> 或 <paramref name="indexB" /> 為 <see langword="null" />，且 <paramref name="length" /> 大於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件，並傳回一個整數，指出它們在排序順序中的相對位置。</summary>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。  
  值 
  條件 
  小於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 出現在排序次序中的位置和 <paramref name="strB" /> 相同。  

  大於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之後。</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件，忽略或區分兩者的大小寫，並傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示在比較時忽略大小寫，否則為 <see langword="false" />。</param>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。  
  值 
  條件 
  小於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 出現在排序次序中的位置和 <paramref name="strB" /> 相同。  

  大於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之後。</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件，忽略或區分兩者的大小寫，並使用特定文化特性資訊來影響比較，然後傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示在比較時忽略大小寫，否則為 <see langword="false" />。</param>
      <param name="culture">物件，提供文化特性相關的比較資訊。</param>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。  
  值 
  條件 
  小於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 出現在排序次序中的位置和 <paramref name="strB" /> 相同。  

  大於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之後。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>比較兩個指定的 <see cref="T:System.String" /> 物件，使用指定的比較選項及特定文化特性資訊影響比較，然後傳回整數，這個整數表示這兩個字串在排序次序中彼此的關聯性。</summary>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <param name="culture">提供特定文化特性之比較資訊的文化特性。</param>
      <param name="options">執行比較時要使用的選項 (例如忽略大小寫或符號)。</param>
      <returns>32 位元帶正負號的整數，這個整數表示 <paramref name="strA" /> 和 <paramref name="strB" /> 之間的語彙關係，如下表所示。 
  值 
  條件 
  小於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之前。  
  零 
 <paramref name="strA" /> 出現在排序次序中的位置和 <paramref name="strB" /> 相同。  
  大於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>使用指定的規則比較兩個指定的 <see cref="T:System.String" /> 物件，並傳回一個整數，表示兩者在排序順序中的相對位置。</summary>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。  
  值 
  條件 
  小於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 在排序次序中的位置和 <paramref name="strB" /> 相同。  

  大於零 
 在排序次序中，<paramref name="strA" /> 會排在 <paramref name="strB" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">不支援 <see cref="T:System.StringComparison" />。</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>藉由評估每個子字串中對應的 <see cref="T:System.String" /> 物件之數字值，比較兩個指定的 <see cref="T:System.Char" /> 物件之子字串。</summary>
      <param name="strA">要用於比較中的第一個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的起始索引。</param>
      <param name="strB">要用於比較的第二個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的起始索引。</param>
      <param name="length">要比較之子字串的字元數上限。</param>
      <returns>32 位元帶正負號的整數，表示兩個比較元之間的語彙關係。  
  值 
  條件 
  小於零 
  <paramref name="strA" /> 中的子字串小於 <paramref name="strB" /> 中的子字串。  

  零 
  子字串相等，或者 <paramref name="length" /> 為零。  

  大於零 
  <paramref name="strA" /> 中的子字串大於 <paramref name="strB" /> 中的子字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> 不是 <see langword="null" /> 且 <paramref name="indexA" /> 大於 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="strB" /> 不是 <see langword="null" /> 且 <paramref name="indexB" /> 大於 <paramref name="strB" />.<see cref="P:System.String.Length" />。  
-或- 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 是負數。</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>藉由評估每個字串中對應的 <see cref="T:System.String" /> 物件之數字值，比較兩個指定 <see cref="T:System.Char" /> 物件。</summary>
      <param name="strA">要比較的第一個字串。</param>
      <param name="strB">要比較的第二個字串。</param>
      <returns>整數，表示兩個比較元 (Comparand) 之間的語彙關係。  
  值 
  條件 
  小於零 
 <paramref name="strA" /> 小於 <paramref name="strB" />。  

  零 
 <paramref name="strA" /> 和 <paramref name="strB" /> 相等。  

  大於零 
 <paramref name="strA" /> 大於 <paramref name="strB" />。</returns>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>比較這個執行個體與指定的 <see cref="T:System.Object" />，並且指出這個執行個體在排序次序中，位於所指定 <see cref="T:System.Object" /> 之前、之後或相同位置。</summary>
      <param name="value">評估為 <see cref="T:System.String" /> 的物件。</param>
      <returns>32 位元帶正負號的整數，指出這個執行個體在排序次序中，位於 <paramref name="value" /> 參數之前、之後或相同位置。  
  值 
  條件 
  小於零 
  這個執行個體位於 <paramref name="value" /> 之前。  

  零 
  這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。  

  大於零 
  這個執行個體位於 <paramref name="value" /> 之後。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.String" />。</exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>比較這個執行個體與指定的 <see cref="T:System.String" /> 物件，並且表示這個執行個體在排序次序中，位於所指定字串之前、之後或相同位置。</summary>
      <param name="strB">要和這個執行個體比較的字串。</param>
      <returns>32 位元帶正負號的整數，指出這個執行個體在排序次序中，位於 <paramref name="strB" /> 參數之前、之後或相同位置。  
  值 
  條件 
  小於零 
  這個執行個體位於 <paramref name="strB" /> 之前。  

  零 
  這個執行個體在排序次序中的位置與 <paramref name="strB" /> 相同。  

  大於零 
  這個執行個體位於 <paramref name="strB" /> 之後。  

-或- 
 <paramref name="strB" /> 為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>串連類型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 之已建構的 <see cref="T:System.String" /> 集合的成員。</summary>
      <param name="values">集合物件，這個物件實作 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型類型引數為 <see cref="T:System.String" />。</param>
      <returns>
        <paramref name="values" /> 中的串連字串，或如果 <paramref name="values" /> 是空白的 <see langword="IEnumerable(Of String)" />則為 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>建立指定之物件的字串表示。</summary>
      <param name="arg0">要表示的物件，或 <see langword="null" />。</param>
      <returns>
        <paramref name="arg0" /> 值的字串表示；如果 <see cref="F:System.String.Empty" /> 為 <paramref name="arg0" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>串連兩個指定之物件的字串表示。</summary>
      <param name="arg0">要串連的第一個物件。</param>
      <param name="arg1">要串連的第二個物件。</param>
      <returns>
        <paramref name="arg0" /> 和 <paramref name="arg1" /> 之值的串連字串表示。</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>串連三個指定之物件的字串表示。</summary>
      <param name="arg0">要串連的第一個物件。</param>
      <param name="arg1">要串連的第二個物件。</param>
      <param name="arg2">要串連的第三個物件。</param>
      <returns>
        <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 之值的串連字串表示。</returns>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>串連指定之 <see cref="T:System.Object" /> 陣列中項目的字串表示法。</summary>
      <param name="args">包含要串連之項目的物件陣列。</param>
      <returns>
        <paramref name="args" /> 中之項目值的串連字串表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>串連兩個指定唯讀字元範圍的字串表示。</summary>
      <param name="str0">要串連的第一個唯讀字元範圍。</param>
      <param name="str1">要串連的第二個唯讀字元範圍。</param>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 之值的串連字串表示。</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>串連三個指定唯讀字元範圍的字串表示。</summary>
      <param name="str0">要串連的第一個唯讀字元範圍。</param>
      <param name="str1">要串連的第二個唯讀字元範圍。</param>
      <param name="str2">要串連的第三個唯讀字元範圍。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 值的串連字串表示。</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>串連四個指定唯讀字元範圍的字串表示。</summary>
      <param name="str0">要串連的第一個唯讀字元範圍。</param>
      <param name="str1">要串連的第二個唯讀字元範圍。</param>
      <param name="str2">要串連的第三個唯讀字元範圍。</param>
      <param name="str3">要串連的第四個唯讀字元範圍。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的值串連字串表示。</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的兩個指定執行個體。</summary>
      <param name="str0">要串連的第一個字串。</param>
      <param name="str1">要串連的第二個字串。</param>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 的串連。</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的三個指定執行個體。</summary>
      <param name="str0">要串連的第一個字串。</param>
      <param name="str1">要串連的第二個字串。</param>
      <param name="str2">要串連的第三個字串。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的串連。</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的四個指定執行個體。</summary>
      <param name="str0">要串連的第一個字串。</param>
      <param name="str1">要串連的第二個字串。</param>
      <param name="str2">要串連的第三個字串。</param>
      <param name="str3">要串連的第四個字串。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的串連。</returns>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>串連指定 <see cref="T:System.String" /> 陣列中的項目。</summary>
      <param name="values">字串執行個體的陣列。</param>
      <returns>
        <paramref name="values" /> 的串連項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>串連 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 實作的成員。</summary>
      <param name="values">集合物件，這個物件實作 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 介面。</param>
      <typeparam name="T">
        <paramref name="values" /> 之成員的類型。</typeparam>
      <returns>
        <paramref name="values" /> 中的串連成員。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Contains(System.Char)">
      <summary>傳回值，這個值表示指定的字元是否會出現在這個字串內。</summary>
      <param name="value">要搜尋的字元。</param>
      <returns>如果 <paramref name="value" /> 參數出現在此字串內，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Contains(System.Char,System.StringComparison)">
      <summary>使用指定的比較規則傳回值，這個值表示指定的字元是否會出現在這個字串內。</summary>
      <param name="value">要搜尋的字元。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <returns>如果 <paramref name="value" /> 參數出現在此字串內，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>傳回值，這個值表示指定的子字串是否會出現在這個字串內。</summary>
      <param name="value">要搜尋的字串。</param>
      <returns>如果 <see langword="true" /> 參數出現在這個字串內，或是 <paramref name="value" /> 為空字串 ("")，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Contains(System.String,System.StringComparison)">
      <summary>使用指定的比較規則傳回值，這個值表示指定的字串是否會出現在這個字串內。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <returns>如果 <see langword="true" /> 參數出現在這個字串內，或是 <paramref name="value" /> 為空字串 ("")，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>使用與指定的 <see cref="T:System.String" /> 相同的值，建立 <see cref="T:System.String" /> 的新執行個體。</summary>
      <param name="str">要複製的字串。</param>
      <returns>具有與 <paramref name="str" /> 相同值的新字串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>將字元的指定數目從這個執行個體的指定位置，複製到 Unicode 字元陣列的指定位置。</summary>
      <param name="sourceIndex">這個要複製的執行個體中第一個字元的索引。</param>
      <param name="destination">複製這個執行個體之字元的目標 Unicode 字元陣列。</param>
      <param name="destinationIndex">在 <paramref name="destination" /> 中開始複製作業的索引。</param>
      <param name="count">這個執行個體中要複製到 <paramref name="destination" /> 的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 為負。 
-或- 
 <paramref name="sourceIndex" /> 未識別目前執行個體中的位置。  
-或- 
 <paramref name="destinationIndex" /> 未識別 <paramref name="destination" /> 陣列中的有效索引。  
-或- 
 <paramref name="count" /> 大於從 <paramref name="sourceIndex" /> 到這個執行個體結尾的子字串長度。 
-或- 
 <paramref name="count" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destination" /> 陣列結尾的子陣列長度。</exception>
    </member>
    <member name="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})">
      <param name="length" />
      <param name="state" />
      <param name="action" />
      <typeparam name="TState" />
    </member>
    <member name="F:System.String.Empty">
      <summary>表示空字串。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.String.EndsWith(System.Char)">
      <param name="value" />
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>判斷這個字串執行個體的結尾是否符合指定的字串。</summary>
      <param name="value">要在這個執行個體結束時，與子字串比較的字串。</param>
      <returns>如果 <see langword="true" /> 符合這個執行個體的結尾，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>判斷當使用指定之文化特性進行比較時，這個字串執行個體的結尾是否符合指定的字串。</summary>
      <param name="value">要在這個執行個體結束時，與子字串比較的字串。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示在比較時忽略大小寫，否則為 <see langword="false" />。</param>
      <param name="culture">判斷如何比較此執行個體和 <paramref name="value" /> 的文化特性資訊。 如果 <paramref name="culture" /> 是 <see langword="null" />，則會使用目前的文化特性。</param>
      <returns>如果 <see langword="true" /> 參數符合這個字串的結尾，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>判斷當使用指定的比較選項進行比較時，這個字串執行個體的結尾是否符合指定的字串。</summary>
      <param name="value">要在這個執行個體結束時，與子字串比較的字串。</param>
      <param name="comparisonType">列舉值之一，指定這個字串和 <paramref name="value" /> 的比較方式。</param>
      <returns>如果 <see langword="true" /> 參數符合這個字串的結尾，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.EnumerateRunes">
      <summary>從這個字串傳回 <see cref="T:System.Text.Rune" /> 的列舉。</summary>
      <returns>字串 Rune 列舉程式。</returns>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>判斷這個執行個體和指定的物件 (同時還必須是 <see cref="T:System.String" /> 物件) 是否具有相同的值。</summary>
      <param name="obj">要與這個執行個體比較的字串。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" />，且其值與這個執行個體相同，則為 <see cref="T:System.String" />，否則為 <see langword="false" />。  如果 <paramref name="obj" /> 是 <see langword="null" />，則方法會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>判斷這個執行個體和另一個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。</summary>
      <param name="value">要與這個執行個體比較的字串。</param>
      <returns>如果 <see langword="true" /> 參數的值與這個執行個體的值相同，則為 <paramref name="value" />，否則為 <see langword="false" />。 如果 <paramref name="value" /> 是 <see langword="null" />，則方法會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。</summary>
      <param name="a">要比較的第一個字串，或是 <see langword="null" />。</param>
      <param name="b">要比較的第二個字串，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值與 <paramref name="a" /> 的值相同，則為 <paramref name="b" />，否則為 <see langword="false" />。 如果 <paramref name="a" /> 和 <paramref name="b" /> 都是 <see langword="null" />，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。 參數可指定用於比較的文化特性、大小寫及排序規則。</summary>
      <param name="a">要比較的第一個字串，或是 <see langword="null" />。</param>
      <param name="b">要比較的第二個字串，或 <see langword="null" />。</param>
      <param name="comparisonType">其中一個列舉值，指定比較的規則。</param>
      <returns>如果 <see langword="true" /> 參數的值等於 <paramref name="a" /> 參數的值，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>判斷這個字串和指定的 <see cref="T:System.String" /> 物件是否具有相同的值。 參數可指定用於比較的文化特性、大小寫及排序規則。</summary>
      <param name="value">要與這個執行個體比較的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定字串的比較方式。</param>
      <returns>如果 <see langword="true" /> 參數的值與這個字串相同，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
      <summary>以對應物件的字串表示，取代指定之字串中的一或多個格式項目。 參數提供特定文化特性格式資訊。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的一或多個格式項目已由 <paramref name="arg0" /> 的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引不是零。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>以兩個指定物件的字串表示，取代字串中的格式項目。 參數提供特定文化特性格式資訊。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引不是零或一。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>以三個指定物件的字串表示，取代字串中的格式項目。 參數提供特定文化特性格式資訊。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於零或大於二。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>以指定陣列中對應物件的字串表示，取代字串中的格式項目。 參數提供特定文化特性格式資訊。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="args">物件陣列，包含零或多個要格式化的物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="args" /> 中對應物件的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於零，或大於等於 <paramref name="args" /> 陣列的長度。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>以指定物件的字串表示，取代字串中的一或多個格式項目。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的所有格式項目已由 <paramref name="arg0" /> 的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 中的格式項目無效。  
-或- 
格式項目的索引不是零。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>以兩個指定物件的字串表示，取代字串中的格式項目。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引不是零或一。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>以三個指定物件的字串表示，取代字串中的格式項目。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於零或大於二。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>以指定陣列中對應物件的字串表示，取代指定之字串中的格式項目。</summary>
      <param name="format">複合格式字串。</param>
      <param name="args">物件陣列，包含零或多個要格式化的物件。</param>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已由 <paramref name="args" /> 中對應物件的字串表示取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於零，或大於等於 <paramref name="args" /> 陣列的長度。</exception>
    </member>
    <member name="M:System.String.GetEnumerator">
      <summary>擷取可以逐一查看這個字串中個別字元的物件。</summary>
      <returns>列舉程式物件。</returns>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>傳回這個字串的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char})">
      <summary>傳回所提供唯讀字元範圍的雜湊碼。</summary>
      <param name="value">唯讀的字元範圍。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>使用指定的規則，傳回所提供唯讀字元範圍的雜湊碼。</summary>
      <param name="value">唯讀的字元範圍。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.StringComparison)">
      <summary>使用指定規則傳回這個字串的雜湊碼。</summary>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.String.GetPinnableReference">
      <summary>傳回位於索引零的字串元素參考。</summary>
      <returns>字元，代表位於索引零的字串元素參考。</returns>
      <exception cref="T:System.NullReferenceException">字串為 Null。</exception>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>傳回類別 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.String" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.String" />。</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>報告這個字串中指定之 Unicode 字元第一次出現時的所在索引 (以零為起始)。</summary>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <returns>如果找到該字元，則為 <paramref name="value" /> 以零為起始的索引位置，如果找不到為 -1。</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>報告這個字串中指定之 Unicode 字元第一次出現時的所在索引 (以零為起始)。 搜尋從指定的字元位置開始。</summary>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <returns>如果找到該字元，則為從字串起始處之 <paramref name="value" /> 的以零為起始索引位置，如果找不到，則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於 0 (零) 或大於字串的長度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>報告這個執行個體中指定之字元第一次出現時的所在索引 (以零為起始)。 搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <returns>如果找到該字元，則為從字串起始處之 <paramref name="value" /> 的以零為起始索引位置，如果找不到，則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負。  
-或- 
 <paramref name="startIndex" /> 大於這個字串的長度。  
-或- 
 <paramref name="count" /> 大於這個字串減 <paramref name="startIndex" /> 的長度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.StringComparison)">
      <summary>報告這個字串中指定之 Unicode 字元第一次出現時的所在索引 (以零為起始)。 參數會指定要用於指定字元的搜尋類型。</summary>
      <param name="value">要搜尋的字元。</param>
      <param name="comparisonType">列舉值，其指定搜尋規則。</param>
      <returns>如果找到該字元，則為 <paramref name="value" /> 以零為起始的索引；如果找不到，則為 -1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>回報這個執行個體中指定之字串第一次出現時的所在索引 (以零為起始)。</summary>
      <param name="value">要搜尋的字串。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 以零為起始的索引位置，如未找到，則為 -1。 如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>回報這個執行個體中指定之字串第一次出現時的所在索引 (以零為起始)。 搜尋從指定的字元位置開始。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <returns>如果找到該字串，則為從目前執行個體起始處之 <paramref name="value" /> 的以零為起始索引位置；如果找不到，則為 -1。 如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於 0 (零) 或大於這個字串的長度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>回報這個執行個體中指定之字串第一次出現時的所在索引 (以零為起始)。 搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <returns>如果找到該字串，則為從目前執行個體起始處之 <paramref name="value" /> 的以零為起始索引位置；如果找不到，則為 -1。 如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負。  
-或- 
 <paramref name="startIndex" /> 大於這個字串的長度。  
-或- 
 <paramref name="count" /> 大於這個字串減 <paramref name="startIndex" /> 的長度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現時的所在索引 (以零為起始)。 參數會指定目前字串中的開始搜尋位置、目前字串中要搜尋的字元數目，以及要用於指定字串的搜尋類型。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <returns>如果找到該字串，則為從目前執行個體起始處之 <paramref name="value" /> 參數的以零為起始索引位置；如果找不到，則為 -1。 如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負。  
-或- 
 <paramref name="startIndex" /> 大於這個執行個體的長度。  
-或- 
 <paramref name="count" /> 大於這個字串減 <paramref name="startIndex" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現時的所在索引 (以零為起始)。 參數會指定目前字串中的開始搜尋位置和要用於指定字串的搜尋類型。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <returns>如果找到該字串，則為從目前執行個體起始處之 <paramref name="value" /> 參數的以零為起始索引位置；如果找不到，則為 -1。 如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於 0 (零) 或大於這個字串的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現時的所在索引 (以零為起始)。 參數會指定要用於指定字串的搜尋類型。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的索引位置，如果沒有找到，則為 -1。 如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>報告指定的 Unicode 字元陣列中，任何字元在這個執行個體中第一次出現時的所在索引 (以零為起始)。</summary>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <returns>在此執行個體中，<paramref name="anyOf" /> 中的任何字元第一次出現的所在索引位置 (以零為起始)，如果找不到 <paramref name="anyOf" /> 中的字元，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>報告指定的 Unicode 字元陣列中，任何字元在這個執行個體中第一次出現時的所在索引 (以零為起始)。 搜尋從指定的字元位置開始。</summary>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <returns>在此執行個體中，<paramref name="anyOf" /> 中的任何字元第一次出現的所在索引位置 (以零為起始)，如果找不到 <paramref name="anyOf" /> 中的字元，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 為負。  
-或- 
 <paramref name="startIndex" /> 大於這個執行個體的字元數。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>報告指定的 Unicode 字元陣列中，任何字元在這個執行個體中第一次出現時的所在索引 (以零為起始)。 搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <returns>在此執行個體中，<paramref name="anyOf" /> 中的任何字元第一次出現的所在索引位置 (以零為起始)，如果找不到 <paramref name="anyOf" /> 中的字元，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負。  
-或- 
 <paramref name="count" /> + <paramref name="startIndex" /> 大於這個執行個體的字元數。</exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>傳回新字串，其中已在這個執行個體中指定的索引位置插入指定的字串。</summary>
      <param name="startIndex">插入的索引位置 (以零為起始)。</param>
      <param name="value">要插入的字串。</param>
      <returns>與這個執行個體相等的新字串，但是在 <paramref name="value" /> 位置插入了 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 是負值或大於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>擷取指定的 <see cref="T:System.String" /> 的系統參考。</summary>
      <param name="str">要在保留集區中搜尋的字串。</param>
      <returns>如果已經保留，則為系統的 <paramref name="str" /> 參考，否則為具有 <paramref name="str" /> 值之字串的新參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>擷取對指定 <see cref="T:System.String" /> 的參考。</summary>
      <param name="str">要在保留集區中搜尋的字串。</param>
      <returns>如果是在 Common Language Runtime 保留集區中，則為 <paramref name="str" /> 的參考，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IsNormalized">
      <summary>指出這個字串是否為 Unicode 正規化格式 C。</summary>
      <returns>如果這個字串為正規化格式 C，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">目前的執行個體包含無效的 Unicode 字元。</exception>
    </member>
    <member name="M:System.String.IsNormalized(System.Text.NormalizationForm)">
      <summary>指出這個字串是否為指定的 Unicode 正規化格式。</summary>
      <param name="normalizationForm">Unicode 正規化格式。</param>
      <returns>如果這個字串為 <see langword="true" /> 參數指定的正規化格式，則為 <paramref name="normalizationForm" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">目前的執行個體包含無效的 Unicode 字元。</exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>表示指定的字串是否為 <see langword="null" /> 或空字串 ("")。</summary>
      <param name="value">要測試的字串。</param>
      <returns>如果 <see langword="true" /> 參數為 <paramref name="value" /> 或空字串 ("")，則為 <see langword="null" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>表示指定的字串是否為 <see langword="null" />、空白，或只由空白字元組成的字串。</summary>
      <param name="value">要測試的字串。</param>
      <returns>如果 <see langword="true" /> 參數是 <paramref name="value" /> 或 <see langword="null" />，或者 <see cref="F:System.String.Empty" /> 完全由空白字元組成，則為 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.String.Join(System.Char,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.String.Join(System.Char,System.String[])">
      <param name="separator" />
      <param name="value" />
    </member>
    <member name="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)">
      <param name="separator" />
      <param name="value" />
      <param name="startIndex" />
      <param name="count" />
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>串連類型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 之已建構的 <see cref="T:System.String" /> 集合的成員，並在每個成員之間使用指定的分隔符號。</summary>
      <param name="separator">要當作分隔符號的字串。<paramref name="separator" /> 只有在 <paramref name="values" /> 有一個以上的項目時，才會包含在傳回的字串中。</param>
      <param name="values">包含要串連之字串的集合。</param>
      <returns>字串，由 <paramref name="values" /> 中的成員組成，且每個成員之間都會以 <paramref name="separator" /> 字串分隔。 如果 <paramref name="values" /> 沒有成員，方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>串連物件陣列的項目，並在每個項目之間使用指定的分隔符號。</summary>
      <param name="separator">要當做分隔符號的字串。 只有在 <paramref name="values" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="values">含有要串連之項目的陣列。</param>
      <returns>字串，由 <paramref name="values" /> 的項目組成，且每個項目之間都會以 <paramref name="separator" /> 字串分隔。 如果 <paramref name="values" /> 為空陣列，則方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>串連字串陣列的所有項目，並在每個項目之間使用指定的分隔符號。</summary>
      <param name="separator">要當做分隔符號的字串。 只有在 <paramref name="value" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="value">含有要串連之項目的陣列。</param>
      <returns>字串，由 <paramref name="value" /> 中的項目組成，且每個項目之間都會以 <paramref name="separator" /> 字串分隔。 如果 <paramref name="value" /> 為空陣列，則方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>串連字串陣列的指定項目，並在每個項目之間使用指定的分隔符號。</summary>
      <param name="separator">要當做分隔符號的字串。 只有在 <paramref name="value" /> 的元素有一個以上時，<paramref name="separator" /> 才會包含在傳回的字串中。</param>
      <param name="value">含有要串連之項目的陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 中要使用的第一個項目。</param>
      <param name="count">要使用的 <paramref name="value" /> 項目數目。</param>
      <returns>由 <paramref name="value" /> 中之字串組成的字串，每個字串之間都以 <paramref name="separator" /> 字串隔開。  
-或- 
 如果 <see cref="F:System.String.Empty" /> 為零、<paramref name="count" /> 沒有任何項目，或 <paramref name="value" /> 和 <paramref name="separator" /> 的所有項目都是 <paramref name="value" />，則為 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小於 0。  
-或- 
 <paramref name="startIndex" /> 加上 <paramref name="count" /> 大於 <paramref name="value" />中的項目數。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>串連集合的成員，並在每個成員之間使用指定的分隔符號。</summary>
      <param name="separator">要當作分隔符號的字串。<paramref name="separator" /> 只有在 <paramref name="values" /> 有一個以上的項目時，才會包含在傳回的字串中。</param>
      <param name="values">包含要串連之物件的集合。</param>
      <typeparam name="T">
        <paramref name="values" /> 之成員的類型。</typeparam>
      <returns>字串，由 <paramref name="values" /> 中的成員組成，且每個成員之間都會以 <paramref name="separator" /> 字串分隔。 如果 <paramref name="values" /> 沒有成員，方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>報告這個執行個體中指定之 Unicode 字元最後一次出現時的所在索引 (以零為起始)。</summary>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <returns>如果找到該字元，則為 <paramref name="value" /> 以零為起始的索引位置，如果找不到為 -1。</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>報告這個執行個體中指定之 Unicode 字元最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。</summary>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋的開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字元或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 小於零，或者大於或等於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>報告這個執行個體的子字串中，指定的 Unicode 字元最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。</summary>
      <param name="value">要搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋的開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字元或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 小於零，或者大於或等於這個執行個體的長度。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 小於零。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。</summary>
      <param name="value">要搜尋的字串。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 以零為起始的起始索引位置，如未找到，則為 -1。 如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為這個執行個體中的最後一個索引位置。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。 如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 小於零或大於目前執行個體的長度。  
-或- 
目前的執行個體等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 小於 -1 或大於零。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。 如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 為負。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 大於這個執行個體的長度。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> - <paramref name="count" />+ 1 指定的位置不在此執行個體之內。  
-或- 
目前的執行個體等於 <see cref="F:System.String.Empty" />，且 <paramref name="start" /> 小於 -1 或大於零。  
-或- 
目前的執行個體等於 <see cref="F:System.String.Empty" />，且 <paramref name="count" /> 大於 1。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>回報這個執行個體中指定之字串最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。 參數會指定搜尋指定字串時要執行的比較類型。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數以零為起始的索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。 如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 為負。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 大於這個執行個體的長度。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> + 1 - <paramref name="count" /> 指定的位置不在此執行個體之內。  
-或- 
目前的執行個體等於 <see cref="F:System.String.Empty" />，且 <paramref name="start" /> 小於 -1 或大於零。  
-或- 
目前的執行個體等於 <see cref="F:System.String.Empty" />，且 <paramref name="count" /> 大於 1。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。 參數會指定搜尋指定字串時要執行的比較類型。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="startIndex">搜尋開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數以零為起始的索引位置，如果找不到該字串或者目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。 如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" /> 或這個執行個體之最後索引位置，取兩者中較小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 小於零或大於目前執行個體的長度。  
-或- 
目前的執行個體等於 <see cref="F:System.String.Empty" /> 且 <paramref name="startIndex" /> 小於 -1 或大於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串最後一次出現時的所在索引 (以零為起始)。 參數會指定要用於指定字串的搜尋類型。</summary>
      <param name="value">要搜尋的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的起始索引位置，否則為 -1。 如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為這個執行個體中的最後一個索引位置。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>報告 Unicode 陣列中的一或多個指定的字元，在這個執行個體中最後一次出現時的所在索引 (以零為起始)。</summary>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <returns>這個執行個體中最後項目的索引位置，其中找到了 <paramref name="anyOf" /> 中的任何字元，如果 <paramref name="anyOf" /> 中沒有找到任何字元，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>報告 Unicode 陣列中的一或多個指定的字元，在這個執行個體中最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串的開頭進行。</summary>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <returns>所找到之 <paramref name="anyOf" /> 的任何字元，在這個執行個體中最後一次出現的索引位置；如果找不到 <paramref name="anyOf" /> 中的字元，或目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> 指定的位置不在這個執行個體之內。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>報告 Unicode 陣列中的一或多個指定的字元，在這個執行個體中最後一次出現時的所在索引 (以零為起始)。 搜尋會從指定的字元位置開始，然後反向朝字串開頭指定數目的字元位置進行。</summary>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋開始位置。 搜尋會從 <paramref name="startIndex" /> 朝這個執行個體的開頭進行。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <returns>所找到之 <paramref name="anyOf" /> 的任何字元，在這個執行個體中最後一次出現的索引位置；如果找不到 <paramref name="anyOf" /> 中的字元，或目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="count" /> 或 <paramref name="startIndex" /> 為負。  
-或- 
目前的執行個體不等於 <see cref="F:System.String.Empty" />，且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 小於零。</exception>
    </member>
    <member name="P:System.String.Length">
      <summary>取得目前 <see cref="T:System.String" /> 物件中字元的數目。</summary>
      <returns>目前字串中的字元數。</returns>
    </member>
    <member name="M:System.String.Normalize">
      <summary>傳回新的字串，其文字值與這個字串相同，但是其二進位表示為 Unicode 正規化格式 C。</summary>
      <returns>新的正規化字串，其文字值與這個字串相同，但是其二進位表示為正規化格式 C。</returns>
      <exception cref="T:System.ArgumentException">目前的執行個體包含無效的 Unicode 字元。</exception>
    </member>
    <member name="M:System.String.Normalize(System.Text.NormalizationForm)">
      <summary>傳回新的字串，其文字值與這個字串相同，但是其二進位表示為特定的 Unicode 正規化格式。</summary>
      <param name="normalizationForm">Unicode 正規化格式。</param>
      <returns>新的字串，其文字值與這個字串相同，但是其二進位表示為 <paramref name="normalizationForm" /> 參數指定的正規化格式。</returns>
      <exception cref="T:System.ArgumentException">目前的執行個體包含無效的 Unicode 字元。</exception>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>判斷兩個指定的字串是否具有相同的值。</summary>
      <param name="a">要比較的第一個字串，或是 <see langword="null" />。</param>
      <param name="b">要比較的第二個字串，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值與 <paramref name="a" /> 的值相同，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}">
      <param name="value" />
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>判斷兩個指定的字串是否具有不同的值。</summary>
      <param name="a">要比較的第一個字串，或是 <see langword="null" />。</param>
      <param name="b">要比較的第二個字串，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值與 <paramref name="a" /> 的值不同，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>傳回新字串，此字串會以空格填補左側至指定的總長度，靠右對齊這個執行個體中的字元。</summary>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <returns>與這個執行個體相等的新字串，但為靠右對齊，並在左側視需要填補若干空間來建立 <paramref name="totalWidth" /> 的長度。 但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。 如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>傳回新字串，此字串會以指定的 Unicode 字元填補左側至指定的總長度，靠右對齊這個執行個體中的字元。</summary>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <param name="paddingChar">Unicode 填補字元。</param>
      <returns>與這個執行個體相等的新字串，但為靠右對齊，並在左側視需要填補若干 <paramref name="paddingChar" /> 字元來建立 <paramref name="totalWidth" /> 的長度。 但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。 如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>傳回新字串，此字串會以空格填補右側至指定的總長度，靠左對齊這個字串中的字元。</summary>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <returns>與這個執行個體相等的新字串，但為靠左對齊，並在右側視需要填補若干空間來建立 <paramref name="totalWidth" /> 的長度。 但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。 如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>傳回新字串，此字串會以指定的 Unicode 字元填補右側至指定的總長度，靠左對齊這個字串中的字元。</summary>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <param name="paddingChar">Unicode 填補字元。</param>
      <returns>與這個執行個體相等的新字串，但為靠左對齊，並在右側視需要填補若干 <paramref name="paddingChar" /> 字元來建立 <paramref name="totalWidth" /> 的長度。 但是，如果 <paramref name="totalWidth" /> 小於這個執行個體的長度，此方法會傳回現有執行個體的參考。 如果 <paramref name="totalWidth" /> 等於這個執行個體的長度，此方法會傳回等於這個執行個體的新字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>傳回新字串，其中已刪除目前執行個體中的所有字元 (從指定位置開始到最後一個位置為止)。</summary>
      <param name="startIndex">要開始刪除字元之以零為起始的位置。</param>
      <returns>新字串，除了已移除的字元以外，其餘部分都與這個字串相等。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 指定不在此字串內的位置。</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>傳回新字串，其中已刪除在目前執行個體中指定位置開始之指定數目的字元。</summary>
      <param name="startIndex">要開始刪除字元之以零為起始的位置。</param>
      <param name="count">要刪除的字元數。</param>
      <returns>新字串，除了已移除的字元以外，其餘部分都與這個執行個體相等。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 加上 <paramref name="count" /> 指定的位置超出此執行個體。</exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>傳回新字串，其中這個執行個體中所有出現的指定 Unicode 字元都取代成其他指定的 Unicode 字元。</summary>
      <param name="oldChar">要被取代的 Unicode 字元。</param>
      <param name="newChar">要用來取代所有出現之 <paramref name="oldChar" /> 的 Unicode 字元。</param>
      <returns>相當於這個執行個體的字串，只是 <paramref name="oldChar" /> 的所有執行個體都會取代成 <paramref name="newChar" />。 如果在目前的執行個體中找不到 <paramref name="oldChar" />，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>傳回新字串，其中目前執行個體中所有出現的指定字串，都取代成其他指定的字串。</summary>
      <param name="oldValue">要被取代的字串。</param>
      <param name="newValue">用來取代所有出現之 <paramref name="oldValue" /> 的字串。</param>
      <returns>相當於目前字串的字串，只是 <paramref name="oldValue" /> 的所有執行個體都會取代成 <paramref name="newValue" />。 如果在目前的執行個體中找不到 <paramref name="oldValue" />，則方法傳回未變更的目前執行個體。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 為空字串 ("")。</exception>
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <param name="oldValue" />
      <param name="newValue" />
      <param name="ignoreCase" />
      <param name="culture" />
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.StringComparison)">
      <param name="oldValue" />
      <param name="newValue" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)">
      <param name="separator" />
      <param name="count" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.Char,System.StringSplitOptions)">
      <param name="separator" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>根據陣列中的字元分割字串成子字串。</summary>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 <see langword="null" />。</param>
      <returns>陣列，其項目中包含了這個執行個體中的子字串，由 <paramref name="separator" /> 內的一或多個字元分隔。 如需詳細資訊，請參閱＜備註＞一節。</returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>根據陣列中的字元分割字串成最大數目的子字串。 您也要指定傳回的子字串之最大數目。</summary>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 <see langword="null" />。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <returns>陣列，其項目中包含了這個執行個體中的子字串，由 <paramref name="separator" /> 內的一或多個字元分隔。 如需詳細資訊，請參閱＜備註＞一節。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負。</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>根據陣列中的字元分割字串成最大數目的子字串。</summary>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 <see langword="null" />。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字元所分隔的子字串。 如需詳細資訊，請參閱＜備註＞一節。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是其中一個 <see cref="T:System.StringSplitOptions" /> 值。</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>根據陣列中的字元分割字串成子字串。 您可以指定子字串是否包含空的陣列元素。</summary>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 <see langword="null" />。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字元所分隔的子字串。 如需詳細資訊，請參閱＜備註＞一節。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是其中一個 <see cref="T:System.StringSplitOptions" /> 值。</exception>
    </member>
    <member name="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)">
      <param name="separator" />
      <param name="count" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.String,System.StringSplitOptions)">
      <param name="separator" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>根據陣列中的字串分割字串成最大數目的子字串。 您可以指定子字串是否包含空的陣列元素。</summary>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 <see langword="null" />。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字串所分隔的子字串。 如需詳細資訊，請參閱＜備註＞一節。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是其中一個 <see cref="T:System.StringSplitOptions" /> 值。</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>根據陣列中的字串分割字串成子字串。 您可以指定子字串是否包含空的陣列元素。</summary>
      <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空陣列，或 <see langword="null" />。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列項目，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列項目。</param>
      <returns>陣列，其項目包含了這個字串中由 <paramref name="separator" /> 內的一或多個字串所分隔的子字串。 如需詳細資訊，請參閱＜備註＞一節。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是其中一個 <see cref="T:System.StringSplitOptions" /> 值。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.Char)">
      <param name="value" />
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>判斷這個字串執行個體的開頭是否符合指定的字串。</summary>
      <param name="value">要比較的字串。</param>
      <returns>如果 <see langword="true" /> 符合這個字串的開頭，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>判斷當使用指定之文化特性進行比較時，這個字串執行個體的開頭是否符合指定的字串。</summary>
      <param name="value">要比較的字串。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示在比較時忽略大小寫，否則為 <see langword="false" />。</param>
      <param name="culture">判斷如何比較此字串和 <paramref name="value" /> 的文化特性資訊。 如果 <paramref name="culture" /> 是 <see langword="null" />，則會使用目前的文化特性。</param>
      <returns>如果 <see langword="true" /> 參數符合這個字串的開頭，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>判斷當使用指定之比較選項進行比較時，這個字串執行個體的開頭是否符合指定的字串。</summary>
      <param name="value">要比較的字串。</param>
      <param name="comparisonType">列舉值之一，指定這個字串和 <paramref name="value" /> 的比較方式。</param>
      <returns>如果這個執行個體以 <see langword="true" /> 為開頭，則為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>從這個執行個體擷取子字串。 子字串會在指定的字元位置開始並繼續到字串的結尾。</summary>
      <param name="startIndex">這個執行個體中子字串之以零為起始的起始字元位置。</param>
      <returns>與這個執行個體中從 <paramref name="startIndex" /> 開始之子字串相等的字串；如果 <see cref="F:System.String.Empty" /> 等於這個執行個體的長度，則為 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於此執行個體的長度。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>從這個執行個體擷取子字串。 子字串起始於指定的字元位置，並且具有指定的長度。</summary>
      <param name="startIndex">這個執行個體中子字串之以零為起始的起始字元位置。</param>
      <param name="length">子字串中的字元數。</param>
      <returns>與長度為 <paramref name="length" /> 且在這個執行個體中從 <paramref name="startIndex" /> 開始之子字串相等的字串；如果 <see cref="F:System.String.Empty" /> 等於這個執行個體的長度且 <paramref name="startIndex" /> 為零，則為 <paramref name="length" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 加上 <paramref name="length" /> 表示不在此執行個體中的位置。  
-或- 
 <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回列舉值，可逐一查看目前的 <see cref="T:System.String" /> 物件。</summary>
      <returns>可用來逐一查看目前字串的列舉程式。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前字串的值為 <see langword="true" />，則為 <see cref="F:System.Boolean.TrueString" />；如果目前字串的值為 <see langword="false" />，則為 <see cref="F:System.Boolean.FalseString" />。</returns>
      <exception cref="T:System.FormatException">目前字串的值不是 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值是大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件中位於索引 0 的字元。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值是小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值是小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值是大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值是大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">傳回的物件之類型。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">無法將目前 <see cref="T:System.String" /> 物件的值轉換成 <paramref name="type" /> 參數所指定的類型。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值是大於 <see cref="F:System.UInt16.MaxValue" /> 或小於 <see cref="F:System.UInt16.MinValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值是大於 <see cref="F:System.UInt32.MaxValue" /> 或小於 <see cref="F:System.UInt32.MinValue" /> 的數字</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>將這個執行個體中的字元複製到 Unicode 字元陣列中。</summary>
      <returns>Unicode 字元陣列，其項目是這個執行個體的個別字元。 如果這個執行個體是空字串，則傳回的陣列會是空的且長度為零。</returns>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>將這個執行個體的指定子字串字元複製到 Unicode 字元陣列。</summary>
      <param name="startIndex">這個執行個體中的子字串開始位置。</param>
      <param name="length">這個執行個體中的子字串長度。</param>
      <returns>Unicode 字元陣列，其項目是從 <paramref name="length" /> 字元位置起始的這個執行個體中的 <paramref name="startIndex" /> 字元數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 加上 <paramref name="length" /> 大於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.String.ToLower">
      <summary>傳回此字串轉換為小寫的版本。</summary>
      <returns>小寫的字串。</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>使用指定之文化特性的大小寫規則，傳回這個字串轉換成小寫的複本。</summary>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <returns>目前字串的小寫對應項。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>使用不因文化特性而異的大小寫規則，傳回轉換成小寫的這個 <see cref="T:System.String" /> 物件之複本。</summary>
      <returns>目前字串的小寫對應項。</returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>傳回這個 <see cref="T:System.String" /> 執行個體；不會實際執行轉換。</summary>
      <returns>目前的字串。</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>傳回這個 <see cref="T:System.String" /> 執行個體；不會實際執行轉換。</summary>
      <param name="provider">(保留) 物件，提供特定文化特性格式資訊。</param>
      <returns>目前的字串。</returns>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>傳回此字串轉換為大寫的版本。</summary>
      <returns>目前字串的大寫對應項。</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>使用指定之文化特性的大小寫規則，傳回這個字串轉換成大寫的複本。</summary>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <returns>目前字串的大寫對應項。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>使用不因文化特性而異的大小寫規則，傳回轉換成大寫的這個 <see cref="T:System.String" /> 物件之複本。</summary>
      <returns>目前字串的大寫對應項。</returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除所有的開頭和結尾空白字元。</summary>
      <returns>從目前字串的開頭和結尾移除所有空白字元後，所保留下來的字串。 如果在目前的執行個體中無法修剪任何字元，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.String.Trim(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除陣列中指定之一組字元的所有開頭和結尾指定項目。</summary>
      <param name="trimChars">要移除的 Unicode 字元陣列或 <see langword="null" />。</param>
      <returns>從目前的字串開頭和結尾處移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。 如果 <paramref name="trimChars" /> 是 <see langword="null" /> 或空陣列，則反而會移除空白字元。 如果在目前的執行個體中無法修剪任何字元，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.String.TrimEnd" />
    <member name="M:System.String.TrimEnd(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除陣列中指定之一組字元的所有結尾指定項目。</summary>
      <param name="trimChars">要移除的 Unicode 字元陣列或 <see langword="null" />。</param>
      <returns>從目前的字串結尾處移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。 如果 <paramref name="trimChars" /> 是 <see langword="null" /> 或空陣列，則反而會移除 Unicode 空白字元。 如果在目前的執行個體中無法修剪任何字元，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.String.TrimStart" />
    <member name="M:System.String.TrimStart(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>從目前的 <see cref="T:System.String" /> 物件中移除陣列中指定之一組字元的所有開頭指定項目。</summary>
      <param name="trimChars">要移除的 Unicode 字元陣列或 <see langword="null" />。</param>
      <returns>從目前的字串開頭處移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。 如果 <paramref name="trimChars" /> 是 <see langword="null" /> 或空陣列，則反而會移除空白字元。</returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>指定 <see cref="M:System.String.Compare(System.String,System.String)" /> 和 <see cref="M:System.String.Equals(System.Object)" /> 方法的特定多載所要使用的文化特性、大小寫和排序規則。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>比較字串時，使用區分文化特性的排序規則和目前的文化特性。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>比較字串時，使用區分文化特性的排序規則和目前的文化特性，並且忽略要比較之字串的大小寫。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>比較字串時，使用區分文化特性的排序規則，並且不因文化特性而異。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>比較字串時，使用區分文化特性的排序規則、不因文化特性而異，並且忽略要比較之字串的大小寫。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>比較字串時，使用序數 (二進位) 排序規則。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>比較字串時，使用序數 (二進位) 排序規則，並且忽略要比較之字串的大小寫。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>指定適用的 <see cref="Overload:System.String.Split" /> 方法多載是否會加入或省略傳回值中的空子字串。</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>此傳回值會加入包含了空字串的陣列元素。</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>此傳回值不會加入包含了空字串的陣列元素。</summary>
    </member>
    <member name="T:System.SystemException">
      <summary>做為系統例外狀況命名空間的基底類別。</summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>初始化 <see cref="T:System.SystemException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.SystemException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.SystemException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.SystemException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>將編碼的位元組序列轉換成一組字元。</summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Decoder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>將已編碼位元組的緩衝區轉換成 UTF-16 編碼的字元，並將結果儲存在另一個緩衝區。</summary>
      <param name="bytes">緩衝區位址，包含要轉換的位元組序列。</param>
      <param name="byteCount">
        <paramref name="bytes" /> 中要轉換的位元組數。</param>
      <param name="chars">緩衝區位址，用來儲存已轉換的字元。</param>
      <param name="charCount">
        <paramref name="chars" /> 中要用於轉換的字元數上限。</param>
      <param name="flush">若表示不進行任何其他資料轉換即為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <param name="bytesUsed">傳回此方法時，包含轉換所產生的位元組數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="charsUsed">傳回此方法時，包含來自 <paramref name="chars" /> 為轉換所使用的位元組數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">傳回此方法時，若所有 <paramref name="byteCount" /> 指定的字元皆已轉換則包含 <see langword="true" />；否則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">輸出緩衝區太小而無法包含任何已轉換的輸入。 輸出緩衝區應大於或等於 <see cref="Overload:System.Text.Decoder.GetCharCount" /> 方法所指出的大小。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>將已編碼位元組的陣列轉換成 UTF-16 編碼的字元，並將結果儲存在另一個字元陣列中。</summary>
      <param name="bytes">要轉換的位元組陣列。</param>
      <param name="byteIndex">
        <paramref name="bytes" /> 中要轉換的第一個項目。</param>
      <param name="byteCount">要轉換的 <paramref name="bytes" /> 項目數目。</param>
      <param name="chars">要儲存已轉換字元的陣列。</param>
      <param name="charIndex">
        <paramref name="chars" /> 中的第一個項目，其為儲存資料所在。</param>
      <param name="charCount">轉換中要使用的 <paramref name="chars" /> 之項目數上限。</param>
      <param name="flush">
        <see langword="true" /> 表示不轉換任何其他資料，否則為 <see langword="false" />。</param>
      <param name="bytesUsed">傳回此方法時，包含轉換所使用的位元組數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="charsUsed">傳回此方法時，包含轉換所產生之來自 <paramref name="chars" /> 的字元數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">傳回此方法時，若所有 <paramref name="byteCount" /> 指定的字元皆已轉換則包含 <see langword="true" />；否則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、 <paramref name="charCount" />、 <paramref name="byteIndex" />或 <paramref name="byteCount" /> 小於零。  
-或- 
<paramref name="chars" /> - <paramref name="charIndex" /> 的長度小於 <paramref name="charCount" />。  
-或- 
<paramref name="bytes" /> - <paramref name="byteIndex" /> 的長度小於 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">輸出緩衝區太小而無法包含任何已轉換的輸入。 輸出緩衝區應大於或等於 <see cref="Overload:System.Text.Decoder.GetCharCount" /> 方法所指出的大小。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <param name="bytes" />
      <param name="chars" />
      <param name="flush" />
      <param name="bytesUsed" />
      <param name="charsUsed" />
      <param name="completed" />
    </member>
    <member name="P:System.Text.Decoder.Fallback">
      <summary>取得或設定目前 <see cref="T:System.Text.DecoderFallback" /> 物件的 <see cref="T:System.Text.Decoder" /> 物件。</summary>
      <returns>
        <see cref="T:System.Text.DecoderFallback" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">設定作業中的值是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentException">設定作業中無法指派新的值，因為目前的 <see cref="T:System.Text.DecoderFallbackBuffer" /> 物件包含尚未解碼的資料。</exception>
    </member>
    <member name="P:System.Text.Decoder.FallbackBuffer">
      <summary>取得與目前 <see cref="T:System.Text.DecoderFallbackBuffer" /> 物件關聯的 <see cref="T:System.Text.Decoder" /> 物件。</summary>
      <returns>
        <see cref="T:System.Text.DecoderFallbackBuffer" /> 物件。</returns>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組指標開始，解碼位元組序列所產生的字元數目。 參數，指出計算後是否要清除解碼器的內部狀態。</summary>
      <param name="bytes">要解碼的第一個位元組指標。</param>
      <param name="count">要解碼的位元組數。</param>
      <param name="flush">
        <see langword="true" /> 模擬在計算後清除編碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>解碼指定的位元組以及內部緩衝區中任何位元組序列所產生的字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 是 <see langword="null" /> (在 Visual Basic .NET 中為 <see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組陣列解碼位元組序列所產生的字元數目。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第一個位元組索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <returns>解碼指定的位元組以及內部緩衝區中任何位元組序列所產生的字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組陣列解碼位元組序列所產生的字元數目。 參數，指出計算後是否要清除解碼器的內部狀態。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第一個位元組索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <param name="flush">
        <see langword="true" /> 模擬在計算後清除編碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>解碼指定的位元組以及內部緩衝區中任何位元組序列所產生的字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <param name="bytes" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，會將由指定位元組指標開始的位元組序列以及內部緩衝區內的任何位元組，解碼成一組字元 (會從指定的字元指標開始存放這些字元)。 參數會指示，在轉換之後是否要清除解碼器的內部狀態。</summary>
      <param name="bytes">要解碼的第一個位元組指標。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">開始寫入產生的一組字元之位置指標。</param>
      <param name="charCount">要寫入的最大字元數。</param>
      <param name="flush">
        <see langword="true" /> 表示要在轉換之後清除解碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>
        <paramref name="chars" /> 參數所指示位置上寫入的實際字元數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
-或- 
 <paramref name="chars" /> 為 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> 小於結果字元數。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列以及內部緩衝區內的任何位元組，解碼成指定的字元陣列。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第一個位元組索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入產生的一組字元之索引。</param>
      <returns>寫入 <paramref name="chars" /> 的實際字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
-或- 
 <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。  
-或- 
 <paramref name="byteindex" /> 與 <paramref name="byteCount" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
-或- 
 <paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="chars" /> 到陣列結尾處，<paramref name="charIndex" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列以及內部緩衝區內的任何位元組，解碼成指定的字元陣列。 參數會指示，在轉換之後是否要清除解碼器的內部狀態。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第一個位元組索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入產生的一組字元之索引。</param>
      <param name="flush">
        <see langword="true" /> 表示要在轉換之後清除解碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>實際寫入 <paramref name="chars" /> 參數的字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
-或- 
 <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。  
-或- 
 <paramref name="byteindex" /> 與 <paramref name="byteCount" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
-或- 
 <paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="chars" /> 到陣列結尾處，<paramref name="charIndex" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Decoder.Fallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean)">
      <param name="bytes" />
      <param name="chars" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>在衍生類別中覆寫時，將解碼器設定回其初始狀態。</summary>
    </member>
    <member name="T:System.Text.DecoderExceptionFallback">
      <summary>針對無法轉換為輸入字元的編碼輸入位元組序列，提供失敗處理機制 (稱為後援)。 後援會擲回例外狀況，而不會將輸入位元組序列解碼。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderExceptionFallback" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
      <summary>傳回解碼器後援緩衝區，它會在無法將位元組序列轉換成字元時擲回例外狀況。</summary>
      <returns>在無法將位元組序列解碼時擲回例外狀況的解碼器後援緩衝區。</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
      <summary>指示目前的 <see cref="T:System.Text.DecoderExceptionFallback" /> 物件和指定的物件是否相等。</summary>
      <param name="value">衍生自 <see cref="T:System.Text.DecoderExceptionFallback" /> 類別的物件。</param>
      <returns>如果 <paramref name="value" /> 不是 <see langword="true" />，且為 <see cref="T:System.Text.DecoderExceptionFallback" /> 物件，則為 <see langword="null" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.GetHashCode">
      <summary>擷取這個執行個體的雜湊程式碼。</summary>
      <returns>傳回值永遠都是相同的任意值，且沒有特殊的意義。</returns>
    </member>
    <member name="P:System.Text.DecoderExceptionFallback.MaxCharCount">
      <summary>取得這個執行個體可以傳回的最大字元數。</summary>
      <returns>傳回值永遠是零。</returns>
    </member>
    <member name="T:System.Text.DecoderExceptionFallbackBuffer">
      <summary>當編碼的輸入位元組序列無法轉換成已解碼的輸出字元時，會擲回 <see cref="T:System.Text.DecoderFallbackException" />。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>在無法解碼輸入位元組序列時，會擲回 <see cref="T:System.Text.DecoderFallbackException" />。 不會使用名義上的傳回值。</summary>
      <param name="bytesUnknown">位元組的輸入陣列。</param>
      <param name="index">輸入中的位元組索引位置。</param>
      <returns>無。 因為 <see cref="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)" /> 方法永遠都會擲回例外狀況，所以不會傳回任何值。  
名義上的傳回值為 <see langword="true" />。 因為這個方法會實作抽象方法，所以會定義傳回值 (雖然此值不會變更)。</returns>
      <exception cref="T:System.Text.DecoderFallbackException">此方法永遠都會擲回例外狀況，報告無法解碼的輸入位元組的值和索引位置。</exception>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar">
      <summary>擷取例外狀況資料緩衝區中的下一個字元。</summary>
      <returns>傳回值永遠都會是 Unicode 字元 NULL (U+0000)。  
 因為這個方法會實作抽象方法，所以會定義傳回值 (雖然此值不會變更)。</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.MovePrevious">
      <summary>使得 <see cref="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar" /> 的下一個呼叫存取在目前位置之前的例外狀況資料緩衝區字元位置。</summary>
      <returns>傳回值永遠都會是 <see langword="false" />。  
因為這個方法會實作抽象方法，所以會定義傳回值 (雖然此值不會變更)。</returns>
    </member>
    <member name="P:System.Text.DecoderExceptionFallbackBuffer.Remaining">
      <summary>取得在目前的 <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> 物件中仍要處理的字元數。</summary>
      <returns>傳回值永遠是零。  
 因為這個方法會實作抽象方法，所以會定義傳回值 (雖然此值不會變更)。</returns>
    </member>
    <member name="T:System.Text.DecoderFallback">
      <summary>針對無法轉換為輸出字元的編碼輸入位元組序列，提供失敗處理機制 (稱為後援)。</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallback" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.CreateFallbackBuffer">
      <summary>在衍生類別中覆寫時，初始化 <see cref="T:System.Text.DecoderFallbackBuffer" /> 類別的新執行個體。</summary>
      <returns>提供解碼器後援緩衝區的物件。</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ExceptionFallback">
      <summary>取得物件，此物件會在無法對輸入位元組序列解碼時，擲回例外狀況。</summary>
      <returns>衍生自 <see cref="T:System.Text.DecoderFallback" /> 類別的型別。 預設值為 <see cref="T:System.Text.DecoderExceptionFallback" /> 物件。</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.MaxCharCount">
      <summary>在衍生類別中覆寫時，取得目前的 <see cref="T:System.Text.DecoderFallback" /> 物件可以傳回的最大字元數。</summary>
      <returns>目前的 <see cref="T:System.Text.DecoderFallback" /> 物件可以傳回的最大字元數。</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ReplacementFallback">
      <summary>取得物件，此物件會產出替代字串，以取代無法解碼的輸入位元組序列。</summary>
      <returns>衍生自 <see cref="T:System.Text.DecoderFallback" /> 類別的型別。 預設值為 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件，此物件會發出「問號」字元 ("?"，U+003F)，以取代未知的位元組序列。</returns>
    </member>
    <member name="T:System.Text.DecoderFallbackBuffer">
      <summary>提供緩衝區，允許後援處理常式在無法解碼輸入位元組序列時，將替代字串傳回至解碼器。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackBuffer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>在衍生類別中覆寫時，預備後援緩衝區來處理指定的輸入位元組序列。</summary>
      <param name="bytesUnknown">位元組的輸入陣列。</param>
      <param name="index">
        <paramref name="bytesUnknown" /> 中的位元組索引位置。</param>
      <returns>如果後援緩衝區可以處理 <paramref name="bytesUnknown" />，則為 <see langword="true" />；如果後援緩衝區會忽略 <paramref name="bytesUnknown" />，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.GetNextChar">
      <summary>在衍生類別中覆寫時，擷取後援緩衝區中的下一個字元。</summary>
      <returns>後援緩衝區中的下一個字元。</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.MovePrevious">
      <summary>在衍生類別中覆寫時，會使 <see cref="M:System.Text.DecoderFallbackBuffer.GetNextChar" /> 方法的下一個呼叫存取在目前字元位置之前的資料緩衝區字元位置。</summary>
      <returns>如果 <see cref="M:System.Text.DecoderFallbackBuffer.MovePrevious" /> 作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackBuffer.Remaining">
      <summary>在衍生類別中覆寫時，於目前的 <see cref="T:System.Text.DecoderFallbackBuffer" /> 物件中取得仍要處理的字元數。</summary>
      <returns>目前的後援緩衝區中尚未處理的字元數。</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Reset">
      <summary>初始化與後援緩衝區有關的所有資料和狀態資訊。</summary>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>當解碼器後援作業失敗時，所擲回的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。 參數會指定錯誤訊息。</summary>
      <param name="message">錯誤訊息。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。 參數會指定錯誤訊息、所要解碼的位元組陣列，以及無法解碼的位元組索引。</summary>
      <param name="message">錯誤訊息。</param>
      <param name="bytesUnknown">輸入位元組陣列。</param>
      <param name="index">
        <paramref name="bytesUnknown" /> 中無法解碼的位元組的索引位置。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。 參數會指定錯誤訊息，以及造成此例外狀況的內部例外狀況。</summary>
      <param name="message">錯誤訊息。</param>
      <param name="innerException">造成此例外狀況的例外狀況。</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>取得造成例外狀況的輸入位元組序列。</summary>
      <returns>無法解碼的輸入位元組陣列。</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>取得位元組的輸入位元組序列中造成例外狀況的索引位置。</summary>
      <returns>位元組的輸入位元組陣列中無法解碼的索引位置。 索引位置以零起始。</returns>
    </member>
    <member name="T:System.Text.DecoderReplacementFallback">
      <summary>針對無法轉換為輸出字元的編碼輸入位元組序列，提供失敗處理機制 (稱為後援)。 此後援會發出使用者指定的取代字串，而非已解碼的輸入位元組序列。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderReplacementFallback" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor(System.String)">
      <summary>使用指定的取代字串，初始化 <see cref="T:System.Text.DecoderReplacementFallback" /> 類別的新執行個體。</summary>
      <param name="replacement">在解碼作業中所發出的字串，此字串是用來取代無法解碼的輸入位元組序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> 包含無效的 Surrogate 字組。 換句話說，Surrogate 字組不是由一個高 Surrogate 元件 (後面再接著一個低 Surrogate 元件) 所組成。</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.CreateFallbackBuffer">
      <summary>建立 <see cref="T:System.Text.DecoderFallbackBuffer" /> 物件，其使用此 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件的取代字串初始化。</summary>
      <returns>
        <see cref="T:System.Text.DecoderFallbackBuffer" /> 物件，可指定要使用的字串，而非原始的解碼作業輸入。</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.DefaultString">
      <summary>取得取代字串，此字串為 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件的值。</summary>
      <returns>所發出的替代字串，用來取代無法解碼的輸入位元組序列。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.Equals(System.Object)">
      <summary>指示指定物件的值是否等於 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件。</summary>
      <param name="value">
        <see cref="T:System.Text.DecoderReplacementFallback" /> 物件。</param>
      <returns>如果 <paramref name="value" /> 為 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件，而此物件的 <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> 屬性等於目前 <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> 物件的 <see cref="T:System.Text.DecoderReplacementFallback" /> 屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.GetHashCode">
      <summary>擷取 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件值的雜湊程式碼。</summary>
      <returns>物件值的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.MaxCharCount">
      <summary>取得 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件之取代字串中的字元數。</summary>
      <returns>字串中所發出的字元數，用來取代無法解碼的位元組序列。也就是由 <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> 屬性所傳回的字串長度。</returns>
    </member>
    <member name="T:System.Text.DecoderReplacementFallbackBuffer">
      <summary>表示在無法解碼原始輸入位元組序列時，所發出的替代輸出字串。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.#ctor(System.Text.DecoderReplacementFallback)">
      <summary>使用 <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> 物件的值，初始化 <see cref="T:System.Text.DecoderReplacementFallback" /> 類別的新執行個體。</summary>
      <param name="fallback">包含取代字串的 <see cref="T:System.Text.DecoderReplacementFallback" /> 物件。</param>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>預備取代後援緩衝區來使用目前的取代字串。</summary>
      <param name="bytesUnknown">輸入位元組序列。 除非已擲回例外狀況，否則會此忽略參數。</param>
      <param name="index">
        <paramref name="bytesUnknown" /> 中的位元組索引位置。 此作業中會忽略此參數。</param>
      <returns>如果取代字串不是空的，則為 <see langword="true" />；如果取代字串是空的，則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">在 <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> 方法讀取取代後援緩衝區中的所有字元之前，會再次呼叫這個方法。</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar">
      <summary>擷取取代後援緩衝區中的下一個字元。</summary>
      <returns>取代後援緩衝區中的下一個字元。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious">
      <summary>使得下一個 <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> 呼叫存取在取代後援緩衝區中，目前字元位置之前的字元位置。</summary>
      <returns>如果 <see cref="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious" /> 作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallbackBuffer.Remaining">
      <summary>取得在取代後援緩衝區中仍然要處理的字元數。</summary>
      <returns>取代後援緩衝區中尚未處理的字元數。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Reset">
      <summary>初始化 <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> 物件中的所有內部狀態資訊和資料。</summary>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>將一組字元轉換成位元組序列。</summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>將 Unicode 字元的緩衝區轉換成編碼的位元組序列，並將結果儲存在另一個緩衝區。</summary>
      <param name="chars">要轉換的 UTF-16 編碼字元字串位址。</param>
      <param name="charCount">
        <paramref name="chars" /> 中要轉換的字元數。</param>
      <param name="bytes">緩衝區位址，用來儲存已轉換的位元組。</param>
      <param name="byteCount">
        <paramref name="bytes" /> 中要用於轉換的位元數上限。</param>
      <param name="flush">若表示不進行任何其他資料轉換即為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <param name="charsUsed">傳回此方法時，包含來自 <paramref name="chars" /> 為轉換所使用的位元組數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="bytesUsed">傳回此方法時，包含轉換所使用的位元組數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">傳回此方法時，若所有 <paramref name="charCount" /> 指定的字元皆已轉換則包含 <see langword="true" />；否則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">輸出緩衝區太小而無法包含任何已轉換的輸入。 輸出緩衝區應大於或等於 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法所指出的大小。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Encoder.Fallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>將 Unicode 字元的陣列轉換成編碼的位元組序列，並將結果儲存在位元組陣列中。</summary>
      <param name="chars">要轉換的字元陣列。</param>
      <param name="charIndex">
        <paramref name="chars" /> 中要轉換的第一個項目。</param>
      <param name="charCount">要轉換的 <paramref name="chars" /> 項目數目。</param>
      <param name="bytes">儲存位元組儲存所在的陣列。</param>
      <param name="byteIndex">
        <paramref name="bytes" /> 中的第一個項目，其為儲存資料所在。</param>
      <param name="byteCount">轉換中要使用的 <paramref name="bytes" /> 之項目數上限。</param>
      <param name="flush">若表示不進行任何其他資料轉換即為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <param name="charsUsed">傳回此方法時，包含來自 <paramref name="chars" /> 為轉換所使用的位元組數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="bytesUsed">傳回此方法時，包含轉換所產生的位元組數目。 這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">傳回此方法時，若所有 <paramref name="charCount" /> 指定的字元皆已轉換則包含 <see langword="true" />；否則為 <see langword="false" />。 這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、 <paramref name="charCount" />、 <paramref name="byteIndex" />或 <paramref name="byteCount" /> 小於零。  
-或- 
<paramref name="chars" /> - <paramref name="charIndex" /> 的長度小於 <paramref name="charCount" />。  
-或- 
<paramref name="bytes" /> - <paramref name="byteIndex" /> 的長度小於 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">輸出緩衝區太小而無法包含任何已轉換的輸入。 輸出緩衝區應大於或等於 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法所指出的大小。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Encoder.Fallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <param name="chars" />
      <param name="bytes" />
      <param name="flush" />
      <param name="charsUsed" />
      <param name="bytesUsed" />
      <param name="completed" />
    </member>
    <member name="P:System.Text.Encoder.Fallback">
      <summary>取得或設定目前 <see cref="T:System.Text.EncoderFallback" /> 物件的 <see cref="T:System.Text.Encoder" /> 物件。</summary>
      <returns>
        <see cref="T:System.Text.EncoderFallback" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">設定作業中的值是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentException">設定作業中無法指派新的值，因為目前的 <see cref="T:System.Text.EncoderFallbackBuffer" /> 物件包含尚未編碼的資料。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Encoder.Fallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="P:System.Text.Encoder.FallbackBuffer">
      <summary>取得與目前 <see cref="T:System.Text.EncoderFallbackBuffer" /> 物件關聯的 <see cref="T:System.Text.Encoder" /> 物件。</summary>
      <returns>
        <see cref="T:System.Text.EncoderFallbackBuffer" /> 物件。</returns>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，計算從指定的字元指標開始，編碼一組字元所產生的位元組數目。 參數會指示，在計算之後是否要清除編碼器的內部狀態。</summary>
      <param name="chars">要編碼的第一個字元指標。</param>
      <param name="count">要編碼的字元數。</param>
      <param name="flush">
        <see langword="true" /> 模擬在計算後清除編碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>編碼指定的字元及內部緩衝區內任何字元所產生的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 是 <see langword="null" /> (在 Visual Basic .NET 中為 <see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Encoder.Fallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，計算從指定的字元陣列編碼一組字元所產生的位元組數目。 參數會指示，在計算之後是否要清除編碼器的內部狀態。</summary>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第一個字元索引。</param>
      <param name="count">要編碼的字元數。</param>
      <param name="flush">
        <see langword="true" /> 模擬在計算後清除編碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>編碼指定的字元及內部緩衝區內任何字元所產生的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Encoder.Fallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.ReadOnlySpan{System.Char},System.Boolean)">
      <param name="chars" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，將以指定字元指標開始的一組字元以及內部緩衝區內的任何字元，編碼成位元組序列 (會從指定的位元組指標開始存放此序列)。 參數會指示，在轉換之後是否要清除編碼器的內部狀態。</summary>
      <param name="chars">要編碼的第一個字元指標。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
      <param name="byteCount">寫入的最大位元組數。</param>
      <param name="flush">
        <see langword="true" /> 表示要在轉換之後清除編碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>
        <paramref name="bytes" /> 參數所指示位置上寫入的實際位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
-或- 
 <paramref name="bytes" /> 為 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> 小於結果位元組數。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Encoder.Fallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元以及內部緩衝區內的任何字元，編碼成指定的位元組陣列。 參數會指示，在轉換之後是否要清除編碼器的內部狀態。</summary>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="charIndex">要編碼的第一個字元索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
      <param name="flush">
        <see langword="true" /> 表示要在轉換之後清除編碼器的內部狀態，否則為 <see langword="false" />。</param>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 是 <see langword="null" /> (<see langword="Nothing" />)。  
-或- 
 <paramref name="bytes" /> 是 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
-或- 
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
-或- 
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需更完整的說明，請參閱 .NET Framework 中的字元編碼方式) 
-和- 
 <see cref="P:System.Text.Encoder.Fallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean)">
      <param name="chars" />
      <param name="bytes" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Encoder.Reset">
      <summary>在衍生類別中覆寫時，將編碼器設定回其初始狀態。</summary>
    </member>
    <member name="T:System.Text.EncoderExceptionFallback">
      <summary>針對無法轉換為輸出位元組序列的輸入字元，提供失敗處理機制 (稱為後援)。 如果輸入字元無法轉換成輸出位元組序列，後援會擲回例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderExceptionFallback" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
      <summary>傳回編碼器後援緩衝區，它會在無法將字元序列轉換成位元組序列時擲回例外狀況。</summary>
      <returns>在無法將字元序列編碼時擲回例外狀況的編碼器後援緩衝區。</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
      <summary>指示目前的 <see cref="T:System.Text.EncoderExceptionFallback" /> 物件和指定的物件是否相等。</summary>
      <param name="value">衍生自 <see cref="T:System.Text.EncoderExceptionFallback" /> 類別的物件。</param>
      <returns>如果 <paramref name="value" /> 不是 <see langword="true" /> (Visual Basic .NET 中的 <see langword="null" />)，且為 <see cref="T:System.Text.EncoderExceptionFallback" /> 物件，則為 <see langword="Nothing" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.GetHashCode">
      <summary>擷取這個執行個體的雜湊程式碼。</summary>
      <returns>傳回值永遠都是相同的任意值，且沒有特殊的意義。</returns>
    </member>
    <member name="P:System.Text.EncoderExceptionFallback.MaxCharCount">
      <summary>取得這個執行個體可以傳回的最大字元數。</summary>
      <returns>傳回值永遠是零。</returns>
    </member>
    <member name="T:System.Text.EncoderExceptionFallbackBuffer">
      <summary>當輸入字元無法轉換成編碼的輸出位元組序列時，會擲回 <see cref="T:System.Text.EncoderFallbackException" />。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>因為無法編碼輸入字元，所以擲回例外狀況。 參數在輸入中會指定 Surrogate 字組的值和索引位置，且不會使用名義上的傳回值。</summary>
      <param name="charUnknownHigh">輸入字組的高 Surrogate。</param>
      <param name="charUnknownLow">輸入字組的低 Surrogate。</param>
      <param name="index">輸入緩衝區中 Surrogate 字組的索引位置。</param>
      <returns>無。 因為 <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" /> 方法永遠都會擲回例外狀況，所以不會傳回任何值。</returns>
      <exception cref="T:System.Text.EncoderFallbackException">無法編碼由 <paramref name="charUnknownHigh" /> 和 <paramref name="charUnknownLow" /> 表示的字元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charUnknownHigh" /> 或 <paramref name="charUnknownLow" /> 是無效的。 <paramref name="charUnknownHigh" /> 未在 U+D800 和 U+DBFF 之間 (含頭尾)，或是 <paramref name="charUnknownLow" /> 未在 U+DC00 和 U+DFFF 之間 (含頭尾)。</exception>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>因為無法編碼輸入字元，所以擲回例外狀況。 參數會針對無法轉換的字元指定值和索引位置。</summary>
      <param name="charUnknown">輸入字元。</param>
      <param name="index">輸入緩衝區中字元的索引位置。</param>
      <returns>無。 因為 <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)" /> 方法永遠都會擲回例外狀況，所以不會傳回任何值。</returns>
      <exception cref="T:System.Text.EncoderFallbackException">無法編碼 <paramref name="charUnknown" />。 此方法永遠都會擲回例外狀況，報告 <paramref name="charUnknown" /> 和 <paramref name="index" /> 參數的值。</exception>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar">
      <summary>擷取例外狀況後援緩衝區中的下一個字元。</summary>
      <returns>傳回值永遠都會是 Unicode 字元 NULL (U+0000)。  
 因為這個方法會實作抽象方法，所以會定義傳回值 (雖然此值不會變更)。</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.MovePrevious">
      <summary>使得 <see cref="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar" /> 方法的下一個呼叫存取在目前位置之前的例外狀況資料緩衝區字元位置。</summary>
      <returns>傳回值永遠都會是 <see langword="false" />。  
因為這個方法會實作抽象方法，所以會定義傳回值 (雖然此值不會變更)。</returns>
    </member>
    <member name="P:System.Text.EncoderExceptionFallbackBuffer.Remaining">
      <summary>取得在目前的 <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> 物件中仍要處理的字元數。</summary>
      <returns>傳回值永遠是零。  
 因為這個方法會實作抽象方法，所以會定義傳回值 (雖然此值不會變更)。</returns>
    </member>
    <member name="T:System.Text.EncoderFallback">
      <summary>針對無法轉換為編碼輸出位元組序列的輸入字元，提供失敗處理機制 (稱為後援)。</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallback" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.CreateFallbackBuffer">
      <summary>在衍生類別中覆寫時，初始化 <see cref="T:System.Text.EncoderFallbackBuffer" /> 類別的新執行個體。</summary>
      <returns>提供編碼器後援緩衝區的物件。</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ExceptionFallback">
      <summary>取得物件，此物件會在無法編碼輸入字元時會擲回例外狀況。</summary>
      <returns>衍生自 <see cref="T:System.Text.EncoderFallback" /> 類別的型別。 預設值為 <see cref="T:System.Text.EncoderExceptionFallback" /> 物件。</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.MaxCharCount">
      <summary>在衍生類別中覆寫時，取得目前的 <see cref="T:System.Text.EncoderFallback" /> 物件可以傳回的最大字元數。</summary>
      <returns>目前的 <see cref="T:System.Text.EncoderFallback" /> 物件可以傳回的最大字元數。</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ReplacementFallback">
      <summary>取得物件，此物件會產出替代字串，以取代無法編碼的輸入字元。</summary>
      <returns>衍生自 <see cref="T:System.Text.EncoderFallback" /> 類別的型別。 預設值為 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件，此物件會將未知的輸入字元取代為「問號」字元 ("?"，U+003F)。</returns>
    </member>
    <member name="T:System.Text.EncoderFallbackBuffer">
      <summary>提供緩衝區，允許後援處理常式在無法編碼輸入字元時，將替代字串傳回至編碼器。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackBuffer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>在衍生類別中覆寫時，預備後援緩衝區來處理指定的 Surrogate 字組。</summary>
      <param name="charUnknownHigh">輸入字組的高 Surrogate。</param>
      <param name="charUnknownLow">輸入字組的低 Surrogate。</param>
      <param name="index">輸入緩衝區中 Surrogate 字組的索引位置。</param>
      <returns>如果後援緩衝區可以處理 <paramref name="charUnknownHigh" /> 和 <paramref name="charUnknownLow" /> 則為 <see langword="true" />，如果後援緩衝區會忽略 Surrogate 字組則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>在衍生類別中覆寫時，預備後援緩衝區來處理指定的輸入字元。</summary>
      <param name="charUnknown">輸入字元。</param>
      <param name="index">輸入緩衝區中字元的索引位置。</param>
      <returns>如果後援緩衝區可以處理 <paramref name="charUnknown" />，則為 <see langword="true" />；如果後援緩衝區會忽略 <paramref name="charUnknown" />，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.GetNextChar">
      <summary>在衍生類別中覆寫時，擷取後援緩衝區中的下一個字元。</summary>
      <returns>後援緩衝區中的下一個字元。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.MovePrevious">
      <summary>在衍生類別中覆寫時，會使 <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> 方法的下一個呼叫存取在目前字元位置之前的資料緩衝區字元位置。</summary>
      <returns>如果 <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> 作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackBuffer.Remaining">
      <summary>在衍生類別中覆寫時，於目前的 <see cref="T:System.Text.EncoderFallbackBuffer" /> 物件中取得仍要處理的字元數。</summary>
      <returns>目前的後援緩衝區中尚未處理的字元數。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Reset">
      <summary>初始化與後援緩衝區有關的所有資料和狀態資訊。</summary>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>當編碼器後援作業失敗時，所擲回的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 類別的新執行個體。 參數會指定錯誤訊息。</summary>
      <param name="message">錯誤訊息。</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 類別的新執行個體。 參數會指定錯誤訊息，以及造成此例外狀況的內部例外狀況。</summary>
      <param name="message">錯誤訊息。</param>
      <param name="innerException">造成此例外狀況的例外狀況。</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>取得造成例外狀況的輸入字元。</summary>
      <returns>無法編碼的字元。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>取得造成例外狀況之 Surrogate 字組的高元件字元。</summary>
      <returns>無法編碼之 Surrogate 字組的高元件字元。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>取得造成例外狀況之 Surrogate 字組的低元件字元。</summary>
      <returns>無法編碼之 Surrogate 字組的低元件字元。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>取得字元的輸入緩衝區中造成例外狀況的索引位置。</summary>
      <returns>取得無法編碼之字元輸入緩衝區中的索引位置。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackException.IsUnknownSurrogate">
      <summary>指示導致此例外狀況發生的輸入是否為 Surrogate 字組。</summary>
      <returns>如果輸入為 Surrogate 字組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.EncoderReplacementFallback">
      <summary>針對無法轉換為輸出位元組序列的輸入字元，提供失敗處理機制 (稱為後援)。 此後援會使用使用者指定的取代字串，以取代原始輸入字元。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderReplacementFallback" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor(System.String)">
      <summary>使用指定的取代字串，初始化 <see cref="T:System.Text.EncoderReplacementFallback" /> 類別的新執行個體。</summary>
      <param name="replacement">在編碼作業中轉換的字串，此字串是用來取代無法編碼的輸入字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> 包含無效的 Surrogate 字組。 換句話說，Surrogate 不是由一個高 Surrogate 元件 (後面再接著一個低 Surrogate 元件) 所組成。</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.CreateFallbackBuffer">
      <summary>建立 <see cref="T:System.Text.EncoderFallbackBuffer" /> 物件，其使用此 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件的取代字串初始化。</summary>
      <returns>
        <see cref="T:System.Text.EncoderFallbackBuffer" /> 物件等於此 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件。</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.DefaultString">
      <summary>取得取代字串，此字串為 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件的值。</summary>
      <returns>替代字串，用來取代無法編碼的輸入字元。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.Equals(System.Object)">
      <summary>指示指定物件的值是否等於 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件。</summary>
      <param name="value">
        <see cref="T:System.Text.EncoderReplacementFallback" /> 物件。</param>
      <returns>如果 <paramref name="value" /> 參數指定 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件，且該物件的取代字串等於此 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件的取代字串，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.GetHashCode">
      <summary>擷取 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件值的雜湊程式碼。</summary>
      <returns>物件值的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.MaxCharCount">
      <summary>取得 <see cref="T:System.Text.EncoderReplacementFallback" /> 物件之取代字串中的字元數。</summary>
      <returns>字串中用來取代無法編碼之輸入字元的字元數。</returns>
    </member>
    <member name="T:System.Text.EncoderReplacementFallbackBuffer">
      <summary>表示在無法為原始輸入字元編碼時，所使用的替代輸入字串。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.#ctor(System.Text.EncoderReplacementFallback)">
      <summary>使用 <see cref="T:System.Text.EncoderReplacementFallbackBuffer" /> 物件的值，初始化 <see cref="T:System.Text.EncoderReplacementFallback" /> 類別的新執行個體。</summary>
      <param name="fallback">
        <see cref="T:System.Text.EncoderReplacementFallback" /> 物件。</param>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>指示在無法編碼輸入 Surrogate 字組時，是否可以使用取代字串，以及是否可以忽略 Surrogate 字組。 參數會在輸入中指定 Surrogate 字組以及此字組的索引位置。</summary>
      <param name="charUnknownHigh">輸入字組的高 Surrogate。</param>
      <param name="charUnknownLow">輸入字組的低 Surrogate。</param>
      <param name="index">輸入緩衝區中 Surrogate 字組的索引位置。</param>
      <returns>如果取代字串不是空的，則為 <see langword="true" />；如果取代字串是空的，則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">在 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> 方法讀取所有取代字串字元之前，會再次呼叫這個方法。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charUnknownHigh" /> 的值小於 U+D800 或大於 U+D8FF。  
-或- 
<paramref name="charUnknownLow" /> 的值小於 U+DC00 或大於 U+DFFF。</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>預備取代後援緩衝區來使用目前的取代字串。</summary>
      <param name="charUnknown">輸入字元。 除非已擲回例外狀況，否則會在此作業中忽略參數。</param>
      <param name="index">輸入緩衝區中字元的索引位置。 此作業中會忽略此參數。</param>
      <returns>如果取代字串不是空的，則為 <see langword="true" />；如果取代字串是空的，則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">在 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> 方法讀取取代後援緩衝區中的所有字元之前，會再次呼叫這個方法。</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar">
      <summary>擷取取代後援緩衝區中的下一個字元。</summary>
      <returns>取代後援緩衝區中應用程式可以編碼的下一個 Unicode 字元。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious">
      <summary>使得 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> 方法的下一個呼叫存取在取代後援緩衝區中的目前字元位置之前的字元位置。</summary>
      <returns>如果 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious" /> 作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallbackBuffer.Remaining">
      <summary>取得在取代後援緩衝區中仍然要處理的字元數。</summary>
      <returns>取代後援緩衝區中尚未處理的字元數。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Reset">
      <summary>初始化這個 <see cref="T:System.Text.EncoderReplacementFallbackBuffer" /> 執行個體中的所有內部狀態資訊和資料。</summary>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>表示字元編碼方式。</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32)">
      <summary>初始化對應到指定字碼頁之 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
      <param name="codePage">慣用編碼方式的字碼頁識別項。  
 -或-  
 0，表示使用預設的編碼方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>使用指定的編碼器和解碼器後援策略，初始化對應到指定字碼頁之 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
      <param name="codePage">編碼方式字碼頁識別項。</param>
      <param name="encoderFallback">物件，該物件會在無法以目前編碼方式將字元編碼時提供錯誤處理程序。</param>
      <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> 小於零。</exception>
    </member>
    <member name="P:System.Text.Encoding.ASCII">
      <summary>取得 ASCII (7 位元) 字元集 (Character Set) 的編碼方式。</summary>
      <returns>ASCII (7 位元) 字元集的編碼方式。</returns>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>取得 UTF-16 格式的編碼方式，其使用由大到小的位元組順序。</summary>
      <returns>UTF-16 格式的編碼物件，這個格式使用位元組由大到小的位元組順序。</returns>
    </member>
    <member name="P:System.Text.Encoding.BodyName">
      <summary>在衍生類別中覆寫時，取得可以與郵件代理程式主體標籤一起使用的目前編碼方式名稱。</summary>
      <returns>可以與郵件代理程式主體標籤一起使用的目前 <see cref="T:System.Text.Encoding" /> 名稱。  
-或- 
如果無法使用目前的 <see cref="T:System.Text.Encoding" />，則為空字串 ("")。</returns>
    </member>
    <member name="M:System.Text.Encoding.Clone">
      <summary>在衍生類別中覆寫時，會建立目前 <see cref="T:System.Text.Encoding" /> 物件的淺層複本。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 的複本。</returns>
    </member>
    <member name="P:System.Text.Encoding.CodePage">
      <summary>在衍生類別中覆寫時，取得目前 <see cref="T:System.Text.Encoding" /> 的字碼頁識別項。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 的字碼頁識別項。</returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>將整個位元組陣列從一種編碼方式轉換成另一種編碼方式。</summary>
      <param name="srcEncoding">
        <paramref name="bytes" /> 的編碼格式。</param>
      <param name="dstEncoding">目標編碼格式。</param>
      <param name="bytes">要轉換的位元組。</param>
      <returns>
        <see cref="T:System.Byte" /> 類型的陣列，包含將 <paramref name="bytes" /> 從 <paramref name="srcEncoding" /> 轉換成 <paramref name="dstEncoding" /> 的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 為 <see langword="null" />。  
-或- 
 <paramref name="dstEncoding" /> 為 <see langword="null" />。  
-或- 
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 srcEncoding。 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 dstEncoding。 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組陣列中的某一位元組範圍由一種編碼方式轉換成另一種編碼方式。</summary>
      <param name="srcEncoding">來源陣列 <paramref name="bytes" /> 的編碼方式。</param>
      <param name="dstEncoding">輸出陣列的編碼方式。</param>
      <param name="bytes">要進行轉換的位元組陣列。</param>
      <param name="index">
        <paramref name="bytes" /> 中要轉換的第一個項目索引。</param>
      <param name="count">要轉換的位元組數。</param>
      <returns>
        <see cref="T:System.Byte" /> 類型的陣列，包含將 <paramref name="bytes" /> 中的某個位元組範圍從 <paramref name="srcEncoding" /> 轉換成 <paramref name="dstEncoding" /> 的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 為 <see langword="null" />。  
-或- 
 <paramref name="dstEncoding" /> 為 <see langword="null" />。  
-或- 
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 和 <paramref name="count" /> 不會指定位元組陣列中的有效範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 srcEncoding。 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 dstEncoding。 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="P:System.Text.Encoding.DecoderFallback">
      <summary>取得或設定目前 <see cref="T:System.Text.DecoderFallback" /> 物件的 <see cref="T:System.Text.Encoding" /> 物件。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 物件的解碼器後援物件。</returns>
      <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">無法在設定作業中指派值，因為目前的 <see cref="T:System.Text.Encoding" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Text.Encoding.Default">
      <summary>取得此 .NET 實作的預設編碼。</summary>
      <returns>這個 .NET 執行的預設編碼方式。</returns>
    </member>
    <member name="P:System.Text.Encoding.EncoderFallback">
      <summary>取得或設定目前 <see cref="T:System.Text.EncoderFallback" /> 物件的 <see cref="T:System.Text.Encoding" /> 物件。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 物件的解碼器後援物件。</returns>
      <exception cref="T:System.ArgumentNullException">在設定作業中，此值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">無法在設定作業中指派值，因為目前的 <see cref="T:System.Text.Encoding" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Text.Encoding.EncodingName">
      <summary>在衍生類別中覆寫時，取得目前編碼方式的人們可讀取 (Human-Readable) 的描述。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 的人們可讀取的描述。</returns>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 和目前的執行個體是否相等。</summary>
      <param name="value">要與目前執行個體比較的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.Encoding" /> 的執行個體，並且等於目前的執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的字元指標開始，編碼一組字元所產生的位元組數目。</summary>
      <param name="chars">要編碼的第一個字元指標。</param>
      <param name="count">要編碼的字元數。</param>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>在衍生類別中覆寫時，計算編碼指定字元陣列中所有字元所產生的位元組數目。</summary>
      <param name="chars">字元陣列，包含要編碼的字元。</param>
      <returns>編碼指定字元陣列中所有字元所產生的位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的字元陣列編碼一組字元所產生的位元組數目。</summary>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第一個字元索引。</param>
      <param name="count">要編碼的字元數。</param>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})">
      <param name="chars" />
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>在衍生類別中覆寫時，計算編碼指定的字串字元所產生的位元組數目。</summary>
      <param name="s">字串，包含要編碼的一組字元。</param>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)">
      <param name="s" />
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>在衍生類別中覆寫時，從指定字元指標開始將一組字元編碼成位元組序列 (會從指定的位元組指標開始存放這些位元組)。</summary>
      <param name="chars">要編碼的第一個字元指標。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
      <param name="byteCount">寫入的最大位元組數。</param>
      <returns>
        <paramref name="bytes" /> 參數所指示位置上寫入的實際位元組數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。  
-或- 
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> 小於結果位元組數。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的所有字元編碼成位元組序列。</summary>
      <param name="chars">字元陣列，包含要編碼的字元。</param>
      <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元編碼成位元組序列。</summary>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第一個字元索引。</param>
      <param name="count">要編碼的字元數。</param>
      <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="chars" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元編碼成指定的位元組陣列。</summary>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="charIndex">要編碼的第一個字元索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 <see langword="null" />。  
-或- 
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
-或- 
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
-或- 
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
      <param name="chars" />
      <param name="bytes" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>在衍生類別中覆寫時，將指定字串中的所有字元編碼成位元組序列。</summary>
      <param name="s">字串，包含要編碼的字元。</param>
      <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)">
      <param name="s" />
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定字串中的一組字元編碼成指定的位元組陣列。</summary>
      <param name="s">字串，包含要編碼的一組字元。</param>
      <param name="charIndex">要編碼的第一個字元索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入結果位元組序列的索引。</param>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。  
-或- 
 <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。  
-或- 
 <paramref name="charIndex" /> 與 <paramref name="charCount" /> 不代表 <paramref name="chars" /> 中有效的範圍。  
-或- 
 <paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="bytes" /> 到陣列結尾處，<paramref name="byteIndex" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組指標開始，解碼位元組序列所產生的字元數目。</summary>
      <param name="bytes">要解碼的第一個位元組指標。</param>
      <param name="count">要解碼的位元組數。</param>
      <returns>解碼指定位元組序列所產生的字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>在衍生類別中覆寫時，計算解碼指定位元組陣列中所有位元組所產生的字元數目。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <returns>解碼指定位元組序列所產生的字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組陣列解碼位元組序列所產生的字元數目。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第一個位元組索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <returns>解碼指定位元組序列所產生的字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})">
      <param name="bytes" />
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>在衍生類別中覆寫時，從指定位元組指標開始將位元組序列解碼成一組字元 (會從指定的字元指標開始存放這些字元)。</summary>
      <param name="bytes">要解碼的第一個位元組指標。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">開始寫入產生的一組字元之位置指標。</param>
      <param name="charCount">要寫入的最大字元數。</param>
      <returns>
        <paramref name="chars" /> 參數所指示位置上寫入的實際字元數目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。  
-或- 
 <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> 小於結果字元數。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的所有位元組解碼成一組字元。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <returns>字元陣列，包含解碼指定位元組序列的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成一組字元。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第一個位元組索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <returns>字元陣列，包含解碼指定位元組序列的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第一個位元組索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入產生的一組字元之索引。</param>
      <returns>寫入 <paramref name="chars" /> 的實際字元數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。  
-或- 
 <paramref name="chars" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。  
-或- 
 <paramref name="byteindex" /> 與 <paramref name="byteCount" /> 不代表 <paramref name="bytes" /> 中有效的範圍。  
-或- 
 <paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="chars" /> 到陣列結尾處，<paramref name="charIndex" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})">
      <param name="bytes" />
      <param name="chars" />
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>在衍生類別中覆寫時，取得會將編碼的位元組序列轉換成字元序列的解碼器。</summary>
      <returns>
        <see cref="T:System.Text.Decoder" />，會將編碼的位元組序列轉換成字元序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>在衍生類別中覆寫時，取得會將 Unicode 字元序列轉換成編碼的位元組序列的編碼器。</summary>
      <returns>
        <see cref="T:System.Text.Encoder" />，會將 Unicode 字元序列轉換成編碼的位元組序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
      <summary>傳回與指定字碼頁識別項相關聯的編碼方式。</summary>
      <param name="codepage">慣用編碼方式的字碼頁識別項。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「字碼頁」欄會列出可能值。  
-或- 
0 (零)，表示使用預設的編碼方式。</param>
      <returns>與指定字碼頁相關聯的編碼方式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> 小於零或大於 65535。</exception>
      <exception cref="T:System.ArgumentException">基礎的平台並不支援 <paramref name="codepage" />。</exception>
      <exception cref="T:System.NotSupportedException">基礎的平台並不支援 <paramref name="codepage" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>傳回與指定字碼頁識別項相關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
      <param name="codepage">慣用編碼方式的字碼頁識別項。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「字碼頁」欄會列出可能值。  
-或- 
0 (零)，表示使用預設的編碼方式。</param>
      <param name="encoderFallback">物件，該物件會在無法以目前編碼方式將字元編碼時提供錯誤處理程序。</param>
      <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
      <returns>與指定字碼頁相關聯的編碼方式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> 小於零或大於 65535。</exception>
      <exception cref="T:System.ArgumentException">基礎的平台並不支援 <paramref name="codepage" />。</exception>
      <exception cref="T:System.NotSupportedException">基礎的平台並不支援 <paramref name="codepage" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>傳回與指定字碼頁名稱相關聯的編碼方式。</summary>
      <param name="name">慣用編碼方式的字碼頁名稱。 <see cref="P:System.Text.Encoding.WebName" /> 屬性傳回的任何值都是有效值。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「名稱」欄會列出可能值。</param>
      <returns>與指定字碼頁相關聯的編碼方式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的字碼頁名稱。  
-或- 
主要平台尚不支援以 <paramref name="name" /> 所指示的字碼頁。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>傳回與指定字碼頁名稱相關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
      <param name="name">慣用編碼方式的字碼頁名稱。 <see cref="P:System.Text.Encoding.WebName" /> 屬性傳回的任何值都是有效值。 <see cref="T:System.Text.Encoding" /> 類別主題中表格的「名稱」欄會列出可能值。</param>
      <param name="encoderFallback">物件，該物件會在無法以目前編碼方式將字元編碼時提供錯誤處理程序。</param>
      <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
      <returns>與指定字碼頁相關聯的編碼方式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的字碼頁名稱。  
-或- 
主要平台尚不支援以 <paramref name="name" /> 所指示的字碼頁。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncodings">
      <summary>傳回包含所有編碼方式的陣列。</summary>
      <returns>包含所有編碼方式的陣列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>在衍生類別中覆寫時，計算編碼指定的字元數所產生的最大位元組數目。</summary>
      <param name="charCount">要編碼的字元數。</param>
      <returns>編碼指定字元數所產生的最大位元組數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小於零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.EncoderFallback" /> 設定為 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>在衍生類別中覆寫時，計算解碼指定的位元組數目所產生的最大字元數目。</summary>
      <param name="byteCount">要解碼的位元組數。</param>
      <returns>解碼指定位元組數所產生的最大字元數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小於零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>在衍生類別中覆寫時，傳回可指定所用編碼方式的位元組序列。</summary>
      <returns>位元組陣列，包含可指定所用編碼方式的位元組序列。  
 -或-  
 如果不需要前序編碼，則位元組陣列的長度為零。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位址開頭之指定數目的位元組解碼為字串。</summary>
      <param name="bytes">位元組陣列的指標。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <returns>字串，包含將指定之位元組序列解碼的結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 是 null 指標。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小於零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[])">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的所有位元組解碼成字串。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <returns>字串，包含將指定之位元組序列解碼的結果。</returns>
      <exception cref="T:System.ArgumentException">位元組陣列包含無效的 Unicode 字碼指標。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成字串。</summary>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第一個位元組索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <returns>字串，包含將指定之位元組序列解碼的結果。</returns>
      <exception cref="T:System.ArgumentException">位元組陣列包含無效的 Unicode 字碼指標。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="index" /> 與 <paramref name="count" /> 不代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (如需完整說明，請參閱 .NET 中的字元編碼) 
-和- 
 <see cref="P:System.Text.Encoding.DecoderFallback" /> 設定為 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})">
      <param name="bytes" />
    </member>
    <member name="P:System.Text.Encoding.HeaderName">
      <summary>在衍生類別中覆寫時，取得可以與郵件代理程式標頭標籤一起使用的目前編碼方式名稱。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 的名稱，與郵件代理程式標頭標記一起使用。  
-或- 
如果無法使用目前的 <see cref="T:System.Text.Encoding" />，則為空字串 ("")。</returns>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized">
      <summary>取得值，指出目前的編碼方式是否永遠都是使用預設的正規化表單進行正規化。</summary>
      <returns>如果目前的 <see cref="T:System.Text.Encoding" /> 永遠都是正規化，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
      <summary>在衍生類別中覆寫時取得值，指出目前的編碼方式是否永遠都是使用指定的正規化表單進行正規化。</summary>
      <param name="form">其中一個 <see cref="T:System.Text.NormalizationForm" /> 值。</param>
      <returns>如果目前的 <see langword="true" /> 物件一律使用指定的 <see cref="T:System.Text.Encoding" /> 值進行正規化，則為 <see cref="T:System.Text.NormalizationForm" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserDisplay">
      <summary>在衍生類別中覆寫時，取得值，指出瀏覽器用戶端是否可以使用目前的編碼方式來顯示內容。</summary>
      <returns>如果瀏覽器用戶端可以使用目前的 <see cref="T:System.Text.Encoding" /> 來顯示內容，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserSave">
      <summary>在衍生類別中覆寫時，取得值，指出瀏覽器用戶端是否可以使用目前的編碼方式來儲存內容。</summary>
      <returns>如果瀏覽器用戶端可以使用目前的 <see cref="T:System.Text.Encoding" /> 來儲存內容，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsDisplay">
      <summary>在衍生類別中覆寫時，取得值，指出郵件和新聞用戶端是否可以使用目前的編碼方式來顯示內容。</summary>
      <returns>如果郵件和新聞用戶端可以使用目前的 <see cref="T:System.Text.Encoding" /> 來顯示內容，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsSave">
      <summary>在衍生類別中覆寫時，取得值，指出郵件和新聞用戶端是否可以使用目前的編碼方式來儲存內容。</summary>
      <returns>如果郵件和新聞用戶端可以使用目前的 <see langword="true" /> 來儲存內容，則為 <see cref="T:System.Text.Encoding" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsReadOnly">
      <summary>在衍生類別中覆寫時，取得值，指出目前的編碼方式是否為唯讀。</summary>
      <returns>如果目前 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Text.Encoding" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsSingleByte">
      <summary>在衍生類別中覆寫時，取得值，指出目前的編碼方式是否使用單一位元組字碼指標。</summary>
      <returns>如果目前的 <see langword="true" /> 使用單一位元組字碼指標，則為 <see cref="T:System.Text.Encoding" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.Preamble" />
    <member name="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
      <summary>註冊編碼提供者。</summary>
      <param name="provider">
        <see cref="T:System.Text.EncodingProvider" /> 的子類別，提供其他字元編碼方式的存取權。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>以位元組由小到大位元組順序取得 UTF-16 格式的編碼方式。</summary>
      <returns>UTF-16 格式的編碼方式，使用位元組由小到大的位元組順序。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF32">
      <summary>以位元組由小到大位元組順序取得 UTF-32 格式的編碼方式。</summary>
      <returns>UTF-32 格式的編碼物件，使用位元組由小到大的位元組順序。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF7">
      <summary>取得 UTF-7 格式的編碼方式。</summary>
      <returns>UTF-7 格式的編碼方式。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>取得 UTF-8 格式的編碼方式。</summary>
      <returns>UTF-8 格式的編碼方式。</returns>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>在衍生類別中覆寫時，若要取得目前的編碼方式，請取得向 Internet Assigned Numbers Authority (IANA) 註冊的名稱。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 的 IANA 名稱。</returns>
    </member>
    <member name="P:System.Text.Encoding.WindowsCodePage">
      <summary>在衍生類別中覆寫時，請取得最能符合目前編碼方式的 Windows 作業系統字碼頁。</summary>
      <returns>最能符合目前 <see cref="T:System.Text.Encoding" /> 的 Windows 作業系統字碼頁。</returns>
    </member>
    <member name="T:System.Text.EncodingInfo">
      <summary>提供有關編碼方式的基本資訊。</summary>
    </member>
    <member name="P:System.Text.EncodingInfo.CodePage">
      <summary>取得此編碼方式的字碼頁識別項。</summary>
      <returns>此編碼方式的字碼頁識別項。</returns>
    </member>
    <member name="P:System.Text.EncodingInfo.DisplayName">
      <summary>取得編碼方式的人們可讀取的 (Human-Readable) 描述。</summary>
      <returns>編碼方式的人們可讀取的 (Human-Readable) 描述。</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.Equals(System.Object)">
      <summary>取得值，指出指定的物件是否等於目前的 <see cref="T:System.Text.EncodingInfo" /> 物件。</summary>
      <param name="value">要與目前的 <see cref="T:System.Text.EncodingInfo" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="value" /> 為 <see cref="T:System.Text.EncodingInfo" /> 物件且等於目前的 <see cref="T:System.Text.EncodingInfo" /> 物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.GetEncoding">
      <summary>傳回與目前的 <see cref="T:System.Text.Encoding" /> 物件相對應的 <see cref="T:System.Text.EncodingInfo" /> 物件。</summary>
      <returns>與目前的 <see cref="T:System.Text.Encoding" /> 物件相對應的 <see cref="T:System.Text.EncodingInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Text.EncodingInfo" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Text.EncodingInfo.Name">
      <summary>取得這個編碼方式以 Internet Assigned Numbers Authority (IANA) 註冊的名稱。</summary>
      <returns>編碼方式的 IANA 名稱。</returns>
    </member>
    <member name="T:System.Text.EncodingProvider">
      <summary>提供編碼提供者的基底類別，這個提供者提供特定平台無法使用的編碼方式。</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncodingProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32)">
      <summary>傳回與指定字碼頁識別項相關聯的編碼方式。</summary>
      <param name="codepage">所要求編碼方式的字碼頁識別項。</param>
      <returns>與指定字碼頁建立關聯的編碼方式；如果這個 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="codepage" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>傳回與指定字碼頁識別項相關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
      <param name="codepage">所要求編碼方式的字碼頁識別項。</param>
      <param name="encoderFallback">物件，在無法以這個編碼方式將字元編碼時提供錯誤處理程序。</param>
      <param name="decoderFallback">物件，在無法以這個編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
      <returns>與指定字碼頁建立關聯的編碼方式；如果這個 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="codepage" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String)">
      <summary>傳回具有指定名稱的編碼方式。</summary>
      <param name="name">所要求編碼方式的名稱。</param>
      <returns>與指定名稱建立關聯的編碼方式；如果這個 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="name" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>傳回與指定名稱建立關聯的編碼方式。 參數會針對無法編碼的字元以及無法解碼的位元組序列指定錯誤處理常式。</summary>
      <param name="name">慣用的編碼方式名稱。</param>
      <param name="encoderFallback">物件，在無法以這個編碼方式將字元編碼時提供錯誤處理程序。</param>
      <param name="decoderFallback">物件，該物件會在無法以目前編碼方式將位元組序列解碼時提供錯誤處理程序。</param>
      <returns>與指定名稱建立關聯的編碼方式；如果這個 <see cref="T:System.Text.EncodingProvider" /> 無法傳回對應於 <paramref name="name" /> 的有效編碼方式，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Text.NormalizationForm">
      <summary>定義要執行的正規化類型。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormC">
      <summary>表示 Unicode 字串已使用完整標準分解進行標準化，並接著以序列的主要複合取代該序列 (若可能的話)。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormD">
      <summary>表示 Unicode 字串已使用完整標準分解進行標準化。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKC">
      <summary>表示 Unicode 字串已使用完整相容性分解進行標準化，並接著以序列的主要複合取代該序列 (若可能的話)。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKD">
      <summary>表示 Unicode 字串已使用完整相容性分解進行標準化。</summary>
    </member>
    <member name="T:System.Text.Rune">
      <summary>表示 Unicode 純量值 ( U+0000..U+D7FF ，或  U+E000..U+10FFFF )。</summary>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Char)">
      <summary>從提供的 UTF-16 程式碼單位建立 <see cref="T:System.Text.Rune" />。</summary>
      <param name="ch">UTF-16 程式碼單位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ch" /> 表示 UTF-16 代理字元字碼指標 (U+D800..U+DFFF (含))。</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Char,System.Char)">
      <summary>從提供的 UTF-16 代理字組建立 <see cref="T:System.Text.Rune" />。</summary>
      <param name="highSurrogate">代理字組的高代理字元。</param>
      <param name="lowSurrogate">代理字組的低代理字元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不表示 UTF-16 高代理字元字碼指標。
-或-
<paramref name="lowSurrogate" /> 不表示 UTF-16 低代理字元字碼指標。</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Int32)">
      <summary>從表示 Unicode 純量值的指定 32 位元整數建立 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">Unicode 純量值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 不表示 Unicode 純量值。</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.UInt32)">
      <summary>從表示 Unicode 純量值的指定 32 位元不帶正負號整數建立 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">Unicode 純量值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 不表示 Unicode 純量值。</exception>
    </member>
    <member name="M:System.Text.Rune.CompareTo(System.Text.Rune)">
      <summary>將目前執行個體與指定的 <see cref="T:System.Text.Rune" /> 執行個體相比較。</summary>
      <param name="other">要與目前執行個體比較的執行個體。</param>
      <returns>帶正負號整數，指出這個執行個體在排序次序中與 <paramref name="other" /> 的相對位置： - 小於零：這個執行個體位於 <paramref name="other" /> 之前。 
- 零：這個執行個體在排序次序中的位置與 <paramref name="other" /> 相同。
- 大於零：這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)">
      <summary>解碼所提供 UTF-16 來源緩衝區開頭的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">唯讀 UTF-16 字元範圍。</param>
      <param name="result">當使方法傳回時，會是已解碼的 rune。</param>
      <param name="charsConsumed">當此方法傳回時，會是讀取以建立 rune 的字元數目。</param>
      <returns>如果來源緩衝區是以有效的 UTF-16 編碼純量值開頭，則為 <see cref="F:System.Buffers.OperationStatus.Done" />。 <paramref name="result" /> 則會包含已解碼的 <see cref="T:System.Text.Rune" />，且 <paramref name="charsConsumed" /> 會包含輸入緩衝區中用來編碼 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Char" /> 值數目。
如果來源緩衝區是空的或只包含獨立 UTF-16 高代理字元，則為 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="charsConsumed" /> 會包含輸入緩衝區的長度。
如果來源緩衝區是以語式錯誤的 UTF-16 編碼純量值開頭，則為 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="charsConsumed" /> 會包含用來編碼語式錯誤序列的 <see cref="T:System.Char" /> 值數目。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)">
      <summary>解碼所提供 UTF-8 來源緩衝區開頭的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">唯讀 UTF-8 編碼位元組範圍。</param>
      <param name="result">當此方法傳回時，會是已解碼的 rune。</param>
      <param name="bytesConsumed">當此方法傳回時，會是讀取以建立 rune 的位元組數目。</param>
      <returns>如果來源緩衝區是以有效的 UTF-8 編碼純量值開頭，則為 <see cref="F:System.Buffers.OperationStatus.Done" />。 <paramref name="result" /> 則會包含已解碼的 <see cref="T:System.Text.Rune" />，且 <paramref name="bytesConsumed" /> 會包含輸入緩衝區中用來編碼 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Byte" /> 值數目。
如果來源緩衝區是空的或只包含獨立 UTF-8 高代理字元，則為 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="bytesConsumed" /> 會包含輸入緩衝區的長度。
如果來源緩衝區是以語式錯誤的 UTF-8 編碼純量值開頭，則為 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="bytesConsumed" /> 會包含輸入緩衝區中用來編碼語式錯誤序列的 <see cref="T:System.Byte" /> 值數目。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeLastFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)">
      <summary>解碼所提供 UTF-16 來源緩衝區結尾的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">唯讀 UTF-16 編碼字元範圍。</param>
      <param name="result">當此方法傳回時，會是已解碼的 rune。</param>
      <param name="charsConsumed">當此方法傳回時，會是讀取以建立 rune 的位元組數目。</param>
      <returns>如果來源緩衝區是以有效的 UTF-16 編碼純量值開頭，則為 <see cref="F:System.Buffers.OperationStatus.Done" />。 <paramref name="result" /> 則會包含已解碼的 <see cref="T:System.Text.Rune" />，且 <paramref name="charsConsumed" /> 會包含輸入緩衝區中用來編碼 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Char" /> 值數目。
如果來源緩衝區是空的或只包含獨立 UTF-16 高代理字元，則為 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="charsConsumed" /> 會包含輸入緩衝區的長度。
如果來源緩衝區是以語式錯誤的 UTF-16 編碼純量值開頭，則為 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="charsConsumed" /> 會包含用來編碼語式錯誤序列的 <see cref="T:System.Char" /> 值數目。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeLastFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)">
      <summary>解碼所提供 UTF-8 來源緩衝區結尾的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">唯讀 UTF-8 編碼位元組範圍。</param>
      <param name="value">當此方法傳回時，會是已解碼的 rune。</param>
      <param name="bytesConsumed">當此方法傳回時，會是讀取以建立 rune 的位元組數目。</param>
      <returns>如果來源緩衝區是以有效的 UTF-8 編碼純量值結尾，則為 <see cref="F:System.Buffers.OperationStatus.Done" />。 <paramref name="result" /> 則會包含已解碼的 <see cref="T:System.Text.Rune" />，且 <paramref name="bytesConsumed" /> 會包含輸入緩衝區中用來編碼 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Byte" /> 值數目。
如果來源緩衝區是空的或只包含獨立 UTF-8 高代理字元，則為 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="bytesConsumed" /> 會包含輸入緩衝區的長度。
如果來源緩衝區是以語式錯誤的 UTF-8 編碼純量值結尾，則為 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 <paramref name="result" /> 則會包含 <see cref="P:System.Text.Rune.ReplacementChar" />，且 <paramref name="bytesConsumed" /> 會包含輸入緩衝區中用來編碼語式錯誤序列的 <see cref="T:System.Byte" /> 值數目。</returns>
    </member>
    <member name="M:System.Text.Rune.EncodeToUtf16(System.Span{System.Char})">
      <summary>將這個 <see cref="T:System.Text.Rune" /> 編碼為 UTF-16 目的地緩衝區。</summary>
      <param name="destination">要寫入這個值作為 UTF-16 的目的地緩衝區。</param>
      <returns>寫入至 <paramref name="destination" /> 的 <see cref="T:System.Char" /> 值數目。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 不夠大，無法包含輸出。</exception>
    </member>
    <member name="M:System.Text.Rune.EncodeToUtf8(System.Span{System.Byte})">
      <summary>將這個 <see cref="T:System.Text.Rune" /> 編碼為 UTF-8 目的地緩衝區。</summary>
      <param name="destination">要寫入這個值作為 UTF-8 的目的地緩衝區。</param>
      <returns>寫入至 <paramref name="destination" /> 的 <see cref="T:System.Byte" /> 值數目。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 不夠大，無法包含輸出。</exception>
    </member>
    <member name="M:System.Text.Rune.Equals(System.Object)">
      <summary>傳回值，指出目前的執行個體與指定物件是否相等。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>若 <paramref name="obj" /> 為 <see cref="T:System.Text.Rune" /> 類型且等於目前執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.Equals(System.Text.Rune)">
      <summary>傳回值，指出目前的執行個體與指定的 rune 是否相等。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>如果目前的執行個體和 <paramref name="other" /> 相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Text.Rune.GetNumericValue(System.Text.Rune)">
      <summary>取得與指定 rune 關聯的數值。</summary>
      <param name="value">要取得其數值的 rune。</param>
      <returns>與 <paramref name="value" /> 關聯的數值，或若 <paramref name="value" /> 不代表數值字元，則為 -1。</returns>
    </member>
    <member name="M:System.Text.Rune.GetRuneAt(System.String,System.Int32)">
      <summary>取得以字串中指定位置開頭的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="input">用來建立 rune 的字串。</param>
      <param name="index">要在 <paramref name="input" /> 中建立 rune 的起始位置。</param>
      <returns>從 <paramref name="input" /> (位於指定的 <paramref name="index" />) 取得的 rune。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 不會參考 <paramref name="input" /> 中有效純量值的起始值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="input" /> 的範圍。</exception>
    </member>
    <member name="M:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)">
      <summary>取得與指定 rune 關聯的 Unicode 類別。</summary>
      <param name="value">要取得其 Unicode 類別的 rune。</param>
      <returns>與 <paramref name="value" /> 關聯的 Unicode 類別。</returns>
    </member>
    <member name="P:System.Text.Rune.IsAscii">
      <summary>取得值，指出與此 <see cref="T:System.Text.Rune" /> 關聯的純量值是否在 ASCII 編碼範圍內。</summary>
      <returns>
        <see langword="true" />如果相關聯的純量值在 ASCII 編碼範圍 ([U + 0000 .. U + 007F]) 內, 則會以單一 UTF-8 程式碼單位來表示;否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Rune.IsBmp">
      <summary>取得值，指出與此 <see cref="T:System.Text.Rune" /> 關聯的純量值是否在 ASCII 編碼範圍內。</summary>
      <returns>
        <see langword="true" />如果相關聯的純量值在 BMP 編碼範圍 ([U + 0000 .. U + FFFF]) 內, 則會由單一 UTF-16 程式碼單位來表示;否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsControl(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為控制字元。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是控制字元時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsDigit(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為十進位數字。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是十進位數字時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsLetter(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為字母。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是字母時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsLetterOrDigit(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為字母或十進位數字。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是字母或十進位數字時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsLower(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為小寫字母。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是小寫字母時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsNumber(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為數字。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是數字時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsPunctuation(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為標點符號。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是標點符號時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsSeparator(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為分隔符號字元。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是分隔符號字元時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsSymbol(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為符號字元。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>當 <see langword="true" /> 是符號字元時為 <paramref name="value" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsUpper(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為大寫字母。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>若 <paramref name="value" /> 是大寫字母，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsValid(System.Int32)">
      <summary>傳回值，指出 32 位元帶正負號整數是否表示有效的 Unicode 純量值；也就是位於範圍  U+0000..U+D7FF  或  U+E000..U+10FFFF  內。</summary>
      <param name="value">Unicode 純量值。</param>
      <returns>若 <paramref name="value" /> 是有效的 Unicode 純量值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsValid(System.UInt32)">
      <summary>傳回值，指出 32 位元不帶正負號整數是否表示有效的 Unicode 純量值；也就是位於範圍  U+0000..U+D7FF  或  U+E000..U+10FFFF  內。</summary>
      <param name="value">Unicode 純量值。</param>
      <returns>若 <paramref name="value" /> 是有效的 Unicode 純量值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsWhiteSpace(System.Text.Rune)">
      <summary>傳回值，指出指定的 rune 是否分類為空白字元。</summary>
      <param name="value">要評估的 rune。</param>
      <returns>若 <paramref name="value" /> 是空白字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_Equality(System.Text.Rune,System.Text.Rune)">
      <summary>傳回值，這個值表示兩個 <see cref="T:System.Text.Rune" /> 執行個體是否相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.Char)~System.Text.Rune">
      <summary>定義從 16 位元 Unicode 字元到 <see cref="T:System.Text.Rune" /> 的明確轉換。</summary>
      <param name="ch">要轉換的 16 位元 Unicode 字元。</param>
      <returns>
        <paramref name="ch" /> 為 32 位元 Unicode 字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ch" /> 是代表代理字碼指標的 Unicode 純量。</exception>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.Int32)~System.Text.Rune">
      <summary>定義從 32 位元帶正負號的整數到 <see cref="T:System.Text.Rune" /> 的明確轉換。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 為 32 位元 Unicode 字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 是無效的 Unicode 純量。</exception>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.UInt32)~System.Text.Rune">
      <summary>定義從 32 位元不帶正負號的整數到 <see cref="T:System.Text.Rune" /> 的明確轉換。</summary>
      <param name="value">要轉換的 32 位元帶正負號的整數。</param>
      <returns>
        <paramref name="value" /> 為 32 位元 Unicode 字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 是無效的 Unicode 純量。</exception>
    </member>
    <member name="M:System.Text.Rune.op_GreaterThan(System.Text.Rune,System.Text.Rune)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Text.Rune" /> 是否大於另一個指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <see langword="true" /> 大於 <paramref name="left" /> 則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_GreaterThanOrEqual(System.Text.Rune,System.Text.Rune)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Text.Rune" /> 是否大於或等於另一個指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 大於或等於 <paramref name="right" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_Inequality(System.Text.Rune,System.Text.Rune)">
      <summary>傳回值，指出兩個 <see cref="T:System.Text.Rune" /> 執行個體是否有不同的值。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_LessThan(System.Text.Rune,System.Text.Rune)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Text.Rune" /> 是否小於另一個指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 小於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_LessThanOrEqual(System.Text.Rune,System.Text.Rune)">
      <summary>傳回值，指出所指定的 <see cref="T:System.Text.Rune" /> 是否小於或等於另一個指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>如果 <paramref name="left" /> 小於或等於 <paramref name="right" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Rune.Plane">
      <summary>取得包含此純量的 Unicode 平面 (0 到 16 (含))。</summary>
      <returns>包含此純量的 Unicode 平面 (0 到 16 (含))。</returns>
    </member>
    <member name="P:System.Text.Rune.ReplacementChar">
      <summary>取得代表 Unicode 替換字元 U+FFFD 的 <see cref="T:System.Text.Rune" /> 執行個體。</summary>
      <returns>
        <see cref="T:System.Text.Rune" /> 執行個體，表示 Unicode 替換字元 U+FFFD。</returns>
    </member>
    <member name="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)">
      <summary>使用指定之文化特性的駝峰式大小寫規則，傳回指定的 <see cref="T:System.Text.Rune" /> 轉換為小寫的複本。</summary>
      <param name="value">要轉換的 32 位元 Unicode 字元。</param>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <returns>
        <paramref name="value" /> 的小寫對等項。</returns>
    </member>
    <member name="M:System.Text.Rune.ToLowerInvariant(System.Text.Rune)">
      <summary>使用不因文化特性而異的駝峰式大小寫規則，傳回指定 <see cref="T:System.Text.Rune" /> 轉換為小寫的複本。</summary>
      <param name="value">要轉換的 32 位元 Unicode 字元。</param>
      <returns>
        <paramref name="value" /> 的小寫對等項。</returns>
    </member>
    <member name="M:System.Text.Rune.ToString">
      <summary>傳回這個 <see cref="T:System.Text.Rune" /> 執行個體的字串表示。</summary>
      <returns>這個 rune 的字串表示。</returns>
    </member>
    <member name="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)">
      <summary>使用指定之文化特性的駝峰式大小寫規則，傳回指定 <see cref="T:System.Text.Rune" /> 轉換為大寫的複本。</summary>
      <param name="value">要轉換的 32 位元 Unicode 字元。</param>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <returns>
        <paramref name="value" /> 的大寫對應項。</returns>
    </member>
    <member name="M:System.Text.Rune.ToUpperInvariant(System.Text.Rune)">
      <summary>使用不因文化特性而異的駝峰式大小寫規則，傳回指定 <see cref="T:System.Text.Rune" /> 轉換為大寫的複本。</summary>
      <param name="value">要轉換的 32 位元 Unicode 字元。</param>
      <returns>
        <paramref name="value" /> 的大寫對應項。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Char,System.Char,System.Text.Rune@)">
      <summary>嘗試從指定的 UTF-16 代理字組建立 <see cref="T:System.Text.Rune" /> 並傳回值，指出作業是否成功。</summary>
      <param name="highSurrogate">代理字組的高代理字元。</param>
      <param name="lowSurrogate">代理字組的低代理字元。</param>
      <param name="result">對應至指定代理字組的 rune。</param>
      <returns>如果作業成功，則為 <see langword="true" />；如果輸入值不表示語式正確的 UTF-16 代理字組，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Char,System.Text.Rune@)">
      <summary>嘗試從指定的字元建立 <see cref="T:System.Text.Rune" /> 並傳回值，指出作業是否成功。</summary>
      <param name="ch">用來建立 rune 的字元。</param>
      <param name="result">當此方法傳回時，會是對應至 <paramref name="ch" /> 的 rune。</param>
      <returns>如果方法成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Int32,System.Text.Rune@)">
      <summary>嘗試從表示 Unicode 純量值的所指定帶正負號整數建立 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">Unicode 純量值。</param>
      <param name="result">當此方法傳回時，會是對應至 <paramref name="value" /> 的 rune。</param>
      <returns>如果方法成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.UInt32,System.Text.Rune@)">
      <summary>嘗試從表示 Unicode 純量值的所指定 32 位元不帶正負號整數建立 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">Unicode 純量值。</param>
      <param name="result">當此方法傳回時，會是對應至 <paramref name="value" /> 的 rune。</param>
      <returns>如果方法成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryEncodeToUtf16(System.Span{System.Char},System.Int32@)">
      <summary>將這個 <see cref="T:System.Text.Rune" /> 編碼為 UTF-16 編碼目的地緩衝區。</summary>
      <param name="destination">要寫入這個值作為 UTF-16 編碼值的目的地緩衝區。</param>
      <param name="charsWritten">寫入 <paramref name="destination" /> 的 <see cref="T:System.Char" /> 值數目；如果目的地緩衝區不夠大，無法包含輸出，則為 0。</param>
      <returns>若已將值寫入至緩衝區，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryEncodeToUtf8(System.Span{System.Byte},System.Int32@)">
      <summary>將這個 <see cref="T:System.Text.Rune" /> 編碼為 UTF-8 編碼目的地緩衝區。</summary>
      <param name="destination">要寫入 UTF-8 編碼值的目的地緩衝區。</param>
      <param name="bytesWritten">寫入 <paramref name="destination" /> 的 <see cref="T:System.Byte" /> 值數目；如果目的地緩衝區不夠大，無法包含輸出，則為 0。</param>
      <returns>若已將值寫入至緩衝區，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryGetRuneAt(System.String,System.Int32,System.Text.Rune@)">
      <summary>嘗試從字串中指定位置的開頭取得 <see cref="T:System.Text.Rune" /> 並傳回值，指出作業是否成功。</summary>
      <param name="input">要從中擷取 rune 的字串。</param>
      <param name="index">要從中擷取 rune 的以零起始索引。</param>
      <param name="value">當此方法傳回時，會是已解碼的 rune。</param>
      <returns>如果已成功從指定的索引擷取純量值，則為 <see langword="false" />；如果因為資料無效而無法擷取值，則為 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="input" /> 的範圍。</exception>
    </member>
    <member name="P:System.Text.Rune.Utf16SequenceLength">
      <summary>取得以 UTF-16 序列的字碼單位 (<see cref="T:System.Char" />) 表示的長度，這是代表此純量值的必要項目。</summary>
      <returns>表示此純量值所<see cref="T:System.Char" />需的 utf-16 序列之程式碼單位 () 長度。</returns>
    </member>
    <member name="P:System.Text.Rune.Utf8SequenceLength">
      <summary>取得以 UTF-8 序列的字碼單位表示的長度，這是代表此純量值的必要項目。</summary>
      <returns>表示此純量值所需的 UTF-8 序列之程式碼單位長度。</returns>
    </member>
    <member name="P:System.Text.Rune.Value">
      <summary>取得以整數表示的 Unicode 純量值。</summary>
      <returns>Unicode 純量值, 其為整數。</returns>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>表示可變動的字元字串。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>使用指定的容量來初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="capacity">這個執行個體建議的起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體，將從指定的容量開始並且可以增加至指定的最大值。</summary>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。</param>
      <param name="maxCapacity">目前字串可以包含的最大字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> 小於一，<paramref name="capacity" /> 小於零，或 <paramref name="capacity" /> 大於 <paramref name="maxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>以指定的字串初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">用來初始化執行個體值的字串。 如果 <paramref name="value" /> 為 <see langword="null" />，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>使用指定的字串和容量，來初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">用來初始化執行個體值的字串。 如果 <paramref name="value" /> 為 <see langword="null" />，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>以指定的子字串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">字串，包含用來初始化此執行個體值的子字串。 如果 <paramref name="value" /> 為 <see langword="null" />，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
      <param name="startIndex">在 <paramref name="value" /> 內子字串開始的位置。</param>
      <param name="length">子字串中的字元數。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 加上 <paramref name="length" /> 不是 <paramref name="value" /> 內的位置。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>將指定的布林 (Boolean) 值之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的布林值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>將指定 <see cref="T:System.Char" /> 物件的字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的 UTF-16 編碼字碼單位。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
      <summary>將指定位址開頭的 Unicode 字元陣列附加至這個執行個體。</summary>
      <param name="value">字元陣列的指標。</param>
      <param name="valueCount">陣列中的字元數。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> 小於零。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 是 null 指標。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>將 Unicode 字元其字串表示的指定複本數附加至這個執行個體。</summary>
      <param name="value">要附加的字元。</param>
      <param name="repeatCount">要附加 <paramref name="value" /> 的次數。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> 小於零。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>將指定陣列中的 Unicode 字元的字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的字元陣列。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>將 Unicode 字元之指定子陣列的字串表示附加至這個執行個體。</summary>
      <param name="value">字元陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 中的開始位置。</param>
      <param name="charCount">要附加的字元數。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 <see langword="null" />，而 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不是零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 小於零。  
-或- 
 <paramref name="startIndex" /> + <paramref name="charCount" /> 大於 <paramref name="value" /> 的長度。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>將指定的小數位數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>將指定的雙精度浮點數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>將指定物件的字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的物件。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlyMemory{System.Char})">
      <summary>將所指定唯讀字元記憶體區域的字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的唯讀字元記憶體區域。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char})">
      <summary>將所指定唯讀字元範圍的字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的唯讀字元範圍。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>將指定的單精確度浮點數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>將指定字串的複本附加至這個執行個體。</summary>
      <param name="value">要附加的字串。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>將指定子字串的複本附加至這個執行個體。</summary>
      <param name="value">包含要附加之子字串的字串。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字串的開始位置。</param>
      <param name="count">
        <paramref name="value" /> 中要附加的字元數。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 <see langword="null" />，而 <paramref name="startIndex" /> 和 <paramref name="count" /> 不是零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 小於零。  
-或- 
 <paramref name="startIndex" /> + <paramref name="count" /> 大於 <paramref name="value" /> 的長度。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder)">
      <summary>將指定字串產生器的字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的字串產生器。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>將所指定字串產生器內的子字串複本附加至這個執行個體。</summary>
      <param name="value">字串產生器，其中包含要附加的子字串。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字串的開始位置。</param>
      <param name="count">
        <paramref name="value" /> 中要附加的字元數。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號的整數之字串表示附加至這個執行個體。</summary>
      <param name="value">要附加的值。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 使用指定的格式提供者，將每個格式項目取代為單一引數的字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的物件。</param>
      <returns>完成附加作業之後，這個執行個體的參考。 在附加作業之後，這個執行個體會包含作業前已經存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的任何格式規格都會由 <paramref name="arg0" /> 的字串表示所取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零) 或大於等於 1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 使用指定的格式提供者，將每個格式項目取代為兩個引數中的其中一個字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <returns>完成附加作業之後，這個執行個體的參考。 在附加作業之後，此執行個體會包含此作業之前已存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的任何格式規格都會由對應物件引數的字串表示所取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零) 或大於等於 2 (二)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 使用指定的格式提供者，將每個格式項目取代為三個引數中的其中一個字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <returns>完成附加作業之後，這個執行個體的參考。 在附加作業之後，此執行個體會包含此作業之前已存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的任何格式規格都會由對應物件引數的字串表示所取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零) 或大於等於 3 (三)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 每一個格式項目會由參數陣列 (此參數陣列使用所指定的格式提供者) 中對應之物件引數的字串表示所取代。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <param name="format">複合格式字串。</param>
      <param name="args">要格式化的物件陣列。</param>
      <returns>完成附加作業之後，這個執行個體的參考。 在附加作業之後，此執行個體會包含此作業之前已存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的任何格式規格都會由對應物件引數的字串表示所取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零)，或大於或等於 <paramref name="args" /> 陣列的長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 每一個格式項目都會取代為單一引數的字串表示。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的物件。</param>
      <returns>附加 <paramref name="format" /> 的執行個體參考。 <paramref name="format" /> 中的每一個格式項目都會取代為 <paramref name="arg0" /> 的字串表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零) 或大於等於 1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 每一個格式項目都會取代為兩個引數中任一個的字串表示。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <returns>附加 <paramref name="format" /> 的執行個體參考。 <paramref name="format" /> 中的每一個格式項目會由對應之物件引數的字串表示所取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零) 或大於等於 2。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 每一個格式項目都會取代為三個引數中任一個的字串表示。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要格式化的第一個物件。</param>
      <param name="arg1">要格式化的第二個物件。</param>
      <param name="arg2">要格式化的第三個物件。</param>
      <returns>附加 <paramref name="format" /> 的執行個體參考。 <paramref name="format" /> 中的每一個格式項目會由對應之物件引數的字串表示所取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零) 或大於等於 3。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。 每一個格式項目會由參數陣列中對應之引數的字串表示所取代。</summary>
      <param name="format">複合格式字串。</param>
      <param name="args">要格式化的物件陣列。</param>
      <returns>附加 <paramref name="format" /> 的執行個體參考。 <paramref name="format" /> 中的每一個格式項目會由對應之物件引數的字串表示所取代。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。  
-或- 
格式項目的索引小於 0 (零)，或大於或等於 <paramref name="args" /> 陣列的長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後的字串長度會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.String[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>將預設行結束字元附加至目前 <see cref="T:System.Text.StringBuilder" /> 物件的尾端。</summary>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>將後面接著預設行結束字元的指定字串複本附加至目前的 <see cref="T:System.Text.StringBuilder" /> 物件結尾。</summary>
      <param name="value">要附加的字串。</param>
      <returns>完成附加作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>取得或設定由目前執行個體配置的記憶體可以包含的最大字元數。</summary>
      <returns>目前執行個體配置的記憶體可以包含的最大字元數。 其值的範圍可從 <see cref="P:System.Text.StringBuilder.Length" /> 到 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">為設定作業指定的值小於這個執行個體的目前長度。  
 -或-  
 為設定作業指定的值大於最大容量。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>取得或設定這個執行個體中指定字元位置的字元。</summary>
      <param name="index">字元的位置。</param>
      <returns>位置 <paramref name="index" /> 上的 Unicode 字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定字元時，<paramref name="index" /> 超出這個執行個體的範圍。</exception>
      <exception cref="T:System.IndexOutOfRangeException">取得字元時，<paramref name="index" /> 超出這個執行個體的範圍。</exception>
    </member>
    <member name="T:System.Text.StringBuilder.ChunkEnumerator">
      <summary>支援簡單反覆處理 <see cref="T:System.Text.StringBuilder" /> 執行個體區塊。</summary>
    </member>
    <member name="P:System.Text.StringBuilder.ChunkEnumerator.Current">
      <summary>取得集合目前位置的區塊。</summary>
      <returns>集合目前位置的區塊。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ChunkEnumerator.GetEnumerator">
      <summary>提供傳回 <see langword="this" /> 作為 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 實作。</summary>
      <returns>可用於逐一查看區塊的列舉值物件。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ChunkEnumerator.MoveNext">
      <summary>將列舉值前移至集合中的下一個區塊。</summary>
      <returns>如果列舉值成功前移至下一個項目，則為 <see langword="true" />；如果列舉值超過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>從目前的 <see cref="T:System.Text.StringBuilder" /> 執行個體移除所有字元。</summary>
      <returns>其 <see cref="P:System.Text.StringBuilder.Length" /> 為 0 (零) 的物件。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>將此執行個體指定區段中的字元複製到目的端 <see cref="T:System.Char" /> 陣列的指定區段。</summary>
      <param name="sourceIndex">此執行個體中的開始位置，為字元的複製來源。 索引以零為起始。</param>
      <param name="destination">將複製其中字元的陣列。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中開始複製字元的位置。 索引以零為起始。</param>
      <param name="count">要複製的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="sourceIndex" /> 大於這個執行個體的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> 大於這個執行個體的長度。  
-或- 
 <paramref name="destinationIndex" /> + <paramref name="count" /> 大於 <paramref name="destination" /> 的長度。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Span{System.Char},System.Int32)">
      <param name="sourceIndex" />
      <param name="destination" />
      <param name="count" />
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>請確定這個 <see cref="T:System.Text.StringBuilder" /> 執行個體的容量至少是某一指定的值。</summary>
      <param name="capacity">要確定的最大容量。</param>
      <returns>這個執行個體的新容量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.ReadOnlySpan{System.Char})">
      <summary>傳回值，指出此執行個體中的字元是否等於指定唯讀字元範圍的字元。</summary>
      <param name="span">與目前執行個體比較的字元範圍。</param>
      <returns>如果此執行個體中的字元與 <paramref name="span" /> 相同，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="sb">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果這個執行個體和 <see langword="true" /> 具有相同的字串、<paramref name="sb" /> 和 <see cref="P:System.Text.StringBuilder.Capacity" /> 值，則為 <see cref="P:System.Text.StringBuilder.MaxCapacity" />，否則是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.GetChunks">
      <summary>傳回物件，可用來逐一查看從這個 <see cref="T:System.Text.StringBuilder" /> 執行個體建立的 <see langword="ReadOnlyMemory&lt;Char&gt;" /> 中所表示字元區塊。</summary>
      <returns>
        <see langword="ReadOnlyMemory&lt;Char&gt;" /> 中的區塊列舉值。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>在指定的字元位置上將 Boolean 值的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>在指定的字元位置上將指定的 8 位元不帶正負號的整數之字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>在指定的字元位置上將指定的 Unicode 字元之字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>在指定的字元位置上將指定的 Unicode 字元陣列之字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的字元陣列。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>在指定的字元位置上將 Unicode 字元之指定子陣列的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">字元陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 內的起始索引。</param>
      <param name="charCount">要插入的字元數。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 <see langword="null" />，而 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不是零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />、<paramref name="startIndex" /> 或 <paramref name="charCount" /> 小於零。  
-或- 
 <paramref name="index" /> 大於這個執行個體的長度。  
-或- 
 <paramref name="startIndex" /> 加上 <paramref name="charCount" /> 不是 <paramref name="value" /> 內的位置。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>在指定的字元位置上將小數位數的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>在指定的字元位置上將雙精度浮點數的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>在指定的字元位置，將所指定帶正負號之 16 位元整數的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>在指定的字元位置，將所指定帶正負號之 32 位元整數的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>在指定的字元位置上將指定的 64 位元帶正負號的整數之字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>在指定的字元位置上將物件的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的物件或 <see langword="null" />。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.ReadOnlySpan{System.Char})">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>在指定的字元位置，將所指定帶正負號之 8 位元整數的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>在指定的字元位置上將單精確度浮點數的字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>在指定的字元位置上將字串插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的字串。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體目前的長度。  
-或- 
這個 <see cref="T:System.Text.StringBuilder" /> 物件目前的長度加上 <paramref name="value" /> 的長度，會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>在指定的字元位置上將指定字串的一或多個複本插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的字串。</param>
      <param name="count">要插入 <paramref name="value" /> 的次數。</param>
      <returns>插入作業完成後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體目前的長度。  
-或- 
 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.OutOfMemoryException">此 <see cref="T:System.Text.StringBuilder" /> 物件目前的長度加 <paramref name="count" /> 的 <paramref name="value" /> 倍長度，會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>在指定的字元位置，將所指定不帶正負號的 16 位元整數之字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>在指定的字元位置，將所指定不帶正負號的 32 位元整數之字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>在指定的字元位置，將所指定不帶正負號的 64 位元整數之字串表示插入這個執行個體。</summary>
      <param name="index">這個執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入作業之後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於此執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>取得或設定目前 <see cref="T:System.Text.StringBuilder" /> 物件的長度。</summary>
      <returns>這個執行個體的長度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">為設定作業指定的值小於零或大於 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>取得這個執行個體的最大容量。</summary>
      <returns>這個執行個體可以容納的最大字元數。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>從這個執行個體移除指定的字元範圍。</summary>
      <param name="startIndex">這個執行個體中開始移除且以零為起始的位置。</param>
      <param name="length">要移除的字元數。</param>
      <returns>移除作業完成後，這個執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">如果 <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零，或 <paramref name="startIndex" /> + <paramref name="length" /> 大於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>以另一個指定的字元，取代這個執行個體中指定字元的所有項目。</summary>
      <param name="oldChar">要取代的字元。</param>
      <param name="newChar">取代 <paramref name="oldChar" /> 的字元。</param>
      <returns>其 <paramref name="oldChar" /> 已由 <paramref name="newChar" /> 取代的執行個體參考。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>將這個執行個體的子字串內所有出現的指定字元，取代為另一個指定的字元。</summary>
      <param name="oldChar">要取代的字元。</param>
      <param name="newChar">取代 <paramref name="oldChar" /> 的字元。</param>
      <param name="startIndex">這個執行個體中子字串開始的位置。</param>
      <param name="count">子字串的長度。</param>
      <returns>參考這個執行個體，但 <paramref name="oldChar" /> 換成 <paramref name="newChar" />，範圍是 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> + <paramref name="count" /> 大於這個執行個體值的長度。  
-或- 
 <paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>將這個執行個體中所有出現的指定字串取代為另一個指定字串。</summary>
      <param name="oldValue">要取代的字串。</param>
      <param name="newValue">取代 <paramref name="oldValue" /> 的字串或 <see langword="null" />。</param>
      <returns>這個執行個體的參考，但 <paramref name="oldValue" /> 的所有執行個體遭取代成 <paramref name="newValue" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>將這個執行個體的子字串內所有出現的指定字串，取代為另一個指定的字串。</summary>
      <param name="oldValue">要取代的字串。</param>
      <param name="newValue">取代 <paramref name="oldValue" /> 的字串或 <see langword="null" />。</param>
      <param name="startIndex">這個執行個體中子字串開始的位置。</param>
      <param name="count">子字串的長度。</param>
      <returns>參考這個執行個體，但 <paramref name="oldValue" /> 的所有執行個體換成 <paramref name="newValue" />，範圍是 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> - 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="startIndex" /> 加上 <paramref name="count" /> 表示不在此執行個體中的字元位置。  
-或- 
加大此執行個體的值可能會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將還原序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料填入 (Populate) <see cref="T:System.Text.StringBuilder" /> 物件。</summary>
      <param name="info">要使用序列化資訊來填入的物件。</param>
      <param name="context">要儲存並擷取序列化資料的位置。 保留供未來使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>將這個執行個體的值轉換為 <see cref="T:System.String" />。</summary>
      <returns>其值和這個執行個體相同的字串。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>將這個執行個體的子字串值轉換為 <see cref="T:System.String" />。</summary>
      <param name="startIndex">這個執行個體中的子字串開始位置。</param>
      <param name="length">子字串的長度。</param>
      <returns>字串，此字串值與這個執行個體的指定子字串值相同。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。  
-或- 
<paramref name="startIndex" /> 和 <paramref name="length" /> 總計大於目前執行個體的長度。</exception>
    </member>
    <member name="T:System.Text.StringRuneEnumerator">
      <summary>提供由字串所代表之 <see cref="T:System.Text.Rune" /> 值的列舉程式。</summary>
    </member>
    <member name="P:System.Text.StringRuneEnumerator.Current">
      <summary>取得位於目前列舉程式位置的 <see cref="T:System.Text.Rune" />。</summary>
      <returns>
        <see cref="T:System.Text.Rune" />位於目前列舉值位置的。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.GetEnumerator">
      <summary>傳回目前的列舉程式執行個體。</summary>
      <returns>目前的列舉程式執行個體。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.MoveNext">
      <summary>將列舉程式前移至字串的下一個 <see cref="T:System.Text.Rune" />。</summary>
      <returns>若列舉程式成功前移至下一個項目，則為 <see langword="true" />；若已到達字串結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#Generic#IEnumerable{System#Text#Rune}#GetEnumerator">
      <summary>傳回目前的列舉程式執行個體。</summary>
      <returns>目前的列舉程式執行個體。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回目前的列舉程式執行個體。</summary>
      <returns>目前的列舉程式執行個體。</returns>
    </member>
    <member name="P:System.Text.StringRuneEnumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置的 <see cref="T:System.Text.Rune" />。</summary>
      <returns>
        <see cref="T:System.Text.Rune" />位於目前列舉值位置的。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#IEnumerator#Reset">
      <summary>將目前的 <see cref="T:System.Text.StringRuneEnumerator" /> 執行個體重設為字串的開頭。</summary>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#IDisposable#Dispose">
      <summary>釋出目前的 <see cref="T:System.Text.StringRuneEnumerator" /> 執行個體所使用的所有資源。</summary>
    </member>
    <member name="T:System.Text.Unicode.Utf8">
      <summary>提供靜態方法，在 UTF-8 和 UTF-16 編碼間轉換區塊資料。</summary>
    </member>
    <member name="M:System.Text.Unicode.Utf8.FromUtf16(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean,System.Boolean)">
      <summary>將 UTF-16 字元範圍轉換為 UTF-8 編碼的位元組範圍。</summary>
      <param name="source">UTF-16 編碼的唯讀字元範圍。</param>
      <param name="destination">UTF-8 編碼的位元組範圍。</param>
      <param name="charsRead">當方法傳回時，自 <paramref name="source" /> 讀取的字元數量。</param>
      <param name="bytesWritten">當方法傳回時，寫入 <paramref name="destination" /> 的字元數量。</param>
      <param name="replaceInvalidSequences">如果在 <paramref name="source" /> 中發現無效的字元，<see langword="true" /> 則以 U+FFFD 取代 <paramref name="source" /> 中無效的 UTF-16 序列，<see langword="false" /> 則傳回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。</param>
      <param name="isFinalBlock">如果此方法不應傳回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>值，指出此轉換的狀態。</returns>
    </member>
    <member name="M:System.Text.Unicode.Utf8.ToUtf16(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Int32@,System.Boolean,System.Boolean)">
      <summary>將 UTF-8 編碼唯讀位元組範圍轉換為 UTF-16 編碼字元範圍。</summary>
      <param name="source">UTF-8 編碼的唯讀字元範圍。</param>
      <param name="destination">UTF-8 編碼的位元組範圍。</param>
      <param name="bytesRead">當方法傳回時，自 <paramref name="source" /> 讀取的位元組數量。</param>
      <param name="charsWritten">當方法傳回時，寫入 <paramref name="destination" /> 的字元數量。</param>
      <param name="replaceInvalidSequences">如果在 <paramref name="source" /> 中發現無效的字元，<see langword="true" /> 則以 U+FFFD 取代 <paramref name="source" /> 中無效的 UTF-8 序列，<see langword="false" /> 則傳回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。</param>
      <param name="isFinalBlock">如果此方法不應傳回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>值，指出此轉換的狀態。</returns>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>傳播通知，表示應該取消作業。</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="canceled">語彙基元的已取消狀態。</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>取得這個語彙基元是否能夠處於已取消狀態。</summary>
      <returns>如果這個語彙基元能夠處於已取消狀態，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationToken" /> 執行個體與指定的 <see cref="T:System.Object" /> 是否相等。</summary>
      <param name="other">與這個執行個體相互比較的其他物件。</param>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.Threading.CancellationToken" />，且兩個執行個體相等，則為 <see langword="true" />；否則為 <see langword="false" />。 如需詳細資訊，請參閱＜備註＞一節。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationToken" /> 執行個體與指定的語彙基元是否相等。</summary>
      <param name="other">與這個執行個體比較的其他 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>如果執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />。 如需詳細資訊，請參閱＜備註＞一節。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>做為 <see cref="T:System.Threading.CancellationToken" /> 的雜湊函式。</summary>
      <returns>目前 <see cref="T:System.Threading.CancellationToken" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>取得是否已要求取消這個語彙基元。</summary>
      <returns>如果已為這個語彙基元要求取消，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>傳回空的 <see cref="T:System.Threading.CancellationToken" /> 值。</summary>
      <returns>空的取消語彙基元。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationToken" /> 執行個體是否相等。</summary>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
      <returns>如果執行個體相等，則為 <see langword="true" />；否則為 <see langword="false" />。如需詳細資訊，請參閱＜備註＞一節。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationToken" /> 執行個體是否不相等。</summary>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
      <returns>如果執行個體不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</summary>
      <param name="callback">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</param>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</summary>
      <param name="callback">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</param>
      <param name="useSynchronizationContext">指示是否要擷取目前的 <see cref="T:System.Threading.SynchronizationContext" /> 並在叫用 <paramref name="callback" /> 時使用它的值。</param>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</summary>
      <param name="callback">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</param>
      <param name="state">當叫用委派時，要傳遞給 <paramref name="callback" /> 的狀態。 這可能是 null。</param>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>註冊委派，當取消這個 <see cref="T:System.Threading.CancellationToken" /> 時將會呼叫該委派。</summary>
      <param name="callback">取消 <see cref="T:System.Threading.CancellationToken" /> 時所要執行的委派。</param>
      <param name="state">當叫用委派時，要傳遞給 <paramref name="callback" /> 的狀態。 這可能是 null。</param>
      <param name="useSynchronizationContext">布林值，表示是否要擷取目前的 <see cref="T:System.Threading.SynchronizationContext" /> 並在叫用 <paramref name="callback" /> 時使用它。</param>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>如果已要求取消這個語彙基元，則擲回 <see cref="T:System.OperationCanceledException" />。</summary>
      <exception cref="T:System.OperationCanceledException">已要求取消這個語彙基元。</exception>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)">
      <summary>註冊取消此 <see cref="T:System.Threading.CancellationToken" /> 時要呼叫的委派。</summary>
      <param name="callback">取消 <see cref="T:System.Threading.CancellationToken" /> 時要執行的委派。</param>
      <param name="state">當叫用委派時，要傳遞給 <paramref name="callback" /> 的狀態。  這可能是 <see langword="null" />。</param>
      <returns>可用來取消註冊回呼的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>取得取消語彙基元時所發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</summary>
      <returns>取消語彙基元時所發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</returns>
      <exception cref="T:System.ObjectDisposedException">相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>表示已向 <see cref="T:System.Threading.CancellationToken" /> 登錄的回呼委派。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>釋放 <see cref="T:System.Threading.CancellationTokenRegistration" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.DisposeAsync">
      <summary>處置註冊並從相關聯的 <see cref="T:System.Threading.CancellationToken" /> 取消註冊目標回呼。</summary>
      <returns>代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體與指定的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 是否相等。</summary>
      <param name="obj">要與這個執行個體比較的其他物件。</param>
      <returns>如果這個執行個體和 <paramref name="obj" /> 相等則為 True， 否則為 False。  
如果兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體都參考 <see cref="T:System.Threading.CancellationToken" /> 的相同 Register 方法之單一呼叫的輸出，則這兩個執行個體相等。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體與指定的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 是否相等。</summary>
      <param name="other">要與這個執行個體比較的其他 <see cref="T:System.Threading.CancellationTokenRegistration" />。</param>
      <returns>如果這個執行個體和 <paramref name="other" /> 相等則為 True， 否則為 False。  
如果兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體都參考 <see cref="T:System.Threading.CancellationToken" /> 的相同 Register 方法之單一呼叫的輸出，則這兩個執行個體相等。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>做為 <see cref="T:System.Threading.CancellationTokenRegistration" /> 的雜湊函式。</summary>
      <returns>目前 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體是否相等。</summary>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
      <returns>如果執行個體相等，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體是否不相等。</summary>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
      <returns>如果執行個體不相等則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenRegistration.Token">
      <summary>取得與此註冊建立關聯的 <see cref="T:System.Threading.CancellationToken" />。  若註冊並未與權杖建立關聯 (例如在註冊經過處置後)，則此項目會傳回預設權杖。</summary>
      <returns>與此註冊相關聯的解除標記, 如果註冊未與權杖相關聯, 則為預設的權杖 (例如在處置註冊之後)。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Unregister">
      <summary>處置註冊並從相關聯的 <see cref="T:System.Threading.CancellationToken" /> 取消註冊目標回呼。</summary>
      <returns>若方法成功，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>指定 <see cref="T:System.Lazy`1" /> 執行個體如何同步處理多個執行緒進行的存取。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>使用鎖定來確保只有單一執行緒能夠以安全執行緒方式初始化 <see cref="T:System.Lazy`1" /> 執行個體。 如果初始設定方法 (如果沒有初始設定方法，則為無參數建構函式) 在內部使用鎖定，則可能會發生死結。 如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始設定方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。 如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的無參數建構函式所擲回例外狀況。 在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。 如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>
        <see cref="T:System.Lazy`1" /> 執行個體不是安全執行緒；如果從多個執行緒存取此執行個體，其行為未定義。 只有在高度重視效能且絕對不會從多個執行緒初始化 <see cref="T:System.Lazy`1" /> 執行個體時，才能使用此模式。 如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式指定初始設定方法 (<paramref name="valueFactory" /> 參數)，而且當您初次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，該初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回此例外狀況。 如果您使用未指定初始設定方法的 <see cref="T:System.Lazy`1" /> 建構函式，則不會快取 <paramref name="T" /> 的無參數建構函式所擲回例外狀況。 在此情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能會成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。 如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>當多個執行緒同時嘗試初始化 <see cref="T:System.Lazy`1" /> 執行個體時，所有執行緒可以執行初始設定方法 (如果沒有初始設定方法，則為無參數函式)。 第一個完成初始設定的執行緒會設定 <see cref="T:System.Lazy`1" /> 執行個體的值。 該值會傳回給任何其他同時執行初始設定方法的執行緒 (除非初始設定方法在這些執行緒上擲回例外狀況)。 由競爭執行緒所建立的任何 <paramref name="T" /> 執行個體都會遭到捨棄。 如果初始設定方法在任何執行緒上擲回例外狀況，該例外狀況會傳播至該執行緒上的 <see cref="P:System.Lazy`1.Value" /> 屬性之外。 不會快取例外狀況。 <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性的值會保持為 <see langword="false" />，且後續無論是由擲回例外狀況所在的執行緒或是其他執行緒呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性，都會再次執行初始設定方法。 如果初始設定方法以遞迴方式存取 <see cref="P:System.Lazy`1.Value" /> 執行個體的 <see cref="T:System.Lazy`1" /> 屬性，則不會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Sources.IValueTaskSource">
      <summary>代表可由 <see cref="T:System.Threading.Tasks.ValueTask" /> 進行包裝的物件。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.GetResult(System.Int16)">
      <summary>取得 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 的結果。</summary>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.GetStatus(System.Int16)">
      <summary>取得目前作業的狀態。</summary>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <returns>目前作業的狀態。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>排程此 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 的接續動作。</summary>
      <param name="continuation">作業完成時要叫用的接續動作。</param>
      <param name="state">叫用時要傳遞給 <paramref name="continuation" /> 的狀態物件。</param>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <param name="flags">描述接續動作行為的旗標。</param>
    </member>
    <member name="T:System.Threading.Tasks.Sources.IValueTaskSource`1">
      <summary>代表可由 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 進行包裝的物件。</summary>
      <typeparam name="TResult">的結果<see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />所產生的結果類型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.GetResult(System.Int16)">
      <summary>取得 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的結果。</summary>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <returns>
        <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的結果。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.GetStatus(System.Int16)">
      <summary>取得目前作業的狀態。</summary>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <returns>指出目前作業狀態的值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>排程此 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的接續動作。</summary>
      <param name="continuation">作業完成時要叫用的接續動作。</param>
      <param name="state">叫用時要傳遞給 <paramref name="continuation" /> 的狀態物件。</param>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <param name="flags">描述接續動作行為的旗標。</param>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1">
      <summary>提供實作手動重設 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 或 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的核心邏輯。</summary>
      <typeparam name="TResult">此手動重設<see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />的結果類型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetResult(System.Int16)">
      <summary>傳回作業的結果。</summary>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <returns>運算的結果。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetStatus(System.Int16)">
      <summary>取得作業狀態。</summary>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <returns>指出作業狀態的值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>為此作業排程接續動作。</summary>
      <param name="continuation">作業完成時要叫用的接續動作。</param>
      <param name="state">叫用時要傳遞給 <paramref name="continuation" /> 的狀態物件。</param>
      <param name="token">提供給 <see cref="T:System.Threading.Tasks.ValueTask" /> 建構函式的不透明值。</param>
      <param name="flags">描述接續動作行為的旗標。</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Reset">
      <summary>重設以為下一次的作業進行準備。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.RunContinuationsAsynchronously">
      <summary>取得或設定是否要強制以非同步方式執行接續動作。</summary>
      <returns>
        <see langword="true" />強制繼續以非同步方式執行接續;否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetException(System.Exception)">
      <summary>完成並附帶錯誤。</summary>
      <param name="error">例外狀況。</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetResult(`0)">
      <summary>完成並附帶成功結果。</summary>
      <param name="result">結果。</param>
    </member>
    <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Version">
      <summary>取得作業版本。</summary>
      <returns>作業版本。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags">
      <summary>提供從 <see cref="T:System.Threading.Tasks.ValueTask" /> 和 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 傳遞至 <see langword="OnCompleted" /> 方法，以控制接續動作行為的旗標。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.FlowExecutionContext">
      <summary>
        <see langword="OnCompleted" /> 應擷取目前的 <see cref="T:System.Threading.ExecutionContext" />，並用它來執行接續動作。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.None">
      <summary>針對叫用接續動作的方式，沒有任何需求。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.UseSchedulingContext">
      <summary>
        <see langword="OnCompleted" /> 應擷取目前的排程內容 (<see cref="T:System.Threading.SynchronizationContext" />)，並在將接續動作排入佇列以等待執行時使用它。  若沒有設定此旗標，實作便可以選擇在任意位置執行接續動作。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ValueTaskSourceStatus">
      <summary>指出 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 或 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的狀態。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Canceled">
      <summary>作業已因為取消而完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Faulted">
      <summary>作業已完成並附帶錯誤。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Pending">
      <summary>作業尚未完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Succeeded">
      <summary>作業已成功完成。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>表示非同步作業。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>使用指定的動作，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>使用指定的動作和 <see cref="T:System.Threading.Tasks.Task" />，初始化新的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="cancellationToken">新工作將會觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="cancellationToken">新工作將觀察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>使用指定的動作和狀態，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <param name="cancellationToken">新工作將觀察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <param name="cancellationToken">新工作將觀察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>取得建立 <see cref="T:System.Threading.Tasks.Task" /> 時提供的狀態物件，如果未提供則為 null。</summary>
      <returns>
        <see cref="T:System.Object" />，代表工作建立時傳入工作的狀態資料。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CompletedTask">
      <summary>取得已成功完成的工作。</summary>
      <returns>成功完成的工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
      <summary>設定用來等候這個 <see cref="T:System.Threading.Tasks.Task" /> 的 awaiter。</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> 表示嘗試將接續封送處理回原始擷取的內容，否則為 <see langword="false" />。</param>
      <returns>等候這項工作所用的物件。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時，會接收呼叫端提供的狀態資訊並執行的接續。</summary>
      <param name="continuationAction">當工作完成時要執行的動作。 執行時，會將已完成的工作和呼叫端提供的狀態物件當做引數傳遞給委派。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時，會接收呼叫端提供的狀態資訊和取消語彙基元，並非同步執行的接續。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時，會接收呼叫端提供的狀態資訊和取消語彙基元，並執行的接續。 接續會根據一組指定的條件執行，並使用指定的排程器。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時，會接收呼叫端提供的狀態資訊並執行的接續。 接續會根據一組指定的條件執行。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時，會接收呼叫端提供的狀態資訊並非同步執行的接續。 接續會使用指定的排程器。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。  當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時，會接收取消語彙基元並非同步執行的接續。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標工作完成時，會根據指定之 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 執行的接續。 接續會接收取消語彙基元，並使用指定的排程器。</summary>
      <param name="continuationAction">要根據指定的 <paramref name="continuationOptions" /> 執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。  
-或- 
<paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立當目標工作完成時，會根據指定之 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 執行的接續。</summary>
      <param name="continuationAction">要根據指定的 <paramref name="continuationOptions" /> 執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續。 接續會使用指定的排程器。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成並傳回值時非同步執行的接續。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成並傳回值時非同步執行的接續。 接續會接收取消語彙基元。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。  
-或- 
已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會根據指定之接續選項執行並傳回值的接續。 接續會接收取消語彙基元，並使用指定的排程器。</summary>
      <param name="continuationFunction">要根據指定的 <c>continuationOptions</c> 執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。  
-或- 
已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。  
-或- 
<paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會根據指定之接續選項執行並傳回值的接續。</summary>
      <param name="continuationFunction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成並傳回值時非同步執行的接續。 接續會使用指定的排程器。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。  
-或- 
<paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成並傳回值時，會接收呼叫端提供的狀態資訊並非同步執行的接續。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成並傳回值時非同步執行的接續。 接續會接收呼叫端提供的狀態資訊和取消語彙基元。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成並傳回值時，會根據指定的工作接續選項來執行的接續。 接續會接收呼叫端提供的狀態資訊和取消語彙基元，並使用指定的排程器。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時，會根據指定的工作接續選項來執行的接續。 接續會接收呼叫端提供的狀態資訊。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續。 接續會接收呼叫端提供的狀態資訊，並使用指定的排程器。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。  當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>取得用來建立這個工作的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</summary>
      <returns>用來建立這個工作的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>傳回目前執行之 <see cref="T:System.Threading.Tasks.Task" /> 的唯一 ID。</summary>
      <returns>系統指派給目前執行中工作的整數。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
      <summary>建立在指定的毫秒數之後完成的工作。</summary>
      <param name="millisecondsDelay">完成所傳回工作之前等待的毫秒數；-1 為無限期地等待。</param>
      <returns>代表時間延遲的工作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 引數小於 -1。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
      <summary>建立在指定的毫秒數之後完成的可取消工作。</summary>
      <param name="millisecondsDelay">完成所傳回工作之前等待的毫秒數；-1 為無限期地等待。</param>
      <param name="cancellationToken">等候工作完成時要觀察的取消語彙基元。</param>
      <returns>代表時間延遲的工作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 引數小於 -1。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消這項工作。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
      <summary>建立在指定時間間隔之後完成的工作。</summary>
      <param name="delay">完成所傳回工作之前要等待的時間範圍；<see langword="TimeSpan.FromMilliseconds(-1)" /> 表示無限期地等待。</param>
      <returns>代表時間延遲的工作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> 表示 <see langword="TimeSpan.FromMilliseconds(-1)" /> 以外的負數時間間隔。  
-或- 
<paramref name="delay" /> 引數的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 屬性大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>建立在指定時間間隔之後完成的可取消工作。</summary>
      <param name="delay">完成所傳回工作之前要等待的時間範圍；<see langword="TimeSpan.FromMilliseconds(-1)" /> 表示無限期地等待。</param>
      <param name="cancellationToken">等候工作完成時要觀察的取消語彙基元。</param>
      <returns>代表時間延遲的工作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> 表示 <see langword="TimeSpan.FromMilliseconds(-1)" /> 以外的負數時間間隔。  
-或- 
<paramref name="delay" /> 引數的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 屬性大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消這項工作。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose">
      <summary>釋放 <see cref="T:System.Threading.Tasks.Task" /> 類別目前的執行個體所使用的全部資源。</summary>
      <exception cref="T:System.InvalidOperationException">工作不是下列其中一個最終狀態：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
      <summary>處置 <see cref="T:System.Threading.Tasks.Task" />，並釋放它的所有 Unmanaged 資源。</summary>
      <param name="disposing">布林值，表示是否會因為呼叫 <see cref="M:System.Threading.Tasks.Task.Dispose" /> 而呼叫這個方法。</param>
      <exception cref="T:System.InvalidOperationException">工作不是下列其中一個最終狀態：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>取得導致 <see cref="T:System.AggregateException" /> 不當結束的 <see cref="T:System.Threading.Tasks.Task" />。 如果 <see cref="T:System.Threading.Tasks.Task" /> 順利完成，或未擲回任何例外狀況，則這會傳回 <see langword="null" />。</summary>
      <returns>導致 <see cref="T:System.AggregateException" /> 不當結束的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>提供 Factory 方法的存取，這些 Factory 方法用於建立及設定 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 執行個體。</summary>
      <returns>Factory 物件，可以建立各種不同的 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
      <summary>建立以指定的取消語彙基元取消而完成的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="cancellationToken">可用來完成工作的取消語彙基元。</param>
      <returns>取消的工作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">並未針對 <paramref name="cancellationToken" /> 要求取消；其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
      <summary>建立以指定的取消語彙基元取消而完成的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="cancellationToken">可用來完成工作的取消語彙基元。</param>
      <typeparam name="TResult">工作傳回的結果的類型。</typeparam>
      <returns>取消的工作。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">並未針對 <paramref name="cancellationToken" /> 要求取消；其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
      <summary>建立以指定例外狀況完成的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="exception">要在其中完成工作的例外狀況。</param>
      <returns>發生錯誤的工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
      <summary>建立以指定例外狀況完成的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="exception">要在其中完成工作的例外狀況。</param>
      <typeparam name="TResult">工作傳回的結果的類型。</typeparam>
      <returns>發生錯誤的工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
      <summary>建立已成功完成具有指定之結果的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="result">要儲存到完成的工作的結果。</param>
      <typeparam name="TResult">工作傳回的結果的類型。</typeparam>
      <returns>成功完成的工作。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.GetAwaiter">
      <summary>取得用來等候這個 <see cref="T:System.Threading.Tasks.Task" /> 的 awaiter。</summary>
      <returns>awaiter 執行個體。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的 ID。</summary>
      <returns>系統指派給這個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的識別項。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體是否因取消才完成執行。</summary>
      <returns>如果工作是由於取消而完成則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>取得值，這個值表示工作是否已經完成。</summary>
      <returns>
        <see langword="true" />如果工作已完成 (亦即, 工作是三個最終狀態的其中一個<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />:、 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />或<see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />), <see langword="false" />則為, 否則為。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" /> 是否因未處理的例外狀況才完成。</summary>
      <returns>如果工作擲回未處理的例外狀況則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
      <summary>將指定在執行緒集區執行工作排入佇列，並傳回代表該工作的 <see cref="T:System.Threading.Tasks.Task" /> 物件。</summary>
      <param name="action">要以非同步方式執行的工作</param>
      <returns>表示已進入佇列要在 ThreadPool 中執行之工作 (work) 的工作 (task)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
      <summary>將指定在執行緒集區執行工作排入佇列，並傳回代表該工作的 <see cref="T:System.Threading.Tasks.Task" /> 物件。 取消語彙基元允許取消工作。</summary>
      <param name="action">要以非同步方式執行的工作</param>
      <param name="cancellationToken">可以用來取消工作的取消語彙基元</param>
      <returns>代表已進入佇列，並要在執行緒集區中執行之工作 (work) 的工作 (task)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消這項工作。</exception>
      <exception cref="T:System.ObjectDisposedException">與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
      <summary>將指定在執行緒集區執行的工作排入佇列，並傳回 <paramref name="function" /> 所傳回之工作的 Proxy。</summary>
      <param name="function">要以非同步方式執行的工作</param>
      <returns>表示 <paramref name="function" /> 所傳回工作之 Proxy 的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>將指定在執行緒集區執行的工作排入佇列，並傳回 <paramref name="function" /> 所傳回之工作的 Proxy。</summary>
      <param name="function">要以非同步方式執行的工作。</param>
      <param name="cancellationToken">應該用來取消工作的取消語彙基元。</param>
      <returns>表示 <paramref name="function" /> 所傳回工作之 Proxy 的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消這項工作。</exception>
      <exception cref="T:System.ObjectDisposedException">與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
      <summary>將指定在執行緒集區執行工作排入佇列，並傳回代表該工作的 <see cref="T:System.Threading.Tasks.Task`1" /> 物件。</summary>
      <param name="function">要以非同步方式執行的工作。</param>
      <typeparam name="TResult">工作的傳回類型。</typeparam>
      <returns>代表已排入佇列要在執行緒集區中執行之工作 (work) 的工作 (task) 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>將指定在執行緒集區執行工作排入佇列，並傳回代表該工作的 <see langword="Task(TResult)" /> 物件。 取消語彙基元允許取消工作。</summary>
      <param name="function">要以非同步方式執行的工作</param>
      <param name="cancellationToken">應該用來取消工作的取消語彙基元</param>
      <typeparam name="TResult">工作的結果類型。</typeparam>
      <returns>
        <see langword="Task(TResult)" />，代表已排入佇列要在執行緒集區中執行的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消這項工作。</exception>
      <exception cref="T:System.ObjectDisposedException">與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>將指定在執行緒集區執行的工作排入佇列，並傳回 <paramref name="function" /> 所傳回之 <see langword="Task(TResult)" /> 的 Proxy。</summary>
      <param name="function">要以非同步方式執行的工作</param>
      <typeparam name="TResult">Proxy 工作傳回的結果類型。</typeparam>
      <returns>
        <see langword="Task(TResult)" />，代表 <see langword="Task(TResult)" /> 所傳回之 <paramref name="function" /> 的 Proxy。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>將指定在執行緒集區執行的工作排入佇列，並傳回 <paramref name="function" /> 所傳回之 <see langword="Task(TResult)" /> 的 Proxy。</summary>
      <param name="function">要以非同步方式執行的工作</param>
      <param name="cancellationToken">應該用來取消工作的取消語彙基元</param>
      <typeparam name="TResult">Proxy 工作傳回的結果類型。</typeparam>
      <returns>
        <see langword="Task(TResult)" />，代表 <see langword="Task(TResult)" /> 所傳回之 <paramref name="function" /> 的 Proxy。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消這項工作。</exception>
      <exception cref="T:System.ObjectDisposedException">與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>在目前的 <see cref="T:System.Threading.Tasks.Task" /> 上同步執行 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 執行個體已經過處置。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是處於有效的啟動狀態。 它可能已經啟動、執行或取消，也可能已透過不支援直接排程的方式建立。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>在提供的 <see cref="T:System.Threading.Tasks.Task" /> 上同步執行 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <param name="scheduler">排程器，要嘗試在其上以內嵌方式執行這個工作。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 執行個體已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是處於有效的啟動狀態。 它可能已經啟動、執行或取消，也可能已透過不支援直接排程的方式建立。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>啟動 <see cref="T:System.Threading.Tasks.Task" />，並排定它在目前的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 執行個體已經過處置。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是處於有效的啟動狀態。 它可能已經啟動、執行或取消，也可能已透過不支援直接排程的方式建立。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>啟動 <see cref="T:System.Threading.Tasks.Task" />，並排定它在指定的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行。</summary>
      <param name="scheduler">要與這個工作產生關聯，並用於執行這個工作的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是處於有效的啟動狀態。 它可能已經啟動、執行或取消，也可能已透過不支援直接排程的方式建立。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 執行個體已經過處置。</exception>
      <exception cref="T:System.Threading.Tasks.TaskSchedulerException">排程器無法將這項工作排入佇列。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>取得這個工作的 <see cref="T:System.Threading.Tasks.TaskStatus" />。</summary>
      <returns>這個工作執行個體目前的 <see cref="T:System.Threading.Tasks.TaskStatus" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>取得 <see cref="T:System.Threading.WaitHandle" />，這個項目可用來等候工作完成。</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" />，可用來等候工作完成。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>取得作業是否已同步完成的指示。</summary>
      <returns>如果作業同步完成則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.AggregateException">工作已取消。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 物件。  
-或- 
在工作執行期間擲回例外狀況。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含例外狀況的相關資訊。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 在指定的毫秒數內完成執行。</summary>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns>如果 <see langword="true" /> 在指定的時間內執行完成，則為 <see cref="T:System.Threading.Tasks.Task" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.AggregateException">工作已取消。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 物件。  
-或- 
在工作執行期間擲回例外狀況。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含例外狀況的相關資訊。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。 如果在工作完成之前經過逾時間隔或取消語彙基元已取消，則等候會終止。</summary>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">等候工作完成時要觀察的取消語彙基元。</param>
      <returns>如果 <see langword="true" /> 在指定的時間內執行完成，則為 <see cref="T:System.Threading.Tasks.Task" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.AggregateException">工作已取消。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 物件。  
-或- 
在工作執行期間擲回例外狀況。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含例外狀況的相關資訊。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。 如果在工作完成之前取消語彙基元已取消，則等候會終止。</summary>
      <param name="cancellationToken">等候工作完成時要觀察的取消語彙基元。</param>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException">此工作已經處置。</exception>
      <exception cref="T:System.AggregateException">工作已取消。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 物件。  
-或- 
在工作執行期間擲回例外狀況。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含例外狀況的相關資訊。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 在指定的時間間隔內完成執行。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <returns>如果 <see langword="true" /> 在指定的時間內執行完成，則為 <see cref="T:System.Threading.Tasks.Task" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.AggregateException">工作已取消。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 物件。  
-或- 
在工作執行期間擲回例外狀況。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含例外狀況的相關資訊。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一個或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
      <exception cref="T:System.AggregateException">至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體已取消。 如果工作已取消，<see cref="T:System.AggregateException" /> 例外狀況會在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" /> 例外狀況。  
-或- 
至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在執行期間擲回例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等待所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件在指定的毫秒數內完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns>如果所有 <see langword="true" /> 執行個體在指定的時間內執行完成，則為 <see cref="T:System.Threading.Tasks.Task" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一個或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體已取消。 如果工作已取消，<see cref="T:System.AggregateException" /> 會在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  
-或- 
至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在執行期間擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等待所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件在指定的毫秒數內完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>如果所有 <see langword="true" /> 執行個體在指定的時間內執行完成，則為 <see cref="T:System.Threading.Tasks.Task" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一個或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體已取消。 如果工作已取消，<see cref="T:System.AggregateException" /> 會在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  
-或- 
至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在執行期間擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體已取消。 如果工作已取消，<see cref="T:System.AggregateException" /> 會在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  
-或- 
至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在執行期間擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一個或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件已經處置。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等候所有提供的可取消 <see cref="T:System.Threading.Tasks.Task" /> 物件在指定的時間間隔內完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <returns>如果所有 <see langword="true" /> 執行個體在指定的時間內執行完成，則為 <see cref="T:System.Threading.Tasks.Task" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一個或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體已取消。 如果工作已取消，<see cref="T:System.AggregateException" /> 會在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  
-或- 
至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在執行期間擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>等候任一提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <returns>
        <paramref name="tasks" /> 陣列中已完成之 <see cref="T:System.Threading.Tasks.Task" /> 的索引。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件在指定的毫秒數內完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成工作的索引；如果發生逾時，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等待所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件在指定的毫秒數內完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成工作的索引；如果發生逾時，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成工作的索引。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等候其中任何一個提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件在指定的時間間隔內完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成工作的索引；如果發生逾時，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 屬性是不等於 -1 的負數，-1 代表等候逾時為無限。 
-或- 
<paramref name="timeout" /> 引數的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 屬性大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>建立一個工作，當可列舉集合中的所有 <see cref="T:System.Threading.Tasks.Task" /> 物件完成時，會完成此工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <returns>工作，代表所有提供的工作已完成。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />集合包含 <see langword="null" /> 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
      <summary>建立一個工作，當陣列中的所有 <see cref="T:System.Threading.Tasks.Task" /> 物件完成時，會完成此工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <returns>工作，代表所有提供的工作已完成。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />陣列包含 <see langword="null" /> 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>建立一個工作，當可列舉集合中的所有 <see cref="T:System.Threading.Tasks.Task`1" /> 物件完成時，會完成此工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <typeparam name="TResult">完成的工作的類型。</typeparam>
      <returns>工作，代表所有提供的工作已完成。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />集合包含 <see langword="null" /> 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
      <summary>建立一個工作，當陣列中的所有 <see cref="T:System.Threading.Tasks.Task`1" /> 物件完成時，會完成此工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <typeparam name="TResult">完成的工作的類型。</typeparam>
      <returns>工作，代表所有提供的工作已完成。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />陣列包含 <see langword="null" /> 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>建立當任一提供的工作完成時才會完成的工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <returns>工作，代表其中一個提供的工作已完成。  傳回的工作結果為已完成的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />陣列包含 null 工作或是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
      <summary>建立當任一提供的工作完成時才會完成的工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <returns>工作，代表其中一個提供的工作已完成。  傳回的工作結果為已完成的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />陣列包含 null 工作或是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>建立當任一提供的工作完成時才會完成的工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <typeparam name="TResult">完成的工作的類型。</typeparam>
      <returns>工作，代表其中一個提供的工作已完成。  傳回的工作結果為已完成的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />陣列包含 null 工作或是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
      <summary>建立當任一提供的工作完成時才會完成的工作。</summary>
      <param name="tasks">要等待完成的工作。</param>
      <typeparam name="TResult">完成的工作的類型。</typeparam>
      <returns>工作，代表其中一個提供的工作已完成。  傳回的工作結果為已完成的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" />陣列包含 null 工作或是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Yield">
      <summary>建立會在等候時以非同步方式遞交 (Yield) 給目前內容的 awaitable 工具。</summary>
      <returns>內容，這個內容會在受到等候時非同步轉換回等候當時的最新內容。 如果目前的 <see cref="T:System.Threading.SynchronizationContext" /> 為非 null，即視為目前的內容。 否則，將與目前執行之工作相關聯的工作排程器視為目前的內容。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>表示可傳回值的非同步作業。</summary>
      <typeparam name="TResult">這個 <see cref="T:System.Threading.Tasks.Task`1" /> 所產生之結果的型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>使用指定的函式，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>使用指定的函式，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="cancellationToken">要指派給這個工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函式和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函式和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>使用指定的函式和狀態，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示函式所需的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示函式所需的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。 當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示函式所需的資料。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
      <summary>設定用來等候這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的 awaiter。</summary>
      <param name="continueOnCapturedContext">true 表示嘗試將接續封送處理回擷取的原始內容，否則為 false。</param>
      <returns>等候這項工作所用的物件。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時，會接收狀態資訊並執行的接續。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 執行時，會將已完成的工作和呼叫端提供的狀態物件當做引數傳遞給委派。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續動作所使用的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>建立當目標工作完成時非同步執行的接續。</summary>
      <param name="continuationAction">當前項 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的可取消接續。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要傳遞給新接續工作的取消權杖。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會根據 <paramref name="continuationOptions" /> 中指定的條件執行的接續。</summary>
      <param name="continuationAction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會根據 <paramref name="continuationOptions" /> 中指定的條件執行的接續。</summary>
      <param name="continuationAction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續。</summary>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會根據 <paramref name="continuationOptions" /> 中指定的條件執行的接續。</summary>
      <param name="continuationFunction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的函式。  
執行時，會將這個完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會根據 <paramref name="continuationOptions" /> 中指定的條件執行的接續。</summary>
      <param name="continuationFunction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的函式。  
執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。 這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值不正確。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續工作。</summary>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。 當執行時，完成的工作會傳遞至委派，並以呼叫端提供狀態的物件做為引數。</param>
      <param name="state">物件，表示接續函式所使用的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>提供 Factory 方法的存取，這些 Factory 方法用於建立及設定 <see cref="T:System.Threading.Tasks.Task`1" /> 執行個體。</summary>
      <returns>Factory 物件，可以建立各種不同的 <see cref="T:System.Threading.Tasks.Task`1" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
      <summary>取得用來等候這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的 awaiter。</summary>
      <returns>awaiter 執行個體。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果值。</summary>
      <returns>這個<see cref="T:System.Threading.Tasks.Task`1" />的結果值, 與工作的型別參數屬於相同的型別。</returns>
      <exception cref="T:System.AggregateException">工作已取消。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 物件。  
-或- 
在工作執行期間擲回例外狀況。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含例外狀況的相關資訊。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>指定使用 <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /> 或 <see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /> 方法建立之工作的行為。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>指定將接續 (如果是子工作) 附加至工作階層中的父代。 只有在接續的前項也是子工作時，該接續才可以是子工作。 根據預設，子工作 (即外部工作所建立的內部工作) 會在其父代之外單獨執行。 您可以使用 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /> 選項，使父工作與子工作同步化。  
請注意，若父工作是以 <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /> 選項進行設定，則子工作中的 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 選項無效，且會以中斷連結的子工作方式執行子工作。  
如需詳細資訊，請參閱附加與中斷連結的子工作。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
      <summary>指定以 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 選項建立的任何子工作 (亦即這個接續所建立的任何巢狀內部工作)，以及以附加子工作方式執行的嘗試，都將無法附加至父工作，且會改為以中斷連結的子工作方式執行。 如需詳細資訊，請參閱 Attached and Detached Child Tasks。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>指定應該要同步執行接續工作。 指定這個選項時，接續會在造成前項工作轉換為最終狀態的同一個執行緒上執行。 如果建立接續時前項已完成，則接續會在建立接續的執行緒上執行。 如果前項的 <see cref="T:System.Threading.CancellationTokenSource" /> 在 <see langword="finally" /> 區塊 (在 Visual Basic 中為<see langword="Finally" /> ) 中遭處置，則會在該 <see langword="finally" /> 區塊中執行具有這個選項的接續。 只有執行時間很短的接續工作才適合以同步方式執行。  
因為工作以同步方式執行，所以不需要呼叫方法 (如 <see cref="M:System.Threading.Tasks.Task.Wait" />)，以確保呼叫執行緒等待工作完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
      <summary>指定接續透過呼叫 <see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /> 或 <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" /> 等方法所建立的工作，會將預設排程器 (<see cref="P:System.Threading.Tasks.TaskScheduler.Default" />) 視為目前的排程器，而不是這個接續執行依據的排程器。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
      <summary>在接續取消的情況下，防止接續在前項完成之前完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>指定接續會是長時間執行的繁複作業。 這會提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 可能會發生過度訂閱的狀況。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>如果未指定任何接續選項，則指定在執行接續時，應該使用預設行為。 當前項工作完成時，接續會以非同步方式執行，而不論前項的最終 <see cref="P:System.Threading.Tasks.Task.Status" /> 屬性值為何。 如果接續為子工作，則會建立為中斷連結的巢狀工作。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>指定當前項工作取消時，不應該排定接續工作。 如果前項在完成時的 <see cref="P:System.Threading.Tasks.Task.Status" /> 屬性為 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />，則取消前項。 這個選項對多工接續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>指定當前項擲回未處理的例外狀況時，不應該排程接續工作。 如果前項在完成時的 <see cref="P:System.Threading.Tasks.Task.Status" /> 屬性為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />，則擲回未處理的例外狀況。 這個選項對多工接續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>指定當前項執行完成時，不應該排程接續工作。 如果前項在完成時的 <see cref="P:System.Threading.Tasks.Task.Status" /> 屬性為 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />，則執行到完成。 這個選項對多工接續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>指定只有在取消接續的前項時，才應該排定接續。  如果前項在完成時的 <see cref="P:System.Threading.Tasks.Task.Status" /> 屬性為 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />，則取消前項。 這個選項對多工接續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>指定只有在前項擲回未處理的例外狀況時，才應排程接續工作。 如果前項在完成時的 <see cref="P:System.Threading.Tasks.Task.Status" /> 屬性為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />，則擲回未處理的例外狀況。  
<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /> 選項可確保前項的 <see cref="P:System.Threading.Tasks.Task.Exception" /> 屬性不是 <see langword="null" />。 您可以使用該屬性來攔截例外狀況，並查看是哪一種例外狀況導致工作錯誤。 如果您未存取 <see cref="P:System.Threading.Tasks.Task.Exception" /> 屬性，則會形成未處理的例外狀況。 此外，如果您嘗試存取已取消或已發生錯誤之工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性，將會擲回新的例外狀況。  
這個選項對多工接續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>指定只有在接續的前項徹底執行後，才應該排定接續。 如果前項在完成時的 <see cref="P:System.Threading.Tasks.Task.Status" /> 屬性為 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />，則執行到完成。 這個選項對多工接續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 依序排程工作，讓先排程的工作早執行的機率較高，後排程的工作晚執行的機率較高。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
      <summary>指定應該要非同步執行接續工作。  這個選項優先於 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>指定旗標，這些旗標控制建立和執行工作時的選擇性行為。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>指定將工作附加至工作階層中的父代。 根據預設，子工作 (即外部工作所建立的內部工作) 會在其父代之外單獨執行。 您可以使用 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /> 選項，使父工作與子工作同步化。  
請注意，若父工作是以 <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /> 選項進行設定，則子工作中的 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 選項無效，且會以中斷連結的子工作方式執行子工作。  
如需詳細資訊，請參閱附加與中斷連結的子工作。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach">
      <summary>指定嘗試以連結的子工作方式執行的任何子工作 (亦即以 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 選項所建立)，都將無法連結至父工作，且會改為以中斷連結的子工作方式執行。 如需詳細資訊，請參閱 附加與中斷連結的子工作。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.HideScheduler">
      <summary>防止環境排程器被視為所建立工作中的目前排程器。 表示如 StartNew 或 ContinueWith 這樣在已建立工作中執行的作業會將 <see cref="P:System.Threading.Tasks.TaskScheduler.Default" /> 視為目前排程器。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>指定工作將會是長時間執行的廣泛作業，涉及比細部系統更少、更大的元件。 這會提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 可能會發生過度訂閱的狀況。 過度訂閱可讓您建立比可用硬體執行緒數目更多的執行緒。 它也提示工作排程器可能需要再加入一個執行緒來執行工作，才不會阻礙本機執行緒集區佇列上其他執行緒或工作項目的進度。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>指定應該使用預設行為。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 盡量依公平法則排定工作，即盡量讓較早排定的工作較早執行，並讓較晚排定的工作較晚執行。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously">
      <summary>強制以非同步方式執行加入目前工作的接續。  
請注意，從 .NET Framework 4.6 開始，<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 列舉中可以使用 <see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously" /> 成員。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>提供建立和排程 <see cref="T:System.Threading.Tasks.Task" /> 物件的支援。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫 Factory 方法時明確指定另一個 CancellationToken，否則為將指派給這個 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 所建立之工作的 <see cref="T:System.Threading.Tasks.TaskFactory" />。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫 Factory 方法時明確指定另一個 CancellationToken，否則為將指派給這個 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 所建立之工作的預設 <see cref="T:System.Threading.Tasks.TaskFactory" />。</param>
      <param name="creationOptions">使用這個 TaskFactory 建立工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">使用這個 TaskFactory 建立接續工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <param name="scheduler">預設 <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定任何以這個 TaskFactory 建立的工作。 Null 值表示應該使用 TaskScheduler.Current。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定了無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞。  
-或- 
<paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="creationOptions">使用這個 TaskFactory 建立工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">使用這個 TaskFactory 建立接續工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定了無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞。  
-或- 
<paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="scheduler">預設 <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定任何以這個 TaskFactory 建立的工作。 Null 值表示應該使用目前 TaskScheduler。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>取得這個工作 Factory 的預設取消語彙基元。</summary>
      <returns>這個工作 Factory 的預設工作取消語彙基元。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>取得這個工作 Factory 的預設工作接續選項。</summary>
      <returns>這個工作 Factory 的預設工作接續選項。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。</param>
      <param name="scheduler">用來排定新接續工作的物件。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。 不支援 NotOn* 和 OnlyOn* 成員。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。 不支援 NotOn* 和 OnlyOn* 成員。</param>
      <param name="scheduler">用來排定新接續工作的物件。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。 不支援 NotOn* 和 OnlyOn* 成員。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。 不支援 NotOn* 和 OnlyOn* 成員。</param>
      <param name="scheduler">用來排定新接續工作的物件。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。 不支援 NotOn* 和 OnlyOn* 成員。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。 不支援 NotOn* 和 OnlyOn* 成員。</param>
      <param name="scheduler">用來排定新接續工作的物件。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>當一組指定的工作已完成時，建立啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">列舉值的位元組合，這些值會控制新接續工作的行為。 不支援 NotOn* 和 OnlyOn* 成員。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之工作相關聯的結果的類型。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置之 <paramref name="tasks" /> 陣列中的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列為空白或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
 <paramref name="cancellationToken" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationAction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationAction" /> 為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationAction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationFunction" /> 為 <see langword="null" />。  
-或- 
 <paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationAction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationAction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationAction" /> 為 <see langword="null" />。  
-或- 
paramref name="scheduler" /&gt; 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationAction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 <see langword="null" /> 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 為 <see langword="null" />。  
-或- 
 <paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 相關聯的結果的類型。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>取得這個工作 Factory 的預設工作建立選項。</summary>
      <returns>這個工作 Factory 的預設工作建立選項。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 TaskCreationOptions 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目會在指定的 <see cref="T:System.IAsyncResult" /> 完成時執行結束方法動作。</summary>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">動作委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目會在指定的 <see cref="T:System.IAsyncResult" /> 完成時執行結束方法動作。</summary>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">動作委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">paramref name="creationOptions" /&gt; 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目會在指定的 <see cref="T:System.IAsyncResult" /> 完成時執行結束方法動作。</summary>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">動作委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程可執行結束方法的工作。</param>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程可執行結束方法的工作。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 <see langword="null" />。  
-或-
<paramref name="endMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 TaskCreationOptions 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
 <paramref name="endMethod" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>取得這個工作 Factory 的預設工作排程器。</summary>
      <returns>這個工作 Factory 的預設工作排程器。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>建立並啟動工作。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。  
-或- 
 <paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 TaskCreationOptions 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。  
-或-
<paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 <see langword="null" />。  
-或- 
 <paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 <see langword="null" />。  
-或- 
 <paramref name="scheduler" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task`1" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task`1" /> 取得的結果類型。</typeparam>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定無效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>提供建立和排程 <see cref="T:System.Threading.Tasks.Task`1" /> 物件的支援。</summary>
      <typeparam name="TResult">此類別的方法所建立之 <see cref="T:System.Threading.Tasks.Task`1" /> 物件的傳回值。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫處理站方法時明確指定另一個取消語彙基元，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的預設取消語彙基元。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫處理站方法時明確指定另一個取消語彙基元，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的預設取消語彙基元。</param>
      <param name="creationOptions">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立工作時要採用的預設選項。</param>
      <param name="continuationOptions">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立接續工作時要採用的預設選項。</param>
      <param name="scheduler">預設排程器，用來排定任何使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 所建立的工作。 null 值表示應該使用 <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了無效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="creationOptions">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立工作時要採用的預設選項。</param>
      <param name="continuationOptions">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立接續工作時要採用的預設選項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了無效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="scheduler">排程器，用來排定任何使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 所建立的工作。 null 值表示應該使用目前的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>取得這個工作 Factory 的預設取消語彙基元。</summary>
      <returns>這個工作 Factory 的預設取消語彙基元。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>取得這個工作 Factory 的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 列舉值。</summary>
      <returns>其中一個列舉值，這個值會指定這個工作 Factory 的預設接續選項。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
 <paramref name="continuationFunction" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <param name="scheduler">用來排定所建立之接續工作的排程器。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了無效的值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <param name="scheduler">用來排定所建立之接續工作的排程器。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續工作。</summary>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值或為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 null。  
-或- 
<paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <param name="scheduler">用來排定所建立之接續工作的工作排程器。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的列舉值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續工作。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的取消語彙基元。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。  
-或- 
已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的接續工作。</summary>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">其中一個列舉值，這些值會控制已建立之接續工作的行為。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值無效。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" />陣列中的其中一個項目已經過處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 陣列為 <see langword="null" />。  
-或- 
<paramref name="continuationFunction" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定了無效的列舉值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 值。  
-或- 
<paramref name="tasks" /> 陣列是空的。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>取得這個工作 Factory 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 列舉值。</summary>
      <returns>其中一個列舉值，這個值會指定這個工作 Factory 的預設建立選項。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task`1" />，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>建立工作，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立工作，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <returns>表示非同步作業的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立工作，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <param name="scheduler">工作排程器，用來排程可執行結束方法的工作。</param>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">控制所建立 <see cref="T:System.Threading.Tasks.Task`1" /> 之行為的物件。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立工作，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">控制所建立工作之行為的物件。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數類型。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數類型。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數類型。</typeparam>
      <returns>建立的工作，表示非同步作業。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="endMethod" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>取得這個工作 Factory 的工作排程器。</summary>
      <returns>這個工作 Factory 的工作排程器。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <param name="cancellationToken">要指派給新工作的取消語彙基元。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <param name="cancellationToken">要指派給新工作的取消語彙基元。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <param name="scheduler">用來排定所建立之工作的工作排程器。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派所要使用的資料。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派所要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的取消語彙基元。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派所要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的取消語彙基元。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <param name="scheduler">用來排定所建立之工作的工作排程器。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的取消語彙基元來源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。  
-或- 
<paramref name="scheduler" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動工作。</summary>
      <param name="function">函式委派，會傳回將可透過工作使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派所要使用的資料。</param>
      <param name="creationOptions">其中一個列舉值，這些值會控制已建立之工作的行為。</param>
      <returns>已開始的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 參數指定了無效的值。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>表示物件，這個物件會處理將工作排入至執行緒上的低階工作。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>取得與目前執行之工作相關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>傳回與目前執行之工作相關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>取得 .NET Framework 提供的預設 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行個體。</summary>
      <returns>傳回預設 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行個體。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>建立與目前 <see cref="T:System.Threading.SynchronizationContext" />關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>與目前的 <see cref="T:System.Threading.SynchronizationContext" /> 關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />，由 <see cref="P:System.Threading.SynchronizationContext.Current" /> 決定。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 SynchronizationContext 不可當做 TaskScheduler 使用。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>僅限偵錯工具支援，針對目前已排入至排程器中等候執行的 <see cref="T:System.Threading.Tasks.Task" /> 執行個體，產生可列舉項目。</summary>
      <returns>可列舉項目，允許偵錯工具在目前已排入至這個排程器中的工作之間周遊。</returns>
      <exception cref="T:System.NotSupportedException">這個排程器無法在這個階段產生佇列的工作清單。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</summary>
      <returns>傳回這個 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>表示這個 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 可以支援的最大並行層級。</summary>
      <returns>傳回整數，表示最大並行層級。 預設排程器會傳回 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>將 <see cref="T:System.Threading.Tasks.Task" /> 排入至排程器。</summary>
      <param name="task">要排入的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>嘗試清除之前排入至這個排程器的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="task">要清除的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>布林值，表示是否已經成功清除 <paramref name="task" /> 引數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>嘗試在這個排程器上執行提供的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="task">要執行的 <see cref="T:System.Threading.Tasks.Task" /> 物件。</param>
      <returns>布林值，如果已成功執行 <paramref name="task" /> 則為 true，否則為 false。 執行失敗的常見原因是之前已執行過該工作，或另一個執行緒正在執行該工作。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="task" /> 與此排程器無關。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>判斷是否可以在這個呼叫中同步執行所提供的 <see cref="T:System.Threading.Tasks.Task" />，如果可以，即加以執行。</summary>
      <param name="task">要執行的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <param name="taskWasPreviouslyQueued">布林值，表示之前是否已排入過工作。 如果這個參數為 True，則可能之前已排入 (排定) 過工作，如果為 False，則表示未排入過工作，系統便會隨即執行此呼叫，以內嵌方式執行工作，而不將它排入佇列。</param>
      <returns>布林值，表示工作是否以內嵌方式執行。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="task" /> 已經執行。</exception>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>當錯誤工作未觀察到的例外狀況將觸發例外狀況擴大原則時發生，根據預設，這會終止處理程序。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>表示 <see cref="T:System.Threading.Tasks.Task" /> 開發週期中的目前階段。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>工作確認取消動作，不論是因為工作在語彙基元處於信號狀態時使用自己的 CancellationToken 擲回 OperationCanceledException，或是工作的 CancellationToken 信號在工作開始執行之前便已存在。 如需詳細資訊，請參閱工作取消。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>工作已初始化但尚未排程。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>工作因未處理的例外狀況而完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>工作已成功完成執行。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>工作正在執行，但尚未完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>工作正在等候由 .NET Framework 基礎結構從內部啟動並排程。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>工作已完成執行，而且在暗中等候附加的子工作完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>工作已排定執行，但尚未開始執行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>提供當未觀察到錯誤 <see cref="T:System.Threading.Tasks.Task" /> 的例外狀況時，所引發事件的資料。</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>使用未觀察的例外狀況，初始化 <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> 類別的新執行個體。</summary>
      <param name="exception">已變成未觀察對象的例外狀況。</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>變成未觀察到的例外狀況。</summary>
      <returns>變成未觀察到的例外狀況。</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>取得這個例外狀況是否已標記為「已觀察」。</summary>
      <returns>如果這個例外狀況已標記為「已觀察」則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>將 <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> 標記為「已觀察」，讓其無法觸發例外狀況擴大原則 (此原則預設會讓處理序結束)。</summary>
    </member>
    <member name="T:System.Threading.Tasks.ValueTask">
      <summary>提供非同步作業的可等候結果。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.#ctor(System.Threading.Tasks.Sources.IValueTaskSource,System.Int16)">
      <summary>使用所提供的 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 物件 (代表作業)，初始化 <see cref="T:System.Threading.Tasks.ValueTask" /> 類別的新執行個體。</summary>
      <param name="source">代表作業的物件。</param>
      <param name="token">傳遞到 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 的不透明值</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.#ctor(System.Threading.Tasks.Task)">
      <summary>使用所提供之代表作業的工作，初始化 <see cref="T:System.Threading.Tasks.ValueTask" /> 類別的新執行個體。</summary>
      <param name="task">代表作業的工作。</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.AsTask">
      <summary>擷取代表這個 <see cref="T:System.Threading.Tasks.ValueTask" /> 的 <see cref="T:System.Threading.Tasks.Task" /> 物件。</summary>
      <returns>如果存在，則為包裝在這個 <see cref="T:System.Threading.Tasks.ValueTask" /> 中的 <see cref="T:System.Threading.Tasks.Task" /> 物件；否則為代表結果的新 <see cref="T:System.Threading.Tasks.Task" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.ConfigureAwait(System.Boolean)">
      <summary>設定此值的 awaiter。</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> 表示嘗試將接續封送處理回擷取的內容，否則為 <see langword="false" />。</param>
      <returns>所設定的 awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Equals(System.Object)">
      <summary>判斷指定的物件和目前的 <see cref="T:System.Threading.Tasks.ValueTask" /> 執行個體是否相等。</summary>
      <param name="obj">要與目前物件比較的物件。</param>
      <returns>如果指定的物件等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Equals(System.Threading.Tasks.ValueTask)">
      <summary>判斷指定的 <see cref="T:System.Threading.Tasks.ValueTask" /> 物件是否等於目前的 <see cref="T:System.Threading.Tasks.ValueTask" /> 物件。</summary>
      <param name="other">要與目前物件比較的物件。</param>
      <returns>如果指定的物件等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.GetAwaiter">
      <summary>建立此值的 awaiter。</summary>
      <returns>awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCanceled">
      <summary>取得值，指出這個物件是否代表已取消的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表已取消的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCompleted">
      <summary>取得值，指出這個物件是否代表已完成的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表已完成的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCompletedSuccessfully">
      <summary>取得值，指出這個物件是否代表已成功完成的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表成功完成的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsFaulted">
      <summary>取得值，指出這個物件是否代表失敗的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表失敗的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.op_Equality(System.Threading.Tasks.ValueTask,System.Threading.Tasks.ValueTask)">
      <summary>比較兩個 <see cref="T:System.Threading.Tasks.ValueTask" /> 值是否相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>若兩個 <see cref="T:System.Threading.Tasks.ValueTask" /> 值相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.op_Inequality(System.Threading.Tasks.ValueTask,System.Threading.Tasks.ValueTask)">
      <summary>判斷兩個 <see cref="T:System.Threading.Tasks.ValueTask" /> 值是否不相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>若兩個 <see cref="T:System.Threading.Tasks.ValueTask" /> 值不相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Preserve">
      <summary>取得未來可以隨時使用的 <see cref="T:System.Threading.Tasks.ValueTask" />。</summary>
      <returns>保留的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.ValueTask`1">
      <summary>提供包裝 <see cref="T:System.Threading.Tasks.Task`1" /> 和 <typeparamref name="TResult" /> 的實值型別，只會使用其中之一。</summary>
      <typeparam name="TResult">結果。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
      <summary>使用所提供之成功作業的結果，初始化 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 類別的新執行個體。</summary>
      <param name="result">結果。</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Sources.IValueTaskSource{`0},System.Int16)">
      <summary>使用代表作業的 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 物件初始化 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 類別的新執行個體。</summary>
      <param name="source">來源。</param>
      <param name="token">傳遞給 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 的不透明值。</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>使用所提供之代表作業的工作，初始化 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 類別的新執行個體。</summary>
      <param name="task">工作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 引數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.AsTask">
      <summary>擷取代表這個 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的 <see cref="T:System.Threading.Tasks.Task`1" /> 物件。</summary>
      <returns>如果存在，則為包裝在這個 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 中的 <see cref="T:System.Threading.Tasks.Task`1" /> 物件；否則為代表結果的新 <see cref="T:System.Threading.Tasks.Task`1" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
      <summary>設定此值的 awaiter。</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> 表示嘗試將接續封送處理回擷取的內容，否則為 <see langword="false" />。</param>
      <returns>所設定的 awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的物件。</summary>
      <param name="obj">要與目前物件比較的物件。</param>
      <returns>如果指定的物件等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
      <summary>判斷指定的 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 物件是否等於目前的 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 物件。</summary>
      <param name="other">要與目前物件比較的物件。</param>
      <returns>如果指定的物件等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
      <summary>建立此值的 awaiter。</summary>
      <returns>awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前物件的雜湊碼。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
      <summary>取得值，指出這個物件是否代表已取消的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表已取消的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
      <summary>取得值，指出這個物件是否代表已完成的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表已完成的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
      <summary>取得值，指出這個物件是否代表已成功完成的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表成功完成的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
      <summary>取得值，指出這個物件是否代表失敗的作業。</summary>
      <returns>
        <see langword="true" />如果這個物件代表失敗的作業, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
      <summary>比較兩個值是否相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>若兩個 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 值相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
      <summary>判斷兩個 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 值是否不相等。</summary>
      <param name="left">要比較的第一個值。</param>
      <param name="right">要比較的第二個值。</param>
      <returns>若兩個 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 值不相等則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Preserve">
      <summary>取得未來可以隨時使用的 <see cref="T:System.Threading.Tasks.ValueTask`1" />。</summary>
      <returns>供未來使用的工作物件。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.Result">
      <summary>取得結果。</summary>
      <returns>結果。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>包含會指定無限逾時間隔的常數。 這個類別無法被繼承。</summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>用來為接受 <see cref="T:System.Int32" /> 參數之執行緒方法指定無限等候期間的常數。</summary>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>用來為接受 <see cref="T:System.TimeSpan" /> 參數之方法指定無限等候期間的常數。</summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>將等候共用資源獨佔存取權限的特定作業系統物件封裝起來。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>初始化 <see cref="T:System.Threading.WaitHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>釋放目前 <see cref="T:System.Threading.WaitHandle" /> 所持有的全部資源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>釋放 <see cref="T:System.Threading.WaitHandle" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>當在衍生類別中覆寫時，釋放 <see cref="T:System.Threading.WaitHandle" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="explicitDisposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Threading.WaitHandle.Handle">
      <summary>取得或設定原生 (Native) 的作業系統控制代碼。</summary>
      <returns>
        <see langword="IntPtr" />，代表原生作業系統控制代碼。 預設為 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 欄位的值。</returns>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>代表無效的原生作業系統控制代碼。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
      <summary>取得或設定原生 (Native) 的作業系統控制代碼。</summary>
      <returns>
        <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，代表原生作業系統控制代碼。</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
      <summary>發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個。</summary>
      <param name="toSignal">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</param>
      <param name="toWaitOn">要等候的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <returns>如果順利完成信號發出和等候，則為 <see langword="true" />；如果未完成等候，則不會傳回這個方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> 為 <see langword="null" />。  
-或- 
 <paramref name="toWaitOn" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</exception>
      <exception cref="T:System.PlatformNotSupportedException">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> 為號誌，且已經有完整計數。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
      <summary>發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 32 位元帶正負號的整數，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</summary>
      <param name="toSignal">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</param>
      <param name="toWaitOn">要等候的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <param name="millisecondsTimeout">整數，表示要等候的間隔。 如果值為 <see cref="F:System.Threading.Timeout.Infinite" /> (亦即 -1)，則會永遠等候。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> 為 <see langword="null" />。  
-或- 
 <paramref name="toWaitOn" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</exception>
      <exception cref="T:System.PlatformNotSupportedException">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</exception>
      <exception cref="T:System.InvalidOperationException">無法對 <see cref="T:System.Threading.WaitHandle" /> 發出信號，因為它可能會超過最大計數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
      <summary>發出一個 <see cref="T:System.Threading.WaitHandle" /> 信號並等候另一個，將逾時間隔指定為 <see cref="T:System.TimeSpan" />，並指定是否要先離開內容的同步處理網域，再進入等候狀態。</summary>
      <param name="toSignal">要發出的 <see cref="T:System.Threading.WaitHandle" /> 信號。</param>
      <param name="toWaitOn">要等候的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表要等候的間隔。 如果此值為 -1，則會無限期等候。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>如果順利完成信號發出和等候，則為 <see langword="true" />；如果完成信號發出但等候逾時，則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> 為 <see langword="null" />。  
-或- 
 <paramref name="toWaitOn" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">在擁有 <see cref="T:System.STAThreadAttribute" /> 的執行緒上呼叫此方法。</exception>
      <exception cref="T:System.PlatformNotSupportedException">在 Windows 98 或 Windows Millennium Edition 上不支援這個方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> 為號誌，且已經有完整計數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 判定為 -1 以外的負毫秒數目。  
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>等候指定陣列中的所有項目都收到信號。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列不能包含相同物件的多個參考。</param>
      <returns>當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則絕不會傳回這個方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。 -或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
-或- 
 <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.ArgumentException" />。  


            

 <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
-或- 
<see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已結束等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列無法包含相同物件 (複本) 的多個參考。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns>當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
-或- 
 <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.ArgumentException" />。  


            

 <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
-或- 
<see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.Int32" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列無法包含相同物件 (複本) 的多個參考。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
-或- 
 <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">
        <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
-或- 
<see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列不能包含相同物件的多個參考。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</param>
      <returns>當 <paramref name="waitHandles" /> 中的所有項目都收到信號時，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
-或- 
 <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.ArgumentException" />。  


            

 <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
-或- 
<see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已結束等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 值來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。 這個陣列不能包含相同物件的多個參考。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表要等候的毫秒數；或是 <see cref="T:System.TimeSpan" />，代表永遠等候的 -1 毫秒。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>當 <paramref name="waitHandles" /> 中的所有元素都收到訊號時，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。  
-或- 
 <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 2.0 或更新版本。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">
        <paramref name="waitHandles" /> 陣列包含重複的項目。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。  
-或- 
<see cref="T:System.STAThreadAttribute" /> 屬性會套用至目前執行緒的執行緒程序，且 <paramref name="waitHandles" /> 包含多個項目。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是沒有任何項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已結束等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>等候指定陣列中有任何項目收到信號。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
      <returns>滿足等候條件之物件的陣列索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>等候指定之陣列中有任何項目收到信號，使用 32 位元帶正負號的整數以指定時間間隔。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>等候指定陣列中有任何項目收到信號；使用 32 位元帶正負號的整數 (Signed Integer) 來指定時間間隔，並指定是否在等候之前先離開同步處理領域。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含任何項目的陣列。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>等候指定陣列中的所有項目都收到信號，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
      <param name="waitHandles">
        <see langword="WaitHandle" /> 陣列，包含目前執行個體將等候的物件。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="waitHandles" /> 陣列中的一或多個物件為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目超過系統允許的數目。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不具有項目的陣列，且 .NET Framework 版本為 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不具有元素的陣列，且 .NET Framework 版本為 2.0 (含) 以後版本。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 陣列在另一個應用程式定義域中包含 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到訊號為止。</summary>
      <returns>如果目前的執行個體有收到信號，則為 <see langword="true" />。 如果目前的執行個體一直沒有收到訊號，<see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 就一定不會傳回。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔 (以毫秒為單位)。</summary>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns>如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>封鎖目前執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 為 -1 以外的負數，表示無限逾時。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <returns>如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>封鎖目前執行緒，直到目前執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 來指定時間間隔，並指定是否要先離開同步處理網域，再開始等候。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，代表等候毫秒數；或是 <see cref="T:System.TimeSpan" />，代表無限期等候的 -1 毫秒。</param>
      <param name="exitContext">
        <see langword="true" /> 表示在等候 (如果在同步內容中) 前結束內容的同步處理網域，並於之後重新取得，否則為 <see langword="false" />。</param>
      <returns>如果目前的執行個體收到信號，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經過處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 為 -1 毫秒以外的負數，表示無限逾時。 
-或- 
 <paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">由於執行緒結束時未釋放 Mutex，已完成等候。 在 Windows 98 或 Windows Millennium Edition 上不擲回這個例外狀況。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體是另一個應用程式定義域中 <see cref="T:System.Threading.WaitHandle" /> 的 Transparent Proxy。</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>表示 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 作業在發出任何等候控制代碼信號之前便已逾時。 這個欄位是常數。</summary>
    </member>
    <member name="T:System.Threading.WaitHandleExtensions">
      <summary>提供便利的方法來使用等候控制代碼的安全控制代碼。</summary>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)">
      <summary>取得原生作業系統等候控制代碼的安全控制代碼。</summary>
      <param name="waitHandle">原生作業系統控制代碼。</param>
      <returns>包裝原生作業系統等候控制代碼的安全等候控制代碼。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandle" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)">
      <summary>設定原生作業系統等候控制代碼的安全控制代碼。</summary>
      <param name="waitHandle">將等候共用資源獨佔存取權的特定作業系統物件封裝起來的等候控制代碼。</param>
      <param name="value">包裝作業系統控制代碼的安全控制代碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandle" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>表示每個執行緒的靜態欄位值是唯一的。</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ThreadStaticAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>分配給處理或作業的時間已經過期時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件包含關於擲回例外狀況的序列物件資料。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含關於來源或目的端的內容資訊。 保留 <paramref name="context" /> 參數供日後使用，並可指定為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">類別名稱為 <see langword="null" /> 或 <see cref="P:System.Exception.HResult" /> 為零 (0)。</exception>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和內部例外狀況，初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>表示時間間隔。</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為指定的時數、分鐘數和秒數。</summary>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">這些參數會指定 <see cref="T:System.TimeSpan" /> 值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為指定的天數、時數、分鐘數和秒數。</summary>
      <param name="days">天數。</param>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">這些參數會指定 <see cref="T:System.TimeSpan" /> 值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為指定的天數、時數、分鐘數、秒數和毫秒數。</summary>
      <param name="days">天數。</param>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <param name="milliseconds">毫秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">這些參數會指定 <see cref="T:System.TimeSpan" /> 值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>將 <see cref="T:System.TimeSpan" /> 結構的新執行個體初始化為刻度的指定數目。</summary>
      <param name="ticks">以 100 奈秒為單位所表示的時段。</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，它的值為指定之 <see cref="T:System.TimeSpan" /> 物件與這個執行個體的總和。</summary>
      <param name="ts">要加入的時間間隔。</param>
      <returns>新的物件，表示這個執行個體的值加上 <paramref name="ts" /> 的值。</returns>
      <exception cref="T:System.OverflowException">產生的 <see cref="T:System.TimeSpan" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>比較兩個 <see cref="T:System.TimeSpan" /> 值並傳回整數，這個整數會指出第一個值比第二個值短、等長或較長。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>下列其中一個值。  
  值 
  說明 
  -1 
 <paramref name="t1" /> 短於 <paramref name="t2" />。  

  0 
 <paramref name="t1" /> 等於 <paramref name="t2" />。  

  1 
 <paramref name="t1" /> 長於 <paramref name="t2" />。</returns>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>比較這個執行個體和指定的物件，並傳回一個整數，表示這個執行個體短於、等於或長於指定的物件。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>下列其中一個值。  
  值 
  說明 
  -1 
  這個執行個體短於 <paramref name="value" />。  

  0 
  這個執行個體等於 <paramref name="value" />。  

  1 
  這個執行個體長於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.TimeSpan" />。</exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>比較這個執行個體和指定的 <see cref="T:System.TimeSpan" /> 物件，並傳回一個整數，表示這個執行個體短於、等於或長於 <see cref="T:System.TimeSpan" /> 物件。</summary>
      <param name="value">與這個執行個體相比較的物件。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  值 
  說明 
  負整數 
  這個執行個體短於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  正整數 
  這個執行個體長於 <paramref name="value" />。</returns>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的天數元件。</summary>
      <returns>這個執行個體的天數元件。 傳回值可以為正數或是負數。</returns>
    </member>
    <member name="M:System.TimeSpan.Divide(System.Double)">
      <param name="divisor" />
    </member>
    <member name="M:System.TimeSpan.Divide(System.TimeSpan)">
      <param name="ts" />
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，其值為目前 <see cref="T:System.TimeSpan" /> 物件的絕對值。</summary>
      <returns>新的物件，其值為目前 <see cref="T:System.TimeSpan" /> 物件的絕對值。</returns>
      <exception cref="T:System.OverflowException">這個執行個體的值是 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="value">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.TimeSpan" /> 物件，表示與目前的 <see cref="T:System.TimeSpan" /> 結構有相同時間間隔，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>傳回表示這個執行個體是否等於指定 <see cref="T:System.TimeSpan" /> 物件的值。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 表示的時間間隔與這個執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.TimeSpan" /> 執行個體是否相等。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>傳回表示指定天數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <param name="value">精確度達到最接近毫秒數的天數。</param>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>傳回表示指定時數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <param name="value">精確度達到最接近毫秒數的時數。</param>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>傳回表示指定毫秒數的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="value">毫秒數。</param>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>傳回表示指定分鐘數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <param name="value">精確度達到最接近毫秒數的分鐘數。</param>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>傳回表示指定秒數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <param name="value">精確度達到最接近毫秒數的秒數。</param>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。  
-或- 
 <paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>傳回表示指定時間的 <see cref="T:System.TimeSpan" />，其規格是以刻度為單位。</summary>
      <param name="value">表示時間的刻度數。</param>
      <returns>代表 <paramref name="value" /> 的物件。</returns>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的時數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的時數元件。 傳回值範圍從 -23 到 23。</returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>代表最大 <see cref="T:System.TimeSpan" /> 值。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的毫秒數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的毫秒數元件。 傳回值範圍從 -999 到 999。</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的分鐘數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的分鐘數元件。 傳回值範圍從 -59 到 59。</returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>代表最小 <see cref="T:System.TimeSpan" /> 值。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.TimeSpan.Multiply(System.Double)">
      <param name="factor" />
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>傳回新 <see cref="T:System.TimeSpan" /> 物件，其值是這個執行個體的相反值。</summary>
      <returns>新的物件，其數值與這個執行個體相同，但是正負號相反。</returns>
      <exception cref="T:System.OverflowException">
        <see cref="T:System.TimeSpan" /> 無法表示這個執行個體的負值；亦即，這個執行個體的值是 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>加入兩個指定的 <see cref="T:System.TimeSpan" /> 執行個體。</summary>
      <param name="t1">要加入的第一個時間間隔。</param>
      <param name="t2">要加入的第二個時間間隔。</param>
      <returns>物件，其值為 <paramref name="t1" /> 和 <paramref name="t2" /> 值的總和。</returns>
      <exception cref="T:System.OverflowException">產生的 <see cref="T:System.TimeSpan" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)">
      <param name="timeSpan" />
      <param name="divisor" />
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)">
      <param name="t1" />
      <param name="t2" />
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>表示兩個 <see cref="T:System.TimeSpan" /> 執行個體是否相等。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>表示指定的 <see cref="T:System.TimeSpan" /> 是否大於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>如果 <see langword="true" /> 的值大於 <paramref name="t1" /> 的值，則為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>表示指定的 <see cref="T:System.TimeSpan" /> 是否大於或等於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>如果 <see langword="true" /> 的值大於或等於 <paramref name="t1" /> 的值，則為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>表示兩個 <see cref="T:System.TimeSpan" /> 執行個體是否不相等。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值不相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>表示指定的 <see cref="T:System.TimeSpan" /> 是否小於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>如果 <paramref name="t1" /> 的值小於 <paramref name="t2" /> 的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>表示指定的 <see cref="T:System.TimeSpan" /> 是否小於或等於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比較的第一個時間間隔。</param>
      <param name="t2">要比較的第二個時間間隔。</param>
      <returns>如果 <see langword="true" /> 的值小於或等於 <paramref name="t1" /> 的值，則為 <paramref name="t2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)">
      <param name="factor" />
      <param name="timeSpan" />
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)">
      <param name="timeSpan" />
      <param name="factor" />
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>將指定的 <see cref="T:System.TimeSpan" /> 從另一個指定的 <see cref="T:System.TimeSpan" /> 減掉。</summary>
      <param name="t1">被減數。</param>
      <param name="t2">減數。</param>
      <returns>物件，其值為 <paramref name="t1" /> 值減去 <paramref name="t2" /> 值的結果。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>傳回 <see cref="T:System.TimeSpan" />，其值是指定執行個體的相反值。</summary>
      <param name="t">要成為相反值的時間間隔。</param>
      <returns>與這個執行個體具有相同數值的物件，但正負號相反。</returns>
      <exception cref="T:System.OverflowException">
        <see cref="T:System.TimeSpan" /> 無法表示這個執行個體的負值；亦即，這個執行個體的值是 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>傳回 <see cref="T:System.TimeSpan" /> 的指定執行個體。</summary>
      <param name="t">要傳回的時間間隔。</param>
      <returns>
        <paramref name="t" /> 指定的時間間隔。</returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="input" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>將時間間隔的字串表示，轉換成與其相等的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="s">字串，指定要轉換的時間間隔。</param>
      <returns>時間間隔，對應至 <paramref name="s" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 具有無效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。  
-或- 
天數、小時、分鐘或秒鐘元件中，至少有一個元件超出有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>時間間隔，對應至 <paramref name="input" />，如 <paramref name="formatProvider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有無效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。  
-或- 
在 <paramref name="input" /> 中的天數、小時、分鐘或秒鐘元件中，至少有一個元件超出有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定之格式和特定文化特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有無效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。  
-或- 
在 <paramref name="input" /> 中的天數、小時、分鐘或秒鐘元件中，至少有一個元件超出有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定之格式、特定文件特性格式資訊和樣式，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，這個組合定義 <paramref name="input" /> 中可以存在的樣式項目。</param>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 是無效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有無效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。  
-或- 
在 <paramref name="input" /> 中的天數、小時、分鐘或秒鐘元件中，至少有一個元件超出有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>使用指定之格式字串的陣列和特定文件特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這個陣列定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="formats" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有無效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。  
-或- 
在 <paramref name="input" /> 中的天數、小時、分鐘或秒鐘元件中，至少有一個元件超出有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定之格式、特定文件特性格式資訊和樣式，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這個陣列定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">列舉值的位元組合，這個組合定義 Input 中可以存在的樣式項目。</param>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 是無效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 具有無效的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。  
-或- 
在 <paramref name="input" /> 中的天數、小時、分鐘或秒鐘元件中，至少有一個元件超出有效範圍。</exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的秒數元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的秒數元件。 傳回值範圍從 -59 到 59。</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，它的值為指定之 <see cref="T:System.TimeSpan" /> 物件與這個執行個體的差。</summary>
      <param name="ts">要減去的時間間隔。</param>
      <returns>新的時間間隔，其值是這個執行個體的值減去 <paramref name="ts" /> 的值之結果。</returns>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>取得刻度數，表示目前 <see cref="T:System.TimeSpan" /> 結構的值。</summary>
      <returns>這個執行個體中包含的刻度數。</returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>表示 1 天中的刻度數。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>表示 1 小時中的刻度數。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>表示 1 毫秒中的刻度數。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>表示 1 分鐘中的刻度數。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>表示 1 秒中的刻度數。</summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>將目前 <see cref="T:System.TimeSpan" /> 物件的值，轉換為其相等的字串表示。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示。</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.TimeSpan" /> 物件的值，轉換為其相等字串表示。</summary>
      <param name="format">標準或自訂 <see cref="T:System.TimeSpan" /> 格式字串。</param>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示，採用 <paramref name="format" /> 參數所指定的格式。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無法辨識或不受支援。</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文件特性格式資訊，將目前 <see cref="T:System.TimeSpan" /> 物件的值，轉換為其相等的字串表示。</summary>
      <param name="format">標準或自訂 <see cref="T:System.TimeSpan" /> 格式字串。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無法辨識或不受支援。</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的天數表示。</summary>
      <returns>這個執行個體表示的完整天數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的時數表示。</summary>
      <returns>這個執行個體表示的完整時數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的毫秒數表示。</summary>
      <returns>這個執行個體表示的完整毫秒數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的分鐘數表示。</summary>
      <returns>這個執行個體表示的完整分鐘數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，這個值以整數和小數的秒數表示。</summary>
      <returns>這個執行個體表示的完整秒數。</returns>
    </member>
    <member name="M:System.TimeSpan.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的特定文件特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="input" />，否則為 <see langword="false" />。 如果 <paramref name="input" /> 參數是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、具有無效格式、代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的時間間隔，或是其天數、時數、分鐘數或秒數項目至少有一個超出有效範圍，這項作業就會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>將時間間隔的字串表示，轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回一個值表示轉換是否成功。</summary>
      <param name="s">字串，指定要轉換的時間間隔。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="s" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。 如果 <paramref name="s" /> 參數是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、具有無效格式、代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的時間間隔，或是其天數、時數、分鐘數或秒數項目至少有一個超出有效範圍，這項作業就會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、特定文件特性格式資訊和樣式，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">一或多個列舉值，這些值會指出 <paramref name="input" /> 的樣式。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="input" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和特定文件特性格式資訊，將時間間隔的字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。 字串表示的格式必須完全符合指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="format">標準或自訂格式字串，其定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="input" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、特定文件特性格式資訊和樣式，將指定的時間間隔字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這些格式字串定義可接受的 <paramref name="input" /> 格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="styles">一或多個列舉值，這些值會指出 <paramref name="input" /> 的樣式。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="input" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和特定文件特性格式資訊，將指定的時間間隔字串表示轉換為其相等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。 字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <param name="input">字串，指定要轉換的時間間隔。</param>
      <param name="formats">標準或自訂格式字串的陣列，這些格式字串定義可接受的 <paramref name="input" /> 格式。</param>
      <param name="formatProvider">物件，提供特定文化特性格式資訊。</param>
      <param name="result">這個方法在傳回時會包含 <paramref name="input" /> 所指定的時間間隔之物件；如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="input" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>代表零 <see cref="T:System.TimeSpan" /> 值。 此欄位為唯讀。</summary>
    </member>
    <member name="T:System.TimeZone">
      <summary>表示時區。</summary>
    </member>
    <member name="M:System.TimeZone.#ctor">
      <summary>初始化 <see cref="T:System.TimeZone" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.TimeZone.CurrentTimeZone">
      <summary>取得目前電腦的時區。</summary>
      <returns>表示目前本地時區的 <see cref="T:System.TimeZone" /> 物件。</returns>
    </member>
    <member name="P:System.TimeZone.DaylightName">
      <summary>取得日光節約時區名稱。</summary>
      <returns>日光節約時區名稱。</returns>
    </member>
    <member name="M:System.TimeZone.GetDaylightChanges(System.Int32)">
      <summary>傳回特定年份的日光節約時期。</summary>
      <param name="year">日光節約時期套用的年份。</param>
      <returns>
        <see cref="T:System.Globalization.DaylightTime" /> 物件，包含 <paramref name="year" /> 中的日光節約時間開始與結束日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。</exception>
    </member>
    <member name="M:System.TimeZone.GetUtcOffset(System.DateTime)">
      <summary>傳回指定之當地時間的 Coordinated Universal Time (UTC) 位移。</summary>
      <param name="time">日期和時間值。</param>
      <returns>Coordinated Universal Time (UTC) 之於 <paramref name="time" /> 的位移。</returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)">
      <summary>傳回數值，指示指定的日期和時間是否在日光節約時期之內。</summary>
      <param name="time">日期和時間。</param>
      <returns>如果 <paramref name="time" /> 在日光節約時期內，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
      <summary>傳回數值，指示指定的日期和時間是否在指定的日光節約時期之內。</summary>
      <param name="time">日期和時間。</param>
      <param name="daylightTimes">日光節約時期。</param>
      <returns>如果 <paramref name="time" /> 是在 <paramref name="daylightTimes" /> 中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="daylightTimes" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.TimeZone.StandardName">
      <summary>取得標準時區名稱。</summary>
      <returns>標準時區名稱。</returns>
      <exception cref="T:System.ArgumentNullException">嘗試將這個屬性設定為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZone.ToLocalTime(System.DateTime)">
      <summary>傳回對應到指定之日期與時間值的本地時間。</summary>
      <param name="time">Coordinated Universal Time (UTC) 時間。</param>
      <returns>
        <see cref="T:System.DateTime" /> 物件，其值為對應至 <paramref name="time" /> 的本地時間。</returns>
    </member>
    <member name="M:System.TimeZone.ToUniversalTime(System.DateTime)">
      <summary>傳回對應到某個指定時間的 Coordinated Universal Time (UTC)。</summary>
      <param name="time">日期和時間。</param>
      <returns>
        <see cref="T:System.DateTime" /> 物件，其值是對應到 <paramref name="time" /> 的 Coordinated Universal Time (UTC)。</returns>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>表示世界的任意時區。</summary>
    </member>
    <member name="T:System.TimeZoneInfo.AdjustmentRule">
      <summary>提供關於時區調整的資訊，例如日光節約時間的開始與結束。</summary>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>為特定時區建立新的調整規則。</summary>
      <param name="dateStart">調整規則的生效日期。 如果 <paramref name="dateStart" /> 參數的值是 <see langword="DateTime.MinValue.Date" />，則這是時區第一個生效的調整規則。</param>
      <param name="dateEnd">調整規則最後一天有效的日期。 如果 <paramref name="dateEnd" /> 參數的值是 <see langword="DateTime.MaxValue.Date" />，則調整規則就沒有結束日期。</param>
      <param name="daylightDelta">由於調整造成的時間變更。 這個值會加入至時區的 <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> 屬性，用來取得正確的 Coordinated Universal Time (UTC) 日光節約時間位移。 這個值的範圍可從 -14 到 14。</param>
      <param name="daylightTransitionStart">物件，該物件定義日光節約時間的開始。</param>
      <param name="daylightTransitionEnd">物件，該物件會定義日光節約時間的結束。</param>
      <returns>物件，表示新的調整規則。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateStart" /> 或 <paramref name="dateEnd" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性不等於 <see cref="F:System.DateTimeKind.Unspecified" />。  
-或- 
<paramref name="daylightTransitionStart" /> 參數等於 <paramref name="daylightTransitionEnd" /> 參數。  
-或- 
<paramref name="dateStart" /> 或 <paramref name="dateEnd" /> 參數包括當天時間的值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dateEnd" /> 早於 <paramref name="dateStart" />。  
-或- 
 <paramref name="daylightDelta" /> 小於 -14 或大於 14。  
-或- 
<paramref name="daylightDelta" /> 參數的 <see cref="P:System.TimeSpan.Milliseconds" /> 屬性不等於 0。  
-或- 
<paramref name="daylightDelta" /> 參數的 <see cref="P:System.TimeSpan.Ticks" /> 屬性不等於完整的秒數。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DateEnd">
      <summary>取得調整規則停止生效的日期。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 值，表示調整規則的結束日期。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DateStart">
      <summary>取得調整規則生效的日期。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 值，表示調整規則生效的時間。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta">
      <summary>取得形成時區日光節約時間所需的時間量。 這個時間量會加入至時區的 Coordinated Universal Time (UTC) 位移。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 物件，指出由於調整規則而要加入至標準時間變更的時間量。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd">
      <summary>取得每年從日光節約時間轉換回標準時間的相關資訊。</summary>
      <returns>
        <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件，定義每年從日光節約時間改回時區標準時間的轉換。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart">
      <summary>取得每年從標準時間轉換回日光節約時間的相關資訊。</summary>
      <returns>
        <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件，定義每年從時區標準時間改回日光節約時間的轉換。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)">
      <summary>判斷目前的 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件是否等於第二個 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件。</summary>
      <param name="other">要與目前物件比較的物件。</param>
      <returns>如果兩個 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件的值相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode">
      <summary>做為雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
      <returns>32 位元帶正負號的整數，充當目前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件的雜湊程式碼。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件完成還原序列化 (Deserialization) 時執行。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件中填入將這個物件序列化時所需的資料。</summary>
      <param name="info">要填入資料的物件。</param>
      <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>取得目前時區標準時間與國際標準時間 (UTC) 的時差。</summary>
      <returns>表示目前時區標準時間與國際標準時間 (UTC) 時差的物件。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ClearCachedData">
      <summary>清除快取的時區資料。</summary>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>將時間轉換為特定時區的時間。</summary>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
      <returns>目的地時區中的日期與時間。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 參數的值表示無效的時間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 參數的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>將時間從一個時區轉換為另一個時區。</summary>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="sourceTimeZone">
        <paramref name="dateTime" /> 的時區。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
      <returns>目的地時區中的日期和時間，對應至來源時區中的 <paramref name="dateTime" /> 參數。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，但 <paramref name="sourceTimeZone" /> 參數不等於 <see cref="F:System.DateTimeKind.Local" />。  
-或- 
<paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Utc" />，但 <paramref name="sourceTimeZone" /> 參數不等於 <see cref="P:System.TimeZoneInfo.Utc" />。  
-或- 
<paramref name="dateTime" /> 參數是無效的時間 (換句話說，它代表了因時區的調整規則而不存在的時間)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="destinationTimeZone" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>將時間轉換為特定時區的時間。</summary>
      <param name="dateTimeOffset">要轉換的日期和時間。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
      <returns>目的地時區中的日期與時間。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 參數的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)">
      <summary>根據時區的識別項將時間轉換為另一時區的時間。</summary>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="destinationTimeZoneId">目的地時區的識別項。</param>
      <returns>目的地時區中的日期與時間。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
      <exception cref="T:System.Security.SecurityException">處理序沒有必要權限可讀取包含時區資訊的登錄機碼。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">在本機系統上找不到 <paramref name="destinationTimeZoneId" /> 識別項。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)">
      <summary>根據時區識別項將時間從一個時區轉換為另一個時區。</summary>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="sourceTimeZoneId">來源時區的識別項。</param>
      <param name="destinationTimeZoneId">目的地時區的識別項。</param>
      <returns>目的地時區中的日期和時間，對應至來源時區中的 <paramref name="dateTime" /> 參數。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性未對應至來源時區。  
-或- 
 <paramref name="dateTime" /> 是來源時區中的無效時間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZoneId" /> 為 <see langword="null" />。  
-或- 
 <paramref name="destinationTimeZoneId" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
      <exception cref="T:System.Security.SecurityException">使用者沒有必要權限可讀取保留時區資料的登錄機碼。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">在本機系統上找不到 <paramref name="sourceTimeZoneId" /> 識別項。  
-或- 
在本機系統上找不到 <paramref name="destinationTimeZoneId" /> 識別項。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)">
      <summary>根據時區的識別項將時間轉換為另一時區的時間。</summary>
      <param name="dateTimeOffset">要轉換的日期和時間。</param>
      <param name="destinationTimeZoneId">目的地時區的識別項。</param>
      <returns>目的地時區中的日期與時間。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
      <exception cref="T:System.Security.SecurityException">處理序沒有必要權限可讀取包含時區資訊的登錄機碼。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">在本機系統上找不到 <paramref name="destinationTimeZoneId" /> 識別項。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>將 Coordinated Universal Time (UTC) 轉換為指定時區的時間。</summary>
      <param name="dateTime">Coordinated Universal Time (UTC)。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。</param>
      <returns>目的地時區中的日期與時間。 如果 <paramref name="destinationTimeZone" /> 為 <see cref="P:System.DateTime.Kind" />，其 <see cref="F:System.DateTimeKind.Utc" /> 屬性為 <see cref="P:System.TimeZoneInfo.Utc" />，否則其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)">
      <summary>將指定的日期和時間轉換為 Coordinated Universal Time (UTC)。</summary>
      <param name="dateTime">要轉換的日期和時間。</param>
      <returns>對應至 <paramref name="dateTime" /> 參數的國際標準時間 (UTC)。 <see cref="T:System.DateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性始終設定為 <see cref="F:System.DateTimeKind.Utc" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
        <paramref name="dateTime" />
        <see langword=")" /> 會傳回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>將指定時區的時間轉換為國際標準時間 (UTC)。</summary>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="sourceTimeZone">
        <paramref name="dateTime" /> 的時區。</param>
      <returns>對應至 <paramref name="dateTime" /> 參數的國際標準時間 (UTC)。 <see cref="T:System.DateTime" /> 物件的 <see cref="P:System.DateTime.Kind" /> 屬性始終設定為 <see cref="F:System.DateTimeKind.Utc" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" />.<see langword="Kind" /> 為 <see cref="F:System.DateTimeKind.Utc" /> 且 <paramref name="sourceTimeZone" /> 不等於 <see cref="P:System.TimeZoneInfo.Utc" />。  
-或- 
 <paramref name="dateTime" />.<see langword="Kind" /> 為 <see cref="F:System.DateTimeKind.Local" /> 且 <paramref name="sourceTimeZone" /> 不等於 <see cref="P:System.TimeZoneInfo.Local" />。  
-或- 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> 傳回 <see langword="true" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)">
      <summary>建立具有指定識別項的自訂時區、國際標準時間 (UTC) 的位移、顯示名稱和標準時間顯示名稱。</summary>
      <param name="id">時區的識別項。</param>
      <param name="baseUtcOffset">物件，代表這個時區與國際標準時間 (UTC) 的時差。</param>
      <param name="displayName">新時區的顯示名稱。</param>
      <param name="standardDisplayName">新時區標準時間的名稱。</param>
      <returns>新的時區。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 參數是空字串 ("")。  
-或- 
<paramref name="baseUtcOffset" /> 參數不代表整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUtcOffset" /> 參數大於 14 小時或小於 -14 小時。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])">
      <summary>以指定的識別項、國際標準時間 (UTC) 的位移、顯示名稱、標準時間名稱、日光節約時間名稱和日光節約時間規則，建立自訂時區。</summary>
      <param name="id">時區的識別項。</param>
      <param name="baseUtcOffset">物件，代表這個時區與國際標準時間 (UTC) 的時差。</param>
      <param name="displayName">新時區的顯示名稱。</param>
      <param name="standardDisplayName">新時區的標準時間名稱。</param>
      <param name="daylightDisplayName">新時區的日光節約時間名稱。</param>
      <param name="adjustmentRules">針對特定期間擴大基底 UTC 位移的陣列。</param>
      <returns>代表新時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 參數是空字串 ("")。  
-或- 
<paramref name="baseUtcOffset" /> 參數不代表整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUtcOffset" /> 參數大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.InvalidTimeZoneException">
        <paramref name="adjustmentRules" /> 參數中指定的調整規則重疊。  
-或- 
<paramref name="adjustmentRules" /> 參數中指定的調整規則未依照時間排序。  
-或- 
<paramref name="adjustmentRules" /> 中的一個或多個項目為 <see langword="null" />。  
-或- 
一個日期可以套用多項調整規則。  
-或- 
<paramref name="adjustmentRules" /> 陣列中一個或多個物件的 <paramref name="baseUtcOffset" /> 參數和 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值總和大於 14 小時或小於 -14 小時。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)">
      <summary>以指定的識別項、國際標準時間 (UTC) 的位移、顯示名稱、標準時間名稱、日光節約時間名稱、日光節約時間規則，以及表示傳回的物件是否反映日光節約時間資訊的值，建立自訂時區。</summary>
      <param name="id">時區的識別項。</param>
      <param name="baseUtcOffset">
        <see cref="T:System.TimeSpan" /> 物件，代表這個時區與國際標準時間 (UTC) 的時差。</param>
      <param name="displayName">新時區的顯示名稱。</param>
      <param name="standardDisplayName">新時區的標準時間名稱。</param>
      <param name="daylightDisplayName">新時區的日光節約時間名稱。</param>
      <param name="adjustmentRules">擴大特定期間基底 UTC 位移的 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件陣列。</param>
      <param name="disableDaylightSavingTime">若為 <see langword="true" /> 則捨棄任何存在於 <paramref name="adjustmentRules" /> 中具有新物件的日光節約時間相關資訊，否則為 <see langword="false" />。</param>
      <returns>新的時區。 如果 <paramref name="disableDaylightSavingTime" /> 參數為 <see langword="true" />，則傳回的物件不含日光節約時間資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 參數是空字串 ("")。  
-或- 
<paramref name="baseUtcOffset" /> 參數不代表整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUtcOffset" /> 參數大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.InvalidTimeZoneException">
        <paramref name="adjustmentRules" /> 參數中指定的調整規則重疊。  
-或- 
<paramref name="adjustmentRules" /> 參數中指定的調整規則未依照時間排序。  
-或- 
<paramref name="adjustmentRules" /> 中的一個或多個項目為 <see langword="null" />。  
-或- 
一個日期可以套用多項調整規則。  
-或- 
<paramref name="adjustmentRules" /> 陣列中一個或多個物件的 <paramref name="baseUtcOffset" /> 參數和 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值總和大於 14 小時或小於 -14 小時。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>取得目前時區日光節約時間的顯示名稱。</summary>
      <returns>時區之日光節約時間的顯示名稱。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>取得表示時區的一般顯示名稱。</summary>
      <returns>時區的一般顯示名稱。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.Object)">
      <summary>判斷目前的 <see cref="T:System.TimeZoneInfo" /> 物件與另一個物件是否相等。</summary>
      <param name="obj">要和目前物件比較的第二個物件。</param>
      <returns>如果 <paramref name="obj" /> 是等於目前執行個體的 <see cref="T:System.TimeZoneInfo" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>判斷目前的 <see cref="T:System.TimeZoneInfo" /> 物件和另一個 <see cref="T:System.TimeZoneInfo" /> 物件是否相等。</summary>
      <param name="other">要和目前物件比較的第二個物件。</param>
      <returns>如果兩個 <see cref="T:System.TimeZoneInfo" /> 物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)">
      <summary>根據新 <see cref="T:System.TimeZoneInfo" /> 物件的識別碼加以具現化。</summary>
      <param name="id">對應於 <see cref="P:System.TimeZoneInfo.Id" /> 屬性的時區識別項。</param>
      <returns>其識別項是 <paramref name="id" /> 參數之值的物件。</returns>
      <exception cref="T:System.OutOfMemoryException">系統沒有足夠的記憶體，無法保存時區的相關資訊。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">找不到 <paramref name="id" /> 指定的時區識別項。 這意味名稱符合 <paramref name="id" /> 的時區識別碼不存在，或識別碼存在，但不包含任何時區資料。</exception>
      <exception cref="T:System.Security.SecurityException">處理序沒有必要權限可讀取包含時區資訊的登錄機碼。</exception>
      <exception cref="T:System.InvalidTimeZoneException">找到時區識別項，但登錄資料已損毀。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.FromSerializedString(System.String)">
      <summary>還原序列化字串，以重新建立原始的序列化 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <param name="source">序列化 <see cref="T:System.TimeZoneInfo" /> 物件的字串表示。</param>
      <returns>起始已序列化的物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 參數為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 參數為 null 字串。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">來源參數無法還原序列化為 <see cref="T:System.TimeZoneInfo" /> 物件。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAdjustmentRules">
      <summary>擷取會套用至目前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 物件的 <see cref="T:System.TimeZoneInfo" /> 物件陣列。</summary>
      <returns>這個時區之物件的陣列。</returns>
      <exception cref="T:System.OutOfMemoryException">系統沒有足夠的記憶體，無法製作調整規則的記憶體中複本。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
      <param name="dateTime">日期和時間。</param>
      <returns>物件的陣列，表示特定日期和時間可對應的可能 Coordinated Universal Time (UTC) 位移。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 不是模稜兩可的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
      <param name="dateTimeOffset">日期和時間。</param>
      <returns>物件的陣列，表示特定日期和時間可對應的可能 Coordinated Universal Time (UTC) 位移。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOffset" /> 不是模稜兩可的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>做為雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
      <returns>32 位元帶正負號的整數，做為這個 <see cref="T:System.TimeZoneInfo" /> 物件的雜湊碼。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetSystemTimeZones">
      <summary>傳回本機系統上有其資訊之所有時區的排序集合。</summary>
      <returns>
        <see cref="T:System.TimeZoneInfo" /> 物件的唯讀集合。</returns>
      <exception cref="T:System.OutOfMemoryException">記憶體不足，無法儲存所有時區資訊。</exception>
      <exception cref="T:System.Security.SecurityException">使用者沒有讀取包含時區資訊之登錄機碼所需的權限。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>計算這個時區與 Coordinated Universal Time (UTC) 在特定日期和時間的位移和差異。</summary>
      <param name="dateTime">判斷其位移的日期和時間。</param>
      <returns>物件，表示兩個時區間的時差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>計算這個時區與 Coordinated Universal Time (UTC) 在特定日期和時間的位移和差異。</summary>
      <param name="dateTimeOffset">判斷其位移的日期和時間。</param>
      <returns>物件，表示 Coordinated Universal Time (UTC) 與目前時區的時差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)">
      <summary>指出目前物件與另一個 <see cref="T:System.TimeZoneInfo" /> 物件是否具有相同的調整規則。</summary>
      <param name="other">要與目前 <see cref="T:System.TimeZoneInfo" /> 物件比較的第二個物件。</param>
      <returns>如果兩個時區具有相同的調整規則和基底位移則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.Id">
      <summary>取得時區識別項。</summary>
      <returns>時區識別項。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
      <param name="dateTime">日期和時間值。</param>
      <returns>如果 <paramref name="dateTime" /> 參數模稜兩可則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性是 <see cref="F:System.DateTimeKind.Local" />，而且 <paramref name="dateTime" /> 是無效的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
      <param name="dateTimeOffset">日期和時間。</param>
      <returns>如果目前時區中的 <paramref name="dateTimeOffset" /> 參數模稜兩可則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>表示指定的日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件時區的日光節約時間範圍內。</summary>
      <param name="dateTime">日期和時間值。</param>
      <returns>如果 <paramref name="dateTime" /> 參數為日光節約時間則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性是 <see cref="F:System.DateTimeKind.Local" />，而且 <paramref name="dateTime" /> 是無效的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>表示指定的日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件時區的日光節約時間範圍內。</summary>
      <param name="dateTimeOffset">日期和時間值。</param>
      <returns>如果 <paramref name="dateTimeOffset" /> 參數為日光節約時間則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>指出特定日期和時間是否無效。</summary>
      <param name="dateTime">日期和時間值。</param>
      <returns>如果 <paramref name="dateTime" /> 無效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>取得表示本地時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <returns>表示本地時區的物件。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>取得時區標準時間的顯示名稱。</summary>
      <returns>時區的標準時間之名稱。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>取得值，這個值表示時區是否具有任何日光節約時間規則。</summary>
      <returns>如果時區支援日光節約時間則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在物件完成還原序列化時執行。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.TimeZoneInfo" /> 物件包含無效或損毀的資料。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料，填入 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <param name="info">要填入資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ToSerializedString">
      <summary>將目前的 <see cref="T:System.TimeZoneInfo" /> 物件轉換為序列化字串。</summary>
      <returns>代表目前 <see cref="T:System.TimeZoneInfo" /> 物件的字串。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>傳回目前 <see cref="T:System.TimeZoneInfo" /> 物件的顯示名稱。</summary>
      <returns>目前 <see cref="P:System.TimeZoneInfo.DisplayName" /> 物件的 <see cref="T:System.TimeZoneInfo" /> 屬性值。</returns>
    </member>
    <member name="T:System.TimeZoneInfo.TransitionTime">
      <summary>提供某時區中之特定時間變更的相關資訊，例如從日光節約時間變更為標準時間，或從標準時間變更為日光節約時間。</summary>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule(System.DateTime,System.Int32,System.Int32)">
      <summary>定義使用固定日期規則的時間變更 (也就是在特定月份的特定日期發生的時間變更)。</summary>
      <param name="timeOfDay">發生時間變更的時間。 這個參數會對應至 <see cref="P:System.TimeZoneInfo.TransitionTime.TimeOfDay" /> 屬性。</param>
      <param name="month">發生時間變更的月份。 這個參數會對應至 <see cref="P:System.TimeZoneInfo.TransitionTime.Month" /> 屬性。</param>
      <param name="day">發生時間變更的月份日期。 這個參數會對應至 <see cref="P:System.TimeZoneInfo.TransitionTime.Day" /> 屬性。</param>
      <returns>時間變更的相關資料。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeOfDay" /> 參數具有非預設的日期元件。  
-或- 
<paramref name="timeOfDay" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性不是 <see cref="F:System.DateTimeKind.Unspecified" />。  
-或- 
<paramref name="timeOfDay" /> 參數不表示整數毫秒數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 參數小於 1 或大於 12。  
-或- 
<paramref name="day" /> 參數小於 1 或大於 31。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule(System.DateTime,System.Int32,System.Int32,System.DayOfWeek)">
      <summary>定義使用浮動日期規則的時間變更 (也就是在特定月份特定星期的特定日期發生的時間變更)。</summary>
      <param name="timeOfDay">發生時間變更的時間。 這個參數會對應至 <see cref="P:System.TimeZoneInfo.TransitionTime.TimeOfDay" /> 屬性。</param>
      <param name="month">發生時間變更的月份。 這個參數會對應至 <see cref="P:System.TimeZoneInfo.TransitionTime.Month" /> 屬性。</param>
      <param name="week">發生時間變更的當月週次。 它的值範圍從 1 到 5，5 代表月份的最後一週。 這個參數會對應至 <see cref="P:System.TimeZoneInfo.TransitionTime.Week" /> 屬性。</param>
      <param name="dayOfWeek">發生時間變更的當週日次。 這個參數會對應至 <see cref="P:System.TimeZoneInfo.TransitionTime.DayOfWeek" /> 屬性。</param>
      <returns>時間變更的相關資料。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeOfDay" /> 參數具有非預設的日期元件。  
-或- 
<paramref name="timeOfDay" /> 參數不表示整數毫秒數。  
-或- 
<paramref name="timeOfDay" /> 參數的 <see cref="P:System.DateTime.Kind" /> 屬性不是 <see cref="F:System.DateTimeKind.Unspecified" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小於 1 或大於 12。  
-或- 
 <paramref name="week" /> 小於 1 或大於 5。  
-或- 
<paramref name="dayOfWeek" /> 參數不是 <see cref="T:System.DayOfWeek" /> 列舉的成員。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Day">
      <summary>取得發生時間變更的日期。</summary>
      <returns>發生時間變更的日期。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.DayOfWeek">
      <summary>取得發生時間變更的當週日次。</summary>
      <returns>發生時間變更的當週日次。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.Equals(System.Object)">
      <summary>判斷物件的值是否與目前 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件的值相等。</summary>
      <param name="obj">要與目前 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件比較的物件。</param>
      <returns>如果兩個物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.Equals(System.TimeZoneInfo.TransitionTime)">
      <summary>判斷目前 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件的值是否與第二個 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件的值相等。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>如果兩個物件的屬性值相同，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.GetHashCode">
      <summary>做為雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
      <returns>32 位元帶正負號的整數，做為這個 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件的雜湊碼。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.IsFixedDateRule">
      <summary>取得值，指出時間變更發生在固定日期和時間 (例如 11 月 1 日) 或是浮動日期和時間 (例如 10 月的最後一個星期日)。</summary>
      <returns>如果時間變更規則是固定日期，則為 <see langword="true" />；如果時間變更規則是浮動日期，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Month">
      <summary>取得發生時間變更的月份。</summary>
      <returns>發生時間變更的月份。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.op_Equality(System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>判斷指定的兩個 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件是否相等。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相同，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.op_Inequality(System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>判斷指定的兩個 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 物件是否相等。</summary>
      <param name="t1">要比較的第一個物件。</param>
      <param name="t2">要比較的第二個物件。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 具有任何不同的成員值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在物件完成還原序列化時執行。</summary>
      <param name="sender">初始化回呼 (Callback) 的物件。 這個參數的功能目前未實作。</param>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>在 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件中填入將這個物件序列化時所需的資料。</summary>
      <param name="info">要填入資料的物件。</param>
      <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.TimeOfDay">
      <summary>取得發生時間變更的時、分和秒。</summary>
      <returns>發生時間變更的當日時間。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Week">
      <summary>取得發生時間變更的當月週次。</summary>
      <returns>發生時間變更的當月週次。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>取得表示 Coordinated Universal Time (UTC) 時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <returns>表示 Coordinated Universal Time (UTC) 時區的物件。</returns>
    </member>
    <member name="T:System.TimeZoneNotFoundException">
      <summary>找不到時區而擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor">
      <summary>使用系統提供的訊息，初始化 <see cref="T:System.TimeZoneNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>從序列化資料中，初始化 <see cref="T:System.TimeZoneNotFoundException" /> 類別的新執行個體。</summary>
      <param name="info">包含已序列化資料的物件。</param>
      <param name="context">包含已序列化資料的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="context" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.String)">
      <summary>使用指定的訊息字串，初始化 <see cref="T:System.TimeZoneNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.TimeZoneNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。</param>
    </member>
    <member name="T:System.Tuple">
      <summary>提供用於建立 Tuple 物件的靜態方法。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>建立新的 1-Tuple 或單一 (Singleton) 物件。</summary>
      <param name="item1">Tuple 之唯一元件的值。</param>
      <typeparam name="T1">Tuple 之唯一元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />) 的 Tuple。</returns>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>建立新的 2-Tuple 或雙重 (Pair) 物件。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />) 的 2-Tuple。</returns>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>建立新的 3-Tuple 或三重 (Triple) 物件。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />) 的 3-Tuple。</returns>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>建立新的 4-Tuple 或四重 (Quadruple) 物件。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />) 的 4-Tuple。</returns>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>建立新的 5-Tuple 或五重 (Quintuple) 物件。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />) 的 5-Tuple。</returns>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>建立新的 6-Tuple 或六重 (Sextuple) 物件。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 中第 6 個元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />) 的 6-Tuple。</returns>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>建立新的 7-Tuple 或七重 (Septuple) 物件。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 之第七個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 中第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 之第七個元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />、<paramref name="item7" />) 的 7-Tuple。</returns>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>建立新的 8-tuple 或八重 (Octuple) 物件。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 之第七個元件的值。</param>
      <param name="item8">Tuple 之第 8 個元件的值。</param>
      <typeparam name="T1">Tuple 中第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 中第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 中第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 中第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 中第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 中第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 之第七個元件的型別。</typeparam>
      <typeparam name="T8">Tuple 之第 8 個元件的型別。</typeparam>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />、<paramref name="item7" />、<paramref name="item8" />) 的 8-Tuple 或八重 (Octuple)。</returns>
    </member>
    <member name="T:System.Tuple`1">
      <summary>表示 1-Tuple 或單一 (Singleton) 物件。</summary>
      <typeparam name="T1">Tuple 之唯一元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Tuple`1" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 之唯一元件的值。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`1" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`1" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>取得 <see cref="T:System.Tuple`1" /> 物件之單一元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`1" /> 物件之單一元件的值。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`1" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`1" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`1" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`1" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`1" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`1" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`1" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">
        <see langword="Tuple" /> 項目的索引。 <paramref name="index" /> 必須是 0。</param>
      <returns>
        <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 0。</exception>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>1，<see cref="T:System.Tuple`1" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`1" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`1" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>表示 2-Tuple 或雙重 (Pair) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>初始化 <see cref="T:System.Tuple`2" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`2" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`2" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`2" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`2" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`2" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`2" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`2" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`2" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`2" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`2" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`2" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`2" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`2" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 1。</param>
      <returns>位在指定位置的 <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 1。</exception>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>2，<see cref="T:System.Tuple`2" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`2" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`2" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>表示 3-Tuple 或三重 (Triple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>初始化 <see cref="T:System.Tuple`3" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`3" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`3" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`3" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`3" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`3" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`3" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`3" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`3" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`3" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 2。</param>
      <returns>位在指定位置的 <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 2。</exception>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>3，<see cref="T:System.Tuple`3" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`3" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`3" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>表示 4-Tuple 或四重 (Quadruple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化 <see cref="T:System.Tuple`4" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`4" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`4" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`4" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`4" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`4" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`4" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`4" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`4" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`4" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 3。</param>
      <returns>位在指定位置的 <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 3。</exception>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>4，<see cref="T:System.Tuple`4" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`4" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`4" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>表示 5-Tuple 或五重 (Quintuple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化 <see cref="T:System.Tuple`5" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`5" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`5" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`5" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`5" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`5" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`5" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`5" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`5" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`5" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 4。</param>
      <returns>位在指定位置的 <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 4。</exception>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>5，<see cref="T:System.Tuple`5" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`5" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`5" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>表示 6-Tuple 或六重 (Sextuple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化 <see cref="T:System.Tuple`6" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`6" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`6" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第五個元件的值。</summary>
      <returns>目前<see cref="T:System.Tuple`6" />物件第五個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第六個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第六個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`6" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`6" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`6" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`6" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`6" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`6" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`6" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 5。</param>
      <returns>位在指定位置的 <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 5。</exception>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>6，<see cref="T:System.Tuple`6" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`6" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`6" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>表示 7-Tuple 或七重 (Septuple) 物件。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化 <see cref="T:System.Tuple`7" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`7" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`7" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第六個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第六個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第七個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第七個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`7" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`7" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`7" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`7" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`7" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`7" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`7" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 6。</param>
      <returns>位在指定位置的 <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 6。</exception>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>7，<see cref="T:System.Tuple`7" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`7" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`7" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>代表 n-Tuple，其中 n 大於或等於 8。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
      <typeparam name="TRest">定義 Tuple 其餘元件的類型的任何泛型 <see langword="Tuple" /> 物件。</typeparam>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化 <see cref="T:System.Tuple`8" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
      <param name="rest">包含 Tuple 其餘元件之值的任何泛型 <see langword="Tuple" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型 <see langword="Tuple" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>傳回值，這個值表示目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第七個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第七個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件的其餘元件。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件的其餘元件。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`8" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊碼。</summary>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`8" /> 物件之雜湊碼的物件。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`8" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="obj" /> 之前。  

  零 
  這個執行個體和 <paramref name="obj" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="Tuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="Tuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 <see langword="Item1" /> 的 0，到小於 <see langword="Tuple" /> 的項目數目。</param>
      <returns>位在指定位置的 <see langword="Tuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0。  
-或- 
 <paramref name="index" /> 大於或等於 <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />。</exception>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="Tuple" /> 中的項目數目。</summary>
      <returns>
        <see langword="Tuple" /> 中的項目數。</returns>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.Tuple`8" /> 執行個體的值。</summary>
      <returns>此 <see cref="T:System.Tuple`8" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.TupleExtensions">
      <summary>提供適用於元組的擴充方法，以便與 C# 中適用於元組的語言支援相互溝通。</summary>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``1(System.Tuple{``0},``0@)">
      <summary>將具有 1 個元素的元組解構為一個不同的變數。</summary>
      <param name="value">要解構為不同變數的 1 個元素的元組。</param>
      <param name="item1">單一元素的值。</param>
      <typeparam name="T1">單一元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
      <summary>將具有 10 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 10 個不同變數的 10 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
      <summary>將具有 11 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 11 個不同變數的 11 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
      <summary>將具有 12 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 12 個不同變數的 12 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
      <summary>將具有 13 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 13 個不同變數的 13 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@)">
      <summary>將具有 14 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 14 個不同變數的 14 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@)">
      <summary>將具有 15 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 15 個不同變數的 15 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第十五個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
      <typeparam name="T15">第十五個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@)">
      <summary>將具有 16 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 16 個不同變數的 16 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第十五個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第十六個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
      <typeparam name="T15">第十五個元素的類型。</typeparam>
      <typeparam name="T16">第十六個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@)">
      <summary>將具有 17 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 17 個不同變數的 17 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第十五個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第十六個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第十七個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
      <typeparam name="T15">第十五個元素的類型。</typeparam>
      <typeparam name="T16">第十六個元素的類型。</typeparam>
      <typeparam name="T17">第十七個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@)">
      <summary>將具有 18 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 18 個不同變數的 18 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第十五個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第十六個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第十七個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第十八個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
      <typeparam name="T15">第十五個元素的類型。</typeparam>
      <typeparam name="T16">第十六個元素的類型。</typeparam>
      <typeparam name="T17">第十七個元素的類型。</typeparam>
      <typeparam name="T18">第十八個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@)">
      <summary>將具有 19 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 19 個不同變數的 19 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第十五個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第十六個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第十七個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第十八個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <param name="item19">第十九個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item5" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
      <typeparam name="T15">第十五個元素的類型。</typeparam>
      <typeparam name="T16">第十六個元素的類型。</typeparam>
      <typeparam name="T17">第十七個元素的類型。</typeparam>
      <typeparam name="T18">第十八個元素的類型。</typeparam>
      <typeparam name="T19">第十九個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``2(System.Tuple{``0,``1},``0@,``1@)">
      <summary>將具有 2 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 2 個不同變數的 2 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@)">
      <summary>將具有 20 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 20 個不同變數的 20 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第十五個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第十六個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第十七個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第十八個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <param name="item19">第十九個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item5" />。</param>
      <param name="item20">第二十個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item6" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
      <typeparam name="T15">第十五個元素的類型。</typeparam>
      <typeparam name="T16">第十六個元素的類型。</typeparam>
      <typeparam name="T17">第十七個元素的類型。</typeparam>
      <typeparam name="T18">第十八個元素的類型。</typeparam>
      <typeparam name="T19">第十九個元素的類型。</typeparam>
      <typeparam name="T20">第二十個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@)">
      <summary>將具有 21 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 21 個不同變數的 21 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第十個元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第十二個元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第十三個元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第十四個元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第十五個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第十六個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第十七個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第十八個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <param name="item19">第十九個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item5" />。</param>
      <param name="item20">第二十個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item6" />。</param>
      <param name="item21">第二十一個元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item7" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
      <typeparam name="T10">第十個元素的類型。</typeparam>
      <typeparam name="T11">第十一個元素的類型。</typeparam>
      <typeparam name="T12">第十二個元素的類型。</typeparam>
      <typeparam name="T13">第十三個元素的類型。</typeparam>
      <typeparam name="T14">第十四個元素的類型。</typeparam>
      <typeparam name="T15">第十五個元素的類型。</typeparam>
      <typeparam name="T16">第十六個元素的類型。</typeparam>
      <typeparam name="T17">第十七個元素的類型。</typeparam>
      <typeparam name="T18">第十八個元素的類型。</typeparam>
      <typeparam name="T19">第十九個元素的類型。</typeparam>
      <typeparam name="T20">第二十個元素的類型。</typeparam>
      <typeparam name="T21">第二十一個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``3(System.Tuple{``0,``1,``2},``0@,``1@,``2@)">
      <summary>將具有 3 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 3 個不同變數的 3 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``4(System.Tuple{``0,``1,``2,``3},``0@,``1@,``2@,``3@)">
      <summary>將具有 4 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 4 個不同變數的 4 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``5(System.Tuple{``0,``1,``2,``3,``4},``0@,``1@,``2@,``3@,``4@)">
      <summary>將具有 5 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 5 個不同變數的 5 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``6(System.Tuple{``0,``1,``2,``3,``4,``5},``0@,``1@,``2@,``3@,``4@,``5@)">
      <summary>將具有 6 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 6 個不同變數的 6 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
      <summary>將具有 7 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 7 個不同變數的 7 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
      <summary>將具有 8 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 8 個不同變數的 8 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
      <summary>將具有 9 個元素的元組解構為不同的變數。</summary>
      <param name="value">要解構為 9 個不同變數的 9 個元素的元組。</param>
      <param name="item1">第一個元素的值。</param>
      <param name="item2">第二個元素的值。</param>
      <param name="item3">第三個元素的值。</param>
      <param name="item4">第四個元素的值。</param>
      <param name="item5">第五個元素的值。</param>
      <param name="item6">第六個元素的值。</param>
      <param name="item7">第七個元素的值。</param>
      <param name="item8">第八個元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第九個元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型。</typeparam>
      <typeparam name="T9">第九個元素的類型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``1(System.ValueTuple{``0})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``10(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``11(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``12(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``13(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``14(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``15(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``16(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``17(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16}}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``18(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17}}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``19(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18}}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第十九個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``2(System.ValueTuple{``0,``1})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``20(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19}}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第十九個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第二十個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``21(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19,``20}}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第十九個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第二十個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <typeparam name="T21">第二十個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item7" /></typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``3(System.ValueTuple{``0,``1,``2})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``4(System.ValueTuple{``0,``1,``2,``3})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``5(System.ValueTuple{``0,``1,``2,``3,``4})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``9(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
      <summary>將 <see langword="ValueTuple" /> 結構的執行個體轉換為 <see langword="Tuple" /> 類別的執行個體。</summary>
      <param name="value">要轉換為元組的值元組執行個體。</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <returns>已轉換的元組。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``1(System.Tuple{``0})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第十九個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``2(System.Tuple{``0,``1})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第十九個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第二十個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第十個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第十一個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第十二個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第十三個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第十四個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第十六個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第十七個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第十九個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第二十個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <typeparam name="T21">第二十個元素的類型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item7" /></typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``3(System.Tuple{``0,``1,``2})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``4(System.Tuple{``0,``1,``2,``3})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``5(System.Tuple{``0,``1,``2,``3,``4})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
      <summary>將 <see langword="Tuple" /> 類別的執行個體轉換為 <see langword="ValueTuple" /> 結構的執行個體。</summary>
      <param name="value">要轉換為值元組的元組物件</param>
      <typeparam name="T1">第一個元素的類型。</typeparam>
      <typeparam name="T2">第二個元素的類型。</typeparam>
      <typeparam name="T3">第三個元素的類型。</typeparam>
      <typeparam name="T4">第四個元素的類型。</typeparam>
      <typeparam name="T5">第五個元素的類型。</typeparam>
      <typeparam name="T6">第六個元素的類型。</typeparam>
      <typeparam name="T7">第七個元素的類型。</typeparam>
      <typeparam name="T8">第八個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第九個元素的類型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <returns>已轉換的值元組執行個體。</returns>
    </member>
    <member name="T:System.Type">
      <summary>代表類型宣告：類別類型、介面類型、陣列類型、值類型、列舉類型、類型參數、泛型類型定義，以及開放式或封閉式的建構泛型類型。</summary>
    </member>
    <member name="M:System.Type.#ctor">
      <summary>初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>取得宣告此類型的 <see cref="T:System.Reflection.Assembly" />。 若為泛型類型，則取得定義此泛型類型的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 執行個體，描述包含目前類型的組件。 若為泛型類型，則此執行個體描述的是含有泛型類型定義的組件，而不是建立與使用特定建構類型的組件。</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>取得類型的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱。</summary>
      <returns>
        <see cref="T:System.Type" /> 的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱，如果目前的執行個體表示泛型類型參數，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>取得與 <see cref="T:System.Type" /> 關聯的屬性。</summary>
      <returns>代表 <see cref="T:System.Reflection.TypeAttributes" /> 屬性集的 <see cref="T:System.Type" /> 物件；若 <see cref="T:System.Type" /> 代表的是泛型型別參數，則這個值就是未指定的。</returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>取得目前 <see cref="T:System.Type" /> 所直接繼承的類型。</summary>
      <returns>目前 <see cref="T:System.Type" /> 直接繼承自的 <see cref="T:System.Type" />，如果目前 <see langword="null" /> 表示 <see langword="Type" /> 類別或介面，則為 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>取得值，該值指出目前的 <see cref="T:System.Type" /> 物件是否有尚未被特定類型取代的類型參數。</summary>
      <returns>如果 <see langword="true" /> 物件本身為泛型類型參數或包含尚未提供特定類型的類型參數則為 <see cref="T:System.Type" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>如果目前的 <see cref="T:System.Reflection.MethodBase" /> 表示泛型方法的型別參數，則取得表示宣告方法的 <see cref="T:System.Type" />。</summary>
      <returns>如果目前的 <see cref="T:System.Type" /> 表示泛型方法的型別參數，則為表示宣告方法的 <see cref="T:System.Reflection.MethodBase" />否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>取得宣告目前巢狀類型或泛型型別參數的類型。</summary>
      <returns>若目前的類型是巢狀類型，即為表示封入類型的 <see cref="T:System.Type" /> 物件，若目前的類型是泛型類型的型別參數，則為泛型類型定義，而若目前的類型是泛型方法的型別參數，則為宣告泛型方法的類型，若以上皆否，便為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>取得預設繫結器 (Binder) 的參考，它會實作內部規則來選取由 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 呼叫的適當成員。</summary>
      <returns>系統使用的預設繫結器之參考。</returns>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>分隔 <see cref="T:System.Type" /> 的命名空間中的名稱。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>表示 <see cref="T:System.Type" /> 類型的空陣列。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>判斷目前 <see cref="T:System.Type" /> 物件的基礎系統類型，是否與指定的 <see cref="T:System.Object" /> 的基礎系統類型相同。</summary>
      <param name="o">其基礎系統類型將與目前 <see cref="T:System.Type" /> 的基礎系統類型比較的物件。 為使比較成功，<paramref name="o" /> 必須可以轉型或轉換為 <see cref="T:System.Type" /> 類型的物件。</param>
      <returns>如果 <see langword="true" /> 的基礎系統類型與目前 <paramref name="o" /> 的基礎系統類型相同，則為 <see cref="T:System.Type" />否則為 <see langword="false" />。 下列條件成立時，此方法也會傳回 <see langword="false" />：  

<paramref name="o" /> 為 <see langword="null" />。  

<paramref name="o" /> 無法轉換為 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>判斷目前 <see cref="T:System.Type" /> 的基礎系統類型，是否與指定的 <see cref="T:System.Type" /> 之基礎系統類型相同。</summary>
      <param name="o">其基礎系統類型將與目前 <see cref="T:System.Type" /> 的基礎系統類型比較的物件。</param>
      <returns>如果 <see langword="true" /> 的基礎系統類型與目前 <paramref name="o" /> 的基礎系統類型相同，則為 <see cref="T:System.Type" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Type.FilterAttribute">
      <summary>表示用在屬性 (Attribute) 上的成員篩選條件。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Type.FilterName">
      <summary>表示用於名稱上的有區分大小寫的成員篩選條件。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>表示用在名稱上的不區分大小寫的成員篩選條件。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>傳回 <see cref="T:System.Type" /> 物件的陣列，表示由目前 <see cref="T:System.Type" /> 所實作或繼承的介面的篩選清單。</summary>
      <param name="filter">根據 <paramref name="filterCriteria" /> 比較介面的委派。</param>
      <param name="filterCriteria">判斷在傳回陣列中是否應包含介面的搜尋準則。</param>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，表示由目前 <see cref="T:System.Type" /> 所實作或繼承介面的篩選清單，如果由目前 <see cref="T:System.Type" /> 所實作或繼承的介面都不符合篩選器，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">靜態初始設定式已叫用並擲回了例外狀況。</exception>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>傳回指定成員類型的 <see cref="T:System.Reflection.MemberInfo" /> 物件的篩選陣列。</summary>
      <param name="memberType">列舉值的位元組合，表示要搜尋的成員型別。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="filter">執行比較的委派，如果目前進行檢查的成員符合 <see langword="true" />，則傳回 <paramref name="filterCriteria" />，否則傳回 <see langword="false" />。</param>
      <param name="filterCriteria">判斷在 <see langword="MemberInfo" /> 物件的陣列中是否傳回成員的搜尋準則。  
<see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的欄位可以與這個類別所提供的 <see langword="FilterAttribute" /> 委派結合使用。</param>
      <returns>指定之成員類型的 <see cref="T:System.Reflection.MemberInfo" /> 物件篩選陣列。  
-或- 
如果目前 <see cref="T:System.Type" /> 沒有符合篩選準則的 <paramref name="memberType" /> 型別成員，則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Type.FullName">
      <summary>取得類型的完整名稱 (包括其命名空間，但不包括其組件)。</summary>
      <returns>類型的完整名稱 (包括其命名空間，但不包括其組件)；如果目前執行個體代表泛型類型參數、陣列類型、指標類型、根據類型參數的 <see langword="null" /> 類型，或不是泛型類型定義但包含未解析類型參數的泛型類型，則為 <see langword="byref" />。</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>取得一組 <see cref="T:System.Reflection.GenericParameterAttributes" /> 旗標，敘述目前泛型類型參數的共變數與特殊條件約束。</summary>
      <returns>
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，描述目前泛型類型參數的共變數和特殊條件約束。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Type" /> 物件不是泛型類型參數。 亦即，<see cref="P:System.Type.IsGenericParameter" /> 屬性會傳回 <see langword="false" />。</exception>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。</exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>當 <see cref="T:System.Type" /> 物件表示泛型類型或泛型方法的類型參數時，在宣告參數的泛型類型或泛型方法之類型參數清單中，取得類型參數的位置。</summary>
      <returns>型別參數在宣告參數的泛型類型或方法之型別參數清單中的位置。 位置編號從 0 開始。</returns>
      <exception cref="T:System.InvalidOperationException">目前類型不代表類型參數。 亦即，<see cref="P:System.Type.IsGenericParameter" /> 會傳回 <see langword="false" />。</exception>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>取得此類型之泛型類型引數的陣列。</summary>
      <returns>這個類型之泛型型別引數的陣列。</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>取得陣列中的維度數目。</summary>
      <returns>包含目前類型中之維度數目的整數。</returns>
      <exception cref="T:System.NotSupportedException">這個方法的功能不受基底類別的支援，因此必須改為在衍生類別中實作。</exception>
      <exception cref="T:System.ArgumentException">目前的類型不是陣列。</exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.Attributes" /> 屬性 (Property) 並取得列舉值的位元組合，以指出與 <see cref="T:System.Type" /> 建立關聯的屬性 (Attribute)。</summary>
      <returns>
        <see cref="T:System.Reflection.TypeAttributes" /> 物件，代表 <see cref="T:System.Type" /> 的屬性集。</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束和指定的呼叫慣例，搜尋其參數符合指定的引數類型和修飾詞的建構函式。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及清除堆疊。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之建構函式的參數數目、順序和類型。  
-或- 
用以取得沒有參數的建構函式之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 預設的繫結器不會處理這個參數。</param>
      <returns>物件，代表符合指定之需求的建構函式 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。  
-或- 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束 (Constraint) 搜尋其參數符合指定的引數類型和修飾詞 (Modifier) 的建構函式。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之建構函式的參數數目、順序和類型。  
-或- 
用以取得沒有參數的建構函式之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。  
-或- 
<see cref="F:System.Type.EmptyTypes" />.</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在參數類型陣列中與對應項目關聯的屬性。 預設的繫結器不會處理這個參數。</param>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 物件，代表符合指定之需求的建構函式 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。  
-或- 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>搜尋其參數符合在指定陣列中的類型的公用執行個體建構函式。</summary>
      <param name="types">由 <see cref="T:System.Type" /> 物件組成的陣列，表示所要建構函式參數的數目、順序和類型。  
-或- 
由 <see cref="T:System.Type" /> 物件組成的空陣列，用來取得不需任何參數的建構函式。 這種供陣列是由 <see langword="static" /> 欄位 <see cref="F:System.Type.EmptyTypes" /> 提供的。</param>
      <returns>物件，表示其參數符合參數類型陣列中之類型的公用執行個體建構函式 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。</exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束和指定的呼叫慣例，搜尋其參數符合指定的引數類型和修飾詞的建構函式。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及清除堆疊。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之建構函式的參數數目、順序和類型。  
-或- 
用以取得沒有參數的建構函式之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 預設的繫結器不會處理這個參數。</param>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 物件，代表符合指定之需求的建構函式 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。  
-或- 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</exception>
      <exception cref="T:System.NotSupportedException">目前的類型為 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>傳回所有定義給目前 <see cref="T:System.Type" /> 的公用建構函式。</summary>
      <returns>由 <see cref="T:System.Reflection.ConstructorInfo" /> 物件組成的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有公用執行個體建構函式，但不含類型初始設定式 (靜態建構函式)。 如果目前的 <see cref="T:System.Type" /> 沒有定義任何公用執行個體建構函式，或目前的 <see cref="T:System.Type" /> 表示泛型類型或泛型方法定義中的類型參數，則會傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的 <see cref="T:System.Type" />，搜尋定義給目前 <see langword="BindingFlags" /> 的建構函式。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有建構函式，包括類型初始設定式 (如果已定義)。 如果目前的 <see cref="T:System.Reflection.ConstructorInfo" /> 沒有定義建構函式，或所定義的建構函式都不符合繫結條件約束，或目前的 <see cref="T:System.Type" /> 表示泛型類型或泛型方法定義中的類型參數，則傳回 <see cref="T:System.Type" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>搜尋定義給目前 <see cref="T:System.Type" /> 的成員，而它的 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 已設定。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 的所有預設成員。  
-或- 
<see cref="T:System.Reflection.MemberInfo" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 沒有預設成員)。</returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>在衍生類別中覆寫時，傳回由目前陣列、指標或參考類型所包含或參考物件的 <see cref="T:System.Type" />。</summary>
      <returns>目前的陣列、指標或參考類型所內含或參考之物件的 <see cref="T:System.Type" />，如果目前的 <see langword="null" /> 不是陣列或指標、未以傳址方式傳遞，或表示泛型類型或泛型類型或泛型方法定義中之類型參數，則為 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Type.GetEnumName(System.Object)">
      <summary>針對目前的列舉類型，傳回具有指定值之常數的名稱。</summary>
      <param name="value">要擷取其名稱的值。</param>
      <returns>具有指定值之目前列舉類型的成員名稱，如果找不到這類常數，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">目前的類型不是列舉。  
-或- 
 <paramref name="value" /> 既不是目前類型，也沒有相同的基礎類型做為目前類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetEnumNames">
      <summary>傳回目前列舉類型之成員的名稱。</summary>
      <returns>包含列舉之成員名稱的陣列。</returns>
      <exception cref="T:System.ArgumentException">目前的類型不是列舉。</exception>
    </member>
    <member name="M:System.Type.GetEnumUnderlyingType">
      <summary>傳回目前列舉類型的基礎類型。</summary>
      <returns>目前列舉的基礎類型。</returns>
      <exception cref="T:System.ArgumentException">目前的類型不是列舉。  
 -或-  
 列舉類型無效，因為它包含一個以上的執行個體欄位。</exception>
    </member>
    <member name="M:System.Type.GetEnumValues">
      <summary>傳回目前列舉類型中常數的值陣列。</summary>
      <returns>包含值的陣列。 陣列的項目依列舉常數的二進位值 (也就是不帶正負號值) 排序。</returns>
      <exception cref="T:System.ArgumentException">目前的類型不是列舉。</exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>傳回代表指定公用事件的 <see cref="T:System.Reflection.EventInfo" /> 物件。</summary>
      <param name="name">字串，其中包含由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件名稱。</param>
      <returns>如果找到，則表示由目前 <see cref="T:System.Type" /> 所宣告或繼承之指定公用事件的物件，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，傳回表示指定事件的 <see cref="T:System.Reflection.EventInfo" /> 物件。</summary>
      <param name="name">字串，包含目前 <see cref="T:System.Type" /> 所宣告或繼承之事件的名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>如果找到，則表示由目前 <see cref="T:System.Type" /> 所宣告或繼承之指定事件的物件，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>取得由目前 <see cref="T:System.Type" /> 所宣告或繼承的所有公用事件。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 所宣告或繼承的所有公用事件。  
-或- 
<see cref="T:System.Reflection.EventInfo" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 沒有公用事件)。</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。
-或-
 要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 所宣告或繼承之符合指定繫結條件約束的所有事件。  
-或- 
如果目前 <see cref="T:System.Reflection.EventInfo" /> 沒有事件，或沒有事件符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>搜尋具有指定名稱的公用欄位。</summary>
      <param name="name">字串，包含要取得的資料欄位的名稱。</param>
      <returns>物件，代表具有指定之名稱的公用欄位 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">這個 <see cref="T:System.Type" /> 物件是 <see cref="T:System.Reflection.Emit.TypeBuilder" />，尚未呼叫其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法。</exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的欄位。</summary>
      <param name="name">字串，包含要取得的資料欄位的名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>代表符合指定之需求欄位的物件 (如有找到) ，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有公用欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義的所有公用欄位。  
-或- 
<see cref="T:System.Reflection.FieldInfo" /> 類型的空陣列 (如果沒有為目前 <see cref="T:System.Type" /> 定義公用欄位)。</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的欄位。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。
-或-
 要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有欄位。  
-或- 
如果沒有任何欄位定義給目前 <see cref="T:System.Reflection.FieldInfo" /> 的欄位，或沒有已定義的欄位符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>傳回 <see cref="T:System.Type" /> 物件的陣列，代表封閉泛型類型的類型引數，或泛型類型定義的類型參數。</summary>
      <returns>由 <see cref="T:System.Type" /> 物件組成的陣列，代表泛型類型的型別引數。 如果目前的類型不是泛型類型，則傳回空的陣列。</returns>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。 衍生類別必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>傳回由 <see cref="T:System.Type" /> 物件組成的陣列，這些物件代表對目前泛型類型參數所設下的條件約束。</summary>
      <returns>由 <see cref="T:System.Type" /> 物件組成的陣列，這些物件代表對目前泛型型別參數所設下的條件約束。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Type" /> 物件不是泛型類型參數。 亦即，<see cref="P:System.Type.IsGenericParameter" /> 屬性會傳回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>傳回代表泛型類型定義的 <see cref="T:System.Type" /> 物件，利用此泛型類型定義就可以建構出目前的泛型類型。</summary>
      <returns>代表泛型類型的 <see cref="T:System.Type" /> 物件，利用此泛型類型就可以建構出目前的類型。</returns>
      <exception cref="T:System.InvalidOperationException">目前的類型不是泛型類型。  亦即，<see cref="P:System.Type.IsGenericType" /> 會傳回 <see langword="false" />。</exception>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。 衍生類別必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String)">
      <summary>搜尋具有指定名稱的介面。</summary>
      <param name="name">字串，包含要取得的介面名稱。 若為泛型介面，則為 mangled 名稱。</param>
      <returns>物件，代表具有指定之名稱的介面是由目前 <see cref="T:System.Type" /> 所實作或繼承的 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">目前的 <see cref="T:System.Type" /> 代表實作具有不同型別引數之相同泛型介面的類型。</exception>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>在衍生類別中覆寫時，指定是否針對介面名稱以不區分大小寫的方式來搜尋指定的介面。</summary>
      <param name="name">字串，包含要取得的介面名稱。 若為泛型介面，則為 mangled 名稱。</param>
      <param name="ignoreCase">
        <see langword="true" />，便會忽略 <paramref name="name" /> 中指定簡單介面名稱之該部分的大小寫 (指定命名空間的部分必須使用正確的大小寫)。  
-或- 
<see langword="false" /> 表示對 <paramref name="name" /> 的所有部分執行區分大小寫的搜尋。</param>
      <returns>物件，代表具有指定之名稱的介面是由目前 <see cref="T:System.Type" /> 所實作或繼承的 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">目前的 <see cref="T:System.Type" /> 代表實作具有不同型別引數之相同泛型介面的類型。</exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>傳回指定介面類型的介面對應。</summary>
      <param name="interfaceType">要擷取對應的介面類型。</param>
      <returns>物件，表示 <paramref name="interfaceType" /> 的介面對應。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="interfaceType" /> 不會由目前類型實作。  
-或- 
<paramref name="interfaceType" /> 引數未參考介面。  
-或-
目前的執行個體或 <paramref name="interfaceType" /> 引數是開放式泛型型別，也就是 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 <see langword="true" />。
-或-
 <paramref name="interfaceType" /> 是泛型介面，且目前的類型是陣列類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前 <see cref="T:System.Type" /> 代表泛型型別參數；也就是說， <see cref="P:System.Type.IsGenericParameter" /> 是 <see langword="true" />。</exception>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。 衍生類別必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>在衍生類別中覆寫時，取得由目前 <see cref="T:System.Type" /> 所實作或繼承的所有介面。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，代表目前 <see cref="T:System.Type" />所實作或繼承的所有介面。  
-或- 
<see cref="T:System.Type" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 未實作或繼承介面)。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">靜態初始設定式已叫用並擲回了例外狀況。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>搜尋具有指定名稱的公用成員。</summary>
      <param name="name">字串，包含要取得的公用成員名稱。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表具有指定名稱的公用成員 (如有找到)；否則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的成員。</summary>
      <param name="name">字串，包含要取得的成員名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表具有指定名稱的公用成員 (如有找到)；否則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束，搜尋指定成員類型的指定成員。</summary>
      <param name="name">字串，包含要取得的成員名稱。</param>
      <param name="type">要搜尋的值。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表具有指定名稱的公用成員 (如有找到)；否則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">衍生類別必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有公用成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 的所有公用成員。  
-或- 
<see cref="T:System.Reflection.MemberInfo" /> 類型的空陣列 (如果目前 <see cref="T:System.Type" /> 沒有公用成員)。</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的成員。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有成員。  
-或- 
如果未針對目前的 <see cref="T:System.Type" /> 定義任何成員，或沒有已定義的成員符合繫結條件約束，則為空陣列。</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>搜尋具有指定名稱的公用方法。</summary>
      <param name="name">字串，包含要取得的公用方法名稱。</param>
      <returns>物件，代表具有指定之名稱的公用方法 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="callConvention" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="types" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的方法。</summary>
      <param name="name">字串，包含要取得的方法名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束和指定的呼叫慣例，來搜尋指定的方法，而該方法的參數符合指定的引數類型和修飾詞。</summary>
      <param name="name">字串，包含要取得的方法名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及如何清除堆疊。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。  
-或- 
<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。 預設的繫結器不會處理這個參數。</param>
      <returns>物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束搜尋指定的方法，而該方法的參數符合指定的引數類型和修飾詞。</summary>
      <param name="name">字串，包含要取得的方法名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。  
-或- 
<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。 預設的繫結器不會處理這個參數。</param>
      <returns>物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>搜尋指定的公用方法，其參數符合指定的引數類型。</summary>
      <param name="name">字串，包含要取得的公用方法名稱。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。  
-或- 
<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</param>
      <returns>代表其參數符合指定之引數類型的公用方法物件 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱及指定參數的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>搜尋指定的公用方法，其參數符合指定的引數類型和修飾詞。</summary>
      <param name="name">字串，包含要取得的公用方法名稱。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。  
-或- 
<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，可取得不採用參數的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。 預設的繫結器不會處理這個參數。</param>
      <returns>物件，代表符合指定之需求的公用方法 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱及指定參數的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。</exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="callConvention" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束和指定的呼叫慣例搜尋指定的方法，而該方法的參數符合指定的引數類型和修飾詞。</summary>
      <param name="name">字串，包含要取得的方法名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及哪一個處理程序清除堆疊。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之方法的參數數目、順序和類型。  
-或- 
用以取得沒有參數的方法之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。  
-或- 
<see langword="null" />. 如果 <paramref name="types" /> 為 <see langword="null" />，則引數不相符。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 預設的繫結器不會處理這個參數。</param>
      <returns>物件，代表符合指定之需求的方法 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上的方法，其具有指定名稱，且符合指定繫結條件約束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。  
-或- 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</exception>
      <exception cref="T:System.NotSupportedException">目前的類型為 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有公用方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義的所有公用方法。  
-或- 
<see cref="T:System.Reflection.MethodInfo" /> 類型的空陣列 (如果沒有為目前 <see cref="T:System.Type" /> 定義公用方法)。</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的方法。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。
-或-
 要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，代表為目前 <see cref="T:System.Type" /> 定義之符合指定繫結條件約束的所有方法。  
-或- 
如果沒有任何方法定義給目前的 <see cref="T:System.Reflection.MethodInfo" />，或沒有已定義的方法符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String)">
      <summary>搜尋具有指定名稱的公用巢狀類型。</summary>
      <param name="name">包含要取得之巢狀類型名稱的字串。</param>
      <returns>物件，代表具有指定名稱的巢狀類型 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的巢狀類型。</summary>
      <param name="name">包含要取得之巢狀類型名稱的字串。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>物件，代表符合指定之需求的巢狀類型 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetNestedTypes">
      <summary>傳回在目前 <see cref="T:System.Type" /> 內形成巢狀的公用類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 中的巢狀公用類型 (搜尋不是遞迴的)；如果目前 <see cref="T:System.Type" /> 中沒有巢狀公用類型，則為 <see cref="T:System.Type" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋在目前 <see cref="T:System.Type" /> 內形成巢狀的類型。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 中符合指定繫結條件約束的所有巢狀類型 (搜尋不是遞迴的)；如果找不到符合繫結條件約束的巢狀類型，則為 <see cref="T:System.Type" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有公用屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，代表目前 <see cref="T:System.Type" /> 的所有公用屬性。  
-或- 
類型 <see cref="T:System.Reflection.PropertyInfo" /> 的空陣列，如果目前 <see cref="T:System.Type" /> 並沒有公用屬性。</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋目前 <see cref="T:System.Type" /> 的屬性。</summary>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。
-或-
 要傳回空陣列的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>物件的陣列，代表目前 <see cref="T:System.Type" /> 中符合指定繫結條件約束的所有屬性。  
-或- 
如果目前 <see cref="T:System.Reflection.PropertyInfo" /> 沒有屬性，或沒有屬性符合繫結條件約束，則為 <see cref="T:System.Type" /> 類型的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>搜尋具有指定名稱的公用屬性。</summary>
      <param name="name">字串，包含要取得的公用屬性名稱。</param>
      <returns>物件，代表具有指定之名稱的公用屬性 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的屬性。</summary>
      <param name="name">字串，包含要取得的屬性名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <returns>代表符合指定之需求屬性的物件 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上的屬性，其具有指定名稱，且符合指定繫結條件約束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數類型和修飾詞。</summary>
      <param name="name">字串，包含要取得的屬性名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。  
-或- 
用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 預設的繫結器不會處理這個參數。</param>
      <returns>代表符合指定之需求屬性的物件 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上的屬性，其具有指定名稱，且符合指定繫結條件約束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。  
-或- 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的項目是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>搜尋具有指定名稱和傳回類型的公用屬性。</summary>
      <param name="name">字串，包含要取得的公用屬性名稱。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <returns>物件，代表具有指定之名稱的公用屬性 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 <see langword="null" />，或 <paramref name="returnType" /> 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>搜尋指定的公用屬性，其參數符合指定的引數類型。</summary>
      <param name="name">字串，包含要取得的公用屬性名稱。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。  
-或- 
用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</param>
      <returns>代表其參數符合指定之引數類型的公用屬性物件 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱，且符合指定引數類型的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的項目是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>搜尋指定的公用屬性，其參數符合指定的引數類型和修飾詞。</summary>
      <param name="name">字串，包含要取得的公用屬性名稱。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。  
-或- 
用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 預設的繫結器不會處理這個參數。</param>
      <returns>物件，代表符合指定之需求的公用屬性 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱，且符合指定引數類型和修飾詞的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。  
-或- 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的項目是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type[])">
      <summary>搜尋指定的公用屬性，其參數符合指定的引數類型。</summary>
      <param name="name">字串，包含要取得的公用屬性名稱。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。  
-或- 
用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</param>
      <returns>代表其參數符合指定之引數類型的公用屬性物件 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱，且符合指定引數類型的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的項目是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數類型和修飾詞的建構函式。</summary>
      <param name="name">字串，包含要取得的屬性名稱。</param>
      <param name="bindingAttr">列舉值的位元組合，用來指定搜尋的執行方式。  
-或- 
 要傳回 <see langword="null" /> 的 <see cref="F:System.Reflection.BindingFlags.Default" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載成員的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，代表所要取得之索引屬性的參數數目、順序和類型。  
-或- 
用以取得未編製索引的屬性之 <see cref="T:System.Type" /> 類型的空陣列 (也就是，Type[] types = new Type[0])。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="types" /> 陣列中與對應項目關聯的屬性。 預設的繫結器不會處理這個參數。</param>
      <returns>代表符合指定之需求屬性的物件 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上的屬性，其具有指定名稱，且符合指定繫結條件約束。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。  
-或- 
 <paramref name="types" /> 為 <see langword="null" />。  
-或- 
<paramref name="types" /> 的其中一個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多維的。  
-或- 
 <paramref name="modifiers" /> 是多維的。  
-或- 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不同。</exception>
      <exception cref="T:System.NotSupportedException">目前的類型為 <see cref="T:System.Reflection.Emit.TypeBuilder" />、<see cref="T:System.Reflection.Emit.EnumBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetType">
      <summary>取得目前的 <see cref="T:System.Type" />。</summary>
      <returns>目前的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋。</summary>
      <param name="typeName">要取得之類型的組件限定名稱。 請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</param>
      <returns>具有指定名稱的類型 (如有找到)，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。  
-或- 
 <paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.IO.FileLoadException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.IO.IOException" />。  


            

 找到組件或其相依性的其中一個，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">組件或組件的其中一個相依性無效。  
 -或-  
 目前載入的通用語言執行平台是 2.0 版或更新的版本，但用來編譯組件的卻是更新的版本。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋，並設定找不到該類型時，是否應擲回例外狀況。</summary>
      <param name="typeName">要取得之類型的組件限定名稱。 請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。 指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。 請參閱＜例外狀況＞一節。</param>
      <returns>具有指定名稱的類型。 如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。 在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。 請參閱＜例外狀況＞一節。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。 
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。  
-或- 
 <paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效的語法。 例如，"MyType[,*,]"。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。  
-或- 
 <paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 為 <see langword="true" /> ，而且找不到組件或組件的其中一個相依性。</exception>
      <exception cref="T:System.IO.FileLoadException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.IO.IOException" />。  


            

 找到組件或其相依性的其中一個，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">組件或組件的其中一個相依性無效。  
 -或-  
 目前載入的通用語言執行平台是 2.0 版或更新的版本，但用來編譯組件的卻是更新的版本。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，指定找不到類型時是否要擲回例外狀況，以及是否要執行區分大小寫的搜尋。</summary>
      <param name="typeName">要取得之類型的組件限定名稱。 請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果此類型位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的類型名稱便已足夠。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。 指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。 請參閱＜例外狀況＞一節。</param>
      <param name="ignoreCase">為 <see langword="true" /> 執行不區分大小寫的搜尋，則為 <paramref name="typeName" />；為 <see langword="false" /> 執行區分大小寫的搜尋，則為 <paramref name="typeName" />。</param>
      <returns>具有指定名稱的類型。 如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。 在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。 請參閱＜例外狀況＞一節。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。 
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。  
-或- 
 <paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效的語法。 例如，"MyType[,*,]"。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。  
-或- 
 <paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</exception>
      <exception cref="T:System.IO.FileLoadException">找到組件或其相依性的其中一個，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">組件或組件的其中一個相依性無效。  
 -或-  
 目前載入的通用語言執行平台是 2.0 版或更新的版本，但用來編譯組件的卻是更新的版本。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})">
      <summary>取得具有指定名稱的類型，並選擇性提供自訂方法來解析組件和類型。</summary>
      <param name="typeName">要取得之類型的名稱。 如果已提供 <paramref name="typeResolver" /> 參數，則類型名稱可為 <paramref name="typeResolver" /> 能解析的任何字串。 如果已提供 <paramref name="assemblyResolver" /> 參數或已使用標準類型解析，<paramref name="typeName" /> 就必須是組件限定名稱 (請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />)，除非類型位於目前正在執行的組件或 Mscorlib.dll 中，這種情況時，此類型就能提供本身命名空間限定的類型名稱。</param>
      <param name="assemblyResolver">方法，會找出並傳回 <paramref name="typeName" /> 中指定的組件。 組件名稱做為 <paramref name="assemblyResolver" /> 物件傳遞至 <see cref="T:System.Reflection.AssemblyName" />。 如果 <paramref name="typeName" /> 不包含組件名稱，則不會呼叫 <paramref name="assemblyResolver" />。 如果未提供 <paramref name="assemblyResolver" />，則會執行標準組件解析。  
注意：不要從未知或未受信任的呼叫端傳遞方法。 這樣做可能會提高惡意程式碼的權限。 只使用您所提供或熟悉的方法。</param>
      <param name="typeResolver">從 <paramref name="typeName" /> 或標準組件解析傳回的組件，找出並傳回由 <paramref name="assemblyResolver" /> 指定之類型的方法。 如果未提供任何組件，<paramref name="typeResolver" /> 方法會提供一個組件。 這個方法也使用參數來指定是否執行不區分大小寫的搜尋。會傳遞 <see langword="false" /> 至該參數。  
注意：不要從未知或未受信任的呼叫端傳遞方法。</param>
      <returns>具有指定名稱的類型；如果找不到類型，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">將 <paramref name="typeName" /> 剖析成類型名稱和組件名稱 (例如簡單類型名稱包含未逸出的特殊字元) 時發生錯誤。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。  
-或- 
 <paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.IO.FileLoadException">找到組件或其相依性的其中一個，但無法載入。  
-或- 
 <paramref name="typeName" /> 包含無效組件名稱。  
-或- 
 <paramref name="typeName" /> 是不具類型名稱的有效組件名稱。</exception>
      <exception cref="T:System.BadImageFormatException">組件或組件的其中一個相依性無效。  
 -或-  
 用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)">
      <summary>取得具有指定名稱的類型，指定找不到類型時是否擲回例外狀況，同時選擇性提供自訂方法來解析組件和類型。</summary>
      <param name="typeName">要取得之類型的名稱。 如果已提供 <paramref name="typeResolver" /> 參數，則類型名稱可為 <paramref name="typeResolver" /> 能解析的任何字串。 如果已提供 <paramref name="assemblyResolver" /> 參數或已使用標準類型解析，<paramref name="typeName" /> 就必須是組件限定名稱 (請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />)，除非類型位於目前正在執行的組件或 Mscorlib.dll 中，這種情況時，此類型就能提供本身命名空間限定的類型名稱。</param>
      <param name="assemblyResolver">方法，會找出並傳回 <paramref name="typeName" /> 中指定的組件。 組件名稱做為 <paramref name="assemblyResolver" /> 物件傳遞至 <see cref="T:System.Reflection.AssemblyName" />。 如果 <paramref name="typeName" /> 不包含組件名稱，則不會呼叫 <paramref name="assemblyResolver" />。 如果未提供 <paramref name="assemblyResolver" />，則會執行標準組件解析。  
注意：不要從未知或未受信任的呼叫端傳遞方法。 這樣做可能會提高惡意程式碼的權限。 只使用您所提供或熟悉的方法。</param>
      <param name="typeResolver">從 <paramref name="typeName" /> 或標準組件解析傳回的組件，找出並傳回由 <paramref name="assemblyResolver" /> 指定之類型的方法。 如果未提供任何組件，方法會提供一個組件。 這個方法也使用參數來指定是否執行不區分大小寫的搜尋。會傳遞 <see langword="false" /> 至該參數。  
注意：不要從未知或未受信任的呼叫端傳遞方法。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。 指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。 請參閱＜例外狀況＞一節。</param>
      <returns>具有指定名稱的類型。 如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。 在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。 請參閱＜例外狀況＞一節。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。 
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。  
-或- 
 <paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.ArgumentException">將 <paramref name="typeName" /> 剖析成類型名稱和組件名稱 (例如簡單類型名稱包含未逸出的特殊字元) 時發生錯誤。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效語法 (例如 "MyType[,*,]")。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。  
-或- 
 <paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。  
-或- 
 <paramref name="typeName" /> 包含無效組件名稱。  
-或- 
 <paramref name="typeName" /> 是不具類型名稱的有效組件名稱。</exception>
      <exception cref="T:System.IO.FileLoadException">找到組件或其相依性的其中一個，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">組件或組件的其中一個相依性無效。  
 -或-  
 用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)">
      <summary>取得具有指定名稱的類型，指定是否執行區分大小寫的搜尋以及找不到類型時是否擲回例外狀況，同時選擇性提供自訂方法來解析組件和類型。</summary>
      <param name="typeName">要取得之類型的名稱。 如果已提供 <paramref name="typeResolver" /> 參數，則類型名稱可為 <paramref name="typeResolver" /> 能解析的任何字串。 如果已提供 <paramref name="assemblyResolver" /> 參數或已使用標準類型解析，<paramref name="typeName" /> 就必須是組件限定名稱 (請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />)，除非類型位於目前正在執行的組件或 Mscorlib.dll 中，這種情況時，此類型就能提供本身命名空間限定的類型名稱。</param>
      <param name="assemblyResolver">方法，會找出並傳回 <paramref name="typeName" /> 中指定的組件。 組件名稱做為 <paramref name="assemblyResolver" /> 物件傳遞至 <see cref="T:System.Reflection.AssemblyName" />。 如果 <paramref name="typeName" /> 不包含組件名稱，則不會呼叫 <paramref name="assemblyResolver" />。 如果未提供 <paramref name="assemblyResolver" />，則會執行標準組件解析。  
注意：不要從未知或未受信任的呼叫端傳遞方法。 這樣做可能會提高惡意程式碼的權限。 只使用您所提供或熟悉的方法。</param>
      <param name="typeResolver">從 <paramref name="typeName" /> 或標準組件解析傳回的組件，找出並傳回由 <paramref name="assemblyResolver" /> 指定之類型的方法。 如果未提供任何組件，方法會提供一個組件。 這個方法也使用參數來指定是否執行不區分大小寫的搜尋。會傳遞 <paramref name="ignoreCase" /> 的值至該參數。  
注意：不要從未知或未受信任的呼叫端傳遞方法。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。 指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。 請參閱＜例外狀況＞一節。</param>
      <param name="ignoreCase">為 <see langword="true" /> 執行不區分大小寫的搜尋，則為 <paramref name="typeName" />；為 <see langword="false" /> 執行區分大小寫的搜尋，則為 <paramref name="typeName" />。</param>
      <returns>具有指定名稱的類型。 如果找不到該類型，<paramref name="throwOnError" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。 在某些情況下，不論 <paramref name="throwOnError" /> 的值為何，都會擲回例外狀況。 請參閱＜例外狀況＞一節。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到類型。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。 
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。  
-或- 
 <paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.ArgumentException">將 <paramref name="typeName" /> 剖析成類型名稱和組件名稱 (例如簡單類型名稱包含未逸出的特殊字元) 時發生錯誤。  
-或- 
 <paramref name="throwOnError" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效語法 (例如 "MyType[,*,]")。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。  
-或- 
 <paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</exception>
      <exception cref="T:System.IO.FileLoadException">找到組件或其相依性的其中一個，但無法載入。  
-或- 
 <paramref name="typeName" /> 包含無效組件名稱。  
-或- 
 <paramref name="typeName" /> 是不具類型名稱的有效組件名稱。</exception>
      <exception cref="T:System.BadImageFormatException">組件或組件的其中一個相依性無效。  
 -或-  
 用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
    </member>
    <member name="M:System.Type.GetTypeArray(System.Object[])">
      <summary>取得指定陣列中物件的類型。</summary>
      <param name="args">要決定類型之物件的陣列。</param>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，代表 <paramref name="args" /> 中對應項目的類型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> 為 <see langword="null" />。  
-或- 
<paramref name="args" /> 的其中一或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用了類別初始設定式，並至少有一個會擲回例外狀況。</exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>取得指定的 <see cref="T:System.Type" /> 的基礎類型程式碼。</summary>
      <param name="type">要取得其基礎類型程式碼的類型。</param>
      <returns>基礎類型程式碼，如果 <see cref="F:System.TypeCode.Empty" /> 是 <paramref name="type" /> 則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Type.GetTypeCodeImpl">
      <summary>傳回此 <see cref="T:System.Type" /> 執行個體的基礎型別碼。</summary>
      <returns>基礎類型的型別碼。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
      <summary>取得與指定的類別識別項 (CLSID) 關聯的類型。</summary>
      <param name="clsid">要取得之類型的 CLSID。</param>
      <returns>
        <see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)">
      <summary>取得與指定的類別識別項 (CLSID) 關聯的類型，並指定如果載入類型時發生錯誤是否擲回例外狀況。</summary>
      <param name="clsid">要取得之類型的 CLSID。</param>
      <param name="throwOnError">
        <see langword="true" />，擲回任何會發生的例外狀況。  
-或- 
<see langword="false" /> 則忽略任何會發生的例外狀況。</param>
      <returns>
        <see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)">
      <summary>從指定的伺服器中，取得與指定的類別識別項 (CLSID) 相關聯的類型。</summary>
      <param name="clsid">要取得之類型的 CLSID。</param>
      <param name="server">要載入類型的伺服器。 如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</param>
      <returns>
        <see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)">
      <summary>從指定的伺服器中，取得與指定的類別識別項 (CLSID) 相關聯的類型，並指定如果在載入類型時發生錯誤是否擲回例外狀況。</summary>
      <param name="clsid">要取得之類型的 CLSID。</param>
      <param name="server">要載入類型的伺服器。 如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</param>
      <param name="throwOnError">
        <see langword="true" />，擲回任何會發生的例外狀況。  
-或- 
<see langword="false" /> 則忽略任何會發生的例外狀況。</param>
      <returns>
        <see langword="System.__ComObject" /> (不論 CLSID 是否有效)。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>取得指定的類型控制代碼所參考的類型。</summary>
      <param name="handle">參考類型的物件。</param>
      <returns>由指定 <see cref="T:System.RuntimeTypeHandle" /> 參考的類型，如果 <see langword="null" /> 的 <see cref="P:System.RuntimeTypeHandle.Value" /> 屬性為 <paramref name="handle" /> 則為 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String)">
      <summary>取得與指定的程式識別項 (ProgID) 相關聯的類型；如果在載入 <see cref="T:System.Type" /> 時發生錯誤，則傳回 null。</summary>
      <param name="progID">要取得之類型的 ProgID。</param>
      <returns>如果 <paramref name="progID" /> 在登錄中是有效項目，而且有類型與它相關聯，則為與指定的 ProgID 相關聯的類型，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)">
      <summary>取得與指定的程式識別項 (ProgID) 相關聯的類型，並指定如果在載入類型時發生錯誤是否擲回例外狀況。</summary>
      <param name="progID">要取得之類型的 ProgID。</param>
      <param name="throwOnError">
        <see langword="true" /> ，擲回任何會發生的例外狀況。  
-或- 
<see langword="false" /> 則忽略任何會發生的例外狀況。</param>
      <returns>如果 <paramref name="progID" /> 在登錄中是有效的項目，且有與其相關聯的類型，則為與指定的程式識別項 (progID) 相關聯的類型，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">指定的 ProgID 未註冊。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String)">
      <summary>從指定的伺服器中，取得與指定的程式識別項 (progID) 相關聯的類型；如果在載入類型時發生錯誤，則傳回 null。</summary>
      <param name="progID">要取得之類型的 progID。</param>
      <param name="server">要載入類型的伺服器。 如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</param>
      <returns>如果 <paramref name="progID" /> 在登錄中是有效的項目，且有與其相關聯的類型，則為與指定的程式識別項 (progID) 相關聯的類型，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="prodID" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)">
      <summary>從指定的伺服器中，取得與指定的程式識別項 (progID) 相關聯的類型，並指定如果在載入類型時發生錯誤是否擲回例外狀況。</summary>
      <param name="progID">要取得之 <see cref="T:System.Type" /> 的 progID。</param>
      <param name="server">要載入類型的伺服器。 如果伺服器名稱為 <see langword="null" />，此方法將會自動還原成本機電腦 (Local Machine)。</param>
      <param name="throwOnError">
        <see langword="true" />，擲回任何會發生的例外狀況。  
-或- 
<see langword="false" /> 則忽略任何會發生的例外狀況。</param>
      <returns>如果 <paramref name="progID" /> 在登錄中是有效的項目，且有與其相關聯的類型，則為與指定的程式識別項 (progID) 相關聯的類型，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">未註冊指定的 progID。</exception>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>取得指定物件的 <see cref="T:System.Type" /> 的控制代碼。</summary>
      <param name="o">要取得其類型控制代碼的物件。</param>
      <returns>指定 <see cref="T:System.Type" /> 之 <see cref="T:System.Object" /> 的控制代碼。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Type.GUID">
      <summary>取得與 <see cref="T:System.Type" />相關聯的 GUID。</summary>
      <returns>與 <see cref="T:System.Type" /> 相關聯的 GUID。</returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>取得值，指出目前 <see cref="T:System.Type" /> 是否內含或參考其他類型；也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或以傳址方式傳遞。</summary>
      <returns>如果 <see langword="true" /> 是陣列、指標或以傳址方式傳遞，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.HasElementType" /> 屬性並判斷目前 <see cref="T:System.Type" /> 是否內含或參考其他類型；也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或以傳址方式傳遞。</summary>
      <returns>如果 <see langword="true" /> 是陣列、指標或以傳址方式傳遞，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>使用指定的繫結條件約束並符合指定的引數清單，來叫用指定的成員。</summary>
      <param name="name">字串，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。  
-或- 
空字串 ("")，要叫用預設成員。  
-或- 
對 <see langword="IDispatch" /> 成員表示 DispID 的字串，例如 "[DispID=3]"。</param>
      <param name="invokeAttr">列舉值的位元組合，用來指定搜尋的執行方式。 該存取可以是其中一個 <see langword="BindingFlags" />，例如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" />、<see langword="GetField" /> 等等。 不需要指定查閱的類型。 如果省略查閱的類型，則會使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。 請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能順利以變數引數叫用方法多載。</param>
      <param name="target">要在其上叫用指定成員的物件。</param>
      <param name="args">包含引數的陣列，這些引數會傳遞給要叫用的成員。</param>
      <returns>表示叫用的成員之傳回值的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" />不包含 <see langword="CreateInstance" />，且 <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。  
-或- 
 <paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。  
-或- 
 <paramref name="invokeAttr" /> 包含與 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 合併的 <see langword="CreateInstance" />。  
-或- 
 <paramref name="invokeAttr" /> 同時包含 <see langword="GetField" /> 和 <see langword="SetField" />。  
-或- 
 <paramref name="invokeAttr" /> 同時包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。  
-或- 
 <paramref name="invokeAttr" /> 包含與 <see langword="SetField" /> 或 <see langword="SetProperty" /> 合併的 <see langword="InvokeMethod" />。  
-或- 
 <paramref name="invokeAttr" /> 包含 <see langword="SetField" /> 且 <paramref name="args" /> 具有一個以上的項目。  
-或- 
已在 COM 物件上呼叫此方法且下列其中一個繫結旗標未傳入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。  
-或- 
其中一個具名參數陣列包含的字串是 <see langword="null" />。</exception>
      <exception cref="T:System.MethodAccessException">指定的成員是類別初始設定式。</exception>
      <exception cref="T:System.MissingFieldException">找不到欄位或屬性。</exception>
      <exception cref="T:System.MissingMethodException">找不到符合 <paramref name="args" /> 中之引數的方法。  
-或- 
目前的 <see cref="T:System.Type" /> 物件代表包含開啟類型參數的類型，亦即，<see cref="P:System.Type.ContainsGenericParameters" /> 傳回 <see langword="true" />。</exception>
      <exception cref="T:System.Reflection.TargetException">無法在 <paramref name="target" /> 上叫用指定的成員。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上符合繫結準則的方法。</exception>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework 目前不支援這個方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="name" /> 所表示的方法有一或多個未指定的泛型類型參數。 亦即，方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 屬性傳回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的繫結條件約束並符合指定的引數清單和文化特性 (Culture) 來叫用指定的成員。</summary>
      <param name="name">字串，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。  
-或- 
空字串 ("")，要叫用預設成員。  
-或- 
對 <see langword="IDispatch" /> 成員表示 DispID 的字串，例如 "[DispID=3]"。</param>
      <param name="invokeAttr">列舉值的位元組合，用來指定搜尋的執行方式。 該存取可以是其中一個 <see langword="BindingFlags" />，例如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" />、<see langword="GetField" /> 等等。 不需要指定查閱的類型。 如果省略查閱的類型，則會使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，可使用 <see cref="P:System.Type.DefaultBinder" />。 請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能順利以變數引數叫用方法多載。</param>
      <param name="target">要在其上叫用指定成員的物件。</param>
      <param name="args">包含引數的陣列，這些引數會傳遞給要叫用的成員。</param>
      <param name="culture">表示要使用之全球化地區設定的物件，它可能是地區設定特性轉換所需要的，例如將數值 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Double" />。  
-或- 
Null 參考 (Visual Basic 中的 <see langword="Nothing" />)，可使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>表示叫用的成員之傳回值的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" />不包含 <see langword="CreateInstance" />，且 <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。  
-或- 
 <paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。  
-或- 
 <paramref name="invokeAttr" /> 包含與 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 合併的 <see langword="CreateInstance" />。  
-或- 
 <paramref name="invokeAttr" /> 同時包含 <see langword="GetField" /> 和 <see langword="SetField" />。  
-或- 
 <paramref name="invokeAttr" /> 同時包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。  
-或- 
 <paramref name="invokeAttr" /> 包含與 <see langword="SetField" /> 或 <see langword="SetProperty" /> 合併的 <see langword="InvokeMethod" />。  
-或- 
 <paramref name="invokeAttr" /> 包含 <see langword="SetField" /> 且 <paramref name="args" /> 具有一個以上的項目。  
-或- 
已在 COM 物件上呼叫此方法且下列其中一個繫結旗標未傳入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。  
-或- 
其中一個具名參數陣列包含的字串是 <see langword="null" />。</exception>
      <exception cref="T:System.MethodAccessException">指定的成員是類別初始設定式。</exception>
      <exception cref="T:System.MissingFieldException">找不到欄位或屬性。</exception>
      <exception cref="T:System.MissingMethodException">找不到符合 <paramref name="args" /> 中之引數的方法。  
-或- 
目前的 <see cref="T:System.Type" /> 物件代表包含開啟類型參數的類型，亦即，<see cref="P:System.Type.ContainsGenericParameters" /> 傳回 <see langword="true" />。</exception>
      <exception cref="T:System.Reflection.TargetException">無法在 <paramref name="target" /> 上叫用指定的成員。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上符合繫結準則的方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="name" /> 所表示的方法有一或多個未指定的泛型類型參數。 亦即，方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 屬性傳回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束並符合指定的引數清單、修飾詞和文化特性，來叫用指定的成員。</summary>
      <param name="name">字串，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。  
-或- 
空字串 ("")，要叫用預設成員。  
-或- 
對 <see langword="IDispatch" /> 成員表示 DispID 的字串，例如 "[DispID=3]"。</param>
      <param name="invokeAttr">列舉值的位元組合，用來指定搜尋的執行方式。 該存取可以是其中一個 <see langword="BindingFlags" />，例如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" />、<see langword="GetField" /> 等等。 不需要指定查閱的類型。 如果省略查閱的類型，則會使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</param>
      <param name="binder">定義一組屬性並啟用繫結的物件，可包含多載方法的選擇、引數類型的強制，以及透過反映的成員引動過程。  
-或- 
Null 參考 (在 Visual Basic 中為 Nothing)，可使用 <see cref="P:System.Type.DefaultBinder" />。 請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能順利以變數引數叫用方法多載。</param>
      <param name="target">要在其上叫用指定成員的物件。</param>
      <param name="args">包含引數的陣列，這些引數會傳遞給要叫用的成員。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，代表在 <paramref name="args" /> 陣列中與對應項目關聯的屬性。 參數的關聯屬性儲存在成員的簽章中。  
預設繫結器只會在呼叫 COM 元件時處理這個參數。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，代表要使用的全球化地區設定，進行特定地區設定轉換時可能需要這個物件，例如將數值的 String 轉換成 Double。  
-或- 
Null 參考 (Visual Basic 中的 <see langword="Nothing" />)，可使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="namedParameters">陣列，包含 <paramref name="args" /> 陣列中的值所要傳遞之目標參數的名稱。</param>
      <returns>表示叫用的成員之傳回值的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" />不包含 <see langword="CreateInstance" />，且 <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> 和 <paramref name="modifiers" /> 的長度不同。  
-或- 
 <paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。  
-或- 
 <paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。  
-或- 
 <paramref name="invokeAttr" /> 包含與 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 合併的 <see langword="CreateInstance" />。  
-或- 
 <paramref name="invokeAttr" /> 同時包含 <see langword="GetField" /> 和 <see langword="SetField" />。  
-或- 
 <paramref name="invokeAttr" /> 同時包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。  
-或- 
 <paramref name="invokeAttr" /> 包含與 <see langword="SetField" /> 或 <see langword="SetProperty" /> 合併的 <see langword="InvokeMethod" />。  
-或- 
 <paramref name="invokeAttr" /> 包含 <see langword="SetField" /> 且 <paramref name="args" /> 具有一個以上的項目。  
-或- 
具名參數陣列大於引數陣列。  
-或- 
已在 COM 物件上呼叫此方法且下列其中一個繫結旗標未傳入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。  
-或- 
其中一個具名參數陣列包含的字串是 <see langword="null" />。</exception>
      <exception cref="T:System.MethodAccessException">指定的成員是類別初始設定式。</exception>
      <exception cref="T:System.MissingFieldException">找不到欄位或屬性。</exception>
      <exception cref="T:System.MissingMethodException">找不到符合 <paramref name="args" /> 中之引數的方法。  
-或- 
找不到具有 <paramref name="namedParameters" /> 中所提供引數名稱的成員。  
-或- 
目前的 <see cref="T:System.Type" /> 物件代表包含開啟類型參數的類型，亦即，<see cref="P:System.Type.ContainsGenericParameters" /> 傳回 <see langword="true" />。</exception>
      <exception cref="T:System.Reflection.TargetException">無法在 <paramref name="target" /> 上叫用指定的成員。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上符合繫結準則的方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="name" /> 所表示的方法有一或多個未指定的泛型類型參數。 亦即，方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 屬性傳回 <see langword="true" />。</exception>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為抽象並且必須被覆寫。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是抽象，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>取得值，指出是否為 <see langword="AnsiClass" /> 選取字串格式屬性 <see cref="T:System.Type" />。</summary>
      <returns>如果為 <see langword="true" /> 選取字串格式屬性 <see langword="AnsiClass" />，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>取得值，以表示類型是否為陣列。</summary>
      <returns>如果目前的類型是陣列則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsArray" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為陣列。</summary>
      <returns>如果 <see langword="true" /> 是陣列，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>判斷所指定型別之執行個體是否可以指派給目前型別的變數。</summary>
      <param name="c">要與目前的類型比較的類型。</param>
      <returns>
        <see langword="true" /> (下列任何條件成立時)： 

<paramref name="c" /> 與目前的執行個體代表相同的型別。  

<paramref name="c" /> 直接或間接衍生自目前執行個體。 <paramref name="c" /> 會直接衍生自目前的執行個體 (如果它繼承自目前的執行個體)，<paramref name="c" /> 會間接衍生自目前的執行個體 (如果它繼承自目前的執行個體所繼承的一或多個一連串類別)。  

目前執行個體是 <paramref name="c" /> 實作的介面。  

<paramref name="c" /> 是泛型類型參數，而且目前執行個體代表 <paramref name="c" /> 的其中一個條件約束。  


在下列範例中，目前的執行個體是 <see cref="T:System.Type" /> 物件，代表 <see cref="T:System.IO.Stream" /> 類別。 <c>GenericWithConstraint</c> 泛型型別，其泛型型別參數必須是型別 <see cref="T:System.IO.Stream" />。 傳遞其泛型型別參數至 <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> 表示泛型型別參數的執行個體可以指派給 <see cref="T:System.IO.Stream" /> 物件。  
[!code-csharpSystem.Type.IsAssignableFrom#2] [!code-vbSystem.Type.IsAssignableFrom#2] 

<paramref name="c" /> 代表實值型別，而目前執行個體代表 <c>Nullable&lt;c&gt;</c> (在 Visual Basic 中為 <c>Nullable(Of c)</c>)。  

 如果以上條件都不成立，或者 <paramref name="c" /> 為 <see langword="false" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>取得值，指出是否為 <see langword="AutoClass" /> 選取字串格式屬性 <see cref="T:System.Type" />。</summary>
      <returns>如果為 <see langword="true" /> 選取字串格式屬性 <see langword="AutoClass" />，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>取得表示目前類型的欄位是否已由 Common Language Runtime 自動配置版面的值。</summary>
      <returns>如果目前類型的 <see langword="true" /> 屬性包含 <see cref="P:System.Type.Attributes" /> 則為 <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsByRef" /> 屬性並判斷 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsByRefLike" />
    <member name="P:System.Type.IsClass">
      <summary>取得值，表示 <see cref="T:System.Type" /> 是類別或委派，也就是非實值類型或介面。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是類別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為 COM 物件。</summary>
      <returns>如果 <see langword="true" /> 是 COM 物件，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsCOMObject" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為 COM 物件。</summary>
      <returns>如果 <see langword="true" /> 是 COM 物件，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>取得值，指出這個物件是否表示建構的泛型類型。 您可以建立已建構之泛型類型的執行個體。</summary>
      <returns>如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsContextful">
      <summary>取得值，指出在內容中是否可以裝載 <see cref="T:System.Type" />。</summary>
      <returns>如果在內容中可以裝載 <see cref="T:System.Type" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsContextfulImpl">
      <summary>實作 <see cref="P:System.Type.IsContextful" /> 屬性並判斷在內容中是否可以裝載 <see cref="T:System.Type" />。</summary>
      <returns>如果在內容中可以裝載 <see cref="T:System.Type" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 是否表示列舉類型。</summary>
      <returns>如果目前 <see langword="true" /> 代表列舉，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsEnumDefined(System.Object)">
      <summary>傳回值，這個值表示指定的值是否存在於目前的列舉類型中。</summary>
      <param name="value">要測試的值。</param>
      <returns>如果指定的值是目前列舉類型的成員，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">目前的類型不是列舉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 的類型不能是列舉的基礎類型。</exception>
    </member>
    <member name="M:System.Type.IsEquivalentTo(System.Type)">
      <summary>判斷兩個 COM 類型是否具有相同的識別以及是否適合類型等價。</summary>
      <param name="other">進行測試以確定是否和目前類型等價的 COM 類型。</param>
      <returns>如果 COM 類型相等，則為 <see langword="true" />，否則為 <see langword="false" />。 如果一個類型位於已載入來執行的組件中，而另一個類型位於已載入至純反映性的內容的組件中，這個方法也會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsExplicitLayout">
      <summary>取得表示目前類型的欄位是否已在明確指定之位移配置版面的值。</summary>
      <returns>如果目前類型的 <see langword="true" /> 屬性包含 <see cref="P:System.Type.Attributes" /> 則為 <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericMethodParameter" />
    <member name="P:System.Type.IsGenericParameter">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 是否表示泛型類型或泛型方法定義中的類型參數。</summary>
      <returns>如果 <see cref="T:System.Type" /> 物件表示泛型型別或泛型方法定義中的型別參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>取得值，指出目前類型是否為泛型類型。</summary>
      <returns>
        <see langword="true" />如果目前的類型是泛型型別, 則為,否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 是否表示可用於建構其他泛型類型的泛型類型定義。</summary>
      <returns>如果 <see langword="true" /> 物件表示泛型類型定義，則為 <see cref="T:System.Type" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeParameter" />
    <member name="P:System.Type.IsImport">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否套用了 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 屬性 (Attribute)，亦即其是否從 COM 類型程式庫匯入。</summary>
      <returns>如果 <see langword="true" /> 具有 <see cref="T:System.Type" />，則為 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>判斷指定的物件是否為目前 <see cref="T:System.Type" /> 的執行個體。</summary>
      <param name="o">要與目前的類型比較的物件。</param>
      <returns>如果在目前 <see langword="Type" /> 位於 <paramref name="o" /> 所代表之物件的階層架構中，或者目前 <see langword="Type" /> 位於 <paramref name="o" /> 支援的介面中，則為 <see langword="true" />。 如果都不是這些情況，或者如果 <paramref name="o" /> 為 <see langword="null" />，又或者如果目前 <see langword="Type" /> 為開放式泛型類型 (亦即 <see cref="P:System.Type.ContainsGenericParameters" /> 會傳回 <see langword="true" />)，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為介面；也就是說，不是類別或實值類型。</summary>
      <returns>如果 <see langword="true" /> 是介面，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsLayoutSequential">
      <summary>取得表示目前類型的欄位是否已依為其定義或發出至中繼資料之順序，循序配置版面的值。</summary>
      <returns>如果目前類型的 <see langword="true" /> 屬性包含 <see cref="P:System.Type.Attributes" /> 則為 <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsMarshalByRef">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式封送處理。</summary>
      <returns>如果 <see langword="true" /> 是以傳址方式進行封送處理，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsMarshalByRefImpl">
      <summary>實作 <see cref="P:System.Type.IsMarshalByRef" /> 屬性，判斷 <see cref="T:System.Type" /> 是否以傳址方式封送處理。</summary>
      <returns>如果 <see langword="true" /> 是以傳址方式進行封送處理，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>取得值，表示目前的 <see cref="T:System.Type" /> 物件代表的類型之定義是否位於另一個類型的定義內部。</summary>
      <returns>如果 <see langword="true" /> 巢狀於另一個類型中，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只在它自己的組件內為可見。</summary>
      <returns>如果 <see langword="true" /> 是巢狀並只在它自己的組件內為可見，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只對同時屬於它自己家族和它自己組件的類別為可見。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是巢狀並只對同時屬於它自己家族和它自己組件的類別為可見，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只在它自己的系列內為可見。</summary>
      <returns>如果 <see langword="true" /> 是巢狀並只在它自己的家族內為可見，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀並只對屬於它自己家族或它自己組件的類別為可見。</summary>
      <returns>如果 <see langword="true" /> 是巢狀並只對屬於它自己家族或它自己組件的類別為可見，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀並且宣告為私用。</summary>
      <returns>如果 <see langword="true" /> 是巢狀並且宣告為私用，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>取得值，指出類別是否為巢狀 (Nest) 並且宣告為公用 (Public)。</summary>
      <returns>如果類別是巢狀並且宣告為公用，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否未宣告為公用。</summary>
      <returns>如果 <see langword="true" /> 尚未宣告為公用而且不是巢狀類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為指標。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指標，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsPointer" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為指標。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指標，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為其中一個基本類型 (Primitive Type)。</summary>
      <returns>如果 <see langword="true" /> 是其中一個基本類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsPrimitive" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為其中一個基本類型。</summary>
      <returns>如果 <see langword="true" /> 是其中一個基本類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否宣告為公用。</summary>
      <returns>如果 <see langword="true" /> 已宣告為公用而且不是巢狀類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否宣告為密封。</summary>
      <returns>如果 <see langword="true" /> 宣告為密封，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSecurityCritical">
      <summary>取得值，這個值表示目前類型在目前信任層級上是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</summary>
      <returns>如果目前類型在目前信任層級上為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是安全性透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSecuritySafeCritical">
      <summary>取得值，這個值表示目前類型在目前信任層級上是否為安全性安全關鍵，也就是說，它是否能執行重要作業並由安全性透明的程式碼存取。</summary>
      <returns>如果目前類型在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />；如果為安全性關鍵或安全性透明，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSecurityTransparent">
      <summary>取得值，這個值表示目前類型在目前信任層級上是否為透明，因此無法執行重要作業。</summary>
      <returns>如果型別在目前信任層級上為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSerializable">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否可序列化。</summary>
      <returns>如果 <see cref="T:System.Type" /> 可序列化，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSignatureType" />
    <member name="P:System.Type.IsSpecialName">
      <summary>取得值，表示類型是否具有需要特殊處理的名稱。</summary>
      <returns>如果類型具有需要特殊處理的名稱，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>判斷目前 <see cref="T:System.Type" /> 是否衍生自指定的 <see cref="T:System.Type" />。</summary>
      <param name="c">要與目前的類型比較的類型。</param>
      <returns>如果目前 <see langword="true" /> 衍生自 <see langword="Type" />，則為 <paramref name="c" />，否則為 <see langword="false" />。 如果 <see langword="false" /> 和目前 <paramref name="c" /> 相等，這個方法也會傳回 <see langword="Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Type.IsSZArray" />
    <member name="P:System.Type.IsTypeDefinition" />
    <member name="P:System.Type.IsUnicodeClass">
      <summary>取得值，指出是否為 <see langword="UnicodeClass" /> 選取字串格式屬性 <see cref="T:System.Type" />。</summary>
      <returns>如果為 <see langword="true" /> 選取字串格式屬性 <see langword="UnicodeClass" />，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為實值類型。</summary>
      <returns>如果 <see langword="true" /> 是實值類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>實作 <see cref="P:System.Type.IsValueType" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為實值類型；也就是說，不是類別或介面。</summary>
      <returns>如果 <see langword="true" /> 是實值類型，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsVariableBoundArray" />
    <member name="P:System.Type.IsVisible">
      <summary>取得一個值，表示位於組件之外的程式碼是否能存取 <see cref="T:System.Type" />。</summary>
      <returns>如果目前 <see langword="true" /> 是公用類型或公用巢狀類型 (所有封入類型均為公用)，則為 <see cref="T:System.Type" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</returns>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。 衍生類別必須提供實作。</exception>
      <exception cref="T:System.TypeLoadException">目前的類型為 <see cref="T:System.TypedReference" />。  
-或- 
目前的類型為 <see langword="ByRef" /> 類型。 亦即，<see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</summary>
      <param name="rank">陣列的維度數目。 這個數字必須小於或等於 32。</param>
      <returns>物件，代表由目前類型組成且為指定維度個數的陣列。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 無效。 例如，0 或負數。</exception>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。</exception>
      <exception cref="T:System.TypeLoadException">目前的類型為 <see cref="T:System.TypedReference" />。  
-或- 
目前的類型為 <see langword="ByRef" /> 類型。 亦即，<see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" />。  
-或- 
 <paramref name="rank" /> 大於 32。</exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> (Visual Basic 中的 <see langword="ByRef" />) 參數傳遞時，代表目前的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" /> 參數) 傳遞時，代表目前的類型。</returns>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。</exception>
      <exception cref="T:System.TypeLoadException">目前的類型為 <see cref="T:System.TypedReference" />。  
-或- 
目前的類型為 <see langword="ByRef" /> 類型。 亦即，<see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.MakeGenericMethodParameter(System.Int32)">
      <param name="position" />
    </member>
    <member name="M:System.Type.MakeGenericSignatureType(System.Type,System.Type[])">
      <summary>建立泛型簽章類型，這可讓協力廠商重新實作反映，以完全支援使用簽章類型來查詢類型成員。</summary>
      <param name="genericTypeDefinition">泛型型別定義。</param>
      <param name="typeArguments">型別引數的陣列。</param>
      <returns>泛型簽章類型。</returns>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>用類型陣列的項目取代目前泛型類型定義的型別參數，並傳回代表所得結果建構類型的 <see cref="T:System.Type" /> 物件。</summary>
      <param name="typeArguments">由類型組成的陣列，用來取代目前泛型類型的類型參數。</param>
      <returns>
        <see cref="T:System.Type" />，表示用 <paramref name="typeArguments" /> 的項目取代目前泛型類型之類型參數所得到的建構類型。</returns>
      <exception cref="T:System.InvalidOperationException">目前類型不代表泛型型別定義。 亦即，<see cref="P:System.Type.IsGenericTypeDefinition" /> 會傳回 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 為 <see langword="null" />。  
-或- 
<paramref name="typeArguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中的項目數和目前泛型型別定義的類型參數數目不同。  
-或- 
<paramref name="typeArguments" /> 的所有項目都不符合目前泛型型別的對應類型參數所指定的條件約束。  
-或- 
 <paramref name="typeArguments" /> 包含的項目是指標類型 (<see cref="P:System.Type.IsPointer" /> 傳回 <see langword="true" />)、傳址類型 (<see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" />) 或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。 衍生類別必須提供實作。</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</returns>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。</exception>
      <exception cref="T:System.TypeLoadException">目前的類型為 <see cref="T:System.TypedReference" />。  
-或- 
目前的類型為 <see langword="ByRef" /> 類型。 亦即，<see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" />。</exception>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>取得一個 <see cref="T:System.Reflection.MemberTypes" /> 值，代表這個成員是類型或巢狀類型。</summary>
      <returns>一個 <see cref="T:System.Reflection.MemberTypes" /> 值，代表這個成員是類型或巢狀類型。</returns>
    </member>
    <member name="F:System.Type.Missing">
      <summary>表示在 <see cref="T:System.Type" /> 資訊中的遺漏值。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>在已定義的目前 <see cref="T:System.Type" /> 中取得模組 (DLL)。</summary>
      <returns>在目前已定義之 <see cref="T:System.Type" /> 中的模組。</returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>取得 <see cref="T:System.Type" /> 的命名空間。</summary>
      <returns>
        <see cref="T:System.Type" /> 的命名空間；如果目前執行個體沒有命名空間或代表泛型參數，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Type.op_Equality(System.Type,System.Type)">
      <summary>表示兩個 <see cref="T:System.Type" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.op_Inequality(System.Type,System.Type)">
      <summary>表示兩個 <see cref="T:System.Type" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="left" />，則為 <paramref name="right" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>取得用來取得這個成員的類別物件。</summary>
      <returns>
        <see langword="Type" /> 物件，用來取得這個 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，指定是否執行區分大小寫的搜尋，以及若找不到該類型時是否擲回例外狀況。 載入此類型的目的在於反映，而不是執行。</summary>
      <param name="typeName">要取得之 <see cref="T:System.Type" /> 的組件限定名稱。</param>
      <param name="throwIfNotFound">
        <see langword="true" /> 表示找不到類型時擲回 <see cref="T:System.TypeLoadException" />，<see langword="false" /> 表示找不到類型時傳回 <see langword="null" />。 指定 <see langword="false" /> 也會隱藏其他某些例外狀況條件，但並不是全部。 請參閱＜例外狀況＞一節。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示對 <paramref name="typeName" /> 執行不區分大小寫的搜尋，<see langword="false" /> 表示對 <paramref name="typeName" /> 執行區分大小寫的搜尋。</param>
      <returns>具有指定名稱的類型 (如有找到)，否則為 <see langword="null" />。 如果找不到該類型，<paramref name="throwIfNotFound" /> 參數會指定是要傳回 <see langword="null" /> 或是擲回例外狀況。 在某些情況下，不論 <paramref name="throwIfNotFound" /> 的值為何，都會擲回例外狀況。 請參閱＜例外狀況＞一節。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且找不到類型。  
-或- 
 <paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效字元，例如內嵌的定位字元。 
-或- 
 <paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 是空字串。  
-或- 
 <paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 代表大小無效的陣列類型。  
-或- 
 <paramref name="typeName" /> 代表 <see cref="T:System.TypedReference" /> 物件的陣列。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 不包含組件名稱。  
-或- 
 <paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且 <paramref name="typeName" /> 包含無效語法 (例如 "MyType[,*,]")。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型以指標類型、<see langword="ByRef" /> 類型或 <see cref="T:System.Void" /> 做為其中一個類型引數。  
-或- 
 <paramref name="typeName" /> 代表的泛型類型具有不正確的類型引數數目。  
-或- 
 <paramref name="typeName" /> 代表泛型類型，其中一個類型引數不符合對應類型參數的條件約束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwIfNotFound" /> 為 <see langword="true" />，而且找不到組件或組件的其中一個相依性。</exception>
      <exception cref="T:System.IO.FileLoadException">找到組件或其相依性的其中一個，但無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">組件或組件的其中一個相依性無效。  
 -或-  
 用以編譯組件的通用語言執行平台，其版本比目前所載入的版本還要更新。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援此成員。</exception>
    </member>
    <member name="P:System.Type.StructLayoutAttribute">
      <summary>取得描述目前類型配置的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</summary>
      <returns>取得描述目前類型概略配置特性的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</returns>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。</exception>
    </member>
    <member name="M:System.Type.ToString">
      <summary>傳回表示目前 <see langword="String" /> 的名稱的 <see langword="Type" />。</summary>
      <returns>表示目前 <see cref="T:System.String" /> 的名稱的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>取得目前 <see cref="T:System.Type" /> 的控制代碼。</summary>
      <returns>目前 <see cref="T:System.Type" /> 的控制代碼。</returns>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework 目前不支援這個屬性。</exception>
    </member>
    <member name="P:System.Type.TypeInitializer">
      <summary>取得類型的初始設定式。</summary>
      <returns>物件，包含 <see cref="T:System.Type" /> 的類別建構函式名稱。</returns>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>指示類型，該類型是由表示這個類型的 Common Language Runtime 所提供的。</summary>
      <returns>
        <see cref="T:System.Type" /> 的基礎系統類型。</returns>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>當方法嘗試使用其無權存取的型別時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列化資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性當地語系化。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>指定物件的型別。</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>表示 <see langword="true" /> 或 <see langword="false" /> 的布林值的簡單型別。</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>表示不帶正負號的 8 位元整數的整數型別，其值介於 0 和 255 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>表示不帶正負號的 16 位元整數的整數型別，其值介於 0 和 65535 之間。 <see cref="F:System.TypeCode.Char" /> 型別的可能值集合對應於 Unicode 字元集。</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>表示日期和時間值的型別。</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>資料庫 Null (資料行) 數值。</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>簡單型別，表示具有 28-29 個有效位數、範圍從 1.0 x 10 -28 到大約 7.9 x 10 28 的數值。</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>浮點型別，表示具有 15-16 位數精確度、範圍從 5.0 x 10 -324 到大約 1.7 x 10 308 的數值。</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>null 參考。</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>表示帶正負號的 16 位元整數的整數型別，其值介於 -32768 和 32767 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>表示帶正負號的 32 位元整數的整數型別，其值介於 -2147483648 和 2147483647 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>表示帶正負號的 64 位元整數的整數型別，其值介於 -9223372036854775808 和 9223372036854775807 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>一般型別，表示未由另一個 <see langword="TypeCode" /> 明確表示的任何參考或實值型別 (Value Type)。</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>表示帶正負號的 8 位元整數的整數型別，其值介於 -128 和 127 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>浮點型別，表示具有 7 位數精確度、範圍從 1.5 x 10 -45 到大約 3.4 x 10 38 的數值。</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>表示 Unicode 字元字串的密封類別型別。</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>表示不帶正負號的 16 位元整數的整數型別，其值介於 0 和 65535 之間。</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>表示不帶正負號的 32 位元整數的整數型別，其值介於 0 和 4294967295 之間。</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>表示不帶正負號的 64 位元整數的整數型別，其值介於 0 和 18446744073709551615 之間。</summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>描述同時包含位置的 Managed 指標和可能儲存於該位置之型別的 Runtime 表示的物件。</summary>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>檢查這個物件是否等於指定的物件。</summary>
      <param name="o">要與目前物件相互比較的物件。</param>
      <returns>如果這個物件和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">這個方法尚未實作。</exception>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>傳回這個物件的雜湊碼。</summary>
      <returns>這個物件的雜湊碼。</returns>
    </member>
    <member name="M:System.TypedReference.GetTargetType(System.TypedReference)">
      <summary>傳回指定 <see langword="TypedReference" /> 的目標型別 (Target Type)。</summary>
      <param name="value">要傳回其目標型別的值。</param>
      <returns>指定的 <see langword="TypedReference" /> 的目標型別。</returns>
    </member>
    <member name="M:System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])">
      <summary>對由指定物件和欄位描述清單所識別的欄位產生 <see langword="TypedReference" />。</summary>
      <param name="target">物件，包含由 <paramref name="flds" /> 的第一元素所描述的欄位。</param>
      <param name="flds">欄位描述的清單，其中的每個元素會描述某個欄位，而該欄位則又包含由接續元素所描述的欄位。 每一個描述的欄位都必須是實值型別。 欄位描述必須是由型別系統所提供的 <see langword="RuntimeFieldInfo" /> 物件。</param>
      <returns>由 <paramref name="flds" /> 最後一個元素所描述之欄位的 <see cref="T:System.TypedReference" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 或 <paramref name="flds" /> 為 <see langword="null" />。  
-或- 
<paramref name="flds" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flds" /> 陣列沒有元素。  
-或- 
<paramref name="flds" /> 的元素不是 <see langword="RuntimeFieldInfo" /> 物件。  
-或- 
<paramref name="flds" /> 的元素的 <see cref="P:System.Reflection.FieldInfo.IsInitOnly" /> 或 <see cref="P:System.Reflection.FieldInfo.IsStatic" /> 屬性是 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMemberException">參數 <paramref name="target" /> 不包含由 <paramref name="flds" /> 的第一元素所描述的欄位，或是 <paramref name="flds" /> 的元素描述不包含於 <paramref name="flds" /> 的接續元素所描述之欄位中的欄位。  
-或- 
<paramref name="flds" /> 的元素所描述的欄位不是實值型別。</exception>
    </member>
    <member name="M:System.TypedReference.SetTypedReference(System.TypedReference,System.Object)">
      <summary>將指定的值轉換成 <see langword="TypedReference" />。 不支援這個方法。</summary>
      <param name="target">轉換的目標。</param>
      <param name="value">要轉換的值。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.TypedReference.TargetTypeToken(System.TypedReference)">
      <summary>傳回指定的 <see langword="TypedReference" /> 的內部中繼資料 (Metadata) 型別控制代碼。</summary>
      <param name="value">型別控制代碼所要求的 <see langword="TypedReference" />。</param>
      <returns>指定的 <see langword="TypedReference" /> 的內部中繼資料型別控制代碼。</returns>
    </member>
    <member name="M:System.TypedReference.ToObject(System.TypedReference)">
      <summary>將指定的 <see langword="TypedReference" /> 轉換成 <see langword="Object" />。</summary>
      <param name="value">要轉換的 <see langword="TypedReference" />。</param>
      <returns>
        <see cref="T:System.Object" /> 是從 <see langword="TypedReference" /> 轉換而來的。</returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>因為當做類別初始設定式 (Class Initializer) 所擲回例外狀況的包裝函式，所擲回的例外狀況。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>使用預設的錯誤訊息、特定的型別名稱和造成這個例外狀況根本原因的內部例外的參考，初始化 <see cref="T:System.TypeInitializationException" /> 類別的新執行個體。</summary>
      <param name="fullTypeName">初始化失敗之型別的完整名稱。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以型別名稱和其他例外狀況 (Exception) 資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>取得初始化失敗之型別的完整名稱。</summary>
      <returns>初始化失敗之型別的完整名稱。</returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>當發生型別載入錯誤時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用類別名稱、方法名稱、資源 ID 和額外的例外狀況資訊，來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>取得這個例外狀況的錯誤訊息。</summary>
      <returns>錯誤訊息字串。</returns>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>取得造成例外狀況之型別的完整名稱。</summary>
      <returns>完整型別名稱。</returns>
    </member>
    <member name="T:System.TypeUnloadedException">
      <summary>當試著存取已卸載的類別時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor">
      <summary>初始化 <see cref="T:System.TypeUnloadedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.TypeUnloadedException" /> 類別的新執行個體。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.TypeUnloadedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.TypeUnloadedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.UInt16">
      <summary>表示 16 位元不帶正負號的整數 (Unsigned Integer)。</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>將這個執行個體與指定的 16 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的不帶正負號整數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.UInt16" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.UInt16" /> 值。</summary>
      <param name="obj">和這個執行個體比較之 16 位元不帶正負號的整數。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.UInt16" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.UInt16" />。</returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>代表 <see cref="T:System.UInt16" />最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>代表 <see cref="T:System.UInt16" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.UInt16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 16 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成其對等 16 位元不帶正負號的整數。  
此方法不符合 CLS 標準。 符合 CLS 標準的替代項目為 <see cref="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)" />。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">指定 <paramref name="s" /> 可以使用的格式之列舉值的位元組合。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成其對等 16 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式數字的字串表示轉換成它的對等 16 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>16 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的值，已轉換成 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，已轉換成 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.UInt16" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
      <returns>這個執行個體的目前值，已轉換成 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，未變更。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>使用指定的格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.UInt16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.UInt16@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>嘗試將指定之樣式及特定文化特性格式資訊數字的字串表示，轉換為它的 16 位元不帶正負號的整數對應項。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 16 位元不帶正負號整數，如果轉換失敗則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>嘗試將數字的字串表示轉換為 16 位元不帶正負號的整數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 16 位元不帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，或者不是正確的格式，則轉換會失敗。 ，或代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UInt32">
      <summary>表示 32 位元不帶正負號的整數 (Unsigned Integer)。</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>將這個執行個體與指定的 32 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的不帶正負號整數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.UInt32" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.UInt32" />。</summary>
      <param name="obj">要和這個執行個體比較的值。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.UInt32" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.UInt32" />。</returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>代表 <see cref="T:System.UInt32" />最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>代表 <see cref="T:System.UInt32" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.UInt32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 32 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成其對等 32 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">指定 <paramref name="s" /> 可以使用的格式之列舉值的位元組合。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成其對等 32 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式數字的字串表示轉換成它的對等 32 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>32 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 樣式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.UInt32" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關特定文化特性資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由範圍從 0 到 9，沒有正負號或為零的前置字元的數字順序所組成。</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>使用指定的格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供關於這個執行個體的文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.UInt32@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>嘗試將指定之樣式及特定文化特性格式資訊數字的字串表示，轉換為它的 32 位元不帶正負號的整數對應項。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元不帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式和 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>嘗試將數字的字串表示轉換為 32 位元不帶正負號的整數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 32 位元不帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UInt64">
      <summary>表示 64 位元不帶正負號的整數 (Unsigned Integer)。</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>將這個執行個體與指定的物件相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>將這個執行個體與指定的 64 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <param name="value">要比較的不帶正負號整數。</param>
      <returns>帶正負號的數字，指出這個執行個體與 <paramref name="value" /> 的相對值。  
  傳回值 
  說明 
  小於零 
  這個執行個體小於 <paramref name="value" />。  

  零 
  這個執行個體等於 <paramref name="value" />。  

  大於零 
  這個執行個體大於 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.UInt64" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>傳回值，表示這個執行個體是否等於指定的 <see cref="T:System.UInt64" /> 值。</summary>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.UInt64" /> 值。</param>
      <returns>如果 <see langword="true" /> 與這個執行個體具有相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>傳回實值類型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.UInt64" />。</summary>
      <returns>列舉常數 <see cref="F:System.TypeCode.UInt64" />。</returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>代表 <see cref="T:System.UInt64" />最大的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>代表 <see cref="T:System.UInt64" /> 最小的可能值。 這個欄位是常數。</summary>
    </member>
    <member name="M:System.UInt64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 64 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所包含的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式之數字的字串表示轉換成其對等 64 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">指定 <paramref name="s" /> 可以使用的格式之列舉值的位元組合。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性格式之數字的字串表示轉換成其對等 64 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式項目。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。  
-或- 
 <paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式數字的字串表示轉換成它的對等 64 位元不帶正負號的整數。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <returns>64 位元不帶正負號的整數，與 <paramref name="s" /> 中所指定的數字相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的樣式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>如果目前執行個體的值不是零，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援這個轉換。 嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>不支援這個轉換。 沒有傳回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.UInt64" /> 值轉換所得的類型。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的相關資訊。</param>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">這個參數已忽略。</param>
      <returns>目前執行個體的值，未變更。</returns>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示，由範圍從 0 到 9，沒有正負號或為零的前置字元的數字順序所組成。</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="provider">物件，提供特定文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，由沒有正負號或為零的前置字元的範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>使用指定的格式，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將這個執行個體的數值轉換成它的相等字串表示。</summary>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供關於這個執行個體的文化特性格式資訊。</param>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.UInt64@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>嘗試將指定之樣式及特定文化特性格式資訊數字的字串表示，轉換為它的 64 位元不帶正負號的整數對應項。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。 這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 所允許的格式。 一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元不帶正負號整數，如果轉換失敗則為零。 轉換失敗的狀況包括：如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
-或- 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>嘗試將數字的字串表示轉換為 64 位元不帶正負號的整數。 傳回值會指出轉換成功或失敗。</summary>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">如果轉換成功，這個方法會傳回包含與 <paramref name="s" /> 中內含數字相等的 64 位元不帶正負號整數，如果轉換失敗則為零。 如果 <paramref name="s" /> 參數為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是正確的格式，或是表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字，則轉換會失敗。 這個參數未初始化便傳遞，<paramref name="result" /> 中原始提供的任何值都將遭到覆寫。</param>
      <returns>如果 <see langword="true" /> 轉換成功，則為 <paramref name="s" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UIntPtr">
      <summary>平台專用的類型，用以代表指標或控點。</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>使用指定的 32 位元指標或控制代碼來初始化 <see cref="T:System.UIntPtr" /> 結構的新執行個體。</summary>
      <param name="value">包含在 32 位元不帶正負號整數中的指標或控制代碼。</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>使用指定的 64 位元指標或控制代碼來初始化 <see cref="T:System.UIntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 64 位元不帶正負號整數中的指標或控制代碼。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>對未指定的類型使用指定的指標，初始化 <see cref="T:System.UIntPtr" /> 的新執行個體。</summary>
      <param name="value">未指定的類型之指標。</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值加上位移。</summary>
      <param name="pointer">要加上位移的不帶正負號指標。</param>
      <param name="offset">要加上的位移。</param>
      <returns>新的不帶正負號指標，反映將 <paramref name="offset" /> 加上 <paramref name="pointer" /> 的結果。</returns>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>傳回值，指出這個執行個體 (Instance) 是否和指定的物件相等。</summary>
      <param name="obj">與這個執行個體或 <see langword="null" /> 相比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且等於這個執行個體的值，則為 <see cref="T:System.UIntPtr" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值加上位移。</summary>
      <param name="pointer">要加上位移的不帶正負號指標。</param>
      <param name="offset">要加上的位移。</param>
      <returns>新的不帶正負號指標，反映將 <paramref name="offset" /> 加上 <paramref name="pointer" /> 的結果。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>判斷 <see cref="T:System.UIntPtr" /> 的兩個指定執行個體是否相等。</summary>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <returns>如果 <paramref name="value1" /> 等於 <paramref name="value2" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>將 32 位元不帶正負號整數的值轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <param name="value">32 位元不帶正負號的整數。</param>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>將 64 位元不帶正負號整數的值轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <param name="value">64 位元不帶正負號的整數。</param>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 的新執行個體。</returns>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為 32 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的指標或控點。</param>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，<paramref name="value" /> 的值太大，以致於無法代表 32 位元不帶正負號的整數。</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為 64 位元不帶正負號的整數。</summary>
      <param name="value">要轉換的指標或控點。</param>
      <returns>
        <paramref name="value" /> 的內容。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為未指定的類型指標。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">要轉換的指標或控點。</param>
      <returns>
        <paramref name="value" /> 的內容。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>將指定的指標轉換為 <see cref="T:System.UIntPtr" /> 的未指定類型。  
此應用程式開發介面不符合 CLS 標準。</summary>
      <param name="value">未指定的類型之指標。</param>
      <returns>初始化為 <paramref name="value" /> 的 <see cref="T:System.UIntPtr" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>判斷 <see cref="T:System.UIntPtr" /> 的兩個指定執行個體是否不相等。</summary>
      <param name="value1">要比較的第一個指標或控點。</param>
      <param name="value2">要比較的第二個指標或控點。</param>
      <returns>如果 <paramref name="value1" /> 不等於 <paramref name="value2" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值減去位移。</summary>
      <param name="pointer">要減去位移的不帶正負號指標。</param>
      <param name="offset">要減去的位移。</param>
      <returns>新的不帶正負號指標，反映將 <paramref name="offset" /> 減去 <paramref name="pointer" /> 的結果。</returns>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>取得這個執行個體的大小。</summary>
      <returns>這個平台上的指標或控制代碼的大小，以位元組為單位。 這個屬性的值在 32 位元平台上為 4，而在 64 位元平台上為 8。</returns>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值減去位移。</summary>
      <param name="pointer">要減去位移的不帶正負號指標。</param>
      <param name="offset">要減去的位移。</param>
      <returns>新的不帶正負號指標，反映將 <paramref name="offset" /> 減去 <paramref name="pointer" /> 的結果。</returns>
    </member>
    <member name="M:System.UIntPtr.System#IEquatable{System#UIntPtr}#Equals(System.UIntPtr)">
      <param name="other" />
    </member>
    <member name="M:System.UIntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料，填入 <see cref="T:System.UIntPtr" /> 物件。</summary>
      <param name="info">要填入資料的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">這個序列化的目的端。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>將這個執行個體的值轉換為未指定類型的指標。</summary>
      <returns>
        <see cref="T:System.Void" /> 的指標，也就是包含未指定類型資料的記憶體指標。</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>將這個執行個體的數值轉換為它的相等字串表示。</summary>
      <returns>這個執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>將這個執行個體的值轉換為 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於這個執行個體的值。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，這個執行個體的值太大，以致於無法表示為 32 位元不帶正負號的整數。</exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>將這個執行個體的值轉換為 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於這個執行個體的值。</returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>表示已經初始化為零的指標或控點之唯讀欄位。</summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>當作業系統因為 I/O 錯誤或特定類型的安全性錯誤而拒絕存取時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)，則會在處理內部例外的 <see langword="catch" /> 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>提供在任何應用程式定義域中有未處理的例外狀況 (Exception) 時所引發之事件的資料。</summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>使用例外狀況物件和 Common Language Runtime 終止 (Termination) 旗標，初始化 <see cref="T:System.UnhandledExceptionEventArgs" /> 類別的新執行個體。</summary>
      <param name="exception">未處理的例外狀況。</param>
      <param name="isTerminating">如果執行階段已終止則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>取得未處理的例外狀況物件。</summary>
      <returns>未處理的例外狀況物件。</returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>指示 Common Language Runtime 是否已終止。</summary>
      <returns>如果執行階段已終止則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>表示將處理例外狀況 (Exception) 所引發之事件的方法，而該例外狀況不是由應用程式定義域處理。</summary>
      <param name="sender">未處理的例外狀況事件的來源。</param>
      <param name="e">包含事件資料的 <c>UnhandledExceptionEventArgs</c>。</param>
    </member>
    <member name="T:System.Uri">
      <summary>提供統一資源識別元 (URI) 的物件表示，以及對 URI 各部分的簡易存取。</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Uri" /> 類別的新執行個體，這個執行個體是來自 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的指定執行個體。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 類別的執行個體，包含序列化新 <see cref="T:System.Uri" /> 執行個體所需的資訊。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的執行個體，包含新 <see cref="T:System.Uri" /> 執行個體相關聯的序列化資料流來源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationInfo" /> 參數包含 <see langword="null" /> URI。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="serializationInfo" /> 參數包含空白 URI。  
-或- 
指定的配置格式不正確。 請參閱 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。  
-或- 
URI 包含太多斜線。  
-或- 
URI 中指定的密碼無效。  
-或- 
URI 中指定的主機名稱無效。  
-或- 
URI 中指定的檔案名稱無效。  
-或- 
URI 中指定的使用者名稱無效。  
-或- 
URI 中指定的主機或授權單位名稱不能以反斜線結尾。  
-或- 
URI 中指定的連接埠號碼無效或無法進行剖析。  
-或- 
URI 的長度超過 65519 個字元。  
-或- 
URI 中指定的配置長度超過 1023 個字元。  
-或- 
URI 中有無效的字元順序。  
-或- 
URI 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>使用指定的 URI，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="uriString">字串，指定要由 <see cref="T:System.Uri" /> 執行個體代表的資源。 請注意，字串形式的 IPv6 位址必須以括號括住。 例如，"http://[2607:f8b0:400d:c06::69]"。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。
          
          <paramref name="uriString" /> 是空的。  
-或- 
<paramref name="uriString" /> 中指定的配置格式不正確。 請參閱 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。  
-或- 
 <paramref name="uriString" /> 包含太多的斜線。  
-或- 
<paramref name="uriString" /> 中指定的密碼無效。  
-或- 
<paramref name="uriString" /> 中指定的主機名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的檔案名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的使用者名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的主機或授權單位名稱不得使用反斜線終止。  
-或- 
<paramref name="uriString" /> 中指定的連接埠號碼無效或無法剖析。  
-或- 
<paramref name="uriString" /> 的長度超過 65519 個字元。  
-或- 
<paramref name="uriString" /> 中指定的配置長度超過 1023 個字元。  
-或- 
<paramref name="uriString" /> 中包含無效的字元順序。  
-或- 
<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.Boolean)">
      <summary>以明確的字元逸出控制方式，初始化具有指定 URI 的 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="uriString">字串，指定要由 <see cref="T:System.Uri" /> 執行個體代表的資源。 請注意，字串形式的 IPv6 位址必須以括號括住。 例如，"http://[2607:f8b0:400d:c06::69]"。</param>
      <param name="dontEscape">如果 <paramref name="uriString" /> 已完全逸出，即為 <see langword="true" />，否則，為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 是空的，或者只含有空格。  
-或- 
<paramref name="uriString" /> 中指定的配置無效。  
-或- 
 <paramref name="uriString" /> 包含太多的斜線。  
-或- 
<paramref name="uriString" /> 中指定的密碼無效。  
-或- 
<paramref name="uriString" /> 中指定的主機名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的檔案名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的使用者名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的主機或授權單位名稱不得使用反斜線終止。  
-或- 
<paramref name="uriString" /> 中指定的連接埠號碼無效或無法剖析。  
-或- 
<paramref name="uriString" /> 的長度超過 65519 個字元。  
-或- 
<paramref name="uriString" /> 中指定的配置長度超過 1023 個字元。  
-或- 
<paramref name="uriString" /> 中包含無效的字元順序。  
-或- 
<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>使用指定的 URI，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。 這個建構函式可讓您指定 URI 字串是相對 URI、絕對 URI 或是不定。</summary>
      <param name="uriString">字串，指定要由 <see cref="T:System.Uri" /> 執行個體代表的資源。 請注意，字串形式的 IPv6 位址必須以括號括住。 例如，"http://[2607:f8b0:400d:c06::69]"。</param>
      <param name="uriKind">指定 URI 字串是相對 URI、絕對 URI 或是不定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。
          
          <paramref name="uriString" /> 包含相對 URI，且 <paramref name="uriKind" /> 為 <see cref="F:System.UriKind.Absolute" />。  
或 
 <paramref name="uriString" /> 包含絕對 URI，且 <paramref name="uriKind" /> 為 <see cref="F:System.UriKind.Relative" />。  
或 
 <paramref name="uriString" /> 是空的。  
-或- 
<paramref name="uriString" /> 中指定的配置格式不正確。 請參閱 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。  
-或- 
 <paramref name="uriString" /> 包含太多的斜線。  
-或- 
<paramref name="uriString" /> 中指定的密碼無效。  
-或- 
<paramref name="uriString" /> 中指定的主機名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的檔案名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的使用者名稱無效。  
-或- 
<paramref name="uriString" /> 中指定的主機或授權單位名稱不得使用反斜線終止。  
-或- 
<paramref name="uriString" /> 中指定的連接埠號碼無效或無法剖析。  
-或- 
<paramref name="uriString" /> 的長度超過 65519 個字元。  
-或- 
<paramref name="uriString" /> 中指定的配置長度超過 1023 個字元。  
-或- 
<paramref name="uriString" /> 中包含無效的字元順序。  
-或- 
<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>根據指定的基底 URI 和相對 URI 字串，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">要加入基底 URI 的相對 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。
          
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成的 URI 是空的或只包含空格。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的配置無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成的 URI 包含太多的斜線。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的密碼無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的主機名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的檔案名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的使用者名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的主機或授權單位名稱無法以反斜線結尾。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的連接埠號碼無效或無法進行剖析。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 的長度超過 65519 個字元。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的配置長度超過 1023 個字元。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中有無效的字元順序。  
-或- 
<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)">
      <summary>以明確的字元逸出控制方式，根據指定的基底和相對 URI，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">要加入基底 URI 的相對 URI。</param>
      <param name="dontEscape">如果 <paramref name="uriString" /> 已完全逸出，即為 <see langword="true" />，否則，為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.UriFormatException">結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成的 URI 是空的或只包含空格。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的配置無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成的 URI 包含太多的斜線。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的密碼無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的主機名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的檔案名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的使用者名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的主機或授權單位名稱無法以反斜線結尾。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的連接埠號碼無效或無法進行剖析。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 的長度超過 65519 個字元。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的配置長度超過 1023 個字元。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中有無效的字元順序。  
-或- 
<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>根據指定的基底 <see cref="T:System.Uri" /> 執行個體和相對 <see cref="T:System.Uri" /> 執行個體的組合，初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="baseUri">絕對 <see cref="T:System.Uri" />，是新 <see cref="T:System.Uri" /> 執行個體的基底。</param>
      <param name="relativeUri">與 <see cref="T:System.Uri" /> 結合的相對 <paramref name="baseUri" /> 執行個體。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。
          
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成的 URI 是空的或只包含空格。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的配置無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成的 URI 包含太多的斜線。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的密碼無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的主機名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的檔案名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的使用者名稱無效。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的主機或授權單位名稱無法以反斜線結尾。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的連接埠號碼無效或無法進行剖析。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 的長度超過 65519 個字元。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中所指定的配置長度超過 1023 個字元。  
-或- 
結合 <paramref name="baseUri" /> 與 <paramref name="relativeUri" /> 所形成之 URI 中有無效的字元順序。  
-或- 
<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>取得 URI 的絕對路徑。</summary>
      <returns>
        <see cref="T:System.String" />，包含資源的絕對路徑。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>取得絕對 URI。</summary>
      <returns>
        <see cref="T:System.String" />，包含整個 URI。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>取得伺服器的網域名稱系統 (DNS) 主機名稱或 IP 位址，以及連接埠編號。</summary>
      <returns>
        <see cref="T:System.String" />，包含這個執行個體所代表之 URI 的授權元件。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.Canonicalize">
      <summary>將內部儲存的 URI 轉換成標準格式。</summary>
      <exception cref="T:System.InvalidOperationException">這個執行個體表示相對的 URI，而這個方法只適用於絕對 URI。</exception>
      <exception cref="T:System.UriFormatException">URI 的語式不正確。</exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>判斷指定的主機名稱是否為有效的 DNS 名稱。</summary>
      <param name="name">要驗證的主機名稱。 這可以是 IPv4 或 IPv6 位址或網際網路主機名稱。</param>
      <returns>
        <see cref="T:System.UriHostNameType" />，表示主機名稱的類型。 當無法判斷主機名稱類型，或主機名稱為 <see langword="null" /> 或長度為零的字串時，這個方法會傳回 <see cref="F:System.UriHostNameType.Unknown" />。</returns>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>判斷指定的配置名稱是否有效。</summary>
      <param name="schemeName">要驗證的配置名稱。</param>
      <returns>如果配置名稱有效，則 <see cref="T:System.Boolean" /> 值為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.CheckSecurity">
      <summary>呼叫這個方法沒有任何作用。</summary>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>使用指定的比較規則，比較兩個 URI 的指定部分。</summary>
      <param name="uri1">第一個 <see cref="T:System.Uri" />。</param>
      <param name="uri2">第二個 <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的位元組合，指定要比較之 <paramref name="uri1" /> 和 <paramref name="uri2" /> 的部分。</param>
      <param name="compareFormat">
        <see cref="T:System.UriFormat" /> 值之一，指定比較 URI 元件時所使用的字元逸出方式。</param>
      <param name="comparisonType">其中一個 <see cref="T:System.StringComparison" /> 值。</param>
      <returns>
        <see cref="T:System.Int32" /> 值，表示所比較之 <see cref="T:System.Uri" /> 元件間的語彙關聯性。  
  值 
  意義 
  小於零 
 <paramref name="uri1" /> 小於 <paramref name="uri2" />。  

  零 
 <paramref name="uri1" />等於 <paramref name="uri2" />。  

  大於零 
 <paramref name="uri1" /> 大於 <paramref name="uri2" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>取得在視需要取消逸出後，可放心用於 DNS 解析的主機名稱。</summary>
      <returns>
        <see cref="T:System.String" /> , 其中包含 URI 的主機元件, 其格式適用于 DNS 解析; 或原始的主機字串 (如果它已經適用于解析)。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>比較兩個 <see cref="T:System.Uri" /> 執行個體是否相等。</summary>
      <param name="comparand">與目前之執行個體相比較的 <see cref="T:System.Uri" /> 執行個體或 URI 識別項。</param>
      <returns>如果兩個執行個體代表相同 URI，則 <see cref="T:System.Boolean" /> 值為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.Escape">
      <summary>將路徑元件中的任何不安全或保留字元轉換成十六進位字元表示。</summary>
      <exception cref="T:System.UriFormatException">從建構函式傳遞的 URI 無效。 如果 URI 有太多字元或為相對 URI，就會發生這個例外狀況。</exception>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>將字串轉換成它的逸出表示。</summary>
      <param name="stringToEscape">要逸出的字串。</param>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的逸出表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。
            

 <paramref name="stringToEscape" /> 的長度超過 32766 個字元。</exception>
    </member>
    <member name="M:System.Uri.EscapeString(System.String)">
      <summary>將字串轉換成它的逸出表示。</summary>
      <param name="str">要轉換成其逸出表示的字串。</param>
      <returns>字串的逸出表示。</returns>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>將 URI 字串轉換成它的逸出表示。</summary>
      <param name="stringToEscape">要逸出的字串。</param>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的逸出表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。
            

 <paramref name="stringToEscape" /> 的長度超過 32766 個字元。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>取得逸出的 URI 片段。</summary>
      <returns>
        <see cref="T:System.String" />，包含任何 URI 片段資訊。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>取得十六進位數字的十進位值。</summary>
      <param name="digit">要轉換的十六進位數字 (0-9、a-f、A-F)。</param>
      <returns>
        <see cref="T:System.Int32" /> 值，包含 0 到 15 之間的一個數字，會對應到指定的十六進位數字。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> 不是有效的十六進位數字 (0-9、a-f、A-F)。</exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>針對特殊字元使用指定的逸出方式，取得目前執行個體的指定元件。</summary>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的位元組合，指定目前的執行個體中，要回傳給呼叫端的部分。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值之一，控制特殊字元的逸出方式。</param>
      <returns>包含元件的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> 不是有效 <see cref="T:System.UriComponents" /> 值的結合。</exception>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Uri" /> 不是絕對 URI。 相對 URI 不能用於這個方法。</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>取得 URI 的雜湊碼。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含為這個 URI 所產生的雜湊值。</returns>
    </member>
    <member name="M:System.Uri.GetLeftPart(System.UriPartial)">
      <summary>取得 <see cref="T:System.Uri" /> 執行個體的指定部分。</summary>
      <param name="part">
        <see cref="T:System.UriPartial" /> 值之一，指定要傳回之 URI 的結尾部分。</param>
      <returns>
        <see cref="T:System.String" />，包含 <see cref="T:System.Uri" /> 執行個體的指定部分。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Uri" /> 執行個體不是絕對執行個體。</exception>
      <exception cref="T:System.ArgumentException">指定的 <paramref name="part" /> 無效。</exception>
    </member>
    <member name="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>傳回序列化目前執行個體所需的資料。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，包含序列化 <see cref="T:System.Uri" /> 所需的資訊。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含 <see cref="T:System.Uri" /> 所關聯之序列化資料流的來源及目的地。</param>
    </member>
    <member name="M:System.Uri.HexEscape(System.Char)">
      <summary>將指定的字元轉換成其對等的十六進位數字。</summary>
      <param name="character">要轉換成十六進位表示的字元。</param>
      <returns>指定字元的十六進位表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="character" /> 大於 255。</exception>
    </member>
    <member name="M:System.Uri.HexUnescape(System.String,System.Int32@)">
      <summary>將字元的指定十六進位表示轉換成字元。</summary>
      <param name="pattern">字元的十六進位表示。</param>
      <param name="index">
        <paramref name="pattern" /> 中的位置，字元的十六進位表示由此開始。</param>
      <returns>在位置 <paramref name="index" /> 時，字元會以十六進位編碼方式。 如果在 <paramref name="index" /> 的字元不是以十六進位編碼方式表示，就會傳回位於 <paramref name="index" /> 的字元。 <paramref name="index" /> 的值會遞增，以指向傳回之字元後的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於或等於 <paramref name="pattern" /> 中的字元數。</exception>
    </member>
    <member name="P:System.Uri.Host">
      <summary>取得這個執行個體的主機元件。</summary>
      <returns>
        <see cref="T:System.String" />，包含主機名稱。 這通常是伺服器的 DNS 主機名稱或 IP 位址。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>取得 URI 中所指定主機名稱的類型。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 列舉的成員。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>主機之符合 RFC 3490 標準的國際網域名稱，並適當地使用 Punycode。 這個字串在視需要取消逸出後，可放心用於 DNS 解析。</summary>
      <returns>主機名稱, 根據 IDN 標準格式化為 Punycode。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>取得 <see cref="T:System.Uri" /> 執行個體是否為絕對。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 執行個體為絕對，則 <see langword="true" /> 值為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsBadFileSystemCharacter(System.Char)">
      <summary>取得字元在檔案系統名稱中是否無效。</summary>
      <param name="character">要測試的 <see cref="T:System.Char" />。</param>
      <returns>若指定字元無效，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>判斷目前 <see cref="T:System.Uri" /> 執行個體是否為指定之 <see cref="T:System.Uri" /> 執行個體的基底。</summary>
      <param name="uri">指定要測試的 <see cref="T:System.Uri" /> 執行個體。</param>
      <returns>如果目前 <see langword="true" /> 執行個體是 <see cref="T:System.Uri" /> 的基底則為 <paramref name="uri" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>取得 URI 的通訊埠值是否為這個配置的預設值。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 屬性的值是這個配置的預設通訊埠，則 <see langword="true" /> 值為 <see cref="P:System.Uri.Port" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.IsExcludedCharacter(System.Char)">
      <summary>取得是否應該逸出指定的字元。</summary>
      <param name="character">要測試的 <see cref="T:System.Char" />。</param>
      <returns>如果應該逸出指定的字元，則 <see cref="T:System.Boolean" /> 值為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>取得表示指定的 <see cref="T:System.Uri" /> 是否為檔案 URI 的值。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 是檔案 URI，則 <see langword="true" /> 值為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>判斷指定的字元是否為有效的十六進位數字。</summary>
      <param name="character">要驗證的字元。</param>
      <returns>若字元為有效的十六進位數字，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsHexEncoding(System.String,System.Int32)">
      <summary>判斷字串中的字元是否為十六進位編碼。</summary>
      <param name="pattern">要檢查的字串。</param>
      <param name="index">
        <paramref name="pattern" /> 中要檢查十六進位編碼的位置。</param>
      <returns>如果 <see cref="T:System.Boolean" /> 在指定的位置為十六進位編碼，則 <see langword="true" /> 值為 <paramref name="pattern" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>取得指定的 <see cref="T:System.Uri" /> 是否參考本端主機。</summary>
      <returns>如果這個 <see cref="T:System.Boolean" /> 參考本端主機，則 <see langword="true" /> 值為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.IsReservedCharacter(System.Char)">
      <summary>取得指定的字元是否為保留字元。</summary>
      <param name="character">要測試的 <see cref="T:System.Char" />。</param>
      <returns>如果指定的字元是保留字元，則 <see cref="T:System.Boolean" /> 值為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>取得指定的 <see cref="T:System.Uri" /> 是否為通用命名慣例 (Universal Naming Convention，UNC) 路徑。</summary>
      <returns>如果 <see cref="T:System.Boolean" /> 是 UNC 路徑，則 <see langword="true" /> 值為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>表示用以建構此 <see cref="T:System.Uri" /> 之字串的語式是否正確，而且不需要進一步逸出。</summary>
      <returns>若字串語式正確，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>透過嘗試建構包含此字串的 URI 來表示字串的格式是否正確，且確保該字串不需要進一步逸出。</summary>
      <param name="uriString">用於嘗試建構 <see cref="T:System.Uri" /> 的字串。</param>
      <param name="uriKind">
        <see cref="T:System.Uri" /> 中 <paramref name="uriString" /> 的類型。</param>
      <returns>若字串語式正確，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>取得檔案名稱的本機作業系統表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含檔案名稱在本機作業系統上的表示。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.MakeRelative(System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體之間的差別。</summary>
      <param name="toUri">要與目前之 URI 比較的 URI。</param>
      <returns>如果這個 URI 執行個體的主機名稱和配置與 <paramref name="toUri" /> 相同，則這個方法會傳回代表相對 URI 的 <see cref="T:System.String" />，當將這個相對 URI 附加到目前的 URI 執行個體時，會產生 <paramref name="toUri" /> 參數。  
如果主機名稱或配置不同，則這個方法會傳回代表 <see cref="T:System.String" /> 參數的 <paramref name="toUri" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">這個執行個體表示相對的 URI，而這個方法只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體之間的差別。</summary>
      <param name="uri">要與目前之 URI 比較的 URI。</param>
      <returns>如果這個 URI 執行個體的主機名稱和配置與 <paramref name="uri" /> 相同，則這個方法會傳回相對 <see cref="T:System.Uri" />，當將這個相對值附加到目前的 URI 執行個體時，會產生 <paramref name="uri" />。  
如果主機名稱或配置不同，則這個方法會傳回代表 <see cref="T:System.Uri" /> 參數的 <paramref name="uri" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體的值是否相同。</summary>
      <param name="uri1">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri2" /> 執行個體。</param>
      <param name="uri2">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri1" /> 執行個體。</param>
      <returns>如果 <see cref="T:System.Boolean" /> 執行個體相等，則 <see langword="true" /> 值為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體的值是否不同。</summary>
      <param name="uri1">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri2" /> 執行個體。</param>
      <param name="uri2">要與 <see cref="T:System.Uri" /> 相比較的 <paramref name="uri1" /> 執行個體。</param>
      <returns>如果兩個 <see cref="T:System.Boolean" /> 執行個體不相等，則 <see langword="true" /> 值為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。 如果其中一個參數是 <see langword="null" />，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>取得傳遞給 <see cref="T:System.Uri" /> 建構函式的原始 URI 字串。</summary>
      <returns>包含建構這個執行個體時所指定之 URI 的 <see cref="T:System.String" />，否則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Uri.Parse">
      <summary>剖析目前執行個體的 URI，確定它包含有效 URI 所需的所有部分。</summary>
      <exception cref="T:System.UriFormatException">從建構函式傳遞的 URI 無效。</exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>取得以問號 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 屬性。</summary>
      <returns>
        <see cref="T:System.String" />，包含以問號 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 屬性。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>取得這個 URI 的連接埠編號。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，包含這個 URI 的通訊埠編號。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>取得指定的 URI 所包含的任何查詢資訊。</summary>
      <returns>
        <see cref="T:System.String" />，包含指定 URI 中所包含的任何查詢資訊。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>取得這個 URI 的配置名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含這個 URI 的配置 (已轉換成小寫)。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>指定會將通訊協定配置和 URI 的位址部分分隔開來的字元。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>取得陣列，包含構成指定 URI 的路徑區段。</summary>
      <returns>
        <see cref="T:System.String" /> 陣列，包含構成指定 URI 的路徑片段。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>傳回序列化目前執行個體所需的資料。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，包含序列化 <see cref="T:System.Uri" /> 所需的資訊。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，包含 <see cref="T:System.Uri" /> 所關聯之序列化資料流的來源及目的地。</param>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>取得指定之 <see cref="T:System.Uri" /> 執行個體的標準字串表示。</summary>
      <returns>
        <see cref="T:System.String" /> 執行個體，包含 <see cref="T:System.Uri" /> 執行個體未逸出的標準表示。 除了 #、? 和 % 以外，不逸出所有字元。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 執行個體和 <see cref="T:System.String" />，建立新的 <see cref="T:System.UriKind" />。</summary>
      <param name="uriString">
        <see cref="T:System.String" />，代表 <see cref="T:System.Uri" />。</param>
      <param name="uriKind">URI 的類型。</param>
      <param name="result">這個方法傳回時，會包含建構的 <see cref="T:System.Uri" />。</param>
      <returns>
        <see cref="T:System.Boolean" /> 值，當成功建立 <see langword="true" /> 時為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>使用指定的基底和相對 <see cref="T:System.Uri" /> 執行個體，建立新的 <see cref="T:System.String" />。</summary>
      <param name="baseUri">基底 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">相對 <see cref="T:System.Uri" />，代表為要加入基底 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />。</param>
      <param name="result">當這個方法傳回時，會包含從 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 建構的 <paramref name="relativeUri" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>
        <see cref="T:System.Boolean" /> 值，當成功建立 <see langword="true" /> 時為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>使用指定的基底和相對 <see cref="T:System.Uri" /> 執行個體，建立新的 <see cref="T:System.Uri" />。</summary>
      <param name="baseUri">基底 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要加入基底 <see cref="T:System.Uri" /> 的相對 <see cref="T:System.Uri" />。</param>
      <param name="result">當這個方法傳回時，會包含從 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 建構的 <paramref name="relativeUri" />。 這個參數會以未初始化的狀態傳遞。</param>
      <returns>
        <see cref="T:System.Boolean" /> 值，當成功建立 <see langword="true" /> 時為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Uri.Unescape(System.String)">
      <summary>轉換指定的字串，方法是將任何逸出序列取代成未逸出的表示。</summary>
      <param name="path">要進行轉換的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="path" /> 參數的未逸出值。</returns>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>將字串轉換成它的未逸出表示。</summary>
      <param name="stringToUnescape">不要逸出的字串。</param>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的未逸出表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>指定 URI 為檔案的指標。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>指定 URI 要透過檔案傳輸通訊協定 (File Transfer Protocol，FTP) 存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>指定 URI 要透過 Gopher 通訊協定存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>指定 URI 要透過超文字傳輸協定 (Hypertext Transfer Protocol，HTTP) 存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>指定 URI 要透過安全超文字傳輸協定 (Secure Hypertext Transfer Protocol，HTTPS) 存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>指定 URI 為電子郵件地址，並且要透過簡易郵件傳輸通訊協定 (SMTP) 存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>指定 URI 會透過 Windows Communication Foundation (WCF) 所用的 NetPipe 配置來存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>指定 URI 會透過 Windows Communication Foundation (WCF) 所用的 NetTcp 配置來存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>指定 URI 為網際網路新聞群組，並且要透過 Network News Transport Protocol (NNTP) 存取。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>指定 URI 為網際網路新聞群組，並且要透過 Network News Transport Protocol (NNTP) 存取。 此欄位為唯讀。</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>表示 URI 字串在 <see cref="T:System.Uri" /> 執行個體建立之前即已完全逸出。</summary>
      <returns>如果在建立 <see cref="T:System.Boolean" /> 執行個體時，<see langword="true" /> 參數設定為 <paramref name="dontEscape" />，則 <see langword="true" /> 值為 <see cref="T:System.Uri" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>取得與指定 URI 關聯的使用者名稱、密碼或其他使用者特定的資訊。</summary>
      <returns>
        <see cref="T:System.String" />，包含 URI 相關聯的使用者資訊。 傳回值不包含 '@' 保留字元，它是用來分隔 URI 的使用者資訊部分。</returns>
      <exception cref="T:System.InvalidOperationException">這個執行個體代表相對的 URI，而這個屬性只適用於絕對 URI。</exception>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的組件。</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。 如果 Uri 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。 如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定分隔符號應包含在內。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" /> 的正規化格式。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 資料。 請參閱<see cref="P:System.Uri.PathAndQuery" />。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、 <see cref="P:System.Uri.Host" />以及 <see cref="P:System.Uri.Port" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI 序列化程式所需要的完整 <see cref="T:System.Uri" /> 內容。 內容中包含了 IPv6 範圍。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。 如果沒有連接埠資料位於 <see cref="T:System.Uri" /> ，且預設通訊埠已指派給 <see cref="P:System.Uri.Scheme" />，就會傳回預設連接埠。 如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 資料。 如果 <see cref="T:System.Uri" /> 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。 如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 資料。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 資訊的逸出方式。</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>在所要求的 URI 元件中，有保留意義的字元仍維持逸出。 其他字元則不逸出。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>不執行逸出。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>依據 RFC 2396 規則執行逸出。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>當偵測到無效的統一資源識別元 (URI) 時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>從指定的 <see cref="T:System.UriFormatException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 執行個體，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新 <see cref="T:System.UriFormatException" /> 所需的資訊。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含與新 <see cref="T:System.UriFormatException" /> 關聯之序列化資料流的來源。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
      <param name="textString">錯誤訊息字串。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
      <param name="textString">說明例外狀況的訊息。 這個建構函式的呼叫端必須確保這個字串已經被當地語系化 (為了目前系統的文化特性)。</param>
      <param name="e">做為目前例外狀況發生原因的例外狀況。 如果 <c>innerException</c> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="M:System.UriFormatException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 所需的資料填入 <see cref="T:System.UriFormatException" /> 執行個體。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，將保留 <see cref="T:System.UriFormatException" /> 的序列化資料。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含與新 <see cref="T:System.UriFormatException" /> 關聯之已序列化資料流的目的端。</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>定義 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法的主機名稱類型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>主機已設定，但是無法判斷類型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主機名稱為網域名稱系統 (DNS) 型別主機名稱。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主機名稱是網際網路通訊協定 (IP) 4 版主機位址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主機名稱是網際網路通訊協定 (IP) 6 版主機位址。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>無法提供主機名稱類型。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>定義不同種類的 URI。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>URI 是絕對的。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>URI 是相對的。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>URI 種類是不確定的。</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>剖析新的 URI 配置。 這是 abstract 類別。</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>建構預設 URI 剖析器。</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>從 URI 取得元件。</summary>
      <param name="uri">要剖析的 URI。</param>
      <param name="components">要從 <paramref name="uri" /> 擷取的 <see cref="T:System.UriComponents" />。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值之一，控制特殊字元的逸出方式。</param>
      <returns>包含元件的字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriFormat" /> 無效。  
-或- 
 <paramref name="uriComponents" /> 不是有效 <see cref="T:System.UriComponents" /> 值的結合。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> 需要使用者驅動的剖析。 
-或- 
 <paramref name="uri" /> 不是絕對 URI。 相對 URI 不能用於這個方法。</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>初始化剖析器狀態並驗證 URI。</summary>
      <param name="uri">要驗證的 T:System.Uri。</param>
      <param name="parsingError">驗證錯誤，如果有的話。</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>判斷 <paramref name="baseUri" /> 是否為 <paramref name="relativeUri" /> 的基底 URI。</summary>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">要測試的 URI。</param>
      <returns>如果 <paramref name="baseUri" /> 是 <paramref name="relativeUri" /> 的基底 URI，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>指出配置的剖析器是否已註冊。</summary>
      <param name="schemeName">要進行檢查的配置名稱。</param>
      <returns>如果 <paramref name="schemeName" /> 已經註冊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemeName" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 參數無效。</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>指出 URI 是否語式正確。</summary>
      <param name="uri">要進行檢查的 URI。</param>
      <returns>如果 <paramref name="uri" /> 語式正確，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>由 <see cref="T:System.Uri" /> 建構函式以取得 <see cref="T:System.UriParser" /> 執行個體</summary>
      <returns>建構之 <see cref="T:System.UriParser" /> 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>當 <see cref="T:System.UriParser" /> 方法已註冊時，由 Framework 叫用。</summary>
      <param name="schemeName">與這個 <see cref="T:System.UriParser" /> 相關聯的配置。</param>
      <param name="defaultPort">配置的連接埠編號。</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>使配置和連接埠編號與 <see cref="T:System.UriParser" /> 產生關聯。</summary>
      <param name="uriParser">要註冊的 URI 剖析器。</param>
      <param name="schemeName">與這個剖析器相關聯的配置名稱。</param>
      <param name="defaultPort">指定配置的預設連接埠編號。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> 參數為 Null 
-或- 
 <paramref name="schemeName" /> 參數為 Null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 參數無效。 
-或- 
 <paramref name="defaultPort" /> 參數無效。 <paramref name="defaultPort" /> 參數小於 -1 或大於 65,534。</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>由 <see cref="T:System.Uri" /> 建構函式和 <see cref="Overload:System.Uri.TryCreate" /> 呼叫，以解析相對 URI。</summary>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">相對 URI。</param>
      <param name="parsingError">解析處理序期間發生的錯誤，如果有的話。</param>
      <returns>已解析相對 <see cref="T:System.Uri" /> 的字串。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> 參數不是絕對 <see cref="T:System.Uri" />  
-或- 
 <paramref name="baseUri" /> 參數需要使用者驅動的剖析。</exception>
    </member>
    <member name="T:System.UriPartial">
      <summary>定義 <see cref="M:System.Uri.GetLeftPart(System.UriPartial)" /> 方法 URI 的部分。</summary>
    </member>
    <member name="F:System.UriPartial.Authority">
      <summary>URI 的配置和授權區段。</summary>
    </member>
    <member name="F:System.UriPartial.Path">
      <summary>URI 的配置、授權和路徑區段。</summary>
    </member>
    <member name="F:System.UriPartial.Query">
      <summary>URI 的配置、授權和、路徑和查詢區段。</summary>
    </member>
    <member name="F:System.UriPartial.Scheme">
      <summary>URI 的配置區段。</summary>
    </member>
    <member name="T:System.ValueTuple">
      <summary>提供用於建立值元組的靜態方法。</summary>
    </member>
    <member name="M:System.ValueTuple.CompareTo(System.ValueTuple)">
      <summary>比較目前的 <see cref="T:System.ValueTuple" /> 執行個體與指定的 <see cref="T:System.ValueTuple" /> 執行個體。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>這個方法一律會傳回 0。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple" /> 執行個體。</exception>
    </member>
    <member name="M:System.ValueTuple.Create">
      <summary>建立不含元件的新值元組。</summary>
      <returns>不含元件的新值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``1(``0)">
      <summary>建立含有 1 個元件的新值元組 (單一物件)。</summary>
      <param name="item1">值元組唯一元件的值。</param>
      <typeparam name="T1">值元組唯一元件的類型。</typeparam>
      <returns>含有 1 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``2(``0,``1)">
      <summary>建立含有 2 個元件的新值元組 (一對)。</summary>
      <param name="item1">值元組第一個元件的值。</param>
      <param name="item2">值元組第二個元件的值。</param>
      <typeparam name="T1">值元組第一個元件的類型。</typeparam>
      <typeparam name="T2">值元組第二個元件的類型。</typeparam>
      <returns>含有 2 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``3(``0,``1,``2)">
      <summary>建立含有 3 個元件的新值元組 (三重物件)。</summary>
      <param name="item1">值元組第一個元件的值。</param>
      <param name="item2">值元組第二個元件的值。</param>
      <param name="item3">值元組第三個元件的值。</param>
      <typeparam name="T1">值元組第一個元件的類型。</typeparam>
      <typeparam name="T2">值元組第二個元件的類型。</typeparam>
      <typeparam name="T3">值元組第三個元件的類型。</typeparam>
      <returns>含有 3 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``4(``0,``1,``2,``3)">
      <summary>建立含有 4 個元件的新值元組 (四重物件)。</summary>
      <param name="item1">值元組第一個元件的值。</param>
      <param name="item2">值元組第二個元件的值。</param>
      <param name="item3">值元組第三個元件的值。</param>
      <param name="item4">值元組第四個元件的值。</param>
      <typeparam name="T1">值元組第一個元件的類型。</typeparam>
      <typeparam name="T2">值元組第二個元件的類型。</typeparam>
      <typeparam name="T3">值元組第三個元件的類型。</typeparam>
      <typeparam name="T4">值元組第四個元件的類型。</typeparam>
      <returns>含有 4 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>建立含有 5 個元件的新值元組 (五重物件)。</summary>
      <param name="item1">值元組第一個元件的值。</param>
      <param name="item2">值元組第二個元件的值。</param>
      <param name="item3">值元組第三個元件的值。</param>
      <param name="item4">值元組第四個元件的值。</param>
      <param name="item5">值元組第五個元件的值。</param>
      <typeparam name="T1">值元組第一個元件的類型。</typeparam>
      <typeparam name="T2">值元組第二個元件的類型。</typeparam>
      <typeparam name="T3">值元組第三個元件的類型。</typeparam>
      <typeparam name="T4">值元組第四個元件的類型。</typeparam>
      <typeparam name="T5">值元組第五個元件的類型。</typeparam>
      <returns>含有 5 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>建立含有 6 個元件的新值元組 (六重物件)。</summary>
      <param name="item1">值元組第一個元件的值。</param>
      <param name="item2">值元組第二個元件的值。</param>
      <param name="item3">值元組第三個元件的值。</param>
      <param name="item4">值元組第四個元件的值。</param>
      <param name="item5">值元組第五個元件的值。</param>
      <param name="item6">值元組第六個元件的值。</param>
      <typeparam name="T1">值元組第一個元件的類型。</typeparam>
      <typeparam name="T2">值元組第二個元件的類型。</typeparam>
      <typeparam name="T3">值元組第三個元件的類型。</typeparam>
      <typeparam name="T4">值元組第四個元件的類型。</typeparam>
      <typeparam name="T5">值元組第五個元件的類型。</typeparam>
      <typeparam name="T6">值元組第六個元件的類型。</typeparam>
      <returns>含有 6 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>建立含有 7 個元件的新值元組 (七重物件)。</summary>
      <param name="item1">值元組第一個元件的值。</param>
      <param name="item2">值元組第二個元件的值。</param>
      <param name="item3">值元組第三個元件的值。</param>
      <param name="item4">值元組第四個元件的值。</param>
      <param name="item5">值元組第五個元件的值。</param>
      <param name="item6">值元組第六個元件的值。</param>
      <param name="item7">值元組第七個元件的值。</param>
      <typeparam name="T1">值元組第一個元件的類型。</typeparam>
      <typeparam name="T2">值元組第二個元件的類型。</typeparam>
      <typeparam name="T3">值元組第三個元件的類型。</typeparam>
      <typeparam name="T4">值元組第四個元件的類型。</typeparam>
      <typeparam name="T5">值元組第五個元件的類型。</typeparam>
      <typeparam name="T6">值元組第六個元件的類型。</typeparam>
      <typeparam name="T7">值元組第七個元件的類型。</typeparam>
      <returns>含有 7 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>建立含有 8 個元件的新值元組 (八重物件)。</summary>
      <param name="item1">值元組第一個元件的值。</param>
      <param name="item2">值元組第二個元件的值。</param>
      <param name="item3">值元組第三個元件的值。</param>
      <param name="item4">值元組第四個元件的值。</param>
      <param name="item5">值元組第五個元件的值。</param>
      <param name="item6">值元組第六個元件的值。</param>
      <param name="item7">值元組第七個元件的值。</param>
      <param name="item8">值元組第八個元件的值。</param>
      <typeparam name="T1">值元組第一個元件的類型。</typeparam>
      <typeparam name="T2">值元組第二個元件的類型。</typeparam>
      <typeparam name="T3">值元組第三個元件的類型。</typeparam>
      <typeparam name="T4">值元組第四個元件的類型。</typeparam>
      <typeparam name="T5">值元組第五個元件的類型。</typeparam>
      <typeparam name="T6">值元組第六個元件的類型。</typeparam>
      <typeparam name="T7">值元組第七個元件的類型。</typeparam>
      <typeparam name="T8">值元組第八個元件的類型。</typeparam>
      <returns>含有 8 個元件的值元組。</returns>
    </member>
    <member name="M:System.ValueTuple.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與目前執行個體相比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.ValueTuple" /> 執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple.Equals(System.ValueTuple)">
      <summary>判斷兩個 <see cref="T:System.ValueTuple" /> 執行個體是否相等。 這個方法一律會傳回 <see langword="true" />。</summary>
      <param name="other">要與目前執行個體比較的值元組。</param>
      <returns>這個方法一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ValueTuple.GetHashCode">
      <summary>傳回目前 <see cref="T:System.ValueTuple" /> 執行個體的雜湊碼。</summary>
      <returns>這個方法一律會傳回 0。</returns>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>將目前的 <see cref="T:System.ValueTuple" /> 執行個體與指定的物件相比較。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。 這個參數已忽略。</param>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.ValueTuple" /> 執行個體，則會傳回 0；如果 <paramref name="other" /> 是 <see langword="null" />，則會傳回 1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple" /> 執行個體。</exception>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回這個 <see cref="T:System.ValueTuple" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算此雜湊碼。 這個參數已忽略。</param>
      <returns>這個 <see cref="T:System.ValueTuple" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple.System#IComparable#CompareTo(System.Object)">
      <summary>將這個 <see cref="T:System.ValueTuple" /> 執行個體與指定的物件相比較，並傳回其相對值的指示。</summary>
      <param name="other">要與目前執行個體比較的物件</param>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.ValueTuple" /> 執行個體，則為 0；否則，如果 <paramref name="other" /> 是 <see langword="null" />，則為 1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple" /> 執行個體。</exception>
    </member>
    <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>傳回 <see cref="T:System.IndexOutOfRangeException" />。 <see langword="ValueTuple" /> 中沒有項目。</summary>
      <param name="index">沒有 <paramref name="index" /> 可接受的值。</param>
      <returns>
        <see cref="T:System.IndexOutOfRangeException" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">沒有 <paramref name="index" /> 可接受的值。</exception>
    </member>
    <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得此 <see langword="ValueTuple" /> 執行個體的長度，其一律為 0。 <see langword="ValueTuple" /> 中沒有項目。</summary>
      <returns>0，此 <see langword="ValueTuple" /> 執行個體中的項目數。</returns>
    </member>
    <member name="M:System.ValueTuple.ToString">
      <summary>傳回這個 <see cref="T:System.ValueTuple" /> 執行個體的字串表示。</summary>
      <returns>這個方法一律會傳回 "()"。</returns>
    </member>
    <member name="T:System.ValueTuple`1">
      <summary>表示含有單一元件的值元組。</summary>
      <typeparam name="T1">值元組唯一元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`1.#ctor(`0)">
      <summary>初始化新的 <see cref="T:System.ValueTuple`1" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
    </member>
    <member name="M:System.ValueTuple`1.CompareTo(System.ValueTuple{`0})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`1" /> 執行個體與指定的 <see cref="T:System.ValueTuple`1" /> 執行個體。</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`1.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`1" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`1.Equals(System.ValueTuple{`0})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`1" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`1" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`1.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`1" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`1" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`1.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`1" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`1" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`1" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`1" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`1" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`1" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">
        <see langword="ValueTuple" /> 項目的索引。 <paramref name="index" /> 必須是 0。</param>
      <returns>
        <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 0。</exception>
    </member>
    <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>1，<see cref="T:System.ValueTuple`1" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.ValueTuple`1.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`1" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`1" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueTuple`2">
      <summary>表示含有 2 個元件的值元組。</summary>
      <typeparam name="T1">值元組第一個元素的類型。</typeparam>
      <typeparam name="T2">值元組第二個元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`2.#ctor(`0,`1)">
      <summary>初始化新的 <see cref="T:System.ValueTuple`2" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
      <param name="item2">值元組的第二個元素。</param>
    </member>
    <member name="M:System.ValueTuple`2.CompareTo(System.ValueTuple{`0,`1})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`2" /> 執行個體與指定的 <see cref="T:System.ValueTuple`2" /> 執行個體。</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`2.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`2" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`2.Equals(System.ValueTuple{`0,`1})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`2" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`2" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`2.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`2" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`2" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`2.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`2" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`2.Item2">
      <summary>取得目前 <see cref="T:System.ValueTuple`2" /> 執行個體第二個元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`2" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`2" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`2" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`2" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`2" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="ValueTuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 1。</param>
      <returns>位在指定位置的 <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 1。</exception>
    </member>
    <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>2，<see cref="T:System.ValueTuple`2" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.ValueTuple`2.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`2" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`2" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueTuple`3">
      <summary>表示含有 3 個元件的值元組。</summary>
      <typeparam name="T1">值元組第一個元素的類型。</typeparam>
      <typeparam name="T2">值元組第二個元素的類型。</typeparam>
      <typeparam name="T3">值元組第三個元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`3.#ctor(`0,`1,`2)">
      <summary>初始化新的 <see cref="T:System.ValueTuple`3" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
      <param name="item2">值元組的第二個元素。</param>
      <param name="item3">值元組的第三個元素。</param>
    </member>
    <member name="M:System.ValueTuple`3.CompareTo(System.ValueTuple{`0,`1,`2})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`3" /> 執行個體與指定的 <see cref="T:System.ValueTuple`3" /> 執行個體。</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`3.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`3" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`3.Equals(System.ValueTuple{`0,`1,`2})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`3" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`3" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`3.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`3" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`3" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`3.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`3" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`3.Item2">
      <summary>取得目前 <see cref="T:System.ValueTuple`3" /> 執行個體第二個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`3.Item3">
      <summary>取得目前 <see cref="T:System.ValueTuple`3" /> 執行個體第三個元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`3" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`3" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`3" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`3" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`3" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="ValueTuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 2。</param>
      <returns>位在指定位置的 <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 2。</exception>
    </member>
    <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>3，<see cref="T:System.ValueTuple`3" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.ValueTuple`3.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`3" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`3" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueTuple`4">
      <summary>表示含有 4 個元件的值元組。</summary>
      <typeparam name="T1">值元組第一個元素的類型。</typeparam>
      <typeparam name="T2">值元組第二個元素的類型。</typeparam>
      <typeparam name="T3">值元組第三個元素的類型。</typeparam>
      <typeparam name="T4">值元組第四個元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化新的 <see cref="T:System.ValueTuple`4" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
      <param name="item2">值元組的第二個元素。</param>
      <param name="item3">值元組的第三個元素。</param>
      <param name="item4">值元組的第四個元素。</param>
    </member>
    <member name="M:System.ValueTuple`4.CompareTo(System.ValueTuple{`0,`1,`2,`3})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`4" /> 執行個體與指定的 <see cref="T:System.ValueTuple`4" /> 執行個體。</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`4.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`4" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`4.Equals(System.ValueTuple{`0,`1,`2,`3})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`4" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`4" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`4.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`4" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`4" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`4.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`4" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item2">
      <summary>取得目前 <see cref="T:System.ValueTuple`4" /> 執行個體第二個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item3">
      <summary>取得目前 <see cref="T:System.ValueTuple`4" /> 執行個體第三個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item4">
      <summary>取得目前 <see cref="T:System.ValueTuple`4" /> 執行個體第四個元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`4" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`4" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`4" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`4" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`4" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="ValueTuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 3。</param>
      <returns>位在指定位置的 <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 3。</exception>
    </member>
    <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>4，<see cref="T:System.ValueTuple`4" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.ValueTuple`4.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`4" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`4" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueTuple`5">
      <summary>表示含有 5 個元件的值元組。</summary>
      <typeparam name="T1">值元組第一個元素的類型。</typeparam>
      <typeparam name="T2">值元組第二個元素的類型。</typeparam>
      <typeparam name="T3">值元組第三個元素的類型。</typeparam>
      <typeparam name="T4">值元組第四個元素的類型。</typeparam>
      <typeparam name="T5">值元組第五個元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化新的 <see cref="T:System.ValueTuple`5" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
      <param name="item2">值元組的第二個元素。</param>
      <param name="item3">值元組的第三個元素。</param>
      <param name="item4">值元組的第四個元素。</param>
      <param name="item5">值元組的第五個元素。</param>
    </member>
    <member name="M:System.ValueTuple`5.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`5" /> 執行個體與指定的 <see cref="T:System.ValueTuple`5" /> 執行個體。</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`5.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`5" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`5.Equals(System.ValueTuple{`0,`1,`2,`3,`4})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`5" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`5" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`5.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`5" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`5" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`5.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`5" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item2">
      <summary>取得目前 <see cref="T:System.ValueTuple`5" /> 執行個體第二個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item3">
      <summary>取得目前 <see cref="T:System.ValueTuple`5" /> 執行個體第三個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item4">
      <summary>取得目前 <see cref="T:System.ValueTuple`5" /> 執行個體第四個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item5">
      <summary>取得目前 <see cref="T:System.ValueTuple`5" /> 執行個體第五個元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`5" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`5" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`5" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`5" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`5" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="ValueTuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 4。</param>
      <returns>位在指定位置的 <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 4。</exception>
    </member>
    <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>5，<see cref="T:System.ValueTuple`5" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.ValueTuple`5.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`5" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`5" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueTuple`6">
      <summary>表示含有 6 個元件的值元組。</summary>
      <typeparam name="T1">值元組第一個元素的類型。</typeparam>
      <typeparam name="T2">值元組第二個元素的類型。</typeparam>
      <typeparam name="T3">值元組第三個元素的類型。</typeparam>
      <typeparam name="T4">值元組第四個元素的類型。</typeparam>
      <typeparam name="T5">值元組第五個元素的類型。</typeparam>
      <typeparam name="T6">值元組第六個元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化新的 <see cref="T:System.ValueTuple`6" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
      <param name="item2">值元組的第二個元素。</param>
      <param name="item3">值元組的第三個元素。</param>
      <param name="item4">值元組的第四個元素。</param>
      <param name="item5">值元組的第五個元素。</param>
      <param name="item6">值元組的第六個元素。</param>
    </member>
    <member name="M:System.ValueTuple`6.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`6" /> 執行個體與指定的 <see cref="T:System.ValueTuple`6" /> 執行個體。</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`6.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`6" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`6.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`6" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`6" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`6.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`6" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`6" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`6.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`6" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item2">
      <summary>取得目前 <see cref="T:System.ValueTuple`6" /> 執行個體第二個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item3">
      <summary>取得目前 <see cref="T:System.ValueTuple`6" /> 執行個體第三個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item4">
      <summary>取得目前 <see cref="T:System.ValueTuple`6" /> 執行個體第四個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item5">
      <summary>取得目前 <see cref="T:System.ValueTuple`6" /> 執行個體第五個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item6">
      <summary>取得目前 <see cref="T:System.ValueTuple`6" /> 執行個體第六個元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`6" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`6" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`6" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`6" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`6" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="ValueTuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 到 5。</param>
      <returns>位在指定位置的 <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 5。</exception>
    </member>
    <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>6，<see cref="T:System.ValueTuple`6" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.ValueTuple`6.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`6" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`6" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueTuple`7">
      <summary>表示含有 7 個元件的值元組。</summary>
      <typeparam name="T1">值元組第一個元素的類型。</typeparam>
      <typeparam name="T2">值元組第二個元素的類型。</typeparam>
      <typeparam name="T3">值元組第三個元素的類型。</typeparam>
      <typeparam name="T4">值元組第四個元素的類型。</typeparam>
      <typeparam name="T5">值元組第五個元素的類型。</typeparam>
      <typeparam name="T6">值元組第六個元素的類型。</typeparam>
      <typeparam name="T7">值元組第七個元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化新的 <see cref="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
      <param name="item2">值元組的第二個元素。</param>
      <param name="item3">值元組的第三個元素。</param>
      <param name="item4">值元組的第四個元素。</param>
      <param name="item5">值元組的第五個元素。</param>
      <param name="item6">值元組的第六個元素。</param>
      <param name="item7">值元組的第七個元素。</param>
    </member>
    <member name="M:System.ValueTuple`7.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`7" /> 執行個體與指定的 <see cref="T:System.ValueTuple`7" /> 執行個體。</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`7.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`7" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`7.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`7" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`7" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`7.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`7" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`7" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`7.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`7" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item2">
      <summary>取得目前 <see cref="T:System.ValueTuple`7" /> 執行個體第二個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item3">
      <summary>取得目前 <see cref="T:System.ValueTuple`7" /> 執行個體第三個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item4">
      <summary>取得目前 <see cref="T:System.ValueTuple`7" /> 執行個體第四個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item5">
      <summary>取得目前 <see cref="T:System.ValueTuple`7" /> 執行個體第五個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item6">
      <summary>取得目前 <see cref="T:System.ValueTuple`7" /> 執行個體第六個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item7">
      <summary>取得目前 <see cref="T:System.ValueTuple`7" /> 執行個體第七個元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`7" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`7" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`7" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`7" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`7" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="ValueTuple" /> 項目索引。 <paramref name="index" /> 的範圍可以從 0 (<see cref="F:System.ValueTuple`7.Item1" /> 的索引) 到 6 (<see cref="F:System.ValueTuple`7.Item7" /> 的索引)。</param>
      <returns>位在指定位置的 <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0 或大於 6。</exception>
    </member>
    <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>7，<see cref="T:System.ValueTuple`7" /> 物件中的項目數目。</returns>
    </member>
    <member name="M:System.ValueTuple`7.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`7" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`7" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueTuple`8">
      <summary>代表 n 個值的元組，其中 n 大於或等於 8。</summary>
      <typeparam name="T1">值元組第一個元素的類型。</typeparam>
      <typeparam name="T2">值元組第二個元素的類型。</typeparam>
      <typeparam name="T3">值元組第三個元素的類型。</typeparam>
      <typeparam name="T4">值元組第四個元素的類型。</typeparam>
      <typeparam name="T5">值元組第五個元素的類型。</typeparam>
      <typeparam name="T6">值元組第六個元素的類型。</typeparam>
      <typeparam name="T7">值元組第七個元素的類型。</typeparam>
      <typeparam name="TRest">任何泛型值元組執行個體，會定義元組剩餘元素的類型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化新的 <see cref="T:System.ValueTuple`8" /> 執行個體。</summary>
      <param name="item1">值元組的第一個元素。</param>
      <param name="item2">值元組的第二個元素。</param>
      <param name="item3">值元組的第三個元素。</param>
      <param name="item4">值元組的第四個元素。</param>
      <param name="item5">值元組的第五個元素。</param>
      <param name="item6">值元組的第六個元素。</param>
      <param name="item7">值元組的第七個元素。</param>
      <param name="rest">任何值元組類型的執行個體，包含值元組剩餘元素的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型值元組類型。</exception>
    </member>
    <member name="M:System.ValueTuple`8.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
      <summary>比較目前的 <see cref="T:System.ValueTuple`8" /> 執行個體與指定的 <see cref="T:System.ValueTuple`8" /> 執行個體</summary>
      <param name="other">要與此執行個體相比較的元組。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
    </member>
    <member name="M:System.ValueTuple`8.Equals(System.Object)">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`8" /> 執行個體是否與指定的物件相等。</summary>
      <param name="obj">與這個執行個體相互比較的物件。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`8.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
      <summary>傳回值，這個值指出目前的 <see cref="T:System.ValueTuple`8" /> 執行個體是否與指定的 <see cref="T:System.ValueTuple`8" /> 執行個體相等。</summary>
      <param name="other">要與此執行個體相比較的值元組。</param>
      <returns>如果目前的執行個體和指定的元組相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`8.GetHashCode">
      <summary>計算目前 <see cref="T:System.ValueTuple`8" /> 執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ValueTuple`8" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="F:System.ValueTuple`8.Item1">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體第一個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item2">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體第二個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item3">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體第三個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item4">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體第四個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item5">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體第五個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item6">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體第六個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item7">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體第七個元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Rest">
      <summary>取得目前 <see cref="T:System.ValueTuple`8" /> 執行個體剩餘的元素。</summary>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子來比較目前的 <see cref="T:System.ValueTuple`8" /> 執行個體與指定的物件，並傳回一個整數，指出目前的物件在排序次序中，是位於指定物件之前、之後或相同的位置。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">提供自訂規則進行比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="other" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple`8" /> 物件。</exception>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，這個值會根據指定的比較方法，指出目前的 <see cref="T:System.ValueTuple`8" /> 執行個體是否與指定的物件相等。</summary>
      <param name="other">與這個執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用來評估這兩個物件是否相等的方法。</param>
      <returns>如果目前的執行個體和指定的物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.ValueTuple`8" /> 執行個體的雜湊碼。</summary>
      <param name="comparer">物件，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法會計算目前 <see cref="T:System.ValueTuple`8" /> 執行個體的雜湊碼。</param>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ValueTuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.ValueTuple`8" /> 物件與指定的物件比較，並傳回可指出目前物件在排序次序中，是否在指定物件之前、之後或者相同之位置的整數。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>帶正負號的整數，可指出此執行個體以及排序次序中 <paramref name="obj" /> 的相對位置，如下表所示。  
  值 
  說明 
  負整數 
  這個執行個體位於 <paramref name="other" /> 之前。  

  零 
  這個執行個體和 <paramref name="other" /> 的排序位置相同。  

  正整數 
  這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple`8" /> 物件。</exception>
    </member>
    <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>取得指定的 <see langword="ValueTuple" /> 項目值。</summary>
      <param name="index">指定的 <see langword="ValueTuple" /> 項目值。 <paramref name="index" /> 的範圍可以從 <see langword="Item1" /> 的 0，到小於 <see langword="ValueTuple" /> 的項目數目。</param>
      <returns>位在指定位置的 <see langword="ValueTuple" /> 項目值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0。  
-或- 
 <paramref name="index" /> 大於或等於 <see cref="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Length" />。</exception>
    </member>
    <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Length">
      <summary>取得 <see langword="ValueTuple" /> 中的項目數目。</summary>
      <returns>
        <see langword="ValueTuple" /> 中的項目數。</returns>
    </member>
    <member name="M:System.ValueTuple`8.ToString">
      <summary>傳回字串，表示這個 <see cref="T:System.ValueTuple`8" /> 執行個體的值。</summary>
      <returns>這個 <see cref="T:System.ValueTuple`8" /> 執行個體的字串表示。</returns>
    </member>
    <member name="T:System.ValueType">
      <summary>提供實值型別 (Value Type) 的基底類別。</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>初始化 <see cref="T:System.ValueType" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體為同型別並表示相同的值，則為 <paramref name="obj" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數，其為這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>傳回此執行個體的完整類型名稱。</summary>
      <returns>完整型別名稱。</returns>
    </member>
    <member name="T:System.Version">
      <summary>表示組件的版本號碼、作業系統或 Common Language Runtime。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Version.#ctor">
      <summary>初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>使用指定的主要和次要值，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> 或 <paramref name="minor" /> 小於零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要、次要和組建值，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <param name="build">組建編號。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" /> 或 <paramref name="build" /> 小於零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要、次要、組建和修訂編號，初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <param name="build">組建編號。</param>
      <param name="revision">修訂編號。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" />、<paramref name="build" /> 或 <paramref name="revision" /> 小於零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>以指定的字串初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="version">包含主要、次要、組建和修訂編號的字串，其中每個編號以句號字元 ('.') 隔開。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 具有兩個以下的元件或四個以上的元件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">主要、次要、組建或修訂元件小於零。</exception>
      <exception cref="T:System.FormatException">至少有一個 <paramref name="version" /> 的元件未剖析成整數。</exception>
      <exception cref="T:System.OverflowException">至少有一個 <paramref name="version" /> 的元件表示大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之組建元件值。</summary>
      <returns>組建編號；如果組建編號未定義，則為 -1。</returns>
    </member>
    <member name="M:System.Version.Clone">
      <summary>傳回新的 <see cref="T:System.Version" /> 物件，它的值和目前的 <see cref="T:System.Version" /> 物件相同。</summary>
      <returns>新的 <see cref="T:System.Object" />，其值為目前 <see cref="T:System.Version" /> 物件的複本。</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>將目前 <see cref="T:System.Version" /> 物件與指定物件相比較，並傳回其相對值的指示。</summary>
      <param name="version">要比較的物件或 <see langword="null" />。</param>
      <returns>帶正負號的整數，表示兩個物件的相對值，如下表所示。  
  傳回值 
  意義 
  小於零 
  目前的 <see cref="T:System.Version" /> 物件是 <paramref name="version" /> 之前的版本。  

  零 
  目前的 <see cref="T:System.Version" /> 物件與 <paramref name="version" /> 是相同版本。  

  大於零 
  目前的 <see cref="T:System.Version" /> 物件是 <paramref name="version" /> 的後續版本。  

-或- 
 <paramref name="version" /> 為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 不是 <see cref="T:System.Version" /> 型別。</exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>將目前 <see cref="T:System.Version" /> 物件與指定的 <see cref="T:System.Version" /> 物件相比較，並傳回其相對值的指示。</summary>
      <param name="value">要與目前 <see cref="T:System.Version" /> 物件比較的 <see cref="T:System.Version" /> 物件，否則為 <see langword="null" />。</param>
      <returns>帶正負號的整數，表示兩個物件的相對值，如下表所示。  
  傳回值 
  意義 
  小於零 
  目前的 <see cref="T:System.Version" /> 物件是 <paramref name="value" /> 之前的版本。  

  零 
  目前的 <see cref="T:System.Version" /> 物件與 <paramref name="value" /> 是相同版本。  

  大於零 
  目前的 <see cref="T:System.Version" /> 物件是 <paramref name="value" /> 的後續版本。  

-或- 
 <paramref name="value" /> 為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>傳回值，指出目前的 <see cref="T:System.Version" /> 物件是否等於指定的物件。</summary>
      <param name="obj">要與目前的 <see cref="T:System.Version" /> 物件比較的物件，否則為 <see langword="null" />。</param>
      <returns>如果目前 <see cref="T:System.Version" /> 物件和 <paramref name="obj" /> 都是 <see cref="T:System.Version" /> 物件，並且目前 <see cref="T:System.Version" /> 物件的每個元件都符合 <paramref name="obj" /> 的相對應元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>傳回值，指出目前的 <see cref="T:System.Version" /> 物件和指定的 <see cref="T:System.Version" /> 物件是否表示相同的值。</summary>
      <param name="obj">要與目前 <see cref="T:System.Version" /> 物件比較的 <see cref="T:System.Version" /> 物件，否則為 <see langword="null" />。</param>
      <returns>如果目前 <see cref="T:System.Version" /> 物件的每個元件都符合 <paramref name="obj" /> 參數的相對應元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Version" /> 物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之主要元件值。</summary>
      <returns>主要版本號碼。</returns>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>取得修訂編號的高 16 位元。</summary>
      <returns>16 位元帶正負號的整數。</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之次要元件值。</summary>
      <returns>次要版本號碼。</returns>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>取得修訂編號的低 16 位元。</summary>
      <returns>16 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>判斷指定的兩個 <see cref="T:System.Version" /> 物件是否相等。</summary>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。</param>
      <returns>如果 <paramref name="v1" /> 等於 <paramref name="v2" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否大於第二個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。</param>
      <returns>如果 <see langword="true" /> 大於 <paramref name="v1" /> 則為 <paramref name="v2" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否大於或等於第二個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。</param>
      <returns>如果 <paramref name="v1" /> 大於或等於 <paramref name="v2" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>判斷指定的兩個 <see cref="T:System.Version" /> 物件是否相等。</summary>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。</param>
      <returns>如果 <paramref name="v1" /> 不等於 <paramref name="v2" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否小於第二個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。</param>
      <returns>如果 <paramref name="v1" /> 小於 <paramref name="v2" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>判斷第一個指定的 <see cref="T:System.Version" /> 物件是否小於或等於第二個 <see cref="T:System.Version" /> 物件。</summary>
      <param name="v1">第一個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第二個 <see cref="T:System.Version" /> 物件。</param>
      <returns>如果 <paramref name="v1" /> 小於或等於 <paramref name="v2" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Version.Parse(System.ReadOnlySpan{System.Char})">
      <param name="input" />
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>將版本號碼的字串表示轉換為對等的 <see cref="T:System.Version" /> 物件。</summary>
      <param name="input">字串，包含要轉換的版本號碼。</param>
      <returns>物件，相當於 <paramref name="input" /> 參數中指定的版本號碼。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 具有兩個以下或四個以上的版本元件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">至少 <paramref name="input" /> 中的一個元件小於零。</exception>
      <exception cref="T:System.FormatException">至少 <paramref name="input" /> 中的一個元件不是整數。</exception>
      <exception cref="T:System.OverflowException">至少 <paramref name="input" /> 中的一個元件表示大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之修訂元件值。</summary>
      <returns>修訂編號；如果修訂編號未定義，則為 -1。</returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>將目前 <see cref="T:System.Version" /> 物件的值轉換為它的對等 <see cref="T:System.String" /> 表示。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的主要、次要、組建和修訂元件值的 <see cref="T:System.Version" /> 表示，如下列格式所述。 每個元件是以句號字元 ('.') 隔開。 方括弧 ('[' 和 ']') 指示如果未定義則不會在傳回值中出現的元件： 
major.minor[.build[.revision]] 
例如，如果您使用建構函式 <c>Version(1,1)</c> 建立 <see cref="T:System.Version" /> 物件，則傳回字串是 "1.1"。 如果您使用建構函式 <c>Version(1,3,4,2)</c> 建立 <see cref="T:System.Version" /> 物件，則傳回字串是 "1.3.4.2"。</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>將目前 <see cref="T:System.Version" /> 物件的值轉換為它的對等 <see cref="T:System.String" /> 表示。 指定的計數指示要傳回的元件數目。</summary>
      <param name="fieldCount">要傳回的元件數目。 <paramref name="fieldCount" /> 的範圍從 0 到 4。</param>
      <returns>目前 <see cref="T:System.String" /> 物件的主要、次要、組建和修訂元件值的 <see cref="T:System.Version" /> 表示，每個元件都以句號字元 ('.') 隔開。 <paramref name="fieldCount" /> 參數會判斷有多少元件傳回。  
  fieldCount 
  傳回值 
  0 
  空字串 ("")。  

  1 
  major 
  2 
  major.minor 
  3 
  major.minor.build 
  4 
  major.minor.build.revision 
   

 例如，如果您使用建構函式 <c>Version(1,3,5)</c> 建立 <see cref="T:System.Version" /> 物件，則 <c>ToString(2)</c> 會傳回 "1.3"，<c>ToString(4)</c> 則會擲回例外狀況。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> 小於 0 或大於 4。  
-或- 
 <paramref name="fieldCount" /> 大於在目前 <see cref="T:System.Version" /> 物件中定義的元件數目。</exception>
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32,System.Int32@)">
      <param name="destination" />
      <param name="fieldCount" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32@)">
      <param name="destination" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Version.TryParse(System.ReadOnlySpan{System.Char},System.Version@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>嘗試將版本號碼的字串表示轉換為對等的 <see cref="T:System.Version" /> 物件，並傳回表示轉換是否成功的值。</summary>
      <param name="input">字串，包含要轉換的版本號碼。</param>
      <param name="result">當這個方法傳回時，如果轉換成功，則會包含 <see cref="T:System.Version" />，相當於 <paramref name="input" /> 所包含的數字。 如果 <paramref name="input" /> 是 <see langword="null" />，則為 <see cref="F:System.String.Empty" />；如果轉換失敗，當方法傳回時，<paramref name="result" /> 則為 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 參數轉換成功，則為 <paramref name="input" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Void">
      <summary>為不傳回任何值的方法指定傳回實值型別 (Value Type)。</summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>表示弱式參考，即在參考物件的同時，仍允許系統透過記憶體回收來回收該物件。</summary>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>參考指定的物件，初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。</summary>
      <param name="target">要追蹤的物件或 <see langword="null" />。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>參考指定的物件，並使用指定的重新恢復狀態追蹤 (Tracking)，初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。</summary>
      <param name="target">要追蹤的物件。</param>
      <param name="trackResurrection">指示何時停止追蹤物件。 如果是 <see langword="true" />，則會在最終處理之後追蹤物件；如果是 <see langword="false" />，則只會追蹤物件到最終處理為止。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定序列化和資料流物件的還原序列化資料，來初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。</summary>
      <param name="info">保有序列化或還原序列化目前 <see cref="T:System.WeakReference" /> 物件所需之所有資料的物件。</param>
      <param name="context">(保留的) 說明 <paramref name="info" /> 所指定的序列化資料流之來源和目的端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>捨棄對目前 <see cref="T:System.WeakReference" /> 物件所表示之目標的參考。</summary>
    </member>
    <member name="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的所有資料，來填入 <see cref="T:System.WeakReference" /> 物件。</summary>
      <param name="info">保有序列化或還原序列化目前 <see cref="T:System.WeakReference" /> 物件所需之所有資料的物件。</param>
      <param name="context">(保留字) 位置，序列化資料在此處被儲存和擷取。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>取得目前 <see cref="T:System.WeakReference" /> 物件所參考的物件是否已進行記憶體回收的指示。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件尚未進行記憶體回收，且仍可存取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>取得或設定目前 <see cref="T:System.WeakReference" /> 物件所參考的物件 (目標)。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件已進行記憶體回收，則為 <see langword="null" />，否則為目前 <see cref="T:System.WeakReference" /> 物件所參考的物件參考。</returns>
      <exception cref="T:System.InvalidOperationException">目標物件的參考無效。 如果值是 null 參考，或者如果物件已在設定作業期間做最終處理，在設定這項屬性的同時，可能會傳回這個例外狀況。</exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>取得指示，了解是否要對目前 <see cref="T:System.WeakReference" /> 物件所參考的物件，在執行最終處理之後再進行追蹤。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件在執行最終處理之後會受到追蹤，則為 <see langword="true" />，如果只針對該物件追蹤到最終處理為止，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>表示具型別的弱式參考，即在參考物件的同時，仍允許系統透過記憶體回收來回收該物件。</summary>
      <typeparam name="T">參考之物件的型別。</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.WeakReference`1" /> 類別的新執行個體，這個類別會參考指定的物件。</summary>
      <param name="target">要參考的物件或 <see langword="null" />。</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>初始化 <see cref="T:System.WeakReference`1" /> 類別的新執行個體，此類別會參考指定的物件，並使用指定的重新恢復狀態追蹤。</summary>
      <param name="target">要參考的物件或 <see langword="null" />。</param>
      <param name="trackResurrection">
        <see langword="true" /> 表示在最終處理之後追蹤物件，<see langword="false" /> 表示只會追蹤物件到最終處理為止。</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
      <summary>捨棄對目前 <see cref="T:System.WeakReference`1" /> 物件所表示之目標的參考。</summary>
    </member>
    <member name="M:System.WeakReference`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的所有資料填入 <see cref="T:System.WeakReference`1" /> 物件。</summary>
      <param name="info">保有序列化或還原序列化目前 <see cref="T:System.WeakReference`1" /> 物件所需之所有資料的物件。</param>
      <param name="context">在此處儲存和擷取序列化的資料的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>設定這個 <see cref="T:System.WeakReference`1" /> 物件所參考的目標物件。</summary>
      <param name="target">新的目標物件。</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>嘗試擷取目前 <see cref="T:System.WeakReference`1" /> 物件所參考的目標物件。</summary>
      <param name="target">這個方法傳回時，會包含目標物件 (如果有的話)。 這個參數會被視為未初始化。</param>
      <returns>如果已收到目標，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
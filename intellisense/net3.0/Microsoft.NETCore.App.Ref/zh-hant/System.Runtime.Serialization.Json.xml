<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.DateTimeFormat">
      <summary>指定日期時間格式選項。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)">
      <summary>使用格式字串初始化 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 類別的新執行個體。</summary>
      <param name="formatString">格式字串。</param>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)">
      <summary>使用格式字串和格式提供者，初始化 <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> 類別的新執行個體。</summary>
      <param name="formatString">格式字串。</param>
      <param name="formatProvider">格式提供者。</param>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.DateTimeStyles">
      <summary>取得或設定格式化選項，這些選項會自訂一些日期和時間剖析方法的字串剖析。</summary>
      <returns>格式化選項，這些選項會自訂一些日期和時間剖析方法的字串剖析。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatProvider">
      <summary>取得控制格式設定的物件。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatString">
      <summary>取得當日期或時間表示為字串時，用來控制所產生格式的格式字串。</summary>
      <returns>當日期或時間表示為字串時，用來控制生成格式的格式字串。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EmitTypeInformation">
      <summary>指定發出型別資訊的頻率。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Always">
      <summary>永遠要發出型別資訊。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.AsNeeded">
      <summary>視需要發出型別資訊。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Never">
      <summary>永遠不要發出型別資訊。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary>將物件序列化為 JavaScript 物件標記法 (JSON) 以及將 JSON 資料還原序列化為物件。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，以序列化或還原序列化所指定型別的物件。</summary>
      <param name="type">已序列化或還原序列化之執行個體的型別。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，以序列化或還原序列化所指定型別的物件，以及可能存在物件圖形中的已知型別集合。</summary>
      <param name="type">已序列化或還原序列化之執行個體的型別。</param>
      <param name="knownTypes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Type" />，其中包含可能存在物件圖形中的型別。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，以序列化或還原序列化所指定型別及序列化程式設定的物件。</summary>
      <param name="type">已序列化或還原序列化之執行個體的型別。</param>
      <param name="settings">JSON 序列化程式的序列化程式設定。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件。</summary>
      <param name="type">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName">內含要序列化或還原序列化之內容的 XML 項目名稱。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件，以及可能存在物件圖形中的已知型別集合。</summary>
      <param name="type">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName">內含要序列化或還原序列化之內容的 XML 項目名稱。 預設為 "root"。</param>
      <param name="knownTypes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Type" />，其中包含可能存在物件圖形中的型別。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用 <see cref="T:System.Xml.XmlDictionaryString" /> 型別之參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件。</summary>
      <param name="type">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含內容的根項目名稱。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 類別的新執行個體，使用 <see cref="T:System.Xml.XmlDictionaryString" /> 型別之參數所指定的 XML 根項目來序列化或還原序列化指定型別的物件，以及可能存在物件圖形中的已知型別集合。</summary>
      <param name="type">已序列化或還原序列化之執行個體的型別。</param>
      <param name="rootName">
        <see cref="T:System.Xml.XmlDictionaryString" />，其中包含內容的根項目名稱。</param>
      <param name="knownTypes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.Type" />，其中包含可能存在物件圖形中的型別。</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat">
      <summary>取得物件圖形中日期和時間型別項目的格式。</summary>
      <returns>物件圖形中日期和時間型別項目的格式。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation">
      <summary>取得或設定要發出型別資訊的資料合約 JSON 序列化程式設定。</summary>
      <returns>要發出型別資訊的資料合約 JSON 序列化程式設定。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <summary>取得值，這個值會指定還原序列化時是否忽略未知資料，以及序列化時是否忽略 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> 介面。</summary>
      <returns>如果要忽略未知資料和 <see langword="true" /> 則為 <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>取得值，這個值會指定 <see cref="T:System.Xml.XmlDictionaryReader" /> 是否位於表示序列化程式能夠還原序列化之物件的 XML 項目上。</summary>
      <param name="reader">用來讀取從 JSON 對應之 XML 資料流的 <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
      <returns>如果讀取器位於正確位置則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>判斷 <see cref="T:System.Xml.XmlReader" /> 是否置於可還原序列化的物件上。</summary>
      <param name="reader">用來讀取 XML 資料流的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>如果讀取器位於正確位置則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary>取得型別的集合，這些型別可能會存在於使用這個 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 執行個體所序列化的物件圖形中。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，其中包含已當做已知型別傳入至 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 建構函式的預期型別。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <summary>取得物件圖形中序列化程式在一次讀取或寫入呼叫中，序列化或還原序列化的最大項目數。</summary>
      <returns>要序列化或還原序列化的最大項目數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">超過最大值的項目數。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary>讀取 JSON (JavaScript 物件標記法) 格式的文件資料流，然後傳回已還原序列化的物件。</summary>
      <param name="stream">要讀取的 <see cref="T:System.IO.Stream" />。</param>
      <returns>已還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 讀取從 JSON (JavaScript 物件標記法) 對應的 XML 文件，然後傳回已還原序列化的物件。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlDictionaryReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <returns>已還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryReader" /> 讀取從 JSON 對應的 XML 文件，然後傳回已還原序列化的物件。它也可以讓您指定序列化程式在嘗試還原序列化前是否檢查位於適當的項目上。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlDictionaryReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <param name="verifyObjectName">若要檢查內含的 XML 項目名稱和命名空間是否對應至預期的名稱以及命名空間，則為 <see langword="true" />，否則為 <see langword="false" />，將會略過驗證。 預設為 <see langword="true" />。</param>
      <returns>已還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 讀取從 JSON (JavaScript 物件標記法) 對應的 XML 文件，然後傳回已還原序列化的物件。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <returns>已還原序列化的物件。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>使用 <see cref="T:System.Xml.XmlReader" /> 讀取從 JSON 對應的 XML 文件，然後傳回已還原序列化的物件。它也可以讓您指定序列化程式在嘗試還原序列化前是否檢查位於適當的項目上。</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />，用於讀取從 JSON 對應的 XML 文件。</param>
      <param name="verifyObjectName">若要檢查內含的 XML 項目名稱和命名空間是否對應至預期的名稱以及命名空間，則為 <see langword="true" />，否則為 <see langword="false" />，將會略過驗證。 預設為 <see langword="true" />。</param>
      <returns>已還原序列化的物件。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes">
      <summary>取得或設定值，指定是否要序列化唯讀型別。</summary>
      <returns>
        <see langword="true" /> 表示序列化唯讀型別，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat">
      <summary>取得值，指定是否要使用簡單的字典格式。</summary>
      <returns>
        <see langword="true" /> 表示使用一個簡單的字典格式，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 將結尾 XML 項目寫入可以對應至 JavaScript 物件標記法 (JSON) 的 XML 文件。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />，可用來撰寫要對應至 JSON 的 XML 文件。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 將結尾 XML 項目寫入可以對應至 JavaScript 物件標記法 (JSON) 的 XML 文件。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />，可用來撰寫對應至 JSON 的 XML 文件。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>將指定物件序列化為 JavaScript 物件標記法 (JSON) 資料，然後將產生的 JSON 寫入資料流。</summary>
      <param name="stream">要寫入的 <see cref="T:System.IO.Stream" />。</param>
      <param name="graph">包含要寫入至資料流之資料的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。 使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 來寫入所有的物件資料，包括起始 XML 項目、內容和結尾項目。</summary>
      <param name="writer">用來撰寫要對應至 JSON 之 XML 文件或資料流的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">包含要寫入之資料的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。 使用 <see cref="T:System.Xml.XmlWriter" /> 來寫入所有的物件資料，包括起始 XML 項目、內容和結尾項目。</summary>
      <param name="writer">用來撰寫要對應至 JSON 之 XML 文件的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">包含要寫入之資料的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 來撰寫可以對應至 JavaScript 物件標記法 (JSON) 的 XML 內容。</summary>
      <param name="writer">要寫入的目標 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要寫入的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 來撰寫可以對應至 JavaScript 物件標記法 (JSON) 的 XML 內容。</summary>
      <param name="writer">用來寫入的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要寫入的物件。</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">正在序列化的型別不符合資料合約規則。 例如，<see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 屬性尚未套用至此型別。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">正在寫入的執行個體發生問題。</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">已超過要序列化的物件數目上限。 檢查 <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> 屬性。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlDictionaryWriter" /> 寫入開頭 XML 項目，將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。</summary>
      <param name="writer">用於寫入 XML 開始項目的 <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="graph">要寫入的物件。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>使用 <see cref="T:System.Xml.XmlWriter" /> 寫入開頭 XML 項目，將物件序列化為可以對應至 JavaScript 物件標記法 (JSON) 的 XML。</summary>
      <param name="writer">用於寫入 XML 開始項目的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="graph">要寫入的物件。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings">
      <summary>指定 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> 設定。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DateTimeFormat">
      <summary>取得或設定 DateTimeFormat，定義日期和時間在文化特性上適當的顯示格式。</summary>
      <returns>DateTimeFormat，可定義日期和時間在文化特性上適當的顯示格式。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.EmitTypeInformation">
      <summary>取得或設定要發出型別資訊的資料合約 JSON 序列化程式設定。</summary>
      <returns>要發出型別資訊的資料合約 JSON 序列化程式設定。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.IgnoreExtensionDataObject">
      <summary>取得或設定值，這個值會指定當類別序列化或還原序列化時，是否略過類別延伸所提供的資料。</summary>
      <returns>
        <see langword="true" /> 表示當類別序列化或還原序列化時，是否略過類別延伸所提供的資料，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.KnownTypes">
      <summary>取得或設定型別的集合，這些型別可能會存在於使用這個 DataContractJsonSerializerSettings 執行個體所序列化的物件圖形中。</summary>
      <returns>型別的集合，這些型別可能會存在於使用這個 DataContractJsonSerializerSettings 執行個體所序列化的物件圖形中。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.MaxItemsInObjectGraph">
      <summary>取得或設定物件圖形中要序列化或還原序列化的最大項目數。</summary>
      <returns>物件圖形中要序列化或還原序列化的最大項目數。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.RootName">
      <summary>取得或設定所選取物件的根名稱。</summary>
      <returns>所選物件的根名稱。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.SerializeReadOnlyTypes">
      <summary>取得或設定值，指定是否要序列化唯讀型別。</summary>
      <returns>
        <see langword="true" /> 表示序列化唯讀型別，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.UseSimpleDictionaryFormat">
      <summary>取得或設定值，指定是否要使用簡單的字典格式。</summary>
      <returns>
        <see langword="true" /> 表示使用一個簡單的字典格式，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary>當重複使用 JavaScript Object Notation (JSON) 讀取器從特定資料流或緩衝區讀取時，指定初始化該讀取器所使用的介面。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>將啟用 JavaScript 物件標記法 (JSON) 的讀取器重新初始化為含有 JSON 編碼資料的指定緩衝區。</summary>
      <param name="buffer">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="offset">要在 <paramref name="buffer" /> 中進行讀取的起始位置。</param>
      <param name="count">可以從 <paramref name="buffer" /> 中讀取的位元組數目。</param>
      <param name="encoding">此讀取器使用的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="quotas">要套用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 。</param>
      <param name="onClose">關閉讀取器時要呼叫的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委派 (Delegate)。</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>將啟用 JavaScript 物件標記法 (JSON) 的讀取器重新初始化為含有 JSON 編碼資料的指定資料流。</summary>
      <param name="stream">要從其中讀取的輸入 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">此讀取器使用的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="quotas">要套用的<see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 。</param>
      <param name="onClose">關閉讀取器時要呼叫的委派。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary>當重複使用 JavaScript Object Notation (JSON) 寫入器來寫入特定輸出資料流時，指定初始化寫入器所使用的介面。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>將 JavaScript Object Notation (JSON) 寫入器初始化 (或重新初始化) 為具有指定字元編碼的指定輸出資料流。</summary>
      <param name="stream">寫入器會將結果寫入至輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">指定輸出資料流字元編碼的 <see cref="T:System.Text.Encoding" />。</param>
      <param name="ownsStream">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>產生 <see cref="T:System.Xml.XmlDictionaryReader" /> 的執行個體，這個執行個體可以從資料流或緩衝區中讀取以 JavaScript 物件標記法 (JSON) 編碼的資料，並將其對應至 XML Infoset 以及 <see cref="T:System.Xml.XmlDictionaryWriter" /> 的執行個體，這個執行個體可以將 XML Infoset 對應至 JSON 並將 JSON 編碼的資料寫入至資料流。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以將具有指定大小和位移以及字元編碼、以 JavaScript 物件標記法 (JSON) 編碼的緩衝區對應至 XML Infoset。</summary>
      <param name="buffer">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="offset">要在 <paramref name="buffer" /> 中進行讀取的起始位置。</param>
      <param name="count">可以從 <paramref name="buffer" /> 中讀取的位元組數目。</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" />，指定讀取器所使用的字元編碼。 如果指定 <see langword="null" /> 做為值，讀取器會嘗試自動偵測編碼。</param>
      <param name="quotas">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">關閉讀取器時要呼叫的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委派 (Delegate)。 預設值為 <see langword="null" />。</param>
      <returns>可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以將具有指定大小和位移、以 JavaScript 物件標記法 (JSON) 編碼的緩衝區對應至 XML Infoset。</summary>
      <param name="buffer">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="offset">要在 <paramref name="buffer" /> 中進行讀取的起始位置。</param>
      <param name="count">可以從 <paramref name="buffer" /> 中讀取的位元組數目。</param>
      <param name="quotas">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <returns>可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可將以 JavaScript 物件標記法 (JSON) 編碼的緩衝區對應至 XML Infoset。</summary>
      <param name="buffer">要從其中讀取的輸入 <see cref="T:System.Byte" /> 緩衝區陣列。</param>
      <param name="quotas">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <returns>可以處理 JavaScript 物件標記法 (JSON) 資料的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可以將具有指定大小和位移、以 JavaScript 物件標記法 (JSON) 編碼的資料流對應至 XML Infoset。</summary>
      <param name="stream">要從其中讀取的輸入 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" />，指定讀取器所使用的字元編碼。 如果指定 <see langword="null" /> 做為值，讀取器會嘗試自動偵測編碼。</param>
      <param name="quotas">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <param name="onClose">關閉讀取器時要呼叫的 <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> 委派 (Delegate)。</param>
      <returns>可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryReader" />，它可將以 JavaScript 物件標記法 (JSON) 編碼的資料流對應至 XML Infoset。</summary>
      <param name="stream">要從其中讀取的輸入 <see cref="T:System.IO.Stream" />。</param>
      <param name="quotas">在讀取不受信任的資料時，用來防止阻絕服務攻擊的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />。</param>
      <returns>可以讀取 JavaScript 物件標記法 (JSON) 的 <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至資料流。</summary>
      <param name="stream">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元編碼的資料流。</summary>
      <param name="stream">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元編碼的資料流。</summary>
      <param name="stream">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <param name="ownsStream">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。 預設值為 <see langword="true" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元的資料流。</summary>
      <param name="stream">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <param name="ownsStream">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。 預設值為 <see langword="true" />。</param>
      <param name="indent">如果為 <see langword="true" />，輸出會使用多行格式，並正確縮排每個層級，否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
      <summary>建立 <see cref="T:System.Xml.XmlDictionaryWriter" />，將經過 JSON 編碼的資料寫入至具有指定之字元的資料流。</summary>
      <param name="stream">JSON 寫入器的輸出 <see cref="T:System.IO.Stream" />。</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" />，指定寫入器所使用的字元編碼。 預設編碼方式為 UTF-8。</param>
      <param name="ownsStream">若為 <see langword="true" />，則寫入器會在完成時關閉輸出資料流；否則為 <see langword="false" />。 預設值為 <see langword="true" />。</param>
      <param name="indent">如果為 <see langword="true" />，輸出會使用多行格式，並正確縮排每個層級，否則為 <see langword="false" />。</param>
      <param name="indentChars">用來縮排每個層級的字串。</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" />，會將經過 JSON 編碼的資料寫入至以 XML Infoset 為基礎的資料流。</returns>
    </member>
  </members>
</doc>
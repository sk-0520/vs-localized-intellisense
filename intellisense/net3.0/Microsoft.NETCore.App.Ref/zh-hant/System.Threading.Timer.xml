<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Timer</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Timer">
      <summary>提供一套機制，可於指定間隔在執行緒集區執行緒上執行方法。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
      <summary>以無限週期和無限到期時間初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，利用新建立 <see cref="T:System.Threading.Timer" /> 物件做為狀態物件。</summary>
      <param name="callback">
        <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
      <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 32 位元帶正負號的整數來指定時間間隔。</summary>
      <param name="callback">
        <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</param>
      <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
      <param name="dueTime">叫用 <paramref name="callback" /> 前所延遲的時間量，以毫秒為單位。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
      <param name="period">
        <paramref name="callback" /> 引動過程的間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
      <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
      <param name="callback">
        <see cref="T:System.Threading.TimerCallback" /> 委派，表示要執行的方法。</param>
      <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
      <param name="dueTime">叫用 <paramref name="callback" /> 前所延遲的時間量，以毫秒為單位。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
      <param name="period">
        <paramref name="callback" /> 引動過程的間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294。</exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</summary>
      <param name="callback">代表要執行之方法的委派。</param>
      <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
      <param name="dueTime">
        <paramref name="callback" /> 參數叫用其方法前所延遲的時間量。 指定負 1 (-1) 毫秒以防止啟動計時器。 指定零 (0) 以立即啟動計時器。</param>
      <param name="period">為 <paramref name="callback" /> 所參考方法於兩次引動過程之間的時間間隔。 指定負 1 (-1) 毫秒以停用定期的信號方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 值的毫秒數為負，不等於 <see cref="F:System.Threading.Timeout.Infinite" />，或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
      <summary>初始化 <see langword="Timer" /> 類別的新執行個體，使用 32 位元不帶正負號的整數 (Unsigned Integer) 來測量時間間隔。</summary>
      <param name="callback">代表要執行之方法的委派。</param>
      <param name="state">包含回呼方法所使用資訊的物件，或 <see langword="null" />。</param>
      <param name="dueTime">叫用 <paramref name="callback" /> 前所延遲的時間量，以毫秒為單位。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。 指定零 (0) 以立即啟動計時器。</param>
      <param name="period">
        <paramref name="callback" /> 引動過程的間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Timer.ActiveCount">
      <summary>取得目前有效的計時器數。 有註冊的有效計時器會在未來某個時間發出滴答聲，且尚未受到取消。</summary>
      <returns>目前使用中的計時器數目。</returns>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元帶正負號的整數來測量時間間隔。</summary>
      <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
      <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值小於 -1。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</summary>
      <param name="dueTime">
        <see cref="T:System.TimeSpan" />，表示延遲的時間長度，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定負 1 (-1) 毫秒以防止重新啟動計時器。 指定零 (0) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間。 指定負 1 (-1) 毫秒以停用定期的信號方式。</param>
      <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值小於 -1 (以毫秒為單位)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數值大於 4294967294 (以毫秒為單位)。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元不帶正負號的整數來測量時間間隔。</summary>
      <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過這個時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。 指定零 (0) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。 指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <returns>如果已成功更新計時器，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
      <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
      <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出，並當計時器已被處置時發出通知。</summary>
      <param name="notifyObject">當 <see langword="Timer" /> 已被處置時，應通知的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <returns>如果函式成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="notifyObject" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Timer.DisposeAsync">
      <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.ValueTask" />，其將在與計時器建立關聯的所有工作都已停止時完成。</returns>
    </member>
    <member name="T:System.Threading.TimerCallback">
      <summary>表示處理來自 <see cref="T:System.Threading.Timer" /> 的呼叫的方法。</summary>
      <param name="state">物件，含有關於這個委派所叫用方法的應用程式特定資訊；或 <see langword="null" />。</param>
    </member>
  </members>
</doc>
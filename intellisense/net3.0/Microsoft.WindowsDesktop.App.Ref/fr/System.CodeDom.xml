<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>Donne accès aux instances du générateur de code et du compilateur de code C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> en utilisant les options de fournisseur spécifiées.</summary>
      <param name="providerOptions">Objet <see cref="T:System.Collections.Generic.IDictionary`2" /> qui contient les options de fournisseur du fichier de configuration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>Obtient une instance du compilateur de code C#.</summary>
      <returns>Instance de l'implémentation C# de <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>Obtient une instance du générateur de code C#.</summary>
      <returns>Instance de l'implémentation C# de <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>Obtient l'extension de nom de fichier à utiliser pendant la création de fichiers de code source.</summary>
      <returns>Extension de nom de fichier à utiliser pour les fichiers de code source générés.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour le membre de classe spécifié en utilisant les options spécifiées du TextWriter et du générateur de code.</summary>
      <param name="member">
        <see cref="T:System.CodeDom.CodeTypeMember" /> pour lequel du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> dans lequel écrire.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> à utiliser pendant la génération du code.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>Obtient un <see cref="T:System.ComponentModel.TypeConverter" /> pour le type d'objet spécifié.</summary>
      <param name="type">Type d'objet pour lequel un convertisseur de type doit être récupéré.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Fournit l'accès aux instances du générateur de code et du compilateur de code Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> en utilisant les options de fournisseur spécifiées.</summary>
      <param name="providerOptions">Objet <see cref="T:System.Collections.Generic.IDictionary`2" /> qui contient les options de fournisseur du fichier de configuration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> construit par défaut est <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Obtient une instance du compilateur de code Visual Basic.</summary>
      <returns>Instance de l'implémentation Visual Basic de <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Obtient une instance du générateur de code Visual Basic.</summary>
      <returns>Instance de l'implémentation Visual Basic de <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>Obtient l'extension du nom de fichier à utiliser lors de la création de fichiers de code source.</summary>
      <returns>Extension de nom de fichier à utiliser pour les fichiers de code source générés.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour le membre de classe spécifié en utilisant les options spécifiées du TextWriter et du générateur de code.</summary>
      <param name="member">
        <see cref="T:System.CodeDom.CodeTypeMember" /> pour lequel du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> dans lequel écrire.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> à utiliser pendant la génération du code.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>Obtient un <see cref="T:System.ComponentModel.TypeConverter" /> pour le type d'objet spécifié.</summary>
      <param name="type">Type d'objet pour lequel un convertisseur de type doit être récupéré.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>Obtient un identificateur de fonctionnalités de langage.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> qui indique les fonctionnalités spéciales d'un langage.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>Représente une référence à la valeur d'un argument passé à une méthode.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> avec le nom de paramètre spécifié.</summary>
      <param name="parameterName">Nom du paramètre à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>Obtient ou définit le nom du paramètre auquel l'expression fait référence.</summary>
      <returns>Nom du paramètre à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>Représente une expression qui crée un tableau.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et l'expression de code indiquant le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du tableau à créer.</param>
      <param name="size">Expression indiquant le nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et les expressions d'initialisation qui ont été spécifiés pour le tableau.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de données du tableau à créer.</param>
      <param name="initializers">Tableau des expressions à utiliser pour initialiser le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du tableau à créer.</param>
      <param name="size">Nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le nom du type de données et l'expression de code indiquant le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType">Nom du type de données du tableau à créer.</param>
      <param name="size">Expression indiquant le nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le nom du type de données et les initialiseurs spécifiés pour le tableau.</summary>
      <param name="createType">Nom du type de données du tableau à créer.</param>
      <param name="initializers">Tableau des expressions à utiliser pour initialiser le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le nom du type de données et le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType">Nom du type de données du tableau à créer.</param>
      <param name="size">Nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et l'expression de code indiquant le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType">Type de données du tableau à créer.</param>
      <param name="size">Expression indiquant le nombre d'index du tableau à créer.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et les initialiseurs spécifiés pour le tableau.</summary>
      <param name="createType">Type de données du tableau à créer.</param>
      <param name="initializers">Tableau des expressions à utiliser pour initialiser le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> avec le type de données et le nombre d'index qui ont été spécifiés pour le tableau.</summary>
      <param name="createType">Type de données du tableau à créer.</param>
      <param name="size">Nombre d'index du tableau à créer.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>Obtient ou définit le type de tableau à créer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>Obtient les initialiseurs à utiliser pour initialiser le tableau.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> indiquant les valeurs d'initialisation.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>Obtient ou définit le nombre d'index du tableau.</summary>
      <returns>Nombre d'index du tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>Obtient ou définit l'expression qui indique la taille du tableau.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la taille du tableau.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>Représente une référence à un index d'un tableau.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> avec l'objet et les index cibles spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le tableau visé par l'indexeur.</param>
      <param name="indices">Index à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>Obtient ou définit l'index ou les index de l'expression d'indexeur.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> qui indique l'index ou les index de l'expression d'indexeur.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>Obtient ou définit l'objet cible de l'indexeur de tableau.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> représentant le tableau indexé.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>Représente une instruction d'assignation simple.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAssignStatement" /> avec les expressions spécifiées.</summary>
      <param name="left">Variable à assigner.</param>
      <param name="right">Valeur à attribuer.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>Obtient ou définit l'expression représentant l'objet ou la référence faisant l'objet de l'assignation.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet ou la référence faisant l'objet de l'assignation.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>Obtient ou définit l'expression représentant l'objet ou la référence à assigner.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet ou la référence à assigner.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>Représente une instruction qui attache un délégué de gestionnaire d'événements à un événement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> avec l'événement et le délégué spécifiés.</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement auquel un gestionnaire d'événements doit être attaché.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le nouveau gestionnaire d'événements.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> avec l'objet contenant l'événement, le nom d'événement et le délégué de gestionnaire d'événements spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</param>
      <param name="eventName">Nom de l'événement auquel un gestionnaire d'événements doit être attaché.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le nouveau gestionnaire d'événements.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>Obtient ou définit l'événement auquel un délégué de gestionnaire d'événements doit être attaché.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement auquel un gestionnaire d'événements doit être attaché.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>Obtient ou définit le nouveau délégué de gestionnaire d'événements à attacher à l'événement.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le nouveau gestionnaire d'événements à attacher.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>Représente un argument utilisé dans une déclaration attribute de métadonnées.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> avec la valeur spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> représentant la valeur de l'argument.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> avec la valeur et le nom spécifiés.</summary>
      <param name="name">Nom de la propriété d'attribut à laquelle s'applique l'argument.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> représentant la valeur de l'argument.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>Obtient ou définit le nom de l'attribut.</summary>
      <returns>Nom de la propriété d'attribut à laquelle s'applique l'argument.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>Obtient ou définit la valeur de l'argument d'attribut.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la valeur de l'argument d'attribut.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeAttributeArgument" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeAttributeArgument" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à placer dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à placer dans la collection.</param>
      <returns>Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeArgument" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>Représente une déclaration attribute.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> en utilisant la référence du type de code spécifiée.</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui identifie l'attribut.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> en utilisant la référence du type de code et les arguments spécifiés.</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui identifie l'attribut.</param>
      <param name="arguments">Tableau de type <see cref="T:System.CodeDom.CodeAttributeArgument" /> qui contient les arguments pour l'attribut.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> avec le nom spécifié.</summary>
      <param name="name">Nom de l'attribut.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> avec le nom et les arguments spécifiés.</summary>
      <param name="name">Nom de l'attribut.</param>
      <param name="arguments">Tableau de type <see cref="T:System.CodeDom.CodeAttributeArgument" /> qui contient les arguments pour l'attribut.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>Obtient les arguments de l'attribut.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> qui contient les arguments pour l'attribut.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>Obtient la référence de type de code pour la déclaration d'attribut de code.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui identifie <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>Obtient ou définit le nom de l'attribut en cours de déclaration.</summary>
      <returns>Nom de l'attribut.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Ajoute un objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> possédant la valeur spécifiée à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Obtient ou définit une valeur qui indique si la collection contient l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à rechercher.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  
ou 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à placer dans la collection.</param>
      <returns>Index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à l'index spécifié.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>Représente une référence à la classe de base.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>Représente une expression consistant en une opération binaire entre deux expressions.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> à l'aide des paramètres spécifiés.</summary>
      <param name="left">
        <see cref="T:System.CodeDom.CodeExpression" /> à gauche de l'opérateur.</param>
      <param name="op">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indiquant le type de l'opérateur.</param>
      <param name="right">
        <see cref="T:System.CodeDom.CodeExpression" /> à droite de l'opérateur.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>Obtient ou définit l'expression de code située à gauche de l'opérateur.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'opérande de gauche.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>Obtient ou définit l'opérateur dans l'expression d'opérateur binaire.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> indiquant le type de l'opérateur dans l'expression.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>Obtient ou définit l'expression de code située à droite de l'opérateur.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'opérande de droite.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>Définit les identificateurs pour les opérateurs binaires pris en charge.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>Opérateur d'addition.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>Opérateur d'assignation.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>Opérateur de bits AND.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>Opérateur de bits OR.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>Opérateur booléen AND. Ceci représente un opérateur de court-circuit. Un opérateur de court-circuit évaluera uniquement le nombre d'expressions nécessaire en retournant une valeur correcte.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>Opérateur booléen OR. Ceci représente un opérateur de court-circuit. Un opérateur de court-circuit évaluera uniquement le nombre d'expressions nécessaire en retournant une valeur correcte.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>Opérateur de division.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>Opérateur supérieur à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>Opérateur supérieur ou égal à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>Opérateur d'identité égal à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>Opérateur d'identité différent de.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>Opérateur inférieur à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>Opérateur inférieur ou égal à.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>Opérateur modulo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>Opérateur de multiplication.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>Opérateur de soustraction.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>Opérateur de valeur égale à.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>Représente une expression de cast en type de données ou en interface.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" /> avec le type de destination et l'expression spécifiés.</summary>
      <param name="targetType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de destination du cast.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> devant faire l'objet d'un cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" /> avec le type de destination et l'expression spécifiés.</summary>
      <param name="targetType">Nom du type de destination du cast.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> devant faire l'objet d'un cast.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCastExpression" /> avec le type de destination et l'expression spécifiés.</summary>
      <param name="targetType">Type de données de destination du cast.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> devant faire l'objet d'un cast.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>Obtient ou définit l'expression devant faire l'objet d'un cast.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le code devant faire l'objet d'un cast.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>Obtient ou définit le type de destination du cast.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de destination du cast.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>Représente un bloc d'exception <see langword="catch" /> d'une instruction <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" /> avec le nom de variable locale spécifié pour l'exception.</summary>
      <param name="localName">Nom de la variable locale déclarée dans la clause catch pour l'exception. Cette option est facultative.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" /> avec le nom de variable locale spécifié pour l'exception et le type d'exception.</summary>
      <param name="localName">Nom de la variable locale déclarée dans la clause catch pour l'exception. Cette option est facultative.</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type d'exception à intercepter.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClause" /> avec le nom de variable locale spécifié pour l'exception, le type d'exception et la collection d'instructions.</summary>
      <param name="localName">Nom de la variable locale déclarée dans la clause catch pour l'exception. Cette option est facultative.</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type d'exception à intercepter.</param>
      <param name="statements">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> représentant le contenu du bloc catch.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>Obtient ou définit le type d'exception à gérer à l'aide du bloc catch.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type d'exception à gérer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>Obtient ou définit le nom de la variable d'exception gérée par la clause <see langword="catch" />.</summary>
      <returns>Nom de la variable d'exception gérée par la clause <see langword="catch" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>Obtient les instructions au sein du bloc catch.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions au sein du bloc catch.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeCatchClause" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeCatchClause" /> spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à placer dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à placer dans la collection.</param>
      <returns>Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeCatchClause" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCatchClause" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>Représente une entité de code pragma de checksum.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeChecksumPragma" /> à l'aide d'un nom de fichier, d'un GUID représentant l'algorithme de checksum et d'un flux d'octets représentant les données de checksum.</summary>
      <param name="fileName">Chemin d'accès au fichier de checksum.</param>
      <param name="checksumAlgorithmId">
        <see cref="T:System.Guid" /> qui identifie l'algorithme de checksum à utiliser.</param>
      <param name="checksumData">Tableau d'octets qui contient les données de checksum.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>Obtient ou définit un GUID qui identifie l'algorithme de checksum à utiliser.</summary>
      <returns>
        <see cref="T:System.Guid" /> qui identifie l'algorithme de checksum à utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>Obtient ou définit la valeur des données pour le calcul du checksum.</summary>
      <returns>Tableau d'octets qui contient les données pour le calcul du checksum.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>Obtient ou définit le chemin d'accès au fichier de checksum.</summary>
      <returns>Chemin d'accès au fichier de checksum.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>Représente un commentaire.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeComment" /> avec le texte spécifié comme contenu.</summary>
      <param name="text">Contenu du commentaire.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeComment" /> avec le texte et l'indicateur de commentaire de documentation spécifiés.</summary>
      <param name="text">Contenu du commentaire.</param>
      <param name="docComment">
        <see langword="true" /> si le commentaire est un commentaire de la documentation ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>Obtient ou définit une valeur qui indique si le commentaire est un commentaire de la documentation.</summary>
      <returns>
        <see langword="true" /> si le commentaire est un commentaire de la documentation ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>Obtient ou définit le texte du commentaire.</summary>
      <returns>Chaîne contenant le texte du commentaire.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>Représente une instruction constituée d'un seul commentaire.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" /> avec le commentaire spécifié.</summary>
      <param name="comment">
        <see cref="T:System.CodeDom.CodeComment" /> indiquant le commentaire.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" /> avec le texte spécifié comme contenu.</summary>
      <param name="text">Contenu du commentaire.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatement" /> avec le texte et l'indicateur de commentaire de documentation spécifiés.</summary>
      <param name="text">Contenu du commentaire.</param>
      <param name="docComment">
        <see langword="true" /> si le commentaire est un commentaire de la documentation ; sinon, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>Obtient ou définit le contenu du commentaire.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeComment" /> indiquant le commentaire.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeCommentStatement" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeCommentStatement" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeCommentStatement" /> spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>Copie les objets de la collection vers le <see cref="T:System.Array" /> unidimensionnel spécifié, en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à rechercher.</param>
      <returns>Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>Insère un objet <see cref="T:System.CodeDom.CodeCommentStatement" /> dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'élément doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeCommentStatement" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeCommentStatement" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>Fournit un conteneur pour un graphique de programme CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>Obtient une collection d'attributs personnalisés pour l'assembly généré.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant les attributs personnalisés pour l'assembly généré.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>Obtient la collection d'espaces de noms.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> indiquant les espaces de noms utilisés par l'unité de compilation.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>Obtient les assemblys référencés.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> contenant les noms de fichiers des assemblys référencés.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>Représente une instruction de branchement conditionnel, qui est généralement représentée par une instruction <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" /> avec la condition et les instructions spécifiées.</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression à évaluer.</param>
      <param name="trueStatements">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConditionStatement" /> avec la condition et les instructions spécifiées.</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la condition à évaluer.</param>
      <param name="trueStatements">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="true" />.</param>
      <param name="falseStatements">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à exécuter si la condition a la valeur <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>Obtient ou définit l'expression correspondant à <see langword="true" /> ou à <see langword="false" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> correspondant à <see langword="true" /> ou à <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>Obtient la collection d'instructions à exécuter si l'expression conditionnelle a la valeur <see langword="false" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions à exécuter si l'expression conditionnelle a la valeur <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>Obtient la collection d'instructions à exécuter si l'expression conditionnelle a la valeur <see langword="true" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> contenant les instructions à exécuter si l'expression conditionnelle a la valeur <see langword="true" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>Représente une déclaration d'un constructeur d'instance pour un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>Obtient la collection des arguments de constructeur de base.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant les arguments de constructeur de base.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>Obtient la collection des arguments chaînés du constructeur.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant les arguments de constructeur chaînés.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>Représente une référence à une valeur par défaut.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> en utilisant la référence du type de code spécifiée.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui spécifie la référence à un type valeur.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>Obtient ou définit la référence au type de données pour une valeur par défaut.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeTypeReference" /> représentant un type de données qui possède une valeur par défaut.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>Représente une expression qui crée un délégué.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du délégué.</param>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet contenant la méthode de gestionnaire d'événements.</param>
      <param name="methodName">Nom de la méthode de gestionnaire d'événements.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>Obtient ou définit le type de données du délégué.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données du délégué.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>Obtient ou définit le nom de la méthode de gestionnaire d'événements.</summary>
      <returns>Nom de la méthode de gestionnaire d'événements.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>Obtient ou définit l'objet qui contient la méthode de gestionnaire d'événements.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet contenant la méthode de gestionnaire d'événements.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>Représente une expression qui déclenche un événement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> avec l'objet cible spécifié.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet cible.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> avec l'objet cible et les paramètres spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet cible.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>Obtient ou définit les paramètres à passer aux méthodes de gestion d'événements attachées à l'événement.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à passer aux méthodes de gestion d'événements attachées à l'événement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>Obtient ou définit l'événement à appeler.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'événement à appeler.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>Représente une expression utilisée en tant que paramètre d'appel de méthode avec un indicateur de direction de référence.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectionExpression" /> avec la direction de champ spécifié et l'expression.</summary>
      <param name="direction">
        <see cref="T:System.CodeDom.FieldDirection" /> indiquant la direction de champ de l'expression.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression de code à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>Obtient ou définit la direction de champ pour cette expression de direction.</summary>
      <returns>
        <see cref="T:System.CodeDom.FieldDirection" /> indiquant la direction de champ de cette expression de direction.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>Obtient ou définit l'expression de code à représenter.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression à représenter.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>Sert de classe de base pour les classes des directives de code.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> avec les objets de directive de code contenus dans le tableau spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeDirective" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> avec les éléments contenus dans la collection des directives de code.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeDirective" /> à ajouter.</param>
      <returns>Position d'index à laquelle le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>Ajoute un tableau d'objets <see cref="T:System.CodeDom.CodeDirective" /> à la fin de la collection.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeDirective" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>Ajoute le contenu de l'objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenant les objets <see cref="T:System.CodeDom.CodeDirective" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>Obtient une valeur indiquant si la collection contient l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeDirective" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>Copie le contenu de la collection dans un tableau unidimensionnel en commençant à l'index spécifié.</summary>
      <param name="array">Tableau de type <see cref="T:System.CodeDom.CodeDirective" /> qui est la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion des objets d'une collection.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeDirectiveCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>Obtient l'index dans la collection de l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeDirective" /> à placer dans la collection.</param>
      <returns>Position d'index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeDirective" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Position d'index de base zéro à laquelle l'objet spécifié doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeDirective" /> à insérer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à 0.  

ou - 
<paramref name="index" /> est supérieur à <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeDirective" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Position d'index à atteindre.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeDirective" /> à la position d'index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> se trouve à l'extérieur de la plage valide de positions d'index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeDirective" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeDirective" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>Représente la méthode de point d'entrée d'un exécutable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>Représente une référence à un événement.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> avec l'objet cible et le nom d'événement spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</param>
      <param name="eventName">Nom de l'événement à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>Obtient ou définit le nom de l'événement.</summary>
      <returns>Nom de l’événement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>Obtient ou définit l'objet qui contient l'événement.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>Représente une expression de code. Pour d'autres objets expression de code, il s'agit d'une classe de base qui n'est jamais instanciée.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeExpression" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>Copie les éléments du tableau spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeExpression" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>Copie le contenu d'un autre objet <see cref="T:System.CodeDom.CodeExpressionCollection" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeExpression" /> spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeExpression" /> à placer dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeExpressionCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeExpression" /> à placer dans la collection.</param>
      <returns>Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeExpression" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeExpression" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeExpression" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de base zéro de la collection à laquelle vous souhaitez accéder.</param>
      <returns>Objet <see cref="T:System.CodeDom.CodeExpression" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeExpression" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>Représente une instruction constituée d'une expression unique.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeExpressionStatement" /> à l'aide de l'expression spécifiée.</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> pour l'instruction.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>Obtient ou définit l'expression pour l'instruction.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression pour l'instruction.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>Représente une référence à un champ.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> avec le nom de l'objet cible et le champ spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient le champ.</param>
      <param name="fieldName">Nom du champ.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>Obtient ou définit le nom du champ à référencer.</summary>
      <returns>Chaîne contenant le nom de champ.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>Obtient ou définit l'objet contenant le champ à référencer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient le champ à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>Représente une instruction <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeGotoStatement" /> en utilisant le nom d'étiquette spécifié.</summary>
      <param name="label">Nom de l'étiquette au niveau de laquelle poursuivre l'exécution du programme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>Obtient ou définit le nom de l'étiquette au niveau de laquelle poursuivre l'exécution du programme.</summary>
      <returns>Chaîne indiquant le nom de l'étiquette au niveau de laquelle poursuivre l'exécution du programme.</returns>
      <exception cref="T:System.ArgumentNullException">L’étiquette ne peut pas être définie car <paramref name="value" /> est <see langword="null" /> ou une chaîne vide.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>Représente une référence à une propriété d'indexeur d'un objet.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIndexerExpression" /> avec l'objet cible et l'index spécifiés.</summary>
      <param name="targetObject">Objet cible.</param>
      <param name="indices">Index de l'expression d'indexeur.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>Obtient la collection d'index de l'expression d'indexeur.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> qui indique l'index ou les index de l'expression d'indexeur.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>Obtient ou définit l'objet cible qui peut être indexé.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet indexeur.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>Représente une instruction <see langword="for" />, ou une boucle dans un bloc d'instructions, qui utilise une expression de test comme condition pour continuer d'exécuter la boucle.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeIterationStatement" /> à l'aide des paramètres spécifiés.</summary>
      <param name="initStatement">
        <see cref="T:System.CodeDom.CodeStatement" /> contenant l'instruction d'initialisation de la boucle.</param>
      <param name="testExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> contenant l'expression à vérifier pour la condition de sortie.</param>
      <param name="incrementStatement">
        <see cref="T:System.CodeDom.CodeStatement" /> contenant l'instruction d'incrémentation par cycle.</param>
      <param name="statements">Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> contenant les instructions à l'intérieur de la boucle.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>Obtient ou définit l'instruction appelée pour chaque cycle de boucle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> indiquant l'instruction d'incrémentation par cycle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>Obtient ou définit l'instruction d'initialisation de la boucle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> indiquant l'instruction d'initialisation de la boucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>Obtient la collection des instructions à exécuter dans la boucle.</summary>
      <returns>Tableau de type <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions à l'intérieur de la boucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>Obtient ou définit l'expression à vérifier comme condition qui continue la boucle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression à vérifier.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>Représente une instruction étiquetée ou une étiquette autonome.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> en utilisant le nom d'étiquette spécifié.</summary>
      <param name="label">Nom de l'étiquette.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> avec le nom d'étiquette et l'instruction spécifiés.</summary>
      <param name="label">Nom de l'étiquette.</param>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" /> à associer à l'étiquette.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>Obtient ou définit le nom de l'étiquette.</summary>
      <returns>Nom de l'étiquette.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>Obtient ou définit l'instruction associée facultative.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> indiquant l'instruction associée à l'étiquette.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>Représente un emplacement spécifique dans un fichier spécifique.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName">Nom du fichier associé.</param>
      <param name="lineNumber">Numéro de ligne dans laquelle stocker une référence.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>Obtient ou définit le nom du fichier associé.</summary>
      <returns>Nom du fichier associé.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>Obtient ou définit le numéro de ligne de la référence associée.</summary>
      <returns>Numéro de ligne.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>Représente une déclaration pour un événement d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>Obtient ou définit le type de données implémenté par l'événement de membre.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> indiquant les types de données implémentés par l'événement de membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>Obtient ou définit le type de données implémenté en mode privé, le cas échéant.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données implémenté en mode privé par l'événement.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>Obtient ou définit le type de données du type de délégué gérant l'événement.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de délégué gérant l'événement.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>Représente une déclaration pour un champ d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" /> avec les type et nom de champ spécifiés.</summary>
      <param name="type">Objet qui indique le type du champ.</param>
      <param name="name">Nom du champ.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" /> avec les type et nom de champ spécifiés.</summary>
      <param name="type">Type du champ.</param>
      <param name="name">Nom du champ.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberField" /> avec les type et nom de champ spécifiés.</summary>
      <param name="type">Type du champ.</param>
      <param name="name">Nom du champ.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>Obtient ou définit l'expression d'initialisation pour le champ.</summary>
      <returns>Expression d'initialisation pour le champ.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>Obtient ou définit le type du champ.</summary>
      <returns>Type du champ.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>Représente une déclaration pour une méthode d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>Obtient les types de données des interfaces implémentées par cette méthode, sauf s'il s'agit d'une implémentation de méthode privée, ce qui est indiqué par la propriété <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> indiquant les interfaces implémentées par cette méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>Obtient les déclarations de paramètre pour la méthode.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> indiquant les paramètres de la méthode.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>Obtient ou définit le type de données de l'interface pour laquelle cette méthode, s'il s'agit d'une méthode privée, implémente une méthode, le cas échéant.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de données de l'interface pour laquelle la méthode privée, dont la déclaration est représentée par <see cref="T:System.CodeDom.CodeMemberMethod" />, implémente une méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>Obtient ou définit le type de la valeur de retour de la méthode.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de la valeur retournée par la méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>Obtient les attributs personnalisés du type de retour de la méthode.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant les attributs personnalisés.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>Obtient les instructions au sein de la méthode.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> indiquant les instructions au sein de la méthode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>Obtient les paramètres de type de la méthode générique actuelle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> qui contient les paramètres de type pour la méthode générique.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>Représente une déclaration pour une propriété d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>Obtient la collection des instructions <see langword="get" /> pour la propriété.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les instructions <see langword="get" /> pour la propriété de membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>Obtient ou définit une valeur indiquant si la propriété dispose d'un accesseur de méthode <see langword="get" />.</summary>
      <returns>
        <see langword="true" /> si la propriété <see langword="Count" /> de la collection <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> n'est pas égale à zéro, ou si <see langword="true" /> a été affecté à la valeur de cette propriété ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>Obtient ou définit une valeur indiquant si la propriété dispose d'un accesseur de méthode <see langword="set" />.</summary>
      <returns>
        <see langword="true" /> si la propriété <see cref="P:System.Collections.CollectionBase.Count" /> de la collection <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> n'est pas égale à zéro ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>Obtient les types de données des interfaces implémentées par la propriété.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> indiquant les types de données implémentés par la propriété.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>Obtient la collection des expressions de déclaration pour la propriété.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> indiquant les expressions de déclaration pour la propriété.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>Obtient ou définit le type de données de l'interface que cette propriété (s'il s'agit d'une propriété privée) implémente, le cas échéant.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de données de l'interface que cette propriété (s'il s'agit d'une propriété privée) implémente, le cas échéant.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>Obtient la collection des instructions <see langword="set" /> pour la propriété.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les instructions <see langword="set" /> pour la propriété de membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>Obtient ou définit le type de données de la propriété.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de la propriété.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>Représente une expression qui appelle une méthode.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> avec l'objet cible, le nom de la méthode et les paramètres spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet cible associé à la méthode à appeler.</param>
      <param name="methodName">Nom de la méthode à appeler.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour appeler la méthode.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> avec la méthode et les paramètres spécifiés.</summary>
      <param name="method">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> indiquant la méthode à appeler.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour appeler la méthode.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>Obtient ou définit la méthode à appeler.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> indiquant la méthode à appeler.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>Obtient les paramètres à utiliser pour appeler la méthode.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> indiquant les paramètres à utiliser pour appeler la méthode.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>Représente une référence à une méthode.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> avec l'objet cible et le nom de méthode spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet à viser.</param>
      <param name="methodName">Nom de la méthode à appeler.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> à l'aide de l'objet cible, du nom de la méthode et des arguments de type générique spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet à viser.</param>
      <param name="methodName">Nom de la méthode à appeler.</param>
      <param name="typeParameters">Tableau des valeurs <see cref="T:System.CodeDom.CodeTypeReference" /> qui spécifient le <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> pour ce <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>Obtient ou définit le nom de la méthode à référencer.</summary>
      <returns>Nom de la méthode à référencer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>Obtient ou définit l'expression indiquant la méthode à référencer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> représentant la méthode à référencer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>Obtient les arguments de type pour l'expression de référence de méthode générique actuelle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui contient les arguments de type pour le code <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> actuel.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>Représente une instruction return value.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> avec l'expression spécifiée.</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la valeur de retour.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>Obtient ou définit la valeur de retour.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant la valeur de retour pour l'instruction return, ou <see langword="null" /> si l'instruction fait partie d'une sous-routine.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>Représente une déclaration d'espace de noms.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespace" /> avec le nom spécifié.</summary>
      <param name="name">Nom de l'espace de noms déclaré.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>Obtient les commentaires pour l'espace de noms.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> indiquant les commentaires pour l'espace de noms.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>Obtient la collection des directives d'importation d'espaces de noms utilisées par l'espace de noms.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> indiquant les directives d'importation d'espaces de noms utilisées par l'espace de noms.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>Obtient ou définit le nom de l'espace de noms.</summary>
      <returns>Nom de l'espace de noms.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeNamespace.Comments" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeNamespace.Imports" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>Événement qui sera déclenché lors du premier accès à la collection <see cref="P:System.CodeDom.CodeNamespace.Types" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>Obtient la collection des types contenus dans l'espace de noms.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> indiquant les types contenus dans l'espace de noms.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> qui contient le tableau d'objets <see cref="T:System.CodeDom.CodeNamespace" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeNamespace" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">Un ou plusieurs objets du tableau ont la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> qui contient les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> avec lequel initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeNamespace" /> spécifié à la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeNamespace" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeNamespace" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>Ajoute le contenu de l'objet <see cref="T:System.CodeDom.CodeNamespaceCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeNamespace" /> spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.CodeDom.CodeNamespace" /> est contenu dans la collection ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>Copie les objets de la collection dans une instance <see cref="T:System.Array" /> unidimensionnelle, en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeNamespaceCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeNamespace" /> spécifié dans la <see cref="T:System.CodeDom.CodeNamespaceCollection" />, s'il existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> à rechercher.</param>
      <returns>Index du <see cref="T:System.CodeDom.CodeNamespace" /> spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeNamespace" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel le nouvel élément doit être inséré.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeNamespaceCollection" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespace" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeNamespace" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>Représente une directive d'importation d'espace de noms indiquant l'espace de noms à utiliser.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceImport" /> avec l'espace de noms à importer spécifié.</summary>
      <param name="nameSpace">Nom de l'espace de noms à importer.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>Obtient ou définit la ligne et le fichier contenant l'instruction.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" /> indiquant le contexte de l'instruction.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>Obtient ou définit l'espace de noms à importer.</summary>
      <returns>Nom de l'espace de noms à importer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>Ajoute un objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à ajouter à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>Ajoute un ensemble d'objets <see cref="T:System.CodeDom.CodeNamespaceImport" /> à la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeNamespaceImport" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>Efface la collection des membres.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>Obtient le nombre d'espaces de noms dans la collection.</summary>
      <returns>Nombre d'espaces de noms dans la collection.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>Obtient un énumérateur qui énumère les membres de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> indiquant les membres de la collection.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>Objet <see cref="T:System.CodeDom.CodeNamespaceImport" /> à chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de <see cref="T:System.Collections.ICollection" /> dans <see cref="T:System.Array" />, à partir d'un index particulier de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de la <see cref="T:System.Collections.ICollection" />. Ce tableau doit avoir une indexation de base zéro.</param>
      <param name="index">Index de base zéro dans l'<paramref name="array" /> à partir duquel la copie commence.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>Obtient le nombre d'éléments contenus dans le <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Nombre d'éléments contenus dans <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />. Cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.  Cette propriété retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui peut itérer au sein d'une collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>Ajoute un objet à <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à ajouter à <see cref="T:System.Collections.IList" />.</param>
      <returns>Position à laquelle le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>Supprime tous les éléments de <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Détermine si <see cref="T:System.Collections.IList" /> contient une valeur spécifique.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> si la valeur existe dans la liste ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Détermine l'index d'un élément spécifique d'<see cref="T:System.Collections.IList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à rechercher dans <see cref="T:System.Collections.IList" />.</param>
      <returns>Index de <paramref name="value" /> s'il figure dans la liste ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insère un élément dans <see cref="T:System.Collections.IList" /> à l'index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel <paramref name="value" /> doit être inséré.</param>
      <param name="value">Le <see cref="T:System.Object" /> à insérer dans le <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est de taille fixe.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est de taille fixe ; sinon, <see langword="false" />.  Cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Collections.IList" /> est en lecture seule.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Collections.IList" /> est en lecture seule ; sinon, <see langword="false" />.  Cette propriété retourne toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtient ou définit l'élément au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'élément à obtenir ou à définir.</param>
      <returns>Élément au niveau de l'index spécifié.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Supprime la première occurrence d'un objet spécifique de <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> à supprimer de <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Supprime l'élément au niveau de l'index spécifié de <see cref="T:System.Collections.IList" />.</summary>
      <param name="index">Index de base zéro de l'élément à supprimer.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>Fournit une classe de base commune pour la plupart des objets CodeDOM (Code Document Object Model).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>Obtient les données définissables par l'utilisateur pour l'objet en cours.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> contenant des données utilisateur pour l'objet en cours.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>Représente une expression créant une nouvelle instance d'un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> avec le type et les paramètres spécifiés.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de l'objet à créer.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour créer l'objet.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> avec le type et les paramètres spécifiés.</summary>
      <param name="createType">Nom du type de données de l'objet à créer.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour créer l'objet.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> avec le type et les paramètres spécifiés.</summary>
      <param name="createType">Type de données de l'objet à créer.</param>
      <param name="parameters">Tableau d'objets <see cref="T:System.CodeDom.CodeExpression" /> indiquant les paramètres à utiliser pour créer l'objet.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>Obtient ou définit le type de données de l'objet à créer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> référençant le type de données de l'objet à créer.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>Obtient ou définit les paramètres à utiliser lors de la création de l'objet.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> indiquant les paramètres à utiliser lors de la création de l'objet.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>Représente une déclaration de paramètre pour une méthode, une propriété ou un constructeur.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> avec le type et le nom de paramètre spécifiés.</summary>
      <param name="type">Objet qui indique le type du paramètre à déclarer.</param>
      <param name="name">Nom du paramètre à déclarer.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> avec le type et le nom de paramètre spécifiés.</summary>
      <param name="type">Type du paramètre à déclarer.</param>
      <param name="name">Nom du paramètre à déclarer.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> avec le type et le nom de paramètre spécifiés.</summary>
      <param name="type">Type du paramètre à déclarer.</param>
      <param name="name">Nom du paramètre à déclarer.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>Obtient ou définit les attributs personnalisés de la déclaration de paramètre.</summary>
      <returns>Objet qui indique les attributs personnalisés.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>Obtient ou définit la direction du champ.</summary>
      <returns>Objet qui indique la direction du champ.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>Obtient ou définit le nom du paramètre.</summary>
      <returns>Nom du paramètre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>Obtient ou définit le type du paramètre.</summary>
      <returns>Type du paramètre.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">un ou plusieurs objets du tableau sont <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> utilisé pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié à la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Copie les éléments du tableau spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Ajoute le contenu d'une autre <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Obtient une valeur indiquant si la collection comporte le <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Obtient l'index de la collection du <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à rechercher dans la collection.</param>
      <returns>Index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Insère le <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié dans la collection, à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> dans la collection à l'index spécifié.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Supprime l’objet <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>Représente une valeur de type de données primitif.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePrimitiveExpression" /> à l'aide de l'objet spécifié.</summary>
      <param name="value">Objet à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>Obtient ou définit le type de données primitif à représenter.</summary>
      <returns>Instance de type de données primitif dont la valeur doit être représentée.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>Représente une référence à la valeur d'une propriété.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> avec l'objet cible et le nom de la propriété spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient la propriété à référencer.</param>
      <param name="propertyName">Nom de la propriété à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>Obtient ou définit le nom de la propriété à référencer.</summary>
      <returns>Nom de la propriété à référencer.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>Obtient ou définit l'objet contenant la propriété à référencer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient la propriété à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>Représente l'argument valeur d'un appel à une méthode Property Set au sein d'une méthode Property Set.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>Spécifie le nom et le mode d'une zone de code.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRegionDirective" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRegionDirective" />, en spécifiant son mode et son nom.</summary>
      <param name="regionMode">Une des valeurs de l'objet <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText">Nom de la zone.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>Obtient ou définit le mode de la directive de zone.</summary>
      <returns>Une des valeurs de l'objet <see cref="T:System.CodeDom.CodeRegionMode" />. La valeur par défaut est <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>Obtient ou définit le nom de la zone.</summary>
      <returns>Nom de la région.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>Spécifie le début ou la fin d'une zone de code.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>Fin de la zone.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>Non utilisé.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>Début de la zone.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>Représente une instruction qui supprime un gestionnaire d'événements.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> avec l'événement et le gestionnaire d'événements spécifiés.</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement duquel le gestionnaire d'événements doit être détaché.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le gestionnaire d'événements à supprimer.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> avec l'objet cible, le nom d'événement et le gestionnaire d'événements spécifiés.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'objet qui contient l'événement.</param>
      <param name="eventName">Nom de l’événement.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le gestionnaire d'événements à supprimer.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>Obtient ou définit l'événement duquel un écouteur doit être supprimé.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> indiquant l'événement duquel un écouteur doit être supprimé.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>Obtient ou définit le gestionnaire d'événements à supprimer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant le gestionnaire d'événements à supprimer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>Représente un fragment de code littéral pouvant être compilé.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value">Fragment de code littéral à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>Obtient ou définit les informations sur la ligne et le fichier concernant l'endroit où se trouve le code dans un document de code source.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" /> indiquant la position du fragment de code.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>Obtient ou définit le fragment de code littéral à représenter.</summary>
      <returns>Fragment de code littéral.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>Représente une expression littérale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetExpression" /> avec l'expression littérale spécifiée.</summary>
      <param name="value">Expression littérale à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>Obtient ou définit la chaîne de code littérale.</summary>
      <returns>Chaîne littérale.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>Représente une instruction utilisant un fragment de code littéral.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetStatement" /> avec le fragment de code spécifié.</summary>
      <param name="value">Fragment de code littéral de l'instruction à représenter.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>Obtient ou définit l'instruction de fragment de code littéral.</summary>
      <returns>Instruction de fragment de code littéral.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>Représente un membre d'un type avec un fragment de code littéral.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> avec le texte spécifié.</summary>
      <param name="text">Fragment de code littéral pour le membre type.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>Obtient ou définit le fragment de code littéral pour le membre type.</summary>
      <returns>Fragment de code littéral pour le membre type.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>Représente la classe de base <see langword="abstract" /> à partir de laquelle toutes les instructions de code dérivent.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>Obtient ou définit la ligne sur laquelle l'instruction de code se produit.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeLinePragma" /> qui indique le contexte de l'instruction de code.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>Obtient un objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient le tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les éléments de la collection source spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeStatementCollection" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeExpression" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeExpression" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeStatement" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeStatement" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>Ajoute un ensemble d'objets <see cref="T:System.CodeDom.CodeStatement" /> à la collection.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>Ajoute le contenu d'un autre objet <see cref="T:System.CodeDom.CodeStatementCollection" /> à la fin de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeStatementCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeStatement" /> spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeStatement" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>Copie les éléments de l'objet <see cref="T:System.CodeDom.CodeStatementCollection" /> dans une instance <see cref="T:System.Array" /> unidimensionnelle, en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeStatementCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeStatement" /> spécifié dans la <see cref="T:System.CodeDom.CodeStatementCollection" />, s'il existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatement" /> à rechercher dans la collection.</param>
      <returns>Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeStatement" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeStatement" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeStatement" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeStatement" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatement" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>Représente une référence à l'instance de classe locale en cours.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>Représente une instruction qui lève une exception.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> avec l'instance de type d'exception spécifiée.</summary>
      <param name="toThrow">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'exception à lever.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>Obtient ou définit l'exception à lever.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> représentant une instance de l'exception à lever.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>Représente un bloc <see langword="try" />, contenant n'importe quel nombre de clauses <see langword="catch" /> et, éventuellement, un bloc <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> avec les instructions spécifiées pour les clauses try et catch.</summary>
      <param name="tryStatements">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions à essayer.</param>
      <param name="catchClauses">Tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> indiquant les clauses à intercepter.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> avec les instructions spécifiées pour les clauses try et catch et les instructions finally.</summary>
      <param name="tryStatements">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions à essayer.</param>
      <param name="catchClauses">Tableau d'objets <see cref="T:System.CodeDom.CodeCatchClause" /> indiquant les clauses à intercepter.</param>
      <param name="finallyStatements">Tableau d'objets <see cref="T:System.CodeDom.CodeStatement" /> indiquant les instructions finally à utiliser.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>Obtient les clauses catch à utiliser.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> indiquant les clauses catch à utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>Obtient les instructions finally à utiliser.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> indiquant les instructions finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>Obtient les instructions à essayer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> indiquant les instructions à essayer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>Représente un constructeur statique d'une classe.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>Représente une déclaration de type pour une classe, une structure, une interface ou une énumération.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> avec le nom spécifié.</summary>
      <param name="name">Nom du nouveau type.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>Obtient les types de base du type.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui indique les types de base du type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>Obtient ou définit une valeur indiquant si le type est une classe ou un type référence.</summary>
      <returns>
        <see langword="true" /> si le type est une classe ou un type référence ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>Obtient ou définit une valeur indiquant si le type est une énumération.</summary>
      <returns>
        <see langword="true" /> si le type est une énumération ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>Obtient ou définit une valeur indiquant si le type est une interface.</summary>
      <returns>
        <see langword="true" /> si le type est une interface ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>Obtient ou définit une valeur indiquant si la déclaration de type est complète ou partielle.</summary>
      <returns>
        <see langword="true" /> si la déclaration de classe ou de structure est une représentation partielle de l'implémentation ; <see langword="false" /> si la déclaration est une implémentation complète de la classe ou de la structure. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>Obtient ou définit une valeur indiquant si le type est un type valeur (structure).</summary>
      <returns>
        <see langword="true" /> si le type est un type valeur ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>Obtient la collection des membres de classe pour le type représenté.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> qui indique les membres de la classe.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>Se produit lors du premier accès à la collection <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>Se produit lors du premier accès à la collection <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>Obtient ou définit les attributs du type.</summary>
      <returns>Objet <see cref="T:System.Reflection.TypeAttributes" /> qui indique les attributs du type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>Obtient les paramètres de type pour la déclaration de type.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> qui contient les paramètres de type pour la déclaration de type.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> qui contient le tableau d'objets <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> qui contient les éléments de la collection source spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié à la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Copie les éléments du tableau spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeTypeDeclaration" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Ajoute le contenu d'un autre objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> à la fin de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>Copie les éléments de l'objet <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> dans une instance <see cref="T:System.Array" /> unidimensionnelle, en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié dans la <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, s'il existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à rechercher dans la collection.</param>
      <returns>Index de l'objet spécifié, s'il existe, dans la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>Représente une déclaration delegate.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name">Nom du délégué.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>Obtient les paramètres du délégué.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> indiquant les paramètres du délégué.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>Obtient ou définit le type de retour du délégué.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de retour du délégué.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>Fournit une classe de base pour un membre d'un type. Les membres de type peuvent être des champs, des méthodes, des propriétés, des constructeurs et des types imbriqués.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>Obtient ou définit les attributs du membre.</summary>
      <returns>Combinaison d'opérations de bits des valeurs <see cref="T:System.CodeDom.MemberAttributes" /> utilisée pour indiquer les attributs du membre. La valeur par défaut <see cref="F:System.CodeDom.MemberAttributes.Private" />est  |  <see cref="F:System.CodeDom.MemberAttributes.Final" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>Obtient la collection de commentaires pour le membre de type.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> indiquant les commentaires du membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>Obtient ou définit les attributs personnalisés du membre.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant les attributs personnalisés du membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>Obtient les directives de fin pour le membre.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de fin.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>Obtient ou définit la ligne à laquelle l'instruction de membre de type apparaît.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeLinePragma" /> qui indique l'emplacement de la déclaration du membre de type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>Obtient ou définit le nom du membre.</summary>
      <returns>Nom du membre.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>Obtient les directives de début pour le membre.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeDirectiveCollection" /> qui contient des directives de début.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeMember" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> utilisé pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>Ajoute à la collection un <see cref="T:System.CodeDom.CodeTypeMember" /> possédant la valeur spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeTypeMember" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Ajoute le contenu d'une autre <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>Obtient une valeur indiquant si la collection comporte le <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet spécifié ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>Copie la collection d'objets dans une instance à une dimension <see cref="T:System.Array" /> en commençant à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le tableau de destination est multidimensionnel.  

ou - 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>Obtient l'index de la collection du <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à rechercher dans la collection.</param>
      <returns>Index de l'objet spécifié dans la collection (s'il existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>Insère le <see cref="T:System.CodeDom.CodeTypeMember" /> spécifié dans la collection, à l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'objet spécifié doit être inséré.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.CodeDom.CodeTypeMember" /> dans la collection à l'index spécifié.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeMember" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>Supprime un <see cref="T:System.CodeDom.CodeTypeMember" /> spécifique dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>Représente une expression <see langword="typeof" />, qui retourne <see cref="T:System.Type" /> pour un nom de type spécifié.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de l'expression <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> à l'aide du type spécifié.</summary>
      <param name="type">Nom du type de données de l'expression <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> à l'aide du type spécifié.</summary>
      <param name="type">Type de données de l'expression <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>Obtient ou définit le type de données référencé par l'expression <see langword="typeof" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données référencé par l'expression <see langword="typeof" />. Cette propriété ne retourne jamais <see langword="null" /> et utilise par défaut le type <see cref="T:System.Void" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>Représente un paramètre de type d'un type ou d'une méthode générique.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameter" /> avec le nom du paramètre de type spécifié.</summary>
      <param name="name">Nom du paramètre de type.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>Obtient les contraintes pour le paramètre de type.</summary>
      <returns>Objet <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui contient les contraintes pour le paramètre de type.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>Obtient les attributs personnalisés du paramètre de type.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> qui indique les attributs personnalisés du paramètre de type. La valeur par défaut est <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>Obtient ou définit une valeur qui indique si le paramètre de type possède une contrainte de constructeur.</summary>
      <returns>
        <see langword="true" /> si le paramètre de type possède une contrainte de constructeur ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>Obtient ou définit le nom du paramètre de type.</summary>
      <returns>Nom du paramètre de type. La valeur par défaut est une chaîne vide ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>Initialise une nouvelle instance vide de la classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeParameter" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> utilisé pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié à la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> à ajouter.</param>
      <returns>Index de base zéro au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié à la collection en utilisant le nom du type de données spécifié.</summary>
      <param name="value">Nom d'un type de données pour lequel ajouter l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeTypeParameter" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Copie les éléments du <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> comportant les objets <see cref="T:System.CodeDom.CodeTypeParameter" /> à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>Détermine si la collection contient l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si la collection contient l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>Copie les éléments de la collection vers le <see cref="T:System.Array" /> à une dimension spécifiée, à l'index déterminé.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> est multidimensionnel.  
ou 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à l'index le plus bas du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>Obtient l'index dans la collection de l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à placer dans la collection.</param>
      <returns>Index de base zéro de l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié dans la collection, s'il appartient à la collection ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>Insère l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> indiqué dans la collection à l'index spécifié.</summary>
      <param name="index">Index de base zéro au niveau duquel insérer l'élément.</param>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>Obtient ou définit l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à l'index spécifié dans la collection.</summary>
      <param name="index">Index de base zéro de l'objet de la collection auquel vous souhaitez accéder.</param>
      <returns>Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> au niveau de l’index spécifié.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>Supprime l'objet <see cref="T:System.CodeDom.CodeTypeParameter" /> spécifié de la collection.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.CodeTypeParameter" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>Représente une référence à un type.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du paramètre du type de code spécifié.</summary>
      <param name="typeParameter">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> qui représente le type du paramètre de type.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> avec le rang et le type de tableau spécifiés.</summary>
      <param name="arrayType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type de tableau.</param>
      <param name="rank">Nombre de dimensions dans le tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du nom du type spécifié.</summary>
      <param name="typeName">Nom du type à référencer.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du nom de type et des arguments de type spécifiés.</summary>
      <param name="typeName">Nom du type à référencer.</param>
      <param name="typeArguments">Tableau de valeurs <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du nom de type spécifié et de l'option de référence de type de code.</summary>
      <param name="typeName">Nom du type à référencer.</param>
      <param name="codeTypeReferenceOption">Option de référence de type de code, une des valeurs <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> avec le rang et le nom du type de tableau spécifiés.</summary>
      <param name="baseType">Nom du type des éléments du tableau.</param>
      <param name="rank">Nombre de dimensions du tableau.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du type spécifié.</summary>
      <param name="type">
        <see cref="T:System.Type" /> à référencer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReference" /> à l'aide du type spécifié et de la référence de type de code.</summary>
      <param name="type">
        <see cref="T:System.Type" /> à référencer.</param>
      <param name="codeTypeReferenceOption">Option de référence de type de code, une des valeurs <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>Obtient ou définit le type des éléments du tableau.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type des éléments du tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>Obtient ou définit le rang du tableau.</summary>
      <returns>Nombre de dimensions du tableau.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>Obtient ou définit le nom du type référencé.</summary>
      <returns>Nom du type référencé.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>Obtient ou définit l'option de référence de type de code.</summary>
      <returns>Combinaison d'opérations de bits des valeurs <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>Obtient les arguments de type pour la référence de type générique actuelle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> qui contient les arguments de type pour l'objet <see cref="T:System.CodeDom.CodeTypeReference" /> actuel.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenant le tableau d'objets <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.CodeTypeReference" /> à utiliser pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenant les éléments de la collection source spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> utilisé pour initialiser la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié à la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>Ajoute un <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection avec le nom du type de données spécifié.</summary>
      <param name="value">Nom d'un type de données pour lequel ajouter <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>Ajoute un <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection avec le type de données spécifié.</summary>
      <param name="value">Type de données pour lequel ajouter <see cref="T:System.CodeDom.CodeTypeReference" /> à la collection.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>Copie les éléments du tableau <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié à la fin de la collection.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.CodeTypeReference" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Ajoute le contenu du <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> spécifié à la fin de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenant les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>Obtient une valeur indiquant si la collection comporte le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à rechercher dans la collection.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.CodeDom.CodeTypeReference" /> est contenu dans la collection ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>Copie les éléments de la collection vers le <see cref="T:System.Array" /> à une dimension spécifiée, à l'index déterminé.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui représente la destination des valeurs copiées à partir de la collection.</param>
      <param name="index">Index du tableau à partir duquel commencer l'insertion.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="array" /> est multidimensionnel.  
ou 
Le nombre d'éléments dans le <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> est supérieur à l'espace disponible entre l'index du tableau cible spécifié par le paramètre <paramref name="index" /> et la fin du tableau cible.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à l'index minimal du tableau cible.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>Obtient l'index de la collection du <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié, s'il existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à rechercher dans la collection.</param>
      <returns>Index du <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié dans la collection (s'il en existe) ; sinon, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>Insère un <see cref="T:System.CodeDom.CodeTypeReference" /> dans la collection au niveau de l'index spécifié.</summary>
      <param name="index">Index de base zéro dans lequel l'élément doit être inséré.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.CodeDom.CodeTypeReference" /> dans la collection à l'index spécifié.</summary>
      <param name="index">Index de la collection à laquelle accéder.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est en dehors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>Enlève le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié de la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> à supprimer de la collection.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>Représente une référence à un type de données.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> à l'aide du type spécifié.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données à référencer.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> avec le nom de type de données spécifié.</summary>
      <param name="type">Nom du type de données à référencer.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> avec le type de données spécifié.</summary>
      <param name="type">Obtient ou définit le type de données à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>Obtient ou définit le type de données à référencer.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>Spécifie comment la référence de type de code doit être résolue.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>Résolvez le type à partir du paramètre de type.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>Résolvez le type à partir de l'espace de noms racine.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>Représente une déclaration de variable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type et le nom spécifiés.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de la variable.</param>
      <param name="name">Nom de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type de données, le nom de variable et l'expression d'initialisation spécifiés.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de la variable.</param>
      <param name="name">Nom de la variable.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le nom du type de données et le nom de variable spécifiés.</summary>
      <param name="type">Nom du type de données de la variable.</param>
      <param name="name">Nom de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type de données, le nom de variable et l'expression d'initialisation spécifiés.</summary>
      <param name="type">Nom du type de données de la variable.</param>
      <param name="name">Nom de la variable.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le nom du type de données et le nom de variable spécifiés.</summary>
      <param name="type">Type de données de la variable.</param>
      <param name="name">Nom de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> avec le type de données, le nom de variable et l'expression d'initialisation spécifiés.</summary>
      <param name="type">Type de données de la variable.</param>
      <param name="name">Nom de la variable.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>Obtient ou définit l'expression d'initialisation pour la variable.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression d'initialisation pour la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>Obtient ou définit le nom de la variable.</summary>
      <returns>Nom de la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>Obtient ou définit le type de données de la variable.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indiquant le type de données de la variable.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>Représente une référence à une variable locale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> avec le nom de variable locale spécifié.</summary>
      <param name="variableName">Nom de la variable locale à référencer.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>Obtient ou définit le nom de la variable locale à référencer.</summary>
      <returns>Nom de la variable locale à référencer.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>Fournit un exemple d'implémentation de l'interface <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>Obtient les arguments de commande à passer au compilateur à partir du <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> spécifié.</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les options du compilateur.</param>
      <returns>Arguments de commande.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>Obtient le nom de l'exécutable du compilateur.</summary>
      <returns>Nom de l'exécutable du compilateur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>Obtient l'extension du nom de fichier à utiliser pour les fichiers sources.</summary>
      <returns>Extension du nom de fichier à utiliser pour les fichiers sources.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compile le fichier spécifié à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="e">Objet <see cref="T:System.CodeDom.CodeCompileUnit" /> qui indique la source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compile les unités de compilation spécifiées à l'aide des options spécifiées et retourne le résultat de la compilation.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="ea">Tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant la source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="ea" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compile le fichier spécifié à l'aide des options spécifiées et retourne le résultat de la compilation.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileName">Nom du fichier à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> est <see langword="null" />.  

ou - 
<paramref name="fileName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compile les fichiers spécifiés à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileNames">Tableau de chaînes indiquant les noms des fichiers à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> est <see langword="null" />.  

ou - 
<paramref name="fileNames" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compile les chaînes de code source spécifiées à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="source">Chaînes de code source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compile les chaînes de code source spécifiées à l'aide des options spécifiées et retourne les résultats de la compilation.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="sources">Tableau de chaînes contenant le code source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> a la valeur <see langword="null" />.  

ou - 
<paramref name="sources" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Obtient les arguments de commande à utiliser lors de l'appel au compilateur pour générer un fichier réponse.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="cmdArgs">Chaîne d'arguments de commande.</param>
      <returns>Arguments de commande à utiliser pour générer un fichier réponse ou <see langword="null" /> s'il n'y a pas d'arguments de fichier réponse.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>Joint les tableaux de chaînes spécifiés.</summary>
      <param name="sa">Tableau de chaînes à joindre.</param>
      <param name="separator">Séparateur à utiliser.</param>
      <returns>Chaînes concaténées.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Traite la ligne spécifiée des <see cref="T:System.CodeDom.Compiler.CompilerResults" /> spécifiés.</summary>
      <param name="results">
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</param>
      <param name="line">Ligne à traiter.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="e">Un <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant la source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="ea">Tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant la source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileName">Nom du fichier à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="fileNames">Tableau de chaînes indiquant les noms des fichiers à compiler.</param>
      <returns>Résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="source">Chaîne qui indique le code source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Pour obtenir une description de ce membre, consultez <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> qui indique les options du compilateur.</param>
      <param name="sources">Tableau de chaînes qui indique le code source à compiler.</param>
      <returns>Résultats de la compilation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>Fournit une classe de base pour les implémentations de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Cette classe est abstraite.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compile un assembly basé sur les arborescences <see cref="N:System.CodeDom" /> contenues dans le tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="compilationUnits">Tableau de type <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant le code à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compile un assembly à partir du code source contenu dans les fichiers spécifiés, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="fileNames">Tableau des noms des fichiers à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compile un assembly à partir du tableau de chaînes spécifié contenant le code source, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres du compilateur pour cette compilation.</param>
      <param name="sources">Tableau de chaînes de code source à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>En cas de substitution dans une classe dérivée, crée un nouveau compilateur de code.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> pouvant être utilisé pour la compilation de représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns>Identificateur avec séquence d'échappement pour la valeur.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>En cas de substitution dans une classe dérivée, crée un nouveau générateur de code.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> pouvant être utilisé pour générer des représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>En cas de substitution dans une classe dérivée, crée un nouveau générateur de code à l'aide du <see cref="T:System.IO.TextWriter" /> spécifié pour la sortie.</summary>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour effectuer la sortie.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> pouvant être utilisé pour générer des représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>En cas de substitution dans une classe dérivée, crée un nouveau générateur de code à l'aide du nom de fichier spécifié pour la sortie.</summary>
      <param name="fileName">Nom du fichier vers lequel effectuer la sortie.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> pouvant être utilisé pour générer des représentations du code source basées sur <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>En cas de substitution dans une classe dérivée, crée un nouvel analyseur de code.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> pouvant être utilisé pour analyser le code source. L'implémentation de base retourne toujours <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>Crée une instance de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour le langage spécifié.</summary>
      <param name="language">Nom du langage.</param>
      <returns>Fournisseur CodeDOM  qui est implémentée pour le nom du langage spécifié.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Le <paramref name="language" /> n'a pas de fournisseur configuré sur cet ordinateur.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Obtient une instance <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour le langage et les options de fournisseur spécifiés.</summary>
      <param name="language">Nom du langage.</param>
      <param name="providerOptions">Collection d'options de fournisseur issue du fichier de configuration.</param>
      <returns>Fournisseur CodeDOM implémenté pour le nom de langage et les options spécifiés.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur valide doit être généré.</param>
      <returns>Identificateur valide pour la valeur spécifiée.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>Définit l'extension du nom de fichier par défaut à utiliser pour les fichiers de code source dans le langage actuel.</summary>
      <returns>Extension du nom de fichier correspondant à l'extension des fichiers sources du langage actuel. L'implémentation de base retourne toujours <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l'unité de compilation CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="compileUnit">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> pour lequel du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l'expression CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="expression">Objet <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour la déclaration de membre CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="member">Objet <see cref="T:System.CodeDom.CodeTypeMember" /> indiquant le membre pour lequel du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException">Cette méthode n'est pas substituée dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l'espace de noms CodeDOM (Code Document Object Model) spécifié et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="codeNamespace">Objet <see cref="T:System.CodeDom.CodeNamespace" /> indiquant l'espace de noms pour lequel du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l'instruction CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" /> qui contient les éléments CodeDOM pour lesquels du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour la déclaration de type CodeDOM (Code Document Object Model) spécifiée et l'envoie au writer de texte spécifié, à l'aide des options définies.</summary>
      <param name="codeType">Objet <see cref="T:System.CodeDom.CodeTypeDeclaration" /> indiquant le type pour lequel du code doit être généré.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> auquel le code de sortie est envoyé.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>Retourne le fournisseur de langages et les paramètres de configuration de compilateur pour cet ordinateur.</summary>
      <returns>Tableau de type <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> qui représente les paramètres de toutes les implémentations de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurées.</returns>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>Retourne le fournisseur de langages et les paramètres de configuration de compilateur pour le langage spécifié.</summary>
      <param name="language">Nom de langage.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> rempli avec les paramètres de l'implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurée.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">Le <paramref name="language" /> n'a pas de fournisseur configuré sur cet ordinateur.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>Obtient <see cref="T:System.ComponentModel.TypeConverter" /> pour le type de données spécifié.</summary>
      <param name="type">Type d'objet pour lequel un convertisseur de type doit être récupéré.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> pour le type spécifié, ou <see langword="null" /> si aucun <see cref="T:System.ComponentModel.TypeConverter" /> n'est trouvé pour le type spécifié.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>Retourne un nom de langage associé à l'extension de nom de fichier spécifiée, comme configuré dans la section de configuration de compilateur <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension">Extension de nom de fichier.</param>
      <returns>Nom de langage associé à l'extension de nom de fichier, comme configuré dans les paramètres de configuration de compilateur <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">Le <paramref name="extension" /> n'a pas de fournisseur de langages configuré sur cet ordinateur.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtient le type indiqué par le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type à retourner.</param>
      <returns>Représentation textuelle du type spécifié, mise en forme pour le langage dans lequel du code est généré par ce générateur de code. En Visual Basic, par exemple, passer <see cref="T:System.CodeDom.CodeTypeReference" /> pour le type <see cref="T:System.Int32" /> retourne "Integer".</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>Vérifie si une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurée sur l'ordinateur est associée à une extension de nom de fichier.</summary>
      <param name="extension">Extension de nom de fichier.</param>
      <returns>
        <see langword="true" /> si une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> est configurée pour l'extension de nom de fichier spécifiée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>Vérifie si un langage dispose d'une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurée sur l'ordinateur.</summary>
      <param name="language">Nom du langage.</param>
      <returns>
        <see langword="true" /> si une implémentation de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> est configurée pour le langage spécifié ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant n'a pas l'autorisation requise.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>Retourne une valeur indiquant si la valeur spécifiée est un identificateur valide pour le langage actuel.</summary>
      <param name="value">Valeur à vérifier comme identificateur valide.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="value" /> est un identificateur valide ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>Obtient un identificateur de fonctionnalités de langage.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> qui indique les fonctionnalités spéciales d'un langage.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>Compile le code lu à partir du flux de texte spécifié dans <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Objet <see cref="T:System.IO.TextReader" /> utilisé pour lire le code à analyser.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" /> contenant une représentation du code analysé.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Retourne une valeur indiquant si la prise en charge de la génération de code spécifiée est fournie.</summary>
      <param name="generatorSupport">Objet <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> indiquant le type de prise en charge de la génération de code à vérifier.</param>
      <returns>
        <see langword="true" /> si la prise en charge de la génération de code spécifiée est fournie ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">Ni cette méthode ni la méthode <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> ne sont substituées dans une classe dérivée.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>Fournit un exemple d'implémentation de l'interface <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Cette classe est abstraite.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>Génère un caractère de continuation de ligne et renvoie la chaîne spécifiée sur une nouvelle ligne.</summary>
      <param name="st">Chaîne à écrire dans la nouvelle ligne.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns>Identificateur avec séquence d'échappement pour la valeur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur valide doit être créé.</param>
      <returns>Identificateur valide pour la valeur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>Obtient la déclaration du type de code pour la classe en cours.</summary>
      <returns>Déclaration du type de code pour la classe en cours.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>Obtient le membre actuel de la classe.</summary>
      <returns>Membre actuel de la classe.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>Obtient le nom du membre actuel.</summary>
      <returns>Nom du membre actuel.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>Obtient le nom de la classe actuelle.</summary>
      <returns>Nom de la classe actuelle.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>Génère du code pour l'expression de référence de l'argument spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>Génère du code pour l'expression de création du tableau spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>Génère du code pour l'expression de l'indexeur du tableau spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>Génère du code pour l'instruction d'assignation spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAssignStatement" /> qui indique l'instruction pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>Génère du code pour l'instruction Attach event spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> qui indique l'instruction pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Génère du code pour la fin du bloc d'attributs spécifiée.</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant la fin du bloc d'attributs pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Génère du code pour le début du bloc d'attributs spécifié.</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> indiquant le début du bloc d'attributs pour lequel du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>Génère du code pour l'expression de référence de base spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>Génère du code pour l'expression de l'opérateur binaire spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>Génère du code pour l'expression de cast spécifiée.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCastExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour le membre de classe spécifié en utilisant les options spécifiées du TextWriter et du générateur de code.</summary>
      <param name="member">Membre de classe pour lequel générer le code.</param>
      <param name="writer">Le TextWriter vers lequel le code est exporté.</param>
      <param name="options">Options à utiliser lors de la génération du code.</param>
      <exception cref="T:System.InvalidOperationException">La propriété <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> n’est pas <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>Génère du code pour le commentaire spécifié.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeComment" /> pour lequel du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>Génère du code pour l'instruction Comment spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
      <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> de <paramref name="e" /> n’est pas définie.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Génère du code pour les instructions Comment spécifiées.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Génère du code pour l'unité de compilation spécifiée.</summary>
      <param name="e">Unité de compilation pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>Génère du code pour la fin de l'unité de compilation.</summary>
      <param name="e">Unité de compilation pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>Génère du code pour le début de l'unité de compilation.</summary>
      <param name="e">Unité de compilation pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>Génère du code pour l'instruction conditionnelle spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>Génère du code pour le constructeur spécifié.</summary>
      <param name="e">Constructeur pour lequel générer le code.</param>
      <param name="c">Type de l'objet construit par ce constructeur.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>Génère du code pour la valeur décimale spécifiée.</summary>
      <param name="d">Valeur décimale pour laquelle du code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>Génère du code pour la référence spécifiée à une valeur par défaut.</summary>
      <param name="e">Référence pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>Génère du code pour l'expression de création du délégué spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>Génère du code pour l'expression d'appel de délégué spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>Génère du code pour l'expression de direction spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>Génère du code pour les directives de code spécifiées.</summary>
      <param name="directives">Directives de code pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>Génère du code pour le nombre à virgule flottante double précision.</summary>
      <param name="d">Valeur pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Génère du code pour la méthode de point d'entrée spécifiée.</summary>
      <param name="e">Point d'entrée pour le code.</param>
      <param name="c">Code qui déclare le type.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>Génère du code pour l'événement spécifié.</summary>
      <param name="e">Événement membre pour lequel générer le code.</param>
      <param name="c">Type de l'objet sur lequel cet événement se produit.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>Génère du code pour l'expression de référence de l'événement spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>Génère du code pour l'expression de code spécifiée.</summary>
      <param name="e">Expression de code pour laquelle générer le code.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> n’est pas un <see cref="T:System.CodeDom.CodeStatement" /> valide.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>Génère du code pour l'instruction d'expression spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>Génère du code pour le champ de membre spécifié.</summary>
      <param name="e">Champ pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>Génère du code pour l'expression de référence du champ spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>Génère du code pour l'instruction <see langword="goto" /> spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>Génère du code pour l'expression de l'indexeur spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>Génère du code pour l'instruction d'itération spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>Génère du code pour l'instruction étiquetée spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>Génère du code pour la fin du pragma de ligne spécifiée.</summary>
      <param name="e">Fin du pragma de ligne pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>Génère du code pour le début du pragma de ligne spécifié.</summary>
      <param name="e">Début du pragma de ligne pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Génère du code pour la méthode spécifiée.</summary>
      <param name="e">Méthode membre pour laquelle générer le code.</param>
      <param name="c">Type de l'objet sur lequel cette méthode se produit.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>Génère du code pour l'expression d'appel de méthode spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>Génère du code pour l'expression de référence de méthode spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>Génère du code pour l'instruction return de méthode spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>Génère du code pour l'espace de noms spécifié.</summary>
      <param name="e">Espace de noms pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>Génère du code pour la fin d'un espace de noms.</summary>
      <param name="e">Espace de noms pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>Génère du code pour l'importation de l'espace de noms spécifiée.</summary>
      <param name="e">Importation d'espace de noms pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>Génère du code pour l'importation de l'espace de noms spécifiée.</summary>
      <param name="e">Importation d'espace de noms pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>Génère du code pour les espaces de noms dans l'unité de compilation spécifiée.</summary>
      <param name="e">Unité de compilation pour laquelle générer les espaces de noms.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>Génère du code pour le début d'un espace de noms.</summary>
      <param name="e">Espace de noms pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>Génère du code pour l'expression de création de l'objet spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Génère du code pour l'expression de déclaration de paramètre spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>Génère du code pour l'expression primitive spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> utilise un type de données non valide. Seuls les types de données suivants sont valides : 

string 
char 
byte 
Int16 
Int32 
Int64 
Single 
Double 
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>Génère du code pour la propriété spécifiée.</summary>
      <param name="e">Propriété pour laquelle générer le code.</param>
      <param name="c">Type de l'objet sur lequel cette propriété se produit.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>Génère du code pour l'expression de référence de la propriété spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>Génère du code pour l'expression de référence de la valeur affectée à la propriété spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>Génère du code pour l'instruction Remove event spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>Génère du code pour le nombre à virgule flottante simple précision.</summary>
      <param name="s">Valeur pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>Renvoie le code de l'unité de compilation du fragment de code littéral spécifié.</summary>
      <param name="e">Unité de compilation de fragment de code littéral pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>Renvoie le code de l'expression du fragment de code littéral spécifié.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>Renvoie le code du membre de classe du fragment de code littéral spécifié.</summary>
      <param name="e">Membre pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>Renvoie le code de l'instruction du fragment de code littéral spécifié.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>Génère du code pour l'instruction spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> n’est pas un <see cref="T:System.CodeDom.CodeStatement" /> valide.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>Génère du code pour la collection d'instructions spécifiée.</summary>
      <param name="stms">Instructions pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>Génère du code pour l'expression de référence This spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>Génère du code pour l'instruction de levée d'exception spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>Génère du code pour l'instruction <see langword="try...catch...finally" /> spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>Génère du code pour le constructeur de classe spécifié.</summary>
      <param name="e">Constructeur de classe pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>Génère du code pour la fin spécifiée de la classe.</summary>
      <param name="e">Fin de la classe pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>Génère du code pour le type spécifié de l'expression.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>Génère du code pour l'expression de référence du type spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>Génère du code pour l'espace de noms spécifié et les classes qu'il contient.</summary>
      <param name="e">Espace de noms pour lequel générer des classes.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>Génère du code pour le début spécifié de la classe.</summary>
      <param name="e">Début de la classe pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>Génère du code pour l'instruction de déclaration de variable spécifiée.</summary>
      <param name="e">Instruction pour laquelle générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>Génère du code pour l'expression de référence de la variable spécifiée.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtient le nom du type de données spécifié.</summary>
      <param name="value">Type dont le nom sera retourné.</param>
      <returns>Nom de la référence du type de données.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>Obtient ou définit le nombre d'espaces de mise en retrait de chaque niveau.</summary>
      <returns>Nombre d'espaces de mise en retrait de chaque niveau.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>Obtient une valeur indiquant si l'objet actuellement généré est une classe.</summary>
      <returns>
        <see langword="true" /> si l'objet en cours est une classe ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>Obtient une valeur indiquant si l'objet actuellement généré est un délégué.</summary>
      <returns>
        <see langword="true" /> si l'objet en cours est un délégué ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>Obtient une valeur indiquant si l'objet actuellement généré est une énumération.</summary>
      <returns>
        <see langword="true" /> si l'objet en cours est une énumération ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>Obtient une valeur indiquant si l'objet actuellement généré est une interface.</summary>
      <returns>
        <see langword="true" /> si l'objet en cours est une interface ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>Obtient une valeur indiquant si l'objet actuellement généré est un type valeur ou un struct.</summary>
      <returns>
        <see langword="true" /> si l'objet en cours est un type valeur ou un struct ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>Obtient une valeur indiquant si la valeur spécifiée est un identificateur valide.</summary>
      <param name="value">Valeur dont les conflits avec des identificateurs valides doivent être testés.</param>
      <returns>
        <see langword="true" /> si la valeur est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>Obtient une valeur indiquant si la chaîne spécifiée est un identificateur valide.</summary>
      <param name="value">Chaîne dont la validité doit être testée.</param>
      <returns>
        <see langword="true" /> si la chaîne spécifiée est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>Obtient le jeton qui représente <see langword="null" />.</summary>
      <returns>Jeton qui représente <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>Obtient les options que le générateur de code doit utiliser.</summary>
      <returns>Objet indiquant les options que le générateur de code doit utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>Obtient le TextWriter à utiliser pour la sortie.</summary>
      <returns>TextWriter à utiliser pour la sortie.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>Renvoie un argument dans un bloc d'attributs.</summary>
      <param name="arg">Argument d'attribut pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Génère du code pour la collection de déclarations attribute spécifiée.</summary>
      <param name="attributes">Attributs pour lesquels générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>Génère du code pour le <see cref="T:System.CodeDom.FieldDirection" /> spécifié.</summary>
      <param name="dir">Une des valeurs d'énumération indiquant l'attribut du champ.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>Génère du code pour la liste d'expressions spécifiée.</summary>
      <param name="expressions">Expressions pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>Génère du code pour la liste d'expressions spécifiée.</summary>
      <param name="expressions">Expressions pour lesquelles générer le code.</param>
      <param name="newlineBetweenItems">
        <see langword="true" /> pour insérer une nouvelle ligne après chaque élément ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Renvoie un modificateur de portée du champ qui correspond aux attributs spécifiés.</summary>
      <param name="attributes">Une des valeurs d'énumération qui spécifie les attributs.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>Renvoie l'identificateur spécifié.</summary>
      <param name="ident">Identificateur à renvoyer.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>Génère du code pour le modificateur d'accès au membre spécifié.</summary>
      <param name="attributes">Une des valeurs d'énumération qui indique le modificateur d'accès au membre pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Génère du code pour le modificateur de portée de membres spécifié.</summary>
      <param name="attributes">Une des valeurs d'énumération qui indique le modificateur de portée du membre pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>Génère du code pour l'opérateur spécifié.</summary>
      <param name="op">Opérateur pour lequel générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Génère du code pour les paramètres spécifiés.</summary>
      <param name="parameters">Expressions de déclaration de paramètre pour lesquelles générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>Génère du code pour le type spécifié.</summary>
      <param name="typeRef">Type pour lequel le code doit être généré.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>Génère du code pour les attributs de type spécifiés.</summary>
      <param name="attributes">Une des valeurs d'énumération qui indique les attributs de type pour lesquels générer le code.</param>
      <param name="isStruct">
        <see langword="true" /> si le type est un struct ; sinon, <see langword="false" />.</param>
      <param name="isEnum">
        <see langword="true" /> si le type est un enum ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Génère du code pour la paire nom/type de l'objet spécifiée.</summary>
      <param name="typeRef">Type.</param>
      <param name="name">Nom de l'objet.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>Convertit la chaîne spécifiée en la mettant en forme avec les codes d'échappement.</summary>
      <param name="value">Chaîne à convertir.</param>
      <returns>Chaîne convertie.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtient une valeur indiquant si la prise en charge de la génération de code spécifiée est fournie.</summary>
      <param name="support">Type de prise en charge de génération du code à tester.</param>
      <returns>
        <see langword="true" /> si la prise en charge de la génération de code spécifiée est fournie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns>Identificateur avec séquence d'échappement pour la valeur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur valide doit être généré.</param>
      <returns>Identificateur valide pour la valeur spécifiée.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’unité de compilation CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">Unité de compilation CodeDOM pour laquelle générer le code.</param>
      <param name="w">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’expression CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié.</summary>
      <param name="e">L’expression pour laquelle le code est généré.</param>
      <param name="w">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’espace de noms CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">Espace de noms pour lequel le code doit être généré.</param>
      <param name="w">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’instruction CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">Instruction qui contient les éléments CodeDOM à traduire.</param>
      <param name="w">TextWriter vers lequel exporter le code.</param>
      <param name="o">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour la déclaration de type CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">Type pour lequel le code doit être généré.</param>
      <param name="w">Le TextWriter vers lequel le code est exporté.</param>
      <param name="o">Les options à utiliser pour générer le code.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> n’est pas disponible. <paramref name="w" /> peut avoir été fermé avant que l’appel de la méthode n’ait été effectué.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtient le type indiqué par le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="type">Type à retourner.</param>
      <returns>Nom de la référence du type de données.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>Obtient une valeur indiquant si la valeur spécifiée est un identificateur valide pour le langage actuel.</summary>
      <param name="value">Valeur à tester.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="value" /> est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtient une valeur indiquant si le générateur prend en charge les fonctionnalités de langage représentées par l'objet <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> spécifié.</summary>
      <param name="support">Fonctionnalités à tester pour le générateur.</param>
      <returns>
        <see langword="true" /> si les fonctionnalités spécifiées sont prises en charge ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>Lève une exception si la valeur spécifiée n'est pas un identificateur valide.</summary>
      <param name="value">Identificateur à valider.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>Lève une exception si la chaîne spécifiée n'est pas un identificateur valide.</summary>
      <param name="value">Identificateur dont la validité en tant qu'identificateur doit être testée.</param>
      <exception cref="T:System.ArgumentException">Si l'identificateur spécifié n'est pas valide ou s'il est en conflit avec les mots clés réservés ou les mots clés du langage.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>Tente de valider chaque champ d'identificateur dans l'arborescence <see cref="T:System.CodeDom.CodeObject" /> ou <see cref="N:System.CodeDom" /> spécifiée.</summary>
      <param name="e">Objet à tester pour rechercher les identificateurs non valides.</param>
      <exception cref="T:System.ArgumentException">Le <see cref="T:System.CodeDom.CodeObject" /> spécifié contient un identificateur non valide.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>Représente un ensemble d'options utilisées par un générateur de code.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>Obtient ou définit une valeur indiquant s'il faut insérer des lignes vides entre les membres.</summary>
      <returns>
        <see langword="true" /> si les lignes vides doivent être insérées ; sinon, <see langword="false" />. Par défaut, la valeur de cette propriété est <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>Obtient ou définit le style à utiliser pour les accolades.</summary>
      <returns>Chaîne contenant le style d'accolade à utiliser.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>Obtient ou définit une valeur indiquant s'il faut ajouter un bloc <see langword="else" />, <see langword="catch" /> ou <see langword="finally" />, y compris les parenthèses, au niveau de la ligne fermante de chaque bloc <see langword="if" /> ou <see langword="try" /> précédent.</summary>
      <returns>
        <see langword="true" /> si un Else doit être ajouté ; sinon, <see langword="false" />. La valeur par défaut de cette propriété est <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>Obtient ou définit la chaîne à utiliser pour les mises en retrait.</summary>
      <returns>Chaîne contenant les caractères à utiliser pour les mises en retrait.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>Obtient ou définit l'objet à l'index spécifié.</summary>
      <param name="index">Nom associé à l'objet à récupérer.</param>
      <returns>Objet associé au nom spécifié. Si la collection ne contient aucun objet associé au nom spécifié, <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>Obtient ou définit une valeur qui indique s'il faut générer des membres dans l'ordre dans lequel ils se produisent dans les collections de membres.</summary>
      <returns>
        <see langword="true" /> pour générer les membres dans l'ordre dans lequel ils se produisent dans la collection de membres ; sinon, <see langword="false" />. La valeur par défaut de cette propriété est <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>Fournit une implémentation vide de l'interface <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>Compile le flux de texte spécifié en <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" /> utilisé pour lire le code à analyser.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" /> contenant le modèle de code généré par l'analyse de code.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>Représente une erreur ou un avertissement du compilateur.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerError" /> avec le nom de fichier, la ligne, la colonne, le numéro d'erreur et le texte d'erreur spécifiés.</summary>
      <param name="fileName">Nom du fichier que le compilateur était en train de compiler lorsqu'une erreur s'est produite.</param>
      <param name="line">Ligne de la source de l'erreur.</param>
      <param name="column">Colonne de la source de l'erreur.</param>
      <param name="errorNumber">Numéro de l'erreur.</param>
      <param name="errorText">Texte du message d'erreur.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>Obtient ou définit le numéro de la colonne où l'erreur s'est produite.</summary>
      <returns>Numéro de colonne du fichier source où le compilateur a détecté l'erreur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>Obtient ou définit le numéro de l'erreur.</summary>
      <returns>Numéro de l'erreur en tant que chaîne.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>Obtient ou définit le texte du message d'erreur.</summary>
      <returns>Texte du message d'erreur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>Obtient ou définit le nom du fichier source qui contient le code ayant provoqué l'erreur.</summary>
      <returns>Nom du fichier source qui contient le code ayant provoqué l'erreur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>Obtient ou définit une valeur indiquant si l'erreur est un avertissement.</summary>
      <returns>
        <see langword="true" /> si l'erreur est un avertissement ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>Obtient ou définit le numéro de la ligne où l'erreur s'est produite.</summary>
      <returns>Numéro de ligne du fichier source où le compilateur a détecté l'erreur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>Fournit une implémentation de la méthode <see cref="M:System.Object.ToString" /> de l'objet.</summary>
      <returns>Représentation sous forme de chaîne de l'erreur du compilateur.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>Représente une collection d'objets <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>Initialise une nouvelle instance de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui contient le tableau spécifié d'objets <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
      <param name="value">Tableau d'objets <see cref="T:System.CodeDom.Compiler.CompilerError" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui comprend le contenu de la <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> spécifiée.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> à utiliser pour initialiser la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>Ajoute l'objet <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié à la collection d'erreurs.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.Compiler.CompilerError" /> à ajouter.</param>
      <returns>Index au niveau duquel le nouvel élément a été inséré.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>Copie les éléments d'un tableau à la fin de la collection d'erreurs.</summary>
      <param name="value">Tableau de type <see cref="T:System.CodeDom.Compiler.CompilerError" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Ajoute le contenu de la collection d'erreurs du compilateur spécifiée à la fin de celle-ci.</summary>
      <param name="value">Objet <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui contient les objets à ajouter à la collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>Obtient une valeur qui indique si la collection contient l'<see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifiée.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à rechercher.</param>
      <returns>
        <see langword="true" /> si <see cref="T:System.CodeDom.Compiler.CompilerError" /> est contenu dans la collection ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>Copie les valeurs de la collection vers une instance de <see cref="T:System.Array" /> à une dimension, à l'index spécifié.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui correspond à la destination des valeurs copiées à partir de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index">Index du tableau à partir duquel commencer la copie.</param>
      <exception cref="T:System.ArgumentException">Le tableau indiqué par le paramètre <paramref name="array" /> est multidimensionnel.  

ou - 
Le nombre d'éléments dans <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> est supérieur à la quantité d'espace disponible entre la valeur d'index du paramètre <paramref name="arrayIndex" /> dans le tableau indiqué par le paramètre <paramref name="array" /> et la fin du tableau indiquée par le paramètre <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="index" /> est inférieur à la limite inférieure du tableau indiquée par le paramètre <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>Obtient une valeur indiquant si la collection contient des erreurs.</summary>
      <returns>
        <see langword="true" /> si la collection contient des erreurs ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>Obtient une valeur indiquant si la collection contient des avertissements.</summary>
      <returns>
        <see langword="true" /> si la collection contient des avertissements ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>Obtient l'index de l'objet <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié dans la collection, s'il existe dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à rechercher.</param>
      <returns>Index du <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié dans le <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, s'il existe ; sinon -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>Insère le <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifié dans la collection, à l'index spécifié.</summary>
      <param name="index">Index de base zéro où l'erreur du compilateur doit être insérée.</param>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à insérer.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>Obtient ou définit le <see cref="T:System.CodeDom.Compiler.CompilerError" /> à l'index spécifié.</summary>
      <param name="index">Index de base zéro de l'entrée à rechercher dans la collection.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> pour chaque index valide.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur d'index indiquée par le paramètre <paramref name="index" /> est hors de la plage valide des index pour la collection.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>Supprime un <see cref="T:System.CodeDom.Compiler.CompilerError" /> spécifique dans la collection.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> à supprimer de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException">L'objet spécifié est introuvable dans la collection.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>Représente les paramètres de configuration d'un fournisseur de langages. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>Obtient le type de l'implémentation configurée de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <returns>Instance de <see cref="T:System.Type" /> en lecture seule qui représente le type de fournisseur de langages configuré.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">Le fournisseur de langages n'est pas configuré sur cet ordinateur.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Impossible de localiser le type car il est <see langword="null" /> ou c'est une chaîne vide.  

ou - 
Impossible de localiser le type car le nom de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> est introuvable dans le fichier de configuration.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>Obtient les paramètres de compilateur configurés pour l'implémentation du fournisseur de langages.</summary>
      <returns>Instance de <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> en lecture seule qui contient les options du compilateur et les paramètres configurés pour le fournisseur de langages.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>Retourne une instance de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour les paramètres du fournisseur de langages actuels.</summary>
      <returns>Fournisseur CodeDOM associé à la configuration du fournisseur de langage.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Retourne une instance de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> pour les paramètres du fournisseur de langage actuel et les options spécifiées.</summary>
      <param name="providerOptions">Collection d'options de fournisseur issue du fichier de configuration.</param>
      <returns>Fournisseur CodeDOM associé à la configuration du fournisseur de langage et aux options spécifiées.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> est <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Le fournisseur ne prend pas en charge d'options.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié représente le même fournisseur de langages et les mêmes paramètres de compilateur que l'instance actuelle de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />.</summary>
      <param name="o">Objet à comparer au <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> en cours.</param>
      <returns>
        <see langword="true" /> si <paramref name="o" /> est un objet <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> et possède la même valeur que cette instance ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>Retourne les extensions de nom de fichier prises en charge par le fournisseur de langages.</summary>
      <returns>Tableau d'extensions de nom de fichier prises en charge par le fournisseur de langages.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage d'entier signé 32 bits pour l'instance actuelle de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, utilisable dans des algorithmes de hachage et des structures de données, telles qu'une table de hachage.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>Obtient les noms de langages pris en charge par le fournisseur de langages.</summary>
      <returns>Tableau de noms de langages pris en charge par le fournisseur de langages.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>Retourne une valeur qui indique si l'implémentation du fournisseur de langages est configurée sur l'ordinateur.</summary>
      <returns>
        <see langword="true" /> si le type d'implémentation du fournisseur de langages est configuré sur l'ordinateur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>Représente les paramètres utilisés pour appeler un compilateur.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> avec les noms d'assemblys spécifiés.</summary>
      <param name="assemblyNames">Noms des assemblys à référencer.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> avec les noms d'assemblys et le nom du fichier de sortie spécifiés.</summary>
      <param name="assemblyNames">Noms des assemblys à référencer.</param>
      <param name="outputName">Nom du fichier de sortie.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> avec les noms d'assemblys spécifiés, le nom de sortie spécifié et une valeur indiquant s'il faut inclure les informations de débogage.</summary>
      <param name="assemblyNames">Noms des assemblys à référencer.</param>
      <param name="outputName">Nom du fichier de sortie.</param>
      <param name="includeDebugInformation">
        <see langword="true" /> pour inclure des informations de débogage ; <see langword="false" /> pour exclure les informations de débogage.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>Obtient ou définit les arguments de ligne de commande facultatifs à utiliser lorsque le compilateur est appelé.</summary>
      <returns>Arguments de la ligne de commande supplémentaires pour le compilateur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>Obtient ou définit le nom de l'assembly principal ou standard qui contient des types de base tels que <see cref="T:System.Object" />, <see cref="T:System.String" /> ou <see cref="T:System.Int32" />.</summary>
      <returns>Nom de l'assembly principal qui contient des types de base.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>Obtient les fichiers de ressources .NET Framework à inclure lors de la compilation de la sortie d'assembly.</summary>
      <returns>Collection qui contient les chemins d'accès des ressources .NET Framework à inclure dans l'assembly généré.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>Obtient ou définit une valeur indiquant si un exécutable doit être généré.</summary>
      <returns>
        <see langword="true" /> si un exécutable doit être généré ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>Obtient ou définit une valeur indiquant si le résultat doit être généré dans la mémoire.</summary>
      <returns>
        <see langword="true" /> si le compilateur doit générer le résultat dans la mémoire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>Obtient ou définit une valeur indiquant si les informations de débogage doivent être incluses dans l'exécutable compilé.</summary>
      <returns>
        <see langword="true" /> si les informations de débogage doivent être générées ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>Obtient les fichiers de ressources .NET Framework qui sont référencés dans la source actuelle.</summary>
      <returns>Collection qui contient les chemins d'accès des ressources .NET Framework qui sont référencées par la source.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>Obtient ou définit le nom de la classe principale.</summary>
      <returns>Nom de la classe principale.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>Obtient ou définit le nom de l'assembly de sortie.</summary>
      <returns>Nom de l'assembly de sortie.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>Obtient les assemblys référencés par le projet actuel.</summary>
      <returns>Collection qui contient les noms d'assembly qui sont référencés par la source à compiler.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>Obtient ou définit la collection qui contient les fichiers temporaires.</summary>
      <returns>Collection qui contient les fichiers temporaires.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>Obtient ou définit une valeur indiquant s'il faut traiter les avertissements comme des erreurs.</summary>
      <returns>
        <see langword="true" /> si les avertissements doivent être traités comme des erreurs ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>Obtient ou définit le jeton utilisateur à employer à la création du processus de compilation.</summary>
      <returns>Jeton utilisateur à employer.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>Obtient ou définit le niveau d'avertissement auquel le compilateur abandonne la compilation.</summary>
      <returns>Niveau d'avertissement auquel le compilateur abandonne la compilation.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>Obtient ou définit le nom d'un fichier de ressources Win32 à lier à l'assembly compilé.</summary>
      <returns>Fichier de ressources Win32 à lier à l'assembly compilé.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>Représente les résultats de la compilation qui sont retournés par un compilateur.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.CompilerResults" /> qui utilise les fichiers temporaires spécifiés.</summary>
      <param name="tempFiles">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>Obtient ou définit l'assembly compilé.</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> qui indique l'assembly compilé.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>Obtient la collection des erreurs et avertissements générés par le compilateur.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> qui indique les erreurs et avertissements éventuels résultant de la compilation.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>Obtient ou définit la valeur de retour du compilateur.</summary>
      <returns>Valeur de retour du compilateur.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>Obtient les messages de résultats de la compilation.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> qui contient les messages de sortie.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>Obtient ou définit le chemin d'accès de l'assembly compilé.</summary>
      <returns>Chemin d'accès de l'assembly, ou <see langword="null" /> si l'assembly a été généré en mémoire.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>Obtient ou définit la collection de fichiers temporaires à utiliser.</summary>
      <returns>Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>Fournit les fonctions d'exécution de commande pour appeler les compilateurs. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>Exécute la commande en utilisant les fichiers temporaires spécifiés et attend le retour de l’appel.</summary>
      <param name="cmd">La commande à exécuter.</param>
      <param name="tempFiles">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Exécute la commande spécifiée à l'aide du jeton utilisateur et des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="userToken">Jeton de démarrage du processus du compilateur.</param>
      <param name="cmd">La commande à exécuter.</param>
      <param name="tempFiles">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns>Valeur de retour du compilateur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Exécute la commande spécifiée à l'aide du jeton utilisateur, du répertoire en cours et des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="userToken">Jeton de démarrage du processus du compilateur.</param>
      <param name="cmd">La commande à exécuter.</param>
      <param name="currentDir">Répertoire dans lequel le processus doit être commencé.</param>
      <param name="tempFiles">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns>Valeur de retour du compilateur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Exécute la commande spécifiée à l'aide des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="cmd">La commande à exécuter.</param>
      <param name="tempFiles">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns>Valeur de retour du compilateur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Exécute la commande spécifiée à l'aide du répertoire en cours et des fichiers temporaires définis puis attend le retour de l'appel, en enregistrant les résultats et les erreurs de la compilation dans les chaînes spécifiées.</summary>
      <param name="cmd">La commande à exécuter.</param>
      <param name="currentDir">Le répertoire actif.</param>
      <param name="tempFiles">Une <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> permettant de gérer et stocker les références aux fichiers intermédiaires générés pendant la compilation.</param>
      <param name="outputName">Référence à une chaîne qui stockera le message de sortie du compilateur.</param>
      <param name="errorName">Référence à une chaîne qui stockera le nom des erreurs rencontrées.</param>
      <returns>Valeur de retour du compilateur.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>Définit les identificateurs utilisés pour déterminer si un générateur de code prend en charge certains types d'éléments de code.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>Indique que le générateur prend en charge les tableaux de tableaux.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>Indique que le générateur prend en charge les attributs d'assembly.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>Indique que le générateur prend en charge les arguments chaînés du constructeur.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>Indique que le générateur prend en charge les expressions complexes.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>Indique que le générateur prend en charge les déclarations delegate.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>Indique que le générateur prend en charge les déclarations enumeration.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>Indique que le générateur prend en charge les déclarations event.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>Indique que le générateur prend en charge la déclaration des propriétés d'indexeur.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>Indique que le générateur prend en charge les déclarations interface.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>Indique que le générateur prend en charge les déclarations de type valeur.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>Indique que le générateur prend en charge une désignation de méthode de point d'entrée de programme, en vue de la génération d'exécutables.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>Indique que le générateur prend en charge les déclarations de type générique.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>Indique que le générateur prend en charge les références de type générique.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>Indique que le générateur prend en charge les instructions Goto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>Indique que le générateur prend en charge le référencement des tableaux multidimensionnels. Actuellement, CodeDom ne peut pas servir à instancier les tableaux multidimensionnels.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>Indique que le générateur prend en charge la déclaration des membres implémentant plusieurs interfaces.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>Indique que le générateur prend en charge la déclaration des types imbriqués.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>Indique que le générateur prend en charge les attributs de paramètre.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>Indique que le générateur prend en charge les déclarations de type partiel.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>Indique que le générateur prend en charge les membres statiques publics.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>Indique que le générateur prend en charge les paramètres de référence et les paramètres out.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>Indique que le générateur prend en charge la compilation à l'aide de ressources .NET Framework. Il peut s'agir de ressources par défaut compilées directement dans un assembly ou de ressources référencées dans un assembly satellite.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>Indique que le générateur prend en charge les déclarations attribute de types de retour.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>Indique que le générateur prend en charge les constructeurs statiques.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>Indique que le générateur prend en charge les instructions <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>Indique que le générateur prend en charge la compilation à l'aide de ressources Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>Définit une interface pour appeler la compilation de code source ou une arborescence CodeDom à l'aide d'un compilateur spécifique.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compile un assembly à partir de l'arborescence <see cref="N:System.CodeDom" /> contenue dans le <see cref="T:System.CodeDom.CodeCompileUnit" /> spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="compilationUnit">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant le code à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compile un assembly basé sur les arborescences <see cref="N:System.CodeDom" /> contenues dans le tableau d'objets <see cref="T:System.CodeDom.CodeCompileUnit" /> spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="compilationUnits">Tableau de type <see cref="T:System.CodeDom.CodeCompileUnit" /> indiquant le code à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compile un assembly à partir du code source contenu dans le fichier spécifié, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="fileName">Nom du fichier contenant le code source à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compile un assembly à partir du code source contenu dans les fichiers spécifiés, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="fileNames">noms de fichiers des fichiers à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compile un assembly à partir de la chaîne spécifiée contenant le code source, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="source">Code source à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compile un assembly à partir du tableau de chaînes spécifié contenant le code source, à l'aide des paramètres du compilateur spécifiés.</summary>
      <param name="options">Objet <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> indiquant les paramètres de la compilation.</param>
      <param name="sources">Chaînes de code source à compiler.</param>
      <returns>Objet <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indiquant les résultats de la compilation.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>Définit une interface pour générer du code.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Crée un identificateur avec séquence d'échappement pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur avec séquence d'échappement doit être créé.</param>
      <returns>Identificateur avec séquence d'échappement pour la valeur.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Crée un identificateur valide pour la valeur spécifiée.</summary>
      <param name="value">Chaîne pour laquelle un identificateur valide doit être généré.</param>
      <returns>Identificateur valide pour la valeur spécifiée.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’unité de compilation CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> pour lequel du code doit être généré.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’expression CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" /> indiquant l'expression pour laquelle du code doit être généré.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’espace de noms CodeDOM (Code Document Object Model) spécifié et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" /> indiquant l'espace de noms pour lequel du code doit être généré.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour l’instruction CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeStatement" /> contenant les éléments CodeDOM à traduire.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Génère du code pour la déclaration de type CodeDOM (Code Document Object Model) spécifiée et l’exporte vers le TextWriter spécifié à l’aide des options spécifiées.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> qui indique le type pour lequel du code doit être généré.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> vers lequel exporter le code.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> qui indique les options à utiliser pour générer le code.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtient le type indiqué par le <see cref="T:System.CodeDom.CodeTypeReference" /> spécifié.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> qui indique le type à retourner.</param>
      <returns>Représentation textuelle du type spécifié pour le langage dans lequel du code est généré par ce générateur de code. Par exemple, en Visual Basic, le passage du type System.Int32 retourne "Integer".</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>Obtient une valeur indiquant si la valeur spécifiée est un identificateur valide pour le langage actuel.</summary>
      <param name="value">Valeur dont la validité en tant qu'identificateur doit être testée.</param>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="value" /> est un identificateur valide ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtient une valeur indiquant si le générateur prend en charge les fonctionnalités de langage représentées par l'objet <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> spécifié.</summary>
      <param name="supports">Fonctionnalités à tester pour le générateur.</param>
      <returns>
        <see langword="true" /> si les fonctionnalités spécifiées sont prises en charge ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>Lève une exception si la valeur spécifiée n'est pas un identificateur valide.</summary>
      <param name="value">Identificateur à valider.</param>
      <exception cref="T:System.ArgumentException">L'identificateur n'est pas valide.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>Définit une interface pour analyser du code dans <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>Lors d'une d'implémentation dans une classe dérivée, compile le flux de texte spécifié dans <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" /> qui peut être utilisé pour lire le code à compiler.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" /> contenant une représentation du code analysé.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>Définit les identificateurs qui indiquent les fonctionnalités spéciales d'un langage.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>Le langage ne respecte pas la casse.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>Le langage possède des caractéristiques par défaut.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>Représente une collection de fichiers temporaires.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> avec le répertoire temporaire spécifié, défini de façon à supprimer par défaut les fichiers temporaires après leur génération et leur utilisation.</summary>
      <param name="tempDir">Chemin d'accès du répertoire temporaire destiné à recevoir les fichiers temporaires.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> avec le répertoire temporaire spécifié et la valeur spécifiée indiquant si les fichiers temporaires doivent être conservés ou supprimés par défaut après leur génération et leur utilisation.</summary>
      <param name="tempDir">Chemin d'accès du répertoire temporaire destiné à recevoir les fichiers temporaires.</param>
      <param name="keepFiles">
        <see langword="true" /> si les fichiers temporaires doivent être conservés après utilisation ; <see langword="false" /> s'ils doivent être supprimés.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>Ajoute à la collection un nom de fichier doté de l'extension de nom de fichier spécifiée.</summary>
      <param name="fileExtension">Extension assignée au nom de fichier temporaire généré automatiquement qui doit être ajouté à la collection.</param>
      <returns>Nom de fichier doté de l'extension spécifiée qui a été ajouté à la collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>Ajoute à la collection un nom de fichier doté de l'extension de nom de fichier spécifiée, en utilisant la valeur spécifiée qui indique si le fichier doit être supprimé ou conservé.</summary>
      <param name="fileExtension">Extension assignée au nom de fichier temporaire généré automatiquement qui doit être ajouté à la collection.</param>
      <param name="keepFile">
        <see langword="true" /> si le fichier doit être conservé après utilisation ; <see langword="false" /> s'il doit être supprimé.</param>
      <returns>Nom de fichier doté de l'extension spécifiée qui a été ajouté à la collection.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> est <see langword="null" /> ou est une chaîne vide.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>Ajoute le fichier spécifié à la collection, en utilisant la valeur spécifiée qui indique si le fichier doit être supprimé ou conservé lorsque la collection est supprimée ou que la méthode <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> est appelée.</summary>
      <param name="fileName">Nom du fichier à ajouter à la collection.</param>
      <param name="keepFile">
        <see langword="true" /> si le fichier doit être conservé après utilisation ; <see langword="false" /> s'il doit être supprimé.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> est <see langword="null" /> ou est une chaîne vide.  
ou 
 <paramref name="fileName" /> est un doublon.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>Obtient le chemin d'accès complet du nom de fichier de base, sans extension de fichier, dans le chemin d'accès du répertoire temporaire, utilisé pour générer les noms de fichiers temporaires pour la collection.</summary>
      <returns>Chemin d'accès complet du nom de fichier de base, sans extension de fichier, dans le chemin d'accès du répertoire temporaire, utilisé pour générer les noms de fichiers temporaires pour la collection.</returns>
      <exception cref="T:System.Security.SecurityException">Si la valeur de la propriété <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> est <see langword="null" /> ou si elle n'a pas été définie, et que <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> n'est pas accordé au répertoire temporaire spécifié par la propriété <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copie les membres de la collection dans la chaîne spécifiée, en commençant à l'index indiqué.</summary>
      <param name="fileNames">Tableau de chaînes dans lequel la copie doit être effectuée.</param>
      <param name="start">Index du tableau auquel la copie commence.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>Obtient le nombre de fichiers contenus dans la collection.</summary>
      <returns>Nombre de fichiers de la collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>Supprime de cette collection les fichiers temporaires qui ont été marqués pour être supprimés.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>Tente de supprimer les fichiers temporaires avant que cet objet ne soit récupéré par un garbage collection.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>Obtient un énumérateur pouvant énumérer les membres de la collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui contient les membres de la collection.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>Obtient ou définit une valeur indiquant si les fichiers doivent être conservés, par défaut, lors de l'appel à la méthode <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> ou de la suppression de la collection.</summary>
      <returns>
        <see langword="true" /> si les fichiers doivent être conservés ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copie les éléments de la collection dans un tableau, en commençant à l'index spécifié du tableau cible.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensionnel qui constitue la destination des éléments copiés à partir de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> doit avoir une indexation de base zéro.</param>
      <param name="start">Index de base zéro dans un tableau au niveau duquel commencer la copie.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>Obtient le nombre d’éléments contenus dans la collection.</summary>
      <returns>Nombre d'éléments contenus dans <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtient une valeur indiquant si l’accès à la collection est synchronisé (thread-safe).</summary>
      <returns>
        <see langword="true" /> si l'accès à <see cref="T:System.Collections.ICollection" /> est synchronisé (thread-safe) ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtient un objet qui peut être utilisé pour synchroniser l’accès à la collection.</summary>
      <returns>Objet qui peut être utilisé pour synchroniser l'accès à <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein de la collection.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>Exécute les tâches définies par l'application associées à la libération ou à la redéfinition des ressources non managées.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>Obtient le répertoire temporaire dans lequel les fichiers temporaires doivent être stockés.</summary>
      <returns>Répertoire temporaire dans lequel les fichiers doivent être stockés.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>Définit les identificateurs utilisés pour indiquer la direction des déclarations de paramètres et d'arguments.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>Champ d'entrée.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>Champ de sortie.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>Champ par référence.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>Définit les identificateurs des attributs de membre pour les membres de classe.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>Membre abstract.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>Masque d'accès.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>Membre qui est accessible à n'importe quelle classe dans le même assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>Membre de constante.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>Membre qui est accessible dans la famille de sa classe et des classes dérivées.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>Membre qui est accessible dans sa classe et dans les classes dérivées du même assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>Membre qui est accessible dans sa classe, ses classes dérivées dans n'importe quel assembly et n'importe quelle classe dans le même assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>Membre qui ne peut pas être substitué dans une classe dérivée.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>Membre new.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>Membre surchargé. Dans certains langages, tels que Visual Basic, les membres surchargés doivent être explicitement indiqués.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>Membre qui substitue un membre de la classe de base.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>Membre private.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>Membre public.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>Masque de portée.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>Membre statique. En Visual Basic, ce membre est l'équivalent du mot clé <see langword="Shared" />.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>Masque VTable.</summary>
    </member>
  </members>
</doc>
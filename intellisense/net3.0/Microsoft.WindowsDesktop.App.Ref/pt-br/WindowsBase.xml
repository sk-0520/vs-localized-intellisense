<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>Fornece uma implementação <see cref="T:System.Windows.WeakEventManager" /> para que seja possível usar o padrão “ouvinte de eventos fraco” para anexar ouvintes ao evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>Adiciona o manipulador de eventos especificado, que é chamado quando a origem especificada gera o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Adiciona o ouvinte especificado ao evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> da fonte especificada.</summary>
      <param name="source">O objeto com o evento.</param>
      <param name="listener">O objeto a ser adicionado como um ouvinte.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary>Retorna um novo objeto para conter ouvintes do evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <returns>Um novo objeto para conter ouvintes do evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>Remove o manipulador de eventos especificado da fonte especificada.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>Remove o ouvinte especificado do evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> da fonte especificada.</summary>
      <param name="source">O objeto com o evento.</param>
      <param name="listener">O ouvinte a ser removido.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>Começa a escutar o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> na origem especificada.</summary>
      <param name="source">O objeto com o evento.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>Para de escutar o evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> na origem especificada.</summary>
      <param name="source">O objeto com o evento.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>Fornece uma implementação <see cref="T:System.Windows.WeakEventManager" /> para que seja possível usar o padrão “ouvinte de eventos fraco” para anexar ouvintes ao evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>Adiciona o manipulador de eventos especificado, que é chamado quando a origem especificada gera o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <param name="handler">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adiciona o ouvinte especificado ao evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> da fonte especificada.</summary>
      <param name="source">O objeto com o evento.</param>
      <param name="listener">O objeto a ser adicionado como um ouvinte.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary>Retorna um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</summary>
      <returns>Um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>Remove o manipulador de eventos especificado da fonte especificada.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Remove o ouvinte especificado do evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> da fonte especificada.</summary>
      <param name="source">O objeto com o evento.</param>
      <param name="listener">O ouvinte a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>Começa a escutar o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> na origem especificada.</summary>
      <param name="source">O objeto com o evento.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>Para de escutar o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> na origem especificada.</summary>
      <param name="source">O objeto com o evento.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>Fornece informações para o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CurrentChangingEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> com o valor <paramref name="isCancelable" /> especificado.</summary>
      <param name="isCancelable">Um valor que indica se o evento é cancelável.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>Obtém ou define um valor que indica se o evento deve ser cancelado.</summary>
      <returns>
        <see langword="true" />Se o evento for cancelado; caso contrário <see langword="false" />,. O valor padrão é <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Se o valor de <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> for <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>Obtém um valor que indica se o evento é cancelável.</summary>
      <returns>
        <see langword="true" />Se o evento for cancelável, caso <see langword="false" />contrário,. O valor padrão é <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>Representa o método que manipula o evento <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" />.</summary>
      <param name="sender">O objeto que gerencie o evento.</param>
      <param name="e">Informações sobre o evento.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>Fornece uma implementação <see cref="T:System.Windows.WeakEventManager" /> para que seja possível usar o padrão “ouvinte de eventos fraco” para anexar ouvintes ao evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>Adiciona o manipulador de eventos especificado, que é chamado quando a origem especificada gera o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Adiciona o ouvinte especificado ao evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> da fonte especificada.</summary>
      <param name="source">O objeto com o evento.</param>
      <param name="listener">O objeto a ser adicionado como um ouvinte.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary>Retorna um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</summary>
      <returns>Um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>Remove o manipulador de eventos especificado da fonte especificada.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>Remove o ouvinte especificado do evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> da fonte especificada.</summary>
      <param name="source">O objeto com o evento.</param>
      <param name="listener">O ouvinte a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>Começa a escutar o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> na origem especificada.</summary>
      <param name="source">O objeto com o evento.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>Para de escutar o evento <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> na origem especificada.</summary>
      <param name="source">O objeto com o evento.</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>Fornece uma extensão do <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa as características das propriedades adicionais de uma propriedade de dependência.</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Permite que outros objetos sejam notificados quando essa propriedade muda.</summary>
      <param name="component">O componente ao qual adicionar o manipulador.</param>
      <param name="handler">O delegado a ser adicionado como um ouvinte.</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>Obtém a coleção de atributos para este membro.</summary>
      <returns>A <see cref="T:System.ComponentModel.AttributeCollection" /> coleção de atributos.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>Retorna se a redefinição de um objeto altera ou não o valor dele.</summary>
      <param name="component">O componente a ser testado quanto à capacidade de redefinição.</param>
      <returns>
        <see langword="true" /> se a redefinição do componente altera seu valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>Obtém o nome da categoria à qual o membro pertence, conforme especificado no <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>O nome da categoria à qual o membro pertence. Se não houver <see cref="T:System.ComponentModel.CategoryAttribute" />, o nome da categoria será definido como a categoria padrão, <see langword="Misc" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>Obtém o tipo do componente ao qual essa propriedade está vinculada.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual esta propriedade está associada. Quando <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> ou<see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> são invocados, o objeto especificado pode ser uma instância desse tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>Obtém o conversor de tipo dessa propriedade.</summary>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> que é usado para converter o <see cref="T:System.Type" /> dessa propriedade.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>Retorna o identificador de propriedade de dependência.</summary>
      <returns>O identificador da propriedade de dependência.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>Obtém a descrição do membro, conforme especificado no <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>A descrição do membro. Se não houver <see cref="T:System.ComponentModel.DescriptionAttribute" />, o valor da propriedade será definido como o padrão, que é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>Obtém ou define um retorno de chamada que designers usam para modificar o valor efetivo de uma propriedade de dependência, antes do valor da propriedade de dependência ser armazenado no mecanismo de propriedade de dependência.</summary>
      <returns>Um retorno de chamada que os designers usam para modificar o valor efetivo de uma propriedade de dependência antes que o valor da propriedade de dependência seja armazenado no mecanismo de propriedade de dependência.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>Obtém a informação de se este membro deve ser definido apenas em tempo de design, conforme especificado no <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>
        <see langword="true" />Se esse membro deve ser definido somente no momento do design; <see langword="false" /> se o membro puder ser definido durante o tempo de execução. Se não houver <see cref="T:System.ComponentModel.DesignOnlyAttribute" />, o valor de retorno será o padrão, que é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>Obtém o nome que pode ser exibido em uma janela, tal como uma janela Propriedades.</summary>
      <returns>O nome a ser exibido para a propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>Compara duas instâncias de <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> quanto à igualdade.</summary>
      <param name="obj">O <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> de comparação com a instância atual.</param>
      <returns>
        <see langword="true" /> se os valores forem equivalentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>Retorna um <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para um nome de propriedade fornecido.</summary>
      <param name="name">O nome registrado de uma propriedade de dependência ou uma propriedade anexada.</param>
      <param name="ownerType">O <see cref="T:System.Type" /> do objeto proprietário da definição de propriedade.</param>
      <param name="targetType">O <see cref="T:System.Type" /> do objeto para o qual você deseja definir a propriedade.</param>
      <returns>O <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> solicitado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>Retorna um <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para um nome de propriedade fornecido.</summary>
      <param name="name">O nome registrado de uma propriedade de dependência ou uma propriedade anexada.</param>
      <param name="ownerType">O <see cref="T:System.Type" /> do objeto proprietário da definição de propriedade.</param>
      <param name="targetType">O <see cref="T:System.Type" /> do objeto para o qual você deseja definir a propriedade.</param>
      <param name="ignorePropertyType">Especifica para ignorar o tipo de propriedade.</param>
      <returns>O <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> solicitado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>Retorna um <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para um <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido.</summary>
      <param name="property">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser verificado.</param>
      <returns>Se a propriedade descrita por <paramref name="property" /> é uma propriedade de dependência, retorna um <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> válido. Caso contrário, retorna um <see langword="null" /><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>Retorna um <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para uma propriedade de dependência e tipo de destino fornecidos.</summary>
      <param name="dependencyProperty">O identificador de uma propriedade de dependência.</param>
      <param name="targetType">O tipo do objeto em que a propriedade está definida.</param>
      <returns>Um <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> para a propriedade de dependência fornecida.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Retorna um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="instance">Um componente cujas propriedades serão obtidas.</param>
      <param name="filter">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados para o componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>Obtém um editor do tipo especificado.</summary>
      <param name="editorBaseType">O tipo base do editor, que é usado para diferenciar entre os vários editores que dão suporte a uma propriedade.</param>
      <returns>Uma instância do tipo de editor solicitado ou <see langword="null" /> se um editor não puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>Retorna o código hash para este <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>Retorna o valor atual da propriedade em um componente.</summary>
      <param name="component">A instância do componente.</param>
      <returns>O valor solicitado.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>Obtém um valor que indica se a propriedade está registrada como uma propriedade anexada e está sendo usada por meio de um uso anexado.</summary>
      <returns>
        <see langword="true" />se a propriedade for uma propriedade anexada; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>Obtém um valor que indica o valor de <see cref="T:System.ComponentModel.BrowsableAttribute" /> na propriedade.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.ComponentModel.BrowsableAttribute" /> foi especificado na propriedade; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>Obtém um valor que indica se esta propriedade deve ser localizada, conforme especificado no <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>
        <see langword="true" />Se o membro estiver marcado com o <see cref="T:System.ComponentModel.LocalizableAttribute" /> Construtor do valor true; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>Obtém um valor que indica essa propriedade é somente leitura.</summary>
      <returns>
        <see langword="true" />se a propriedade for somente leitura; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>Obtém os metadados associados à propriedade de dependência.</summary>
      <returns>Os metadados da propriedade de dependência.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>Obtém o <see cref="T:System.Type" /> representado da propriedade de dependência.</summary>
      <returns>O <see cref="T:System.Type" /> da propriedade de dependência.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Permite que outros objetos sejam notificados quando essa propriedade muda.</summary>
      <param name="component">O componente ao qual adicionar o manipulador.</param>
      <param name="handler">O delegado a ser adicionado como um ouvinte.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>Redefine o valor dessa propriedade do componente para o valor padrão.</summary>
      <param name="component">O componente com o valor da propriedade que deve ser redefinido para o valor padrão.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Define o valor do componente para um valor diferente.</summary>
      <param name="component">O componente com o valor da propriedade que deve ser definida.</param>
      <param name="value">O novo valor.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Indica se o valor dessa propriedade deve ser persistido por processos de serialização.</summary>
      <param name="component">O componente com a propriedade a ser examinada quanto à persistência.</param>
      <returns>
        <see langword="true" /> se a propriedade deve ser persistida, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>Indica se as notificações de alteração de valor para essa propriedade podem se originar fora do descritor de propriedade, tal como do componente em si ou se as notificações só serão provenientes de chamadas diretas feitas <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />.</summary>
      <returns>
        <see langword="true" />Se as notificações para essa propriedade puderem ser originadas fora do descritor de propriedade, como no próprio componente. <see langword="false" />Se as notificações só serão originadas de chamadas diretas <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />feitas para o.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>Converte o valor dessa instância na representação da cadeia de caracteres equivalente.</summary>
      <returns>Retorna o valor de <see cref="P:System.ComponentModel.MemberDescriptor.Name" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary>Fornece uma implementação <see cref="T:System.Windows.WeakEventManager" /> para que seja possível usar o padrão de ouvinte de eventos fraco para anexar ouvintes ao evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>Adiciona o manipulador de eventos especificado, que é chamado quando a origem especificada gera o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
      <param name="source">O objeto de origem que aciona o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary>Retorna um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
      <returns>Um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>Remove o manipulador de eventos especificado da fonte especificada.</summary>
      <param name="source">O objeto de origem que aciona o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary>Começa a escutar o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> na origem especificada.</summary>
      <param name="source">O objeto de origem que aciona o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary>Para de escutar o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> na origem especificada.</summary>
      <param name="source">O objeto de origem que aciona o evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>Fornece uma classe base abstrata para tipos que descrevem como dividir os itens em uma coleção em grupos.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.GroupDescription" />.</summary>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary>Obtém ou define um comparador personalizado que classifica os grupos usando um objeto que implementa <see cref="T:System.Collections.IComparer" />.</summary>
      <returns>Um comparador personalizado que classifica os grupos usando um <see cref="T:System.Collections.IComparer" />objeto que implementa.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>Retorna os nomes de grupo para o item fornecido.</summary>
      <param name="item">O item para o qual retornar nomes de grupo.</param>
      <param name="level">O nível de agrupamento.</param>
      <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> para fornecer ao conversor.</param>
      <returns>Os nomes de grupo para o item fornecido.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>Obtém a coleção de nomes que são usados para inicializar um grupo com um conjunto de subgrupos com os nomes fornecidos.</summary>
      <returns>A coleção de nomes que são usados para inicializar um grupo com um conjunto de subgrupos com os nomes especificados.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>Retorna um valor que indica se o nome do grupo e o nome do item correspondem de modo que o item pertença ao grupo.</summary>
      <param name="groupName">O nome do grupo a verificar.</param>
      <param name="itemName">O nome do item a verificar.</param>
      <returns>
        <see langword="true" /> se o nome corresponder e o item pertencer ao grupo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" />.</summary>
      <param name="e">Argumentos do evento que está sendo criado.</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>Indica se os processos de serialização devem serializar o valor efetivo da propriedade <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> em instâncias dessa classe.</summary>
      <returns>
        <see langword="true" /> se o valor da propriedade <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> precisar ser serializado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary>Indica se os processos de serialização devem serializar o valor efetivo da propriedade <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> em instâncias dessa classe.</summary>
      <returns>
        <see langword="true" /> se o valor da propriedade <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> precisar ser serializado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary>Obtém a coleção de critérios de classificação para classificar os grupos.</summary>
      <returns>A coleção de critérios de classificação na qual classificar os grupos.</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>Habilita funcionalidades de gerenciamento de registro atual, de classificação personalizada, de filtragem e de agrupamento para as coleções.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>Obtém um valor que indica se esta exibição é compatível com filtragem por meio da propriedade <see cref="P:System.ComponentModel.ICollectionView.Filter" />.</summary>
      <returns>
        <see langword="true" />Se esta exibição dá suporte à filtragem; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>Obtém um valor que indica se esta exibição é compatível com agrupamento por meio da propriedade <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" />.</summary>
      <returns>
        <see langword="true" />Se esta exibição oferece suporte a agrupamento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>Obtém um valor que indica se esta exibição é compatível com a classificação por meio da propriedade <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" />.</summary>
      <returns>
        <see langword="true" />Se esta exibição oferece suporte à classificação; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>Retorna um valor que indica se um determinado item pertence a essa exibição de coleção.</summary>
      <param name="item">O objeto a ser verificado.</param>
      <returns>
        <see langword="true" /> se o item pertencer à esta exibição de coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>Obtém ou define as informações culturais para todas as operações da exibição que podem ser diferentes por cultura, como classificação.</summary>
      <returns>A cultura a ser usada durante a classificação.</returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>Ao implementar essa interface, gere este evento após o item atual ter sido alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>Ao implementar esta interface, gere este evento antes de alterar o item atual. O manipulador de eventos pode cancelar este evento.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>Obtém o item atual na exibição.</summary>
      <returns>O item atual da exibição ou <see langword="null" /> se não houver nenhum item atual.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>Obtém a posição ordinal do <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> na exibição.</summary>
      <returns>A posição ordinal do <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> na exibição.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>Insere um ciclo de atraso que pode ser usado para mesclar as alterações na exibição e atrasar a atualização automática.</summary>
      <returns>Um objeto <see cref="T:System.IDisposable" /> que pode ser usado para descartar o objeto de chamada.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>Obtém ou define um retorno de chamada usado para determinar se um item é adequado para inclusão na exibição.</summary>
      <returns>Um método usado para determinar se um item é adequado para inclusão na exibição.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>Obtém uma coleção de objetos <see cref="T:System.ComponentModel.GroupDescription" /> que descrevem como os itens na coleção são agrupados na exibição.</summary>
      <returns>Uma coleção de <see cref="T:System.ComponentModel.GroupDescription" /> objetos que descrevem como os itens na coleção são agrupados na exibição.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>Obtém os grupos de nível superior.</summary>
      <returns>Uma coleção somente leitura dos grupos de nível superior ou <see langword="null" /> se não houver grupos.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>Obtém um valor que indica se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> da exibição está além do fim da coleção.</summary>
      <returns>
        <see langword="true" />Se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> da exibição estiver além do fim da coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>Obtém um valor que indica se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> da exibição está além do início da coleção.</summary>
      <returns>
        <see langword="true" />Se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> da exibição estiver além do início da coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>Retorna um valor que indica se a exibição resultante está vazia.</summary>
      <returns>
        <see langword="true" />Se o modo de exibição resultante estiver vazio; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>Define o item especificado como o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> na exibição.</summary>
      <param name="item">O item a ser definido como o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante estiver na exibição; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>Define o primeiro item na exibição como o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante for um item na exibição; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>Define o último item na exibição como o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante for um item na exibição; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>Define o item após o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> na exibição como o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante for um item na exibição; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>Define o item no índice especificado como sendo o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> na exibição.</summary>
      <param name="position">O índice para o qual definir o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante for um item na exibição; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>Define o item antes do <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> na exibição como o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.</summary>
      <returns>
        <see langword="true" /> se o <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> resultante for um item na exibição; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>Recria a exibição.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>Obtém uma coleção de objetos <see cref="T:System.ComponentModel.SortDescription" /> que descrevem como os itens na coleção são classificados na exibição.</summary>
      <returns>Uma coleção de objetos <see cref="T:System.ComponentModel.SortDescription" /> que descrevem como os itens na coleção são classificados na exibição.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>Retorna a coleção subjacente.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IEnumerable" /> que está na coleção subjacente.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>Uma interface que habilita coleções de implementação a criar uma exibição para seus dados. Normalmente, o código do usuário não chama métodos nesta interface.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>Cria uma nova exibição na coleção que implementa essa interface. Normalmente, o código do usuário não chama esse método.</summary>
      <returns>A exibição recém-criada.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary>Define propriedades que permitem classificação, agrupamento e filtragem em uma <see cref="T:System.Windows.Data.CollectionView" /> em tempo real.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary>Obtém um valor que indica se a exibição de coleção é compatível com a ativação ou desativação da filtragem de dados em tempo real.</summary>
      <returns>
        <see langword="true" />Se o modo de exibição de coleção oferecer suporte à ativação ou desativação da filtragem dinâmica; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary>Obtém um valor que indica se a exibição de coleção é compatível com a ativação ou desativação do agrupamento de dados em tempo real.</summary>
      <returns>
        <see langword="true" />se a exibição de coleção oferecer suporte para ativar ou desativar o agrupamento dinâmico; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary>Obtém um valor que indica se a exibição de coleção é compatível com a ativação ou desativação da classificação de dados em tempo real.</summary>
      <returns>
        <see langword="true" />se a exibição de coleção oferecer suporte para ativar ou desativar a classificação dinâmica; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary>Obtém ou define um valor que indica se a filtragem de dados em tempo real está habilitada.</summary>
      <returns>
        <see langword="true" /> se a filtragem de dados em tempo real está habilitada; <see langword="false" /> se a filtragem em tempo real não está habilitada; <see langword="null" /> se não é possível determinar se o modo de exibição de coleção implementa a filtragem em tempo real.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary>Obtém ou define um valor que indica se o agrupamento de dados em tempo real está habilitado.</summary>
      <returns>
        <see langword="true" />Se o agrupamento de dados em tempo real for habilitado; <see langword="false" /> se o agrupamento dinâmico não estiver habilitado; <see langword="null" /> se não for possível determinar se a exibição de coleção implementa o Agrupamento ao vivo.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary>Obtém ou define um valor que indica se a classificação em tempo real está habilitada.</summary>
      <returns>
        <see langword="true" /> se a classificação de dados em tempo real está habilitada; <see langword="false" /> se a classificação em tempo real não está habilitada; <see langword="null" /> se não é possível determinar se o modo de exibição de coleção implementa a classificação em tempo real.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary>Obtém uma coleção de cadeias de caracteres que especificam as propriedades que participam da filtragem de dados em tempo real.</summary>
      <returns>Uma coleção de cadeias de caracteres que especificam as propriedades que participam da filtragem de dados em tempo real.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary>Obtém uma coleção de cadeias de caracteres que especificam as propriedades que participam do agrupamento de dados em tempo real.</summary>
      <returns>Uma coleção de cadeias de caracteres que especificam as propriedades que participam do agrupamento de dados em tempo real.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary>Obtém uma coleção de cadeias de caracteres que especificam as propriedades que participam da classificação de dados em tempo real.</summary>
      <returns>Uma coleção de cadeias de caracteres que especificam as propriedades que participam da classificação de dados em tempo real.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>Define os métodos e as propriedades que uma <see cref="T:System.Windows.Data.CollectionView" /> implementa para fornecer recursos de edição a uma coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>Adiciona um novo item à coleção.</summary>
      <returns>O novo item que é adicionado à coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>Obtém um valor que indica se um novo item pode ser adicionado à coleção.</summary>
      <returns>
        <see langword="true" />se um novo item puder ser adicionado à coleção; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>Obtém um valor que indica se a exibição de coleção pode descartar as alterações pendentes e restaurar os valores originais de um objeto editado.</summary>
      <returns>
        <see langword="true" />Se o modo de exibição de coleção puder descartar as alterações pendentes e restaurar os valores originais de um objeto editado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>Termina a transação de edição e, se possível, restaura o valor original para o item.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>Termina a transação de adição e descarta o novo item pendente.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>Obtém um valor que indica se um item pode ser removido da coleção.</summary>
      <returns>
        <see langword="true" />se um item puder ser removido da coleção; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>Termina a transação de edição e salva as alterações pendentes.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>Termina a transação de adição e salva o novo item pendente.</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>Obtém o item que está sendo adicionado durante a transação de adição atual.</summary>
      <returns>O item que está sendo adicionado se <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> for <see langword="true" />; caso contrário <see langword="null" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>Obtém o item na coleção que está sendo editado.</summary>
      <returns>O item na coleção que está sendo editada se <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> for <see langword="true" />; caso contrário <see langword="null" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>Inicia uma transação de edição do item especificado.</summary>
      <param name="item">O item a ser editado.</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>Obtém um valor que indica se uma transação de adição está em andamento.</summary>
      <returns>
        <see langword="true" />se uma transação de adição estiver em andamento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>Obtém um valor que indica se uma transação de edição está em andamento.</summary>
      <returns>
        <see langword="true" />se uma transação de edição estiver em andamento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>Obtém ou define a posição do novo espaço reservado de item na exibição da coleção.</summary>
      <returns>Um dos valores de enumeração que especifica a posição do novo espaço reservado de item no modo de exibição de coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>Remove o item especificado da coleção.</summary>
      <param name="item">O item a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>Remove o item na posição especificada da coleção.</summary>
      <param name="index">A posição do item a ser removido.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0 ou maior que o número de itens na exibição de coleção.</exception>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>Define os métodos e propriedades que um <see cref="T:System.Windows.Data.CollectionView" /> implementa para habilitar a especificação de adição de itens de um tipo específico.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>Adiciona o objeto especificado à coleção.</summary>
      <param name="newItem">O objeto a ser adicionado à coleção.</param>
      <returns>O objeto que foi adicionado à coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>Obtém um valor que indica se um objeto especificado pode ser adicionado à coleção.</summary>
      <returns>
        <see langword="true" />se um objeto especificado puder ser adicionado à coleção; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>Define uma propriedade que fornece informações sobre propriedades de um objeto.</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>Obtém uma coleção que contém informações sobre as propriedades que estão disponíveis nos itens em uma coleção.</summary>
      <returns>Uma coleção que contém informações sobre as propriedades que estão disponíveis nos itens de uma coleção.</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>Contém informações sobre uma propriedade.</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ItemPropertyInfo" />.</summary>
      <param name="name">O nome da propriedade.</param>
      <param name="type">O tipo da propriedade.</param>
      <param name="descriptor">Um objeto que contém informações adicionais sobre a propriedade.</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>Obtém um objeto que contém informações adicionais sobre a propriedade.</summary>
      <returns>Um objeto que contém informações adicionais sobre a propriedade.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>Obtém o nome da propriedade.</summary>
      <returns>O nome da propriedade.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>Obtém tipo da propriedade.</summary>
      <returns>O tipo da propriedade.</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>Especifica em que local o espaço reservado para um novo item aparece na coleção.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>O espaço reservado para um novo item é exibido no início da coleção.  Novos itens estão no início da coleção, após o novo espaço reservado do item.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>O espaço reservado para um novo item é exibido no final da coleção. Novos itens são adicionados ao final da coleção, antes do novo espaço reservado do item.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>A coleção não usa um novo espaço reservado de item. A posição dos itens que são adicionados depende da coleção subjacente.  Geralmente, são adicionados ao final da coleção.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>Fornece uma implementação <see cref="T:System.Windows.WeakEventManager" /> para que seja possível usar o padrão “ouvinte de eventos fraco” para anexar ouvintes ao evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>Adiciona o manipulador de eventos especificado, que é chamado quando a origem especificada gera o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> para a propriedade especificada.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="propertyName">O nome da propriedade que existe no <paramref name="source" /> no qual escutar em busca de alterações. Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Mais de um método está associado a <paramref name="handler" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Adiciona o ouvinte especificado à lista de ouvintes na fonte especificada.</summary>
      <param name="source">O objeto com o evento.</param>
      <param name="listener">O objeto a ser adicionado como um ouvinte.</param>
      <param name="propertyName">O nome da propriedade que existe no <paramref name="source" /> no qual escutar em busca de alterações. Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary>Retorna um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
      <returns>Um novo objeto para conter ouvintes do evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Remove os ouvintes que não estão mais ativos dos dados para a origem fornecida.</summary>
      <param name="source">Objeto de origem do qual remover todos os ouvintes.</param>
      <param name="data">Os dados a serem limpos. Espera-se que isso seja um <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
      <param name="purgeAll">Definido como <see langword="true" /> a fim de parar de escutar e remover completamente todos os dados.</param>
      <returns>
        <see langword="true" /> se algumas entradas foram removidas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>Remove o manipulador de eventos especificado da fonte especificada.</summary>
      <param name="source">O objeto de origem que gera o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="handler">O delegado que manipula o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
      <param name="propertyName">O nome da propriedade que existe em <paramref name="source" /> na qual parar de escutar em busca de alterações. Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Mais de um método está associado a <paramref name="handler" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>Remove o ouvinte especificado da lista de ouvintes na origem especificada.</summary>
      <param name="source">O objeto do qual remover o ouvinte.</param>
      <param name="listener">O ouvinte a ser removido.</param>
      <param name="propertyName">O nome da propriedade que existe em <paramref name="source" /> na qual parar de escutar em busca de alterações. Defina como <see cref="F:System.String.Empty" /> para indicar "qualquer propriedade".</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>Começa a escutar o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> na origem fornecida.</summary>
      <param name="source">O objeto no qual começar a escutar <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>Para de escutar o evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> na origem fornecida.</summary>
      <param name="source">O objeto de origem no qual deixar de escutar <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>Especifica quais propriedades devem ser relatadas por descritores de tipo, especificamente o método <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</summary>
      <param name="filter">As opções que descrevem esse filtro de propriedade.</param>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>Esse membro oferece suporte à infraestrutura .NET Framework e não se destina à utilização diretamente no seu código.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se o <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo do .NET Framework atual é igual a um objeto especificado.</summary>
      <param name="value">O objeto a comparar a este <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>Obtém as opções de filtro para este <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo do .NET Framework.</summary>
      <returns>As opções de filtro de propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>Retorna o código hash do <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo do .NET Framework atual.</summary>
      <returns>Um valor inteiro de 32 bits com sinal.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>Retorna um valor que indica se as opções de filtro de propriedade do <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> Atributo do .NET Framework atual correspondem às opções de filtro de propriedade do objeto fornecido.</summary>
      <param name="value">O objeto a ser comparado. Espera-se que este objeto seja um <see cref="T:System.ComponentModel.PropertyFilterAttribute" />.</param>
      <returns>
        <see langword="true" /> se há uma correspondência; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>Especifica quais propriedades devem ser relatadas por descritores de tipo, especificamente o método <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />. Esta enumeração é usada para especificar o valor da propriedade <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" />.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>Retornar todas as propriedades.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>Retorne apenas as propriedades que não são válidas considerando o contexto atual do objeto.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>Não retornar nenhuma propriedade</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>Retorne apenas as propriedades que têm valores locais definidos atualmente.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>Retorne somente as propriedades cujos valores locais não estão definidos ou não têm propriedades definidas em um repositório de expressões externo (assim como um recurso de associação ou adiado).</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>Retorne qualquer propriedade que é válida no objeto no escopo atual.</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>Define a direção e o nome da propriedade a ser usada como critério para classificar uma coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.ComponentModel.SortDescription" />.</summary>
      <param name="propertyName">O nome da propriedade pela qual a lista será classificada.</param>
      <param name="direction">A ordem de classificação.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">O parâmetro <paramref name="direction" /> não especifica um valor válido.</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>Obtém ou define um valor que indica se deve classificar em ordem crescente ou decrescente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.ListSortDirection" /> valor para indicar se deve ser classificado em ordem crescente ou decrescente.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>Compara a instância especificada e a instância atual de <see cref="T:System.ComponentModel.SortDescription" /> quanto à igualdade de valores.</summary>
      <param name="obj">A instância de <see cref="T:System.ComponentModel.SortDescription" /> a ser comparada.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> e essa instância de <see cref="T:System.ComponentModel.SortDescription" /> têm os mesmos valores.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>Retorna o código hash para essa instância de <see cref="T:System.ComponentModel.SortDescription" />.</summary>
      <returns>O código hash para essa instância de <see cref="T:System.ComponentModel.SortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>Obtém um valor que indica se este objeto está em um estado imutável.</summary>
      <returns>
        <see langword="true" />Se esse objeto estiver em uso; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compara dois objetos <see cref="T:System.ComponentModel.SortDescription" /> quanto à igualdade de valor.</summary>
      <param name="sd1">A primeira instância a ser comparada.</param>
      <param name="sd2">A segunda instância a ser comparada.</param>
      <returns>
        <see langword="true" /> se os dois objetos forem iguais; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>Compara dois objetos <see cref="T:System.ComponentModel.SortDescription" /> quanto à desigualdade de valor.</summary>
      <param name="sd1">A primeira instância a ser comparada.</param>
      <param name="sd2">A segunda instância a ser comparada.</param>
      <returns>
        <see langword="true" /> se os valores não forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>Obtém ou define o nome da propriedade usado como critério de classificação.</summary>
      <returns>O valor padrão é null.</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.ComponentModel.SortDescription" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.SortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>Remove todos os itens da coleção.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>Ocorre quando um item é adicionado ou removido.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>Obtém uma instância vazia e não modificável de <see cref="T:System.ComponentModel.SortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Insere um item na coleção no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> é inserido.</param>
      <param name="item">O objeto a ser inserido.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>Remove o item no índice especificado da coleção.</summary>
      <param name="index">O índice de base zero do elemento a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>Substitui o elemento no índice especificado.</summary>
      <param name="index">O índice de base zero do elemento a ser substituído.</param>
      <param name="item">O novo valor para o elemento no índice especificado.</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Ocorre quando um item é adicionado ou removido.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>Descreve o nível de detalhes para rastreamento sobre um objeto específico.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>Rastreia todas as informações adicionais.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>Rastreia algumas informações adicionais.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>Rastreia uma quantidade média de informações adicionais.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>Não rastreia nenhuma informação adicional disponível.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>Fornece suporte de rastreamento de depuração direcionado especificamente para aplicativos WPF (Windows Presentation Foundation).</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>Obtém uma origem de rastreamento de animação.</summary>
      <returns>Uma origem de rastreamento de animação.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>Obtém uma origem de rastreamento de associação de dados.</summary>
      <returns>Uma fonte de rastreamento de vinculação de dados.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>Obtém uma origem de rastreamento de propriedade de dependência.</summary>
      <returns>Uma fonte de rastreamento de propriedade de dependência.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>Obtém uma origem de rastreamento de documento.</summary>
      <returns>Uma origem de rastreamento de documento.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>Obtém uma origem de rastreamento Congelável.</summary>
      <returns>Uma origem de rastreamento de Freezable.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>Obtém o valor da propriedade anexada <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> para um elemento especificado.</summary>
      <param name="element">O elemento do qual o valor da propriedade é lido.</param>
      <returns>O valor da propriedade <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> para o elemento.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>Obtém uma origem de rastreamento de host hwnd.</summary>
      <returns>Uma origem de rastreamento de host HWND.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>Obtém uma origem de rastreamento de marcação.</summary>
      <returns>Uma origem de rastreamento de marcação.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>Obtém uma origem de rastreamento de escopo de nome.</summary>
      <returns>Uma origem de rastreamento de escopo de nome.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>Atualiza origens de rastreamento, forçando o arquivo app.config a ser relido.</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>Obtém uma origem de rastreamento de dicionário de recursos.</summary>
      <returns>Uma origem de rastreamento do dicionário de recursos.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>Obtém uma origem de rastreamento de evento roteado.</summary>
      <returns>Uma origem de rastreamento de eventos roteados.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>Obtém o valor da propriedade anexada <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> para um elemento especificado.</summary>
      <param name="element">O elemento no qual a propriedade anexada é gravada.</param>
      <param name="traceLevel">O valor de <see cref="T:System.Diagnostics.PresentationTraceLevel" /> necessário.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>Obtém uma origem de rastreamento de shell.</summary>
      <returns>Uma origem de rastreamento do Shell.</returns>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>Identifica a propriedade <see cref="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty" /> anexada.</summary>
    </member>
    <member name="T:System.IO.FileFormatException">
      <summary>Uma exceção que é lançada quando um arquivo de entrada ou um fluxo de dados que deve estar em conformidade com uma determinada especificação de formato de arquivo está malformado.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" />.</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" /> e a inicializa usando dados serializados. Este construtor é chamado durante a desserialização para reconstituir o objeto de exceção transmitido por um fluxo.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String)">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" /> com uma mensagem de erro especificada.</summary>
      <param name="message">Um valor <see cref="T:System.String" /> que representa a mensagem de erro.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" /> com uma mensagem de erro especificada e um tipo de exceção.</summary>
      <param name="message">Um valor <see cref="T:System.String" /> que representa a mensagem de erro.</param>
      <param name="innerException">O valor da propriedade <see cref="P:System.Exception.InnerException" />, que representa a causa da exceção atual.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" /> com um valor URI de origem.</summary>
      <param name="sourceUri">O valor <see cref="T:System.Uri" /> do arquivo que causou esse erro.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" /> com um valor URI de origem e um tipo de exceção.</summary>
      <param name="sourceUri">O valor <see cref="T:System.Uri" /> do arquivo que causou esse erro.</param>
      <param name="innerException">O valor da propriedade <see cref="P:System.Exception.InnerException" />, que representa a causa da exceção atual.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" /> com um valor URI de origem e uma mensagem de erro especificada.</summary>
      <param name="sourceUri">O valor <see cref="T:System.Uri" /> do arquivo que causou esse erro.</param>
      <param name="message">Um valor <see cref="T:System.String" /> que representa a mensagem de erro.</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
      <summary>Cria uma nova instância da classe <see cref="T:System.IO.FileFormatException" /> com um valor URI de origem, uma mensagem de erro especificada e um tipo de exceção.</summary>
      <param name="sourceUri">O valor <see cref="T:System.Uri" /> do arquivo que causou esse erro.</param>
      <param name="message">Um valor <see cref="T:System.String" /> que representa a mensagem de erro.</param>
      <param name="innerException">O valor da propriedade <see cref="P:System.Exception.InnerException" />, que representa a causa da exceção atual.</param>
    </member>
    <member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Define o objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com o nome do arquivo e informações adicionais de exceção.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
    </member>
    <member name="P:System.IO.FileFormatException.SourceUri">
      <summary>Obtém o nome de um arquivo que causou a <see cref="T:System.IO.FileFormatException" />.</summary>
      <returns>Um <see cref="T:System.Uri" /> que representa o nome do arquivo que causou a exceção.</returns>
    </member>
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>Especifica o local em que o certificado x.509 que é usado na assinatura é armazenado.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>O certificado é inserido em seu próprio <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>O certificado está inserido no <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> que é criado para a assinatura que está sendo adicionada.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>O certificado não é inserido no pacote.</summary>
    </member>
    <member name="T:System.IO.Packaging.CompressionOption">
      <summary>Especifica o nível de compactação do conteúdo que é armazenado em um <see cref="T:System.IO.Packaging.PackagePart" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Fast">
      <summary>A compactação é otimizada para o desempenho.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Maximum">
      <summary>A compactação é otimizada para o tamanho.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Normal">
      <summary>A compactação é otimizada para um equilíbrio entre o desempenho e o tamanho.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
      <summary>A compactação é desligada.</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.SuperFast">
      <summary>A compactação é otimizada para o alto desempenho.</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>Representa um arquivo composto OLE que contém um pacote criptografado.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>Fecha o pacote criptografado e o arquivo composto OLE que o contém.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Cria e retorna um <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> no fluxo especificado.</summary>
      <param name="envelopeStream">O fluxo no qual o arquivo será criado.</param>
      <param name="publishLicense">A licença de publicação que é inserida no arquivo composto.</param>
      <param name="cryptoProvider">Um objeto que determina quais operações o usuário atual tem permissão para executar no conteúdo criptografado.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> recém-criado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> não fornece acesso de leitura/gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Cria e retorna um <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />, concedendo a ele o nome de arquivo especificado.</summary>
      <param name="envelopeFileName">O nome do arquivo composto OLE.</param>
      <param name="publishLicense">A licença de publicação que é inserida no arquivo composto.</param>
      <param name="cryptoProvider">Um objeto que determina quais operações o usuário atual tem permissão para executar no conteúdo criptografado.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> recém-criado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Cria e retorna um <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> (no fluxo especificado) que usa o pacote não criptografado especificado como seu conteúdo.</summary>
      <param name="envelopeStream">O fluxo no qual o arquivo será criado.</param>
      <param name="packageStream">O fluxo que representa o pacote não criptografado existente.</param>
      <param name="publishLicense">A licença de publicação que é inserida no arquivo composto.</param>
      <param name="cryptoProvider">Um objeto que determina quais operações o usuário atual tem permissão para executar no conteúdo criptografado.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> recém-criado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> ou <paramref name="packageStream" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> não fornece acesso de leitura/gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>Cria e retorna um <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que usa o pacote não criptografado especificado como seu conteúdo, concedendo a ele o nome de arquivo indicado.</summary>
      <param name="envelopeFileName">O nome do arquivo composto OLE.</param>
      <param name="packageStream">O fluxo que representa o pacote não criptografado existente.</param>
      <param name="publishLicense">A licença de publicação que é inserida no arquivo composto.</param>
      <param name="cryptoProvider">Um objeto que determina quais operações o usuário atual tem permissão para executar no conteúdo criptografado.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> recém-criado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> ou <paramref name="packageStream" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>Obtém um valor que especifica se o arquivo foi aberto com acesso de leitura, gravação ou ambos.</summary>
      <returns>O <see cref="T:System.IO.FileAccess" /> valor que foi usado para abrir o arquivo.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>Libere o fluxo para ambos os <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> e seu conteúdo do pacote.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>Obtém o pacote criptografado dentro do <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
      <returns>O <see cref="T:System.IO.Packaging.Package" /> no envelope.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>Obtém um valor que especifica se o fluxo indicado é um arquivo composto OLE com um fluxo de pacote criptografado.</summary>
      <param name="stream">O fluxo que é testado.</param>
      <returns>
        <see langword="true" /> se o fluxo especificado é um arquivo composto OLE com um fluxo de pacote criptografado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>Obtém um valor que especifica se o arquivo indicado é um arquivo composto OLE com um fluxo de pacote criptografado.</summary>
      <param name="fileName">O arquivo que é testado.</param>
      <returns>
        <see langword="true" /> se o arquivo especificado é um arquivo composto OLE com um fluxo de pacote criptografado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>Abra o pacote criptografado no fluxo especificado.</summary>
      <param name="envelopeStream">O fluxo que contém o pacote criptografado.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que é aberto.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>Abra o pacote criptografado no arquivo especificado como somente leitura e não compartilhado.</summary>
      <param name="envelopeFileName">O arquivo que contém o pacote criptografado.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que é aberto.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>Abra o pacote criptografado no arquivo especificado como não compartilhado e com o acesso indicado.</summary>
      <param name="envelopeFileName">O arquivo que contém o pacote criptografado.</param>
      <param name="access">O tipo de acesso.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que é aberto.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Abra o pacote criptografado no arquivo especificado e conceda o acesso e o compartilhamento indicados.</summary>
      <param name="envelopeFileName">O arquivo que contém o pacote criptografado.</param>
      <param name="access">O tipo de acesso.</param>
      <param name="sharing">O tipo de compartilhamento.</param>
      <returns>O <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> que é aberto.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>Obtém as principais propriedades do pacote (por exemplo, Título e Assunto) do documento gerenciado por direitos.</summary>
      <returns>O <see cref="T:System.IO.Packaging.PackageProperties" /> para o pacote.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>Obtém as informações de gerenciamento de direitos armazenadas no <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />, especificamente, o <see cref="T:System.Security.RightsManagement.PublishLicense" /> e <see cref="T:System.Security.RightsManagement.UseLicense" />s armazenados no arquivo composto OLE que incorpora o pacote protegido de gerenciamento de direitos</summary>
      <returns>O <see cref="T:System.IO.Packaging.RightsManagementInformation" /> para o pacote.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>Obtém um objeto que fornece acesso aos fluxos de arquivo composto fora do pacote criptografado.</summary>
      <returns>Um <see cref="T:System.IO.Packaging.StorageInfo" /> que representa fluxos no arquivo OLE composto que estão fora do pacote criptografado.</returns>
    </member>
    <member name="T:System.IO.Packaging.EncryptionOption">
      <summary>Especifica a opção de criptografia para partes em um <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.None">
      <summary>Sem criptografia.</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
      <summary>Suporte à criptografia por meio do gerenciamento de direitos.</summary>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>Representa o método que trata a <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> que é gerada quando <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> detecta uma assinatura inválida.</summary>
      <param name="sender">A origem <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> inválida do evento.</param>
      <param name="e">Os dados do evento.</param>
    </member>
    <member name="T:System.IO.Packaging.Package">
      <summary>Representa um contêiner que pode armazenar vários objetos de dados.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.Packaging.Package" /> que usa um determinado <see cref="T:System.IO.FileAccess" />.</summary>
      <param name="openFileAccess">As permissões de E/S de arquivo para o pacote.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor para <paramref name="openFileAccess" /> não é válido.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Close">
      <summary>Salva e fecha o pacote e todos os fluxos de parte subjacente.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
      <summary>Cria uma nova parte descompactada com um URI e tipo de conteúdo específicos.</summary>
      <param name="partUri">O URI (Uniform Resource Identifier) da nova parte.</param>
      <param name="contentType">O tipo de conteúdo do fluxo de dados.</param>
      <returns>A nova parte criada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> ou <paramref name="contentType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI válido.</exception>
      <exception cref="T:System.InvalidOperationException">Uma parte com o <paramref name="partUri" /> especificado já existe no pacote.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura (não é possível adicionar uma nova parte).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Cria uma nova parte com um URI, um tipo de conteúdo e uma opção de compactação específicos.</summary>
      <param name="partUri">O URI da nova parte.</param>
      <param name="contentType">O tipo de conteúdo do fluxo de dados.</param>
      <param name="compressionOption">A opção de compactação do fluxo de dados, <see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> ou compactação <see cref="F:System.IO.Packaging.CompressionOption.Normal" />.</param>
      <returns>A nova parte criada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> ou <paramref name="contentType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI (Uniform Resource Identifier) válido.</exception>
      <exception cref="T:System.InvalidOperationException">Uma parte com o <paramref name="partUri" /> especificado já existe no pacote.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="compressionOption" /> não é válido.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura (não é possível adicionar uma nova parte).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Quando substituído em uma classe derivada, cria uma nova parte no pacote.</summary>
      <param name="partUri">O URI (Uniform Resource Identifier) para a parte sendo criada.</param>
      <param name="contentType">O tipo de conteúdo do fluxo de dados.</param>
      <param name="compressionOption">A opção de compactação do fluxo de dados.</param>
      <returns>A parte criada.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Cria uma relação de nível de pacote para uma parte com um determinado URI, modo de destino e tipo de relacionamento.</summary>
      <param name="targetUri">O URI (Uniform Resource Identifier) da parte de destino.</param>
      <param name="targetMode">Indica se a parte de destino é <see cref="F:System.IO.Packaging.TargetMode.Internal" /> ou <see cref="F:System.IO.Packaging.TargetMode.External" /> para o pacote.</param>
      <param name="relationshipType">Um URI que define exclusivamente a função da relação.</param>
      <returns>A relação de nível de pacote para a parte especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> ou <paramref name="relationshipType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A parte <paramref name="targetUri" /> é um <see cref="T:System.IO.Packaging.PackageRelationship" /> ou <paramref name="targetMode" /> é <see cref="F:System.IO.Packaging.TargetMode.Internal" /> e <paramref name="targetUri" /> é um URI absoluto.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor para <paramref name="targetMode" /> não é válido.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Cria uma relação de nível de pacote para uma parte com um determinado URI, modo de destino, tipo de relacionamento e ID (identificador).</summary>
      <param name="targetUri">O URI (Uniform Resource Identifier) da parte de destino.</param>
      <param name="targetMode">Indica se a parte de destino é <see cref="F:System.IO.Packaging.TargetMode.Internal" /> ou <see cref="F:System.IO.Packaging.TargetMode.External" /> para o pacote.</param>
      <param name="relationshipType">Um URI que define exclusivamente a função da relação.</param>
      <param name="id">Um identificador XML exclusivo.</param>
      <returns>A relação de nível de pacote para a parte especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> ou <paramref name="relationshipType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A parte <paramref name="targetUri" /> é um <see cref="T:System.IO.Packaging.PackageRelationship" /> ou <paramref name="targetMode" /> é <see cref="F:System.IO.Packaging.TargetMode.Internal" /> e <paramref name="targetUri" /> é um URI absoluto.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor para <paramref name="targetMode" /> não é válido.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido ou uma parte com o <paramref name="id" /> especificado já ocorre no pacote.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
      <summary>Exclui uma parte com um determinado URI do pacote.</summary>
      <param name="partUri">O URI da parte a ser excluída.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI válido.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
      <summary>Quando substituído em uma classe derivada, exclui uma parte com um determinado URI.</summary>
      <param name="partUri">O <see cref="P:System.IO.Packaging.PackagePart.Uri" /> do <see cref="T:System.IO.Packaging.PackagePart" /> a ser excluído.</param>
    </member>
    <member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
      <summary>Exclui a relação do nível de pacote.</summary>
      <param name="id">O <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> do <see cref="T:System.IO.Packaging.PackageRelationship" /> a ser excluído.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
      <summary>Libera e salva o conteúdo de todas as partes e relações, fecha o pacote e libera todos os recursos.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="P:System.IO.Packaging.Package.FileOpenAccess">
      <summary>Obtém a configuração de acesso ao arquivo para o pacote.</summary>
      <returns>Um dos <see cref="T:System.IO.FileAccess" /> valores: <see cref="F:System.IO.FileAccess.Read" />, <see cref="F:System.IO.FileAccess.Write" />ou. <see cref="F:System.IO.FileAccess.ReadWrite" /></returns>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Flush">
      <summary>Salva o conteúdo de todas as partes e relações que estão contidas no pacote.</summary>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura e não pode ser modificado.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.FlushCore">
      <summary>Quando substituído em uma classe derivada, salva o conteúdo de todas as partes e relações para o repositório de classe derivada.</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
      <summary>Retorna a parte com um determinado URI.</summary>
      <param name="partUri">O URI (Uniform Resource Identifier) da parte a ser retornada.</param>
      <returns>A parte com o <paramref name="partUri" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI (Uniform Resource Identifier) válido.</exception>
      <exception cref="T:System.InvalidOperationException">Uma parte com o <paramref name="partUri" /> especificado não está no pacote.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
      <summary>Quando substituído em uma classe derivada, retorna a parte endereçada por um determinado URI.</summary>
      <param name="partUri">O URI (Uniform Resource Identifier) da parte a ser recuperada.</param>
      <returns>A parte solicitada ou <see langword="null" /> se a parte com o <paramref name="partUri" /> especificado não está no pacote.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetParts">
      <summary>Retorna uma coleção de todas as partes no pacote.</summary>
      <returns>Uma coleção de todos os elementos <see cref="T:System.IO.Packaging.PackagePart" /> contidos no pacote.</returns>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartsCore">
      <summary>Quando substituído em uma classe derivada, retorna uma matriz de todas as partes no pacote.</summary>
      <returns>Uma matriz de todas as partes que estão contidas no pacote.</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
      <summary>Retorna a relação de nível de pacote com o identificador fornecido.</summary>
      <param name="id">A <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> da relação a ser retornada.</param>
      <returns>A relação de nível de pacote com o <paramref name="id" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido.</exception>
      <exception cref="T:System.InvalidOperationException">Não há uma relação com o <paramref name="id" /> especificado no pacote.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationships">
      <summary>Retorna uma coleção de todas as relações de nível de pacote.</summary>
      <returns>Uma coleção de todas as relações de nível de pacote que estão contidas no pacote.</returns>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
      <summary>Retorna uma coleção de todas as relações de nível de pacote que correspondem a um determinado <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
      <param name="relationshipType">O <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> para corresponder e retornar na coleção.</param>
      <returns>Uma coleção de relações de nível de pacote que correspondem ao <paramref name="relationshipType" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> é uma cadeia de caracteres vazia.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
      <summary>Abre um pacote em um determinado fluxo de E/S.</summary>
      <param name="stream">O fluxo de E/S no qual o pacote será aberto.</param>
      <returns>O pacote aberto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> é <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">Para abrir o pacote requer permissão de leitura/gravação e o <paramref name="stream" /> especificado é somente gravação ou então o pacote a abrir requer permissão de gravação ou de leitura/gravação e o <paramref name="stream" /> especificado é somente leitura.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
      <summary>Abre um pacote com um fluxo de E/S e um modo de arquivo.</summary>
      <param name="stream">O fluxo de E/S no qual o pacote será aberto.</param>
      <param name="packageMode">O modo de arquivo no qual o pacote é aberto.</param>
      <returns>O pacote aberto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="packageMode" /> não é válido.</exception>
      <exception cref="T:System.IO.IOException">Para abrir o pacote requer permissão de leitura/gravação e o <paramref name="stream" /> especificado é somente gravação ou então o pacote a abrir requer permissão de gravação ou de leitura/gravação e o <paramref name="stream" /> especificado é somente leitura.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Abre um pacote com um fluxo de E/S, um modo de arquivo e uma configuração de acesso a arquivos especificados.</summary>
      <param name="stream">O fluxo de E/S no qual o pacote será aberto.</param>
      <param name="packageMode">O modo de arquivo no qual o pacote é aberto.</param>
      <param name="packageAccess">O acesso ao arquivo no qual o pacote é aberto.</param>
      <returns>O pacote aberto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor de <paramref name="packageMode" /> ou <paramref name="packageAccess" /> não é válido.</exception>
      <exception cref="T:System.IO.IOException">O pacote a ser aberto exige a permissão de leitura ou leitura/gravação e o <paramref name="stream" /> especificado é somente gravação ou o pacote a ser aberto exige a permissão de gravação ou leitura/gravação e o <paramref name="stream" /> especificado é somente leitura.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String)">
      <summary>Abre um pacote em um determinado caminho e nome de arquivo.</summary>
      <param name="path">O caminho e o nome de arquivo do pacote.</param>
      <returns>O pacote aberto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
      <summary>Abre um pacote em um determinado caminho usando um dado modo de arquivo.</summary>
      <param name="path">O caminho e o nome de arquivo do pacote.</param>
      <param name="packageMode">O modo de arquivo no qual o pacote é aberto.</param>
      <returns>O pacote aberto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor para <paramref name="packageMode" /> não é válido.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>Abre um pacote em um determinado caminho usando um dado modo de arquivo e uma configuração de acesso ao arquivo.</summary>
      <param name="path">O caminho e o nome de arquivo do pacote.</param>
      <param name="packageMode">O modo de arquivo no qual abrir o pacote.</param>
      <param name="packageAccess">O acesso ao arquivo no qual o pacote é aberto.</param>
      <returns>O pacote aberto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor de <paramref name="packageMode" /> ou <paramref name="packageAccess" /> não é válido.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>Abre um pacote em um determinado caminho usando um dado modo de arquivo, acesso a arquivos e configurações de compartilhamento de arquivos.</summary>
      <param name="path">O caminho e o nome de arquivo do pacote.</param>
      <param name="packageMode">O modo de arquivo no qual abrir o pacote.</param>
      <param name="packageAccess">O acesso de arquivo no qual abrir o pacote.</param>
      <param name="packageShare">O modo de compartilhamento de arquivo no qual abrir o pacote.</param>
      <returns>O pacote aberto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor para <paramref name="packageMode" />, <paramref name="packageAccess" /> ou <paramref name="packageShare" /> não é válido.</exception>
    </member>
    <member name="P:System.IO.Packaging.Package.PackageProperties">
      <summary>Obtém as propriedades principais do pacote.</summary>
      <returns>As propriedades principais do pacote.</returns>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
      <summary>Indica se uma parte com um determinado URI está no pacote.</summary>
      <param name="partUri">O <see cref="T:System.Uri" /> da parte a ser verificada.</param>
      <returns>
        <see langword="true" /> se uma parte com o <paramref name="partUri" /> especificado estiver no pacote, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI (Uniform Resource Identifier) válido.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação (não é não possível ler informações).</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
      <summary>Indica se uma relação de nível de pacote com uma determinada ID está contida no pacote.</summary>
      <param name="id">A <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> da relação a ser verificada.</param>
      <returns>
        <see langword="true" /> se uma relação de nível de pacote com o <paramref name="id" /> especificado estiver no pacote, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido.</exception>
      <exception cref="T:System.ObjectDisposedException">O pacote não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação.</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.System#IDisposable#Dispose">
      <summary>Esse membro dá suporte à infraestrutura de Windows Presentation Foundation (WPF) e não se destina ao uso do aplicativo.  Use o método <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> fortemente tipado em vez disso.</summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>Representa uma assinatura digital aplicada a um conjunto de partes e relacionamentos do pacote.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>Obtém a opção de incorporação de certificado X.509.</summary>
      <returns>Um dos <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> valores que especifica a opção para a assinatura digital.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>Retorna uma lista ordenada das operações <see cref="T:System.Security.Cryptography.Xml.Transform" /> aplicadas a uma determinada parte.</summary>
      <param name="partName">O <see cref="T:System.Uri" /> do <see cref="T:System.IO.Packaging.PackagePart" /> para o qual retornar a lista de transformação.</param>
      <returns>Uma lista ordenada de cadeias de caracteres de URI, como <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> ou <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />, que representa as transformações XML canônicas aplicadas à parte com o URI <paramref name="partName" /> determinado.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>Obtém ou define a assinatura digital XML.</summary>
      <returns>A assinatura digital XML.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>Obtém o <see cref="T:System.IO.Packaging.PackagePart" /> que contém a assinatura.</summary>
      <returns>A parte do pacote que contém a assinatura.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>Obtém a cadeia de caracteres URI que identifica o tipo de assinatura.</summary>
      <returns>Uma cadeia de caracteres URI que identifica o tipo de assinatura. O padrão é <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>Obtém o valor de hash criptografado de <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</summary>
      <returns>Uma matriz de bytes que contém o valor de hash criptografado do <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>Obtém uma coleção de todos os objetos <see cref="T:System.IO.Packaging.PackagePart" /> assinado com a assinatura.</summary>
      <returns>Uma coleção que contém todas as partes do pacote assinadas com a assinatura.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>Obtém a lista de partes de <see cref="T:System.IO.Packaging.PackageRelationship" /> que foram assinadas com a assinatura.</summary>
      <returns>A lista das <see cref="T:System.IO.Packaging.PackageRelationship" /> partes que foram assinadas com a assinatura.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>Obtém o certificado X.509 do signatário.</summary>
      <returns>O certificado digital do signatário ou <see langword="null" /> se o certificado não estiver armazenado no <see cref="T:System.IO.Packaging.Package" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>Obtém a data e a hora de criação da assinatura.</summary>
      <returns>A data e a hora em que a assinatura foi criada.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>Obtém o formato de data e hora retornado pela propriedade <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />.</summary>
      <returns>O formato da data e hora retornadas pela <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> propriedade.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>Verifica a assinatura digital em um certificado X.509.</summary>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> se a verificação for bem-sucedida; caso contrário, um dos valores <see cref="T:System.IO.Packaging.VerifyResult" /> que identifica um problema.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifica a assinatura digital com relação a um determinado certificado X.509.</summary>
      <param name="signingCertificate">O certificado X.509 do assinante com relação ao qual verificar a assinatura digital.</param>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> se a verificação for bem-sucedida; caso contrário, um dos valores <see cref="T:System.IO.Packaging.VerifyResult" /> que identifica um problema.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> digital foi excluído.</exception>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>Fornece uma classe de utilitário para a criação e a verificação de assinaturas digitais em um <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> para uso com um <see cref="T:System.IO.Packaging.Package" /> especificado.</summary>
      <param name="package">O pacote associado a este gerenciador de assinatura.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>Obtém ou define o certificado X.509 inserindo a opção usada pelo método <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> para assinar digitalmente as partes do pacote.</summary>
      <returns>Um dos valores de <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>Referenda todas as assinaturas no pacote com um certificado X.509 selecionado pelo usuário.</summary>
      <returns>A assinatura que foi adicionada como uma referenda ou <see langword="null" /> se não for possível localizar nenhum certificado ou o usuário tiver cancelado a caixa de diálogo de seleção do certificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Referenda todas as assinaturas no pacote com um certificado X.509 especificado.</summary>
      <param name="certificate">O certificado X.509 a ser adicionado como uma assinatura de referenda.</param>
      <returns>A assinatura que foi adicionada como uma referenda.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> é <see langword="null" /></exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Referenda uma lista de assinaturas com um determinado certificado X.509.</summary>
      <param name="certificate">O certificado X.509 para referendar cada uma das <paramref name="signatures" /> especificadas.</param>
      <param name="signatures">A lista de assinaturas para referendar.</param>
      <returns>A assinatura digital usada para referendar cada uma das <paramref name="signatures" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="certificate" /> ou <paramref name="signatures" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O pacote não contém nenhum objeto <see cref="T:System.IO.Packaging.PackagePart" /> assinado.</exception>
      <exception cref="T:System.ArgumentException">O pacote não contém nenhuma parte <see cref="T:System.IO.Packaging.PackageDigitalSignature" />.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>Obtém uma cadeia de caracteres URI que identifica o algoritmo de hash padrão usado para criar e verificar assinaturas.</summary>
      <returns>Uma URI cadeia de caracteres que identifica o algoritmo de hash padrão usado para criar e verificar assinaturas.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>Retorna a assinatura digital de uma determinada assinatura URI (Uniform Resource Identifier).</summary>
      <param name="signatureUri">O URI da assinatura digital a ser retornada.</param>
      <returns>A assinatura digital do <paramref name="signatureUri" /> especificado ou <see langword="null" /> se uma assinatura do <paramref name="signatureUri" /> fornecido não puder ser encontrado.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>Obtém ou define o identificador URI para a instância <see cref="T:System.Security.Cryptography.HashAlgorithm" /> usada para criar e verificar assinaturas.</summary>
      <returns>O <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> identificadorURI da<see cref="T:System.Security.Cryptography.HashAlgorithm" /> instância usada para criar e verificar assinaturas.</returns>
      <exception cref="T:System.ArgumentNullException">A cadeia de caracteres para o URI a ser definida é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A cadeia de caracteres para o URI a ser definido está vazia.</exception>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>Ocorre quando <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> encontra uma assinatura inválida.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>Obtém um valor que indica se o pacote contém alguma assinatura.</summary>
      <returns>
        <see langword="true" />Se o pacote contiver assinaturas; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>Obtém ou define um identificador para a janela pai para exibir uma caixa de diálogo de seleção de certificado.</summary>
      <returns>O identificador da janela pai a ser usada para exibir a caixa de diálogo seleção de certificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>Remove todas as assinaturas digitais do pacote.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>Remove a assinatura digital com um determinado URI (Uniform Resource Identifier) de assinatura.</summary>
      <param name="signatureUri">O URI do <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> a ser removido.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>Solicita ao usuário um certificado X.509, que é usado para assinar digitalmente uma lista especificada de partes do pacote.</summary>
      <param name="parts">A lista de URIs (uniform resource identifiers) para os elementos <see cref="T:System.IO.Packaging.PackagePart" /> assinarem.</param>
      <returns>A assinatura digital usada para assinar a lista de <paramref name="parts" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Assina uma lista de partes do pacote com um determinado certificado X.509.</summary>
      <param name="parts">A lista de URIs (uniform resource identifiers) para os elementos <see cref="T:System.IO.Packaging.PackagePart" /> assinarem.</param>
      <param name="certificate">O certificado X.509 a ser usado para assinar digitalmente cada uma das <paramref name="parts" /> especificadas.</param>
      <returns>A assinatura digital usada para assinar a lista de <paramref name="parts" /> especificada ou <see langword="null" /> se não for possível encontrar nenhum certificado ou se o usuário tiver clicado em “Cancelar” na caixa de diálogo de seleção de certificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>Assina uma lista de partes e relações do pacote com um determinado certificado X.509.</summary>
      <param name="parts">A lista de URIs (uniform resource identifiers) para os objetos <see cref="T:System.IO.Packaging.PackagePart" /> assinarem.</param>
      <param name="certificate">O certificado X.509 a ser usado para assinar digitalmente cada uma das partes e das relações especificadas.</param>
      <param name="relationshipSelectors">A lista de objetos <see cref="T:System.IO.Packaging.PackageRelationship" /> a ser assinada.</param>
      <returns>A assinatura digital usada para assinar os elementos especificados nas listas <paramref name="parts" /> e <paramref name="relationshipSelectors" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="parts" /> e o <paramref name="relationshipSelectors" /> não especificam nenhum objeto para ser assinado.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>Assina uma lista de partes e relações do pacote com um determinado certificado X.509 e ID (identificador).</summary>
      <param name="parts">A lista de URIs (uniform resource identifiers) para os objetos <see cref="T:System.IO.Packaging.PackagePart" /> assinarem.</param>
      <param name="certificate">O certificado X.509 a ser usado para assinar digitalmente cada uma das partes e das relações especificadas.</param>
      <param name="relationshipSelectors">A lista de objetos <see cref="T:System.IO.Packaging.PackageRelationship" /> a ser assinada.</param>
      <param name="signatureId">Uma cadeia de caracteres de identificação a ser associada à assinatura.</param>
      <returns>A assinatura digital usada para assinar os elementos especificados nas listas <paramref name="parts" /> e <paramref name="relationshipSelectors" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="parts" /> e o <paramref name="relationshipSelectors" /> não especificam nenhum elemento para ser assinado.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>Assina uma lista de partes do pacote, relações do pacote ou objetos personalizados com um certificado X.509 e uma assinatura ID (identificador) especificados.</summary>
      <param name="parts">A lista de URIs (uniform resource identifiers) para os objetos <see cref="T:System.IO.Packaging.PackagePart" /> assinarem.</param>
      <param name="certificate">O certificado X.509 a ser usado para assinar digitalmente cada uma das partes e das relações especificadas.</param>
      <param name="relationshipSelectors">A lista de objetos <see cref="T:System.IO.Packaging.PackageRelationship" /> a ser assinada.</param>
      <param name="signatureId">Uma cadeia de caracteres de identificação a ser associada à assinatura.</param>
      <param name="signatureObjects">Uma lista de objetos de dados personalizados a ser assinada.</param>
      <param name="objectReferences">Uma lista de referências a objetos personalizados a ser assinada.</param>
      <returns>A assinatura digital usada para assinar os elementos especificados nas listas <paramref name="parts" /> e <paramref name="relationshipSelectors" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" />, <paramref name="relationshipSelectors" />, <paramref name="signatureObjects" /> e <paramref name="objectReferences" /> não especificam nenhum elemento a ser assinado.</exception>
      <exception cref="T:System.InvalidOperationException">Um <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> de uma parte que está sendo assinada faz referência a um vazio, <see langword="null" /> ou <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" /> indefinido.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" /> não é <see langword="null" /> e não é uma ID de esquema XML válida (por exemplo, começa com um dígito numérico à esquerda).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>Obtém o URI (Uniform Resource Identifier) da parte de origem de assinatura.</summary>
      <returns>O URI da parte de origem da assinatura.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>Obtém o tipo de relação de origem de assinatura padrão.</summary>
      <returns>O tipo de relação de origem de assinatura padrão.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>Obtém uma coleção de todas as assinaturas contidas no pacote.</summary>
      <returns>Uma coleção de todos <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> os objetos.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>Obtém ou define o formato de data/hora usado para criar uma <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> de assinatura.</summary>
      <returns>O formato de data/hora usado para criar uma <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />assinatura.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>Obtém um dicionário que contém cada <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> definido e seu identificador XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> associado.</summary>
      <returns>Um dicionário que contém cada definido <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> e seu associado XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> associado.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>Verifica um determinado Certificado X.509.</summary>
      <param name="certificate">O certificado X.509 a ser verificado.</param>
      <returns>
        <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (valor 0) se o certificado for verificado com êxito, caso contrário, uma enumeração bit a bit dos sinalizadores de erro.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>Verifica as assinaturas em todas as partes assinadas dentro do pacote.</summary>
      <param name="exitOnFailure">
        <see langword="true" /> para sair na primeira falha, caso contrário, <see langword="false" /> para continuar e verificar todas as assinaturas.</param>
      <returns>
        <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (valor 0) se todas as assinaturas forem verificadas com êxito, caso contrário, uma enumeração que identifica o erro.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackagePart">
      <summary>Fornece uma classe base para partes armazenadas em um <see cref="T:System.IO.Packaging.Package" />.  Esta classe é abstrata.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.Packaging.PackagePart" /> com um <see cref="P:System.IO.Packaging.PackagePart.Package" /> pai e um URI de parte especificados.</summary>
      <param name="package">O <see cref="T:System.IO.Packaging.Package" /> pai da parte.</param>
      <param name="partUri">O URI da parte, em relação à raiz <see cref="T:System.IO.Packaging.Package" /> pai.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> ou <paramref name="partUri" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.Packaging.PackagePart" /> com um <see cref="P:System.IO.Packaging.PackagePart.Package" /> pai, um URI de parte e um tipo de conteúdo MIME especificados.</summary>
      <param name="package">O <see cref="T:System.IO.Packaging.Package" /> pai da parte.</param>
      <param name="partUri">O URI da parte, em relação à raiz <see cref="T:System.IO.Packaging.Package" /> pai.</param>
      <param name="contentType">O tipo de conteúdo MIME do fluxo de dados da parte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> ou <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI válido.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.Packaging.PackagePart" /> com um <see cref="P:System.IO.Packaging.PackagePart.Package" /> pai, um URI de parte, um tipo de conteúdo MIME e uma <see cref="T:System.IO.Packaging.CompressionOption" /> especificados.</summary>
      <param name="package">O <see cref="T:System.IO.Packaging.Package" /> pai da parte.</param>
      <param name="partUri">O URI da parte, em relação à raiz <see cref="T:System.IO.Packaging.Package" /> pai.</param>
      <param name="contentType">O tipo de conteúdo MIME do fluxo de dados da parte.</param>
      <param name="compressionOption">A opção de compactação do fluxo de dados da parte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> ou <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI válido.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="compressionOption" /> não é válido.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.CompressionOption">
      <summary>Obtém a opção de compactação do fluxo de conteúdo da parte.</summary>
      <returns>A opção de compactação do fluxo de conteúdo da parte.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.ContentType">
      <summary>Obtém o tipo MIME do fluxo de conteúdo.</summary>
      <returns>O MIME tipo do fluxo de dados de conteúdo para a parte.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).  

ou - 
A cadeia de caracteres retornada pelo método <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> da classe derivada está vazia.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>Cria uma relação de nível de parte entre esta <see cref="T:System.IO.Packaging.PackagePart" /> para uma <see cref="T:System.IO.Packaging.PackagePart" /> de destino ou recurso externo especificado.</summary>
      <param name="targetUri">O URI da parte de destino.</param>
      <param name="targetMode">Um dos valores de enumeração. Por exemplo, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> se a parte de destino estiver dentro do <see cref="T:System.IO.Packaging.Package" /> ou <see cref="F:System.IO.Packaging.TargetMode.External" /> se o destino for um recurso fora do <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">A função da relação.</param>
      <returns>A relação de nível de parte entre este <see cref="T:System.IO.Packaging.PackagePart" /> para o <see cref="T:System.IO.Packaging.PackagePart" /> de destino ou recurso externo.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> ou <paramref name="relationshipType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="targetMode" /> não é um valor de enumeração <see cref="T:System.IO.Packaging.TargetMode" /> válido.</exception>
      <exception cref="T:System.ArgumentException">A parte identificada pelo <paramref name="targetUri" /> é uma relação (o destino de uma relação não pode ser outra relação).  

ou - 
<paramref name="targetMode" /> é especificado como <see cref="F:System.IO.Packaging.TargetMode.Internal" />, mas <paramref name="targetUri" /> é um URI externo absoluto.</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura (não é possível adicionar uma nova relação).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>Cria uma relação de nível de parte entre esta <see cref="T:System.IO.Packaging.PackagePart" /> para uma <see cref="T:System.IO.Packaging.PackagePart" /> de destino ou recurso externo especificado.</summary>
      <param name="targetUri">O URI da parte de destino.</param>
      <param name="targetMode">Um dos valores de enumeração. Por exemplo, <see cref="F:System.IO.Packaging.TargetMode.Internal" /> se a parte de destino estiver dentro do <see cref="T:System.IO.Packaging.Package" /> ou <see cref="F:System.IO.Packaging.TargetMode.External" /> se o destino for um recurso fora do <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="relationshipType">A função da relação.</param>
      <param name="id">Uma ID exclusiva para a relação.</param>
      <returns>A relação de nível de parte entre este <see cref="T:System.IO.Packaging.PackagePart" /> para o <see cref="T:System.IO.Packaging.PackagePart" /> de destino ou recurso externo.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> ou <paramref name="relationshipType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="targetMode" /> não é um valor de enumeração <see cref="T:System.IO.Packaging.TargetMode" /> válido.</exception>
      <exception cref="T:System.ArgumentException">A parte identificada pelo <paramref name="targetUri" /> é uma relação (o destino de uma relação não pode ser outra relação).  

ou - 
<paramref name="targetMode" /> é especificado como <see cref="F:System.IO.Packaging.TargetMode.Internal" />, mas <paramref name="targetUri" /> é um URI externo absoluto.</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura (não é possível adicionar uma nova relação).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido.  

ou - 
Já existe uma parte com o <paramref name="id" /> especificado.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
      <summary>Exclui uma <see cref="T:System.IO.Packaging.PackageRelationship" /> de nível de parte.</summary>
      <param name="id">A <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> da relação a ser excluída.</param>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> é <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente leitura (não é possível excluir relações).</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
      <summary>Quando substituído em uma classe derivada, retorna o tipo MIME do conteúdo de peça.</summary>
      <returns>O tipo MIME do conteúdo da parte.</returns>
      <exception cref="T:System.NotSupportedException">A classe derivada não fornece uma implementação de substituição necessária para o método <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
      <summary>Retorna a relação que tenha um <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> especificado.</summary>
      <param name="id">A <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> da relação a ser retornada.</param>
      <returns>Uma relação que corresponde à <paramref name="id" /> especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> é uma cadeia de caracteres vazia.</exception>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).  

ou - 
Não existe uma relação com o <paramref name="id" /> especificado no pacote.</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação (não é não possível ler informações de relação).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationships">
      <summary>Retorna uma coleção de todas as relações que pertencem a essa parte.</summary>
      <returns>Uma coleção de todas as relações que pertencem à parte.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação (não é não possível ler informações de relação).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
      <summary>Retorna uma coleção de relações que correspondem a um <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> especificado.</summary>
      <param name="relationshipType">O <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> das relações a serem localizadas e retornadas na coleção.</param>
      <returns>Uma coleção de relações que correspondem ao <paramref name="relationshipType" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> é uma cadeia de caracteres vazia.</exception>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação (não é não possível ler informações de relação).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream">
      <summary>Retorna o fluxo de dados de conteúdo da parte.</summary>
      <returns>O fluxo de dados de conteúdo da parte.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O objeto de fluxo retornado pelo método <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> da subclasse derivada é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
      <summary>Retorna o fluxo de conteúdo aberto em um <see cref="T:System.IO.FileMode" /> de E/S especificado.</summary>
      <param name="mode">O modo de E/S em que abrir o fluxo de conteúdo.</param>
      <returns>O fluxo de conteúdo da parte.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="mode" /> não é um valor de enumeração <see cref="T:System.IO.FileMode" /> válido.</exception>
      <exception cref="T:System.IO.IOException">O parâmetro <paramref name="mode" /> não é compatível com o fluxo da parte e do pacote.  

ou - 
O objeto de fluxo retornado pelo método <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> da subclasse derivada é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Retorna o fluxo de conteúdo da parte aberto com um <see cref="T:System.IO.FileMode" /> e <see cref="T:System.IO.FileAccess" /> especificados.</summary>
      <param name="mode">O modo de E/S em que abrir o fluxo de conteúdo.</param>
      <param name="access">As permissões de acesso a serem usadas para abrir o fluxo de conteúdo.</param>
      <returns>O fluxo de conteúdo da parte.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="mode" /> não é um valor de enumeração <see cref="T:System.IO.FileMode" /> válido.  

ou - 
O parâmetro <paramref name="access" /> não é um valor de enumeração <see cref="T:System.IO.FileAccess" /> válido.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> ou <paramref name="access" /> não é compatível com o fluxo da parte e do pacote.  

ou - 
O parâmetro <paramref name="access" /> é especificado como <see cref="F:System.IO.FileAccess.Read" />, mas o parâmetro <paramref name="mode" /> requer acesso de gravação.  (Valores <see cref="T:System.IO.FileMode" /> de <see cref="F:System.IO.FileMode.Create" />, <see cref="F:System.IO.FileMode.CreateNew" />, <see cref="F:System.IO.FileMode.Truncate" /> e <see cref="F:System.IO.FileMode.Append" /> requerem o acesso <see cref="F:System.IO.FileAccess.Write" /> ou <see cref="F:System.IO.FileAccess.ReadWrite" />.) 
ou - 
O objeto de fluxo retornado pelo método <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> da subclasse derivada é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Quando substituído em uma classe derivada, retorna o fluxo de conteúdo da parte aberto com um <see cref="T:System.IO.FileMode" /> e <see cref="T:System.IO.FileAccess" /> especificados.</summary>
      <param name="mode">O modo de E/S em que abrir o fluxo de conteúdo.</param>
      <param name="access">As permissões de acesso a serem usadas para abrir o fluxo de conteúdo.</param>
      <returns>O fluxo de dados de conteúdo da parte.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Package">
      <summary>Obtém o <see cref="T:System.IO.Packaging.Package" /> pai da parte.</summary>
      <returns>O pacote pai da parte.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
      <summary>Retorna um valor que indica se esta parte tem uma relação com uma <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> especificada.</summary>
      <param name="id">A <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> da relação a ser verificada.</param>
      <returns>
        <see langword="true" /> se essa parte tiver uma relação com a <paramref name="id" /> especificada, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> não é um identificador XML válido.</exception>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
      <exception cref="T:System.IO.IOException">O pacote é somente gravação (não é não possível ler informações de relação).</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Uri">
      <summary>Obtém o URI da parte.</summary>
      <returns>O URI da parte relativa à raiz do pacote.</returns>
      <exception cref="T:System.InvalidOperationException">A parte foi excluída.  

ou - 
O <see cref="P:System.IO.Packaging.PackagePart.Package" /> não está aberto (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> ou <see cref="M:System.IO.Packaging.Package.Close" /> foi chamado).</exception>
    </member>
    <member name="T:System.IO.Packaging.PackagePartCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.IO.Packaging.PackagePart" /> .</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
      <summary>Retorna um enumerador para iterar pelas partes na coleção.</summary>
      <returns>Um enumerador para iterar pelos elementos <see cref="T:System.IO.Packaging.PackagePart" /> na coleção.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#Generic#IEnumerable{System#IO#Packaging#PackagePart}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageProperties">
      <summary>Representa as propriedades princiapais de um <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.Packaging.PackageProperties" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Category">
      <summary>Quando substituído em uma classe derivada, obtém ou define a categoria de <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>A categoria do conteúdo contido no <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
      <summary>Quando substituído em uma classe derivada, obtém ou define um valor que representa o status de <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>O status do <see cref="T:System.IO.Packaging.Package" /> conteúdo.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentType">
      <summary>Quando substituído em uma classe derivada, obtém ou define um valor que representa o tipo de conteúdo contido em <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>O tipo de conteúdo contido no <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Created">
      <summary>Quando substituído em uma classe derivada, obtém ou define a data em que o <see cref="T:System.IO.Packaging.Package" /> foi criado.</summary>
      <returns>A data e a hora <see cref="T:System.IO.Packaging.Package" /> em que o foi criado inicialmente.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Creator">
      <summary>Quando substituído em uma classe derivada, obtém ou define um valor que identifica o indivíduo ou a entidade que criou o <see cref="T:System.IO.Packaging.Package" /> e seu conteúdo.</summary>
      <returns>O indivíduo ou a entidade que criou <see cref="T:System.IO.Packaging.Package" /> o e seu conteúdo.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Description">
      <summary>Quando substituído em uma classe derivada, obtém ou define uma descrição do conteúdo dentro do <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>Uma descrição do conteúdo contido no <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose">
      <summary>Libera todos os recursos usados pela instância <see cref="T:System.IO.Packaging.PackageProperties" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pela instância de <see cref="T:System.IO.Packaging.PackageProperties" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Identifier">
      <summary>Quando substituído em uma classe derivada, obtém ou define um valor que identifica inequivocamente o <see cref="T:System.IO.Packaging.Package" /> e seu conteúdo.</summary>
      <returns>Um valor que identifica inequivocamente o <see cref="T:System.IO.Packaging.Package" /> e seu conteúdo.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Keywords">
      <summary>Quando substituído em uma classe derivada, obtém ou define um valor que definem um conjunto delimitado de palavras-chave para dar suporte a pesquisa e indexação de <see cref="T:System.IO.Packaging.Package" /> e seu conteúdo.</summary>
      <returns>Um conjunto delimitado de palavras-chave para dar suporte à pesquisa e à <see cref="T:System.IO.Packaging.Package" /> indexação do conteúdo e.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Language">
      <summary>Quando substituído em uma classe derivada, obtém ou define um valor que identifica o idioma do conteúdo <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>Um valor que identifica o <see cref="T:System.IO.Packaging.Package" /> idioma do conteúdo.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
      <summary>Quando substituído em uma classe derivada, obtém ou define um valor que identifica o usuário que modificou o conteúdo de <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>O usuário que modificou o <see cref="T:System.IO.Packaging.Package" /> conteúdo pela última vez.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
      <summary>Quando substituído em uma classe derivada, obtém ou define a data e hora em que o conteúdo <see cref="T:System.IO.Packaging.Package" /> foi impresso pela última vez.</summary>
      <returns>A data e a hora <see cref="T:System.IO.Packaging.Package" /> em que o conteúdo foi impresso pela última vez.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Modified">
      <summary>Quando substituído em uma classe derivada, obtém ou define a data em que o <see cref="T:System.IO.Packaging.Package" /> foi alterado pela última vez.</summary>
      <returns>A data e a hora <see cref="T:System.IO.Packaging.Package" /> em que a última alteração foi alterada.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Revision">
      <summary>Quando substituído em uma classe derivada, obtém ou define o número de revisão de <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>O número de revisão do <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Subject">
      <summary>Quando substituído em uma classe derivada, obtém ou define o tópico sobre o conteúdo de <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>O tópico do <see cref="T:System.IO.Packaging.Package" /> conteúdo.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Title">
      <summary>Quando substituído em uma classe derivada, obtém ou define o nome fornecido para o <see cref="T:System.IO.Packaging.Package" /> e seu conteúdo.</summary>
      <returns>O nome fornecido para o <see cref="T:System.IO.Packaging.Package" /> e seu conteúdo.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Version">
      <summary>Quando substituído em uma classe derivada, obtém ou define o número de versão de <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>O número de versão do <see cref="T:System.IO.Packaging.Package" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationship">
      <summary>Representa uma associação entre um <see cref="T:System.IO.Packaging.Package" /> ou <see cref="T:System.IO.Packaging.PackagePart" /> de origem e um objeto de destino que pode ser um <see cref="T:System.IO.Packaging.PackagePart" /> ou um recurso externo.</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Id">
      <summary>Obtém uma cadeia de caracteres que identifica o relacionamento.</summary>
      <returns>Uma cadeia de caracteres que identifica a relação.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Package">
      <summary>Obtém o <see cref="T:System.IO.Packaging.Package" /> que contém esse relacionamento.</summary>
      <returns>O pacote que contém essa relação.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
      <summary>Obtém o nome de tipo qualificado do relacionamento.</summary>
      <returns>O nome do tipo qualificado da relação.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
      <summary>Obtém o URI do pacote ou da parte que é proprietária do relacionamento.</summary>
      <returns>O URI deou<see cref="T:System.IO.Packaging.PackagePart" />quepossuiarelação. <see cref="T:System.IO.Packaging.Package" /></returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
      <summary>Obtém um valor que indica se o destino do relacionamento é <see cref="F:System.IO.Packaging.TargetMode.Internal" /> ou <see cref="F:System.IO.Packaging.TargetMode.External" /> para o <see cref="T:System.IO.Packaging.Package" />.</summary>
      <returns>Um valor de enumeração que indica <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" /> se faz referência <see cref="F:System.IO.Packaging.TargetMode.Internal" /> a <see cref="F:System.IO.Packaging.TargetMode.External" /> um recurso <see cref="T:System.IO.Packaging.Package" />ou ao.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
      <summary>Obtém o URI do recurso de destino do relacionamento.</summary>
      <returns>O URI do recurso de destino.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipCollection">
      <summary>Representa uma coleção de elementos <see cref="T:System.IO.Packaging.PackageRelationship" /> que são propriedade de um <see cref="T:System.IO.Packaging.PackagePart" /> ou <see cref="T:System.IO.Packaging.Package" /> fornecido.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
      <summary>Retorna um enumerador para iterar pelos relacionamentos na coleção.</summary>
      <returns>Um enumerador para iterar pelos elementos <see cref="T:System.IO.Packaging.PackageRelationship" /> na coleção.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Este tipo ou membro dá suporte à infraestrutura do Windows Presentation Foundation e não se destina a ser usado diretamente do código.</summary>
      <returns>Não use – use <see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelector">
      <summary>Define os critérios <see cref="T:System.IO.Packaging.PackageRelationship" /> para selecionar as relações em nível de parte ou pacote.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />.</summary>
      <param name="sourceUri">O URI (Uniform Resource Identifier) do <see cref="T:System.IO.Packaging.PackagePart" /> ou o <see cref="T:System.IO.Packaging.Package" /> (<c>SourceUri</c>= "/") que é proprietário do relacionamento.</param>
      <param name="selectorType">O tipo do <paramref name="selectionCriteria" />, por relação <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> ou relação <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />.</param>
      <param name="selectionCriteria">A cadeia de caracteres de qualificação que é usada para selecionar as relações com base no <paramref name="selectorType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceUri" /> ou <paramref name="selectionCriteria" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="selectorType" /> não é válido.</exception>
      <exception cref="T:System.Xml.XmlException">O parâmetro <paramref name="selectorType" /> é um <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />, mas <paramref name="selectionCriteria" /> não é um Definição de XSD (esquema XML) ID (identificador) válido.</exception>
      <exception cref="T:System.ArgumentException">O <paramref name="selectionCriteria" /> não é válido para o <paramref name="selectorType" /> especificado.

ou -

O <paramref name="sourceUri" /> não é a raiz <see cref="T:System.IO.Packaging.Package" /> ("/") e também não é um <see cref="T:System.IO.Packaging.PackagePart" /> URI válido.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
      <summary>Retorna uma lista de objetos <see cref="T:System.IO.Packaging.PackageRelationship" /> que correspondem o <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />, <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> e <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" /> definidos.</summary>
      <param name="package">O pacote do qual selecionar as relações com base nos critérios de seleção.</param>
      <returns>Uma lista de relações que correspondem aos parâmetros de seleção especificados para o construtor <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
      <summary>Obtém os critérios de seleção especificados para o construtor <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />.</summary>
      <returns>Os critérios de seleção com base <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> no <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> de <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> ou especificados para <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> o construtor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
      <summary>Obtém o <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" /> especificado para o construtor <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />.</summary>
      <returns>O tipo de <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> seletor <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> ou especificado para <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> o construtor.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
      <summary>Obtém o URI do pacote raiz ("/") ou a parte <see cref="P:System.IO.Packaging.PackagePart.Uri" /> especificada para o construtor <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> como o proprietário da relação.</summary>
      <returns>O URI do pacote raiz ("/") ou <see cref="P:System.IO.Packaging.PackagePart.Uri" /> parte especificada para <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> o construtor como o proprietário da relação.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
      <summary>Especifica o tipo de critério de seleção que é usado para corresponder e retornar seleções de <see cref="T:System.IO.Packaging.PackageRelationship" /> por meio de um <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
      <summary>As seleções de <see cref="T:System.IO.Packaging.PackageRelationship" /> são por <see cref="P:System.IO.Packaging.PackageRelationship.Id" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
      <summary>As seleções de <see cref="T:System.IO.Packaging.PackageRelationship" /> são por <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />.</summary>
    </member>
    <member name="T:System.IO.Packaging.PackUriHelper">
      <summary>Fornece métodos de utilitário para compor e analisar objetos URI de pacote.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
      <summary>Retorna um valor que indica se os dois URI "pack://" são equivalentes.</summary>
      <param name="firstPackUri">O primeiro URI "pack://".</param>
      <param name="secondPackUri">O segundo URI "pack://".</param>
      <returns>Um inteiro com sinal que indica a relação entre <paramref name="firstPackUri" /> e <paramref name="secondPackUri" />.  
  Valor 
  Significado 
  Menor que 0 
 <paramref name="firstPackUri" /> é menor que <paramref name="secondPackUri" />.  

  0 
 <paramref name="firstPackUri" /> equivale a <paramref name="secondPackUri" />.  

  Maior que 0 
 <paramref name="firstPackUri" /> é maior que <paramref name="secondPackUri" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPackUri" /> ou <paramref name="secondPackUri" /> não é um URI absoluto.  

ou - 
<paramref name="firstPackUri" /> ou <paramref name="secondPackUri" /> não começa com um esquema "pack://".</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
      <summary>Retorna um valor que indica se a parte URIs dos dois pacotes é equivalente.</summary>
      <param name="firstPartUri">O URI do primeiro <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <param name="secondPartUri">O URI do segundo <see cref="T:System.IO.Packaging.PackagePart" />.</param>
      <returns>Um valor que indica a relação entre <paramref name="firstPartUri" /> e <paramref name="secondPartUri" />.  
  Valor 
  Significado 
  Menor que 0 
 <paramref name="firstPartUri" /> é menor que <paramref name="secondPartUri" />.  

  0 
 <paramref name="firstPartUri" /> equivale a <paramref name="secondPartUri" />.  

  Maior que 0 
 <paramref name="firstPartUri" /> é maior que <paramref name="secondPartUri" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPartUri" /> ou <paramref name="secondPartUri" /> não é uma sintaxe de parte URI válida.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
      <summary>Cria um novo URI "pack://" que aponta para um pacote.</summary>
      <param name="packageUri">O URI do <see cref="T:System.IO.Packaging.Package" /> referenciado.</param>
      <returns>O URI "pack://" para o <see cref="T:System.IO.Packaging.Package" /> referenciado pelo <paramref name="packageUri" /> fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> não é um URI absoluto.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
      <summary>Cria um URI "pack://" dado <see cref="T:System.IO.Packaging.Package" /> URI e o URI de uma parte do pacote.</summary>
      <param name="packageUri">O URI do <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">O URI do <see cref="T:System.IO.Packaging.PackagePart" /> no pacote.</param>
      <returns>O URI "pack://" do <see cref="T:System.IO.Packaging.PackagePart" /> fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> não é um URI absoluto.  

ou - 
<paramref name="partUri" /> não é uma sintaxe de URI de parte válida.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
      <summary>Cria um URI "pack://" dado um <see cref="T:System.IO.Packaging.Package" /> URI, o URI de uma parte do pacote e um fragmento "#" a ser acrescentado.</summary>
      <param name="packageUri">O URI do <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="partUri">O URI do <see cref="T:System.IO.Packaging.PackagePart" /> no pacote.</param>
      <param name="fragment">Uma referência "#" que identifica um elemento na parte do pacote.</param>
      <returns>O URI de pacote que identifica o pacote especificado, a parte do pacote e o fragmento.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> não é um URI absoluto.  

ou - 
<paramref name="partUri" /> não é uma sintaxe de URI de parte válida.  

ou - 
<paramref name="fragment" /> está vazio ou começa com "#".</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
      <summary>Cria uma URI <see cref="T:System.IO.Packaging.PackagePart" /> formatada.</summary>
      <param name="partUri">O URI do <see cref="T:System.IO.Packaging.PackagePart" /> dentro do pacote.</param>
      <returns>Uma URI <see cref="T:System.IO.Packaging.PackagePart" /> formatada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não é um <see cref="T:System.Uri" /> absoluto.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
      <summary>Retorna o formato normalizado de um URI <see cref="T:System.IO.Packaging.PackagePart" /> especificado.</summary>
      <param name="partUri">O URI <see cref="T:System.IO.Packaging.PackagePart" /> a ser normalizado.</param>
      <returns>O formato normalizado do <paramref name="partUri" /> fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> não tem uma sintaxe <see cref="T:System.Uri" /> válida.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
      <summary>Retorna o URI interno que aponta para o pacote inteiro de um URI "pack://" especificado.</summary>
      <param name="packUri">O URI "pack://" do qual retornar o URI do <see cref="T:System.IO.Packaging.Package" />.</param>
      <returns>O URI do <see cref="T:System.IO.Packaging.Package" /> do <paramref name="packUri" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packUri" /> não é um <see cref="T:System.Uri" /> absoluto.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
      <summary>Retorna o URI de um <see cref="T:System.IO.Packaging.PackagePart" /> dentro de um URI de pacote especificado.</summary>
      <param name="packUri">O URI de pacote do qual retornar o <see cref="T:System.IO.Packaging.PackagePart" /> URI.</param>
      <returns>O URI do <see cref="T:System.IO.Packaging.PackagePart" /> no <paramref name="packUri" /> determinado ou <see langword="null" /> se <paramref name="packUri" /> apontar para um pacote, em vez de um <see cref="T:System.IO.Packaging.PackagePart" />.</returns>
      <exception cref="T:System.ArgumentNullException">Se o <paramref name="packUri" /> for <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Se <paramref name="packUri" /> não for um <see cref="T:System.Uri" /> absoluto.

ou -

<paramref name="packUri" /> não tem o esquema "pack://".

ou - 
O partUri extraído de <paramref name="packUri" /> não está em conformidade com a sintaxe partUri válida.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
      <summary>Retorna o URI da parte da relação associada a um <see cref="T:System.IO.Packaging.PackagePart" /> especificado.</summary>
      <param name="partUri">O <see cref="P:System.IO.Packaging.PackagePart.Uri" /> do <see cref="T:System.IO.Packaging.PackagePart" /> para retornar o URI do <see cref="T:System.IO.Packaging.PackageRelationship" /> associado.</param>
      <returns>O URI da parte de <see cref="T:System.IO.Packaging.PackageRelationship" /> associada ao <see cref="T:System.IO.Packaging.PackagePart" /> identificado por <paramref name="partUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A sintaxe <paramref name="partUri" /> não é válida para o URI da parte do pacote.  

ou - 
<paramref name="partUri" /> é um URI absoluto.  

ou - 
<paramref name="partUri" /> faz referência a uma parte da relação.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
      <summary>Retorna o URI relativo entre dois <see cref="T:System.IO.Packaging.PackagePart" /> URIs especificados.</summary>
      <param name="sourcePartUri">O URI da parte de origem.</param>
      <param name="targetPartUri">O URI da parte de destino.</param>
      <returns>O URI relativo de <paramref name="sourcePartUri" /> para <paramref name="targetPartUri" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> ou <paramref name="targetPartUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> ou <paramref name="targetPartUri" /> não tem uma sintaxe <see cref="T:System.Uri" /> válida.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
      <summary>Retorna o <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> do <see cref="T:System.IO.Packaging.PackageRelationship" /> com um URI especificado.</summary>
      <param name="relationshipPartUri">O URI da parte da relação da qual o <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> será retornado.</param>
      <returns>O <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> do <see cref="T:System.IO.Packaging.PackagePart" /> da relação com o <paramref name="relationshipPartUri" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipPartUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipPartUri" /> é um URI absoluto.  

ou - 
A sintaxe <paramref name="relationshipPartUri" /> não é válida para um <see cref="T:System.IO.Packaging.PackagePart" />.  

ou - 
<paramref name="relationshipPartUri" /> não faz referência a uma parte de relação.  

ou - 
O <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> da parte da relação faz referência a outra parte da relação (inválido).</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
      <summary>Retorna um valor que indica se um URI especificado é o URI de um componente de <see cref="T:System.IO.Packaging.PackageRelationship" />.</summary>
      <param name="partUri">O URI a ser verificado quanto a uma parte de <see cref="T:System.IO.Packaging.PackageRelationship" />.</param>
      <returns>
        <see langword="true" /> de <paramref name="partUri" /> identificar uma parte de <see cref="T:System.IO.Packaging.PackageRelationship" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> é um URI absoluto.  

ou - 
<paramref name="partUri" /> é uma sintaxe <see cref="T:System.IO.Packaging.PackagePart" /> inválida.</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
      <summary>Retorna o URI de uma parte, dado o URI da parte de origem e um URI com um caminho relativo para uma parte de destino.</summary>
      <param name="sourcePartUri">O URI da parte de origem ou "/" para designar a raiz de <see cref="T:System.IO.Packaging.Package" />.</param>
      <param name="targetUri">O URI relativo à parte de destino.</param>
      <returns>O URI da parte de destino resolvido entre os parâmetros <paramref name="SourcePartUri" /> e <paramref name="targetUri" /> especificados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> ou <paramref name="targetUri" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> não é um URI de parte válido.  

ou - 
<paramref name="targetUri" /> não é um URI relativo válido.</exception>
    </member>
    <member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
      <summary>Define o "pacote" do nome do esquema do URI "pack://".</summary>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>Representa informações de DRM (gerenciamento de direitos digitais) que são armazenadas em um <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>Obtém ou define o <see cref="T:System.Security.RightsManagement.CryptoProvider" /> para acessar o fluxo de dados criptografados de gerenciamento de direitos do pacote.</summary>
      <returns>O <see cref="T:System.Security.RightsManagement.CryptoProvider" /> para acessar as informações do Rights Management.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Exclui o <see cref="T:System.Security.RightsManagement.UseLicense" /> de um usuário especificado do fluxo de dados criptografados de gerenciamento de direitos.</summary>
      <param name="userKey">O usuário do <see cref="T:System.Security.RightsManagement.UseLicense" /> a ser excluído.</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>Retorna uma coleção de dicionários de pares chave-valor de usuário e <see cref="T:System.Security.RightsManagement.UseLicense" /> do fluxo de dados criptografados de gerenciamento de direitos.</summary>
      <returns>Uma coleção de pares chave-valor de usuário e <see cref="T:System.Security.RightsManagement.UseLicense" /> contidos no pacote protegido por direitos gerenciados.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>Retorna o <see cref="T:System.Security.RightsManagement.PublishLicense" /> inserido do fluxo de dados criptografados de gerenciamento de direitos.</summary>
      <returns>O <see cref="T:System.Security.RightsManagement.PublishLicense" /> inserido ou então <see langword="null" /> se o pacote não contém um <see cref="T:System.Security.RightsManagement.PublishLicense" />.</returns>
      <exception cref="T:System.IO.FileFormatException">As informações de gerenciamento de direitos neste pacote não podem ser lidas pela versão atual dessa classe.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>Retorna o <see cref="T:System.Security.RightsManagement.UseLicense" /> inserido de um usuário especificado do fluxo de dados criptografados de gerenciamento de direitos.</summary>
      <param name="userKey">O usuário ou grupo de usuários para o qual retornar o <see cref="T:System.Security.RightsManagement.UseLicense" />.</param>
      <returns>O <see cref="T:System.Security.RightsManagement.UseLicense" /> para o usuário especificado ou então <see langword="null" /> se o pacote não contém um <see cref="T:System.Security.RightsManagement.UseLicense" /> correspondente ao <paramref name="userKey" /> fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="userKey" /> é <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">As informações de gerenciamento de direitos neste pacote não podem ser lidas pela versão atual dessa classe.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>Salva um <see cref="T:System.Security.RightsManagement.PublishLicense" /> fornecido no fluxo de dados criptografados de gerenciamento de direitos.</summary>
      <param name="publishLicense">A licença de publicação a ser armazenada e inserida no pacote.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="publishLicense" /> é <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">As informações de gerenciamento de direitos neste pacote não podem ser lidas pela versão atual dessa classe.</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>Salva um <see cref="T:System.Security.RightsManagement.UseLicense" /> fornecido de um usuário especificado no fluxo de dados criptografados de gerenciamento de direitos.</summary>
      <param name="userKey">O usuário do <see cref="T:System.Security.RightsManagement.UseLicense" />.</param>
      <param name="useLicense">A licença de uso a ser armazenada e inserida no pacote.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="userKey" /> ou <paramref name="useLicense" /> é <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileFormatException">As informações de gerenciamento de direitos neste pacote não podem ser lidas pela versão atual dessa classe.</exception>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary>Especifica os argumentos do evento fornecidos para o <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary>Obtém a assinatura digital sendo verificada.</summary>
      <returns>A assinatura digital que está sendo verificada.</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary>Obtém o erro de verificação de assinatura.</summary>
      <returns>O erro de verificação de assinatura.</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>Fornece acesso e informações para a manipulação de repositórios de dados em um <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>Cria um novo fluxo com um determinado nome.</summary>
      <param name="name">O nome do novo fluxo.</param>
      <returns>O novo fluxo com o <paramref name="name" /> especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>Cria um novo fluxo com um determinado nome, <see cref="T:System.IO.Packaging.CompressionOption" /> e <see cref="T:System.IO.Packaging.EncryptionOption" />.</summary>
      <param name="name">O nome do novo fluxo.</param>
      <param name="compressionOption">A opção de compactação do fluxo de dados.</param>
      <param name="encryptionOption">A opção de criptografia para o fluxo de dados.</param>
      <returns>O novo fluxo com o <paramref name="name" />, o <paramref name="compressionOption" /> e o <paramref name="encryptionOption" /> especificados.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>Cria um novo <see cref="T:System.IO.Packaging.StorageInfo" /> filho com este <see cref="T:System.IO.Packaging.StorageInfo" /> como pai.</summary>
      <param name="name">O nome do novo armazenamento de dados filho.</param>
      <returns>O novo armazenamento de dados filho.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>Exclui o fluxo com um nome especificado.</summary>
      <param name="name">O nome <see cref="T:System.IO.Packaging.StreamInfo" /> do fluxo a excluir.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>Exclui um sub-repositório especificado.</summary>
      <param name="name">O nome do sub-repositório a excluir.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>Retorna a instância <see cref="T:System.IO.Packaging.StreamInfo" /> com o nome fornecido.</summary>
      <param name="name">O nome da instância <see cref="T:System.IO.Packaging.StreamInfo" /> a retornar.</param>
      <returns>O fluxo com o <paramref name="name" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>Retorna uma matriz de instâncias <see cref="T:System.IO.Packaging.StreamInfo" /> contidas neste repositório no momento.</summary>
      <returns>Uma matriz dos objetos <see cref="T:System.IO.Packaging.StreamInfo" />, cada um apontando para um fluxo de E/S definido dentro desse repositório.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>Retorna o sub-repositório filho com um determinado nome.</summary>
      <param name="name">O nome do sub-repositório a retornar.</param>
      <returns>O sub-repositório filho com o <paramref name="name" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>Retorna uma matriz de sub-repositórios filho contidos neste repositório no momento.</summary>
      <returns>Uma matriz de objetos <see cref="T:System.IO.Packaging.StorageInfo" />, cada um apontando para um sub-repositório definido neste repositório.</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>Obtém o nome do repositório.</summary>
      <returns>O nome deste repositório.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>Retorna um valor que indica se um dado fluxo existe.</summary>
      <param name="name">O nome <see cref="T:System.IO.Packaging.StreamInfo" /> a verificar.</param>
      <returns>
        <see langword="true" /> se um fluxo com o <paramref name="name" /> especificado existir; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>Retorna um valor que indica se um dado sub-repositório filho existe.</summary>
      <param name="name">O nome do <see cref="T:System.IO.Packaging.StorageInfo" /> filho a verificar.</param>
      <returns>
        <see langword="true" /> se um sub-repositório filho com o <paramref name="name" /> especificado existir; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>Fornece acesso e informações para a manipulação de fluxos de E/S em um <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>Obtém a configuração <see cref="T:System.IO.Packaging.CompressionOption" /> do fluxo.</summary>
      <returns>A configuração da opção de compactação para o fluxo do pacote.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>Obtém a configuração <see cref="T:System.IO.Packaging.EncryptionOption" /> do fluxo.</summary>
      <returns>A configuração da opção de criptografia para o fluxo do pacote.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>Retorna um fluxo aberto em um <see cref="T:System.IO.FileMode" /> e <see cref="T:System.IO.FileAccess" /> padrão.</summary>
      <returns>O fluxo de E/S aberto em um <see cref="T:System.IO.Packaging.Package" /> raiz <see cref="T:System.IO.FileMode" /> padrão e <see cref="T:System.IO.FileAccess" />.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>Retorna um fluxo de E/S aberto em um <see cref="T:System.IO.FileMode" /> especificado.</summary>
      <param name="mode">O modo de arquivo no qual abrir o fluxo.</param>
      <returns>O fluxo aberto no arquivo <paramref name="mode" /> especificado.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>Retorna um fluxo de E/S aberto em um <see cref="T:System.IO.FileMode" /> especificado e com um <see cref="T:System.IO.FileAccess" /> determinado.</summary>
      <param name="mode">O modo de arquivo no qual abrir o fluxo.</param>
      <param name="access">O modo de acesso de arquivo no qual o fluxo será lido ou gravado.</param>
      <returns>O fluxo de E/S aberto no <see cref="T:System.IO.FileMode" /> especificado e com um <see cref="T:System.IO.FileAccess" /> determinado.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>Obtém o nome do fluxo.</summary>
      <returns>O nome deste fluxo.</returns>
    </member>
    <member name="T:System.IO.Packaging.TargetMode">
      <summary>Especifica se o destino de um <see cref="T:System.IO.Packaging.PackageRelationship" /> está dentro ou fora do <see cref="T:System.IO.Packaging.Package" />.</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.External">
      <summary>A relação referencia um recurso externo ao pacote.</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.Internal">
      <summary>A relação referencia uma parte que está dentro do pacote.</summary>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>Especifica o resultado de uma verificação de certificado ou de assinatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>O certificado X.509 não está disponível para verificar a assinatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>O certificado X.509 não é válido.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>A assinatura não é válida.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>O pacote ou a parte especificada não tem assinatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>Não foi encontrada uma relação de referência com a assinatura.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>A verificação foi bem-sucedida.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackage">
      <summary>Implementa uma subclasse derivada da classe base abstrata <see cref="T:System.IO.Packaging.Package" /> – a classe <see cref="T:System.IO.Packaging.ZipPackage" /> usa um arquivo morto ZIP como o repositório do contêiner. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackagePart">
      <summary>Representa uma parte armazenada em um <see cref="T:System.IO.Packaging.ZipPackage" />.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>O <see cref="T:System.Security.Permissions.MediaPermission" /> descreve um conjunto de permissões de segurança que controla a capacidade de mídias de áudio, imagem e vídeo funcionarem um aplicativo WPF (Windows Presentation Foundation) de confiança parcial.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.MediaPermission" />.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.MediaPermission" /> especificando o nível de permissão de áudio.</summary>
      <param name="permissionAudio">Um valor enumerado de <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.MediaPermission" /> especificando os níveis de permissão de áudio, vídeo e imagem.</summary>
      <param name="permissionAudio">Um valor enumerado de <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</param>
      <param name="permissionVideo">Um valor enumerado de <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
      <param name="permissionImage">Um valor enumerado de <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.MediaPermission" /> especificando o nível de permissão de imagem.</summary>
      <param name="permissionImage">Um valor enumerado de <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.MediaPermission" /> especificando o nível de permissão de vídeo.</summary>
      <param name="permissionVideo">Um valor enumerado de <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.MediaPermission" /> especificando um estado de permissão.</summary>
      <param name="state">Um valor enumerado de <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>Obtém o valor atual do nível de permissão de áudio.</summary>
      <returns>O nível de permissão de áudio.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>Cria e retorna uma cópia idêntica da permissão atual.</summary>
      <returns>Uma cópia da permissão atual.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstrói um a permissão com um estado especificado de uma codificação XML.</summary>
      <param name="securityElement">A codificação de XML a usar para reconstruir a permissão.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>Obtém o valor atual do nível de permissão de imagem.</summary>
      <returns>O nível de permissão de imagem.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>Cria e retorna uma permissão que é a interseção de permissão atual e da permissão especificada.</summary>
      <param name="target">Uma permissão para ter interseção com a permissão atual. Ele deve ser do mesmo tipo da permissão atual.</param>
      <returns>A intersecção de duas permissões é uma permissão que descreve o estado que ambas descrevem em comum. Somente uma demanda que passe ambas as permissões originais será válida para a permissão interseccionada.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determina se a permissão atual é um subconjunto da permissão especificada.</summary>
      <param name="target">Uma permissão que deve ser testada quanto à relação de subconjunto. Essa permissão deve ser do mesmo tipo da permissão atual.</param>
      <returns>
        <see langword="true" /> se a permissão atual for um subconjunto da permissão especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>Retorna um valor que indica se a permissão atual é irrestrita.</summary>
      <returns>
        <see langword="true" /> se as permissões para imagem, áudio e vídeo forem todas irrestritas; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>Cria uma codificação XML da permissão e de seu estado atual.</summary>
      <returns>Uma codificação XML da permissão, incluindo quaisquer informações de estado.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>Cria uma permissão que é a união entre a permissão atual e a permissão especificada.</summary>
      <param name="target">Uma permissão a ser combinada com a permissão atual. Ele deve ser do mesmo tipo da permissão atual.</param>
      <returns>Uma nova permissão que representa a união da permissão atual e da permissão especificada.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>Obtém o valor atual do nível de permissão de vídeo.</summary>
      <returns>O nível de permissão de mídia.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>Permite que as ações de segurança para <see cref="T:System.Security.Permissions.MediaPermission" /> sejam aplicadas ao código usando a segurança declarativa.</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Inicializa uma nova instância de <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <param name="action">Um dos valores de <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>Obtém ou define o nível de permissão de áudio para o <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>O estado do <see cref="T:System.Security.Permissions.MediaPermissionAudio" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>Cria e retorna um novo <see cref="T:System.Security.Permissions.MediaPermission" />.</summary>
      <returns>Um <see cref="T:System.Security.Permissions.MediaPermission" /> que corresponde a este atributo.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>Obtém ou define o nível de permissão de imagem para o <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>O estado do <see cref="T:System.Security.Permissions.MediaPermissionImage" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>Obtém ou define o nível de permissão de vídeo para o <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />.</summary>
      <returns>O estado do <see cref="T:System.Security.Permissions.MediaPermissionVideo" />.</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>Especifica o nível de permissão para áudio.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>Permissão que possibilita reprodução irrestrita de vídeo.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>Permissão que proíbe toda a reprodução de áudio.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>Permissão para reprodução de áudio limitada e segura, o que inclui negar o acesso de fluxo ao arquivo de imagem.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>Permissão apenas para reprodução de áudio de arquivos localizados no site de origem do aplicativo.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>Especifica o nível de permissão para imagens.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>Permissão que possibilita a exibição irrestrita da imagem.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>Permissão que proíbe a exibição de todas as imagens.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>Permissão que possibilita a exibição segura e limitada de imagem, o que inclui negar o acesso de fluxo ao arquivo de imagem.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>Permissão que somente permite a exibição de imagens localizadas no site de origem do aplicativo.</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>Especifica o nível de permissão para vídeo.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>Permissão para reprodução de vídeo irrestrita.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>Permissão que proíbe toda a reprodução de vídeo.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>Permissão para reprodução de vídeo limitada e segura, a qual inclui negar o acesso de fluxo ao arquivo de imagem.</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>Permissão apenas para reprodução de vídeo de arquivos localizados no site de origem do aplicativo.</summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>O objeto <see cref="T:System.Security.Permissions.WebBrowserPermission" /> controla a capacidade de criar o controle WebBrowser.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.WebBrowserPermission" />.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.WebBrowserPermission" /> especificando um estado de permissão.</summary>
      <param name="state">Um valor enumerado de <see cref="T:System.Security.Permissions.PermissionState" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.WebBrowserPermission" /> especificando o nível de permissão do navegador da Web.</summary>
      <param name="webBrowserPermissionLevel">Um valor enumerado de <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>Cria e retorna uma cópia idêntica da permissão atual.</summary>
      <returns>Uma cópia da permissão atual.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstrói um a permissão com um estado especificado de uma codificação XML.</summary>
      <param name="securityElement">A codificação de XML a usar para reconstruir a permissão.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>Cria e retorna uma permissão que é a interseção de permissão atual e da permissão especificada.</summary>
      <param name="target">Uma permissão para ter interseção com a permissão atual. Ele deve ser do mesmo tipo da permissão atual.</param>
      <returns>A intersecção de duas permissões é uma permissão que descreve o estado que ambas descrevem em comum. Somente uma demanda que passe ambas as permissões originais será válida para a permissão interseccionada.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determina se a permissão atual é um subconjunto da permissão especificada.</summary>
      <param name="target">Uma permissão que deve ser testada quanto à relação de subconjunto. Essa permissão deve ser do mesmo tipo da permissão atual.</param>
      <returns>
        <see langword="true" /> se a permissão atual for um subconjunto da permissão especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>Retorna um valor que indica se a permissão atual é irrestrita.</summary>
      <returns>
        <see langword="true" /> se a propriedade <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> estiver definida como <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>Obtém ou define o valor atual do nível de permissão do navegador da Web.</summary>
      <returns>O valor atual do nível de permissão do navegador da Web.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>Cria uma codificação XML da permissão e de seu estado atual.</summary>
      <returns>Uma codificação XML da permissão, incluindo quaisquer informações de estado.</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>Cria uma permissão que é a união entre a permissão atual e a permissão especificada.</summary>
      <param name="target">Uma permissão a ser combinada com a permissão atual. Ele deve ser do mesmo tipo da permissão atual.</param>
      <returns>Uma nova permissão que representa a união da permissão atual e da permissão especificada.</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>Permite que as ações de segurança para <see cref="T:System.Security.Permissions.WebBrowserPermission" /> sejam aplicadas ao código usando a segurança declarativa.</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> com o <see cref="T:System.Security.Permissions.SecurityAction" /> especificado.</summary>
      <param name="action">Um dos valores de <see cref="T:System.Security.Permissions.SecurityAction" />.</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>Cria e retorna uma nova instância da classe <see cref="T:System.Security.Permissions.WebBrowserPermission" />.</summary>
      <returns>Um <see cref="T:System.Security.Permissions.WebBrowserPermission" /> que corresponde à declaração de segurança.</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>Obtém ou define o nível atual de permissão de navegador da Web para o <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />.</summary>
      <returns>O estado do nível de permissão do navegador da Web atual.</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>Especifica o nível de permissão de um navegador da Web.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>Um navegador da Web que não pode navegar em quadros em HTML.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>Um navegador da Web que pode navegar em quadros em HTML com segurança, mas com várias restrições.</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>Um navegador da Web que pode navegar sem restrições.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>Especifica o método de autenticação do Rights Management.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>Autenticação implícita para qualquer usuário solicitante.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>Autenticação Windows Live ID.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>Autenticação Windows em um ambiente de domínio corporativo.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>A autenticação do Windows ou a autenticação Windows Live ID.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>Representa um direito concedido a um usuário para acessar informações em um documento gerenciado por direitos.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.ContentGrant" /> que concede a um <see cref="T:System.Security.RightsManagement.ContentUser" /> especificado um <see cref="T:System.Security.RightsManagement.ContentRight" /> especificado.</summary>
      <param name="user">O usuário ao qual o direito de acesso é concedido.</param>
      <param name="right">O direito de acesso concedido.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.ContentGrant" /> que concede a um <see cref="T:System.Security.RightsManagement.ContentUser" /> especificado um <see cref="T:System.Security.RightsManagement.ContentRight" /> especificado durante uma duração <see cref="T:System.DateTime" /> especificada.</summary>
      <param name="user">O usuário ao qual o direito de acesso é concedido.</param>
      <param name="right">O direito de acesso concedido.</param>
      <param name="validFrom">A data e hora de início em que o direito é iniciado.</param>
      <param name="validUntil">A data e hora de término em que o direito expira.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>Obtém o <see cref="T:System.Security.RightsManagement.ContentRight" /> concedido.</summary>
      <returns>O direito de acesso que é concedido ao <see cref="P:System.Security.RightsManagement.ContentGrant.User" />, conforme especificado para o <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> Construtor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>Obtém o usuário que recebe o acesso <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />.</summary>
      <returns>O usuário ao qual o <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> acesso é concedido, conforme especificado para o <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> Construtor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>Obtém a data e hora de início em que o <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> concedido é iniciado.</summary>
      <returns>A data e a hora de início que <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> o Granted <see cref="T:System.DateTime" />começa, ou.<see cref="F:System.DateTime.MinValue" /> Se não houver nenhuma limitação inicial.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>Obtém a data e hora de término em que o <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> concedido expira.</summary>
      <returns>A data e a hora de término que <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> a concessão expira, <see cref="T:System.DateTime" />ou.<see cref="F:System.DateTime.MaxValue" /> Se não houver nenhuma limitação final.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>Especifica direitos que podem ser concedidos a usuários para acessar o conteúdo em um documento protegido por direitos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>O usuário pode editar o documento que contém o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>O usuário pode editar e criptografar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>O usuário pode exportar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>O usuário pode extrair (copiar e colar) o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>O usuário pode encaminhar o conteúdo protegido para outro usuário.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>O usuário pode controlar o acesso programado para o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>O usuário é o proprietário do conteúdo.  O proprietário pode editar e criptografar o conteúdo protegido e descriptografar o <see cref="T:System.Security.RightsManagement.PublishLicense" /> assinado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>O usuário pode imprimir o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>O usuário pode responder ao remetente do conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>O usuário pode "responder a todos" os destinatários do conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>O usuário pode assinar digitalmente o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>O usuário pode exibir o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>O usuário pode descriptografar e exibir os direitos especificados no <see cref="T:System.Security.RightsManagement.PublishLicense" /> assinado.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>Representa um usuário ou grupo de usuários para conceder acesso a conteúdo gerenciado por direitos.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.ContentUser" />.</summary>
      <param name="name">O usuário ou nome de grupo.</param>
      <param name="authenticationType">O método de autenticação.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>Obtém uma instância da persona <see cref="T:System.Security.RightsManagement.ContentUser" /> "Qualquer pessoa".</summary>
      <returns>Uma instância do persona "qualquer pessoa <see cref="T:System.Security.RightsManagement.ContentUser" /> ".</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>Obtém o <see cref="T:System.Security.RightsManagement.AuthenticationType" /> especificado para o construtor <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />.</summary>
      <returns>O <see cref="T:System.Security.RightsManagement.AuthenticationType" /> especificado para o <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> Construtor.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa <see cref="T:System.Security.RightsManagement.ContentUser" /> é equivalente a outra instância fornecida.</summary>
      <param name="obj">A instância de usuário a ser comparada quanto à igualdade.</param>
      <returns>
        <see langword="true" /> se <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> e <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> forem iguais para o usuário e o usuário fornecido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>Retorna um código hash calculado com base nos usuários <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> e <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</summary>
      <returns>Um código hash calculado dos usuários <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> e <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>Retorna um valor que indica se o usuário está autenticado no momento.</summary>
      <returns>
        <see langword="true" /> se o usuário estiver autenticado no momento; caso contrário, <see langword="false" />.  O padrão é <see langword="false" /> até que seja autenticado.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>Obtém o nome de usuário ou usuário especificado para o construtor <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />.</summary>
      <returns>O nome de usuário ou grupo especificado para <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> o construtor.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>Obtém uma instância da persona <see cref="T:System.Security.RightsManagement.ContentUser" /> "Proprietário".</summary>
      <returns>Uma instância do persona "owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> .</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>Fornece serviços de gerenciamento de direitos digitais para criptografar e descriptografar conteúdo protegido.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>Obtém o tamanho do bloco de criptografia, em bytes.</summary>
      <returns>O tamanho do bloco de codificação, em bytes.  O tamanho de bloco padrão para criptografia AES (AES) é 8.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>Obtém uma coleção que lista os direitos que foram aprovados na verificação e que são concedidos ao usuário.</summary>
      <returns>Uma coleção que enumera os direitos que passaram na verificação e que são concedidos ao usuário.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>Obtém um valor que indica se o usuário tem direitos de descriptografia.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Security.RightsManagement.UseLicense" /> conceder aos direitos de usuário para descriptografar <see langword="false" />; caso contrário,.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>Obtém um valor que indica se o usuário tem direitos de criptografia.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Security.RightsManagement.UseLicense" /> conceder os direitos de usuário para criptografar; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>Obtém um valor que indica se <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> e <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> podem aceitar buffers que têm diferentes tamanhos de bloco.</summary>
      <returns>
        <see langword="true" />Se o buffer passado para <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> pode ter um comprimento diferente do buffer passado para <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />; caso contrário, <see langword="false" /> se os buffers passados para <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> e <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> devem ter o mesmo comprimento exato.  Para AES, o padrão <see langword="true" />é.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>Descriptografa o texto de criptografia para limpar o texto.</summary>
      <param name="cryptoText">O texto de criptografia a ser descriptografado.</param>
      <returns>O texto não criptografado descriptografado de <paramref name="cryptoText" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" /> é nulo.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">Direito de descriptografia não concedido.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Security.RightsManagement.CryptoProvider" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Security.RightsManagement.CryptoProvider" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>Criptografa o texto não criptografado para um texto de criptografia.</summary>
      <param name="clearText">O conteúdo do texto não criptografado a ser criptografado.</param>
      <returns>Texto de criptografia criptografado do <paramref name="clearText" /> determinado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" /> é nulo.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">A criptografia não é permitida.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>Libera recursos e executa uma limpeza interna antes que a instância seja recuperada pela coleta de lixo.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>Representa um par imutável (somente leitura) de cadeias de caracteres de "Nome" e "Descrição".</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</summary>
      <param name="name">O valor para a propriedade <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> da localidade.</param>
      <param name="description">O valor para a propriedade <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> da localidade.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="name" /> ou o parâmetro <paramref name="description" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>Obtém a descrição de localidade.</summary>
      <returns>A descrição da localidade.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>Indica se as propriedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> e <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> de um determinado objeto correspondem àquelas deste <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</summary>
      <param name="obj">O objeto cujas propriedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> e <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> comparar.</param>
      <returns>
        <see langword="true" /> se as propriedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> e <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> do objeto fornecido corresponderem àquelas desta instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>Obtém um código hash calculado baseado nas propriedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> e <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />.</summary>
      <returns>Um código hash calculado baseado nas propriedades <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> e <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> deste <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>Obtém o nome da localidade.</summary>
      <returns>O nome da localidade.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>Representa uma licença de publicação assinada gerenciada por direitos.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.PublishLicense" /> de uma <see cref="T:System.Security.RightsManagement.PublishLicense" /> assinada e serializada especificada.</summary>
      <param name="signedPublishLicense">Uma licença de publicação assinada e serializada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">A licença é inválida.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Tenta adquirir um <see cref="T:System.Security.RightsManagement.UseLicense" /> para um usuário ou grupo de usuários em um <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> especificado.</summary>
      <param name="secureEnvironment">Um ambiente seguro para ativação e associação de licença.</param>
      <returns>O <see cref="T:System.Security.RightsManagement.UseLicense" /> para um usuário ou grupo de usuários no <paramref name="secureEnvironment" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">A autenticação falhou.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Tenta adquirir um <see cref="T:System.Security.RightsManagement.UseLicense" /> para um usuário ou grupo de usuários em um <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> especificado.</summary>
      <param name="secureEnvironment">Um ambiente seguro para ativação e associação de licença.</param>
      <returns>O <see cref="T:System.Security.RightsManagement.UseLicense" /> para um usuário ou grupo de usuários no <paramref name="secureEnvironment" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">A autenticação falhou.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>Obtém o identificador de conteúdo criado pelo fornecedor.</summary>
      <returns>O identificador de conteúdo criado pelo Publicador.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>Retorna uma versão de <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> descriptografada desta <see cref="T:System.Security.RightsManagement.PublishLicense" /> assinada.</summary>
      <param name="cryptoProvider">O serviço de gerenciamento de direitos a ser usado para descriptografar a licença.</param>
      <returns>Uma versão descriptografada, não assinada desta licença.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>Obtém o nome de contato para o autor ou editor do conteúdo.</summary>
      <returns>O nome do contato para o autor ou o editor do conteúdo.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>Obtém o URI de contato para o autor ou editor do conteúdo.</summary>
      <returns>O contato URI (Uniform Resource Identifier) do autor ou editor do conteúdo.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>Retorna a cadeia de caracteres XrML serializada que foi usada para criar esta licença.</summary>
      <returns>A cadeia de caracteres XrML (linguagem XrML) serializada que foi usada para criar esta licença.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>Obtém o URI a ser usado para adquirir um <see cref="T:System.Security.RightsManagement.UseLicense" />.</summary>
      <returns>O URI a ser usado para adquirir um <see cref="T:System.Security.RightsManagement.UseLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>Representa uma condição de erro quando uma operação de gerenciamento de direitos não pode ser concluída com êxito.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" /> e define o repositório <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com informações sobre a exceção.</summary>
      <param name="info">O objeto que contém os dados serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" /> com um <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> fornecido.</summary>
      <param name="failureCode">O código de falha para o erro.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" /> com um <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> e um <see cref="P:System.Exception.InnerException" /> fornecidos.</summary>
      <param name="failureCode">O código de falha para o erro.</param>
      <param name="innerException">A instância de exceção que causou o erro.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" /> com um <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> e um <see cref="P:System.Exception.Message" /> fornecidos.</summary>
      <param name="failureCode">O código de falha para o erro.</param>
      <param name="message">Uma mensagem que descreve o erro.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" /> com um <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />, um <see cref="P:System.Exception.Message" /> e um <see cref="P:System.Exception.InnerException" /> fornecidos.</summary>
      <param name="failureCode">O código de falha para o erro.</param>
      <param name="message">Uma mensagem que descreve o erro.</param>
      <param name="innerException">A instância de exceção que causou o erro.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" /> com uma mensagem fornecida.</summary>
      <param name="message">Uma mensagem que descreve o erro.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.RightsManagementException" /> com um <see cref="P:System.Exception.Message" /> e um <see cref="P:System.Exception.InnerException" /> fornecidos.</summary>
      <param name="message">Uma mensagem que descreve o erro.</param>
      <param name="innerException">A instância de exceção que causou essa exceção.</param>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>Obtém o <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> do erro.</summary>
      <returns>O código de falha para o erro.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Define o repositório <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com o nome do parâmetro e informações sobre a exceção.</summary>
      <param name="info">O objeto que contém os dados serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>Especifica as condições de erro que podem ocorrer ao executar uma operação de gerenciamento de direitos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>Operação assíncrona cancelada ou ocorreu um erro não recuperável.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>Falha na ativação de licença, os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>O usuário atual não foi encontrado no AD (Active Directory) para certificação sob a autenticação do Windows.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>A operação solicitada já está em andamento.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>Possível erro de autenticação (erro HTTP 401) retornado por uma solicitação da Internet. Ou o usuário atual não tem credenciais de domínio válidas em uma tentativa de ativação de usuário silenciosa. Ou o servidor de certificação na ativação de usuário silenciosa não está na zona de sites confiáveis ou na intranet local.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>Uma constante inválida foi passada.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>A condição de acesso não é correspondida pela entidade de segurança de habilitação que é entregue à associação.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>O usuário atual não satisfaz as condições definidas na EUL (Licença de Usuário Final).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>O recurso especificado não está contido em nenhum nó WORK da licença.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>A entidade de segurança de habilitação não corresponde à entidade de segurança emitida da EUL (Licença de Usuário Final).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>O período definido para o conteúdo protegido expirou, o acesso não é mais permitido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>O computador atual não está definido na identidade de grupo gerenciado de direitos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>O usuário atual não tem direitos para acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>O grupo de direitos especificado não está na EUL (Licença de Usuário Final).</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>O usuário atual não tem direitos para acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>A licença exige que uma nova lista de revogação seja adquirida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>O usuário atual não tem direitos para acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>O usuário atual não tem direitos para acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>O usuário atual não tem direitos para acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>O usuário atual não tem direitos para acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>A EUL (Licença de Usuário Final) não contém nenhum nó WORK.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>O período definido para o conteúdo protegido expirou, o acesso não é mais permitido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>A cadeia de certificados de gerenciamento está interrompida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>Foi detectada a reversão de relógio. Não é possível acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>Não há suporte para uma operação criptográfica solicitada. Por exemplo, passar um objeto de criptografia RMS para fins de descriptografia.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>Não é possível abrir ou publicar conteúdo com permissões restritas porque foi detectado um depurador.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>Não é possível verificar o endereço de email do usuário.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>Não é possível habilitar a entidade de segurança especificada</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>A criptografia não é permitida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>Não é possível carregar o <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>Não é possível carregar o <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>O período autorizado definido no modelo de licença de emissão expirou, o acesso não é mais permitido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>A opção especificada já foi definida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>Não foi especificado um nome de usuário para a sessão de cliente</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>A HID (ID de Hardware) usada em uma tentativa de ativação de computador está formatada incorretamente. Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>A HID (ID de Hardware) usada em uma tentativa de ativação de computador é inválida. Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>A ID do conteúdo da licença não corresponde à ID de conteúdo da sessão de armazenamento de licença</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>Um tipo de objeto passado é incompatível com esta operação.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>Ao criar uma licença associada, uma licença de emissão, não uma licença de usuário final, foi especificada.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>Algumas informações estão ausentes.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>Falha em uma operação de instalação.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>O tipo de algoritmo especificado é inválido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>Falha na verificação de endereço de email do servidor RMS.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>O tipo de codificação especificado é inválido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>O ambiente ou o identificador da entidade de segurança de habilitação é inválido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>O modelo do Rights Management Services contém um ou mais erros.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>O comprimento da chave especificado em um par chave-valor é inválido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>A estrutura de licença em um dos certificados é inválida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>Não é possível validar o certificado digital assinado de gerenciamento de direitos. (O certificado assinado pode ter sido adulterado.)</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>O valor numérico especificado é inválido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>O caminho de Registro especificado é inválido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>As informações de tempo especificadas são inválidas.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>A versão de gerenciamento de direitos está incorreta.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>O tipo da chave especificado em um par chave-valor é incompatível.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>Falha em uma operação de biblioteca.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>Não há suporte para o plug-in de biblioteca especificado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>Não foi possível adquirir uma EUL (Licença de Usuário Final) do servidor de gerenciamento de direitos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>As credenciais do usuário atual não são válidas para a aquisição de uma licença.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>Uma operação está em violação da política de manifesto do gerenciamento de direitos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>Não foi possível definir os metadados especificados.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>O usuário não está ativado ou nenhum RAC (Certificado de Conta de Direitos) foi enviado e não foi encontrado nenhum no repositório de licença para corresponder à licença associada a esta sessão.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>O computador deve ser ativado antes do usuário pode ser ativado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>O gerenciamento de direitos não pode se conectar ao URI especificado para o servidor de licença.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>O conteúdo protegido está corrompido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>Uma licença necessária não está disponível.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>Não existe nenhuma licença ou certificado no índice especificado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>O conteúdo gerenciado de direitos está corrompido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>O item solicitado para exclusão não existe.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>A cota máxima do servidor de licença da EUL (Licenças de Usuário Final) foi atingida.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>O documento não contém uma Licença de Proprietário.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>Não existe nenhuma instância do atributo solicitado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>A licença especificada não foi encontrada.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>O servidor do Rights Management não permite a certificação temporária do usuário atual.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>Não foram definidas informações de revogação de licença ou certificado.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>O usuário atual não tem direitos para acessar o conteúdo protegido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>O direito solicitado não foi especificado quando o conteúdo foi publicado com o gerenciamento de direitos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>Os serviços de gerenciamento de direitos não estão configurados corretamente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>A operação foi concluída com êxito.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>O número de certificados excedeu o número máximo permitido.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>Foram criadas muitas instâncias de <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>Ocorreu um erro não especificado.  Lançado também quando um aplicativo é executado no modo de depuração.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>Se for feita uma solicitação de ativação do computador ou um certificado de conta de direitos, receber <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> indica que o aplicativo deve passar <see langword="null" /> para o parâmetro ActServInfo</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>O período definido para o conteúdo protegido expirou, o acesso não é mais permitido.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>Representa uma sessão de cliente segura para a ativação de usuário, associação de licença e outras operações de gerenciamento de direitos.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>Obtém o <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> especificado quando o <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> foi criado.</summary>
      <returns>O manifesto do aplicativo especificado para <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> o método quando <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> o é criado.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>Cria uma sessão de cliente segura após um manifesto de direitos do aplicativo, <see cref="T:System.Security.RightsManagement.AuthenticationType" /> e <see cref="T:System.Security.RightsManagement.UserActivationMode" /> serem fornecidos.</summary>
      <param name="applicationManifest">O manifesto de direitos do aplicativo.</param>
      <param name="authentication">O método de autenticação.</param>
      <param name="userActivationMode">O tipo do certificado de direitos de usuário.</param>
      <returns>Uma sessão de cliente segura para a ativação, associação de licença e outras operações de gerenciamento de direitos.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>Cria uma sessão de cliente segura para um usuário especificado com um manifesto de direitos fornecido.</summary>
      <param name="applicationManifest">O manifesto de direitos do aplicativo.</param>
      <param name="user">O usuário ou grupo de usuários para conceder acesso a conteúdo gerenciado por direitos.</param>
      <returns>Uma sessão de cliente segura para a ativação, associação de licença e outras operações de gerenciamento de direitos.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Security.RightsManagement.SecureEnvironment" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>Retorna uma lista dos usuários ativados.</summary>
      <returns>Uma lista dos usuários ativados atualmente.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>Indica se um usuário fornecido foi ativado para acessar conteúdo gerenciado por direitos.</summary>
      <param name="user">O usuário ou grupo de usuários para conceder acesso a conteúdo gerenciado por direitos.</param>
      <returns>
        <see langword="true" /> se o <paramref name="user" /> fornecido foi ativado para acessar conteúdo gerenciado por direitos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>Remove a ativação de licença para um usuário especificado.</summary>
      <param name="user">O usuário para o qual remover a ativação de licença.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="user" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="user" /> fornecido não está autenticado com a Autenticação do Windows ou a Autenticação do Windows Live ID.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>Obtém o usuário ou grupo de usuários especificado quando o <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> foi criado.</summary>
      <returns>O usuário ou grupo de usuários especificado para o <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> método quando o <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> foi criado.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>Representa um <see cref="T:System.Security.RightsManagement.PublishLicense" /> gerenciado com direitos não assinados ou um modelo <see cref="T:System.Security.RightsManagement.PublishLicense" /> não assinado.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> com base em um modelo de licença de publicação XrML especificado.</summary>
      <param name="publishLicenseTemplate">O modelo de licença de publicação XrML (linguagem XrML) a ser usado para criar essa licença.</param>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>Obtém ou define o identificador de conteúdo criado pelo editor.</summary>
      <returns>O identificador de conteúdo gerenciado por direitos criados pelo Publicador.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>Obtém uma coleção de direitos de usuário atribuído.</summary>
      <returns>Uma coleção de direitos de usuário atribuídos que são fornecidos nesta licença.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>Obtém uma coleção de pares de nome e descrição.</summary>
      <returns>Uma coleção de pares de nome e descrição.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>Obtém ou define o proprietário do conteúdo.</summary>
      <returns>O usuário que possui o conteúdo publicado.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>Obtém ou define o nome de contato do autor ou editor do conteúdo.</summary>
      <returns>O nome do contato para o autor ou o editor do conteúdo.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>Obtém ou define o URI de contato do autor ou editor do conteúdo.</summary>
      <returns>O contato URI (Uniform Resource Identifier) do autor ou editor do conteúdo.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>Cria um <see cref="T:System.Security.RightsManagement.PublishLicense" /> assinado e retorna um <see cref="T:System.Security.RightsManagement.UseLicense" /> para o autor do documento.</summary>
      <param name="secureEnvironment">Um ambiente seguro para ativação e associação de licença.</param>
      <param name="authorUseLicense">Um <see cref="T:System.Security.RightsManagement.UseLicense" /> retornado para o autor do documento.</param>
      <returns>O <see cref="T:System.Security.RightsManagement.PublishLicense" /> assinado criado ao assinar esse <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>Retorna um modelo serializado criado do XrML do <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</summary>
      <returns>Um modelo serializado criado do XrML do <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>Representa uma licença que habilita acesso a conteúdo gerenciado de direitos protegidos.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.RightsManagement.UseLicense" />.</summary>
      <param name="useLicense">Uma licença de uso no formulário XrML (linguagem XrML) serializado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" /> é inválido.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>Obtém o dicionário de dados de aplicativo que contém os pares chave/valor passados do aplicativo de publicação para o aplicativo de consumo.</summary>
      <returns>O dicionário de dados de aplicativo que contém pares de chave/valor passados do aplicativo de publicação para o aplicativo de consumo.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>Associa a licença a um <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> fornecido.</summary>
      <param name="secureEnvironment">O ambiente ao qual associar a licença.</param>
      <returns>Uma instância <see cref="T:System.Security.RightsManagement.CryptoProvider" /> se a associação da licença for bem-sucedida; caso contrário, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>Obtém o identificador de conteúdo criado pelo editor.</summary>
      <returns>O identificador de conteúdo criado pelo Publicador.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>Indica se essa licença é equivalente a outra licença fornecida.</summary>
      <param name="x">A licença a ser comparada.</param>
      <returns>
        <see langword="true" /> se ambas as licenças forem equivalentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>Retorna o código hash associado a essa licença.</summary>
      <returns>O código hash dessa licença.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>Obtém o proprietário da licença.</summary>
      <returns>O proprietário da licença.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>Retorna a cadeia de caracteres XrML serializada usada para criar essa licença.</summary>
      <returns>A cadeia de caracteres XrML (linguagem XrML) serializada originalmente passada para o construtor <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" />.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>Especifica o tipo de Certificado de Conta de Direitos do usuário para solicitar a ativação de gerenciamento de direitos.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>Um Certificado de Conta de Direitos permanente.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>Um Certificado de Conta de Direitos temporário.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>Fornece uma classe base para os atributos do .NET Framework que relata o escopo de uso das propriedades anexadas.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" />.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>Especifica que uma propriedade anexada é navegável apenas em elementos que derivam de um tipo especificado.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> usando o <paramref name="targetType" /> fornecido.</summary>
      <param name="targetType">O tipo desejado que tem como escopo o uso da propriedade anexada em que este Atributo do .NET Framework se aplica.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> Atributo do .NET Framework atual é igual a um objeto especificado.</summary>
      <param name="obj">O <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> a ser comparado com o <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> atual.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> especificado for igual ao <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>Retorna o código hash para este <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> Atributo do .NET Framework.</summary>
      <returns>Um valor inteiro de 32 bits sem sinal.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>Obtém o tipo base que tem como escopo o uso da propriedade anexada em que este Atributo do .NET Framework se aplica.</summary>
      <returns>O <see cref="T:System.Type" /> solicitado.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>Obtém um identificador de tipo exclusivo para este <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> Atributo do .NET Framework.</summary>
      <returns>Um objeto que é um identificador exclusivo para o <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />.</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>Especifica que uma propriedade anexada é navegável apenas em um elemento que também tem outro atributo .NET Framework específico aplicado à sua definição de classe.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />.</summary>
      <param name="attributeType">O <see cref="T:System.Type" /> do Atributo do .NET Framework que também devem ser aplicados em uma classe para que a propriedade anexada seja navegável na classe em que <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> é aplicado.</param>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>Obtém o tipo de Atributo do .NET Framework que também deve ser aplicado em uma classe.</summary>
      <returns>O Atributo do .NET Framework tipo.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> Atributo do .NET Framework atual é igual a um objeto especificado.</summary>
      <param name="obj">O <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> a ser comparado com o <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> atual.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> especificado for igual ao <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>Retorna o código hash para este <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> Atributo do .NET Framework.</summary>
      <returns>Um valor inteiro de 32 bits sem sinal.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary>Contém propriedades que especificam como um aplicativo deve se comportar em relação aos novos recursos WPF que estão no assembly WindowsBase.</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary>Obtém ou define um valor que indica se as informações sobre o <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> são salvas no <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</summary>
      <returns>
        <see langword="true" />Se as informações sobre <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> o forem salvas <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />no; caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailure">
      <summary>Define como o dispatcher reage a falhas encontradas quando ele solicita o processamento.</summary>
      <returns>Um valor que define como o dispatcher reage a falhas.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions">
      <summary>Fornece um conjunto de valores que descreve como o dispatcher responde a falhas encontradas durante a solicitação de processamento.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Continue">
      <summary>Continue após a falha.  
 Este é o valor padrão. Ele define o comportamento do dispatcher do Windows Presentation Foundation antes do .NET Framework 4.7.1. O dispatcher pode ficar sem resposta quando essa opção é selecionada.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Reset">
      <summary>Redefina o estado do dispatcher para tentar outra solicitação na próxima vez em que uma for necessária.  
 Embora essa opção possa, às vezes, "reparar" a falta de resposta, ela não pode respeitar o intervalo habitual de processamento, que pode ser fundamental. Selecionar essa opção pode resultar em um comportamento inesperado.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Throw">
      <summary>Gera uma exceção.  
 Essa opção leva imediatamente o problema à atenção do desenvolvedor do aplicativo.</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary>Obtém ou define um valor que indica se o método <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> coloca os delegados na fila do dispatcher ou se o delegado é invocado diretamente.</summary>
      <returns>
        <see langword="true" />Se o <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> método colocar os delegados na fila do Dispatcher ou se o delegado for invocado diretamente; caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary>Obtém ou define um valor que indica se um único <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> é usado para diversas operações de dispatcher.</summary>
      <returns>true se um único <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> for usado para várias operações de Dispatcher; caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>Fornece um modelo para um método que é chamado sempre que um valor da propriedade de dependência está sendo reavaliado ou a coerção é especificamente solicitada.</summary>
      <param name="d">O objeto na qual a propriedade existe. Quando o retorno de chamada for invocado, o sistema de propriedade passará esse valor.</param>
      <param name="baseValue">O novo valor da propriedade, antes de qualquer tentativa de coerção.</param>
      <returns>O valor imposto (com o tipo apropriado).</returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Converters.Int32RectValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.String" /> especificado pode ser convertido em uma instância de <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.Windows.Int32Rect" /> especificado pode ser convertido em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser avaliado para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="value">A cadeia de caracteres a ser convertida.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Int32Rect" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Int32Rect" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser convertido em uma cadeia de caracteres.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma representação de cadeia de caracteres do <see cref="T:System.Windows.Int32Rect" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Point" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Converters.PointValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.String" /> especificado pode ser convertido em uma instância de <see cref="T:System.Windows.Point" />.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.Windows.Point" /> especificado pode ser convertido em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser avaliado para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um <see cref="T:System.Windows.Point" />.</summary>
      <param name="value">A cadeia de caracteres a ser convertida.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Point" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Point" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser convertido em uma cadeia de caracteres.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma representação de cadeia de caracteres do <see cref="T:System.Windows.Point" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Converters.RectValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.String" /> especificado pode ser convertido em uma instância de <see cref="T:System.Windows.Rect" />.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.Windows.Rect" /> especificado pode ser convertido em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser avaliado para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um <see cref="T:System.Windows.Rect" />.</summary>
      <param name="value">A cadeia de caracteres a ser convertida.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Rect" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Rect" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser convertido em uma cadeia de caracteres.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma representação de cadeia de caracteres do <see cref="T:System.Windows.Rect" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Size" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Converters.SizeValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.String" /> especificado pode ser convertido em uma instância de <see cref="T:System.Windows.Size" />.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.Windows.Size" /> especificado pode ser convertido em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser avaliado para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um <see cref="T:System.Windows.Size" />.</summary>
      <param name="value">A cadeia de caracteres a ser convertida.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Size" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Size" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser convertido em uma cadeia de caracteres.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma representação de cadeia de caracteres do <see cref="T:System.Windows.Size" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Converters.VectorValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.String" /> especificado pode ser convertido em uma instância de <see cref="T:System.Windows.Vector" />.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.Windows.Vector" /> especificado pode ser convertido em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser avaliado para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um <see cref="T:System.Windows.Vector" />.</summary>
      <param name="value">A cadeia de caracteres a ser convertida.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Vector" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Vector" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">O objeto a ser convertido em uma cadeia de caracteres.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma representação de cadeia de caracteres do <see cref="T:System.Windows.Vector" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>Classe base comum e contratos para objetos <see cref="T:System.Windows.Data.DataSourceProvider" />, que são fatores para executar algumas consultas para produzir um único objeto ou uma lisa de objetos que podem ser usados como objetos de origem da associação.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Data.DataSourceProvider" />. Esse é um construtor protegido.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>Indica que a inicialização desse objeto está prestes a começar; nenhuma <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> implícita ocorre até que o método <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> correspondente seja chamado.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>Quando substituído em uma classe derivada, essa classe base chama esse método quando <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> ou <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> foi chamado. A classe base atrasa a chamada se a atualização é adiada ou a carga inicial é desabilitada.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>Obtém o objeto de dados subjacente.</summary>
      <returns>Um valor do tipo <see cref="T:System.Object" /> que é o objeto de dados subjacente.</returns>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>Ocorre quando a propriedade <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> tem um novo valor.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>Insere um ciclo de adiamento que pode ser usado para alterar as propriedades do provedor e atrasar a atualização automática.</summary>
      <returns>Um objeto <see cref="T:System.IDisposable" /> que pode ser usado para descartar o objeto de chamada.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>Obtém ou define o objeto <see cref="T:System.Windows.Threading.Dispatcher" /> atual para o thread Interface de Usuário a ser usado.</summary>
      <returns>O objeto <see cref="T:System.Windows.Threading.Dispatcher" /> atual para o Interface de Usuário thread a ser usado. Por padrão, esse é o <see cref="T:System.Windows.Threading.Dispatcher" /> objeto que está associado ao thread no qual essa instância foi criada.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>Indica que a inicialização desse objeto foi concluída; isso causa uma <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> se nenhuma outra <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> está pendente.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>Obtém o erro da última operação de consulta.</summary>
      <returns>Um valor do tipo <see cref="T:System.Exception" /> que é o erro da última operação de consulta ou <see langword="null" /> , se não houver erro.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>Inicia a consulta inicial para o modelo de dados subjacente. O resultado é retornado na propriedade <see cref="P:System.Windows.Data.DataSourceProvider.Data" />.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>Obtém ou define um valor que indica se o carregamento automático de dados deve ser impedido ou atrasado.</summary>
      <returns>
        <see langword="false" />para evitar ou atrasar o carregamento automático de dados; caso contrário <see langword="true" />,. O valor padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>Obtém um valor que indica se há uma <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> pendente em uso.</summary>
      <returns>
        <see langword="true" />Se houver uma pendência <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> em uso; caso contrário,. <see langword="false" /></returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Cria o evento <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> com os argumentos fornecidos.</summary>
      <param name="e">Argumentos do evento que está sendo criado.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>Classes derivadas chamam esse método para indicar que uma consulta foi concluída.</summary>
      <param name="newData">Os dados que são o resultado da consulta.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>Classes derivadas chamam esse método para indicar que uma consulta foi concluída.</summary>
      <param name="newData">Os dados que são o resultado da consulta.</param>
      <param name="error">O erro ocorrido durante a execução da consulta. Esse valor é <see langword="null" /> se não há nenhum erro.</param>
      <param name="completionWork">Delegado opcional usado para executar o trabalho de conclusão no thread Interface de Usuário, por exemplo, para definir propriedades adicionais.</param>
      <param name="callbackArguments">Argumentos opcionais a serem enviados como um parâmetro com o delegado <paramref name="completionWork" />.</param>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>Inicia uma operação de atualização no modelo de dados subjacente. O resultado é retornado na propriedade <see cref="P:System.Windows.Data.DataSourceProvider.Data" />.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Ocorre quando um valor de propriedade é alterado.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>Este membro dá suporte à infraestrutura Windows Presentation Foundation (WPF) e não se destina a ser usado diretamente do código.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>Este membro dá suporte à infraestrutura Windows Presentation Foundation (WPF) e não se destina a ser usado diretamente do código.</summary>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>Representa um objeto que participa do sistema de propriedade de dependência.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>Limpa o valor local de uma propriedade. A propriedade a ser limpa é especificada por um identificador <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <param name="dp">A propriedade de dependência a ser limpa, identificada por uma referência de objeto <see cref="T:System.Windows.DependencyProperty" />.</param>
      <exception cref="T:System.InvalidOperationException">Tentativa de chamar <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> em um <see cref="T:System.Windows.DependencyObject" /> lacrado.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>Limpa o valor local de uma propriedade somente leitura. A propriedade a ser limpa é especificada por um <see cref="T:System.Windows.DependencyPropertyKey" />.</summary>
      <param name="key">A chave para a propriedade de dependência a ser limpa.</param>
      <exception cref="T:System.InvalidOperationException">Tentativa de chamar <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> em um <see cref="T:System.Windows.DependencyObject" /> lacrado.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>Converte o valor da propriedade de dependência especificada. Isso é feito invocando qualquer função <see cref="T:System.Windows.CoerceValueCallback" /> especificada nos metadados de propriedade para a propriedade de dependência, visto que ela existe na chamada a <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="dp">O identificador para a propriedade de dependência impor.</param>
      <exception cref="T:System.InvalidOperationException">O <paramref name="dp" /> especificado ou seu valor eram inválido ou não existem.</exception>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>Obtém o <see cref="T:System.Windows.DependencyObjectType" /> que encapsula o tipo CLR dessa instância.</summary>
      <returns>Um <see cref="T:System.Windows.DependencyObjectType" /> que encapsula o tipo CLR dessa instância.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>Determina se um <see cref="T:System.Windows.DependencyObject" /> fornecido é equivalente ao <see cref="T:System.Windows.DependencyObject" /> atual.</summary>
      <param name="obj">O <see cref="T:System.Windows.DependencyObject" /> a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se as duas instâncias forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>Obtém o código hash para esse <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>Um código hash do inteiro com sinal de 32 bits.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>Cria um enumerador especializado para determinar quais propriedades de dependência têm valores definidos localmente nessa <see cref="T:System.Windows.DependencyObject" />.</summary>
      <returns>Um enumerador do valor de local especializado.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>Retorna o valor efetivo atual de uma propriedade de dependência nessa instância de um <see cref="T:System.Windows.DependencyObject" />.</summary>
      <param name="dp">O identificador <see cref="T:System.Windows.DependencyProperty" /> da propriedade para o qual o valor será recuperado.</param>
      <returns>Retorna o valor efetivo atual.</returns>
      <exception cref="T:System.InvalidOperationException">O <paramref name="dp" /> especificado ou seu valor era inválido ou o <paramref name="dp" /> especificado não existe.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>Reavalia o valor efetivo para a propriedade de dependência especificada</summary>
      <param name="dp">O <see cref="T:System.Windows.DependencyProperty" /> identificador exclusivo da propriedade a invalidar.</param>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>Obtém um valor que indica se essa instância está validada no momento (somente leitura).</summary>
      <returns>
        <see langword="true" /> se essa instância estiver selada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Invocado sempre que o valor efetivo de qualquer propriedade de dependência nesse <see cref="T:System.Windows.DependencyObject" /> for atualizada. A propriedade de dependência específica que mudou é relatada os dados do evento.</summary>
      <param name="e">Os dados do evento conterão o identificador de propriedade de dependência de interesse, os metadados para o tipo de propriedade e valores novos e antigos.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>Retorna o valor local de uma propriedade de dependência, local, se houver.</summary>
      <param name="dp">O identificador <see cref="T:System.Windows.DependencyProperty" /> da propriedade para o qual o valor será recuperado.</param>
      <returns>Retorna o valor local ou o valor de sentinela <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> se nenhum valor local é definido.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Define o valor da propriedade de dependência sem alterar a origem do valor.</summary>
      <param name="dp">O identificador da propriedade de dependência a ser definida.</param>
      <param name="value">O novo valor local.</param>
      <exception cref="T:System.InvalidOperationException">Houve uma tentativa de modificar uma propriedade de dependência somente leitura ou uma propriedade em um <see cref="T:System.Windows.DependencyObject" /> lacrado.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> não era do tipo correto conforme registrado para a propriedade <paramref name="dp" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>Define o valor local de uma propriedade de dependência, especificada pelo identificador da propriedade de dependência.</summary>
      <param name="dp">O identificador da propriedade de dependência a ser definida.</param>
      <param name="value">O novo valor local.</param>
      <exception cref="T:System.InvalidOperationException">Houve uma tentativa de modificar uma propriedade de dependência somente leitura ou uma propriedade em um <see cref="T:System.Windows.DependencyObject" /> lacrado.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> não era do tipo correto conforme registrado para a propriedade <paramref name="dp" />.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>Define o valor de uma propriedade de dependência somente leitura, especificada pelo identificador <see cref="T:System.Windows.DependencyPropertyKey" /> da propriedade de dependência.</summary>
      <param name="key">O identificador <see cref="T:System.Windows.DependencyPropertyKey" /> da propriedade a ser definido.</param>
      <param name="value">O novo valor local.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>Retorna um valor que indica se os processos de serialização devem serializar o valor da propriedade de dependência fornecida.</summary>
      <param name="dp">O identificador da propriedade de dependência que deve ser serializado.</param>
      <returns>
        <see langword="true" /> se a propriedade de dependência que é fornecida deve ser serializada por valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>Implementa um cache do tipo subjacente para todos os tipos derivados <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>Obtém o <see cref="T:System.Windows.DependencyObjectType" /> da classe base imediata do <see cref="T:System.Windows.DependencyObjectType" /> atual.</summary>
      <returns>O tipo da classe base.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>Retorna um <see cref="T:System.Windows.DependencyObjectType" /> que representa determinado tipo (CLR) do sistema.</summary>
      <param name="systemType">O tipo (CLR) do sistema a ser convertido.</param>
      <returns>Um <see cref="T:System.Windows.DependencyObjectType" /> que representa o tipo (CLR) do sistema.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>Retorna o código hash para este <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>Obtém um identificador exclusivo de base zero para operações de pesquisa de matriz de tempo constante.</summary>
      <returns>Um identificador interno.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>Determina se o objeto especificado é uma instância do <see cref="T:System.Windows.DependencyObjectType" /> atual.</summary>
      <param name="dependencyObject">O objeto a ser comparado com o <see cref="T:System.Windows.DependencyObjectType" /> atual.</param>
      <returns>
        <see langword="true" /> se a classe representado pelo <see cref="T:System.Windows.DependencyObjectType" /> atual estiver na hierarquia de herança do <see cref="T:System.Windows.DependencyObject" /> passado como <paramref name="d" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>Determina se o <see cref="T:System.Windows.DependencyObjectType" /> atual deriva do <see cref="T:System.Windows.DependencyObjectType" /> especificado.</summary>
      <param name="dependencyObjectType">O <see cref="T:System.Windows.DependencyObjectType" /> de comparação.</param>
      <returns>
        <see langword="true" /> se o parâmetro <paramref name="dependencyObjectType" /> e o <see cref="T:System.Windows.DependencyObjectType" /> atual representarem os tipos de classes e a classe representada pelo <see cref="T:System.Windows.DependencyObjectType" /> atual é derivada da classe representada por <paramref name="dependencyObjectType" />. Caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="dependencyObjectType" /> e o <see cref="T:System.Windows.DependencyObjectType" /> atual representarem a mesma classe.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>Obtém o nome do tipo de sistema CLR (Common Language Runtime) representado.</summary>
      <returns>O nome do tipo de CLR sistema representado.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary>Obtém o tipo de sistema CLR (Common Language Runtime) representado por este <see cref="T:System.Windows.DependencyObjectType" />.</summary>
      <returns>O CLR tipo de sistema representado por <see cref="T:System.Windows.DependencyObjectType" />isso.</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>Representa uma propriedade que pode ser definida por meio de métodos como estilos, vinculação de dados, animação e herança.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>Adiciona outro tipo como um proprietário de uma propriedade de dependência que já foi registrada.</summary>
      <param name="ownerType">O tipo a ser adicionado como proprietário desta propriedade de dependência.</param>
      <returns>Uma referência ao identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica a propriedade da dependência. Esse identificador deve ser exposto adicionando a classe como um campo <see langword="public static readonly" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>Adiciona outro tipo como um proprietário de uma propriedade de dependência que já foi registrada, fornecendo metadados de propriedade de dependência para a propriedade de dependência como ela existe no tipo do proprietário fornecido.</summary>
      <param name="ownerType">O tipo a ser adicionado como proprietário desta propriedade de dependência.</param>
      <param name="typeMetadata">Os metadados que qualificam a propriedade de dependência como ela existe no tipo fornecido.</param>
      <returns>Uma referência ao identificador <see cref="T:System.Windows.DependencyProperty" /> original que identifica a propriedade da dependência. Esse identificador deve ser exposto adicionando a classe como um campo <see langword="public static readonly" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>Obtém os metadados padrão da propriedade de dependência.</summary>
      <returns>Os metadados padrão da propriedade de dependência.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>Retorna um código hash para este <see cref="T:System.Windows.DependencyProperty" />.</summary>
      <returns>O código hash deste <see cref="T:System.Windows.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>Retorna os metadados para essa propriedade de dependência uma vez que ela existe em um tipo existente especificado.</summary>
      <param name="forType">O tipo específico do qual recuperar os metadados de propriedade de dependência.</param>
      <returns>Um objeto de metadados de propriedade.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>Retorna os metadados para essa propriedade de dependência como ela existe na instância do objeto especificado.</summary>
      <param name="dependencyObject">Um objeto de dependência que é verificado quanto ao tipo para determinar qual versão de tipo específico da propriedade de dependência os metadados devem vir.</param>
      <returns>Um objeto de metadados de propriedade.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary>Retorna os metadados para essa propriedade de dependência como ela existe em um tipo especificado.</summary>
      <param name="dependencyObjectType">Um objeto específico que registra o tipo de objeto de dependência da qual os metadados de propriedade de dependência é desejado.</param>
      <returns>Um objeto de metadados de propriedade.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>Obtém um valor gerado internamente que identifica exclusivamente a propriedade de dependência.</summary>
      <returns>Um identificador numérico exclusivo.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>Determina se um valor especificado é aceitável para o tipo desta propriedade de dependência, conforme verificado em relação ao tipo de propriedade fornecido no registro de propriedade de dependência original.</summary>
      <param name="value">O valor a ser verificado.</param>
      <returns>
        <see langword="true" /> se o valor especificado é o tipo de propriedade registrada ou um tipo derivado aceitável; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>Determina se o valor fornecido é aceito para o tipo de propriedade por meio de verificação de tipo básica e também potencialmente se ele está dentro do intervalo permitido de valores para esse tipo.</summary>
      <param name="value">O valor a ser verificado.</param>
      <returns>
        <see langword="true" /> se o valor é aceitável e é do tipo correto ou um tipo derivado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>Obtém o nome da propriedade de dependência.</summary>
      <returns>O nome da propriedade.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Especifica os metadados alternativos para essa propriedade de dependência quando está presente em instâncias de um tipo especificado, substituindo os metadados existentes para a propriedade de dependência conforme ela foi herdada dos tipos base.</summary>
      <param name="forType">O tipo no qual essa propriedade de dependência é herdada e os metadados alternativos fornecidos serão aplicados.</param>
      <param name="typeMetadata">Os metadados a serem aplicados à propriedade de dependência no tipo de substituição.</param>
      <exception cref="T:System.InvalidOperationException">Foi feita uma tentativa de substituir metadados em uma propriedade de dependência somente leitura (essa operação não pode ser feita usando essa assinatura).</exception>
      <exception cref="T:System.ArgumentException">Os metadados já foram estabelecidos para a propriedade de dependência como ela existe no tipo fornecido.</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>Fornece os metadados alternativos para uma propriedade de dependência somente leitura quando ela existe em instâncias de um tipo especificado, substituindo os metadados que foram fornecidos no registro de propriedade de dependência inicial. Você deve passar o <see cref="T:System.Windows.DependencyPropertyKey" /> para a propriedade de dependência somente leitura para evitar gerar uma exceção.</summary>
      <param name="forType">O tipo no qual essa propriedade de dependência é herdada e os metadados alternativos fornecidos serão aplicados.</param>
      <param name="typeMetadata">Os metadados a serem aplicados à propriedade de dependência no tipo de substituição.</param>
      <param name="key">A chave de acesso para uma propriedade de dependência somente leitura.</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>Obtém o tipo do objeto que registrou a propriedade de dependência com o sistema de propriedade ou que adicionou a si próprio como proprietário da propriedade.</summary>
      <returns>O tipo do objeto que registrou a propriedade ou que adicionou a si próprio como proprietário da propriedade.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>Obtém o tipo que a propriedade de dependência usa para seu valor.</summary>
      <returns>O <see cref="T:System.Type" /> do valor da propriedade.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>Obtém um valor que indica se a propriedade de dependência identificada por essa instância <see cref="T:System.Windows.DependencyProperty" /> é uma propriedade de dependência somente leitura.</summary>
      <returns>
        <see langword="true" />se a propriedade de dependência for somente leitura; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>Registra uma propriedade de dependência com o nome de propriedade, tipo de propriedade e tipo de proprietário especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada. O nome deve ser exclusivo dentro do namespace de registro do tipo proprietário.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <returns>Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe. Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra uma propriedade de dependência com o nome de propriedade, tipo de propriedade, tipo de proprietário e metadados de propriedade especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="typeMetadata">Os metadados de propriedade da propriedade de dependência.</param>
      <returns>Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe. Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra uma propriedade de dependência com o nome da propriedade, tipo de propriedade, tipo de proprietário, metadados de propriedade especificados e um retorno de chamada de validação do valor da propriedade.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="typeMetadata">Os metadados de propriedade da propriedade de dependência.</param>
      <param name="validateValueCallback">Uma referência a um retorno de chamada que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</param>
      <returns>Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe. Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>Registra uma propriedade anexada com o nome de propriedade, o tipo de propriedade e o tipo de proprietário especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <returns>Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe. Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra uma propriedade anexada com o nome de propriedade, tipo de propriedade, tipo de proprietário e metadados de propriedade especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="defaultMetadata">Os metadados de propriedade da propriedade de dependência. Isso pode incluir o valor padrão, bem como outras características.</param>
      <returns>Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe. Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra uma propriedade anexada com o tipo de propriedade, o tipo de proprietário, os metadados de propriedade e o retorno de chamada de validação de valor da propriedade especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="defaultMetadata">Os metadados de propriedade da propriedade de dependência. Isso pode incluir o valor padrão, bem como outras características.</param>
      <param name="validateValueCallback">Uma referência a um retorno de chamada que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</param>
      <returns>Um identificador de propriedade de dependência que deve ser usado para definir o valor de um campo <see langword="public static readonly" /> em sua classe. Em seguida, esse identificador será usado para referenciar a propriedade de dependência mais tarde, para operações como a configuração do valor de forma programática ou a obtenção de metadados.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra uma propriedade anexada somente leitura com o tipo de propriedade, tipo de proprietário e metadados de propriedade especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="defaultMetadata">Os metadados de propriedade da propriedade de dependência.</param>
      <returns>Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo estático somente leitura na classe, que é então usado para referenciar à propriedade de dependência posteriormente.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra uma propriedade anexada somente leitura com o tipo de propriedade, tipo de proprietário, metadados de propriedade e retorno de chamada especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="defaultMetadata">Os metadados de propriedade da propriedade de dependência.</param>
      <param name="validateValueCallback">Uma referência a um retorno de chamada criado pelo usuário que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</param>
      <returns>Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo somente leitura estático na sua classe, que então é usado para fazer referência à propriedade de dependência.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>Registra uma propriedade de dependência somente leitura com o tipo da propriedade, tipo de proprietário e metadados de propriedade especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="typeMetadata">Os metadados de propriedade da propriedade de dependência.</param>
      <returns>Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo somente leitura estático na sua classe, que então é usado para fazer referência à propriedade de dependência.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>Registra uma propriedade de dependência somente leitura com o tipo de propriedade, tipo de proprietário, metadados de propriedade e retorno de chamada especificados.</summary>
      <param name="name">O nome da propriedade de dependência a ser registrada.</param>
      <param name="propertyType">O tipo da propriedade.</param>
      <param name="ownerType">O tipo de proprietário que está registrando a propriedade de dependência.</param>
      <param name="typeMetadata">Os metadados de propriedade da propriedade de dependência.</param>
      <param name="validateValueCallback">Uma referência a um retorno de chamada criado pelo usuário que deve executar uma validação personalizada do valor da propriedade de dependência além da validação de tipo comum.</param>
      <returns>Uma chave de propriedade de dependência que deve ser usada para definir o valor de um campo estático somente leitura na classe, que é então usado para referenciar à propriedade de dependência posteriormente.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary>Retorna a representação de cadeia de caracteres da propriedade de dependência.</summary>
      <returns>A representação de cadeia de caracteres da propriedade de dependência.</returns>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>Especifica um valor estático que é usado pelo sistema da propriedade WPF em vez de <see langword="null" /> para indicar que a propriedade existe, mas não tem seu valor definido pelo sistema da propriedade.</summary>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>Obtém o retorno de chamada de validação do valor da propriedade de dependência.</summary>
      <returns>O retorno de chamada de validação de valor para essa propriedade de dependência, conforme fornecido para o parâmetro <paramref name="validateValueCallback" /> no registro de propriedade de dependência original.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>Fornece dados para vários eventos alterados pela propriedade. Normalmente, esses eventos relatam alterações de valor efetivo no valor de uma propriedade de dependência somente leitura. Outro uso é como parte de uma implementação <see cref="T:System.Windows.PropertyChangedCallback" />.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <param name="property">O identificador da propriedade de dependência foi alterado.</param>
      <param name="oldValue">O valor da propriedade antes da alteração relatada pelo evento relevante ou alteração de estado.</param>
      <param name="newValue">O valor da propriedade após a alteração relatada pelo evento relevante ou alteração de estado.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>Determina se o objeto fornecido é equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual.</summary>
      <param name="obj">O objeto a ser comparado ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto fornecido for equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determina se o <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> fornecido é equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual.</summary>
      <param name="args">O <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> fornecido for equivalente ao <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>Obtém o código hash para esse <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />.</summary>
      <returns>Um código hash do inteiro com sinal de 32 bits.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>Obtém o valor da propriedade depois da alteração.</summary>
      <returns>O valor da propriedade depois da alteração.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>Obtém o valor da propriedade antes da alteração.</summary>
      <returns>O valor da propriedade antes da alteração.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determina se dois objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados têm o mesmo valor.</summary>
      <param name="left">O primeiro <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</param>
      <param name="right">O segundo <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</param>
      <returns>
        <see langword="true" /> se as duas instâncias <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> forem equivalentes, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Determina se dois objetos <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> especificados são diferentes.</summary>
      <param name="left">O primeiro <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</param>
      <param name="right">O segundo <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> a ser comparado.</param>
      <returns>
        <see langword="true" /> se as duas instâncias <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> forem diferentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>Obtém o identificador para a propriedade de dependência em que ocorreu a alteração de valor.</summary>
      <returns>O campo identificador da propriedade de dependência em que ocorreu a alteração do valor.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>Representa o método que manipulará os eventos gerados quando um <see cref="T:System.Windows.DependencyProperty" /> for alterado em uma implementação <see cref="T:System.Windows.DependencyObject" /> específica.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Os dados do evento.</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>Fornece um identificador de propriedade de dependência para acesso de gravação limitado a uma propriedade de dependência somente leitura.</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>Obtém o identificador de propriedade de dependência associado a este identificador de propriedade de dependência somente leitura especializado.</summary>
      <returns>O identificador de propriedade de dependência relevante.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>Substitui os metadados de uma propriedade de dependência somente leitura que é representada por esse identificador de propriedade de dependência.</summary>
      <param name="forType">O tipo no qual essa propriedade de dependência existe e os metadados devem ser substituídos.</param>
      <param name="typeMetadata">Metadados fornecidos para esse tipo.</param>
      <exception cref="T:System.InvalidOperationException">Ocorreu uma tentativa de substituir os metadados em uma propriedade de dependência de leitura/gravação (não pode ser feita usando essa assinatura).</exception>
      <exception cref="T:System.ArgumentException">Os metadados já foram estabelecidos para a propriedade como ela existe no tipo fornecido.</exception>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>Este tipo é compatível com a infraestrutura do WPF (Windows Presentation Foundation) e não se destina a ser usado diretamente no código.</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>Converte instâncias de <see cref="T:System.Windows.Expression" /> para e de outros tipos.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.ExpressionConverter" />.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se este conversor pode converter de um objeto de origem para um objeto <see cref="T:System.Windows.Expression" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>Sempre <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se este conversor pode converter um objeto <see cref="T:System.Windows.Expression" /> em um tipo de destino específico.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>Sempre <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o valor fornecido no tipo <see cref="T:System.Windows.Expression" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> a ser usado como a cultura atual.</param>
      <param name="value">O objeto a ser convertido.</param>
      <returns>Sempre gera uma exceção e retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto <see cref="T:System.Windows.Expression" /> fornecido no tipo especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> a ser usado como a cultura atual.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>Sempre gera uma exceção e retorna <see langword="null" />.</returns>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>Define um objeto que tem um estado modificável e um estado somente leitura (congelado). Classes que derivam de <see cref="T:System.Windows.Freezable" /> fornecem notificação de alteração detalhada, podem ser transformadas em imutáveis e podem clonar a si mesmas.</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>Inicializa uma nova instância de uma classe derivada de <see cref="T:System.Windows.Freezable" />.</summary>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>Obtém um valor que indica se o objeto pode se tornar não modificável.</summary>
      <returns>
        <see langword="true" /> se o objeto atual puder se tornar não modificável ou já for não modificável, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>Ocorre quando o <see cref="T:System.Windows.Freezable" /> ou um objeto nele contido é modificado.</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>Cria um clone modificável do <see cref="T:System.Windows.Freezable" />, fazendo cópias em profundidade dos valores do objeto. Ao copiar as propriedades de dependência do objeto, esse método copia as expressões (que talvez não possam mais ser resolvidas), mas não as animações nem seus valores atuais.</summary>
      <returns>Um clone modificável do objeto atual. A propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> do objeto clonado será <see langword="false" />, mesmo se a propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> da origem for <see langword="true." /></returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>Faz com que a instância seja um clone (cópia em profundidade) do <see cref="T:System.Windows.Freezable" /> especificado usando valores de propriedade base (não animados).</summary>
      <param name="sourceFreezable">O objeto a ser clonado.</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>Cria um clone modificável (cópia profunda) do <see cref="T:System.Windows.Freezable" /> usando seus valores atuais.</summary>
      <returns>Um clone modificável do objeto atual. A propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> do objeto clonado será <see langword="false" />, mesmo se a propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> da origem for <see langword="true." /></returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Torna a instância um clone modificável (cópia em profundidade) do <see cref="T:System.Windows.Freezable" /> especificado usando os valores de propriedade atuais.</summary>
      <param name="sourceFreezable">O <see cref="T:System.Windows.Freezable" /> a ser clonado.</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Freezable" />.</summary>
      <returns>A nova instância.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>Quando implementado em uma classe derivada, cria uma nova instância da classe derivada <see cref="T:System.Windows.Freezable" />.</summary>
      <returns>A nova instância.</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>Torna o objeto atual não modificável e define sua propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> para <see langword="true" />.</summary>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Windows.Freezable" /> não pode se tornar não modificável.</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>Se o parâmetro <paramref name="isChecking" /> é <see langword="true" />, este método indica se o <see cref="T:System.Windows.Freezable" /> especificado pode ser tornado não modificável. Se o parâmetro <paramref name="isChecking" /> é <see langword="false" />, esse método tenta tornar o <see cref="T:System.Windows.Freezable" /> especificado não modificável e indica se a operação foi bem-sucedida.</summary>
      <param name="freezable">O objeto a verificar ou tornar não modificável. Se <paramref name="isChecking" /> é <see langword="true" />, o objeto é verificado para determinar se ele pode ser tornado não modificável. Se <paramref name="isChecking" /> é <see langword="false" />, o objeto é tornado não modificável se possível.</param>
      <param name="isChecking">
        <see langword="true" /> para retornar uma indicação de que o objeto pode ou não ser congelado (sem realmente congelá-lo); <see langword="false" /> para realmente congelar o objeto.</param>
      <returns>Se <paramref name="isChecking" /> for <see langword="true" />, esse método retornará <see langword="true" /> se o <see cref="T:System.Windows.Freezable" /> especificado puder ser transformado em não modificável ou então <see langword="false" />, se ele não puder ser transformado em não modificável. Se <paramref name="isChecking" /> for <see langword="false" />, esse método retornará <see langword="true" /> se o <see cref="T:System.Windows.Freezable" /> especificado for agora não modificável ou então <see langword="false" />, se ele não puder ser transformado em não modificável.</returns>
      <exception cref="T:System.InvalidOperationException">Quando <paramref name="isChecking" /> é <see langword="false" />, a tentativa de tornar <paramref name="freezable" /> não modificável não teve êxito; o objeto agora está em um estado desconhecido (ele pode estar parcialmente congelado).</exception>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>Torna o objeto <see cref="T:System.Windows.Freezable" /> não modificável ou testa se ele pode ser transformado em não modificável.</summary>
      <param name="isChecking">
        <see langword="true" /> para retornar uma indicação de que o objeto pode ou não ser congelado (sem realmente congelá-lo); <see langword="false" /> para realmente congelar o objeto.</param>
      <returns>Se <paramref name="isChecking" /> for <see langword="true" />, esse método retornará <see langword="true" /> se o <see cref="T:System.Windows.Freezable" /> puder se tornar não modificável ou <see langword="false" /> se ele não puder se tornar não modificável. Se <paramref name="isChecking" /> for <see langword="false" />, esse método retornará <see langword="true" /> se o <see cref="T:System.Windows.Freezable" /> especificado for agora não modificável ou então <see langword="false" />, se ele não puder ser transformado em não modificável.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>Cria uma cópia congelada o <see cref="T:System.Windows.Freezable" /> usando valores de propriedade base (não animadas). Já que a cópia está congelada, quaisquer subobjetos congelados são copiados por referência.</summary>
      <returns>Uma cópia congelada do <see cref="T:System.Windows.Freezable" />. A propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> da cópia está definida para <see langword="true" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Windows.Freezable" /> não pode ser congelado porque ele contém expressões ou propriedades animadas.</exception>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Torna a instância um clone congelado do <see cref="T:System.Windows.Freezable" /> especificado usando valores de propriedade base (não animados).</summary>
      <param name="sourceFreezable">A instância a ser copiada.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>Cria uma cópia congelada do <see cref="T:System.Windows.Freezable" /> usando valores de propriedade atuais. Já que a cópia está congelada, quaisquer subobjetos congelados são copiados por referência.</summary>
      <returns>Uma cópia congelada do <see cref="T:System.Windows.Freezable" />. A propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> da cópia está definida para <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Torna a instância atual um clone congelado do <see cref="T:System.Windows.Freezable" /> especificado. Se o objeto tiver propriedades de dependência animadas, seus valores animados atuais serão copiados.</summary>
      <param name="sourceFreezable">O <see cref="T:System.Windows.Freezable" /> a ser copiado e congelado.</param>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>Obtém um valor que indica se o objeto pode ser modificado no momento.</summary>
      <returns>
        <see langword="true" /> se o objeto estiver congelado e não puder ser modificado; <see langword="false" /> se o objeto poderá ser modificado.</returns>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>Chamado quando o objeto <see cref="T:System.Windows.Freezable" /> atual é modificado.</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Garante que os ponteiros de contexto apropriados sejam estabelecidos para um membro de dados <see cref="T:System.Windows.DependencyObjectType" /> que foi recém-definido.</summary>
      <param name="oldValue">O valor anterior do membro de dados.</param>
      <param name="newValue">O valor atual do membro de dados.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>Este membro dá suporte à infraestrutura Windows Presentation Foundation (WPF) e não se destina a ser usado diretamente do código.</summary>
      <param name="oldValue">O valor anterior do membro de dados.</param>
      <param name="newValue">O valor atual do membro de dados.</param>
      <param name="property">A propriedade que foi alterada.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>Substitui a implementação <see cref="T:System.Windows.DependencyObject" /> de <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> para também invocar quaisquer manipuladores <see cref="E:System.Windows.Freezable.Changed" /> em resposta à alteração de uma propriedade de dependência do tipo <see cref="T:System.Windows.Freezable" />.</summary>
      <param name="e">Dados de evento que contém informações sobre qual propriedade foi alterada e os respectivos valores, novos e antigos.</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>Garante que o <see cref="T:System.Windows.Freezable" /> esteja sendo acessado de um thread válido. Herdeiros do <see cref="T:System.Windows.Freezable" /> devem chamar esse método no início de qualquer API que lê membros de dados que não são propriedades de dependência.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>Aciona o evento <see cref="E:System.Windows.Freezable.Changed" /> para o <see cref="T:System.Windows.Freezable" /> e invoca o respectivo método <see cref="M:System.Windows.Freezable.OnChanged" />. Classes que derivam de <see cref="T:System.Windows.Freezable" /> devem chamar este método no final de qualquer API que modifica os membros de classe que não são armazenados como propriedades de dependência.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>Verifica se o <see cref="T:System.Windows.Freezable" /> não está congelado e está sendo acessado de um contexto de threading válido. Herdeiros do <see cref="T:System.Windows.Freezable" /> devem chamar esse método no início de qualquer API que grava em membros de dados que não são propriedades de dependência.</summary>
      <exception cref="T:System.InvalidOperationException">A instância do <see cref="T:System.Windows.Freezable" /> está congelada e não pode ter seus membros gravados.</exception>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>Especifica a direção dentro de uma interface do usuário da tentativa de uma solicitação de alteração de foco. A direção é baseada na ordem de tabulação ou pela direção relativa no layout.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>Move o foco para outro elemento focalizável abaixo do elemento focalizado no momento.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>Move o foco para o primeiro elemento focalizável na ordem de tabulação. Sem suporte para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>Move o foco para o último elemento focalizável na ordem de tabulação. Sem suporte para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>Move o foco para outro elemento focalizável à esquerda do elemento focalizado no momento.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>Move o foco para o próximo elemento focalizável na ordem de tabulação. Sem suporte para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>Move o foco para o elemento focalizável anterior na ordem de tabulação. Sem suporte para <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>Move o foco para outro elemento focalizável à direita do elemento focalizado no momento.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>Move o foco para outro elemento focalizável acima do elemento focalizado no momento.</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>Especifica os possíveis valores de chave em um teclado.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>A tecla A.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>A tecla ABNT_C1 (Brasil).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>A tecla ABNT_C2 (Brasil).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>A tecla Adicionar.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>A tecla Aplicativo (Microsoft Natural Keyboard). Também conhecido como a tecla de Menu, pois exibe um menu de contexto específico do aplicativo.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>A tecla ATTN.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>A tecla B.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>A tecla Backspace.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>A tecla Voltar do Navegador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>A tecla Favoritos do Navegador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>A tecla Avançar do Navegador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>A tecla Início do Navegador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>A tecla Atualizar do Navegador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>A tecla Pesquisar do Navegador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>A tecla Parar do Navegador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>A tecla C.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>A tecla Cancel.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>A tecla Caps Lock.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>A tecla Caps Lock.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>A tecla Clear.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>A tecla CRSEL.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>A tecla D.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>A tecla 0 (zero).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>A tecla 1 (um).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>A tecla 2.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>A tecla 3.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>A tecla 4.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>A tecla 5.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>A tecla 6.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>A tecla 7.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>A tecla 8.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>A tecla 9.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>A tecla DBE_ALPHANUMERIC.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>A tecla DBE_CODEINPUT.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>A tecla DBE_DBCSCHAR.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>A tecla DBE_DETERMINESTRING.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>A tecla DBE_ENTERDLGCONVERSIONMODE.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>A tecla DBE_ENTERIMECONFIGMODE.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>A tecla DBE_ENTERWORDREGISTERMODE.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>A tecla DBE_FLUSHSTRING.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>A tecla DBE_HIRAGANA.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>A tecla DBE_KATAKANA.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>A tecla DBE_NOCODEINPUT.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>A tecla DBE_NOROMAN.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>A tecla DBE_ROMAN.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>A tecla DBE_SBCSCHAR.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>A tecla é usada com outra tecla para criar um único caractere combinado.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>A tecla Decimal.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>A tecla Delete.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>A tecla Dividir.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>A tecla Seta para Baixo.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>A tecla E.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>A tecla End.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>A tecla Enter.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>A tecla ERASE EOF.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>A tecla ESC.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>A tecla Execute.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>A tecla EXSEL.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>A tecla F.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>A tecla F1.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>A tecla F10.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>A tecla F11.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>A tecla F12.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>A tecla F13.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>A tecla F14.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>A tecla F15.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>A tecla F16.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>A tecla F17.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>A tecla F18.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>A tecla F19.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>A tecla F2.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>A tecla F20.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>A tecla F21.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>A tecla F22.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>A tecla F23.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>A tecla F24.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>A tecla F3.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>A tecla F4.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>A tecla F5.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>A tecla F6.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>A tecla F7.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>A tecla F8.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>A tecla F9.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>A tecla do modo final do IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>A tecla G.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>A tecla H.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>A tecla do modo IME Hangul.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>A tecla do modo IME Hanja.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>A tecla Help.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>A tecla Home.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>A tecla I.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>A tecla de aceitação do IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>A tecla de conversão do IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>A solicitação de alteração do Modo do IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>A tecla IME NonConvert.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>Uma chave especial que mascara a chave real processada por um IME.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>A tecla Insert.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>A tecla J.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>A tecla do modo IME Junja.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>A tecla K.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>A tecla do modo IME Kana.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>A tecla do modo IME Kanji.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>A tecla L.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>A tecla Launch Application1.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>A tecla Launch Application2.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>A tecla Launch Mail.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>A tecla Seta para a Esquerda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>A tecla ALT esquerda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>A tecla CTRL esquerda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>A tecla Shift esquerda.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>A tecla Linefeed.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>A tecla esquerda do logotipo do Windows (Microsoft Natural Keyboard).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>A tecla M.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>A tecla Media Next Track.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>A tecla Media Play Pause.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>A tecla Media Previous Track.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>A tecla de Parada da Mídia.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>A tecla Multiply.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>A tecla N.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>A tecla Page Down.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>Uma constante reservada para uso futuro.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>Nenhuma tecla pressionada.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>A tecla Num Lock.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>A tecla 0 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>A tecla 1 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>A tecla 2 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>A tecla 3 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>A tecla 4 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>A tecla 5 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>A tecla 6 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>A tecla 7 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>A tecla 8 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>A tecla 9 no teclado numérico.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>A tecla O.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>A tecla 1 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>A tecla 102 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>A tecla 2 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>A tecla 3 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>A tecla 4 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>A tecla 5 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>A tecla 6 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>A tecla 7 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>A tecla 8 do OEM.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>A tecla OEM ATTN.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>A tecla OEM AUTO.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>A tecla OEM Backslash.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>A tecla OEM BACKTAB.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>A tecla OEM Clear.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>A tecla OEM Close Brackets.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>A tecla OEM Comma.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>A tecla OEM COPY.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>A tecla OEM ENLW.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>A tecla OEM FINISH.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>A tecla OEM Minus.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>A tecla OEM Open Brackets.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>A tecla OEM Period.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>A tecla OEM Pipe.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>A tecla OEM Addition.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>A tecla OEM Question.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>A tecla OEM Quotes.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>A tecla OEM Semicolon.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>A tecla OEM Tilde.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>A tecla P.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>A tecla PA1.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>A tecla Page Down.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>A tecla Page Up.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>A tecla Pause.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>A tecla PLAY.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>A tecla Print.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>A tecla Print Screen.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>A tecla Page Up.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>A tecla Q.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>A tecla R.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>A tecla Return.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>A tecla Seta para a Direita.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>A tecla ALT direita.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>A tecla CTRL direita.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>A tecla Shift direita.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>A tecla direita do logotipo do Windows (Microsoft Natural Keyboard).</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>A tecla S.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>A tecla Scroll Lock.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>A tecla Select.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>A tecla Select Media.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>A tecla Separador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>A tecla de suspensão do computador.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>A tecla Print Screen.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>A tecla Barra de Espaços.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>A tecla Subtrair.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>Uma chave especial que mascara a chave real processada como uma chave do sistema.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>A tecla T.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>A tecla Tab.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>A tecla U.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>A tecla Seta para Cima.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>A tecla V.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>A tecla Abaixar Volume.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>A tecla Ativar mudo.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>A tecla Aumentar Volume.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>A tecla W.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>A tecla X.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>A tecla Y.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>A tecla Z.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>A tecla ZOOM.</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>Converte um objeto <see cref="T:System.Windows.Input.Key" /> de e em outros tipos.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.Key" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se um objeto do tipo especificado pode ser convertido em uma instância do <see cref="T:System.Windows.Input.Key" />, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="sourceType">O tipo que está sendo avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="sourceType" /> for do tipo <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se uma instância do <see cref="T:System.Windows.Input.Key" /> pode ser convertida no tipo especificado, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="destinationType">O tipo que está sendo avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="destinationType" /> for do tipo <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Tenta converter o objeto especificado em um <see cref="T:System.Windows.Input.Key" />, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="culture">Informações específicas à cultura.</param>
      <param name="source">O objeto a ser convertido.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> não pode ser convertido.</exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Tenta converter um <see cref="T:System.Windows.Input.Key" /> no tipo especificado, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="culture">Informações específicas à cultura.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> não pode ser convertido em <paramref name="destinationType" />.</exception>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>Fornece métodos estáticos para converter entre teclas virtuais Win32 e a enumeração <see cref="T:System.Windows.Input.Key" /> do WPF.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>Converte uma tecla virtual Win32 em WPF <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="virtualKey">A tecla virtual a ser convertida.</param>
      <returns>A tecla WPF.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>Converte um WPF <see cref="T:System.Windows.Input.Key" /> em uma tecla virtual Win32.</summary>
      <param name="key">O WPF a ser convertido.</param>
      <returns>A tecla virtual Win32.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Input.Key" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.KeyValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se a <see cref="T:System.String" /> especificada pode ser convertida em uma instância de <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.Windows.Input.Key" /> especificado pode ser convertido em um <see cref="T:System.String" />.</summary>
      <param name="value">A chave ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um <see cref="T:System.Windows.Input.Key" />.</summary>
      <param name="value">A cadeia de caracteres a ser convertida em um <see cref="T:System.Windows.Input.Key" />.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Input.Key" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Input.Key" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">A chave a ser convertida em uma cadeia de caracteres.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma representação de cadeia de caracteres invariável do <see cref="T:System.Windows.Input.Key" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>Especifica o conjunto de chaves de modificador.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>A tecla ALT.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>A tecla CTRL.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>Nenhum modificador está pressionado.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>A tecla SHIFT.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>Pressione a tecla do logotipo do Windows.</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>Converte um objeto <see cref="T:System.Windows.Input.ModifierKeys" /> de e em outros tipos.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.ModifierKeysConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se um objeto do tipo especificado pode ser convertido em uma instância do <see cref="T:System.Windows.Input.ModifierKeys" />, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="sourceType">O tipo que está sendo avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="sourceType" /> for do tipo <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se uma instância do <see cref="T:System.Windows.Input.ModifierKeys" /> pode ser convertida no tipo especificado, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="destinationType">O tipo que está sendo avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="destinationType" /> for do tipo <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Tenta converter o objeto especificado em um <see cref="T:System.Windows.Input.ModifierKeys" />, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="culture">Informações específicas à cultura.</param>
      <param name="source">O objeto a ser convertido.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> não pode ser convertido.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Tenta converter um <see cref="T:System.Windows.Input.ModifierKeys" /> no tipo especificado, usando o contexto especificado.</summary>
      <param name="context">Um contexto de formato que fornece informações sobre o ambiente do qual este conversor está sendo invocado.</param>
      <param name="culture">Informações específicas à cultura.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> não é mapeado para um <see cref="T:System.Windows.Input.ModifierKeys" /> válido.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> não pode ser convertido.</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>Determina se o valor especificado é um valor <see cref="T:System.Windows.Input.ModifierKeys" /> válido.</summary>
      <param name="modifierKeys">O valor para verificar a validade.</param>
      <returns>
        <see langword="true" /> se a entrada for um valor <see cref="T:System.Windows.Input.ModifierKeys" /> válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se a <see cref="T:System.String" /> especificada pode ser convertida em uma instância de <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se o <see cref="T:System.Windows.Input.ModifierKeys" /> especificado pode ser convertido em um <see cref="T:System.String" />.</summary>
      <param name="value">A teclas modificadoras a serem avaliadas para conversão.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um valor <see cref="T:System.Windows.Input.ModifierKeys" />.</summary>
      <param name="value">A cadeia de caracteres a ser convertida em um <see cref="T:System.Windows.Input.ModifierKeys" />.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Input.ModifierKeys" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Input.ModifierKeys" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">A chave a ser convertida em uma cadeia de caracteres.</param>
      <param name="context">Informações de contexto que são usadas para conversão.</param>
      <returns>Uma representação de cadeia de caracteres invariável do valor <see cref="T:System.Windows.Input.ModifierKeys" /> especificado.</returns>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>Representa uma solicitação para mover o foco para outro controle.</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.TraversalRequest" />.</summary>
      <param name="focusNavigationDirection">A direção pretendida da travessia do foco, como um valor da enumeração.</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>Obtém a direção de passagem.</summary>
      <returns>Um dos valores de enumeração da direção de passagem.</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary>Obtém ou define um valor que indica se a travessia do foco atingiu o fim dos elementos filho que podem ter foco.</summary>
      <returns>
        <see langword="true" />Se essa passagem tiver atingido o final dos elementos filho que podem ter foco; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>Descreve a largura, altura e local de um retângulo inteiro.</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância de um <see cref="T:System.Windows.Int32Rect" /> com as coordenadas <see cref="P:System.Windows.Int32Rect.X" /> e <see cref="P:System.Windows.Int32Rect.Y" /> especificadas e o <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" /> especificados.</summary>
      <param name="x">O <see cref="P:System.Windows.Int32Rect.X" /> da nova instância <see cref="T:System.Windows.Int32Rect" /> que especifica a coordenada X do canto superior esquerdo do retângulo.</param>
      <param name="y">O <see cref="P:System.Windows.Int32Rect.Y" /> da nova instância <see cref="T:System.Windows.Int32Rect" /> que especifica a coordenada Y do canto superior esquerdo do retângulo.</param>
      <param name="width">O <see cref="P:System.Windows.Int32Rect.Width" /> da nova instância <see cref="T:System.Windows.Int32Rect" /> que especifica a largura do retângulo.</param>
      <param name="height">O <see cref="P:System.Windows.Int32Rect.Height" /> da nova instância <see cref="T:System.Windows.Int32Rect" /> que especifica a altura do retângulo.</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>Obtém o retângulo vazio, um valor especial que representa um retângulo sem posição ou área.</summary>
      <returns>Um retângulo vazio sem posição ou área.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>Determina se o retângulo especificado é igual a este retângulo.</summary>
      <param name="o">O objeto a comparar ao retângulo atual.</param>
      <returns>
        <see langword="true" />, se <paramref name="o" /> for um <see cref="T:System.Windows.Int32Rect" /> e tiver o mesmo <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" /> desse retângulo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>Determina se o retângulo especificado é igual a este retângulo.</summary>
      <param name="value">O retângulo a ser comparado ao retângulo atual.</param>
      <returns>
        <see langword="true" />, se <paramref name="value" /> for o mesmo <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" /> desse retângulo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Determina se os retângulos especificados são iguais.</summary>
      <param name="int32Rect1">O primeiro retângulo a ser comparado.</param>
      <param name="int32Rect2">O segundo retângulo a ser comparado.</param>
      <returns>
        <see langword="true" />, se <paramref name="int32Rect1" /> e <paramref name="int32Rect2" /> tiverem os mesmos <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>Cria um código hash dos valores <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" /> deste retângulo.</summary>
      <returns>O código hash desse retângulo.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary>Obtém um valor que indica se as propriedades <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" /> da <see cref="T:System.Windows.Int32Rect" /> são maiores que 0.</summary>
      <returns>
        <see langword="true" />Se as <see cref="P:System.Windows.Int32Rect.Width" /> propriedades <see cref="P:System.Windows.Int32Rect.Height" /> e de <see cref="T:System.Windows.Int32Rect" /> forem maiores que 0; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>Obtém ou define a altura do retângulo.</summary>
      <returns>A altura do retângulo. O valor padrão é <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>Obtém um valor que indica se o retângulo está vazio.</summary>
      <returns>
        <see langword="true" />Se o retângulo estiver vazio; caso contrário <see langword="false" />,. O valor padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compara a igualdade exata de dois retângulos.</summary>
      <param name="int32Rect1">O primeiro retângulo a ser comparado.</param>
      <param name="int32Rect2">O segundo retângulo a ser comparado.</param>
      <returns>
        <see langword="true" />, se <paramref name="int32Rect1" /> e <paramref name="int32Rect2" /> tiverem os mesmos <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>Compara dois retângulos quanto à desigualdade.</summary>
      <param name="int32Rect1">O primeiro retângulo a ser comparado.</param>
      <param name="int32Rect2">O segundo retângulo a ser comparado.</param>
      <returns>
        <see langword="false" />, se <paramref name="int32Rect1" /> e <paramref name="int32Rect2" /> tiverem os mesmos <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" />; caso contrário, se nem todos esses valores forem iguais, <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>Cria uma estrutura <see cref="T:System.Windows.Int32Rect" /> com base na representação de <see cref="T:System.String" /> especificada.</summary>
      <param name="source">Uma representação da cadeia de caracteres de um <see cref="T:System.Windows.Int32Rect" />.</param>
      <returns>A estrutura <see cref="T:System.Windows.Int32Rect" /> equivalente.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formata o valor da instância atual usando o formato especificado.</summary>
      <param name="format">O formato a ser usado.</param>
      <param name="provider">O provedor a ser usado para formatar o valor</param>
      <returns>O valor da instância atual no formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>Cria uma representação de cadeia de caracteres desse <see cref="T:System.Windows.Int32Rect" />.</summary>
      <returns>Uma cadeia de caracteres contendo os mesmos valores <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> e <see cref="P:System.Windows.Int32Rect.Height" /> dessa estrutura <see cref="T:System.Windows.Int32Rect" />.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>Cria uma representação de cadeia de caracteres deste <see cref="T:System.Windows.Int32Rect" /> com base no <see cref="T:System.IFormatProvider" /> fornecido.</summary>
      <param name="provider">O provedor de formato a ser usado. Se o provedor for <see langword="null" />, a cultura atual será usada.</param>
      <returns>Uma representação de cadeia de caracteres dessa instância de <see cref="T:System.Windows.Int32Rect" />.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>Obtém ou define a largura do retângulo.</summary>
      <returns>A largura do retângulo. O valor padrão é <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>Obtém ou define a coordenada X do canto superior esquerdo do retângulo.</summary>
      <returns>A coordenada X do canto superior esquerdo do retângulo. O valor padrão é <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>Obtém ou define a coordenada Y do canto superior esquerdo do retângulo.</summary>
      <returns>A coordenada y do canto superior esquerdo do retângulo. O valor padrão é <c>0</c>.</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>Converte instâncias de outros tipos de e para um <see cref="T:System.Windows.Int32Rect" />.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Int32RectConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se um objeto pode ser convertido de um determinado tipo em uma instância de um <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="sourceType">O tipo de origem que está sendo avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se o tipo puder ser convertido para um <see cref="T:System.Windows.Int32Rect" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se uma instância de um <see cref="T:System.Windows.Int32Rect" /> pode ser convertida em um tipo diferente.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="destinationType">O tipo desejado para o qual se está avaliando converter este <see cref="T:System.Windows.Int32Rect" />.</param>
      <returns>
        <see langword="true" /> se este <see cref="T:System.Windows.Int32Rect" /> puder ser convertido para <paramref name="destinationType" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Tenta converter um tipo especificado em um <see cref="T:System.Windows.Int32Rect" />.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="culture">Informações culturais a serem respeitadas durante a conversão.</param>
      <param name="value">O objeto sendo convertido.</param>
      <returns>O <see cref="T:System.Windows.Int32Rect" /> criado da conversão de <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Gerada se o objeto especificado é NULL ou é um tipo que não pode ser convertido em um <see cref="T:System.Windows.Int32Rect" />.</exception>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Tenta converter um <see cref="T:System.Windows.Int32Rect" /> para um tipo especificado.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="culture">Informações culturais a serem respeitadas durante a conversão.</param>
      <param name="value">O <see cref="T:System.Windows.Int32Rect" /> a ser convertido.</param>
      <param name="destinationType">O tipo para o qual converter este <see cref="T:System.Windows.Int32Rect" />.</param>
      <returns>O objeto criado da conversão deste <see cref="T:System.Windows.Int32Rect" />.</returns>
      <exception cref="T:System.NotSupportedException">Gerada se <paramref name="value" /> é <see langword="null" /> ou não é um <see cref="T:System.Windows.Int32Rect" /> ou então se não <paramref name="destinationType" /> não é um dos tipos válidos para conversão.</exception>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>Habilita o controle compartilhado da bomba de mensagens entre Win32 e WPF em cenários de interoperação.</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>Obtém a última mensagem que foi gerada.</summary>
      <returns>A última mensagem.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>Ocorre quando um thread torna-se modal.</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>Obtém um valor que indica se o thread é modal.</summary>
      <returns>
        <see langword="true" /> se o thread for modal; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>Ocorre quando um thread modal torna-se não modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>Chamado para indicar que um thread modal não é mais modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>Chamado para indicar que o thread é modal.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>Chamado para indicar que um thread está ocioso.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>Indica que uma nova mensagem está disponível para possível manipulação.</summary>
      <param name="msg">A mensagem e seus dados associados.</param>
      <returns>
        <see langword="true" />, se um dos módulos que escutam o loop de mensagens processou a mensagem. O proprietário do loop de mensagens deve ignorar a mensagem. <see langword="false" />, se a mensagem não foi processada. Nesse caso, o proprietário da bomba de mensagens deve chamar a função Win32 TranslateMessage seguida por DispatchMessage.</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>Ocorre quando a bomba de mensagens recebe uma mensagem do teclado.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>Ocorre quando o thread está ocioso.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>Ocorre quando a bomba de mensagens recebe uma mensagem do teclado.</summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>Fornece um coletor de teclado para componentes que gerenciam o uso da tecla TAB, aceleradores e mnemônicos entre limites de interoperabilidade e entre HWNDs. Essa interface implementa o gerenciamento de mensagens de teclado em cenários de interoperação WPF-Win32.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>Obtém um valor que indica se o coletor ou um de seus componentes independentes tem foco.</summary>
      <returns>
        <see langword="true" /> se o coletor ou um de seus componentes independentes tiver foco; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>Obtém ou define uma referência à interface <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> do contêiner do componente.</summary>
      <returns>Uma referência à interface do <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> contêiner.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Chamado quando uma das teclas mnemônicas (teclas de acesso) para esse coletor é invocada.</summary>
      <param name="msg">A mensagem para os dados associados e mnemônicos. Não modifique a estrutura dessa mensagem. É passado por referência apenas por razões de desempenho.</param>
      <param name="modifiers">Teclas modificadoras.</param>
      <returns>
        <see langword="true" /> se a mensagem foi manipulada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>Registra a interface <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> de um componente independente.</summary>
      <param name="sink">O coletor <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> do componente independente.</param>
      <returns>O site <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> do componente independente.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>Define se o foco estará na primeira parada de tabulação ou na última parada de tabulação do coletor.</summary>
      <param name="request">Especifica se o foco deve ser definido para a primeira ou a última parada de tabulação.</param>
      <returns>
        <see langword="true" /> se o foco tiver sido definido como solicitado; <see langword="false" />, se não houver nenhuma parada de tabulação.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processa a entrada do teclado no nível da mensagem por pressionamento de tecla.</summary>
      <param name="msg">A mensagem e seus dados associados. Não modifique esta estrutura. É passado por referência apenas por razões de desempenho.</param>
      <param name="modifiers">Teclas modificadoras.</param>
      <returns>
        <see langword="true" /> se a mensagem tiver sido manipulada pela implementação de método; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>Processa as mensagens de entrada WM_CHAR, WM_SYSCHAR, WM_DEADCHAR e WM_SYSDEADCHAR antes que <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> seja chamado.</summary>
      <param name="msg">A mensagem e seus dados associados. Não modifique esta estrutura. É passado por referência apenas por razões de desempenho.</param>
      <param name="modifiers">Teclas modificadoras.</param>
      <returns>
        <see langword="true" /> se a mensagem foi processada e <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> não deve ser chamado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>Gerencia o foco do teclado dentro do contêiner.  Essa interface implementa o gerenciamento de mensagens de teclado em cenários de interoperação WPF-Win32.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>Chamado por um componente independente quando ele atingiu sua última parada de tabulação e não tem mais itens para os quais tabular.</summary>
      <param name="request">Especifica se o foco deve ser definido para a primeira ou a última parada de tabulação.</param>
      <returns>Se esse método retornar <see langword="true" />, o site terá alterado o foco para outro componente. Se esse método retornar <see langword="false" />, o foco ainda estará dentro do componente de chamada. O componente deve "encapsular" e definir o foco para a primeira parada de tabulação independente.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>Obtém o coletor de teclado associado a este site.</summary>
      <returns>A interface do <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> site atual.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>Cancela o registro de um coletor de entrada de teclado filho deste site.</summary>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>Contém informações da mensagem da fila de mensagens do thread.</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>Obtém ou define o identificador de janela (HWND) para a janela cujo procedimento de janela recebe a mensagem.</summary>
      <returns>O identificador de janela (HWND).</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>Obtém ou define o valor <paramref name="lParam" /> que especifica informações adicionais sobre a mensagem. O significado exato depende do valor do membro <see cref="P:System.Windows.Interop.MSG.message" />.</summary>
      <returns>O <paramref name="lParam" /> valor da mensagem.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>Obtém ou define o identificador da mensagem.</summary>
      <returns>O identificador da mensagem.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>Obtém ou define a coordenada x da posição do cursor na tela de quando a mensagem foi postada.</summary>
      <returns>A coordenada x da posição do cursor.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>Obtém ou define a coordenada y da posição do cursor na tela de quando a mensagem foi postada.</summary>
      <returns>A coordenada y da posição do cursor.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>Obtém ou define a hora em que a mensagem foi postada.</summary>
      <returns>A hora em que a mensagem foi postada.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>Obtém ou define o valor <paramref name="wParam" /> para a mensagem que especifica informações adicionais sobre a mensagem. O significado exato depende do valor da mensagem.</summary>
      <returns>O <paramref name="wParam" /> valor da mensagem.</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>Representa o método que manipula os eventos <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> e <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" />.</summary>
      <param name="msg">Uma estrutura com os dados da mensagem.</param>
      <param name="handled">
        <see langword="true" /> se a mensagem foi manipulada; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>Fornece suporte de escuta de eventos para as classes que esperam receber eventos por meio do padrão WeakEvent e um <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>Recebe eventos do gerenciador de eventos centralizado.</summary>
      <param name="managerType">O tipo do <see cref="T:System.Windows.WeakEventManager" /> que chama esse método.</param>
      <param name="sender">O objeto que originou o evento.</param>
      <param name="e">Dados do evento.</param>
      <returns>
        <see langword="true" /> se o ouvinte tratou o evento. É considerado um erro pela manipulação de <see cref="T:System.Windows.WeakEventManager" /> em WPF para registrar um ouvinte para um evento que o ouvinte não manipula. De qualquer forma, o método deverá retornar <see langword="false" /> se receber um evento que não reconhece ou trata.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>Representa um identificador de propriedade e o valor da propriedade para a propriedade de dependência definida localmente.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>Determina se duas instâncias <see cref="T:System.Windows.LocalValueEntry" /> são iguais.</summary>
      <param name="obj">O <see cref="T:System.Windows.LocalValueEntry" /> a ser comparado com o <see cref="T:System.Windows.LocalValueEntry" /> atual.</param>
      <returns>Essa implementação <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> compara os valores de <see cref="P:System.Windows.LocalValueEntry.Property" /> e potencialmente compara os valores de <see cref="P:System.Windows.LocalValueEntry.Value" />. O componente <see cref="P:System.Windows.LocalValueEntry.Property" /> de um <see cref="T:System.Windows.LocalValueEntry" /> é um tipo de valor, portanto, sempre será uma comparação bit a bit. Para o componente <see cref="P:System.Windows.LocalValueEntry.Value" />, essa implementação usa uma comparação bit a bit se ele é um tipo de valor. Para definir propriedades locais que têm tipos de referência, o comportamento é adiado para os mecanismos de determinação de igualdade desse tipo, porque ele usa apenas o operador == nos dois valores internamente. Por padrão, isso seria uma igualdade de referência dos valores e, portanto, a igualdade de todo o <see cref="T:System.Windows.LocalValueEntry" /> se tornaria uma igualdade de referência.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>Retorna o código hash para este <see cref="T:System.Windows.LocalValueEntry" />.</summary>
      <returns>Um valor inteiro de 32 bits com sinal.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compara as instâncias de <see cref="T:System.Windows.LocalValueEntry" /> especificadas para determinar se são iguais.</summary>
      <param name="obj1">A primeira instância a ser comparada.</param>
      <param name="obj2">A segunda instância a ser comparada.</param>
      <returns>
        <see langword="true" /> se o <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEntry" /> for igual a <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEntry" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>Compara as instâncias de <see cref="T:System.Windows.LocalValueEnumerator" /> especificadas para determinar se são diferentes.</summary>
      <param name="obj1">A primeira instância a ser comparada.</param>
      <param name="obj2">A segunda instância a ser comparada.</param>
      <returns>Essa implementação compara os valores dos componentes <see cref="P:System.Windows.LocalValueEntry.Property" /> e <see cref="P:System.Windows.LocalValueEntry.Value" /> de um <see cref="T:System.Windows.LocalValueEntry" />. O componente <see cref="P:System.Windows.LocalValueEntry.Property" /> de um <see cref="T:System.Windows.LocalValueEntry" /> é sempre um tipo de valor, portanto, essa comparação sempre será uma comparação bit a bit. Para o componente <see cref="P:System.Windows.LocalValueEntry.Value" />, essa implementação usa uma comparação bit a bit se ele é um tipo de valor.  
Para definir propriedades locais que têm tipos de referência, o comportamento é adiado para os mecanismos de determinação de igualdade desse tipo, porque ele usa o operador <see langword="==" /> nos dois valores internamente. Por padrão, essa é uma igualdade de referência dos valores.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>Obtém o identificador para a propriedade de dependência definida localmente que é representada por esta entrada.</summary>
      <returns>O identificador para a propriedade de dependência definida localmente.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>Obtém o valor da propriedade de dependência definida localmente.</summary>
      <returns>O valor da propriedade de dependência definida localmente como um objeto.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>Fornece suporte de enumeração para os valores de locais de quaisquer propriedades de dependência que existem em um <see cref="T:System.Windows.DependencyObject" />.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>Obtém o número de itens representados na coleção.</summary>
      <returns>Número de itens na coleção.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>Obtém o elemento atual na coleção.</summary>
      <returns>O <see cref="T:System.Windows.LocalValueEntry" /> atual na coleção.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Windows.LocalValueEnumerator" /> fornecido é equivalente a este <see cref="T:System.Windows.LocalValueEnumerator" />.</summary>
      <param name="obj">O <see cref="T:System.Windows.LocalValueEnumerator" /> a ser comparado com o <see cref="T:System.Windows.LocalValueEnumerator" /> atual.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Windows.LocalValueEnumerator" /> especificado for igual ao <see cref="T:System.Windows.LocalValueEnumerator" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>Retorna um código hash para o <see cref="T:System.Windows.LocalValueEnumerator" /> atual.</summary>
      <returns>Um código hash de inteiro de 32 bits.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento da coleção.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compara os dois objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados para verificar se são iguais.</summary>
      <param name="obj1">O primeiro objeto a ser comparado.</param>
      <param name="obj2">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se o <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> for igual a <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>Compara dois objetos <see cref="T:System.Windows.LocalValueEnumerator" /> especificados para determinar se eles não são iguais.</summary>
      <param name="obj1">O primeiro objeto a ser comparado.</param>
      <param name="obj2">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se as instâncias não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>Para obter uma descrição desses membros, consulte <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>O elemento atual na coleção.</returns>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>Especifica como uma propriedade deverá ser serializada.</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>A propriedade deve ser serializada como um atributo.</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>Especifica os sinalizadores de serialização para uma propriedade.</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" />.</summary>
      <param name="designerSerializationOptions">Especifica como a propriedade deverá ser serializada.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" /> não é um valor <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> válido.</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>Obtém o <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> definido no atributo.</summary>
      <returns>A opção de serialização, como um valor da enumeração.</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>Classe abstrata usada internamente pelo compilador de XAML do WPF para compatibilidade com o uso de tipos internos.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.InternalTypeHelper" />.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>Quando substituído em uma classe derivada (gerada), anexa um delegado de manipulador de eventos a um evento interno.</summary>
      <param name="eventInfo">As informações de evento para o evento (informações de reflexão do CLR).</param>
      <param name="target">O destino em que o manipulador é anexado.</param>
      <param name="handler">O manipulador de eventos.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>Quando substituído em uma classe derivada (gerada), cria um delegado de evento, fazendo referência a um método de manipulador não público.</summary>
      <param name="delegateType">O <see cref="T:System.Type" /> do delegado.</param>
      <param name="target">O destino em que o manipulador é anexado.</param>
      <param name="handler">O nome da implementação do manipulador.</param>
      <returns>A referência de delegado.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>Quando substituído em uma classe derivada (gerada), cria uma instância de um tipo interno.</summary>
      <param name="type">O <see cref="T:System.Type" /> a ser criado.</param>
      <param name="culture">Informações específicas à cultura.</param>
      <returns>A instância criada.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>Quando substituído em uma classe derivada (gerada), obtém o valor de uma propriedade interna no objeto de destino</summary>
      <param name="propertyInfo">Informações de propriedade da propriedade a ser obtida.</param>
      <param name="target">O objeto que contém o valor da propriedade desejada.</param>
      <param name="culture">Informações específicas à cultura.</param>
      <returns>O valor da propriedade.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>Quando substituído em uma classe derivada (gerada), define o valor de uma propriedade interna no objeto de destino.</summary>
      <param name="propertyInfo">Informações de propriedade da propriedade a ser definida.</param>
      <param name="target">O objeto que contém o valor da propriedade desejada.</param>
      <param name="value">O valor a ser definido.</param>
      <param name="culture">Informações específicas à cultura.</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>Fornece um mecanismo pelo qual tipos podem declarar que estão aptos a receber uma expressão (ou outra classe) de uma extensão de marcação, em que a saída é um tipo de propriedade diferente da propriedade de destino. Não use para implementações do .NET Framework 4.</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>Fornece a manipulação para extensões de marcação que fornecem valores de propriedade. Não use para implementações do .NET Framework 4; consulte <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />.</summary>
      <param name="property">O nome da propriedade de destino.</param>
      <param name="markupExtension">A instância da extensão de marcação dos dados de entrada.</param>
      <param name="serviceProvider">Pode fornecer serviços adicionais que devem ser executados durante o processamento de dados de extensão de marcação para um valor da propriedade.</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>Classe abstrata que representa um objeto que pode ser usado para navegar em uma árvore de objetos.</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>Quando substituído em uma classe derivada, atribui um contexto raiz a classes <see cref="T:System.Windows.Markup.ValueSerializer" />.</summary>
      <param name="context">O <see cref="T:System.Windows.Markup.IValueSerializerContext" /> ao qual atribuir um contexto raiz.</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>Quando substituído em uma classe derivada, obtém os atributos associado a essa <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>A coleção de atributos.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>Quando substituído em uma classe derivada, obtém a instância do objeto representada por este <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>A instância do objeto</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>Quando substituído em uma classe derivada, obtém o tipo da instância <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />.</summary>
      <returns>O tipo do objeto.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>Quando substituído em uma classe derivada, obtém as propriedades dessa instância <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> que deve ser gravada em XAML.</summary>
      <returns>As propriedades.</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>Classe abstrata que fornece uma descrição de propriedade a ser usada ao gravar a marcação que encapsula o acesso a propriedades e seus valores.</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>Quando substituído em uma classe derivada, obtém os atributos associado a essa <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>A coleção de atributos.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>Quando substituído em uma classe derivada, obtém o identificador <see cref="T:System.Windows.DependencyProperty" /> para a propriedade de marcação se a propriedade for implementada como uma propriedade de dependência</summary>
      <returns>O identificador da propriedade de dependência.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>Quando substituído em uma classe derivada, determina se este <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> é um <see cref="T:System.Windows.DependencyProperty" /> anexado.</summary>
      <returns>
        <see langword="true" />se a propriedade for anexada <see cref="T:System.Windows.DependencyProperty" />; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>Quando substituído em uma classe derivada, determina se este <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> é uma propriedade de composição.</summary>
      <returns>
        <see langword="true" />Esta propriedade é uma propriedade composta; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>Quando substituído em uma classe derivada, determina se este <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa um argumento de construtor.</summary>
      <returns>
        <see langword="true" />Se essa propriedade representa um argumento de Construtor; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>Quando substituído em uma classe derivada, determina se este <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa conteúdo direto de uma coleção.</summary>
      <returns>
        <see langword="true" />se a propriedade representa conteúdo direto; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>Quando substituído em uma classe derivada, determina se este <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa a chave usada pelo <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> para armazenar o item em um dicionário.</summary>
      <returns>
        <see langword="true" />Se essa propriedade representar uma chave; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>Quando substituído em uma classe derivada, determina se este <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa o texto passado para um conversor de tipo para criar uma instância da propriedade ou se um construtor deve ser usado.</summary>
      <returns>
        <see langword="true" />, se isso <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representar uma cadeia de caracteres; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>Quando substituído em uma classe derivada, obtém os itens que compõem o valor dessa propriedade.</summary>
      <returns>Os itens que compõem o valor dessa propriedade.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>Quando substituído em uma classe derivada, obtém um nome que é usado para relatórios de erros e diagnóstico.</summary>
      <returns>O nome da Propriedade do identificador.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>Quando substituído em uma classe derivada, obtém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> para a propriedade de marcação.</summary>
      <returns>O descritor da propriedade.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>Quando substituído em uma classe derivada, obtém o tipo CLR da propriedade.</summary>
      <returns>O tipo CLR.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>Quando substituído em uma classe derivada, obtém o valor de cadeia de caracteres deste <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>O valor da cadeia de caracteres.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>Quando substituído em uma classe derivada, obtém o conjunto de tipos a que este <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> fará referência ao serializar seu valor como uma cadeia de caracteres.</summary>
      <returns>O conjunto de tipos.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>Quando substituído em uma classe derivada, obtém o valor atual deste <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
      <returns>O valor atual.</returns>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>Fornece uma implementação para a interface <see cref="T:System.IServiceProvider" /> com métodos que permitem adicionar serviços.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.ServiceProviders" />.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>Adiciona um serviço à lista.</summary>
      <param name="serviceType">Tipo de serviço do novo serviço.</param>
      <param name="service">A classe de implementação de serviço.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="service" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ocorreu uma tentativa de adicionar um serviço que já existe no dicionário.</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>Obtém o objeto de serviço do tipo especificado.</summary>
      <param name="serviceType">O tipo de objeto de serviço a obter.</param>
      <returns>Uma implementação de serviço para o tipo <paramref name="serviceType" />. Pode ser <see langword="null" /> se não há nenhum serviço armazenado para o tipo <paramref name="serviceType" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>Converte instâncias de <see cref="T:System.String" /> de e para instâncias de <see cref="T:System.Windows.Media.Matrix" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se a conversão de um determinado <see cref="T:System.String" /> em uma instância de <see cref="T:System.Windows.Media.Matrix" /> é possível.</summary>
      <param name="value">Cadeia de caracteres a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto usadas para conversão.</param>
      <returns>
        <see langword="true" /> se o valor puder ser convertido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determina se uma instância de <see cref="T:System.Windows.Media.Matrix" /> pode ser convertida em um <see cref="T:System.String" />.</summary>
      <param name="value">Instância de <see cref="T:System.Windows.Media.Matrix" /> a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto usadas para conversão.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> puder ser convertido em um <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Ocorre quando <paramref name="value" /> não é um <see cref="T:System.Windows.Media.Int32Collection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte um <see cref="T:System.String" /> em um <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="value">O valor de <see cref="T:System.String" /> a ser convertido em um <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="context">Informações de contexto usadas para conversão.</param>
      <returns>Uma nova instância de <see cref="T:System.Windows.Media.Matrix" /> com base no <paramref name="value" /> fornecido.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converte uma instância de <see cref="T:System.Windows.Media.Matrix" /> em um <see cref="T:System.String" />.</summary>
      <param name="value">Instância de <see cref="T:System.Windows.Media.Matrix" /> a ser avaliada para conversão.</param>
      <param name="context">Informações de contexto usadas para conversão.</param>
      <returns>Uma representação de <see cref="T:System.String" /> do objeto <see cref="T:System.Windows.Media.Matrix" /> fornecido.</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>Permite que aplicativos WPF desabilitem o reconhecimento de dpi (pontos por polegada) para todos os elementos de interface do usuário.</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />.</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>Representa uma matriz de transformação 3x3 usada para transformações no espaço 2D.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="m11">O novo coeficiente <see cref="P:System.Windows.Media.Matrix.M11" /> da estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="m12">O novo coeficiente <see cref="P:System.Windows.Media.Matrix.M12" /> da estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="m21">O novo coeficiente <see cref="P:System.Windows.Media.Matrix.M21" /> da estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="m22">O novo coeficiente <see cref="P:System.Windows.Media.Matrix.M22" /> da estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="offsetX">O novo coeficiente <see cref="P:System.Windows.Media.Matrix.OffsetX" /> da estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="offsetY">O novo coeficiente <see cref="P:System.Windows.Media.Matrix.OffsetY" /> da estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary>Acrescenta a estrutura <see cref="T:System.Windows.Media.Matrix" /> especificada a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="matrix">A estrutura <see cref="T:System.Windows.Media.Matrix" /> a ser acrescentada a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary>Obtém o determinante dessa estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O determinante desse <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Object" /> especificado é uma estrutura <see cref="T:System.Windows.Media.Matrix" /> idêntica a esta <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="o">O <see cref="T:System.Object" /> de comparação.</param>
      <returns>
        <see langword="true" /> se <paramref name="o" /> for uma estrutura <see cref="T:System.Windows.Media.Matrix" /> idêntica a esta estrutura <see cref="T:System.Windows.Media.Matrix" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>Determina se a estrutura <see cref="T:System.Windows.Media.Matrix" /> especificada é idêntica a esta instância.</summary>
      <param name="value">A instância <see cref="T:System.Windows.Media.Matrix" /> a ser comparada a essa instância.</param>
      <returns>
        <see langword="true" /> se as instâncias forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determina se as duas estruturas <see cref="T:System.Windows.Media.Matrix" /> especificadas são idênticas.</summary>
      <param name="matrix1">A primeira estrutura <see cref="T:System.Windows.Media.Matrix" /> a ser comparada.</param>
      <param name="matrix2">A segunda estrutura <see cref="T:System.Windows.Media.Matrix" /> a ser comparada.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix1" /> e <paramref name="matrix2" /> forem idênticas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>Retorna o código hash para esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O código hash para essa instância.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary>Obtém um valor que indica se esta estrutura <see cref="T:System.Windows.Media.Matrix" /> pode ser invertida.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Windows.Media.Matrix" /> tiver um inverso; caso <see langword="false" />contrário,. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>Obtém um <see cref="T:System.Windows.Media.Matrix" /> de identidade.</summary>
      <returns>Uma matriz de identidade.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary>Inverte essa estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <exception cref="T:System.InvalidOperationException">A estrutura <see cref="T:System.Windows.Media.Matrix" /> não pode ser invertida.</exception>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>Obtém um valor que indica se esta estrutura <see cref="T:System.Windows.Media.Matrix" /> é uma matriz de identidade.</summary>
      <returns>
        <see langword="true" />se a <see cref="T:System.Windows.Media.Matrix" /> estrutura for uma matriz de identidade; caso <see langword="false" />contrário,. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>Obtém ou define o valor da primeira linha e primeira coluna dessa estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O valor da primeira linha e da primeira coluna dessa <see cref="T:System.Windows.Media.Matrix" />. O valor padrão é 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>Obtém ou define o valor da primeira linha e segunda coluna dessa estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O valor da primeira linha e da segunda coluna desse <see cref="T:System.Windows.Media.Matrix" />. O valor padrão é 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>Obtém ou define o valor da segunda linha e da primeira coluna desta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O valor da segunda linha e a <see cref="T:System.Windows.Media.Matrix" />primeira coluna deste. O valor padrão é 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>Obtém ou define o valor da segunda linha e da segunda coluna desta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O valor da segunda linha e da segunda coluna dessa <see cref="T:System.Windows.Media.Matrix" /> estrutura. O valor padrão é 1.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Multiplica uma estrutura <see cref="T:System.Windows.Media.Matrix" /> por outra estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="trans1">A primeira estrutura <see cref="T:System.Windows.Media.Matrix" /> a se multiplicar.</param>
      <param name="trans2">A segunda estrutura <see cref="T:System.Windows.Media.Matrix" /> a se multiplicar.</param>
      <returns>O resultado de multiplicar <paramref name="trans1" /> por <paramref name="trans2" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>Obtém ou define o valor da terceira linha e da primeira coluna desta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O valor da terceira linha e da primeira coluna desta estrutura <see cref="T:System.Windows.Media.Matrix" />. O valor padrão é 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>Obtém ou define o valor da terceira linha e da segunda coluna desta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>O valor da terceira linha e da segunda coluna dessa <see cref="T:System.Windows.Media.Matrix" /> estrutura. O valor padrão é 0.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determina se as duas estruturas <see cref="T:System.Windows.Media.Matrix" /> especificadas são idênticas.</summary>
      <param name="matrix1">A primeira estrutura <see cref="T:System.Windows.Media.Matrix" /> a ser comparada.</param>
      <param name="matrix2">A segunda estrutura <see cref="T:System.Windows.Media.Matrix" /> a ser comparada.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix1" /> e <paramref name="matrix2" /> forem idênticas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Determina se as duas estruturas <see cref="T:System.Windows.Media.Matrix" /> especificadas não são idênticas.</summary>
      <param name="matrix1">A primeira estrutura <see cref="T:System.Windows.Media.Matrix" /> a ser comparada.</param>
      <param name="matrix2">A segunda estrutura <see cref="T:System.Windows.Media.Matrix" /> a ser comparada.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix1" /> e <paramref name="matrix2" /> não forem idênticas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>Multiplica uma estrutura <see cref="T:System.Windows.Media.Matrix" /> por outra estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="trans1">A primeira estrutura <see cref="T:System.Windows.Media.Matrix" /> a se multiplicar.</param>
      <param name="trans2">A segunda estrutura <see cref="T:System.Windows.Media.Matrix" /> a se multiplicar.</param>
      <returns>O resultado de multiplicar <paramref name="trans1" /> por <paramref name="trans2" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary>Converte uma representação <see cref="T:System.String" /> de uma matriz em uma estrutura <see cref="T:System.Windows.Media.Matrix" /> equivalente.</summary>
      <param name="source">A representação <see cref="T:System.String" /> da matriz.</param>
      <returns>A estrutura <see cref="T:System.Windows.Media.Matrix" /> equivalente.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary>Precede a estrutura <see cref="T:System.Windows.Media.Matrix" /> especificada nesta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="matrix">A estrutura <see cref="T:System.Windows.Media.Matrix" /> para preceder essa estrutura <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary>Aplica uma rotação do ângulo especificado sobre a origem desta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="angle">O ângulo de rotação.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>Gira esta matriz sobre o ponto especificado.</summary>
      <param name="angle">O ângulo, em graus, pelo qual girar essa matriz.</param>
      <param name="centerX">A coordenada X do ponto sobre qual girar essa matriz.</param>
      <param name="centerY">A coordenada Y do ponto sobre qual girar essa matriz.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>Precede uma rotação do ângulo especificado no ponto especificado para esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="angle">O ângulo da rotação, em graus.</param>
      <param name="centerX">A coordenada X do centro de rotação.</param>
      <param name="centerY">A coordenada Y do centro de rotação.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary>Precede uma rotação do ângulo especificado para esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="angle">O ângulo de rotação a ser precedido.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary>Acrescenta o vetor de escala especificado a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">O valor segundo o qual este <see cref="T:System.Windows.Media.Matrix" /> deve ser escalado ao longo do eixo X.</param>
      <param name="scaleY">O valor segundo o qual este <see cref="T:System.Windows.Media.Matrix" /> deve ser escalado ao longo do eixo Y.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>Dimensiona esse <see cref="T:System.Windows.Media.Matrix" /> pelo valor especificado sobre o ponto especificado.</summary>
      <param name="scaleX">A quantia segundo a qual este <see cref="T:System.Windows.Media.Matrix" /> deve ser escalado ao longo do eixo X.</param>
      <param name="scaleY">A quantia segundo a qual este <see cref="T:System.Windows.Media.Matrix" /> deve ser escalado ao longo do eixo Y.</param>
      <param name="centerX">A coordenada X do ponto central da operação de escala.</param>
      <param name="centerY">A coordenada Y do ponto central da operação de escala.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>Precede a escala especificada sobre o ponto especificado deste <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">O fator de escala do eixo x.</param>
      <param name="scaleY">O fator de escala do eixo y.</param>
      <param name="centerX">A coordenada X do ponto sobre o qual a operação de escala é executada.</param>
      <param name="centerY">A coordenada Y do ponto sobre o qual a operação de escala é executada.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary>Precede o vetor de escala especificado a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="scaleX">O valor segundo o qual esta estrutura <see cref="T:System.Windows.Media.Matrix" /> deve ser escalada ao longo do eixo X.</param>
      <param name="scaleY">O valor segundo o qual esta estrutura <see cref="T:System.Windows.Media.Matrix" /> deve ser escalada ao longo do eixo Y.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary>Altera essa estrutura <see cref="T:System.Windows.Media.Matrix" /> em uma matriz de identidade.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary>Acrescenta uma distorção dos graus especificados nas dimensões X e Y a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="skewX">O ângulo na dimensão X pelo qual distorcer este <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">O ângulo na dimensão Y pelo qual distorcer este <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary>Precede uma distorção dos graus especificados nas dimensões X e Y a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="skewX">O ângulo na dimensão X pelo qual distorcer este <see cref="T:System.Windows.Media.Matrix" />.</param>
      <param name="skewY">O ângulo na dimensão Y pelo qual distorcer este <see cref="T:System.Windows.Media.Matrix" />.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formata o valor da instância atual usando o formato especificado.</summary>
      <param name="format">O formato a ser usado.  

ou - 
Uma referência nula (<see langword="Nothing" /> no Visual Basic) para usar o formato padrão definido para o tipo da implementação <see cref="T:System.IFormattable" />.</param>
      <param name="provider">O provedor a ser usado para formatar o valor.  

ou - 
Uma referência nula (<see langword="Nothing" /> no Visual Basic) para obter as informações de formato numérico da configuração de localidade atual do sistema operacional.</param>
      <returns>O valor da instância atual no formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>Cria uma representação <see cref="T:System.String" /> desta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <returns>Um <see cref="T:System.String" /> que contém os valores <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" /> e <see cref="P:System.Windows.Media.Matrix.OffsetY" /> deste <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>Cria uma representação <see cref="T:System.String" /> dessa estrutura <see cref="T:System.Windows.Media.Matrix" /> com informações de formatação específicas da cultura.</summary>
      <param name="provider">As informações de formatação específicas da cultura.</param>
      <returns>Um <see cref="T:System.String" /> que contém os valores <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" /> e <see cref="P:System.Windows.Media.Matrix.OffsetY" /> deste <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>Transforma o ponto especificado pelo <see cref="T:System.Windows.Media.Matrix" /> e retorna o resultado.</summary>
      <param name="point">O ponto a ser transformado.</param>
      <returns>O resultado de transformar <paramref name="point" /> por este <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>Transforma os pontos especificados por este <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="points">Os pontos a serem transformados. Os pontos originais na matriz são substituídos por seus valores transformados.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>Transforma o vetor especificado por este <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vector">O vetor a ser transformado.</param>
      <returns>O resultado de transformar <paramref name="vector" /> por este <see cref="T:System.Windows.Media.Matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>Transforma os vetores especificados por este <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="vectors">Os vetores a serem transformados. Os vetores originais na matriz são substituídos por seus valores transformados.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary>Acrescenta uma tradução de deslocamentos especificados a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="offsetX">A quantidade para deslocar este <see cref="T:System.Windows.Media.Matrix" /> ao longo do eixo X.</param>
      <param name="offsetY">A quantidade para deslocar este <see cref="T:System.Windows.Media.Matrix" /> ao longo do eixo Y.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary>Precede uma tradução de deslocamentos especificados a esta estrutura <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="offsetX">A quantidade para deslocar este <see cref="T:System.Windows.Media.Matrix" /> ao longo do eixo X.</param>
      <param name="offsetY">A quantidade para deslocar este <see cref="T:System.Windows.Media.Matrix" /> ao longo do eixo Y.</param>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>Converte instâncias de outros tipos de e para um <see cref="T:System.Windows.Media.Matrix" />.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>Inicializa uma nova instância de <see cref="T:System.Windows.Media.MatrixConverter" />.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se um objeto pode ser convertido de um tipo específico em uma instância de um <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="context">As informações de contexto de um tipo.</param>
      <param name="sourceType">O tipo de origem que está sendo avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se o tipo puder ser convertido para um <see cref="T:System.Windows.Media.Matrix" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se uma instância de um <see cref="T:System.Windows.Media.Matrix" /> pode ser convertida em um tipo diferente.</summary>
      <param name="context">As informações de contexto de um tipo.</param>
      <param name="destinationType">O tipo desejado para o qual se está avaliando converter este <see cref="T:System.Windows.Media.Matrix" />.</param>
      <returns>
        <see langword="true" /> se este <see cref="T:System.Windows.Media.Matrix" /> puder ser convertido para <paramref name="destinationType" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Tenta converter o objeto especificado em um <see cref="T:System.Windows.Media.Matrix" />.</summary>
      <param name="context">As informações de contexto de um tipo.</param>
      <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> do tipo que está sendo convertido.</param>
      <param name="value">O objeto sendo convertido.</param>
      <returns>O <see cref="T:System.Windows.Media.Matrix" /> criado da conversão de <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">O objeto especificado é nulo ou é um tipo que não pode ser convertido em um <see cref="T:System.Windows.Media.Matrix" />.</exception>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Tenta converter um <see cref="T:System.Windows.Media.Matrix" /> para um tipo especificado.</summary>
      <param name="context">As informações de contexto de um tipo.</param>
      <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> do tipo que está sendo convertido.</param>
      <param name="value">O <see cref="T:System.Windows.Media.Matrix" /> a ser convertido.</param>
      <param name="destinationType">O tipo para o qual converter este <see cref="T:System.Windows.Media.Matrix" />.</param>
      <returns>O objeto criado da conversão deste <see cref="T:System.Windows.Media.Matrix" />.</returns>
      <exception cref="T:System.NotSupportedException">O <paramref name="value" /> é nulo ou não é um <see cref="T:System.Windows.Media.Matrix" />, ou o <paramref name="destinationType" /> não é um tipo de conversão válido.</exception>
    </member>
    <member name="T:System.Windows.Media.TextFormattingMode">
      <summary>Define os métodos de formatação com suporte da classe <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Display">
      <summary>Indica que o <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> dispõe texto usando métricas de fonte compatíveis com GDI.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Ideal">
      <summary>Indica que o <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> dispõe texto usando métricas de fonte ideais.</summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>Implementa suporte básico WPF para os métodos <see cref="T:System.Windows.Markup.INameScope" /> que armazenam ou recuperam os mapeamentos nome-objeto em um namescope XAML específico. Adiciona o suporte à propriedade anexada para simplificar a obtenção ou definição de nomes de namescopes XAML dinamicamente no nível de elemento.</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.NameScope" />.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adiciona um item à coleção.</summary>
      <param name="item">Um <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (a chave é <see cref="T:System.String" />, o valor é <see cref="T:System.Object" />) que representa o mapeamento de nome a ser adicionado ao namescope XAML.</param>
      <exception cref="T:System.ArgumentException">Um ou ambos os componentes de <paramref name="item" /> são <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>Adiciona um item à coleção.</summary>
      <param name="key">A chave de cadeia de caracteres, que é o nome do mapeamento namescope XAML a ser adicionado.</param>
      <param name="value">O valor do objeto, que é a referência de objeto do mapeamento de namescope XAML a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>Remove todos os itens da coleção.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determina se a coleção contém um item especificado.</summary>
      <param name="item">O item a ser localizado na coleção, especificado como um <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (a chave é <see cref="T:System.String" />, o valor é <see cref="T:System.Object" />).</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.KeyValuePair`2" /> especificado identifica um mapeamento existente neste <see cref="T:System.Windows.NameScope" />. <see langword="false" /> se o <see cref="T:System.Collections.Generic.KeyValuePair`2" /> especificado não existe no <see cref="T:System.Windows.NameScope" /> atual.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>Retorna a informação de se um nome fornecido já existe ou não neste <see cref="T:System.Windows.NameScope" />.</summary>
      <param name="key">A chave de cadeia de caracteres a ser localizada.</param>
      <returns>
        <see langword="true" /> se o <paramref name="key" /> especificado identifica um nome para um mapeamento existente neste <see cref="T:System.Windows.NameScope" />. <see langword="false" /> se o <paramref name="key" /> especificado não existe no <see cref="T:System.Windows.NameScope" /> atual.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copia os elementos da coleção em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter a indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>Retorna o número de itens na coleção de nomes mapeados neste <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>Número de itens na coleção.</returns>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>Retorna o objeto correspondente no namescope XAML mantido por este <see cref="T:System.Windows.NameScope" />, com base em uma cadeia de caracteres de nome fornecida.</summary>
      <param name="name">Parte do nome de um mapeamento existente para o qual recuperar a parte do objeto.</param>
      <returns>O objeto solicitado que é mapeado com <paramref name="name" />. Pode retornar <see langword="null" /> se <paramref name="name" /> foi fornecido como <see langword="null" /> ou como uma cadeia de caracteres vazia ou se nenhum objeto correspondente foi encontrado.</returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>Fornece o acessador get da propriedade anexada <see cref="P:System.Windows.NameScope.NameScope" />.</summary>
      <param name="dependencyObject">O objeto do qual obter o namescope XAML.</param>
      <returns>Um namescope XAML, como uma instância de <see cref="T:System.Windows.Markup.INameScope" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns>Sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>Obtém ou define o item com a chave especificada.</summary>
      <param name="key">O nome de cadeia de caracteres para o mapeamento de nome XAML a ser obtido ou definido.</param>
      <returns>O valor do objeto mapeado pelo nome XAML fornecido como <paramref name="key" />.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="key" /> fornecido como <see langword="null" />.  

ou - 
<paramref name="value" /> é fornecido como <see langword="null" /> para uma operação de definição.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>Obtém uma coleção das chaves no dicionário <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>Uma coleção de chaves no <see cref="T:System.Windows.NameScope" /> dicionário.</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>Obtém ou define instâncias <see cref="T:System.Windows.NameScope" /> dinamicamente anexadas.</summary>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>Identifica a propriedade <see cref="P:System.Windows.NameScope.NameScope" /> anexada.</summary>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>Registra um novo par nome/objeto dentro do namescope XAML atual.</summary>
      <param name="name">O nome a ser usado para mapear o objeto fornecido.</param>
      <param name="scopedElement">O objeto a ser mapeado para o nome fornecido.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="name" /> ou <paramref name="scopedElement" /> foi fornecido como <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> foi fornecido como uma cadeia de caracteres vazia 

ou - 
O <paramref name="name" /> fornecido foi rejeitado pelo analisador porque ele continha caracteres inválidos para um nome XAML 
ou - 
O <paramref name="name" /> fornecido pode resultar em um registro de nome duplicado.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Remove o objeto específico da coleção.</summary>
      <param name="item">O objeto a ser removido da coleção, especificado como um <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (a chave é <see cref="T:System.String" />, o valor é <see cref="T:System.Object" />).</param>
      <returns>
        <see langword="true" /> se o item foi removido com êxito da coleção; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o item não for encontrado na coleção.</returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>Remove um mapeamento para um nome especificado da coleção.</summary>
      <param name="key">A chave de cadeia de caracteres, que é o nome do mapeamento namescope XAML a ser removido.</param>
      <returns>
        <see langword="true" /> se o item foi removido com êxito da coleção; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o item não for encontrado na coleção.</returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>Fornece o acessador set da propriedade anexada <see cref="P:System.Windows.NameScope.NameScope" />.</summary>
      <param name="dependencyObject">O objeto cujo namescope XAML deve ser alterado.</param>
      <param name="value">O novo namescope XAML, usando uma interface convertida.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que itera em uma coleção.</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que itera em uma coleção.</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>Obtém o valor associado à chave especificada.</summary>
      <param name="key">A chave do valor a ser obtido.</param>
      <param name="value">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, um objeto nulo. Este parâmetro é passado não inicializado.</param>
      <returns>true se o <see cref="T:System.Windows.NameScope" /> contém um mapeamento para o nome fornecido como <paramref name="key" />. Do contrário, falso.</returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>Remove um mapeamento de nome-objeto do namescope XAML.</summary>
      <param name="name">O nome do mapeamento a ser removido.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> foi fornecido como uma cadeia de caracteres vazia.  

ou - 
O <paramref name="name" /> fornecido não tinha sido registrado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>Obtém uma coleção dos valores no dicionário <see cref="T:System.Windows.NameScope" />.</summary>
      <returns>Uma coleção de valores no <see cref="T:System.Windows.NameScope" /> dicionário.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>Representa um par de coordenadas x e y no espaço bidimensional.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>Cria uma nova estrutura <see cref="T:System.Windows.Point" /> que contém coordenadas especificadas.</summary>
      <param name="x">A coordenada X da nova estrutura <see cref="T:System.Windows.Point" />.</param>
      <param name="y">A coordenada y da nova estrutura <see cref="T:System.Windows.Point" />.</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>Adiciona um <see cref="T:System.Windows.Vector" /> em um <see cref="T:System.Windows.Point" /> e retorna o resultado como uma estrutura <see cref="T:System.Windows.Point" />.</summary>
      <param name="point">A estrutura <see cref="T:System.Windows.Point" /> a ser adicionada.</param>
      <param name="vector">A estrutura <see cref="T:System.Windows.Vector" /> a ser adicionada.</param>
      <returns>Retorna a soma de <paramref name="point" /> e <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Object" /> especificado é um <see cref="T:System.Windows.Point" /> e se ele contém as mesmas coordenadas que este <see cref="T:System.Windows.Point" />.</summary>
      <param name="o">O <see cref="T:System.Object" /> de comparação.</param>
      <returns>
        <see langword="true" /> se <paramref name="o" /> for um <see cref="T:System.Windows.Point" /> e contiver os mesmos valores <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> que este <see cref="T:System.Windows.Point" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>Compara a igualdade de duas estruturas <see cref="T:System.Windows.Point" />.</summary>
      <param name="value">O ponto a ser comparado a essa instância.</param>
      <returns>
        <see langword="true" /> se ambas as estruturas <see cref="T:System.Windows.Point" /> contiverem os mesmos valores <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>Compara a igualdade de duas estruturas <see cref="T:System.Windows.Point" />.</summary>
      <param name="point1">O primeiro ponto a ser comparado.</param>
      <param name="point2">O segundo ponto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="point1" /> e <paramref name="point2" /> contêm os mesmos valores <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" />. Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>Retorna o código hash para este <see cref="T:System.Windows.Point" />.</summary>
      <returns>O código hash para esta estrutura <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforma a estrutura <see cref="T:System.Windows.Point" /> especificada pela estrutura <see cref="T:System.Windows.Media.Matrix" /> especificada.</summary>
      <param name="point">O ponto a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O ponto transformado.</returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>Desloca as coordenadas <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> de um ponto pelas quantidades especificadas.</summary>
      <param name="offsetX">O valor de deslocamento da coordenada <see cref="P:System.Windows.Point.X" /> do ponto.</param>
      <param name="offsetY">O valor de deslocamento da coordenada <see cref="P:System.Windows.Point.Y" /> do ponto.</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>Converte o <see cref="T:System.Windows.Point" /> especificado pelo <see cref="T:System.Windows.Vector" /> especificado e retorna o resultado.</summary>
      <param name="point">O ponto a ser convertido.</param>
      <param name="vector">O valor pelo qual converter o <paramref name="point" />.</param>
      <returns>O resultado da conversão do ponto especificado pelo vetor especificado.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>Compara a igualdade de duas estruturas <see cref="T:System.Windows.Point" />.</summary>
      <param name="point1">A primeira estrutura <see cref="T:System.Windows.Point" /> a ser comparada.</param>
      <param name="point2">A segunda estrutura <see cref="T:System.Windows.Point" /> a ser comparada.</param>
      <returns>
        <see langword="true" /> se as coordenadas <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> de <paramref name="point1" /> e <paramref name="point2" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>Cria uma estrutura <see cref="T:System.Windows.Size" /> com um <see cref="P:System.Windows.Size.Width" /> igual ao valor <see cref="P:System.Windows.Point.X" /> desse ponto e um <see cref="P:System.Windows.Size.Height" /> igual ao valor <see cref="P:System.Windows.Point.Y" /> desse ponto.</summary>
      <param name="point">O ponto para converter.</param>
      <returns>Um <see cref="T:System.Windows.Size" /> estrutura com um <see cref="P:System.Windows.Size.Width" /> igual ao valor <see cref="P:System.Windows.Point.X" /> desse ponto e um <see cref="P:System.Windows.Size.Height" /> igual ao valor <see cref="P:System.Windows.Point.Y" /> desse ponto.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>Cria uma estrutura <see cref="T:System.Windows.Vector" /> com um valor <see cref="P:System.Windows.Vector.X" /> igual ao valor <see cref="P:System.Windows.Point.X" /> do ponto e um valor <see cref="P:System.Windows.Vector.Y" /> igual ao valor <see cref="P:System.Windows.Point.Y" /> do ponto.</summary>
      <param name="point">O ponto para converter.</param>
      <returns>Um vetor com um valor <see cref="P:System.Windows.Vector.X" /> igual ao valor <see cref="P:System.Windows.Point.X" /> do ponto e um valor <see cref="P:System.Windows.Vector.Y" /> igual ao valor <see cref="P:System.Windows.Point.Y" /> do ponto.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>Compara duas estruturas <see cref="T:System.Windows.Point" /> quanto à desigualdade.</summary>
      <param name="point1">O primeiro ponto a ser comparado.</param>
      <param name="point2">O segundo ponto a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="point1" /> e <paramref name="point2" /> tiverem coordenadas <see cref="P:System.Windows.Point.X" /> ou <see cref="P:System.Windows.Point.Y" /> diferentes; <see langword="false" /> se <paramref name="point1" /> e <paramref name="point2" /> tiverem as mesmas coordenadas <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>Transforma o <see cref="T:System.Windows.Point" /> especificado pelo <see cref="T:System.Windows.Media.Matrix" /> especificado.</summary>
      <param name="point">O ponto a ser transformado.</param>
      <param name="matrix">A matriz de transformação.</param>
      <returns>O resultado da transformação do ponto especificado usando a matriz especificada.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>Subtrai o <see cref="T:System.Windows.Point" /> especificado de outro <see cref="T:System.Windows.Point" /> especificado e retorna a diferença como um <see cref="T:System.Windows.Vector" />.</summary>
      <param name="point1">O ponto do qual <paramref name="point2" /> é subtraído.</param>
      <param name="point2">O ponto do qual subtrair <paramref name="point1" />.</param>
      <returns>A diferença entre <paramref name="point1" /> e <paramref name="point2" />.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtrai o <see cref="T:System.Windows.Vector" /> especificado do <see cref="T:System.Windows.Point" /> especificado e retorna o <see cref="T:System.Windows.Point" /> resultante.</summary>
      <param name="point">O ponto do qual <paramref name="vector" /> é subtraído.</param>
      <param name="vector">O vetor a ser subtraído de <paramref name="point1" /></param>
      <returns>A diferença entre <paramref name="point" /> e <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>Constrói um <see cref="T:System.Windows.Point" /> do <see cref="T:System.String" /> especificado.</summary>
      <param name="source">Uma representação da cadeia de caracteres de um ponto.</param>
      <returns>A estrutura <see cref="T:System.Windows.Point" /> equivalente.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="source" /> não é composto por dois valores duplos delimitados por vírgula ou espaço.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém dois números.  

ou - 
<paramref name="source" /> contém muitos delimitadores.</exception>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>Subtrai o <see cref="T:System.Windows.Point" /> especificado de outro <see cref="T:System.Windows.Point" /> especificado e retorna a diferença como um <see cref="T:System.Windows.Vector" />.</summary>
      <param name="point1">O ponto do qual <paramref name="point2" /> é subtraído.</param>
      <param name="point2">O ponto do qual subtrair <paramref name="point1" />.</param>
      <returns>A diferença entre <paramref name="point1" /> e <paramref name="point2" />.</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>Subtrai o <see cref="T:System.Windows.Vector" /> especificado do <see cref="T:System.Windows.Point" /> especificado e retorna o <see cref="T:System.Windows.Point" /> resultante.</summary>
      <param name="point">O ponto do qual <paramref name="vector" /> é subtraído.</param>
      <param name="vector">O <paramref name="vector" /> a ser subtraído de <paramref name="point" />.</param>
      <returns>A diferença entre <paramref name="point" /> e <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Este membro dá suporte à infraestrutura Windows Presentation Foundation (WPF) e não se destina a ser usado diretamente do código. Para obter uma descrição desse membro, consulte <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <param name="format">A cadeia de caracteres que especifica o formato a ser usado.  

ou - 
<see langword="null" /> para usar o formato padrão definido para o tipo da implementação <see cref="T:System.IFormattable" />.</param>
      <param name="provider">O <see langword="IFormatProvider" /> a ser usado para formatar o valor.  

ou - 
<see langword="null" /> para obter as informações de formato numérico da configuração de localidade atual do sistema operacional.</param>
      <returns>Uma cadeia de caracteres que contém o valor da instância atual no formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>Cria uma representação de <see cref="T:System.String" /> deste <see cref="T:System.Windows.Point" />.</summary>
      <returns>Uma <see cref="T:System.String" /> que contém os valores <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> desse estrutura de <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>Cria uma representação de <see cref="T:System.String" /> deste <see cref="T:System.Windows.Point" />.</summary>
      <param name="provider">Informações de formatação específicas da cultura.</param>
      <returns>Uma <see cref="T:System.String" /> que contém os valores <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> desse estrutura de <see cref="T:System.Windows.Point" />.</returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>Obtém ou define o valor da coordenada <see cref="P:System.Windows.Point.X" /> desta estrutura <see cref="T:System.Windows.Point" />.</summary>
      <returns>O valor da coordenada <see cref="P:System.Windows.Point.X" /> desta estrutura <see cref="T:System.Windows.Point" />.  O valor padrão é <c>0</c>.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>Obtém ou define o valor da coordenada <see cref="P:System.Windows.Point.Y" /> deste <see cref="T:System.Windows.Point" />.</summary>
      <returns>O valor da coordenada <see cref="P:System.Windows.Point.Y" /> desta estrutura <see cref="T:System.Windows.Point" />.  O valor padrão é <c>0</c>.</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>Converte instâncias de outros tipos de e para um <see cref="T:System.Windows.Point" />.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.PointConverter" />.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se um objeto pode ser convertido de um determinado tipo em uma instância de um <see cref="T:System.Windows.Point" />.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="sourceType">O tipo da origem que está sendo avaliada para conversão.</param>
      <returns>
        <see langword="true" /> se o tipo puder ser convertido para um <see cref="T:System.Windows.Point" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se uma instância de um <see cref="T:System.Windows.Point" /> pode ser convertida em um tipo diferente.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="destinationType">O tipo desejado para o qual se está avaliando converter este <see cref="T:System.Windows.Point" />.</param>
      <returns>
        <see langword="true" /> se este <see cref="T:System.Windows.Point" /> puder ser convertido para <paramref name="destinationType" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Tenta converter o objeto especificado em um <see cref="T:System.Windows.Point" />.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="culture">Informações culturais a serem respeitadas durante a conversão.</param>
      <param name="value">O objeto sendo convertido.</param>
      <returns>O <see cref="T:System.Windows.Point" /> criado da conversão de <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Gerada se o objeto especificado for NULL ou for um tipo que não possa ser convertido em um <see cref="T:System.Windows.Point" />.</exception>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Tenta converter um <see cref="T:System.Windows.Point" /> para um tipo especificado.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="culture">Informações culturais a serem respeitadas durante a conversão.</param>
      <param name="value">O <see cref="T:System.Windows.Point" /> a ser convertido.</param>
      <param name="destinationType">O tipo para o qual converter este <see cref="T:System.Windows.Point" />.</param>
      <returns>O objeto criado da conversão deste <see cref="T:System.Windows.Point" />.</returns>
      <exception cref="T:System.NotSupportedException">Gerada se <paramref name="value" /> é <see langword="null" /> ou não é um <see cref="T:System.Windows.Point" /> ou então se <paramref name="destinationType" /> não é um dos tipos válidos para conversão.</exception>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>Representa o retorno de chamada que é invocado quando o valor efetivo da propriedade de uma propriedade de dependência é alterado.</summary>
      <param name="d">O <see cref="T:System.Windows.DependencyObject" /> no qual a propriedade alterou o valor.</param>
      <param name="e">Os dados de evento que são emitidos por qualquer evento que rastreia as alterações no valor efetivo dessa propriedade.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>Define alguns aspectos do comportamento de uma propriedade de dependência conforme ela é aplicada a um tipo específico, incluindo as condições com as quais ela foi registrada.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.PropertyMetadata" />.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.PropertyMetadata" /> com um valor padrão especificado para a propriedade de dependência à qual estes metadados serão aplicados.</summary>
      <param name="defaultValue">O valor padrão a especificar para a propriedade de dependência, geralmente fornecido como um valor de um tipo específico.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> não pode ser definido como o valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.PropertyMetadata" /> com o valor padrão especificado e a referência de implementação <see cref="T:System.Windows.PropertyChangedCallback" />.</summary>
      <param name="defaultValue">O valor padrão da propriedade de dependência, geralmente fornecido como um valor de um tipo específico.</param>
      <param name="propertyChangedCallback">Referência a uma implementação do manipulador que será chamada pelo sistema de propriedades sempre que o valor efetivo da propriedade for alterado.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> não pode ser definido como o valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.PropertyMetadata" /> com o valor padrão especificado e retornos de chamadas especificados.</summary>
      <param name="defaultValue">O valor padrão da propriedade de dependência, geralmente fornecido como um valor de um tipo específico.</param>
      <param name="propertyChangedCallback">Referência a uma implementação do manipulador que será chamada pelo sistema de propriedades sempre que o valor efetivo da propriedade for alterado.</param>
      <param name="coerceValueCallback">Uma referência a uma implementação do manipulador que será chamada sempre que o sistema de propriedades chamar <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> nessa propriedade.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> não pode ser definido como o valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.PropertyMetadata" /> com a referência da implementação <see cref="T:System.Windows.PropertyChangedCallback" /> especificada.</summary>
      <param name="propertyChangedCallback">Referência a uma implementação do manipulador que será chamada pelo sistema de propriedades sempre que o valor efetivo da propriedade for alterado.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>Obtém ou define uma referência para uma implementação de <see cref="T:System.Windows.CoerceValueCallback" /> especificada nesses metadados.</summary>
      <returns>Uma referência de implantação de <see cref="T:System.Windows.CoerceValueCallback" />.</returns>
      <exception cref="T:System.InvalidOperationException">Não é possível definir uma propriedade de metadados após sua aplicação a uma operação de propriedade de dependência.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>Obtém ou define um valor padrão da propriedade de dependência.</summary>
      <returns>O valor padrão da propriedade. O valor padrão em uma <see cref="T:System.Windows.PropertyMetadata" /> instância criada com o construtor sem parâmetros <see cref="F:System.Windows.DependencyProperty.UnsetValue" />será.</returns>
      <exception cref="T:System.ArgumentException">Não pode ser definido para o valor <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> após a criação.</exception>
      <exception cref="T:System.InvalidOperationException">Não é possível definir uma propriedade de metadados após sua aplicação a uma operação de propriedade de dependência.</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>Obtém um valor que determina se os metadados foram aplicados a uma propriedade de alguma forma, resultando em um estado imutável daquela instância de metadados.</summary>
      <returns>
        <see langword="true" />se a instância de metadados for imutável; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>Mescla esses metadados com os metadados de base.</summary>
      <param name="baseMetadata">Os metadados de base a mesclar com valores dessa instância.</param>
      <param name="dp">A propriedade de dependência à qual estes metadados estão sendo aplicados.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>Chamado quando esses metadados foram aplicados a uma propriedade, o que indica que os metadados estão sendo selados.</summary>
      <param name="dp">A propriedade de dependência à qual os metadados foram aplicados.</param>
      <param name="targetType">O tipo associado a esses metadados se eles forem metadados específicos do tipo. Se estes forem os metadados padrão, o valor será uma referência nula.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>Obtém ou define uma referência para uma implementação de <see cref="T:System.Windows.PropertyChangedCallback" /> especificada nesses metadados.</summary>
      <returns>Uma referência de implantação de <see cref="T:System.Windows.PropertyChangedCallback" />.</returns>
      <exception cref="T:System.InvalidOperationException">Não é possível definir uma propriedade de metadados após sua aplicação a uma operação de propriedade de dependência.</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>Descreve a largura, altura e local de um retângulo.</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Rect" />, que tem a coordenada X, a coordenada Y, a largura e a altura especificadas.</summary>
      <param name="x">A coordenada X do canto superior esquerdo do retângulo.</param>
      <param name="y">A coordenada y do canto superior esquerdo do retângulo.</param>
      <param name="width">A largura do retângulo.</param>
      <param name="height">A altura do retângulo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> é um valor negativo.  

ou - 
<paramref name="height" /> é um valor negativo.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Rect" /> que é exatamente grande o suficiente para conter os dois pontos especificados.</summary>
      <param name="point1">O primeiro ponto que o novo retângulo deve conter.</param>
      <param name="point2">O segundo ponto que o novo retângulo deve conter.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Rect" /> que tem o local do canto superior esquerdo especificado e a altura e largura especificadas.</summary>
      <param name="location">Um ponto que especifica o local do canto superior esquerdo do retângulo.</param>
      <param name="size">Uma estrutura <see cref="T:System.Windows.Size" /> que especifica a largura e altura do retângulo.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Rect" /> com tamanho suficiente exatamente para conter o ponto especificado e a soma do ponto e do vetor especificados.</summary>
      <param name="point">O primeiro ponto que o retângulo deve conter.</param>
      <param name="vector">O valor do deslocamento do ponto especificado. O retângulo resultante terá tamanho suficiente exatamente para conter os dois pontos.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Rect" /> que é do tamanho especificado e está localizada em (0,0).</summary>
      <param name="size">Uma estrutura <see cref="T:System.Windows.Size" /> que especifica a largura e altura do retângulo.</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>Obtém o valor do eixo y da parte inferior do retângulo.</summary>
      <returns>O valor do eixo y da parte inferior do retângulo. Se o retângulo estiver vazio, o valor será <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>Obtém a posição do canto inferior esquerdo do retângulo</summary>
      <returns>A posição do canto inferior esquerdo do retângulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>Obtém a posição do canto inferior direito do retângulo.</summary>
      <returns>A posição do canto inferior direito do retângulo.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>Indica se o retângulo contém a coordenada x e a coordenada y especificadas.</summary>
      <param name="x">A coordenada x do ponto a ser verificado.</param>
      <param name="y">A coordenada y do ponto a ser verificado.</param>
      <returns>
        <see langword="true" /> se (<paramref name="x" />, <paramref name="y" />) estiver contido pelo retângulo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>Indica se o retângulo que contém o ponto especificado.</summary>
      <param name="point">O ponto a verificar.</param>
      <returns>
        <see langword="true" /> se o retângulo contiver o ponto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>Indica se o retângulo contém o retângulo especificado.</summary>
      <param name="rect">O retângulo a ser verificado.</param>
      <returns>
        <see langword="true" /> se o <paramref name="rect" /> estiver inteiramente contido pelo retângulo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>Obtém um valor especial que representa um retângulo sem posição ou área.</summary>
      <returns>O retângulo vazio, que tem valores de propriedade <see cref="P:System.Windows.Rect.X" /> e <see cref="P:System.Windows.Rect.Y" /> de <see cref="F:System.Double.PositiveInfinity" /> e tem valores de propriedade <see cref="P:System.Windows.Rect.Width" /> e <see cref="P:System.Windows.Rect.Height" /> de <see cref="F:System.Double.NegativeInfinity" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>indica se o objeto especificado é igual ao retângulo atual.</summary>
      <param name="o">O objeto a comparar ao retângulo atual.</param>
      <returns>
        <see langword="true" /> se <paramref name="o" /> for um <see cref="T:System.Windows.Rect" /> e tiver os mesmos valores <see cref="P:System.Windows.Rect.Location" /> e <see cref="P:System.Windows.Rect.Size" /> que o retângulo atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>indica se o retângulo especificado é igual ao retângulo atual.</summary>
      <param name="value">O retângulo a ser comparado ao retângulo atual.</param>
      <returns>
        <see langword="true" /> se o retângulo especificado tiver os mesmos valores <see cref="P:System.Windows.Rect.Location" /> e <see cref="P:System.Windows.Rect.Size" /> que o retângulo atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>Indica se os retângulos especificados são iguais.</summary>
      <param name="rect1">O primeiro retângulo a ser comparado.</param>
      <param name="rect2">O segundo retângulo a ser comparado.</param>
      <returns>
        <see langword="true" /> se os retângulos tiverem os mesmos valores <see cref="P:System.Windows.Rect.Location" /> e <see cref="P:System.Windows.Rect.Size" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>Cria um código hash para o retângulo.</summary>
      <returns>Um código hash para a estrutura <see cref="T:System.Windows.Rect" /> atual.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>Obtém ou define a altura do retângulo.</summary>
      <returns>Um número positivo que representa a altura do retângulo. O padrão é 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" /> é definido como um valor negativo.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Height" /> está definido em um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>Aumenta ou diminui o retângulo usando os valores de largura e altura especificados, em todas as direções.</summary>
      <param name="width">A quantidade pela qual expandir ou reduzir os lados esquerdo e direito do retângulo.</param>
      <param name="height">A quantidade pela qual expandir ou reduzir os lados superior e inferior do retângulo.</param>
      <exception cref="T:System.InvalidOperationException">Esse método é chamado no retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>Cria um retângulo que é o resultado de expandir ou reduzir o retângulo especificado pelos valores especificados de largura e altura em todas as direções.</summary>
      <param name="rect">A estrutura <see cref="T:System.Windows.Rect" /> a ser modificada.</param>
      <param name="width">A quantidade pela qual expandir ou reduzir os lados esquerdo e direito do retângulo.</param>
      <param name="height">A quantidade pela qual expandir ou reduzir os lados superior e inferior do retângulo.</param>
      <returns>O retângulo resultante.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> é um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>Retorna o retângulo resultante da expansão do retângulo indicado pelo <see cref="T:System.Windows.Size" /> especificado, em todos os sentidos.</summary>
      <param name="rect">A estrutura <see cref="T:System.Windows.Rect" /> a ser modificada.</param>
      <param name="size">Especifica a quantidade para expandir o retângulo. A estrutura <see cref="T:System.Windows.Size" />, propriedade <see cref="P:System.Windows.Size.Width" />, especifica o valor para aumentar o <see cref="P:System.Windows.Rect.Left" /> do retângulo e as propriedades <see cref="P:System.Windows.Rect.Right" />. A estrutura <see cref="T:System.Windows.Size" />, propriedade <see cref="P:System.Windows.Size.Height" />, especifica o valor para aumentar o <see cref="P:System.Windows.Rect.Top" /> do retângulo e as propriedades <see cref="P:System.Windows.Rect.Bottom" />.</param>
      <returns>O retângulo resultante.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> é um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>Expande o retângulo usando o <see cref="T:System.Windows.Size" /> especificado em todas as direções.</summary>
      <param name="size">Especifica a quantidade para expandir o retângulo. A estrutura <see cref="T:System.Windows.Size" />, propriedade <see cref="P:System.Windows.Size.Width" />, especifica o valor para aumentar o <see cref="P:System.Windows.Rect.Left" /> do retângulo e as propriedades <see cref="P:System.Windows.Rect.Right" />. A estrutura <see cref="T:System.Windows.Size" />, propriedade <see cref="P:System.Windows.Size.Height" />, especifica o valor para aumentar o <see cref="P:System.Windows.Rect.Top" /> do retângulo e as propriedades <see cref="P:System.Windows.Rect.Bottom" />.</param>
      <exception cref="T:System.InvalidOperationException">Esse método é chamado no retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>Localiza a interseção do retângulo atual e do retângulo especificado e armazena o resultado como o retângulo atual.</summary>
      <param name="rect">O retângulo para fazer a interseção com o retângulo atual.</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>Retorna a interseção dos retângulos especificados.</summary>
      <param name="rect1">O primeiro retângulo a ser comparado.</param>
      <param name="rect2">O segundo retângulo a ser comparado.</param>
      <returns>A interseção dos dois retângulos ou <see cref="P:System.Windows.Rect.Empty" /> se não existir interseção.</returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>Indica se o retângulo especificado faz interseção com o retângulo atual.</summary>
      <param name="rect">O retângulo a ser verificado.</param>
      <returns>
        <see langword="true" /> se o retângulo especificado fizer interseção com o retângulo atual, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>Obtém um valor que indica se o retângulo é o retângulo <see cref="P:System.Windows.Rect.Empty" />.</summary>
      <returns>
        <see langword="true" /> se o retângulo for o <see cref="P:System.Windows.Rect.Empty" /> retângulo, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>Obtém o valor do eixo x do lado esquerdo do retângulo.</summary>
      <returns>O valor do eixo x do lado esquerdo do retângulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>Obtém ou define a posição do canto superior esquerdo do retângulo.</summary>
      <returns>A posição do canto superior esquerdo do retângulo. O padrão é (0, 0).</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Location" /> está definido em um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>Move o retângulo pelas quantidades horizontal e vertical especificadas.</summary>
      <param name="offsetX">O valor para mover o retângulo horizontalmente.</param>
      <param name="offsetY">O valor para mover o retângulo verticalmente.</param>
      <exception cref="T:System.InvalidOperationException">Esse método é chamado no retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>Retorna um retângulo que é deslocado do retângulo especificado usando os valores horizontais e verticais especificados.</summary>
      <param name="rect">O retângulo a ser movido.</param>
      <param name="offsetX">O deslocamento horizontal para o novo retângulo.</param>
      <param name="offsetY">O deslocamento vertical para o novo retângulo.</param>
      <returns>O retângulo resultante.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> é <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>Retorna um retângulo que é deslocado do retângulo especificado usando o vetor especificado.</summary>
      <param name="rect">O retângulo original.</param>
      <param name="offsetVector">Um vetor que especifica os deslocamentos horizontais e verticais para o novo retângulo.</param>
      <returns>O retângulo resultante.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> é <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>Move o retângulo pelo vetor especificado.</summary>
      <param name="offsetVector">Um vetor que especifica as quantidades horizontais e verticais para mover o retângulo.</param>
      <exception cref="T:System.InvalidOperationException">Esse método é chamado no retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compara a igualdade exata de dois retângulos.</summary>
      <param name="rect1">O primeiro retângulo a ser comparado.</param>
      <param name="rect2">O segundo retângulo a ser comparado.</param>
      <returns>
        <see langword="true" /> se os retângulos tiverem os mesmos valores <see cref="P:System.Windows.Rect.Location" /> e <see cref="P:System.Windows.Rect.Size" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>Compara dois retângulos quanto à desigualdade.</summary>
      <param name="rect1">O primeiro retângulo a ser comparado.</param>
      <param name="rect2">O segundo retângulo a ser comparado.</param>
      <returns>
        <see langword="true" /> se os retângulos não tiverem os mesmos valores <see cref="P:System.Windows.Rect.Location" /> e <see cref="P:System.Windows.Rect.Size" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>Cria um novo retângulo da representação da cadeia de caracteres especificada.</summary>
      <param name="source">A representação de cadeia de caracteres do retângulo, no formato "x, y, largura, altura".</param>
      <returns>O retângulo resultante.</returns>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>Obtém o valor do eixo x do lado direito do retângulo.</summary>
      <returns>O valor do eixo x do lado direito do retângulo.</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>Multiplica o tamanho do retângulo atual pelos valores de x e y especificados.</summary>
      <param name="scaleX">O fator de escala na direção x.</param>
      <param name="scaleY">O fator de escala na direção y.</param>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>Obtém ou define a largura e a altura do retângulo.</summary>
      <returns>Uma estrutura <see cref="T:System.Windows.Size" /> que especifica a largura e altura do retângulo.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Size" /> está definido em um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Formata o valor da instância atual usando o formato especificado.</summary>
      <param name="format">O formato a ser usado.  

ou - 
Uma referência nula (<see langword="Nothing" /> no Visual Basic) para usar o formato padrão definido para o tipo da implementação <see cref="T:System.IFormattable" />.</param>
      <param name="provider">O provedor a ser usado para formatar o valor.  

ou - 
Uma referência nula (<see langword="Nothing" /> no Visual Basic) para obter as informações de formato numérico da configuração de localidade atual do sistema operacional.</param>
      <returns>Uma representação de cadeia de caracteres do retângulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>Obtém a posição do eixo y da parte superior do retângulo.</summary>
      <returns>A posição do eixo y da parte superior do retângulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>Obtém a posição do canto superior esquerdo do retângulo.</summary>
      <returns>A posição do canto superior esquerdo do retângulo.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>Obtém a posição do canto superior direito do retângulo.</summary>
      <returns>A posição do canto superior direito do retângulo.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>Retorna uma representação de cadeia de caracteres do retângulo.</summary>
      <returns>Uma representação de cadeia de caracteres do retângulo atual. A cadeia de caracteres tem o seguinte formato: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>Retorna uma representação de cadeia de caracteres do retângulo, usando o provedor de formato especificado.</summary>
      <param name="provider">Informações de formatação específicas da cultura.</param>
      <returns>Uma representação de cadeia de caracteres do retângulo atual que é determinada pelo provedor de formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>Transforma o retângulo aplicando a matriz especificada.</summary>
      <param name="matrix">Uma matriz que especifica a transformação a ser aplicada.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>Retorna o retângulo que resulta da aplicação da matriz especificada ao retângulo especificado.</summary>
      <param name="rect">Um retângulo que é a base para a transformação.</param>
      <param name="matrix">Uma matriz que especifica a transformação a ser aplicada.</param>
      <returns>O retângulo que resulta da operação.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>Expande o retângulo atual exatamente o suficiente para conter o ponto especificado.</summary>
      <param name="point">O ponto a ser incluído.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>Expande o retângulo atual exatamente o suficiente para conter o retângulo especificado.</summary>
      <param name="rect">O retângulo a ser incluído.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>Cria um retângulo que é exatamente grande o suficiente para incluir o retângulo especificado e o ponto especificado.</summary>
      <param name="rect">O retângulo a ser incluído.</param>
      <param name="point">O ponto a ser incluído.</param>
      <returns>Um retângulo que é exatamente grande o suficiente para conter o retângulo especificado e o ponto especificado.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>Cria um retângulo que é exatamente grande o suficiente para conter os dois retângulos especificados.</summary>
      <param name="rect1">O primeiro retângulo a incluir.</param>
      <param name="rect2">O segundo retângulo a ser incluído.</param>
      <returns>O retângulo resultante.</returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>Obtém ou define a largura do retângulo.</summary>
      <returns>Um número positivo que representa a largura do retângulo. O padrão é 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" /> é definido como um valor negativo.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Width" /> está definido em um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>Obtém ou define o valor do eixo X do lado esquerdo do retângulo.</summary>
      <returns>O valor do eixo x do lado esquerdo do retângulo.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.X" /> está definido em um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>Obtém ou define o valor do eixo y do lado superior do retângulo.</summary>
      <returns>O valor do eixo y do lado superior do retângulo.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Y" /> está definido em um retângulo <see cref="P:System.Windows.Rect.Empty" />.</exception>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>Converte instâncias de outros tipos de e para instâncias de <see cref="T:System.Windows.Rect" />.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.RectConverter" />.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se um objeto pode ser convertido de um determinado tipo em uma instância de um <see cref="T:System.Windows.Rect" />.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="sourceType">O tipo de origem que está sendo avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se o tipo puder ser convertido para um <see cref="T:System.Windows.Rect" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se é possível converter um <see cref="T:System.Windows.Rect" /> no tipo especificado.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="destinationType">O tipo desejado para o qual se está avaliando converter este <see cref="T:System.Windows.Rect" />.</param>
      <returns>
        <see langword="true" /> se este <see cref="T:System.Windows.Rect" /> puder ser convertido em <paramref name="destinationType" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Tenta converter o objeto especificado em um <see cref="T:System.Windows.Rect" />.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="culture">Informações culturais que são respeitadas ao converter.</param>
      <param name="value">O objeto sendo convertido.</param>
      <returns>O <see cref="T:System.Windows.Rect" /> criado da conversão de <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException">Gerada se o objeto especificado for NULL ou for um tipo que não possa ser convertido em um <see cref="T:System.Windows.Rect" />.</exception>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Tenta converter um <see cref="T:System.Windows.Rect" /> para o tipo especificado.</summary>
      <param name="context">Fornece informações contextuais necessárias para conversão.</param>
      <param name="culture">Informações culturais que são respeitadas durante a conversão.</param>
      <param name="value">O <see cref="T:System.Windows.Rect" /> a ser convertido.</param>
      <param name="destinationType">O tipo para o qual converter este <see cref="T:System.Windows.Rect" />.</param>
      <returns>O objeto criado da conversão deste <see cref="T:System.Windows.Rect" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> é <see langword="null" />.  

ou - 
<paramref name="value" /> não é um <see cref="T:System.Windows.Rect" />.  

ou - 
O <paramref name="destinationType" /> não é um dos tipos válidos para conversão.</exception>
    </member>
    <member name="T:System.Windows.Size">
      <summary>Implementa uma estrutura usada para descrever o <see cref="T:System.Windows.Size" /> de um objeto.</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Size" /> e atribui a ela um <paramref name="width" /> inicial e um <paramref name="height" />.</summary>
      <param name="width">A largura inicial da instância de <see cref="T:System.Windows.Size" />.</param>
      <param name="height">A altura inicial da instância de <see cref="T:System.Windows.Size" />.</param>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>Obtém um valor que representa um <see cref="T:System.Windows.Size" /> vazio estático.</summary>
      <returns>Uma instância vazia do <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>Compara a igualdade de um objeto com uma instância de <see cref="T:System.Windows.Size" />.</summary>
      <param name="o">O <see cref="T:System.Object" /> de comparação.</param>
      <returns>
        <see langword="true" /> se os tamanhos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>Compara a igualdade de um valor com uma instância de <see cref="T:System.Windows.Size" />.</summary>
      <param name="value">O tamanho a ser comparado com essa instância atual de <see cref="T:System.Windows.Size" />.</param>
      <returns>
        <see langword="true" /> se as instâncias de <see cref="T:System.Windows.Size" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>Compara a igualdade de duas instâncias de <see cref="T:System.Windows.Size" />.</summary>
      <param name="size1">A primeira instância de <see cref="T:System.Windows.Size" /> a ser comparada.</param>
      <param name="size2">A segunda instância de <see cref="T:System.Windows.Size" /> a ser comparada.</param>
      <returns>
        <see langword="true" /> se as instâncias de <see cref="T:System.Windows.Size" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>Obtém o código hash para esta instância de <see cref="T:System.Windows.Size" />.</summary>
      <returns>O código hash para essa instância de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>Obtém ou define o <see cref="P:System.Windows.Size.Height" /> desta instância de <see cref="T:System.Windows.Size" />.</summary>
      <returns>O <see cref="P:System.Windows.Size.Height" /> dessa instância do <see cref="T:System.Windows.Size" />. O padrão é 0. O valor não pode ser negativo.</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>Obtém um valor que indica se esta instância de <see cref="T:System.Windows.Size" /> é <see cref="P:System.Windows.Size.Empty" />.</summary>
      <returns>
        <see langword="true" />Se essa instância do tamanho for <see cref="P:System.Windows.Size.Empty" />; caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>Compara a igualdade de duas instâncias de <see cref="T:System.Windows.Size" />.</summary>
      <param name="size1">A primeira instância de <see cref="T:System.Windows.Size" /> a ser comparada.</param>
      <param name="size2">A segunda instância de <see cref="T:System.Windows.Size" /> a ser comparada.</param>
      <returns>true se as duas instâncias de <see cref="T:System.Windows.Size" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>Converte explicitamente uma instância de <see cref="T:System.Windows.Size" /> em uma instância de <see cref="T:System.Windows.Point" />.</summary>
      <param name="size">O valor <see cref="T:System.Windows.Size" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Windows.Point" /> com valor igual a esta instância de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>Converte explicitamente uma instância de <see cref="T:System.Windows.Size" /> em uma instância de <see cref="T:System.Windows.Vector" />.</summary>
      <param name="size">O valor <see cref="T:System.Windows.Size" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Windows.Vector" /> com valor igual a esta instância de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>Compara duas instâncias de <see cref="T:System.Windows.Size" /> quanto à desigualdade.</summary>
      <param name="size1">A primeira instância de <see cref="T:System.Windows.Size" /> a ser comparada.</param>
      <param name="size2">A segunda instância de <see cref="T:System.Windows.Size" /> a ser comparada.</param>
      <returns>
        <see langword="true" /> se as instâncias de <see cref="T:System.Windows.Size" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>Retorna uma instância de <see cref="T:System.Windows.Size" /> de um <see cref="T:System.String" /> convertido.</summary>
      <param name="source">Um valor <see cref="T:System.String" /> a ser analisado para um valor <see cref="T:System.Windows.Size" />.</param>
      <returns>Uma instância de <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Este tipo ou membro dá suporte à infraestrutura Windows Presentation Foundation (WPF) e não se destina a ser usado diretamente do código.</summary>
      <param name="format">O formato a ser usado.</param>
      <param name="provider">O provedor a ser usado para formatar o valor.</param>
      <returns>O valor da instância atual no formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>Retorna um <see cref="T:System.String" /> que representa este objeto <see cref="T:System.Windows.Size" />.</summary>
      <returns>Um <see cref="T:System.String" /> que especifica a largura seguida pela altura.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>Retorna um <see cref="T:System.String" /> que representa essa instância de <see cref="T:System.Windows.Size" />.</summary>
      <param name="provider">Um objeto que fornece uma maneira de controlar a formatação.</param>
      <returns>Um <see cref="T:System.String" /> que representa este objeto <see cref="T:System.Windows.Size" />.</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>Obtém ou define o <see cref="P:System.Windows.Size.Width" /> desta instância de <see cref="T:System.Windows.Size" />.</summary>
      <returns>O <see cref="P:System.Windows.Size.Width" /> dessa instância do <see cref="T:System.Windows.Size" />. O valor padrão é <c>0</c>. O valor não pode ser negativo.</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>Converte instâncias de outros tipos de e para instâncias da classe <see cref="T:System.Windows.Size" />.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se uma classe pode ser convertida de um determinado tipo em uma instância de um <see cref="T:System.Windows.Size" />.</summary>
      <param name="context">Fornece informações contextuais sobre um componente.</param>
      <param name="sourceType">Identifica o tipo de dados a ser avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se o <paramref name="sourceType" /> pode ser convertido em uma instância de <see cref="T:System.Windows.Size" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se uma instância de <see cref="T:System.Windows.Size" /> pode ser convertida em um tipo diferente.</summary>
      <param name="context">Fornece informações contextuais sobre um componente.</param>
      <param name="destinationType">Identifica o tipo de dados a ser avaliado para conversão.</param>
      <returns>
        <see langword="true" /> se essa instância de <see cref="T:System.Windows.Size" /> puder ser convertida no <paramref name="destinationType" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Tenta converter um objeto especificado em uma instância de <see cref="T:System.Windows.Size" />.</summary>
      <param name="context">Fornece informações contextuais sobre um componente.</param>
      <param name="culture">Informações específicas de cultura que devem ser respeitadas durante a conversão.</param>
      <param name="value">O objeto de origem que está sendo convertido.</param>
      <returns>A instância de <see cref="T:System.Windows.Size" /> que é criada com base no <paramref name="source" /> convertido.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Tenta converter uma instância de <see cref="T:System.Windows.Size" /> em um tipo especificado.</summary>
      <param name="context">Fornece informações contextuais sobre um componente.</param>
      <param name="culture">Informações específicas de cultura que devem ser respeitadas durante a conversão.</param>
      <param name="value">A instância de <see cref="T:System.Windows.Size" /> a ser convertida.</param>
      <param name="destinationType">O tipo para o qual esta instância de <see cref="T:System.Windows.Size" /> é convertida.</param>
      <returns>O objeto que é criado com base na instância convertida de <see cref="T:System.Windows.Size" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> é <see langword="null" /> ou não é uma instância de <see cref="T:System.Windows.Size" /> ou se o <paramref name="destinationType" /> não é um dos tipos de destino válido.</exception>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>Fornece uma tela de inicialização para um aplicativo WPF (Windows Presentation Foundation).</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.SplashScreen" /> com assembly do recurso especificado.</summary>
      <param name="resourceAssembly">O assembly que contém o recurso inserido.</param>
      <param name="resourceName">O nome do recurso inserido.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.SplashScreen" /> com recurso especificado.</summary>
      <param name="resourceName">O nome do recurso inserido.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>Fecha a tela inicial.</summary>
      <param name="fadeoutDuration">Uma <see cref="T:System.TimeSpan" /> que especifica quanto tempo levará para a tela inicial esmaecer depois que a operação fechar foi iniciada.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>Exibe a tela inicial.</summary>
      <param name="autoClose">
        <see langword="true" /> para fechar automaticamente a tela inicial; <see langword="false" /> para fechar a tela inicial manualmente.</param>
      <exception cref="T:System.IO.IOException">Não foi possível encontrar o recurso especificado no construtor.</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>Exibe a tela inicial.</summary>
      <param name="autoClose">
        <see langword="true" /> para fechar automaticamente a tela inicial; <see langword="false" /> para fechar a tela inicial manualmente.</param>
      <param name="topMost">
        <see langword="true" /> se a janela da tela inicial precisar usar o estilo WS_EX_TOPMOST; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>Fornece serviços para gerenciar a fila de itens de trabalho de um thread.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>Executa o delegado especificado de maneira assíncrona com os argumentos especificados no thread em que o <see cref="T:System.Windows.Threading.Dispatcher" /> foi criado.</summary>
      <param name="method">O delegado para um método que usa os parâmetros especificados em <paramref name="args" />, que é enviado por push fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método em questão. Pode ser <see langword="null" />.</param>
      <returns>Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executa o delegado especificado assincronamente com os argumentos especificados, na prioridade especificada, no thread no qual o <see cref="T:System.Windows.Threading.Dispatcher" /> foi criado.</summary>
      <param name="method">O delegado para um método que usa os parâmetros especificados em <paramref name="args" />, que é enviado por push fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método em questão. Pode ser <see langword="null" />.</param>
      <returns>Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executa o delegado especificado de forma assíncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="method">O delegado para um método que não usa argumentos, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <returns>Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executa o delegado especificado de forma assíncrona na prioridade especificada e com o argumento especificado no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="method">Um delegado para um método que usa um argumento, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">O objeto a ser passado como um argumento para o método especificado.</param>
      <returns>Um objeto, retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executa o delegado especificado de forma assíncrona na prioridade especificada e com a matriz de argumentos definida no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="method">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">O objeto a ser passado como um argumento para o método especificado.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método especificado.</param>
      <returns>Um objeto, é retornado imediatamente após <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda execução pendente na fila <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> não é uma prioridade válida.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>Inicia o desligamento do <see cref="T:System.Windows.Threading.Dispatcher" /> de forma assíncrona.</summary>
      <param name="priority">A prioridade no qual começar a desligar o dispatcher.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>Determina se o thread de chamada é o thread associado a esse <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>
        <see langword="true" /> se o thread de chamada é o thread associado a esse <see cref="T:System.Windows.Threading.Dispatcher" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> para o thread em execução no momento e cria um novo <see cref="T:System.Windows.Threading.Dispatcher" /> se um não estiver associado ao thread.</summary>
      <returns>O dispatcher associado ao thread atual.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>Desabilita o processamento da fila de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>Uma estrutura usada para habilitar novamente o processamento do dispatcher.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>Solicita que todos os quadros saiam, incluindo quadros aninhados.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> para o thread especificado.</summary>
      <param name="thread">O thread do qual obter o <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <returns>O dispatcher do <paramref name="thread" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>Determina se o <see cref="T:System.Windows.Threading.Dispatcher" /> terminou de desligar.</summary>
      <returns>
        <see langword="true" />Se o Dispatcher concluiu o desligamento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>Determina se o <see cref="T:System.Windows.Threading.Dispatcher" /> está desligando.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Windows.Threading.Dispatcher" /> iniciou o desligamento; caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>Obtém a coleção de ganchos que fornecem informações adicionais do evento sobre o <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>Os ganchos associados a esse <see cref="T:System.Windows.Threading.Dispatcher" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary>Executa o <see cref="T:System.Action" /> especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executa a <see cref="T:System.Action" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executa a <see cref="T:System.Action" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">Um objeto que indica se a ação deve ser cancelada.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>Executa a <see cref="T:System.Action" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">Um objeto que indica se a ação deve ser cancelada.</param>
      <param name="timeout">A quantidade mínima de tempo de espera para a operação ser iniciada.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>Executa o delegado especificado com os argumentos de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="method">Um delegado para um método que usa os parâmetros especificados em <paramref name="args" />, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método em questão. Pode ser <see langword="null" />.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>Executa o delegado especificado no período designado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="method">Um delegado para um método que usa os parâmetros especificados em <paramref name="args" />, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="timeout">O tempo máximo de espera para a operação ser concluída.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método em questão. Pode ser <see langword="null" />.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executa o delegado especificado no período designado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="method">Um delegado para um método que usa os parâmetros especificados em <paramref name="args" />, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="timeout">O tempo máximo de espera para a operação ser concluída.</param>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método em questão. Pode ser <see langword="null" />.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>Executa o delegado especificado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="method">Um delegado para um método que usa os parâmetros especificados em <paramref name="args" />, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método em questão. Pode ser <see langword="null" />.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>Executa o delegado especificado de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="method">Um delegado para um método que não usa argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é uma prioridade válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>Executa o delegado especificado na prioridade especificada com o argumentos especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="method">Um delegado para um método que usa um argumento, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="arg">Um objeto a ser passado como um argumento para o método fornecido.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é uma prioridade válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>Executa o delegado especificado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="method">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Um objeto a ser passado como um argumento para o método fornecido.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método em questão.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é uma prioridade válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>Executa o delegado especificado, de forma síncrona, com a prioridade especificada e com o valor de tempo limite especificado no thread em que <see cref="T:System.Windows.Threading.Dispatcher" /> foi criado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="timeout">O tempo máximo para esperar a conclusão da operação.</param>
      <param name="method">O delegado para um método que não usa argumentos, que é enviado por push para a fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>Executa o delegado especificado na prioridade especificada com o argumentos especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="timeout">O tempo máximo para esperar a conclusão da operação.</param>
      <param name="method">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Um objeto a ser passado como um argumento para o método fornecido. Pode ser <see langword="null" />, caso nenhum argumento seja necessário.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é uma prioridade válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>Executa o delegado especificado na prioridade especificada com os argumentos especificados de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="priority">A prioridade em que o método especificado é invocado, com relação às outras operações pendentes na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="timeout">O tempo máximo para esperar a conclusão da operação.</param>
      <param name="method">Um delegado de um método que usa vários argumentos, que é enviado por push para a fila de eventos de <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="arg">Um objeto a ser passado como um argumento para o método especificado.</param>
      <param name="args">Uma matriz de objetos a serem passados como argumentos para o método especificado.</param>
      <returns>O valor retornado do delegado que está sendo invocado ou <see langword="null" />, se o delegado não tiver um valor retornado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> é igual a <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary>Executa o <see cref="T:System.Func`1" /> especificado de forma síncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <typeparam name="TResult">O tipo de valor retornado do delegado especificado.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>Executa a <see cref="T:System.Func`1" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <typeparam name="TResult">O tipo de valor retornado do delegado especificado.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executa a <see cref="T:System.Func`1" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">Um objeto que indica se a operação deve ser cancelada.</param>
      <typeparam name="TResult">O tipo de valor retornado do delegado especificado.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>Executa a <see cref="T:System.Func`1" /> especificada de forma síncrona na prioridade especificada no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">Um objeto que indica se a operação deve ser cancelada.</param>
      <param name="timeout">A quantidade mínima de tempo de espera para a operação ser iniciada.</param>
      <typeparam name="TResult">O tipo de valor retornado do delegado especificado.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary>Executa o <see cref="T:System.Action" /> especificado de forma assíncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <returns>Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>Executa o <see cref="T:System.Action" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <returns>Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executa o <see cref="T:System.Action" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">Um objeto que indica se a ação deve ser cancelada.</param>
      <returns>Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary>Executa o <see cref="T:System.Func`1" /> especificado de forma assíncrona no thread ao qual o <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <typeparam name="TResult">O tipo de valor retornado do delegado especificado.</typeparam>
      <returns>Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>Executa o <see cref="T:System.Func`1" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <typeparam name="TResult">O tipo de valor retornado do delegado especificado.</typeparam>
      <returns>Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>Executa o <see cref="T:System.Func`1" /> especificado de forma assíncrona na prioridade especificada no thread ao qual <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <param name="callback">Um delegado a ser invocado pelo dispatcher.</param>
      <param name="priority">A prioridade que determina em qual ordem o retorno de chamada especificado é invocado em relação a outras operações pendentes no <see cref="T:System.Windows.Threading.Dispatcher" />.</param>
      <param name="cancellationToken">Um objeto que indica se a operação deve ser cancelada.</param>
      <typeparam name="TResult">O tipo de valor retornado do delegado especificado.</typeparam>
      <returns>Um objeto, retornado imediatamente após <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> ser chamado, que pode ser usado para interagir com o delegado enquanto ele aguarda a execução na fila de eventos.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>Inicia o processo de desligamento do <see cref="T:System.Windows.Threading.Dispatcher" /> sincronicamente.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>Insere um loop de execução.</summary>
      <param name="frame">O quadro para o dispatcher processar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> é <see langword="true" />  

ou - 
<paramref name="frame" /> está em execução em um <see cref="T:System.Windows.Threading.Dispatcher" /> diferente.  

ou - 
Processamento do Dispatcher foi desabilitado.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>Envia o quadro principal de execução na fila de eventos do <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>Ocorre quando o <see cref="T:System.Windows.Threading.Dispatcher" /> conclui o desligamento.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>Ocorre quando o <see cref="T:System.Windows.Threading.Dispatcher" /> inicia o desligamento.</summary>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>Obtém o thread ao qual este <see cref="T:System.Windows.Threading.Dispatcher" /> está associado.</summary>
      <returns>O thread.</returns>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>Ocorre quando uma exceção de thread é lançada e não capturada durante a execução de um delegado por meio de <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> ou <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>Ocorre quando uma exceção de thread é lançada e não capturada durante a execução de um delegado por meio de <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> ou <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> quando no estágio de filtragem.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>Determina se o <see cref="T:System.Windows.Threading.DispatcherPriority" /> especificado é uma prioridade válida.</summary>
      <param name="priority">A prioridade a ser verificada.</param>
      <param name="parameterName">Uma cadeia de caracteres que será retornada pela exceção que ocorre se a prioridade é inválida.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> não é um <see cref="T:System.Windows.Threading.DispatcherPriority" /> válido.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>Determina se o thread de chamada tem acesso a este <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <exception cref="T:System.InvalidOperationException">O thread de chamada não tem acesso a este <see cref="T:System.Windows.Threading.Dispatcher" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary>Cria um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</summary>
      <returns>Um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary>Cria um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.  O trabalho que ocorre quando o controle retorna para o código aguardando o resultado deste método é agendado com a prioridade especificada.</summary>
      <param name="priority">A prioridade na qual agendar a continuação.</param>
      <returns>Um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>Fornece dados de eventos para eventos relacionados <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>O <see cref="T:System.Windows.Threading.Dispatcher" /> associado a este evento.</summary>
      <returns>O dispatcher.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>Representa um loop de execução no <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherFrame" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherFrame" /> usando o sinalizador de solicitação de saída especificado.</summary>
      <param name="exitWhenRequested">Indica se este quadro sairá quando for solicitado que todos os quadros saiam.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>Obtém ou define um valor que indica se este <see cref="T:System.Windows.Threading.DispatcherFrame" /> deve continuar.</summary>
      <returns>
        <see langword="true" />Se o quadro deve continuar; caso contrário <see langword="false" />,.  O valor padrão é <see langword="true" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>Fornece dados de eventos para eventos <see cref="T:System.Windows.Threading.DispatcherHooks" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" />.</summary>
      <param name="operation">A operação associada ao evento.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> associado a este evento.</summary>
      <returns>O <see cref="T:System.Windows.Threading.Dispatcher" /> associado a este evento.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>Obtém o <see cref="T:System.Windows.Threading.DispatcherOperation" /> associado a este evento.</summary>
      <returns>A operação.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>Representa o método que manipulará eventos relacionados <see cref="T:System.Windows.Threading.DispatcherHooks" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Os dados do evento.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>Fornece informações de evento adicionais sobre o processamento de <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>Ocorre quando o dispatcher não tem mais operações para processar.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>Ocorre quando uma operação é anulada.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>Ocorre quando uma operação é concluída.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>Ocorre quando uma operação é postada para o dispatcher.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>Ocorre quando a prioridade de uma operação é alterada.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary>Ocorre quando uma operação é invocada.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>Representa um objeto associado a um <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>Determina se o thread de chamada tem acesso a este <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <returns>
        <see langword="true" /> se o thread de chamada tiver acesso a esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> ao qual este <see cref="T:System.Windows.Threading.DispatcherObject" /> está associado.</summary>
      <returns>O dispatcher.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>Impõe que o thread de chamada tenha acesso a este <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
      <exception cref="T:System.InvalidOperationException">O thread de chamada não tem acesso a este <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>Representa um objeto que é usado para interagir com uma operação que foi postada na fila do <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>Anula a operação.</summary>
      <returns>
        <see langword="true" /> se a operação tiver sido anulada, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>Ocorre quando a operação é anulada.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>Ocorre quando a operação foi concluída.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> que em que a operação foi postada.</summary>
      <returns>O dispatcher.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary>Retorna um objeto que é notificado quando a operação assíncrona é concluída.</summary>
      <returns>Um objeto que é notificado quando a operação assíncrona é concluída.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary>Inicia a operação que está associada a este <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
      <returns>
        <see langword="null" /> em todos os casos.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>Obtém ou define a prioridade da operação na fila <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
      <returns>A prioridade do delegado na fila.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>Obtém o resultado da operação após sua conclusão.</summary>
      <returns>O resultado da operação-ou- <see langword="null" /> se a operação não foi concluída.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>Obtém o status atual da operação.</summary>
      <returns>O status da operação.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a operação atual.</summary>
      <returns>Um objeto que representa a operação atual.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>Aguarda a conclusão da operação</summary>
      <returns>O status da operação.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> é igual a <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  Isso pode ocorrer ao esperar uma operação que já está em execução no mesmo thread.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>Aguarda a operação ser concluída no período especificado.</summary>
      <param name="timeout">O período máximo de tempo de espera.</param>
      <returns>O status da operação.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> é igual a <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />.  Isso pode ocorrer ao esperar uma operação que já está em execução no mesmo thread.</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary>Representa um objeto que é usado para interagir com uma operação que foi postada na fila do <see cref="T:System.Windows.Threading.Dispatcher" /> e contém um <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <typeparam name="TResult">O tipo que é retornado pelo <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary>Retorna um objeto que aguarda uma operação assíncrona que retorna um resultado.</summary>
      <returns>Um objeto que aguarda uma operação assíncrona que retorna um resultado.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary>Inicia a operação que está associada a este <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
      <returns>O resultado da operação.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary>Obtém o resultado da operação após sua conclusão.</summary>
      <returns>O resultado da operação.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a operação atual.</summary>
      <returns>Um objeto que representa a operação atual.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>Representa um delegado a ser usado para operações do dispatcher.</summary>
      <param name="arg">Um argumento passado para o retorno de chamada.</param>
      <returns>O objeto retornado pelo retorno de chamada.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>Descreve os possíveis valores para o status de um <see cref="T:System.Windows.Threading.DispatcherOperation" />.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>A operação foi anulada.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>A operação foi concluída.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>A operação iniciou a execução, mas não foi concluída.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>A operação está pendente e ainda está na fila <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>Descreve as prioridades nas quais as operações podem ser invocadas por meio do <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>O valor de enumeração é 2.  As operações serão processadas quando o aplicativo estiver ocioso.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>O valor de enumeração é 4.  As operações serão processadas após a conclusão de todas as outras operações não ociosas.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>O valor de enumeração é 3.  As operações serão processadas após a conclusão das operações em segundo plano.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>O valor de enumeração é 8.  As operações serão processadas com a mesma prioridade que a vinculação de dados.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>O valor de enumeração é 0.  As operações não são processadas.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>O valor de enumeração é 5.  As operações são processadas com a mesma prioridade que a entrada.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>O valor de enumeração é -1.  Essa é uma prioridade inválida.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>O valor de enumeração é 6.  As operações serão processadas quando o layout e a renderização tiverem terminado, mas antes que os itens com prioridade de entrada sejam atendidos. Especificamente, isso é usado ao gerar o evento Loaded.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>O valor de enumeração é 9.  As operações serão processadas com prioridade normal.  Esta é a prioridade típica do aplicativo.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>O valor de enumeração é 7.  As operações serão processadas com a mesma prioridade que a renderização.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>O valor de enumeração é 10.  As operações serão processadas antes de outras operações assíncronas.  Esta é a prioridade mais alta.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>O valor de enumeração é 1.  As operações serão processadas quando o sistema estiver ocioso.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary>Representa um objeto aguardável que transfere o controle de volta para o dispatcher atual e fornece uma oportunidade para o dispatcher processar outros eventos de forma assíncrona</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary>Retorna um objeto que aguarda a conclusão de uma tarefa assíncrona.</summary>
      <returns>Um objeto que aguarda a conclusão de uma tarefa assíncrona.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary>Representa um objeto que aguarda a conclusão de uma tarefa assíncrona.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary>Termina a espera pela conclusão da tarefa assíncrona.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary>Obtém um valor que indica se a tarefa assíncrona foi concluída.</summary>
      <returns>
        <see langword="false" /> em todos os casos.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary>Define a ação a ser executada quando o objeto <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> para de esperar a conclusão da tarefa assíncrona.</summary>
      <param name="continuation">A ação a ser executada quando a operação de espera é concluída.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>Representa o Dispatcher quando ele está em um estado desabilitado e fornece um meio de habilitar o processamento do dispatcher novamente.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>Habilita o processamento do dispatcher novamente.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>Determina se o objeto <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> especificado é igual a este objeto <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />.</summary>
      <param name="obj">O objeto a ser avaliado quanto à igualdade.</param>
      <returns>
        <see langword="true" /> se o objeto especificado for igual a esse <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> objeto, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>Obtém um código hash para essa instância.</summary>
      <returns>Um código hash do inteiro com sinal de 32 bits.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determina se dois objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> são iguais.</summary>
      <param name="left">O primeiro objeto a ser comparado.</param>
      <param name="right">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se os objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>Determina se dois objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> não são iguais.</summary>
      <param name="left">O primeiro objeto a ser comparado.</param>
      <param name="right">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se os objetos <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> não forem iguais, do contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>Fornece um contexto de sincronização para o WPF (Windows Presentation Foundation).</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> usando o <see cref="T:System.Windows.Threading.Dispatcher" /> atual.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> usando o <see cref="T:System.Windows.Threading.Dispatcher" /> especificado.</summary>
      <param name="dispatcher">O <see cref="T:System.Windows.Threading.Dispatcher" /> a ser associado a este <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> usando o <see cref="T:System.Windows.Threading.Dispatcher" /> especificado.</summary>
      <param name="dispatcher">O <see cref="T:System.Windows.Threading.Dispatcher" /> a ser associado a este <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</param>
      <param name="priority">A prioridade usada para enviar e postar os métodos de retorno de chamada.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>Cria uma cópia deste <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />.</summary>
      <returns>A cópia deste contexto de sincronização.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invoca o retorno de chamada no contexto de sincronização de forma assíncrona.</summary>
      <param name="d">O delegado a ser chamado.</param>
      <param name="state">O objeto passado ao delegado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invoca o retorno de chamada no contexto de sincronização de forma síncrona.</summary>
      <param name="d">O delegado a ser chamado.</param>
      <param name="state">O objeto passado ao delegado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>Aguarda até que um ou todos os elementos da matriz especificada recebam um sinal.</summary>
      <param name="waitHandles">Uma matriz que contém os identificadores do sistema operacional nativo.</param>
      <param name="waitAll">
        <see langword="true" /> para aguardar todos os identificadores, <see langword="false" /> para aguardar qualquer identificador.</param>
      <param name="millisecondsTimeout">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <returns>O índice da matriz do objeto que atendeu à espera.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>Um temporizador que é integrado à fila <see cref="T:System.Windows.Threading.Dispatcher" /> que é processada em um intervalo de tempo especificado e com uma prioridade especificada.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> que usa o intervalo de tempo, a prioridade, o manipulador de eventos e o <see cref="T:System.Windows.Threading.Dispatcher" /> especificados.</summary>
      <param name="interval">O período entre os tiques.</param>
      <param name="priority">A prioridade na qual o temporizador deve ser invocado.</param>
      <param name="callback">O manipulador de eventos a ser chamado quando o evento de <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> ocorrer.</param>
      <param name="dispatcher">O dispatcher ao qual o temporizador está associado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> é <see langword="null" />.

ou -
    &lt;code data-dev-comment-type="paramref"&gt;dispatcher&lt;/code&gt; é &lt;code data-dev-comment-type="langword"&gt;null&lt;/code&gt;.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> é menor que 0 ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> que processa eventos de temporizador na prioridade especificada.</summary>
      <param name="priority">A prioridade na qual o temporizador deve ser invocado.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Threading.DispatcherTimer" /> executada no <see cref="T:System.Windows.Threading.Dispatcher" /> especificado na prioridade especificada.</summary>
      <param name="priority">A prioridade na qual o temporizador deve ser invocado.</param>
      <param name="dispatcher">O dispatcher ao qual o temporizador está associado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>Obtém o <see cref="T:System.Windows.Threading.Dispatcher" /> associado a este <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      <returns>O dispatcher.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>Obtém ou define o período entre os tiques do temporizador.</summary>
      <returns>O período entre os tiques. O padrão é 00:00:00.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> é menor que 0 ou maior ou igual a <see cref="F:System.Int32.MaxValue" /> milissegundos.</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>Obtém ou define um valor que indica se o temporizador está em execução.</summary>
      <returns>
        <see langword="true" /> se o temporizador estiver habilitado; caso contrário, <see langword="false" />.  O padrão é <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>Inicia o <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>Interrompe o <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>Obtém ou define um objeto de dados definido pelo usuário.</summary>
      <returns>Os dados definidos pelo usuário.  O padrão é <see langword="null" />.</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>Ocorre quando termina o intervalo do temporizador.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>Fornece dados para o evento de <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>Obtém a exceção foi gerada ao executar o código por meio de dispatcher.</summary>
      <returns>A exceção.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>Obtém ou define se o evento de exceção foi tratado.</summary>
      <returns>
        <see langword="true" /> se a exceção foi tratada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> .</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Os dados do evento.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>Fornece dados para o evento de <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>Obtém a exceção foi gerada ao executar o código por meio de dispatcher.</summary>
      <returns>A exceção.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>Obtém ou define se a exceção deve ser capturada e os manipuladores de eventos chamados.</summary>
      <returns>
        <see langword="true" />Se o <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> deve ser gerado; caso contrário; <see langword="false" />.  O valor padrão é <see langword="true" />.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> .</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Os dados do evento.</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>Representa um método usado como um retorno de chamada que valida o valor efetivo de uma propriedade de dependência.</summary>
      <param name="value">O valor a ser validado.</param>
      <returns>
        <see langword="true" /> se o valor foi validado; <see langword="false" /> se o valor enviado era inválido.</returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>Representa um deslocamento de espaço 2D.</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Vector" />.</summary>
      <param name="x">O deslocamento de <see cref="P:System.Windows.Vector.X" /> do novo <see cref="T:System.Windows.Vector" />.</param>
      <param name="y">O deslocamento de <see cref="P:System.Windows.Vector.Y" /> do novo <see cref="T:System.Windows.Vector" />.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>Move o ponto especificado pelo vetor especificado e retorna o ponto resultante.</summary>
      <param name="vector">O valor para converter o ponto especificado.</param>
      <param name="point">O ponto a ser convertido.</param>
      <returns>O resultado de converter <paramref name="point" /> por <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adiciona dois vetores e retorna o resultado como uma estrutura de <see cref="T:System.Windows.Vector" />.</summary>
      <param name="vector1">O primeiro vetor a ser adicionado.</param>
      <param name="vector2">O segundo vetor a ser adicionado.</param>
      <returns>A soma de <paramref name="vector1" /> e <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>Recupera o ângulo, expressado em graus, entre os dois vetores especificados.</summary>
      <param name="vector1">O primeiro vetor a ser avaliado.</param>
      <param name="vector2">O segundo vetor a ser avaliado.</param>
      <returns>O ângulo, em graus, entre <paramref name="vector1" /> e <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula o produto cruzado de dois vetores.</summary>
      <param name="vector1">O primeiro vetor a ser avaliado.</param>
      <param name="vector2">O segundo vetor a ser avaliado.</param>
      <returns>O produto cruzado de <paramref name="vector1" /> e <paramref name="vector2" />. A fórmula a seguir é usada para calcular o produto cruzado: 
 <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula o determinante de dois vetores.</summary>
      <param name="vector1">O primeiro vetor a ser avaliado.</param>
      <param name="vector2">O segundo vetor a ser avaliado.</param>
      <returns>O determinante de <paramref name="vector1" /> e <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>Divide o vetor especificado pelo escalar especificado e retorna o resultado como um <see cref="T:System.Windows.Vector" />.</summary>
      <param name="vector">A estrutura de vetor a ser dividida.</param>
      <param name="scalar">A quantidade pela qual <paramref name="vector" /> é dividido.</param>
      <returns>O resultado da divisão de <paramref name="vector" /> por <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Object" /> especificado é uma estrutura <see cref="T:System.Windows.Vector" /> e, se sim, se ele tem os mesmos valores de <see cref="P:System.Windows.Vector.X" /> e de <see cref="P:System.Windows.Vector.Y" /> que esse vetor.</summary>
      <param name="o">O vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="o" /> for um <see cref="T:System.Windows.Vector" /> e tiver os mesmos valores de <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que esse vetor, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary>Compara dois vetores quanto à igualdade.</summary>
      <param name="value">O vetor a ser comparado com esse vetor.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> tem os mesmos valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> que esse vetor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compara os dois vetores especificados quanto à igualdade.</summary>
      <param name="vector1">O primeiro vetor a ser comparado.</param>
      <param name="vector2">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> do <paramref name="vector1" /> e do <paramref name="vector2" /> forem iguais, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>Retorna o código hash desse vetor.</summary>
      <returns>O código hash para essa instância.</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>Obtém o tamanho desse vetor.</summary>
      <returns>O tamanho desse vetor.</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>Obtém o quadrado do comprimento desse vetor.</summary>
      <returns>O quadrado do <see cref="P:System.Windows.Vector.Length" /> desse vetor.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary>Multiplica o escalar especificado pelo vetor especificado e retorna o <see cref="T:System.Windows.Vector" /> resultante.</summary>
      <param name="scalar">O escalar a se multiplicar.</param>
      <param name="vector">O vetor a ser multiplicado.</param>
      <returns>O resultado da multiplicação de <paramref name="scalar" /> por <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplica o vetor especificado pelo escalar especificado e retorna o <see cref="T:System.Windows.Vector" /> resultante.</summary>
      <param name="vector">O vetor a ser multiplicado.</param>
      <param name="scalar">O escalar a se multiplicar.</param>
      <returns>O resultado da multiplicação de <paramref name="vector" /> por <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforma o espaço de coordenadas do vetor especificado usando a <see cref="T:System.Windows.Media.Matrix" /> especificada.</summary>
      <param name="vector">A estrutura de vetor a transformar.</param>
      <param name="matrix">A transformação a ser aplicada em <paramref name="vector" />.</param>
      <returns>O resultado da transformar <paramref name="vector" /> em <paramref name="matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula o produto escalar de dois vetores e retorna o resultado como <see cref="T:System.Double" />.</summary>
      <param name="vector1">O primeiro vetor a ser multiplicado.</param>
      <param name="vector2">A segunda estrutura do vetor a ser multiplicado.</param>
      <returns>Um <see cref="T:System.Double" /> que contém o produto escalar de <paramref name="vector1" /> e <paramref name="vector2" />, que é calculado utilizando a seguinte fórmula: 
 <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>Nega este vetor. O vetor tem a mesma magnitude de antes, mas sua direção agora é oposta.</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary>Normaliza esse vetor.</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary>Converte um ponto pelo vetor especificado e retorna o ponto resultante.</summary>
      <param name="vector">O vetor usado para converter <paramref name="point" />.</param>
      <param name="point">O ponto a ser convertido.</param>
      <returns>O resultado de converter <paramref name="point" /> por <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>Adiciona dois vetores e retorna o resultado como um vetor.</summary>
      <param name="vector1">O primeiro vetor a ser adicionado.</param>
      <param name="vector2">O segundo vetor a ser adicionado.</param>
      <returns>A soma de <paramref name="vector1" /> e <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary>Divide o vetor especificado pelo escalar especificado e retorna o vetor resultante.</summary>
      <param name="vector">O vetor a ser dividido.</param>
      <param name="scalar">O escalar pelo qual <paramref name="vector" /> será dividido.</param>
      <returns>O resultado da divisão de <paramref name="vector" /> por <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compara dois vetores quanto à igualdade.</summary>
      <param name="vector1">O primeiro vetor a ser comparado.</param>
      <param name="vector2">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> e <paramref name="vector2" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>Cria um <see cref="T:System.Windows.Point" /> com os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> desse vetor.</summary>
      <param name="vector">O vetor a ser convertido.</param>
      <returns>Um ponto com os valores de coordenada <see cref="P:System.Windows.Point.X" /> e <see cref="P:System.Windows.Point.Y" /> iguais aos valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de deslocamento do <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>Cria um <see cref="T:System.Windows.Size" /> usando os deslocamentos desse vetor.</summary>
      <param name="vector">O vetor a ser convertido.</param>
      <returns>Um <see cref="T:System.Windows.Size" /> com uma <see cref="P:System.Windows.Size.Width" /> igual ao valor absoluto da propriedade <see cref="P:System.Windows.Vector.X" /> desse vetor e uma <see cref="P:System.Windows.Size.Height" /> igual ao valor absoluto da propriedade <see cref="P:System.Windows.Vector.Y" /> desse vetor.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>Compara dois vetores quanto à desigualdade.</summary>
      <param name="vector1">O primeiro vetor a ser comparado.</param>
      <param name="vector2">O segundo vetor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os componentes <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector1" /> e <paramref name="vector2" /> forem diferentes, caso contrário <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary>Multiplica o escalar especificado pelo vetor especificado e retorna o vetor resultante.</summary>
      <param name="scalar">O escalar a se multiplicar.</param>
      <param name="vector">O vetor a ser multiplicado.</param>
      <returns>O resultado da multiplicação de <paramref name="scalar" /> por <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>Multiplica o vetor especificado pelo escalar especificado e retorna o vetor resultante.</summary>
      <param name="vector">O vetor a ser multiplicado.</param>
      <param name="scalar">O escalar a se multiplicar.</param>
      <returns>O resultado da multiplicação de <paramref name="vector" /> por <paramref name="scalar" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>Transforma o espaço de coordenadas do vetor especificado usando a <see cref="T:System.Windows.Media.Matrix" /> especificada.</summary>
      <param name="vector">O vetor a ser transformado.</param>
      <param name="matrix">A transformação a ser aplicada em <paramref name="vector" />.</param>
      <returns>O resultado da transformar <paramref name="vector" /> em <paramref name="matrix" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>Calcula o produto escalar das duas estruturas de vetor especificadas e retorna o resultado como um <see cref="T:System.Double" />.</summary>
      <param name="vector1">O primeiro vetor a ser multiplicado.</param>
      <param name="vector2">O segundo vetor a ser multiplicado.</param>
      <returns>Retorna um <see cref="T:System.Double" /> que contém o produto escalar de <paramref name="vector1" /> e <paramref name="vector2" />, que é calculado utilizando a seguinte fórmula: 
 <c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtrai um vetor especificado de outro.</summary>
      <param name="vector1">O vetor do qual <paramref name="vector2" /> é subtraído.</param>
      <param name="vector2">O vetor a ser subtraído de <paramref name="vector1" />.</param>
      <returns>A diferença entre <paramref name="vector1" /> e <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>Nega o vetor especificado.</summary>
      <param name="vector">O vetor a ser negado.</param>
      <returns>Um vetor com os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> opostos aos valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> de <paramref name="vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>Converte uma representação de cadeia de caracteres de um vetor na estrutura <see cref="T:System.Windows.Vector" /> equivalente.</summary>
      <param name="source">A representação de cadeia de caracteres do vetor.</param>
      <returns>A estrutura <see cref="T:System.Windows.Vector" /> equivalente.</returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>Subtrai o vetor especificado de outro vetor especificado.</summary>
      <param name="vector1">O vetor do qual <paramref name="vector2" /> é subtraído.</param>
      <param name="vector2">O vetor a ser subtraído de <paramref name="vector1" />.</param>
      <returns>A diferença entre <paramref name="vector1" /> e <paramref name="vector2" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>Este membro dá suporte à infraestrutura Windows Presentation Foundation (WPF) e não se destina a ser usado diretamente do código. Para obter uma descrição desse membro, consulte <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <param name="format">A cadeia de caracteres que especifica o formato a ser usado.  

ou - 
<see langword="null" /> para usar o formato padrão definido para o tipo da implementação <see cref="T:System.IFormattable" />.</param>
      <param name="provider">O <see langword="IFormatProvider" /> a ser usado para formatar o valor.  

ou - 
<see langword="null" /> para obter as informações de formato numérico da configuração de localidade atual do sistema operacional.</param>
      <returns>Uma cadeia de caracteres que contém o valor da instância atual no formato especificado.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>Retorna a representação de cadeia de caracteres dessa estrutura <see cref="T:System.Windows.Vector" />.</summary>
      <returns>Uma cadeia de caracteres que representa os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> desse <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>Retorna a representação de cadeia de caracteres desta estrutura <see cref="T:System.Windows.Vector" /> com as informações de formatação especificadas.</summary>
      <param name="provider">As informações de formatação específicas da cultura.</param>
      <returns>Uma cadeia de caracteres que representa os valores <see cref="P:System.Windows.Vector.X" /> e <see cref="P:System.Windows.Vector.Y" /> desse <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>Obtém ou define o componente <see cref="P:System.Windows.Vector.X" /> desse vetor.</summary>
      <returns>O componente <see cref="P:System.Windows.Vector.X" /> desse vetor. O valor padrão é 0.</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>Obtém ou define o componente <see cref="P:System.Windows.Vector.Y" /> desse vetor.</summary>
      <returns>O componente <see cref="P:System.Windows.Vector.Y" /> desse vetor. O valor padrão é 0.</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary>Converte instâncias de outros tipos de e para um <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Windows.Vector" />.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Indica se um objeto pode ser convertido de um determinado tipo em uma instância de um <see cref="T:System.Windows.Vector" />.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="sourceType">O <see cref="T:System.Type" /> de origem que está sendo consultado quanto a suporte para conversão.</param>
      <returns>
        <see langword="true" /> se os objetos do tipo especificado podem ser convertidos em um <see cref="T:System.Windows.Vector" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se é possível converter instâncias de <see cref="T:System.Windows.Vector" /> para o tipo especificado.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="destinationType">O tipo desejado para o qual se está avaliando converter este <see cref="T:System.Windows.Vector" />.</param>
      <returns>
        <see langword="true" /> se este instâncias de <see cref="T:System.Windows.Vector" /> puderem ser convertidas para <paramref name="destinationType" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto especificado em um <see cref="T:System.Windows.Vector" />.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="culture">Descreve o <see cref="T:System.Globalization.CultureInfo" /> do tipo que está sendo convertido.</param>
      <param name="value">O objeto sendo convertido.</param>
      <returns>O <see cref="T:System.Windows.Vector" /> criado da conversão de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte a <see cref="T:System.Windows.Vector" /> especificada no tipo especificado.</summary>
      <param name="context">Descreve as informações de contexto de um tipo.</param>
      <param name="culture">Descreve o <see cref="T:System.Globalization.CultureInfo" /> do tipo que está sendo convertido.</param>
      <param name="value">O <see cref="T:System.Windows.Vector" /> a ser convertido.</param>
      <param name="destinationType">O tipo para o qual converter este <see cref="T:System.Windows.Vector" />.</param>
      <returns>O objeto criado da conversão deste <see cref="T:System.Windows.Vector" />.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>Fornece uma classe base para o gerenciador de evento que é usado no padrão de evento fraco. O Gerenciador adiciona e remove os ouvintes de eventos (ou retornos de chamada) que também usam o padrão.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>Inicializa os valores da classe base quando é usado como o inicializador pelo construtor de uma classe derivada.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>Fornece o evento que está sendo gerenciado a cada ouvinte.</summary>
      <param name="sender">O objeto no qual o evento está sendo manipulado.</param>
      <param name="args">Um <see cref="T:System.EventArgs" /> que contém os dados do evento que o evento deve entregar.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>Entrega o evento que está sendo gerenciado a cada ouvinte na lista fornecida.</summary>
      <param name="sender">O objeto no qual o evento está sendo manipulado.</param>
      <param name="args">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
      <param name="list">A <see cref="T:System.Windows.WeakEventManager.ListenerList" /> fornecida.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>Retorna a implementação de <see cref="T:System.Windows.WeakEventManager" /> que é usada para o tipo fornecido.</summary>
      <param name="managerType">O tipo para o qual o <see cref="T:System.Windows.WeakEventManager" /> deve ser obtido.</param>
      <returns>A implementação de <see cref="T:System.Windows.WeakEventManager" /> correspondente.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>Obtém ou define os dados que estão sendo armazenados para a origem especificada.</summary>
      <param name="source">O índice de base zero da origem solicitada.</param>
      <returns>Dados armazenados pelo gerente para esta fonte.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>Fornece uma lista de coleção interna para armazenar ouvintes de um <see cref="T:System.Windows.WeakEventManager" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.WeakEventManager.ListenerList" /> com a capacidade inicial especificada.</summary>
      <param name="capacity">O número de itens que devem ser alocados na lista inicial.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>Adiciona um objeto <see cref="T:System.Windows.IWeakEventListener" /> ao <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">O elemento de ouvinte a ser adicionado ao <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary>Adiciona um manipulador de eventos ao <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="handler">O manipulador de eventos a ser adicionado ao <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>Declara a lista como em uso. Isso impede alterações diretas na lista durante as iterações dos itens da lista.</summary>
      <returns>
        <see langword="true" /> se a lista já tiver sido declarada como em uso, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>Cria um clone modificável desta <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>Um clone modificável do objeto atual.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary>Copia a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> atual para a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> especificada</summary>
      <param name="newList">O objeto ao qual será copiado.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>Obtém o número de itens contidos no <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <returns>O número de itens contidos no <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>Fornece o evento que está sendo gerenciado para cada ouvinte de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="sender">O objeto que gerencie o evento.</param>
      <param name="args">Um objeto que contém os dados do evento.</param>
      <param name="managerType">O tipo do <see cref="T:System.Windows.WeakEventManager" /> que chama esse método.</param>
      <returns>
        <see langword="true" /> se um dos ouvintes na <see cref="T:System.Windows.WeakEventManager.ListenerList" /> se referir a um objeto que tenha sido coletado como lixo, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>Obtém um valor que representa uma lista vazia para fins de comparações.</summary>
      <returns>A representação de lista vazia.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>Desbloqueia o estado bloqueado iniciado por <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</summary>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>Obtém um valor que declara se esta <see cref="T:System.Windows.WeakEventManager.ListenerList" /> está vazia.</summary>
      <returns>
        <see langword="true" />se a lista estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>Obtém ou define um item de ouvinte específico na <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="index">O índice de base zero do ouvinte na lista.</param>
      <returns>O item nesse índice ou uma referência nula se nenhum item estava nesse índice.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>Verifica se a lista fornecida está em uso e nesse caso, define o parâmetro de referência da lista para uma cópia dessa lista, em vez da original.</summary>
      <param name="list">A lista a ser verificada quanto ao estado de uso e a ser possivelmente copiada.</param>
      <returns>
        <see langword="true" /> se a lista fornecida estava em uso no momento da chamada e, portanto, a referência de parâmetro <paramref name="list" /> foi redefinida para ser uma cópia. <see langword="false" /> se a lista fornecida não estava em uso e, nesse caso, a referência de parâmetro <paramref name="list" /> permanece inalterada.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>Remove todas as entradas da lista em que o destino da referência subjacente é uma referência nula.</summary>
      <returns>Retornará <see langword="true" /> se as entradas foram limpadas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>Remove a primeira ocorrência de um item de ouvinte do <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="listener">O item a ser removido.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary>Remove um manipulador de eventos da <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</summary>
      <param name="handler">O manipulador de eventos a ser removido da <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary>Fornece uma lista de coleção fortemente tipada para armazenar ouvintes de um <see cref="T:System.Windows.WeakEventManager" />. Essa classe define um parâmetro de tipo para os dados de evento que são usados.</summary>
      <typeparam name="TEventArgs">O tipo que mantém os dados do evento.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> com a capacidade inicial especificada.</summary>
      <param name="capacity">O número de itens que devem ser alocados na lista inicial.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary>Cria um clone modificável desta <see cref="T:System.Windows.WeakEventManager.ListenerList" />, fazendo cópias em profundidade dos valores.</summary>
      <returns>Um clone modificável do objeto atual. A propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> do objeto clonado será <see langword="false" />, mesmo se a propriedade <see cref="P:System.Windows.Freezable.IsFrozen" /> da origem tiver sido <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>Fornece o evento que está sendo gerenciado para cada ouvinte de <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />.</summary>
      <param name="sender">O objeto que gerencie o evento.</param>
      <param name="e">Um objeto que contém os dados do evento.</param>
      <param name="managerType">O tipo do <see cref="T:System.Windows.WeakEventManager" /> que chama esse método.</param>
      <returns>
        <see langword="true" /> se um dos ouvintes na <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> se referir a um objeto que tenha sido coletado como lixo, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary>Retorna um novo objeto para conter os ouvintes de um evento.</summary>
      <returns>Um novo objeto para conter os ouvintes de um evento.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary>Adiciona o delegado especificado como um manipulador de eventos de origem especificada.</summary>
      <param name="source">O objeto de origem que o representante do manipulador assina.</param>
      <param name="handler">O delegado que manipula o evento gerado por <paramref name="source" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Adiciona o ouvinte fornecido à origem fornecida para o evento que está sendo gerenciado.</summary>
      <param name="source">A origem à qual os ouvintes devem ser anexados.</param>
      <param name="listener">A classe de escuta (que deve implementar <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary>Remove o manipulador adicionado anteriormente da origem especificada.</summary>
      <param name="source">A origem da qual o manipulador deve ser removido.</param>
      <param name="handler">O delegado a ser removido de <paramref name="source" />.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>Remove um ouvinte adicionado anteriormente da origem fornecida.</summary>
      <param name="source">A origem da qual os ouvintes devem ser removidos.</param>
      <param name="listener">A classe de escuta (que deve implementar <see cref="T:System.Windows.IWeakEventListener" />).</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>Remove entradas do ouvinte inativo da lista de dados para a origem fornecida. Retornará <see langword="true" /> se algumas entradas realmente tiverem sido removidas da lista.</summary>
      <param name="source">A origem de eventos que está sendo ouvida.</param>
      <param name="data">Os dados a serem verificados. Espera-se que este objeto seja uma implementação de <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
      <param name="purgeAll">O <see langword="true" /> para parar de escutar <paramref name="source" /> e remover completamente todas as entradas de <paramref name="data" />.</param>
      <returns>
        <see langword="true" /> se algumas entradas foram removidas, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>Estabelece um bloqueio de leitura na tabela de dados subjacente e retorna um <see cref="T:System.IDisposable" />.</summary>
      <returns>Um objeto que pode ser usado para estabelecer um bloqueio nos membros da tabela de dados e, em seguida, ser descartado <see langword="using" /> adequadamente com uma construção.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>Remove todos os ouvintes da origem especificada.</summary>
      <param name="source">A origem da qual as informações de ouvinte devem ser removidas.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>Solicita que uma limpeza de entradas não usadas na lista de ouvintes subjacente seja executada em um thread de prioridade mais baixa.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>Define o gerenciador atual para o tipo de gerenciador especificado.</summary>
      <param name="managerType">O tipo para definir o novo gerenciador de eventos.</param>
      <param name="manager">O novo gerenciador de eventos.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>Quando substituído em uma classe derivada, inicia a escuta para o evento que está sendo gerenciado. Depois que o método <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> for chamado pela primeira vez, o gerenciador deverá estar no estado de chamada de <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> ou de <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> sempre que o evento relevante da origem fornecida for manipulado.</summary>
      <param name="source">A origem na qual a escuta deve ser iniciada.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>Quando substituído em uma classe derivada, interrompe a escuta da origem fornecida para o evento que está sendo gerenciado.</summary>
      <param name="source">A origem cuja escuta deve ser interrompida.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>Estabelece um bloqueio de gravação na tabela de dados subjacente e retorna um <see cref="T:System.IDisposable" />.</summary>
      <returns>Um objeto que pode ser usado para estabelecer um bloqueio nos membros da tabela de dados e, em seguida, ser descartado <see langword="using" /> adequadamente com uma construção.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary>Fornece um <see cref="T:System.Windows.WeakEventManager" /> fortemente tipado que permite especificar o manipulador de eventos a ser usado para o padrão "ouvinte de evento fraco". Essa classe define um parâmetro de tipo para a origem do evento e um parâmetro de tipo para os dados de evento que são usados.</summary>
      <typeparam name="TEventSource">O tipo que gera o evento.</typeparam>
      <typeparam name="TEventArgs">O tipo que mantém os dados do evento.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary>Adiciona o manipulador de eventos especificado ao evento especificado.</summary>
      <param name="source">O objeto de origem que gera o evento especificado.</param>
      <param name="eventName">O nome do evento que será assinado.</param>
      <param name="handler">O delegado que manipula o evento.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary>Retorna um novo objeto para conter os ouvintes de um evento.</summary>
      <returns>Um novo objeto para conter os ouvintes de um evento.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary>Remove o manipulador de eventos especificado do evento especificado.</summary>
      <param name="source">O objeto de origem que gera o evento especificado.</param>
      <param name="eventName">O nome do evento do qual o manipulador será removido.</param>
      <param name="handler">O representante a ser removido</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary>Inicia a escuta para o evento no objeto especificado.</summary>
      <param name="source">O objeto que gera o evento.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary>Interrompe a escuta para o evento no objeto especificado.</summary>
      <param name="source">O objeto que gera o evento.</param>
    </member>
  </members>
</doc>
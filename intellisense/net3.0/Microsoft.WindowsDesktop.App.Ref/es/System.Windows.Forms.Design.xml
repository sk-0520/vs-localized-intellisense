<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Forms.Design</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.Design.ComponentDesigner">
      <summary>Extiende el comportamiento de un componente en modo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ComponentDesigner" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ActionLists">
      <summary>Obtiene las listas de acciones en tiempo de diseño que admite el componente asociado al diseñador.</summary>
      <returns>Listas de acciones en tiempo de diseño que admite el componente asociado al diseñador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.AssociatedComponents">
      <summary>Obtiene la colección de componentes asociados al componente administrado por el diseñador.</summary>
      <returns>Componentes asociados al componente administrado por el diseñador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Component">
      <summary>Obtiene el componente que el diseñador está creando.</summary>
      <returns>Componente administrado por el diseñador.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.ComponentDesigner" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.DoDefaultAction">
      <summary>Crea una firma de método en el archivo de código fuente para el evento predeterminado del componente y hace navegar el cursor del usuario en esa ubicación.</summary>
      <exception cref="T:System.ComponentModel.Design.CheckoutException">No se ha podido desproteger un archivo que está protegido en un programa de administración de código fuente.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.GetService(System.Type)">
      <summary>Intenta recuperar el tipo de servicio especificado del sitio en modo de diseño del componente del diseñador.</summary>
      <param name="serviceType">Tipo de servicio que se va a solicitar.</param>
      <returns>Objeto que implementa el servicio solicitado o <see langword="null" /> si no se puede resolver el servicio.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.InheritanceAttribute">
      <summary>Obtiene un atributo que indica el tipo de herencia del componente asociado.</summary>
      <returns>
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> para el componente asociado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Inherited">
      <summary>Obtiene un valor que indica si este componente es heredado.</summary>
      <returns>
        <see langword="true" /> si el componente es heredado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Prepara el diseñador para ver, modificar y diseñar el componente especificado.</summary>
      <param name="component">Componente para este diseñador.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>Reinicializa un componente existente.</summary>
      <param name="defaultValues">Un diccionario de valores predeterminados de nombre y valor que se van a aplicar a propiedades. Puede ser <see langword="null" /> si no se especifican valores predeterminados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Inicializa un componente recién creado.</summary>
      <param name="defaultValues">Un diccionario de valores predeterminados de nombre y valor que se van a aplicar a propiedades. Puede ser <see langword="null" /> si no se especifican valores predeterminados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeNonDefault">
      <summary>Inicializa la configuración de un componente importado que ya se ha inicializado con una configuración que no es la predeterminada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InvokeGetInheritanceAttribute(System.ComponentModel.Design.ComponentDesigner)">
      <summary>Obtiene el objeto <see cref="T:System.ComponentModel.InheritanceAttribute" /> de la enumeración <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> especificada.</summary>
      <param name="toInvoke">Enumeración <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> cuyo atributo de herencia se va a recuperar.</param>
      <returns>Clase <see cref="T:System.ComponentModel.InheritanceAttribute" /> del diseñador especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.OnSetComponentDefaults">
      <summary>Establece las propiedades predeterminadas del componente.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ParentComponent">
      <summary>Obtiene el componente primario de este diseñador.</summary>
      <returns>Componente primario de este diseñador o <see langword="null" /> si el diseñador es el componente raíz.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>Permite a un diseñador cambiar o quitar elementos en el conjunto de atributos que expone mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Atributos para la clase del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterEvents(System.Collections.IDictionary)">
      <summary>Permite a un diseñador cambiar o quitar elementos del conjunto de eventos que expone mediante un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Eventos para la clase del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterProperties(System.Collections.IDictionary)">
      <summary>Permite a un diseñador cambiar o quitar elementos del conjunto de propiedades que expone mediante un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Propiedades para la clase del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>Permite a un diseñador agregar elementos al conjunto de atributos que expone mediante un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Atributos para la clase del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>Permite a un diseñador agregar elementos al conjunto de eventos que expone mediante un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Eventos para la clase del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Permite a un diseñador agregar elementos al conjunto de propiedades que expone mediante un objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Propiedades para la clase del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.RaiseComponentChanged(System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Notifica a <see cref="T:System.ComponentModel.Design.IComponentChangeService" /> que este componente se ha cambiado.</summary>
      <param name="member">Un objeto <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica el miembro que se ha modificado.</param>
      <param name="oldValue">Valor antiguo del miembro.</param>
      <param name="newValue">Valor nuevo del miembro.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.RaiseComponentChanging(System.ComponentModel.MemberDescriptor)">
      <summary>Notifica a <see cref="T:System.ComponentModel.Design.IComponentChangeService" /> que este componente se va a cambiar.</summary>
      <param name="member">Clase <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica el miembro que se va a cambiar.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ShadowProperties">
      <summary>Obtiene una colección de valores de propiedad que reemplazan la configuración del usuario.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection" /> que indica las propiedades con copia sombra del documento de diseño.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection">
      <summary>Representa una colección de propiedades con copia sombra que debe reemplazar los valores predeterminados o asignados heredados de propiedades concretas. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection.Contains(System.String)">
      <summary>Indica si existe en la colección una propiedad que coincide con el nombre especificado.</summary>
      <param name="propertyName">Nombre de la propiedad de la colección cuya existencia en la colección se va a comprobar.</param>
      <returns>Es <see langword="true" /> si la propiedad está en la colección; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection.Item(System.String)">
      <summary>Obtiene o establece el objeto que se encuentra en el índice especificado.</summary>
      <param name="propertyName">Nombre de la propiedad a la que se va a tener acceso en la colección.</param>
      <returns>Valor de la propiedad especificada, si existe en la colección. En los demás casos, el valor se recupera del valor actual de la propiedad que no tiene copia sombra.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterAttributes(System.Collections.IDictionary)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" />.</summary>
      <param name="attributes">Objetos <see cref="T:System.Attribute" /> para la clase del componente. Las claves del diccionario de atributos son los valores de la propiedad <see cref="P:System.Attribute.TypeId" /> de los atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterEvents(System.Collections.IDictionary)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" />.</summary>
      <param name="events">Objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representan los eventos de la clase del componente. Las claves del diccionario de eventos son nombres de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterProperties(System.Collections.IDictionary)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" />.</summary>
      <param name="properties">Objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representan las propiedades de la clase del componente. Las claves del diccionario de propiedades son nombres de propiedad.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterAttributes(System.Collections.IDictionary)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" />.</summary>
      <param name="attributes">Objetos <see cref="T:System.Attribute" /> para la clase del componente. Las claves del diccionario de atributos son los valores de la propiedad <see cref="P:System.Attribute.TypeId" /> de los atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterEvents(System.Collections.IDictionary)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" />.</summary>
      <param name="events">Objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representan los eventos de la clase del componente. Las claves del diccionario de eventos son nombres de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterProperties(System.Collections.IDictionary)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" />.</summary>
      <param name="properties">Objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representan las propiedades de la clase del componente. Las claves del diccionario de propiedades son nombres de propiedad.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#ITreeDesigner#Children">
      <summary>Para una descripción de este miembro, consulte la propiedad <see cref="P:System.ComponentModel.Design.ITreeDesigner.Children" />.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> que contiene la colección de diseñadores <see cref="T:System.ComponentModel.Design.IDesigner" /> incluida en el diseñador primario actual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#ITreeDesigner#Parent">
      <summary>Para una descripción de este miembro, consulte la propiedad <see cref="P:System.ComponentModel.Design.ITreeDesigner.Parent" />.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.Design.IDesigner" /> que representa el diseñador primario o <see langword="null" /> si no hay ningún elemento primario.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Verbs">
      <summary>Obtiene los verbos en tiempo de diseño que admite el componente asociado al diseñador.</summary>
      <returns>Colección <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> o <see langword="null" /> si no hay verbos del diseñador disponibles. Esta implementación predeterminada siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionHeaderItem">
      <summary>Representa un elemento de encabezado estático en un panel de etiquetas inteligentes. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionHeaderItem.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionHeaderItem" /> con la cadena de nombre proporcionada.</summary>
      <param name="displayName">Texto que se va a mostrar en el encabezado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionHeaderItem.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionHeaderItem" /> con las cadenas de nombre y categoría proporcionadas.</summary>
      <param name="displayName">Texto que se va a mostrar en el encabezado.</param>
      <param name="category">
        <see cref="T:System.String" /> que distingue entre mayúsculas y minúsculas y define las agrupaciones de las entradas del panel.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionItem">
      <summary>Proporciona la clase base para los tipos que representan un elemento de panel en un panel de etiquetas inteligentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItem.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionItem" />.</summary>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">
        <see cref="T:System.String" /> que distingue entre mayúsculas y minúsculas y define las agrupaciones de las entradas del panel.</param>
      <param name="description">Texto complementario para este elemento, que se puede utilizar en la información sobre herramientas o en la barra de estado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.AllowAssociate">
      <summary>Obtiene o establece un valor que indica si se permite colocar este elemento en un grupo de elementos cuya propiedad <see cref="P:System.ComponentModel.Design.DesignerActionItem.Category" /> tenga el mismo valor.</summary>
      <returns>
        <see langword="true" /> si se puede agrupar el elemento; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.Category">
      <summary>Obtiene el nombre de grupo para un elemento.</summary>
      <returns>Cadena que representa el grupo del que el elemento es un miembro.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.Description">
      <summary>Obtiene el texto complementario para el elemento.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el texto descriptivo para el elemento.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.DisplayName">
      <summary>Obtiene el texto para este elemento.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el texto que se va a mostrar para el elemento.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.Properties">
      <summary>Obtiene una referencia a una colección que se puede utilizar para almacenar los pares de clave/valor definidos por programador.</summary>
      <returns>Colección que implementa <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.ShowInSourceView">
      <summary>Obtiene o establece un valor que indica si este elemento aparece en la vista de código fuente.</summary>
      <returns>
        <see langword="true" /> si este elemento aparece en la vista de código fuente; si no, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionItemCollection">
      <summary>Representa una colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionItem" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Add(System.ComponentModel.Design.DesignerActionItem)">
      <summary>Agrega el objeto <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> proporcionado a la colección actual.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> que se va a agregar.</param>
      <returns>Índice de <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" /> donde se ha agregado el valor.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Contains(System.ComponentModel.Design.DesignerActionItem)">
      <summary>Determina si <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" /> contiene un elemento específico.</summary>
      <param name="value">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> que se va a buscar en la interfaz <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />.</param>
      <returns>Es <see langword="true" /> si la colección <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" /> contiene el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.CopyTo(System.ComponentModel.Design.DesignerActionItem[],System.Int32)">
      <summary>Copia los elementos de la colección actual en la matriz suministrada, comenzando por el índice especificado de la matriz.</summary>
      <param name="array">Matriz de <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> unidimensional que constituye el destino de los elementos copiados desde la colección actual. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.IndexOf(System.ComponentModel.Design.DesignerActionItem)">
      <summary>Determina el índice de un elemento específico de la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> que se va a buscar en la colección.</param>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> en la totalidad de <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerActionItem)">
      <summary>Inserta un elemento en <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" /> en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> que se va a insertar.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItemCollection.Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> en el índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Remove(System.ComponentModel.Design.DesignerActionItem)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> que se va a quitar de <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionList">
      <summary>Proporciona la clase base para los tipos que definen una lista de elementos utilizados para crear un panel de etiquetas inteligentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionList.#ctor(System.ComponentModel.IComponent)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
      <param name="component">Componente relacionado con el objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionList.AutoShow">
      <summary>Obtiene o establece un valor que indica si se debe mostrar automáticamente el panel de etiquetas inteligentes al crearse.</summary>
      <returns>
        <see langword="true" /> si se debe mostrar el panel al crear el componente propietario; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionList.Component">
      <summary>Obtiene el componente relacionado con <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
      <returns>Componente relacionado con <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionList.GetService(System.Type)">
      <summary>Devuelve un objeto que representa un servicio proporcionado por el componente asociado al objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
      <param name="serviceType">Servicio suministrado por <see cref="T:System.ComponentModel.Component" />.</param>
      <returns>
        <see cref="T:System.Object" /> que representa un servicio suministrado por <see cref="T:System.ComponentModel.Component" />. Este valor es <see langword="null" /> si <see cref="T:System.ComponentModel.Component" /> no proporciona el servicio especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems">
      <summary>Devuelve la colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> que contiene la lista.</summary>
      <returns>Matriz de <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> que contiene los elementos de esta lista.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListCollection">
      <summary>Representa una colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> con los valores predeterminados.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.#ctor(System.ComponentModel.Design.DesignerActionList[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> con los elementos de panel especificados.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que va a rellenar la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Add(System.ComponentModel.Design.DesignerActionList)">
      <summary>Agrega el objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> proporcionado a la colección actual.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que se va a agregar.</param>
      <returns>Posición donde se inserta el nuevo elemento en la lista interna de la colección.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.AddRange(System.ComponentModel.Design.DesignerActionList[])">
      <summary>Agrega los elementos de la matriz <see cref="T:System.ComponentModel.Design.DesignerActionList" /> proporcionada al final de la colección actual.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.AddRange(System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>Agrega los elementos del objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> proporcionado al final de la colección actual.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Contains(System.ComponentModel.Design.DesignerActionList)">
      <summary>Indica si la colección contiene un valor específico.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que se va a buscar.</param>
      <returns>
        <see langword="true" /> si la colección contiene el valor especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.CopyTo(System.ComponentModel.Design.DesignerActionList[],System.Int32)">
      <summary>Copia los elementos de la colección actual en la matriz suministrada, comenzando por el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional de tipo <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que constituye el destino de los elementos copiados de la colección actual. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
O bien 
El número de elementos de la colección actual es mayor que el espacio disponible desde <paramref name="index" /> hasta el final de la matriz de destino.</exception>
      <exception cref="T:System.InvalidCastException">Se produjo un problema al convertir los elementos de la colección actual al tipo de la matriz de destino, quizás como consecuencia de un error de conversión inferior.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.IndexOf(System.ComponentModel.Design.DesignerActionList)">
      <summary>Determina el índice de un elemento específico de la colección.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que se va a buscar en la colección.</param>
      <returns>Índice de <paramref name="value" /> si se encuentra en la lista interna; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerActionList)">
      <summary>Inserta el objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> proporcionado en la posición especificada de la colección.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que se va a insertar en la colección.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que 0 o mayor que el recuento de elementos de la colección actual.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListCollection.Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> en el índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.OnValidate(System.Object)">
      <summary>Realiza procesos de personalización adicionales al validar un valor.</summary>
      <param name="value">Objeto que se va a validar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Remove(System.ComponentModel.Design.DesignerActionList)">
      <summary>Quita de la colección la primera aparición de un objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> específico.</summary>
      <param name="value">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que se va a quitar de la colección actual.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.#ctor(System.Object,System.ComponentModel.Design.DesignerActionListsChangedType,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" />.</summary>
      <param name="relatedObject">Objeto asociado a la colección.</param>
      <param name="changeType">Valor que especifica si se ha agregado o eliminado un objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> de la colección.</param>
      <param name="actionLists">Colección de elementos de lista resultante tras aplicar la acción.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.ActionLists">
      <summary>Obtiene la colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" /> asociados a este evento.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> que representa el estado actual de la colección.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.ChangeType">
      <summary>Obtiene un marcador que especifica si se ha agregado o quitado un elemento de la colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerActionListsChangedType" /> que indica el tipo de cambio.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.RelatedObject">
      <summary>Obtiene el objeto que está asociado a la colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
      <returns>
        <see cref="T:System.Object" /> asociado al objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> administrado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListsChangedEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" /> de <see cref="T:System.ComponentModel.Design.DesignerActionService" />. Esta clase no puede heredarse.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListsChangedType">
      <summary>Especifica el tipo de cambio que se produce en una colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionListsChangedType.ActionListsAdded">
      <summary>Se han agregado a la colección uno o varios objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionListsChangedType.ActionListsRemoved">
      <summary>Se han eliminado de la colección uno o varios objetos <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionMethodItem">
      <summary>Representa un elemento de panel de etiquetas inteligentes que está asociado a un método en una clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres para mostrar y de método especificados.</summary>
      <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />, con los nombres para mostrar y de método especificados, y con un marcador que especifica si el elemento debe aparecer en otros contextos de la interfaz de usuario.</summary>
      <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="includeAsDesignerVerb">Marcador que especifica si el método asociado también debe tratarse como un verbo de diseñador.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres de categoría, para mostrar y de método especificados.</summary>
      <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">
        <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres de categoría, para mostrar y de método especificados, y con un marcador que especifica si el elemento debe aparecer en otros contextos de la interfaz de usuario.</summary>
      <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">
        <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
      <param name="includeAsDesignerVerb">Marcador que especifica si el método asociado también debe tratarse como un verbo del diseñador para el componente asociado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> con los nombres de categoría y método especificados, así como texto para mostrar y de descripción.</summary>
      <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">
        <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
      <param name="description">Texto complementario para este elemento, que se utiliza en la información sobre herramientas o en la barra de estado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />, con los nombres de categoría y de método establecidos, el texto de descripción y para mostrar y un marcador que especifica si el elemento debe aparecer en otros contextos de la interfaz de usuario.</summary>
      <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene el método al que se asocia este elemento.</param>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas del método en la clase derivada de <see cref="T:System.ComponentModel.Design.DesignerActionList" /> al que se va a invocar a través del elemento de panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">
        <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
      <param name="description">Texto complementario para este elemento, que se utiliza en la información sobre herramientas o en la barra de estado.</param>
      <param name="includeAsDesignerVerb">Marcador que especifica si el método asociado también debe tratarse como un verbo del diseñador para el componente asociado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb">
      <summary>Obtiene un valor que indica que el objeto <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> debe aparecer en otros contextos de la interfaz de usuario.</summary>
      <returns>
        <see langword="true" /> si el elemento se va a utilizar en menús contextuales; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.Invoke">
      <summary>Ejecuta mediante programación el método asociado al objeto <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />.</summary>
      <exception cref="T:System.InvalidOperationException">No se encuentra el método cuyo nombre aparece en <see cref="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName">
      <summary>Obtiene el nombre del método al que está asociado este objeto <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre del método asociado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionMethodItem.RelatedComponent">
      <summary>Obtiene o establece un componente que contribuye con sus objetos <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> al panel actual.</summary>
      <returns>Componente suministrado, que debería tener un diseñador asociado que proporcionase elementos.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionPropertyItem">
      <summary>Representa un elemento de panel asociado a una propiedad en una clase que se deriva de <see cref="T:System.ComponentModel.Design.DesignerActionList" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionPropertyItem.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionPropertyItem" /> con los nombres para mostrar y de propiedad especificados.</summary>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas de la propiedad asociado a este elemento del panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionPropertyItem.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionPropertyItem" /> con los nombres de categoría y propiedad especificados, así como texto para mostrar.</summary>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas de la propiedad asociado a este elemento del panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">
        <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionPropertyItem.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionPropertyItem" /> con los nombres de categoría y propiedad especificados, así como texto para mostrar y de descripción.</summary>
      <param name="memberName">Nombre con distinción entre mayúsculas y minúsculas de la propiedad asociado a este elemento del panel.</param>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">
        <see cref="T:System.String" /> con distinción entre mayúsculas y minúsculas que se utiliza para agrupar elementos similares en el panel.</param>
      <param name="description">Texto complementario para este elemento, que se utiliza en la información sobre herramientas o en la barra de estado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionPropertyItem.MemberName">
      <summary>Obtiene el nombre de la propiedad a la que está asociado este elemento.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre de la propiedad asociada.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionPropertyItem.RelatedComponent">
      <summary>Obtiene o establece un componente que contribuye con sus elementos al panel actual.</summary>
      <returns>Componente suministrado, que debería tener un diseñador asociado que proporcionase objetos <see cref="T:System.ComponentModel.Design.DesignerActionItem" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionService">
      <summary>Establece un servicio en tiempo de diseño que administra la colección de objetos <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> para componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.#ctor(System.IServiceProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
      <param name="serviceProvider">Proveedor de servicios para el entorno actual en tiempo de diseño.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)">
      <summary>Agrega un objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> a la colección actual de etiquetas inteligentes administradas.</summary>
      <param name="comp">Interfaz <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar a las etiquetas inteligentes.</param>
      <param name="actionList">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> que contiene los nuevos elementos de etiqueta inteligente que se van a agregar.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>Agrega un objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> a la colección actual de etiquetas inteligentes administradas.</summary>
      <param name="comp">Interfaz <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar a las etiquetas inteligentes.</param>
      <param name="designerActionListCollection">Objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> que contiene los nuevos elementos de etiqueta inteligente que se van a agregar.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Clear">
      <summary>Libera todos los componentes de la administración y borra todas las listas de etiquetas inteligentes de modelo de inserción.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)">
      <summary>Determina si el servicio actual de etiquetas inteligentes administra las listas de acciones para el componente especificado.</summary>
      <param name="comp">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a buscar.</param>
      <returns>
        <see langword="true" /> si el servicio actual administra el componente; de lo contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comp" /> es <see langword="null" />.</exception>
    </member>
    <member name="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged">
      <summary>Se produce cuando se quita o agrega un objeto <see cref="T:System.ComponentModel.Design.DesignerActionList" /> para cualquier componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Dispose">
      <summary>Libera todos los recursos que utiliza la clase <see cref="T:System.ComponentModel.Design.DesignerActionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Design.DesignerActionService" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent)">
      <summary>Devuelve la colección de listas de elementos de etiqueta inteligente asociados a un componente.</summary>
      <param name="component">Componente al que están asociadas las etiquetas inteligentes.</param>
      <returns>Colección de etiquetas inteligentes para el componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comp" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent,System.Windows.Forms.Design.ComponentActionsType)">
      <param name="component" />
      <param name="type" />
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>Recupera las etiquetas inteligentes del modelo de extracción asociadas a un componente.</summary>
      <param name="component">Componente al que están asociadas las etiquetas inteligentes.</param>
      <param name="actionLists">Colección a la que se van a agregar las etiquetas inteligentes asociadas.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>Recupera las etiquetas inteligentes del modelo de inserción asociadas a un componente.</summary>
      <param name="component">Componente al que están asociadas las etiquetas inteligentes.</param>
      <param name="actionLists">Colección a la que se van a agregar las etiquetas inteligentes asociadas.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.Design.DesignerActionList)">
      <summary>Quita la lista de etiquetas inteligentes especificada de todos los componentes administrados mediante el servicio actual.</summary>
      <param name="actionList">Lista de etiquetas inteligentes que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionList" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent)">
      <summary>Quita todas las listas de etiquetas inteligentes asociadas al componente especificado.</summary>
      <param name="comp">Componente del que se van a desasociar las etiquetas inteligentes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comp" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)">
      <summary>Quita la lista de etiquetas inteligentes especificada del componente determinado.</summary>
      <param name="comp">Componente del que se van a desasociar las etiquetas inteligentes.</param>
      <param name="actionList">Lista de etiquetas inteligentes que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionTextItem">
      <summary>Representa un elemento de texto estático en un panel de etiquetas inteligentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionTextItem.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionTextItem" />.</summary>
      <param name="displayName">Texto de panel para este elemento.</param>
      <param name="category">Categoría utilizada para agrupar elementos similares en el panel.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIService">
      <summary>Administra la interfaz de usuario para un panel de etiquetas inteligentes. Esta clase no puede heredarse.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignerActionUIService.DesignerActionUIStateChange">
      <summary>Se produce cuando se realiza una solicitud para mostrar u ocultar un panel de etiquetas inteligentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.Dispose">
      <summary>Libera todos los recursos que utiliza la clase <see cref="T:System.ComponentModel.Design.DesignerActionUIService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)">
      <summary>Oculta el panel de etiquetas inteligentes para un componente.</summary>
      <param name="component">Componente cuyo panel de etiquetas inteligentes debe ocultarse.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.Refresh(System.ComponentModel.IComponent)">
      <summary>Actualiza el panel de etiquetas inteligentes.</summary>
      <param name="component">Interfaz <see cref="T:System.ComponentModel.IComponent" /> que se va a actualizar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.ShouldAutoShow(System.ComponentModel.IComponent)">
      <summary>Indica si se muestra automáticamente el panel de etiquetas inteligentes.</summary>
      <param name="component">Interfaz <see cref="T:System.ComponentModel.IComponent" /> que se va a mostrar automáticamente.</param>
      <returns>
        <see langword="true" /> para que se muestre automáticamente el panel de etiquetas inteligentes; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.ShowUI(System.ComponentModel.IComponent)">
      <summary>Muestra el panel de etiquetas inteligentes para un componente.</summary>
      <param name="component">Componente cuyo panel de etiquetas inteligentes debe mostrarse.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.DesignerActionUIService.DesignerActionUIStateChange" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs.#ctor(System.Object,System.ComponentModel.Design.DesignerActionUIStateChangeType)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs" />.</summary>
      <param name="relatedObject">Objeto que está asociado al panel.</param>
      <param name="changeType">Valor que especifica si se muestra u oculta el panel.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs.ChangeType">
      <summary>Obtiene un marcador que especifica si el panel de etiquetas inteligentes se está mostrando u ocultando.</summary>
      <returns>Enumeración <see cref="T:System.ComponentModel.Design.DesignerActionUIStateChangeType" /> que indica el estado del panel.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs.RelatedObject">
      <summary>Obtiene el objeto que está asociado al panel de etiquetas inteligentes.</summary>
      <returns>
        <see cref="T:System.Object" /> asociado al panel de etiquetas inteligentes.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIStateChangeEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.ComponentModel.Design.DesignerActionUIService.DesignerActionUIStateChange" /> de <see cref="T:System.ComponentModel.Design.DesignerActionUIService" />.</summary>
      <param name="sender">
        <see cref="T:System.Object" /> que provocó el evento.</param>
      <param name="e">Información específica del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIStateChangeType">
      <summary>Especifica el estado de vista de un panel de etiquetas inteligentes.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionUIStateChangeType.Hide">
      <summary>Se oculta el panel de etiquetas inteligentes.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionUIStateChangeType.Refresh">
      <summary>Se actualiza el panel de etiquetas inteligentes.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionUIStateChangeType.Show">
      <summary>Se muestra el panel de etiquetas inteligentes.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCommandSet">
      <summary>Representa una clase base para las herramientas en tiempo de diseño, que no se derivan de <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> y que proporcionan funciones de etiqueta inteligente o de verbo de diseñador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCommandSet.#ctor">
      <summary>Inicializa una instancia de la clase <see cref="T:System.ComponentModel.Design.DesignerCommandSet" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCommandSet.ActionLists">
      <summary>Obtiene la colección de todas las etiquetas inteligentes asociadas al componente diseñado.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> que contiene las etiquetas inteligentes para el componente diseñado asociado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCommandSet.GetCommands(System.String)">
      <summary>Devuelve una colección de objetos de comando.</summary>
      <param name="name">Tipo de colección que se va a devolver, que indica un objeto <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> o <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</param>
      <returns>Colección que contiene el tipo especificado (<see cref="T:System.ComponentModel.Design.DesignerActionList" /> o <see cref="T:System.ComponentModel.Design.DesignerVerb" />) de objetos de comando. La implementación base siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCommandSet.Verbs">
      <summary>Obtiene la colección de todos los verbos de diseñador asociados al componente diseñado.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> que contiene los verbos de diseñador para el componente diseñado asociado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignSurface">
      <summary>Presenta una interfaz de usuario para el diseño de componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
      <param name="parentProvider">Proveedor de servicios primario o <see langword="null" /> si no se usa ningún elemento primario para resolver servicios.</param>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
      <param name="parentProvider">Proveedor de servicios primario o <see langword="null" /> si no se usa ningún elemento primario para resolver servicios.</param>
      <param name="rootComponentType">Tipo de componente raíz que se va a crear.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootComponent" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
      <param name="rootComponentType">Tipo de componente raíz que se va a crear.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootComponent" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)">
      <summary>Comienza el proceso de carga con el cargador de diseñadores especificado.</summary>
      <param name="loader">Cargador de diseñadores que se va a emplear para cargar el diseñador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loader" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)">
      <summary>Comienza el proceso de carga.</summary>
      <param name="rootComponentType">Tipo de componente que se va a crear en modo de diseño.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootComponentType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.ComponentContainer">
      <summary>Obtiene la implementación de <see cref="T:System.ComponentModel.IContainer" /> en la superficie de diseño.</summary>
      <returns>Implementación de <see cref="T:System.ComponentModel.IContainer" /> en la superficie de diseño.</returns>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)">
      <summary>Crea una instancia de un componente.</summary>
      <param name="componentType">Tipo de componente que se va a crear.</param>
      <returns>Componente recién creado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)">
      <summary>Crea un diseñador cuando se agrega un componente al contenedor.</summary>
      <param name="component">Componente para el que se debe crear el diseñador.</param>
      <param name="rootDesigner">Es <see langword="true" /> para crear un diseñador raíz; es <see langword="false" /> para crear un diseñador normal.</param>
      <returns>Instancia del diseñador solicitado o <see langword="null" /> si no se encuentra ningún diseñador que coincida.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)">
      <summary>Crea una instancia del tipo especificado.</summary>
      <param name="type">Tipo que se va a crear.</param>
      <returns>El objeto recién creado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)">
      <summary>Crea un contenedor adecuado para anidar controles o componentes.</summary>
      <param name="owningComponent">Componente que administra el contenedor anidado.</param>
      <returns>Contenedor anidado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owningComponent" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)">
      <summary>Crea un contenedor adecuado para anidar controles o componentes.</summary>
      <param name="owningComponent">Componente que administra el contenedor anidado.</param>
      <param name="containerName">Nombre adicional para el contenedor anidado.</param>
      <returns>Contenedor anidado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owningComponent" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.Dispose">
      <summary>Libera los recursos que usa <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)">
      <summary>Libera los recursos que usa <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Disposed">
      <summary>Se produce cuando se desecha la superficie de diseño.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.DtelLoading">
      <summary>Obtiene un valor que indica si se está cargando la Lista de errores en tiempo de diseño.</summary>
      <returns>
        <see langword="true" />Si el lista de errores en tiempo de diseño se está cargando; en caso <see langword="false" />contrario,.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.Flush">
      <summary>Serializa los cambios en la superficie de diseño.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Flushed">
      <summary>Se produce cuando se realiza una llamada al método <see cref="M:System.ComponentModel.Design.DesignSurface.Flush" /> de <see cref="T:System.ComponentModel.Design.DesignSurface" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.GetService(System.Type)">
      <summary>Obtiene un servicio del contenedor de servicios.</summary>
      <param name="serviceType">Tipo de servicio que se va a recuperar.</param>
      <returns>Objeto que implementa, o es una clase derivada de, <paramref name="serviceType" /> o <see langword="null" /> si el servicio no existe en el contenedor de servicios.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.IsLoaded">
      <summary>Obtiene un valor que indica si la superficie de diseño está cargada actualmente.</summary>
      <returns>Es <see langword="true" /> si la superficie de diseño está cargada actualmente; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Loaded">
      <summary>Se produce cuando se completa la carga del diseñador.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.LoadErrors">
      <summary>Devuelve una colección de errores de carga o una colección nula.</summary>
      <returns>Objeto <see cref="T:System.Collections.ICollection" /> de errores de carga.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Loading">
      <summary>Se produce cuando el diseñador está a punto de cargarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.LoadedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.DesignSurface.Loading" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.DesignSurface.Unloaded" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.DesignSurface.Unloading" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.DesignSurface.ViewActivated" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.ServiceContainer">
      <summary>Obtiene el contenedor de servicios.</summary>
      <returns>Contenedor de servicios que proporciona todos los servicios a los diseñadores incluidos en la superficie de diseño.</returns>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Unloaded">
      <summary>Se produce cuando un diseñador ha finalizado la descarga.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Unloading">
      <summary>Se produce cuando un diseñador está a punto de descargarse.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.View">
      <summary>Obtiene la vista para el diseñador raíz.</summary>
      <returns>Vista para el diseñador raíz.</returns>
      <exception cref="T:System.InvalidOperationException">La superficie de diseño no se está cargando, el cargador de diseñadores todavía no ha creado un diseñador raíz o la superficie de diseño ha finalizado la carga pero con errores. Puede haber más información disponible en la propiedad <see cref="P:System.Exception.InnerException" />.</exception>
      <exception cref="T:System.NotSupportedException">El diseñador está cargado, pero no ofrece una vista compatible con esta superficie de diseño.</exception>
      <exception cref="T:System.ObjectDisposedException">La interfaz <see cref="T:System.ComponentModel.Design.IDesignerHost" /> asociada al objeto <see cref="T:System.ComponentModel.Design.DesignSurface" /> se ha desechado.</exception>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.ViewActivated">
      <summary>Se produce cuando se ha llamado al método <see cref="M:System.ComponentModel.Design.IDesignerHost.Activate" /> en <see cref="T:System.ComponentModel.Design.IDesignerHost" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ExceptionCollection">
      <summary>Representa la colección de excepciones.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ExceptionCollection.#ctor(System.Collections.ArrayList)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ExceptionCollection" />.</summary>
      <param name="exceptions">Matriz de tipo <see cref="T:System.Exception" /> que contiene los objetos que van a rellenar la colección.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ExceptionCollection.Exceptions">
      <summary>Obtiene la matriz de objetos <see cref="T:System.Exception" /> que representa la colección de excepciones.</summary>
      <returns>Matriz de <see cref="T:System.Exception" /> que representa la colección de excepciones.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ExceptionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Rellena un objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar la colección <see cref="T:System.ComponentModel.Design.ExceptionCollection" />.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se rellena con datos.</param>
      <param name="context">Destino (vea <see cref="T:System.Runtime.Serialization.StreamingContext" />) de esta serialización.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.IMultitargetHelperService">
      <summary>Define los servicios de resolución de nombres de tipo para varios destinos en un entorno en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMultitargetHelperService.GetAssemblyQualifiedName(System.Type)">
      <summary>Resuelve un tipo para la versión de .NET Framework de destino como un nombre calificado con el ensamblado.</summary>
      <param name="type">Tipo que se va a resolver.</param>
      <returns>Propiedad <see cref="P:System.Type.AssemblyQualifiedName" /> para <paramref name="type" /> en la versión de .NET Framework de destino.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.InheritanceService">
      <summary>Proporciona un conjunto de métodos para identificar componentes heredados.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.InheritanceService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>Agrega a <see cref="T:System.ComponentModel.Design.InheritanceService" /> los componentes heredados por el componente especificado.</summary>
      <param name="component">Componente en el cual se buscarán los componentes heredados que se agregarán al contenedor especificado.</param>
      <param name="container">Contenedor al que se agregarán los componentes heredados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.AddInheritedComponents(System.Type,System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>Agrega a <see cref="T:System.ComponentModel.Design.InheritanceService" /> los componentes del tipo especificado heredados por el componente indicado.</summary>
      <param name="type">Tipo base que se buscará.</param>
      <param name="component">Componente en el cual se buscarán los componentes heredados que se agregarán al contenedor especificado.</param>
      <param name="container">Contenedor al que se agregarán los componentes heredados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.InheritanceService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Design.InheritanceService" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>Obtiene el atributo de herencia del componente especificado.</summary>
      <param name="component">Componente del cual se va a recuperar el atributo de herencia.</param>
      <returns>Un objeto <see cref="T:System.ComponentModel.InheritanceAttribute" /> que describe el nivel de herencia del que procede este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.IgnoreInheritedMember(System.Reflection.MemberInfo,System.ComponentModel.IComponent)">
      <summary>Indica si se debe omitir el miembro especificado.</summary>
      <param name="member">Miembro que se va a comprobar. Este miembro es un objeto <see cref="T:System.Reflection.FieldInfo" /> o bien <see cref="T:System.Reflection.MethodInfo" />.</param>
      <param name="component">Instancia del componente a la que se enlaza este miembro.</param>
      <returns>
        <see langword="true" /> si el miembro especificado debe incluirse en el conjunto de componentes heredados; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.LoadedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.LoadedEventArgs.#ctor(System.Boolean,System.Collections.ICollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.LoadedEventArgs" />.</summary>
      <param name="succeeded">Es <see langword="true" /> para indicar que la carga del diseñador se llevó a cabo correctamente; de lo contrario, es <see langword="false" />.</param>
      <param name="errors">Colección de errores producidos durante la carga del diseñador.</param>
    </member>
    <member name="P:System.ComponentModel.Design.LoadedEventArgs.Errors">
      <summary>Obtiene una colección de los errores producidos durante la carga del diseñador.</summary>
      <returns>Colección de errores producidos durante la carga del diseñador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.LoadedEventArgs.HasSucceeded">
      <summary>Obtiene un valor que indica si la carga del diseñador se realizó correctamente.</summary>
      <returns>
        <see langword="true" /> si la carga del diseñador se realizó correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.LoadedEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" /> de la clase <see cref="T:System.ComponentModel.Design.DesignSurface" />. Esta clase no puede heredarse.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.LoadedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ProjectTargetFrameworkAttribute">
      <summary>Especifica la versión de .NET Framework de destino de un proyecto.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ProjectTargetFrameworkAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.ProjectTargetFrameworkAttribute" />.</summary>
      <param name="targetFrameworkMoniker">Versión de .NET Framework de destino del proyecto.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ProjectTargetFrameworkAttribute.TargetFrameworkMoniker">
      <summary>Obtiene la versión de .NET Framework de destino del proyecto.</summary>
      <returns>Versión de .NET Framework de destino del proyecto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService">
      <summary>Serializa un conjunto de componentes en un almacén de serialización.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.#ctor(System.IServiceProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService" /> utilizando el proveedor de servicios determinado para resolver los servicios.</summary>
      <param name="provider">Interfaz <see cref="T:System.IServiceProvider" /> que se va a utilizar para resolver los servicios.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore">
      <summary>Crea un nuevo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns>Un nuevo almacén de serialización.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>Deserializa el almacén determinado para generar una colección de objetos.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> del que se van a deserializar los objetos.</param>
      <returns>Colección de componentes deserializados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no es un tipo de almacén de serialización compatible. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Deserializa el almacén determinado y rellena la interfaz <see cref="T:System.ComponentModel.IContainer" /> determinada con los objetos <see cref="T:System.ComponentModel.IComponent" /> deserializados.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> del que se van a deserializar los objetos.</param>
      <param name="container">Contenedor al que se van a agregar los objetos <see cref="T:System.ComponentModel.IComponent" />.</param>
      <returns>Colección de componentes deserializados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="container" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no es un tipo de almacén de serialización compatible. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>Deserializa el objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> especificado en el contenedor determinado, aplicando opcionalmente los valores de propiedades predeterminados.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> del que se van a deserializar los objetos.</param>
      <param name="container">Contenedor de objetos a los que se van a aplicar los datos.</param>
      <param name="validateRecycledTypes">Es <see langword="true" /> para validar el tipo reciclado; de lo contrario, es <see langword="false" />.</param>
      <param name="applyDefaults">Es <see langword="true" /> para aplicar los valores de propiedad predeterminados; de lo contrario, es <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="container" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> no es un tipo de almacén de serialización compatible. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>Carga un objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> desde la secuencia especificada.</summary>
      <param name="stream">Secuencia a partir de la cual se carga el objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> cargado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="stream" /> admite operaciones de búsqueda, pero su longitud es cero.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializa el objeto especificado en el objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> especificado.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se va a serializar <paramref name="value" />.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializa el objeto dado, teniendo en cuenta los valores de propiedad predeterminados.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se va a serializar <paramref name="value" />.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> o <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa al miembro especificado en el objeto especificado.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se va a serializar <paramref name="member" />.</param>
      <param name="owningObject">Objeto propietario de <paramref name="member" />.</param>
      <param name="member">El miembro especificado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />, <paramref name="owningObject" /> o <paramref name="member" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa al miembro especificado del objeto dado, pero también serializa al miembro si este contiene el valor de propiedad predeterminado.</summary>
      <param name="store">Objeto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> en el que se va a serializar <paramref name="member" />.</param>
      <param name="owningObject">Objeto propietario de <paramref name="member" />.</param>
      <param name="member">El miembro especificado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />, <paramref name="owningObject" /> o <paramref name="member" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está cerrado o <paramref name="store" /> no es un tipo de almacén de serialización admitido. Utilice un almacén que haya devuelto <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializer">
      <summary>Serializa un gráfico de objetos en una serie de instrucciones CodeDOM. Esta clase proporciona una clase base abstracta para un serializador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Deserializa el objeto CodeDOM serializado especificado en un objeto.</summary>
      <param name="manager">Interfaz del administrador de serialización que se utiliza durante el proceso de deserialización.</param>
      <param name="codeObject">Objeto CodeDOM serializado que se va a deserializar.</param>
      <returns>Objeto CodeDOM deserializado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="codeObject" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeObject" /> es un elemento de código no compatible.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.DeserializeStatementToInstance(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatement)">
      <summary>Deserializa una instrucción sencilla.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="statement">Instrucción que se va a deserializar.</param>
      <returns>Instancia de un objeto que es el resultado de la deserialización de <paramref name="statement" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.GetTargetComponentName(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.Type)">
      <summary>Determina a qué grupo de instrucciones debería pertenecer la instrucción dada.</summary>
      <param name="statement">Clase <see cref="T:System.CodeDom.CodeStatement" /> cuyo grupo se va a determinar.</param>
      <param name="expression">Objeto <see cref="T:System.CodeDom.CodeExpression" /> al que se ha reducido <paramref name="statement" />.</param>
      <param name="targetType">
        <see cref="T:System.Type" /> de <paramref name="statement" />.</param>
      <returns>Nombre del componente con el que debería agruparse <paramref name="statement" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializa el objeto especificado en un objeto CodeDOM.</summary>
      <param name="manager">Administrador de serialización que se va a utilizar durante la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <returns>Objeto CodeDOM que representa el objeto que se ha serializado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeAbsolute(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializa el objeto dado, teniendo en cuenta los valores predeterminados.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <returns>Objeto CodeDom que representa <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeMember(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa al miembro especificado en el objeto especificado.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="owningObject">Objeto al que <paramref name="member" /> se adjunta.</param>
      <param name="member">Miembro que se va a serializar.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que representa el estado serializado de <paramref name="member" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="owningObject" /> o <paramref name="member" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="member" /> no es un tipo serializable.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa el miembro especificado, teniendo en cuenta los valores predeterminados.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="owningObject">Objeto al que <paramref name="member" /> se adjunta.</param>
      <param name="member">Miembro que se va a serializar.</param>
      <returns>Objeto CodeDom que representa <paramref name="member" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="owningObject" /> o <paramref name="member" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="member" /> no es un tipo serializable.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeToReferenceExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializa el valor especificado en una expresión CodeDOM.</summary>
      <param name="manager">Administrador de serialización que se va a utilizar durante la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <returns>Valor serializado. Devuelve <see langword="null" /> si no se puede obtener ninguna expresión de referencia para el valor especificado o si el valor no se puede serializar.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializerBase">
      <summary>Proporciona una clase base para las clases <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializeExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.CodeDom.CodeExpression)">
      <summary>Deserializa la expresión especificada en un objeto en memoria.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="name">Nombre del objeto que es el resultado de la expresión. Puede ser <see langword="null" /> si no es necesario asignar un nombre al objeto.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a interpretar.</param>
      <returns>Objeto que es el resultado de la interpretación de <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializeInstance(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type,System.Object[],System.String,System.Boolean)">
      <summary>Devuelve una instancia del tipo especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="type">Objeto <see cref="T:System.Type" /> de la instancia que se va a devolver.</param>
      <param name="parameters">Parámetros que se van a pasar al constructor para <paramref name="type" />.</param>
      <param name="name">Nombre del objeto deserializado.</param>
      <param name="addToContainer">Es <see langword="true" /> para agregar este objeto al contenedor de diseño; de lo contrario, es <see langword="false" />. El objeto debe implementar <see cref="T:System.ComponentModel.IComponent" /> para que esto surta efecto.</param>
      <returns>Instancia de <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializePropertiesFromResources(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Attribute[])">
      <summary>Deserializa las propiedades del objeto especificado del lote de recursos de la referencia cultural invariable.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">Objeto cuyas propiedades se van a deserializar.</param>
      <param name="filter">Matriz de <see cref="T:System.Attribute" /> que filtra las propiedades que se van a deserializar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializeStatement(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatement)">
      <summary>Deserializa una instrucción interpretando y ejecutando una instrucción CodeDOM.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="statement">Objeto <see cref="T:System.CodeDom.CodeStatement" /> que se va a deserializar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetAttributesFromTypeHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type)">
      <summary>Obtiene una colección de atributos, tal y como se define en la versión de .NET Framework de destino del proyecto.</summary>
      <param name="manager">Administrador de serialización.</param>
      <param name="type">Tipo de destino.</param>
      <returns>Colección de atributos, tal y como se define en la versión de .NET Framework de destino del proyecto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetAttributesHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Obtiene una colección de atributos, tal y como se define en la versión de .NET Framework de destino del proyecto.</summary>
      <param name="manager">Administrador de serialización.</param>
      <param name="instance">Objeto del tipo de destino.</param>
      <returns>Colección de atributos, tal y como se define en la versión de .NET Framework de destino del proyecto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetEventsHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Attribute[])">
      <summary>Obtiene una colección de eventos, tal y como se define en la versión de .NET Framework de destino del proyecto.</summary>
      <param name="manager">Administrador de serialización.</param>
      <param name="instance">Objeto del tipo de destino.</param>
      <param name="attributes">Matriz de atributos que se van a pasar a la versión de .NET Framework de destino.</param>
      <returns>Colección de eventos, tal y como se define en la versión de .NET Framework de destino del proyecto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Devuelve una expresión para el objeto especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">Objeto para el que se va a obtener una expresión.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa <paramref name="value" /> o <see langword="null" /> si no hay ninguna expresión existente para <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetPropertiesHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Attribute[])">
      <summary>Obtiene una colección de propiedades, tal y como se define en la versión de .NET Framework de destino del proyecto.</summary>
      <param name="manager">Administrador de serialización.</param>
      <param name="instance">Objeto del tipo de destino.</param>
      <param name="attributes">Matriz de atributos que se van a pasar a la versión de .NET Framework de destino.</param>
      <returns>Colección de propiedades, tal y como se define en la versión de .NET Framework de destino del proyecto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetReflectionTypeFromTypeHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type)">
      <summary>Obtiene un tipo de reflexión generado a partir de los metadatos de un tipo.</summary>
      <param name="manager">Administrador de serialización.</param>
      <param name="type">Tipo cuyos metadatos se van a usar.</param>
      <returns>Tipo de reflexión generado a partir de los metadatos de <paramref name="type" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetReflectionTypeHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Obtiene un tipo de reflexión generado a partir de los metadatos de un objeto.</summary>
      <param name="manager">Administrador de serialización.</param>
      <param name="instance">Objeto cuyos metadatos se van a usar.</param>
      <returns>Tipo de reflexión generado a partir de los metadatos de <paramref name="object" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Busca un serializador para el valor de objeto especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">Objeto que especifica el serializador que se va a recuperar.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> adecuado para <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type)">
      <summary>Busca un serializador para el tipo especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="valueType">Objeto <see cref="T:System.Type" /> que especifica el serializador que se va a recuperar.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> adecuado para <paramref name="valueType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="valueType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetTargetFrameworkProvider(System.IServiceProvider,System.Object)">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que reconoce la versión de .NET Framework de destino, para usarlo en el filtrado de tipos.</summary>
      <param name="provider">Servicio de proveedor de descripciones de tipo.</param>
      <param name="instance">Objeto del que se puede derivar el servicio de proveedor de descripciones de tipo si <paramref name="provider" /> es <see langword="null" />.</param>
      <returns>Proveedor de descripciones de tipo que reconoce .NET Framework.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetUniqueName(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Devuelve un nombre único para el objeto especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">Objeto cuyo nombre se va a recuperar.</param>
      <returns>Nombre único para <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.IsSerialized(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Devuelve un valor que indica si se ha serializado el objeto especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">Objeto que se va a comprobar para determinar si ya se ha serializado.</param>
      <returns>Es <see langword="true" /> si se ha serializado <paramref name="value" />; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.IsSerialized(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Boolean)">
      <summary>Devuelve un valor que indica si se ha serializado el objeto especificado, considerando opcionalmente las expresiones preestablecidas.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">Objeto que se va a comprobar para determinar si ya se ha serializado.</param>
      <param name="honorPreset">Es <see langword="true" /> para incluir las expresiones preestablecidas; en caso contrario, es <see langword="false" />.</param>
      <returns>Es <see langword="true" /> si se ha serializado <paramref name="value" />; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeCreationExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Boolean@)">
      <summary>Devuelve una expresión que representa la creación del objeto especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <param name="isComplete">Es <see langword="true" /> si se ha serializado totalmente <paramref name="value" />; en caso contrario, es <see langword="false" />.</param>
      <returns>Expresión que representa la creación de <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeEvent(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.ComponentModel.EventDescriptor)">
      <summary>Serializa el evento especificado en la colección de instrucciones determinada.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="statements">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> en el que se serializa el evento.</param>
      <param name="value">Objeto al que <paramref name="descriptor" /> está enlazado.</param>
      <param name="descriptor">
        <see cref="T:System.ComponentModel.EventDescriptor" /> que especifica el evento que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" />, <paramref name="statements" /> o <paramref name="descriptor" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException">
        <see cref="T:System.ComponentModel.Design.IEventBindingService" /> no está disponible.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeEvents(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>Serializa los eventos especificados en la colección de instrucciones determinada.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="statements">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> en el que se serializa el evento.</param>
      <param name="value">Objeto en el que se van a serializar los eventos.</param>
      <param name="filter">Matriz de <see cref="T:System.Attribute" /> que filtra los eventos que se van a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> o <paramref name="statements" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeProperties(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>Serializa las propiedades del objeto especificado en la colección de instrucciones determinada.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> en el que se serializan las propiedades.</param>
      <param name="value">Objeto en el que se serializan las propiedades.</param>
      <param name="filter">Matriz de <see cref="T:System.Attribute" /> que filtra las propiedades que se van a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> o <paramref name="statements" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializePropertiesToResources(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>Serializa las propiedades del objeto especificado en el lote de recursos de la referencia cultural invariable.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="statements">No se utiliza.</param>
      <param name="value">Objeto cuyas propiedades se van a serializar.</param>
      <param name="filter">Matriz de <see cref="T:System.Attribute" /> que filtra las propiedades que se van a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> o <paramref name="statements" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeProperty(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.ComponentModel.PropertyDescriptor)">
      <summary>Serializa una propiedad del objeto especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="statements">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> en el que se serializa la propiedad.</param>
      <param name="value">Objeto en el que se serializa la propiedad.</param>
      <param name="propertyToSerialize">Propiedad que se va a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" />, <paramref name="statements" /> o <paramref name="propertyToSerialize" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
      <summary>Serializa el objeto especificado en un lote de recursos utilizando el nombre de recurso especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="resourceName">Nombre del lote de recursos en el que se va a serializar <paramref name="value" />.</param>
      <param name="value">El objeto que se va a serializar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResourceInvariant(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
      <summary>Serializa el objeto especificado en un lote de recursos utilizando el nombre de recurso especificado.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="resourceName">Nombre del lote de recursos en el que se va a serializar <paramref name="value" />.</param>
      <param name="value">El objeto que se va a serializar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializa el objeto determinado en una expresión.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">El objeto que se va a serializar. Puede ser <see langword="null" />.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> si se puede serializar <paramref name="value" />; de lo contrario, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializa el objeto determinado en una expresión.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que contiene <paramref name="value" /> como una expresión serializada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Boolean)">
      <summary>Serializa el objeto determinado en una expresión adecuada para la referencia cultural de todos los idiomas.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <param name="ensureInvariant">Es <see langword="true" /> para serializar en la referencia cultural de todos los idiomas; de lo contrario, es <see langword="false" />.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que contiene <paramref name="value" /> como una expresión serializada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.CodeDom.CodeExpression)">
      <summary>Asocia un objeto a una expresión.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> con el que se va a asociar <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> o <paramref name="expression" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.CodeDom.CodeExpression,System.Boolean)">
      <summary>Asocia un objeto a una expresión, especificando opcionalmente una expresión preestablecida.</summary>
      <param name="manager">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a usar para la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> con el que se va a asociar <paramref name="value" />.</param>
      <param name="isPreset">Es <see langword="true" /> para especificar una expresión preestablecida; de lo contrario, es <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException">
      <summary>Excepción que se produce cuando existe información disponible acerca del número de línea para un error de serialización.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.Exception,System.CodeDom.CodeLinePragma)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> con la excepción y la información de línea especificadas.</summary>
      <param name="ex">Excepción que se va a producir.</param>
      <param name="linePragma">
        <see cref="T:System.CodeDom.CodeLinePragma" /> que indica dónde se produjo la excepción.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.Exception,System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" />.</summary>
      <param name="ex">Excepción que se va a producir.</param>
      <param name="manager">El objeto <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> del que se extrae el contexto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Manager" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> con el contexto y los datos de serialización especificados.</summary>
      <param name="info">Almacena los datos que se estaban utilizado para serializar o deserializar el objeto que el serializador <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> se encontraba serializando o deserializando.</param>
      <param name="context">Describe el origen y el destino de la cadena que generó la excepción, así como un modo de serialización para retener dicho contexto y un contexto adicional definido por el llamador.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.String,System.CodeDom.CodeLinePragma)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> con el mensaje y la información de línea especificadas.</summary>
      <param name="message">Mensaje que describe la excepción.</param>
      <param name="linePragma">
        <see cref="T:System.CodeDom.CodeLinePragma" /> que indica dónde se produjo la excepción.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.String,System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" />.</summary>
      <param name="message">Mensaje que describe la excepción.</param>
      <param name="manager">El objeto <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> del que se extrae el contexto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Manager" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Establece el objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con el nombre del parámetro y la información adicional de la excepción.</summary>
      <param name="info">Almacena los datos que se estaban utilizado para serializar o deserializar el objeto que el serializador <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> se encontraba serializando o deserializando.</param>
      <param name="context">Describe el origen y el destino de la cadena que generó la excepción, así como un modo de serialización para retener dicho contexto y un contexto adicional definido por el llamador.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="info" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.CodeDomSerializerException.LinePragma">
      <summary>Obtiene o establece la información de línea para el error asociado a esta excepción.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" /> que indica la información de línea del error.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer">
      <summary>Serializa colecciones.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.MethodSupportsSerialization(System.Reflection.MethodInfo)">
      <summary>Comprueba si <paramref name="method" /> admite la serialización.</summary>
      <param name="method">Objeto <see cref="T:System.Reflection.MethodInfo" /> en el que se van a comprobar los atributos de serialización.</param>
      <returns>
        <see langword="true" /> si <paramref name="method" /> admite la serialización; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializa la colección especificada en un objeto CodeDOM.</summary>
      <param name="manager">Interfaz <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a utilizar durante la serialización.</param>
      <param name="value">El objeto que se va a serializar.</param>
      <returns>Objeto CodeDOM que representa <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.SerializeCollection(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeExpression,System.Type,System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Serializa la colección determinada.</summary>
      <param name="manager">Interfaz <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> que se va a utilizar durante la serialización.</param>
      <param name="targetExpression">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que hace referencia a la colección</param>
      <param name="targetType">Objeto <see cref="T:System.Type" /> de la colección.</param>
      <param name="originalCollection">Colección que se va a serializar.</param>
      <param name="valuesToSerialize">Valores que se van a serializar.</param>
      <returns>Colección serializada si el proceso de serialización se realiza correctamente; de lo contrario, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="targetType" />, <paramref name="originalCollection" /> o <paramref name="valuesToSerialize" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager">
      <summary>Proporciona una implementación de la interfaz <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> con el proveedor de servicios especificado.</summary>
      <param name="provider">Una clase <see cref="T:System.IServiceProvider" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container">
      <summary>Obtiene o establece el contenedor para este administrador de serialización.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.IContainer" /> a la que el administrador de serialización va a agregar componentes.</returns>
      <exception cref="T:System.InvalidOperationException">El administrador de serialización tiene una sesión de serialización activa.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Crea una instancia de un tipo.</summary>
      <param name="type">Tipo del que se va a crear una instancia.</param>
      <param name="arguments">Parámetros del constructor del tipo. Puede ser <see langword="null" /> o una colección vacía para invocar el constructor sin parámetros.</param>
      <param name="name">Nombre que se va a dar al objeto. Si es <see langword="null" />, no se dará nombre al objeto, salvo que el propio objeto se agregue a un contenedor y el contenedor le dé un nombre.</param>
      <param name="addToContainer">Es <see langword="true" /> para agregar el objeto al contenedor si el objeto implementa <see cref="T:System.ComponentModel.IComponent" />; de lo contrario, es <see langword="false" />.</param>
      <returns>Nueva instancia del tipo especificado por <paramref name="type" />.</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="type" /> no tiene un constructor que adopte los parámetros contenidos en <paramref name="arguments" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession">
      <summary>Crea una nueva sesión de serialización.</summary>
      <returns>Interfaz <see cref="T:System.IDisposable" /> que representa una nueva sesión de serialización.</returns>
      <exception cref="T:System.InvalidOperationException">El administrador de serialización ya está en una sesión. Esta versión de <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> no admite sesiones simultáneas.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors">
      <summary>Obtiene la lista de los errores que se han producido durante la serialización o deserialización.</summary>
      <returns>La lista de los errores que se han producido durante la serialización o deserialización.</returns>
      <exception cref="T:System.InvalidOperationException">El acceso a esta propiedad se realizó fuera de una sesión de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)">
      <summary>Obtiene el tipo que se corresponde con el nombre de tipo especificado.</summary>
      <param name="typeName">Nombre del tipo que se va a obtener.</param>
      <returns>El tipo especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Obtiene el serializador para el tipo de objeto especificado.</summary>
      <param name="objectType">Tipo de objeto para el que se va a recuperar el serializador.</param>
      <param name="serializerType">Tipo de serializador que se va a recuperar.</param>
      <returns>Serializador para <paramref name="objectType" /> o <see langword="null" /> si no se ha encontrado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> o <paramref name="serializerType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)">
      <summary>Obtiene el servicio solicitado.</summary>
      <param name="serviceType">Tipo de servicio que se va a recuperar.</param>
      <returns>Servicio solicitado o <see langword="null" /> si no se puede resolver el servicio.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)">
      <summary>Obtiene el tipo solicitado.</summary>
      <param name="typeName">Nombre del tipo que se va a recuperar.</param>
      <returns>Tipo solicitado o <see langword="null" /> si no se puede resolver el tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames">
      <summary>Obtiene o establece un valor que indica si el método <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> debe comprobar la presencia del nombre especificado en el contenedor.</summary>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> va a pasar el nombre de componente determinado; <see langword="false" /> si <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> va a comprobar la presencia del nombre determinado en el contenedor. De manera predeterminada, es <see langword="true" />.</returns>
      <exception cref="T:System.InvalidOperationException">El cambio de esta propiedad se realizó desde una sesión de serialización.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider">
      <summary>Obtiene el objeto que se debe utilizar para proporcionar propiedades a la propiedad <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> del administrador de serialización.</summary>
      <returns>Objeto que se debe utilizar para proporcionar propiedades a la propiedad <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> del administrador de serialización.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances">
      <summary>Obtiene o establece un valor que indica si <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> va a crear siempre una nueva instancia de un tipo.</summary>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> va a devolver la instancia existente; <see langword="false" /> si <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> va a crear una nueva instancia de un tipo. De manera predeterminada, es <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">El administrador de serialización tiene una sesión de serialización activa.</exception>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated">
      <summary>Tiene lugar cuando se crea una sesión.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed">
      <summary>Se produce cuando se desecha una sesión.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Agrega un proveedor de serialización personalizado al administrador de serialización.</summary>
      <param name="provider">Proveedor de serialización que se va a agregar.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context">
      <summary>Obtiene la pila de contexto para esta sesión de serialización.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> que almacena datos.</returns>
      <exception cref="T:System.InvalidOperationException">El acceso a esta propiedad se realizó fuera de una sesión de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Implementa el método <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />.</summary>
      <param name="type">Tipo de datos que se va crear.</param>
      <param name="arguments">Argumentos que se van a pasar al constructor para este tipo.</param>
      <param name="name">El nombre del objeto. Se puede utilizar este nombre para tener acceso al objeto más adelante a través de <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Si se pasa <see langword="null" />, el objeto sigue creado pero no se puede tener acceso a él mediante el nombre.</param>
      <param name="addToContainer">Es <see langword="true" /> para agregar este objeto al contenedor de diseño. El objeto debe implementar <see cref="T:System.ComponentModel.IComponent" /> para que esto surta efecto.</param>
      <returns>Instancia del objeto recién creada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)">
      <summary>Recupera una instancia de un objeto creado con el nombre especificado.</summary>
      <param name="name">Nombre del objeto que se va a recuperar.</param>
      <returns>Instancia del objeto con el nombre dado, o <see langword="null" /> si no se encuentra ningún objeto por ese nombre.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">El acceso a esta propiedad se realizó fuera de una sesión de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)">
      <summary>Recupera un nombre para el objeto especificado.</summary>
      <param name="value">Objeto para el que se va a recuperar el nombre.</param>
      <returns>Nombre del objeto, o <see langword="null" /> si el objeto no tiene nombre.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">El acceso a esta propiedad se realizó fuera de una sesión de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)">
      <summary>Obtiene un serializador del tipo solicitado para el tipo de objeto especificado.</summary>
      <param name="objectType">Tipo del objeto para el que se obtiene el serializador.</param>
      <param name="serializerType">Tipo del serializador que se va a recuperar.</param>
      <returns>Instancia del serializador solicitado, o <see langword="null" /> si no se encuentra ningún serializador adecuado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)">
      <summary>Obtiene un tipo del nombre especificado.</summary>
      <param name="typeName">Nombre completo del tipo que se va a cargar.</param>
      <returns>Instancia del tipo, o <see langword="null" /> si no se puede cargar el tipo.</returns>
      <exception cref="T:System.InvalidOperationException">El acceso a esta propiedad se realizó fuera de una sesión de serialización.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties">
      <summary>Implementa la propiedad <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contiene las propiedades que se van a serializar.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Quita un proveedor de serialización agregado anteriormente.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> que se va a quitar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)">
      <summary>Se utiliza para crear un informe de error recuperable en la serialización.</summary>
      <param name="errorInformation">Objeto que contiene la información de error, normalmente de tipo <see cref="T:System.String" /> o <see cref="T:System.Exception" />.</param>
      <exception cref="T:System.InvalidOperationException">El acceso a esta propiedad se realizó fuera de una sesión de serialización.</exception>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ResolveName">
      <summary>Tiene lugar cuando <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" /> no puede encontrar el nombre especificado en la tabla de nombres del administrador de serialización.</summary>
      <exception cref="T:System.InvalidOperationException">El administrador de serialización no tiene una sesión de serialización activa.</exception>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SerializationComplete">
      <summary>Se produce al finalizar la serialización.</summary>
      <exception cref="T:System.InvalidOperationException">El administrador de serialización no tiene una sesión de serialización activa.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)">
      <summary>Establece el nombre para el objeto especificado.</summary>
      <param name="instance">Objeto para el que se va a establecer el nombre.</param>
      <param name="name">Objeto <see cref="T:System.String" /> que se ha utilizado como nombre del objeto.</param>
      <exception cref="T:System.ArgumentNullException">Uno o ambos parámetros son <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El objeto especificado por la instancia ya tiene un nombre, o bien otro objeto con nombre ya utiliza <paramref name="name" />.</exception>
      <exception cref="T:System.InvalidOperationException">El acceso a esta propiedad se realizó fuera de una sesión de serialización.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.IServiceProvider.GetService(System.Type)" />.</summary>
      <param name="serviceType">Objeto que especifica el tipo de objeto de servicio que se va a obtener.</param>
      <returns>Objeto de servicio del tipo <paramref name="serviceType" />.  
O bien 
 <see langword="null" /> si no hay ningún objeto de servicio del tipo <paramref name="serviceType" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes">
      <summary>Obtiene o establece un valor que indica si el método <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> va a comprobar que los nombres coincidentes hagan referencia al mismo tipo.</summary>
      <returns>
        <see langword="true" /> si <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> comprueba los tipos; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
      <exception cref="T:System.InvalidOperationException">El administrador de serialización tiene una sesión de serialización activa.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ExpressionContext">
      <summary>Proporciona un medio para pasar el estado de contexto entre los serializadores. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> con la expresión y el propietario especificados.</summary>
      <param name="expression">La expresión de código especificada.</param>
      <param name="expressionType">El tipo de expresión de código especificada.</param>
      <param name="owner">El propietario de la expresión de código especificada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />, <paramref name="expressionType" /> o <paramref name="owner" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> con un valor actual.</summary>
      <param name="expression">La expresión de código especificada.</param>
      <param name="expressionType">El tipo de expresión de código especificada.</param>
      <param name="owner">El propietario de la expresión de código especificada.</param>
      <param name="presetValue">El valor preestablecido de la expresión de código especificada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />, <paramref name="expressionType" /> o <paramref name="owner" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression">
      <summary>Obtiene la expresión que representa este contexto.</summary>
      <returns>Expresión que representa este contexto.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType">
      <summary>Obtiene el objeto <see cref="T:System.Type" /> de la expresión.</summary>
      <returns>Objeto <see cref="T:System.Type" /> de la expresión.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner">
      <summary>Obtiene el objeto propietario de esta expresión.</summary>
      <returns>Objeto propietario de esta expresión.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue">
      <summary>Obtiene el valor preestablecido de una expresión.</summary>
      <returns>Valor preestablecido de esta expresión o <see langword="null" /> si no hay ninguno asignado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer">
      <summary>Proporciona la clase base para serializar un tipo primitivo de reflexión dentro del gráfico de objetos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor,System.CodeDom.CodeStatementCollection)">
      <summary>Serializa el descriptor de miembro especificado con el valor determinado en una colección de instrucciones.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="value">Objeto al que está enlazado el miembro.</param>
      <param name="descriptor">Descriptor del miembro que se va a serializar.</param>
      <param name="statements">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> en el que se serializa <paramref name="descriptor" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer.ShouldSerialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Determina si se debe serializar el miembro especificado.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="value">Objeto al que está enlazado el miembro.</param>
      <param name="descriptor">Descriptor del miembro que se va a serializar.</param>
      <returns>
        <see langword="true" /> si debe serializarse el miembro que describe <paramref name="descriptor" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection">
      <summary>Contiene una tabla de instrucciones que proporciona la clase <see cref="T:System.ComponentModel.Design.Serialization.StatementContext" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.ContainsKey(System.Object)">
      <summary>Determina si la tabla contiene el propietario de instrucciones determinado.</summary>
      <param name="statementOwner">Propietario de la colección de instrucciones.</param>
      <returns>
        <see langword="true" /> si <paramref name="statementOwner" /> está en la tabla; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statementOwner" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.GetEnumerator">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.IEnumerator" /> para la interfaz <see cref="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.IEnumerator" /> para la colección <see cref="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ObjectStatementCollection.Item(System.Object)">
      <summary>Obtiene la colección de instrucciones para el propietario determinado.</summary>
      <param name="statementOwner">Propietario de la colección de instrucciones.</param>
      <returns>Colección de instrucciones para <paramref name="statementOwner" /> o <see langword="null" /> si <paramref name="statementOwner" /> no está en la tabla.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statementOwner" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.Populate(System.Collections.ICollection)">
      <summary>Rellena la tabla de instrucciones con una colección de propietarios de instrucciones.</summary>
      <param name="statementOwners">Colección de propietarios de instrucciones que se va a agregar a la tabla.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statementOwner" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.Populate(System.Object)">
      <summary>Rellena la tabla de instrucciones con un propietario de instrucciones.</summary>
      <param name="owner">Propietario de instrucciones que se va a agregar a la tabla.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootContext">
      <summary>Un objeto <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> agrega un contexto raíz para proporcionar una definición del objeto raíz. Esta clase no se puede heredar.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootContext.#ctor(System.CodeDom.CodeExpression,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.RootContext" />.</summary>
      <param name="expression">Expresión que representa el objeto raíz en el gráfico de objetos.</param>
      <param name="value">Objeto raíz del gráfico de objetos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootContext.Expression">
      <summary>Obtiene la expresión que representa el objeto raíz en el gráfico de objetos.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa el objeto raíz en el gráfico de objetos.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootContext.Value">
      <summary>Obtiene el objeto raíz del gráfico de objetos.</summary>
      <returns>Objeto raíz del gráfico de objetos.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext">
      <summary>Especifica que los serializadores deben controlar los valores predeterminados. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext" /> con la opción de poder establecer un enlace con un miembro concreto.</summary>
      <param name="member">Miembro al que está enlazado este contexto. Puede ser <see langword="null" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.Member">
      <summary>Obtiene el miembro al que está enlazado este contexto.</summary>
      <returns>Miembro al que está enlazado este contexto o <see langword="null" /> si el contexto se enlaza a todos los miembros de un objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.ShouldSerialize(System.ComponentModel.MemberDescriptor)">
      <summary>Obtiene un valor que indica si el miembro determinado se debe serializar en este contexto.</summary>
      <param name="member">Miembro que se va a examinar para la serialización.</param>
      <returns>
        <see langword="true" /> si el miembro determinado se debe serializar en este contexto; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.StatementContext">
      <summary>Proporciona una ubicación en la que se pueden serializar instrucciones. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.StatementContext.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.StatementContext" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.StatementContext.StatementCollection">
      <summary>Obtiene una colección de instrucciones que proporciona el contexto de instrucciones.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection" /> que contiene las instrucciones que proporciona el contexto de instrucciones.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
      <summary>Serializa un objeto en un nuevo tipo.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>Deserializa la declaración de tipos determinada.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="declaration">Declaración de tipos que se va a utilizar para la serialización.</param>
      <returns>Objeto raíz.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="typeDecl" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
      <summary>Devuelve el método en el que se almacenan las instrucciones usadas para serializar un miembro.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="declaration">Declaración de tipos que se va a usar para la serialización.</param>
      <param name="value">Valor que se va a usar para la serialización.</param>
      <returns>Método usado para emitir todo el código de inicialización del miembro determinado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="typeDecl" /> o <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>Devuelve una matriz de los métodos que se van a interpretar durante la deserialización.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="declaration">Declaración de tipos que se va a usar para la serialización.</param>
      <returns>Matriz de <see cref="T:System.CodeDom.CodeMemberMethod" /> de los métodos que se van a interpretar durante la deserialización.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="typeDecl" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
      <summary>Serializa la raíz del objeto creando una nueva declaración de tipos que define la raíz.</summary>
      <param name="manager">El administrador de serialización que se va a usar para la serialización.</param>
      <param name="root">El objeto que se va a serializar.</param>
      <param name="members">Colección opcional de miembros. Puede ser <see langword="null" /> o estar vacía.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que define el objeto raíz.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="root" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.UndoEngine">
      <summary>Especifica la funcionalidad genérica para deshacer/rehacer en tiempo de diseño.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.UndoEngine" />.</summary>
      <param name="provider">Proveedor de servicios primario.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se puede encontrar un servicio necesario. Vea los servicios necesarios en <see cref="T:System.ComponentModel.Design.UndoEngine" />. Si ha quitado este servicio, asegúrese de proporcionar uno de reemplazo.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>Agrega un objeto <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> a la pila para deshacer.</summary>
      <param name="unit">Unidad para deshacer que se va a agregar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)">
      <summary>Crea un nuevo <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</summary>
      <param name="name">Nombre de la unidad que se va a crear.</param>
      <param name="primary">Es <see langword="true" /> para crear la primera de una serie de unidades anidadas; es <see langword="false" /> para crear unidades anidadas subsiguientes.</param>
      <returns>Un nuevo <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> con un nombre especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>Descarta un objeto <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</summary>
      <param name="unit">Unidad que se va a descartar.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.ComponentModel.Design.UndoEngine" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.ComponentModel.Design.UndoEngine" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.Enabled">
      <summary>Habilita o deshabilita el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" />.</summary>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> está habilitado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)">
      <summary>Obtiene el servicio solicitado.</summary>
      <param name="serviceType">Tipo de servicio que se va a recuperar.</param>
      <returns>Servicio solicitado, si se encuentra.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">El parámetro <paramref name="serviceType" /> que es necesario pero no se encuentra. Si ha quitado este servicio, asegúrese de proporcionar uno de reemplazo.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.GetService(System.Type)">
      <summary>Obtiene el servicio solicitado.</summary>
      <param name="serviceType">Tipo de servicio que se va a recuperar.</param>
      <returns>Servicio solicitado o <see langword="null" /> si no se encuentra el servicio solicitado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.UndoEngine.Undoing" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)">
      <summary>Genera el evento <see cref="E:System.ComponentModel.Design.UndoEngine.Undone" />.</summary>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="E:System.ComponentModel.Design.UndoEngine.Undoing">
      <summary>Se produce inmediatamente antes de que se realice una acción de deshacer.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoInProgress">
      <summary>Indica si está en curso una acción de deshacer.</summary>
      <returns>
        <see langword="true" /> si está en curso una acción de deshacer; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.UndoEngine.Undone">
      <summary>Se produce inmediatamente después de que se realice una acción de deshacer.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.UndoEngine.UndoUnit">
      <summary>Encapsula una unidad de trabajo que cualquier usuario puede deshacer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.#ctor(System.ComponentModel.Design.UndoEngine,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</summary>
      <param name="engine">Motor para deshacer propietario de esta unidad para deshacer.</param>
      <param name="name">Nombre de esta unidad para deshacer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="engine" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.Close">
      <summary>Recibe una llamada del motor para deshacer con el fin de cerrar esta unidad.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentAdded(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>Recibe una llamada desde el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> en respuesta a un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentAdding(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>Recibe una llamada desde el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> en respuesta a un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentChanged(System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>Recibe una llamada desde el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> en respuesta a un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentChanging(System.ComponentModel.Design.ComponentChangingEventArgs)">
      <summary>Recibe una llamada desde el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> en respuesta a un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentRemoved(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>Recibe una llamada desde el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> en respuesta a un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentRemoving(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>Recibe una llamada desde el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> en respuesta a un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentRename(System.ComponentModel.Design.ComponentRenameEventArgs)">
      <summary>Recibe una llamada desde el objeto <see cref="T:System.ComponentModel.Design.UndoEngine" /> en respuesta a un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
      <param name="e">Objeto <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.GetService(System.Type)">
      <summary>Obtiene una instancia del servicio solicitado.</summary>
      <param name="serviceType">Tipo de servicio que se va a recuperar.</param>
      <returns>Instancia del servicio especificado o <see langword="null" /> si no se puede resolver dicho servicio.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoUnit.IsEmpty">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> no contiene ningún evento.</summary>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> no contiene ningún evento; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoUnit.Name">
      <summary>Obtiene el nombre de <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</summary>
      <returns>Nombre del objeto <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ToString">
      <summary>Devuelve un objeto <see cref="T:System.String" /> que representa el nombre actual de la unidad.</summary>
      <returns>
        <see cref="T:System.String" /> que representa el nombre actual de la unidad.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.Undo">
      <summary>Lleva a cabo una acción de deshacer o rehacer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoCore">
      <summary>
        <see cref="M:System.ComponentModel.Design.UndoEngine.UndoUnit.Undo" /> llama a este método para llevar a cabo una acción de deshacer.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoEngine">
      <summary>Obtiene el objeto <see cref="P:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoEngine" /> primario.</summary>
      <returns>Propiedad <see cref="P:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoEngine" /> a la que está asociado el objeto <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />.</returns>
    </member>
    <member name="T:System.Drawing.Design.IToolboxItemProvider">
      <summary>Expone una colección de elementos del cuadro de herramientas.</summary>
    </member>
    <member name="P:System.Drawing.Design.IToolboxItemProvider.Items">
      <summary>Obtiene una colección de objetos <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>Una colección de objetos <see cref="T:System.Drawing.Design.ToolboxItem" />.</returns>
    </member>
    <member name="T:System.Drawing.Design.IToolboxService">
      <summary>Proporciona métodos y propiedades para administrar y consultar el cuadro de herramientas en el entorno de desarrollo.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String)">
      <summary>Agrega un nuevo creador de elementos de cuadro de herramientas para el formato de datos especificado.</summary>
      <param name="creator">
        <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" /> que puede crear un componente cuando se invoca el elemento del cuadro de herramientas.</param>
      <param name="format">Formato de datos que el creador controla.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>Agrega un creador de elementos de cuadro de herramientas para un formato de datos y un host de diseñador especificados.</summary>
      <param name="creator">
        <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" /> que puede crear un componente cuando se invoca el elemento del cuadro de herramientas.</param>
      <param name="format">Formato de datos que el creador controla.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que representa el host del diseñador que se va a asociar al creador.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.ComponentModel.Design.IDesignerHost)">
      <summary>Agrega el elemento del cuadro de herramientas vinculado al proyecto especificado al cuadro de herramientas.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> vinculado que se va a agregar al cuadro de herramientas.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> para el documento de diseño actual.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>Agregar el elemento del cuadro de herramientas vinculado al proyecto especificado al cuadro de herramientas en la categoría especificada.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> vinculado que se va a agregar al cuadro de herramientas.</param>
      <param name="category">Categoría de elemento de cuadro de herramientas a la que se va agregar el elemento.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> para el documento de diseño actual.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>Agrega el elemento especificado al cuadro de herramientas.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a agregar al cuadro de herramientas.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
      <summary>Agrega el elemento del cuadro de herramientas especificado al cuadro de herramientas en la categoría especificada.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a agregar al cuadro de herramientas.</param>
      <param name="category">Categoría de elementos del cuadro de herramientas a la que se va agregar <see cref="T:System.Drawing.Design.ToolboxItem" />.</param>
    </member>
    <member name="P:System.Drawing.Design.IToolboxService.CategoryNames">
      <summary>Obtiene los nombres de todas las categorías de herramientas que actualmente se encuentran en el cuadro de herramientas.</summary>
      <returns>
        <see cref="T:System.Drawing.Design.CategoryNameCollection" /> que contiene las categorías de herramientas.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.DeserializeToolboxItem(System.Object)">
      <summary>Obtiene un elemento del cuadro de herramientas a partir del objeto especificado que representa un elemento del cuadro de herramientas en forma serializada.</summary>
      <param name="serializedObject">Objeto que contiene el <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a recuperar.</param>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItem" /> creado a partir del objeto serializado.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.DeserializeToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>Obtiene un elemento del cuadro de herramientas a partir del objeto especificado que representa un elemento del cuadro de herramientas en forma serializada, utilizando el host del diseñador especificado.</summary>
      <param name="serializedObject">Objeto que contiene el <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a recuperar.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que se va a asociar con <see cref="T:System.Drawing.Design.ToolboxItem" />.</param>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItem" /> creado a partir de la deserialización.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetSelectedToolboxItem">
      <summary>Obtiene el elemento del cuadro de herramientas actualmente seleccionado.</summary>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItem" /> actualmente seleccionado, o <see langword="null" /> si no se ha seleccionado ningún elemento del cuadro de herramientas.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetSelectedToolboxItem(System.ComponentModel.Design.IDesignerHost)">
      <summary>Obtiene el elemento del cuadro de herramientas actualmente seleccionado si está disponible para todos los diseñadores o si admite el diseñador especificado.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> al que debe estar asociada a la herramienta seleccionada para que pueda devolverse.</param>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItem" /> actualmente seleccionado, o <see langword="null" /> si no hay ningún elemento del cuadro de herramientas actualmente seleccionado.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems">
      <summary>Obtiene la colección completa de elementos del cuadro de herramientas.</summary>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> que contiene los elementos del cuadro de herramientas actual.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems(System.ComponentModel.Design.IDesignerHost)">
      <summary>Obtiene la colección de elementos del cuadro de herramientas que están asociados al host del diseñador especificado.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que está asociado a los elementos del cuadro de herramientas que se van a recuperar.</param>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> que contiene los elementos del cuadro de herramientas actual que están asociados al host del diseñador especificado.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems(System.String)">
      <summary>Obtiene una colección de elementos del cuadro de herramientas que coinciden con la categoría especificada.</summary>
      <param name="category">Categoría de elementos de cuadro de herramientas a partir de la que se van a recuperar todos los elementos del cuadro de herramientas.</param>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> que contiene los elementos del cuadro de herramientas actual que están asociados a la categoría especificada.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems(System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>Obtiene la colección de elementos del cuadro de herramientas que están asociados al host del diseñador y la categoría especificados.</summary>
      <param name="category">Categoría de elementos de cuadro de herramientas a partir de la que se van a recuperar los elementos del cuadro de herramientas.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que está asociado a los elementos del cuadro de herramientas que se van a recuperar.</param>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> que contiene los elementos del cuadro de herramientas actuales que están asociados al host del diseñador y la categoría especificados.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsSupported(System.Object,System.Collections.ICollection)">
      <summary>Obtiene un valor que indica si el objeto especificado que representa un elemento del cuadro de herramientas serializado coincide con los atributos especificados.</summary>
      <param name="serializedObject">Objeto que contiene el <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a recuperar.</param>
      <param name="filterAttributes">
        <see cref="T:System.Collections.ICollection" /> que contiene los atributos para los que se va a comprobar el objeto serializado.</param>
      <returns>Es <see langword="true" /> si el objeto coincide con los atributos especificados; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsSupported(System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>Obtiene un valor que indica si el objeto especificado que representa un elemento del cuadro de herramientas serializado puede utilizarse mediante el host del diseñador especificado.</summary>
      <param name="serializedObject">Objeto que contiene el <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a recuperar.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> para el que se va a realizar una comprobación de compatibilidad con <see cref="T:System.Drawing.Design.ToolboxItem" />.</param>
      <returns>Es <see langword="true" /> si el objeto especificado es compatible con el host del diseñador especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsToolboxItem(System.Object)">
      <summary>Obtiene un valor que indica si el objeto especificado es un elemento del cuadro de herramientas serializado.</summary>
      <param name="serializedObject">Objeto que se va a inspeccionar.</param>
      <returns>Es <see langword="true" /> si el objeto contiene un objeto de elemento del cuadro de herramientas; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>Obtiene un valor que indica si el objeto especificado es un elemento del cuadro de herramientas serializado, utilizando el host del diseñador especificado.</summary>
      <param name="serializedObject">Objeto que se va a inspeccionar.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que está realizando esta solicitud.</param>
      <returns>Es <see langword="true" /> si el objeto contiene un objeto de elemento del cuadro de herramientas; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.Refresh">
      <summary>Actualiza el estado de los elementos del cuadro de herramientas.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveCreator(System.String)">
      <summary>Quita un creador de elementos previamente agregado con el formato de datos especificado del cuadro de herramientas.</summary>
      <param name="format">Formato de datos del creador que se va quitar.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveCreator(System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>Quita del cuadro de herramientas un creador previamente agregado que está asociado al formato de datos y al host de diseñador especificados.</summary>
      <param name="format">Formato de datos del creador que se va quitar.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que está asociado al creador que se va a quitar.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>Quita el elemento especificado del cuadro de herramientas.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a quitar del cuadro de herramientas.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
      <summary>Quita el elemento especificado del cuadro de herramientas.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a quitar del cuadro de herramientas.</param>
      <param name="category">Categoría de elementos del cuadro de herramientas de la que se va a quitar <see cref="T:System.Drawing.Design.ToolboxItem" />.</param>
    </member>
    <member name="P:System.Drawing.Design.IToolboxService.SelectedCategory">
      <summary>Obtiene o establece el nombre de la categoría de herramientas actualmente seleccionada desde el cuadro de herramientas.</summary>
      <returns>Nombre de la categoría actualmente seleccionada.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SelectedToolboxItemUsed">
      <summary>Notifica al servicio del cuadro de herramientas que se ha utilizado la herramienta seleccionada.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SerializeToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>Obtiene el objeto serializable que representa el elemento especificado del cuadro de herramientas.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a serializar.</param>
      <returns>Objeto que representa el <see cref="T:System.Drawing.Design.ToolboxItem" /> especificado.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SetCursor">
      <summary>Establece el cursor de la aplicación actual en un cursor que representa la herramienta actualmente seleccionada.</summary>
      <returns>Es <see langword="true" /> si el cursor viene establecido por la herramienta actualmente seleccionada, es <see langword="false" /> si no hay ninguna herramienta seleccionada y el cursor está establecido en el cursor estándar de Windows.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SetSelectedToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>Selecciona el elemento especificado del cuadro de herramientas.</summary>
      <param name="toolboxItem">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a seleccionar.</param>
    </member>
    <member name="T:System.Drawing.Design.IToolboxUser">
      <summary>Define una interfaz para establecer el elemento del cuadro de herramientas seleccionado actualmente e indica si el diseñador admite un elemento del cuadro de herramientas concreto.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>Obtiene un valor que indica si la herramienta especificada es compatible con el diseñador actual.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> para el que se va a realizar una comprobación de compatibilidad con el cuadro de herramientas.</param>
      <returns>
        <see langword="true" /> si la herramienta es compatible con el cuadro de herramientas y puede habilitarse; <see langword="false" /> si el diseñador de documentos no sabe cómo utilizar la herramienta.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxUser.ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>Selecciona la herramienta especificada.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a seleccionar.</param>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" /> que se produce cuando se agregan componentes al cuadro de herramientas.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxComponentsCreatedEventArgs.#ctor(System.ComponentModel.IComponent[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" />.</summary>
      <param name="components">Componentes que se van a incluir en el cuadro de herramientas.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxComponentsCreatedEventArgs.Components">
      <summary>Obtiene o establece una matriz que contiene los componentes que se van a agregar al cuadro de herramientas.</summary>
      <returns>Una matriz de tipo <see cref="T:System.ComponentModel.IComponent" /> que indica los componentes que se van a agregar al cuadro de herramientas.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatedEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">
        <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" /> que se produce cuando se agregan componentes al cuadro de herramientas.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxComponentsCreatingEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" />.</summary>
      <param name="host">Host del diseñador que realiza la solicitud.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxComponentsCreatingEventArgs.DesignerHost">
      <summary>Obtiene o establece una instancia de <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que genera la solicitud para crear componentes del cuadro de herramientas.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que genera la solicitud para crear componentes del cuadro de herramientas, o <see langword="null" /> si no se ha proporcionado ningún host del diseñador para el elemento del cuadro de herramientas.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatingEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">
        <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItem">
      <summary>Proporciona una implementación base de un elemento del cuadro de herramientas.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Design.ToolboxItem" /> que crea el tipo de componente especificado.</summary>
      <param name="toolType">Tipo de <see cref="T:System.ComponentModel.IComponent" /> que creará el elemento del cuadro de herramientas.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> se bloqueó.</exception>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.AssemblyName">
      <summary>Obtiene o establece el nombre del ensamblado que contiene los tipos que va a crear el elemento de cuadro de herramientas.</summary>
      <returns>
        <see cref="T:System.Reflection.AssemblyName" /> que indica el ensamblado que contiene los tipos que se van a crear.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Bitmap">
      <summary>Obtiene o establece un mapa de bits que representa el elemento en el cuadro de herramientas.</summary>
      <returns>
        <see cref="T:System.Drawing.Bitmap" /> que representa el elemento en el cuadro de herramientas.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CheckUnlocked">
      <summary>Produce una excepción si el elemento de cuadro de herramientas se encuentra actualmente bloqueado.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> está bloqueado.</exception>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Company">
      <summary>Obtiene o establece el nombre de la compañía que se va a mostrar para este elemento <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>Una <see cref="T:System.String" /> que especifica la compañía de este elemento <see cref="T:System.Drawing.Design.ToolboxItem" />.</returns>
    </member>
    <member name="E:System.Drawing.Design.ToolboxItem.ComponentsCreated">
      <summary>Se produce inmediatamente después de la creación de componentes.</summary>
    </member>
    <member name="E:System.Drawing.Design.ToolboxItem.ComponentsCreating">
      <summary>Se produce inmediatamente antes de la creación de componentes.</summary>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.ComponentType">
      <summary>Obtiene el tipo de componente de este <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>Una <see cref="T:System.String" /> que especifica el tipo de componente de este <see cref="T:System.Drawing.Design.ToolboxItem" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponents">
      <summary>Crea los componentes que se deben crear según la configuración del elemento de cuadro de herramientas.</summary>
      <returns>Matriz de objetos <see cref="T:System.ComponentModel.IComponent" /> creados.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponents(System.ComponentModel.Design.IDesignerHost)">
      <summary>Crea los componentes que se deben crear según la configuración del elemento de cuadro de herramientas, utilizando el host del diseñador especificado.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que se utiliza al crear los componentes.</param>
      <returns>Matriz de objetos <see cref="T:System.ComponentModel.IComponent" /> creados.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponents(System.ComponentModel.Design.IDesignerHost,System.Collections.IDictionary)">
      <summary>Crea los componentes que se deben crear según la configuración del elemento del cuadro de herramientas, utilizando el host del diseñador especificado y los valores predeterminados.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que se utiliza al crear los componentes.</param>
      <param name="defaultValues">Diccionario de pares de nombre/valor de propiedad de los valores predeterminados con los que se va a inicializar el componente.</param>
      <returns>Matriz de objetos <see cref="T:System.ComponentModel.IComponent" /> creados.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost)">
      <summary>Crea un componente o una matriz de componentes cuando se invoca al elemento de cuadro de herramientas.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que hospeda el elemento del cuadro de herramientas.</param>
      <returns>Matriz de objetos <see cref="T:System.ComponentModel.IComponent" /> creados.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost,System.Collections.IDictionary)">
      <summary>Crea una matriz de componentes cuando se invoca el elemento del cuadro de herramientas.</summary>
      <param name="host">Host del diseñador que se va a utilizar al crear los componentes.</param>
      <param name="defaultValues">Diccionario de pares de nombre/valor de propiedad de los valores predeterminados con los que se va a inicializar el componente.</param>
      <returns>Matriz de objetos <see cref="T:System.ComponentModel.IComponent" /> creados.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.DependentAssemblies">
      <summary>Obtiene o establece <see cref="T:System.Reflection.AssemblyName" /> del elemento del cuadro de herramientas.</summary>
      <returns>Matriz de objetos <see cref="T:System.Reflection.AssemblyName" />.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Description">
      <summary>Obtiene o establece la descripción de este <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>Una <see cref="T:System.String" /> que especifica la descripción de este <see cref="T:System.Drawing.Design.ToolboxItem" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Deserialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Carga el estado del elemento de cuadro de herramientas a partir del objeto de información de serialización especificado.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> de donde se va a cargar.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que indica las características de la secuencia.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.DisplayName">
      <summary>Obtiene o establece el nombre en pantalla de este elemento del cuadro de herramientas.</summary>
      <returns>Nombre para mostrar del elemento de cuadro de herramientas.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Equals(System.Object)">
      <summary>Determina si dos instancias de <see cref="T:System.Drawing.Design.ToolboxItem" /> son iguales.</summary>
      <param name="obj">Objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a comparar con el objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> actual.</param>
      <returns>
        <see langword="true" /> si el objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> especificado es igual al objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> actual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Filter">
      <summary>Obtiene o establece el filtro que determina si el elemento del cuadro de herramientas se puede utilizar en un componente de destino.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> de objetos <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.FilterPropertyValue(System.String,System.Object)">
      <summary>Filtra un valor de propiedad antes de devolverlo.</summary>
      <param name="propertyName">Nombre de la propiedad que se va a filtrar.</param>
      <param name="value">Valor con el que se va a filtrar la propiedad.</param>
      <returns>Un valor de propiedad filtrado.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash para el objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> actual.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.GetType(System.ComponentModel.Design.IDesignerHost)">
      <summary>Permite el acceso al tipo asociado al elemento del cuadro de herramientas.</summary>
      <param name="host">Host del diseñador que se utiliza para consultar <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />.</param>
      <returns>El tipo asociado al elemento del cuadro de herramientas.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.GetType(System.ComponentModel.Design.IDesignerHost,System.Reflection.AssemblyName,System.String,System.Boolean)">
      <summary>Crea una instancia del tipo especificado, utilizando opcionalmente un host de diseñador y un nombre de ensamblado especificados.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> del documento actual. Puede ser <see langword="null" />.</param>
      <param name="assemblyName">
        <see cref="T:System.Reflection.AssemblyName" /> que indica el ensamblado que contiene el tipo que se va a cargar. Puede ser <see langword="null" />.</param>
      <param name="typeName">Nombre del tipo del que se va a crear una instancia.</param>
      <param name="reference">Valor que indica si se va a agregar o no una referencia al ensamblado que contiene el tipo especificado en el conjunto de referencias del host del diseñador.</param>
      <returns>Una instancia del tipo especificado si se encuentra.</returns>
      <exception cref="T:System.ArgumentNullException">No se especificó <paramref name="typeName" />.</exception>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Initialize(System.Type)">
      <summary>Inicializa el elemento del cuadro de herramientas actual con el tipo especificado que se va a crear.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que crea el elemento del cuadro de herramientas.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> se bloqueó.</exception>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.IsTransient">
      <summary>Obtiene un valor que indica si el elemento del cuadro de herramientas es transitorio.</summary>
      <returns>Es <see langword="true" /> si este elemento del cuadro de herramientas no debe almacenarse en ninguna base de datos del cuadro de herramientas al cerrarse una aplicación que proporcione un cuadro de herramientas, de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Lock">
      <summary>Bloquea el elemento del cuadro de herramientas e impide que se cambien sus propiedades.</summary>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Locked">
      <summary>Obtiene un valor que indica si <see cref="T:System.Drawing.Design.ToolboxItem" /> está bloqueado actualmente.</summary>
      <returns>
        <see langword="true" /> si el elemento del cuadro de herramientas está bloqueado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.OnComponentsCreated(System.Drawing.Design.ToolboxComponentsCreatedEventArgs)">
      <summary>Genera el evento <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" />.</summary>
      <param name="args">
        <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.OnComponentsCreating(System.Drawing.Design.ToolboxComponentsCreatingEventArgs)">
      <summary>Genera el evento <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" />.</summary>
      <param name="args">
        <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.OriginalBitmap">
      <summary>Obtiene o establece el mapa de bits original que se usará en el cuadro de herramientas de este elemento.</summary>
      <returns>
        <see cref="T:System.Drawing.Bitmap" /> que representa el elemento en el cuadro de herramientas.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Properties">
      <summary>Obtiene un diccionario de propiedades.</summary>
      <returns>Un diccionario de pares de nombre/valor (los nombres son nombres de propiedad y los valores son valores de propiedad).</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Guarda el estado del elemento del cuadro de herramientas en el objeto de información de serialización especificado.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> en el que se va a guardar.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> que indica las características de la secuencia.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Para obtener una descripción de este miembro, vea el método <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se rellena con datos.</param>
      <param name="context">Destino (vea <see cref="T:System.Runtime.Serialization.StreamingContext" />) de esta serialización.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.ToString">
      <summary>Devuelve una clase <see cref="T:System.String" /> que representa la clase <see cref="T:System.Drawing.Design.ToolboxItem" /> actual.</summary>
      <returns>Una clase <see cref="T:System.String" /> que representa la clase <see cref="T:System.Drawing.Design.ToolboxItem" /> actual.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.TypeName">
      <summary>Obtiene o establece el nombre completo del tipo de <see cref="T:System.ComponentModel.IComponent" /> que crea el elemento del cuadro de herramientas al ser invocado.</summary>
      <returns>Nombre completo del tipo de componente que crea este elemento del cuadro de herramientas.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.ValidatePropertyType(System.String,System.Object,System.Type,System.Boolean)">
      <summary>Valida que un objeto es de un tipo determinado.</summary>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
      <param name="value">Valor opcional con el que se va a validar.</param>
      <param name="expectedType">Tipo esperado de la propiedad.</param>
      <param name="allowNull">Es <see langword="true" /> para permitir el valor <see langword="null" />; de lo contrario, es, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" /> y <paramref name="allowNull" /> es <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no es el tipo especificado por <paramref name="expectedType" />.</exception>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.ValidatePropertyValue(System.String,System.Object)">
      <summary>Valida una propiedad antes de que sea asignada al diccionario de propiedades.</summary>
      <param name="propertyName">Nombre de la propiedad que se va a validar.</param>
      <param name="value">Valor con el que se va a validar.</param>
      <returns>El valor utilizado para realizar la validación.</returns>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="value" /> es <see langword="null" /> y el valor de <paramref name="propertyName" /> es "IsTransient".</exception>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Version">
      <summary>Obtiene la versión de este <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <returns>Una <see cref="T:System.String" /> que especifica la versión de este <see cref="T:System.Drawing.Design.ToolboxItem" />.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItemCollection">
      <summary>Representa una colección de elementos del cuadro de herramientas.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.#ctor(System.Drawing.Design.ToolboxItem[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> utilizando la matriz especificada de elementos del cuadro de herramientas.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.Drawing.Design.ToolboxItem" /> que contiene los elementos del cuadro de herramientas con los que se va a rellenar la colección.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.#ctor(System.Drawing.Design.ToolboxItemCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> utilizando la colección especificada.</summary>
      <param name="value">Un objeto <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> con que rellenar la nueva colección.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.Contains(System.Drawing.Design.ToolboxItem)">
      <summary>Indica si la colección contiene el <see cref="T:System.Drawing.Design.ToolboxItem" /> especificado.</summary>
      <param name="value">El objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.CopyTo(System.Drawing.Design.ToolboxItem[],System.Int32)">
      <summary>Copia la colección en la matriz especificada comenzando por el índice de destino especificado.</summary>
      <param name="array">Matriz en la que se va a copiar.</param>
      <param name="index">Índice donde se va a empezar a copiar.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.IndexOf(System.Drawing.Design.ToolboxItem)">
      <summary>Obtiene el índice del objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> especificado, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> de donde se va a obtener el índice de la colección.</param>
      <returns>Índice del objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> especificado.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItemCollection.Item(System.Int32)">
      <summary>Obtiene el objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> en el índice especificado.</summary>
      <param name="index">Índice del objeto que se va a obtener o establecer.</param>
      <returns>Un objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> en cada índice válido de la colección.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItemCreatorCallback">
      <summary>Proporciona un mecanismo de devolución de llamada que puede crear un <see cref="T:System.Drawing.Design.ToolboxItem" />.</summary>
      <param name="serializedObject">Objeto que contiene los datos para los que se va a crear un <see cref="T:System.Drawing.Design.ToolboxItem" />.</param>
      <param name="format">Nombre del formato de datos de Portapapeles para el que se va a crear un objeto <see cref="T:System.Drawing.Design.ToolboxItem" />.</param>
      <returns>Objeto <see cref="T:System.Drawing.Design.ToolboxItem" /> deserializado especificado por <paramref name="serializedObject" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMITypeLib">
      <summary>Utilice <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeLib" /> en su lugar.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Recupera la cadena de documentación de la biblioteca, el nombre y la ruta de acceso completos del archivo de Ayuda y el identificador de contexto del tema de Ayuda relativo a la biblioteca en el archivo de Ayuda.</summary>
      <param name="index">Índice de la descripción de tipo cuya documentación se va a devolver.</param>
      <param name="strName">Devuelve una cadena que contiene el nombre del elemento especificado.</param>
      <param name="strDocString">Devuelve una cadena que contiene la cadena de documentación del elemento especificado.</param>
      <param name="dwHelpContext">Devuelve el identificador de contexto de Ayuda asociado al elemento específico.</param>
      <param name="strHelpFile">Devuelve una cadena que contiene el nombre completo del archivo de Ayuda.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>Recupera la estructura que contiene los atributos de la biblioteca.</summary>
      <param name="ppTLibAttr">Estructura que contiene los atributos de la biblioteca, si la devolución es correcta.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoCount">
      <summary>Devuelve el número de descripciones de tipo de la biblioteca de tipos.</summary>
      <returns>Número de descripciones de tipo de la biblioteca de tipos.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Recupera el tipo de una descripción de tipos.</summary>
      <param name="index">Índice de la descripción de tipo en la biblioteca de tipos.</param>
      <param name="pTKind">Referencia a la enumeración <see langword="TYPEKIND" /> de la descripción de tipo.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.IsName(System.String,System.Int32)">
      <summary>Indica si una cadena que se ha pasado contiene el nombre de un tipo o miembro descrito en la biblioteca.</summary>
      <param name="szNameBuf">Cadena que se va a comprobar.</param>
      <param name="lHashVal">Valor hash de <paramref name="szNameBuf" />.</param>
      <returns>Es <see langword="true" /> si se ha encontrado <paramref name="szNameBuf" /> en la biblioteca de tipos; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>Libera la estructura <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> que se ha obtenido originalmente de <see cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr">
        <see langword="TLIBATTR" /> que se va a liberar.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.AxImporter">
      <summary>Importa controles ActiveX y genera un contenedor al que se puede tener acceso mediante un diseñador.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.#ctor(System.Windows.Forms.Design.AxImporter.Options)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.AxImporter" />.</summary>
      <param name="options">
        <see cref="T:System.Windows.Forms.Design.AxImporter.Options" /> que indica las opciones que va a utilizar el importador de controles ActiveX.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.AxImporter.IReferenceResolver">
      <summary>Proporciona métodos para resolver referencias a bibliotecas ActiveX, ensamblados o bibliotecas de tipos COM, o ensamblados administrados.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveActiveXReference(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>Resuelve una referencia a la biblioteca de tipos especificada que contiene un control ActiveX.</summary>
      <param name="typeLib">Referencia a <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" /> que se va a resolver.</param>
      <returns>Ruta de acceso completa a un ensamblado.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveComReference(System.Reflection.AssemblyName)">
      <summary>Resuelve una referencia al ensamblado especificado que contiene un componente COM.</summary>
      <param name="name">
        <see cref="T:System.Reflection.AssemblyName" /> que indica el ensamblado del que se va a resolver una referencia.</param>
      <returns>Ruta de acceso completa a un ensamblado.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveComReference(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>Resuelve una referencia a la biblioteca de tipos especificada que contiene un componente COM.</summary>
      <param name="typeLib">Referencia a <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" /> que se va a resolver.</param>
      <returns>Ruta de acceso completa a un ensamblado.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveManagedReference(System.String)">
      <summary>Resuelve una referencia al ensamblado especificado.</summary>
      <param name="assemName">Nombre del ensamblado del que se va a resolver una referencia.</param>
      <returns>Ruta de acceso completa a un ensamblado.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.AxImporter.Options">
      <summary>Representa un conjunto de opciones de un <see cref="T:System.Windows.Forms.Design.AxImporter" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.Options.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.AxImporter.Options" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.delaySign">
      <summary>Especifica si el ensamblado generado tiene un nombre seguro y se firmará más adelante.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.genSources">
      <summary>Especifica si se deben generar los orígenes del contenedor de la biblioteca de tipos.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.ignoreRegisteredOcx">
      <summary>Especifica si se debe usar únicamente la entrada de la línea de comandos en lugar de basarse en una versión registrada.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyContainer">
      <summary>Especifica la ruta de acceso al archivo que contiene el contenedor de claves de nombre seguro de los ensamblados generados.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyFile">
      <summary>Especifica la ruta de acceso al archivo que contiene la clave de nombre seguro de los ensamblados generados.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyPair">
      <summary>Especifica el nombre seguro utilizado para los ensamblados generados.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.msBuildErrors">
      <summary>Especifica si los errores se generan en el formato de Microsoft Build Engine (MSBuild).</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.noLogo">
      <summary>Indica si el logotipo de la herramienta ActiveX Importer se mostrará al importar el control.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.outputDirectory">
      <summary>Especifica la ruta de acceso al directorio donde se crearán los ensamblados generados.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.outputName">
      <summary>Especifica el nombre de archivo donde se generará el contenedor de controles ActiveX.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.overwriteRCW">
      <summary>Especifica si se van a sobrescribir los archivos existentes cuando se generen los ensamblados.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.publicKey">
      <summary>Especifica la clave pública utilizada para firmar los ensamblados generados.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.references">
      <summary>Especifica el <see cref="T:System.Windows.Forms.Design.AxImporter.IReferenceResolver" /> que se va a utilizar para resolver los tipos y referencias al generar los ensamblados.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.silentMode">
      <summary>Especifica si la compilación se realizará en modo silencioso, que muestra menos información en tiempo de compilación.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.verboseMode">
      <summary>Especifica si la compilación se realizará en modo detallado, que muestra más información en tiempo de compilación.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.Adorner">
      <summary>Administra una colección de objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> relacionados con la interfaz de usuario. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Adorner.BehaviorService">
      <summary>Obtiene o establece la clase <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> asociada a la clase <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />.</summary>
      <returns>Objeto <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> asociado a <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Adorner.Enabled">
      <summary>Obtiene o establece un valor que indica si <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> está habilitado.</summary>
      <returns>Es <see langword="true" /> si el objeto <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> está habilitado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Adorner.Glyphs">
      <summary>Obtiene la colección <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <returns>Una colección de objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.Invalidate">
      <summary>Obliga a <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> a que actualice su ventana de adorno.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.Invalidate(System.Drawing.Rectangle)">
      <summary>Obliga a <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> a que actualice su ventana de adorno dentro del <see cref="T:System.Drawing.Rectangle" /> dado.</summary>
      <param name="rectangle">Área que se va a invalidar.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.Invalidate(System.Drawing.Region)">
      <summary>Obliga a <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> a que actualice su ventana de adorno dentro del <see cref="T:System.Drawing.Region" /> dado.</summary>
      <param name="region">
        <see cref="T:System.Drawing.Region" /> que se va a invalidar.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.Behavior">
      <summary>Representa los objetos <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> administrados por <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor(System.Boolean,System.Windows.Forms.Design.Behavior.BehaviorService)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> con el valor de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> especificado.</summary>
      <param name="callParentBehavior">Es <see langword="true" /> si se debe llamar al comportamiento primario si existe; de lo contrario, es <see langword="false" />.</param>
      <param name="behaviorService">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> que se va a usar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callParentBehavior" /> es <see langword="true" /> y <paramref name="behaviorService" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Behavior.Cursor">
      <summary>Obtiene el cursor que se debe mostrar para este comportamiento.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Cursor" /> que representa el cursor que se debe mostrar para este comportamiento.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands">
      <summary>Obtiene un valor que indica si se deben deshabilitar los objetos <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns>
        <see langword="true" />Si todos <see cref="T:System.ComponentModel.Design.MenuCommand" /> los objetos que recibe el diseñador deben tener Estados establecidos en <c>Enabled = False</c> cuando este <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> está activo; <see langword="false" />en caso contrario,.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>Intercepta comandos.</summary>
      <param name="commandId">Objeto <see cref="T:System.ComponentModel.Design.CommandID" />.</param>
      <returns>Objeto <see cref="T:System.ComponentModel.Design.MenuCommand" />. De manera predeterminada, <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" /> devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
      <summary>Permite un comportamiento personalizado de arrastrar y colocar.</summary>
      <param name="g">Un objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en el que se invocará el comportamiento de arrastrar y colocar.</param>
      <param name="e">Objeto <see cref="T:System.Windows.Forms.DragEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
      <summary>Permite un comportamiento personalizado de arrastrar y entrar.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en el que se invocará el comportamiento de arrastrar y entrar.</param>
      <param name="e">Objeto <see cref="T:System.Windows.Forms.DragEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)">
      <summary>Permite un comportamiento personalizado de arrastrar y salir.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en el que se invocará el comportamiento de arrastrar y salir.</param>
      <param name="e">Objeto <see cref="T:System.Windows.Forms.DragEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
      <summary>Permite un comportamiento personalizado de arrastrar por encima.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en el que se invocará el comportamiento de arrastrar por encima.</param>
      <param name="e">Objeto <see cref="T:System.Windows.Forms.DragEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Permite un comportamiento personalizado de información de arrastrar y colocar.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en el que se invocará el comportamiento de arrastrar y colocar.</param>
      <param name="e">Objeto <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)">
      <summary>Lo llama la ventana de adorno cuando pierde la captura del mouse.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en el que se invocará el comportamiento de arrastrar y colocar.</param>
      <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)">
      <summary>Se le llama cuando cualquier mensaje de doble clic entra en la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="button">Un valor <see cref="T:System.Windows.Forms.MouseButtons" /> que indica en qué botón se ha hecho clic.</param>
      <param name="mouseLoc">Ubicación en la que se hizo clic.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDown(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)">
      <summary>Se le llama cuando cualquier mensaje de mouse hacia abajo entra en la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="button">Un valor <see cref="T:System.Windows.Forms.MouseButtons" /> que indica en qué botón se ha hecho clic.</param>
      <param name="mouseLoc">Ubicación en la que se hizo clic.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseEnter(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>Se le llama cuando cualquier mensaje de entrada del mouse entra en la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseHover(System.Windows.Forms.Design.Behavior.Glyph,System.Drawing.Point)">
      <summary>Se le llama cuando cualquier mensaje de mantener el mouse entra en la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="mouseLoc">Ubicación sobre la que se mantuvo el mouse.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseLeave(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>Se le llama cuando cualquier mensaje de salida del mouse entra en la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseMove(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)">
      <summary>Se le llama cuando cualquier mensaje de movimiento del mouse entra en la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="button">Un valor <see cref="T:System.Windows.Forms.MouseButtons" /> que indica en qué botón se ha hecho clic.</param>
      <param name="mouseLoc">Ubicación en la que se produjo el movimiento.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseUp(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons)">
      <summary>Se le llama cuando cualquier mensaje de mouse hacia arriba entra en la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="button">Un valor <see cref="T:System.Windows.Forms.MouseButtons" /> que indica en qué botón se ha hecho clic.</param>
      <returns>Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>Envía este evento de arrastrar y colocar de la ventana de adorno al <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> adecuado o al <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> cuya prueba de detección se ha realizado.</summary>
      <param name="g">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="e">Objeto <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs">
      <summary>Proporciona datos para los eventos <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.BeginDrag" /> y <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.EndDrag" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs.#ctor(System.Collections.ICollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs" />.</summary>
      <param name="dragComponents">
        <see cref="T:System.Collections.ICollection" /> de objetos <see cref="T:System.ComponentModel.IComponent" /> que se arrastran actualmente.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs.DragComponents">
      <summary>Obtiene la lista de objetos <see cref="T:System.ComponentModel.IComponent" /> que se arrastran actualmente.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> de objetos <see cref="T:System.ComponentModel.IComponent" /> que se arrastran actualmente.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler">
      <summary>Representa el método que controlará los eventos <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.BeginDrag" /> y <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.EndDrag" /> de un control <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />. Esta clase no puede heredarse.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorService">
      <summary>Administra la interfaz de usuario en el diseñador. Esta clase no puede heredarse.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorService.Adorners">
      <summary>Obtiene la estructura <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <returns>Colección de adornos.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowGraphics">
      <summary>Obtiene <see cref="T:System.Drawing.Graphics" /> para la ventana de adorno.</summary>
      <returns>
        <see cref="T:System.Drawing.Graphics" /> para la ventana de adorno.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowPointToScreen(System.Drawing.Point)">
      <summary>Convierte un <see cref="T:System.Drawing.Point" /> de la ventana de adorno en coordenadas de pantalla.</summary>
      <param name="p">Valor <see cref="T:System.Drawing.Point" /> que se va a transformar.</param>
      <returns>El valor <see cref="T:System.Drawing.Point" /> transformado, en coordenadas de pantalla.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowToScreen">
      <summary>Obtiene la ubicación de la ventana de adorno en coordenadas de pantalla.</summary>
      <returns>La ubicación, desde la esquina superior izquierda de la ventana de adorno, en coordenadas de pantalla.</returns>
    </member>
    <member name="E:System.Windows.Forms.Design.Behavior.BehaviorService.BeginDrag">
      <summary>Se produce cuando <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> inicia una operación de arrastrar y colocar.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.ControlRectInAdornerWindow(System.Windows.Forms.Control)">
      <summary>Devuelve el <see cref="T:System.Drawing.Rectangle" /> delimitador de un <see cref="T:System.Windows.Forms.Control" />.</summary>
      <param name="c">
        <see cref="T:System.Windows.Forms.Control" /> que se va a convertir.</param>
      <returns>
        <see cref="T:System.Drawing.Rectangle" /> delimitador de un <see cref="T:System.Windows.Forms.Control" /> convertido a las coordenadas de la ventana de adorno.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.ControlToAdornerWindow(System.Windows.Forms.Control)">
      <summary>Devuelve la ubicación de un <see cref="T:System.Windows.Forms.Control" /> convertida en las coordenadas de la ventana de adorno.</summary>
      <param name="c">
        <see cref="T:System.Windows.Forms.Control" /> que se va a convertir.</param>
      <returns>Un valor <see cref="T:System.Drawing.Point" /> que indica la ubicación de <paramref name="c" /> en coordenadas de la ventana de adorno.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorService.CurrentBehavior">
      <summary>Obtiene el <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> en la parte superior de la pila de comportamientos sin quitarlo.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> situado al principio de la pila de comportamientos.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Dispose">
      <summary>Libera todos los recursos que usa <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
    </member>
    <member name="E:System.Windows.Forms.Design.Behavior.BehaviorService.EndDrag">
      <summary>Se produce cuando <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> finaliza una operación de arrastre.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.GetNextBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Devuelve el <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> situado inmediatamente detrás del <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> en la pila de comportamientos.</summary>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> que precede al <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> que se va a devolver.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> situado inmediatamente detrás de <paramref name="behavior" /> en la pila de comportamientos o <see langword="null" /> si no hay ningún comportamiento detrás.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Invalidate">
      <summary>Invalida la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Invalidate(System.Drawing.Rectangle)">
      <summary>Invalida, dentro de la ventana de adorno, el área especificada de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="rect">Área rectangular que se va a invalidar.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Invalidate(System.Drawing.Region)">
      <summary>Invalida, dentro de la ventana de adorno, el área especificada de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="r">Región que se va a invalidar.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.MapAdornerWindowPoint(System.IntPtr,System.Drawing.Point)">
      <summary>Convierte un punto del sistema de coordenadas de un identificador en las coordenadas de la ventana de adorno.</summary>
      <param name="handle">Identificador de una ventana de adorno.</param>
      <param name="pt">Un <see cref="T:System.Drawing.Point" /> en el sistema de coordenadas de un identificador.</param>
      <returns>Un <see cref="T:System.Drawing.Point" /> en las coordenadas de la ventana de adorno.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.PopBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Quita y devuelve el objeto <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> situado al principio de la pila.</summary>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> que se quitará de la pila.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> que se ha quitado de la pila.</returns>
      <exception cref="T:System.InvalidOperationException">La pila de <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> está vacía.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.PushBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Inserta un <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> en la pila de comportamientos.</summary>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> que se va a insertar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="behavior" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.PushCaptureBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Inserta un <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> en la pila de comportamientos y asigna la captura del mouse al comportamiento.</summary>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> que se va a insertar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="behavior" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.ScreenToAdornerWindow(System.Drawing.Point)">
      <summary>Convierte un punto en coordenadas de pantalla en las coordenadas de la ventana de adorno de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</summary>
      <param name="p">Valor <see cref="T:System.Drawing.Point" /> que se va a transformar.</param>
      <returns>El valor <see cref="T:System.Drawing.Point" /> transformado, en coordenadas de la ventana de adorno.</returns>
    </member>
    <member name="E:System.Windows.Forms.Design.Behavior.BehaviorService.Synchronize">
      <summary>Se produce cuando se debe actualizar la selección actual.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.SyncSelection">
      <summary>Sincroniza todos los glifos de selección.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection">
      <summary>Almacena objetos <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> en una colección fuertemente tipada.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.#ctor(System.Windows.Forms.Design.Behavior.Adorner[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> con la matriz especificada.</summary>
      <param name="value">Una matriz de tipo <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> para rellenar la colección.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.#ctor(System.Windows.Forms.Design.Behavior.BehaviorService)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> con la referencia <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> especificada.</summary>
      <param name="behaviorService">Referencia <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.#ctor(System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> a partir de un control <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> ya existente.</summary>
      <param name="value">Control <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> desde el cual rellenar la colección.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Add(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>Agrega un control <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> con el valor especificado a <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <param name="value">El objeto <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> que se va a agregar al final de la colección.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.AddRange(System.Windows.Forms.Design.Behavior.Adorner[])">
      <summary>Copia los elementos de una matriz al final de la colección <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> para copiar al final de la colección</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.AddRange(System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection)">
      <summary>Agrega el contenido de otro objeto <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> que se va a agregar al final de la colección.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Contains(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>Obtiene un valor que indica si la colección <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> contiene el objeto <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> especificado.</summary>
      <param name="value">Clase <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> que se va a localizar.</param>
      <returns>Es <see langword="true" /> si la colección contiene <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.CopyTo(System.Windows.Forms.Design.Behavior.Adorner[],System.Int32)">
      <summary>Copia los valores de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> en una instancia de <see cref="T:System.Array" /> unidimensional en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados desde la clase <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</param>
      <param name="index">Índice de <paramref name="array" /> donde se inicia la copia.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.
o bien
El número de elementos de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> es mayor que el espacio disponible entre el <paramref name="index" /> y el final de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que el límite inferior de <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.GetEnumerator">
      <summary>Devuelve un enumerador que puede iterar a través de la instancia de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerator" /> correspondiente a la instancia de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.IndexOf(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>Devuelve el índice de un objeto <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> en el objeto <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <param name="value">Clase <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> que se va a localizar.</param>
      <returns>Índice del objeto <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> del parámetro <paramref name="value" /> en la colección <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Insert(System.Int32,System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>Inserta <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> en <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> que se va a insertar.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento.</param>
      <returns>Elemento <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> especificado por <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Remove(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>Quita un objeto <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> específico de la colección <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> que se va a quitar de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> no se encuentra en la colección.</exception>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator">
      <summary>Admite la iteración en una <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.#ctor(System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator" />.</summary>
      <param name="mappings">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> para el cual se crea el enumerador.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.Current">
      <summary>Obtiene el elemento actual de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <returns>Elemento actual de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />.</summary>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador sobrepasó el final de la colección.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>Para una descripción de este miembro, consulte la propiedad <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> actual de la colección.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.ComponentGlyph">
      <summary>Asocia un <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> a su componente.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.#ctor(System.ComponentModel.IComponent)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.ComponentGlyph" />.</summary>
      <param name="relatedComponent">Componente al que está asociado el <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.#ctor(System.ComponentModel.IComponent,System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.ComponentGlyph" />.</summary>
      <param name="relatedComponent">Componente al que está asociado el <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="behavior">El constructor <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> al que está asociado <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.GetHitTest(System.Drawing.Point)">
      <summary>Indica si el <see cref="T:System.Windows.Forms.Design.Behavior.ComponentGlyph" /> debe controlar un clic con el mouse en el punto especificado.</summary>
      <param name="p">Un punto para la prueba de posicionamiento.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Cursor" /> si el <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> está asociado a <paramref name="p" />; de lo contrario, es <see langword="null" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.Paint(System.Windows.Forms.PaintEventArgs)">
      <summary>Proporciona la lógica de dibujo.</summary>
      <param name="pe">
        <see cref="T:System.Windows.Forms.PaintEventArgs" /> que contiene el <see cref="P:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowGraphics" />  de <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.ComponentGlyph.RelatedComponent">
      <summary>Obtiene el componente asociado al <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <returns>Interfaz <see cref="T:System.ComponentModel.IComponent" /> asociada a <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph">
      <summary>Asocia un <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> a su control.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Cursor,System.ComponentModel.IComponent,System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" />.</summary>
      <param name="bounds">Un <see cref="T:System.Drawing.Rectangle" /> que representa los límites del <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="cursor">
        <see cref="T:System.Windows.Forms.Cursor" /> que representa el cursor que se va a mostrar cuando el puntero del mouse se sitúe sobre el elemento <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="relatedComponent">Componente al que está asociado el <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="behavior">El constructor <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> al que está asociado <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Cursor,System.ComponentModel.IComponent,System.Windows.Forms.Design.ControlDesigner)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" />.</summary>
      <param name="bounds">Un <see cref="T:System.Drawing.Rectangle" /> que representa los límites del <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="cursor">
        <see cref="T:System.Windows.Forms.Cursor" /> que representa el cursor que se va a mostrar cuando el puntero del mouse se sitúe sobre el elemento <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="relatedComponent">Componente al que está asociado el <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
      <param name="designer">El constructor <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> al que está asociado <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.Bounds">
      <summary>Obtiene los límites del <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <returns>
        <see cref="T:System.Drawing.Rectangle" /> que representa los límites del <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.GetHitTest(System.Drawing.Point)">
      <summary>Indica si el <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" /> debe controlar un clic con el mouse en el punto especificado.</summary>
      <param name="p">Un punto para la prueba de posicionamiento.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Cursor" /> si el <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> está asociado a <paramref name="p" />; de lo contrario, es <see langword="null" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.Glyph">
      <summary>Representa una entidad de interfaz de usuario (IU) única administrada por <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.#ctor(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <param name="behavior">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> asociado a <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />. Puede ser <see langword="null" />.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Glyph.Behavior">
      <summary>Obtiene la <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> asociada a la <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> asociado al <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> o <see langword="null" /> si no hay ningún comportamiento.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Glyph.Bounds">
      <summary>Obtiene los límites del <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <returns>
        <see cref="T:System.Drawing.Rectangle" /> que representa los límites del <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest(System.Drawing.Point)">
      <summary>Proporciona la lógica de la prueba de detección.</summary>
      <param name="p">Un punto para la prueba de posicionamiento.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Cursor" /> si el <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> está asociado a <paramref name="p" />; de lo contrario, es <see langword="null" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.Paint(System.Windows.Forms.PaintEventArgs)">
      <summary>Proporciona la lógica de dibujo.</summary>
      <param name="pe">Objeto <see cref="T:System.Windows.Forms.PaintEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>Cambia el <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> asociado al <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> que se va a asociar a la clase <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.GlyphCollection">
      <summary>Almacena objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en una colección fuertemente tipada.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.#ctor(System.Windows.Forms.Design.Behavior.Glyph[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> con la matriz <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> especificada.</summary>
      <param name="value">Una matriz de tipo <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> para rellenar la colección.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.#ctor(System.Windows.Forms.Design.Behavior.GlyphCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> basada en otra clase <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> para rellenar la colección.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Add(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>Agrega un objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> con el valor especificado a <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> que se va a agregar al final de la colección.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.AddRange(System.Windows.Forms.Design.Behavior.Glyph[])">
      <summary>Copia los elementos de una matriz al final de la colección <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> para copiar al final de la colección.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.AddRange(System.Windows.Forms.Design.Behavior.GlyphCollection)">
      <summary>Agrega el contenido de otro objeto <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> que se va a agregar al final de la colección.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Contains(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>Obtiene un valor que indica si la colección <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> contiene el objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> especificado.</summary>
      <param name="value">Clase <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> que se va a localizar.</param>
      <returns>Es <see langword="true" /> si la colección contiene <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.CopyTo(System.Windows.Forms.Design.Behavior.Glyph[],System.Int32)">
      <summary>Copia los valores de <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> en una instancia de <see cref="T:System.Array" /> unidimensional en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados desde la clase <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</param>
      <param name="index">Índice de <paramref name="array" /> donde se inicia la copia.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.IndexOf(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>Devuelve el índice de un objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en la colección <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</summary>
      <param name="value">Clase <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> que se va a localizar.</param>
      <returns>Índice del objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> del parámetro <paramref name="value" /> en la colección <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Insert(System.Int32,System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>Inserta <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> que se va a insertar.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.GlyphCollection.Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento.</param>
      <returns>Elemento <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> en el índice especificado.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Remove(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>Quita un objeto <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> específico de la colección <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> que se va a quitar de <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType">
      <summary>Describe el estado de selección del diseñador de <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.GlyphSelectionType.NotSelected">
      <summary>El control <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> no está seleccionado.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.GlyphSelectionType.Selected">
      <summary>El control <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> está seleccionado.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.GlyphSelectionType.SelectedPrimary">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> es la selección principal.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.SnapLine">
      <summary>Representa los segmentos de línea horizontal y vertical que se crean dinámicamente en la interfaz de usuario para ayudar en el diseño de controles en un contenedor en tiempo de diseño. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> utilizando el tipo y el desplazamiento de la línea de ajuste especificados.</summary>
      <param name="type">El objeto <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" /> que se va a crear. Describe la posición relativa y la orientación de la guía de alineación.</param>
      <param name="offset">La posición de la línea de ajuste, en píxeles, con respecto al origen superior izquierdo del control propietario.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> utilizando el tipo, el desplazamiento y el nombre de filtro de la línea de ajuste especificados.</summary>
      <param name="type">El objeto <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" /> que se va a crear. Describe la posición relativa y la orientación de la guía de alineación.</param>
      <param name="offset">La posición de la línea de ajuste, en píxeles, con respecto al origen superior izquierdo del control propietario.</param>
      <param name="filter">
        <see cref="T:System.String" /> que se utiliza para especificar una categoría de líneas de ajuste definida por el programador.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32,System.String,System.Windows.Forms.Design.Behavior.SnapLinePriority)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> utilizando el tipo, el desplazamiento, el nombre de filtro y la prioridad de la línea de ajuste especificados.</summary>
      <param name="type">El objeto <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" /> que se va a crear. Describe la posición relativa y la orientación de la guía de alineación.</param>
      <param name="offset">La posición de la línea de ajuste, en píxeles, con respecto al origen superior izquierdo del control propietario.</param>
      <param name="filter">
        <see cref="T:System.String" /> que se utiliza para especificar una categoría de líneas de ajuste definida por el programador.</param>
      <param name="priority">
        <see cref="T:System.Windows.Forms.Design.Behavior.SnapLinePriority" /> de la línea de ajuste.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32,System.Windows.Forms.Design.Behavior.SnapLinePriority)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> utilizando el tipo, el desplazamiento y la prioridad de la línea de ajuste especificados.</summary>
      <param name="type">El objeto <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" /> que se va a crear. Describe la posición relativa y la orientación de la guía de alineación.</param>
      <param name="offset">La posición de la línea de ajuste, en píxeles, con respecto al origen superior izquierdo del control propietario.</param>
      <param name="priority">
        <see cref="T:System.Windows.Forms.Design.Behavior.SnapLinePriority" /> de la línea de ajuste.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.AdjustOffset(System.Int32)">
      <summary>Ajusta la propiedad <see cref="P:System.Windows.Forms.Design.Behavior.SnapLine.Offset" /> de la guía de alineación.</summary>
      <param name="adjustment">Número de píxeles que cambiará el desplazamiento de la línea de ajuste.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.Filter">
      <summary>Obtiene la categoría de filtro definida por el programador asociada a esta línea de ajuste.</summary>
      <returns>
        <see cref="T:System.String" /> que define la categoría de filtro. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.IsHorizontal">
      <summary>Obtiene un valor que indica si la línea de ajuste tiene una orientación horizontal.</summary>
      <returns>Es <see langword="true" /> si la línea de ajuste es horizontal; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.IsVertical">
      <summary>Obtiene un valor que indica si la línea de ajuste tiene una orientación vertical.</summary>
      <returns>Es <see langword="true" /> si la línea de ajuste es vertical; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.Offset">
      <summary>Obtiene el número de píxeles que está desplazada la línea de ajuste con respecto al origen del control asociado.</summary>
      <returns>Desplazamiento, en píxeles, de la línea de ajuste.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.Priority">
      <summary>Obtiene un valor que indica la importancia relativa de la línea de ajuste.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.SnapLinePriority" /> que representa la categoría de prioridad de una guía de alineación.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.ShouldSnap(System.Windows.Forms.Design.Behavior.SnapLine,System.Windows.Forms.Design.Behavior.SnapLine)">
      <summary>Devuelve un valor que indica si la <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> especificada debe ajustarse a otra <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />.</summary>
      <param name="line1">Objeto <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> especificado.</param>
      <param name="line2">
        <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> a la que se espera que se ajuste la <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> especificada.</param>
      <returns>Es <see langword="true" /> si <paramref name="line1" /> debe ajustarse a <paramref name="line2" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.SnapLineType">
      <summary>Obtiene el tipo de una línea de ajuste, que indica la ubicación general y la orientación.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" /> que representa la orientación y la ubicación general, con respecto a los bordes del control, de una guía de alineación.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.ToString">
      <summary>Devuelve una representación de cadena de la línea de ajuste actual.</summary>
      <returns>Una clase <see cref="T:System.String" /> que representa la clase <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> actual.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.SnapLinePriority">
      <summary>Especifica la importancia relativa de una línea de ajuste.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.Always">
      <summary>La categoría de prioridad que es equivalente a la prioridad máxima de todas las líneas de ajuste actuales. Indica que esta categoría de línea de ajuste siempre debe estar activa.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.High">
      <summary>Categoría de prioridad máxima.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.Low">
      <summary>Categoría de prioridad mínima.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.Medium">
      <summary>Categoría de prioridad media.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.SnapLineType">
      <summary>Especifica la orientación y la ubicación relativa de una línea de ajuste.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Baseline">
      <summary>Una guía de alineación horizontal asociada normalmente a una característica interna primaria de un control; por ejemplo, la base de la cadena de texto de un control <see cref="T:System.Windows.Forms.Label" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Bottom">
      <summary>Una guía de alineación horizontal alineada normalmente al borde inferior de un control.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Horizontal">
      <summary>Una guía de alineación horizontal no asociada normalmente a un borde de un control.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Left">
      <summary>Una guía de alineación vertical alineada normalmente al borde izquierdo de un control.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Right">
      <summary>Una guía de alineación vertical alineada normalmente al borde derecho de un control.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Top">
      <summary>Una guía de alineación horizontal alineada normalmente al borde superior de un control.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Vertical">
      <summary>Una guía de alineación vertical no asociada normalmente a un borde de un control.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentActionsType" />
    <member name="F:System.Windows.Forms.Design.ComponentActionsType.All" />
    <member name="F:System.Windows.Forms.Design.ComponentActionsType.Component" />
    <member name="F:System.Windows.Forms.Design.ComponentActionsType.Service" />
    <member name="T:System.Windows.Forms.Design.ComponentDocumentDesigner">
      <summary>Clase base del diseñador para extender el comportamiento del modo de diseño de un documento de diseño raíz que admite componentes anidados.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.ComponentDocumentDesigner" />.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.Control">
      <summary>Obtiene el control del diseñador.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Control" /> que el diseñador está editando.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.Windows.Forms.Design.ComponentDocumentDesigner" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>Obtiene un valor que indica si la herramienta especificada es compatible con el diseñador.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> cuya compatibilidad con el cuadro de herramientas se va a comprobar.</param>
      <returns>Es <see langword="true" /> si la herramienta debe estar habilitada en el cuadro de herramientas; es <see langword="false" /> si el diseñador de documentos no sabe cómo utilizar la herramienta.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Inicializa el diseñador con el componente especificado.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar al diseñador.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Ajusta el conjunto de propiedades que el componente expondrá mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">
        <see cref="T:System.Collections.IDictionary" /> que contiene las propiedades de la clase del componente.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#IRootDesigner#GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Para obtener una descripción de este miembro, vea <see cref="T:System.ComponentModel.Design.ViewTechnology" />.</summary>
      <param name="technology">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" /> que indica una tecnología de vista concreta.</param>
      <returns>Objeto que representa la vista de este diseñador.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#IRootDesigner#SupportedTechnologies">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies" />.</summary>
      <returns>Matriz de valores <see cref="T:System.ComponentModel.Design.ViewTechnology" /> admitidos.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#ITypeDescriptorFilterService#FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />.</summary>
      <param name="component">Componente cuyos atributos se van a filtrar.</param>
      <param name="attributes">Diccionario de atributos que pueden modificarse.</param>
      <returns>Es <see langword="true" /> si el conjunto de atributos filtrados se debe guardar en caché; <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#ITypeDescriptorFilterService#FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />.</summary>
      <param name="component">Componente cuyos eventos se van a filtrar.</param>
      <param name="events">Diccionario de eventos que pueden modificarse.</param>
      <returns>Es <see langword="true" /> si el conjunto de eventos filtrados se debe guardar en caché; es <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#ITypeDescriptorFilterService#FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />.</summary>
      <param name="component">Componente cuyas propiedades se van a filtrar.</param>
      <param name="properties">Diccionario de propiedades que pueden modificarse.</param>
      <returns>Es <see langword="true" /> si el conjunto de propiedades filtradas se debe guardar en caché; es <see langword="false" /> si el servicio de filtros debe volver a consultar.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#Drawing#Design#IToolboxUser#GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" />.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> para el que se va a realizar una comprobación de compatibilidad con el cuadro de herramientas.</param>
      <returns>
        <see langword="true" /> si la herramienta es compatible con el cuadro de herramientas y puede habilitarse; <see langword="false" /> si el diseñador de documentos no sabe cómo utilizar la herramienta.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#Drawing#Design#IToolboxUser#ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.Drawing.Design.IToolboxUser.ToolPicked(System.Drawing.Design.ToolboxItem)" />.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a seleccionar.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.TrayAutoArrange">
      <summary>Obtiene o establece un valor que indica si la bandeja de componentes del diseñador está en modo de organización automática.</summary>
      <returns>Es <see langword="true" /> si la bandeja de componentes del diseñador está en modo de organización automática; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.TrayLargeIcon">
      <summary>Obtiene o establece un valor que indica si la bandeja de componentes del diseñador está en modo de iconos grandes.</summary>
      <returns>Es <see langword="true" /> si la bandeja de componentes del diseñador está en modo de iconos grandes; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentTray">
      <summary>Proporciona el comportamiento de la bandeja de componentes de un diseñador.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.#ctor(System.ComponentModel.Design.IDesigner,System.IServiceProvider)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.ComponentTray" /> mediante el proveedor de servicios y el diseñador especificados.</summary>
      <param name="mainDesigner">
        <see cref="T:System.ComponentModel.Design.IDesigner" /> que es el diseñador principal o de documentos del proyecto actual.</param>
      <param name="serviceProvider">
        <see cref="T:System.IServiceProvider" /> que se puede utilizar para obtener servicios en tiempo de diseño.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.AddComponent(System.ComponentModel.IComponent)">
      <summary>Agrega un componente a la bandeja.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a agregar a la bandeja.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.AutoArrange">
      <summary>Obtiene o establece un valor que indica si los elementos de la bandeja se alinean automáticamente.</summary>
      <returns>Es <see langword="true" /> si los elementos de la bandeja se organizan automáticamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CanCreateComponentFromTool(System.Drawing.Design.ToolboxItem)">
      <summary>Obtiene un valor que indica si la herramienta especificada se puede utilizar para crear un componente nuevo.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a probar.</param>
      <returns>Es <see langword="true" /> si la herramienta especificada se puede utilizar para crear un componente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CanDisplayComponent(System.ComponentModel.IComponent)">
      <summary>Obtiene un valor que indica si el componente especificado se puede mostrar.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a probar.</param>
      <returns>Es <see langword="true" /> si el componente se puede mostrar; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.ComponentCount">
      <summary>Obtiene el número de componentes que contiene la bandeja.</summary>
      <returns>Número de componentes de la bandeja.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CreateComponentFromTool(System.Drawing.Design.ToolboxItem)">
      <summary>Crea un componente a partir del elemento de cuadro de herramientas especificado, lo agrega al documento actual y muestra una representación suya en la bandeja de componentes.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> a partir del cual se va a crear un componente.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.DisplayError(System.Exception)">
      <summary>Muestra un mensaje de error al usuario con información acerca de la excepción especificada.</summary>
      <param name="e">Excepción acerca de la cual se va a mostrar información.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.Windows.Forms.Design.ComponentTray" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetLocation(System.ComponentModel.IComponent)">
      <summary>Obtiene la ubicación del componente especificado con relación a la esquina superior izquierda de la bandeja de componentes.</summary>
      <param name="receiver">
        <see cref="T:System.ComponentModel.IComponent" /> cuya ubicación se va a recuperar.</param>
      <returns>
        <see cref="T:System.Drawing.Point" /> que indica las coordenadas del componente especificado, o un <see cref="T:System.Drawing.Point" /> vacío si el componente especificado no se encontró en la bandeja de componentes. En un <see cref="T:System.Drawing.Point" /> vacío, su propiedad <see cref="P:System.Drawing.Point.IsEmpty" /> es igual a <see langword="true" /> y, normalmente, sus propiedades <see cref="P:System.Drawing.Point.X" /> y <see cref="P:System.Drawing.Point.Y" /> son igual a cero.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetNextComponent(System.ComponentModel.IComponent,System.Boolean)">
      <summary>Este método, similar a <see cref="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)" />, devuelve el siguiente componente de la bandeja, dado un componente de inicio.</summary>
      <param name="component">El componente por el que se empieza a enumerar.</param>
      <param name="forward">Es <see langword="true" /> para enumerar hacia delante en la lista; de lo contrario, es <see langword="false" /> para enumerar hacia atrás.</param>
      <returns>El componente siguiente en la bandeja de componentes o <see langword="null" />, si se encuentra el final de la lista (o el principio, si <paramref name="forward" /> es <see langword="false" />).</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetService(System.Type)">
      <summary>Obtiene el tipo de servicio solicitado.</summary>
      <param name="serviceType">Tipo de servicio que se va a recuperar.</param>
      <returns>Instancia del servicio solicitado, o <see langword="null" /> si no se encuentra ningún servicio.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetTrayLocation(System.ComponentModel.IComponent)">
      <summary>Obtiene el valor de la propiedad extensora <see langword="Location" />.</summary>
      <param name="receiver">La interfaz <see cref="T:System.ComponentModel.IComponent" /> que recibe la propiedad extensora location.</param>
      <returns>
        <see cref="T:System.Drawing.Point" /> que representa la ubicación de <paramref name="receiver" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.IsTrayComponent(System.ComponentModel.IComponent)">
      <summary>Prueba si un componente aparece en la bandeja de componentes.</summary>
      <param name="comp">El componente cuya presencia en la bandeja de componentes se va a probar.</param>
      <returns>Es <see langword="true" /> si se muestra <paramref name="comp" /> en la bandeja; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>Se le llama cuando se suelta un objeto arrastrado en la bandeja de componentes.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>Se le llama cuando se arrastra un objeto y este entra en el área de la bandeja de componentes.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragLeave(System.EventArgs)">
      <summary>Se le llama cuando se arrastra un objeto fuera del área de la bandeja de componentes.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>Se le llama cuando se arrastra un objeto sobre la bandeja de componentes.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Se le llama durante una operación de arrastrar y colocar OLE para que la bandeja de componentes pueda ofrecer información al usuario sobre el resultado de colocar el objeto en un punto específico.</summary>
      <param name="gfevent">
        <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>Genera el evento <see cref="E:System.Windows.Forms.Control.Layout" />.</summary>
      <param name="levent">Objeto <see cref="T:System.Windows.Forms.LayoutEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnLostCapture">
      <summary>Se le llama cuando se cancela una operación de selección mediante arrastre del mouse.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Se le llama cuando se hace doble clic en la bandeja de componentes.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Se le llama cuando se presiona un botón del mouse.</summary>
      <param name="e">
        <see cref="T:System.Windows.Forms.MouseEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Se le llama cuando cambia la posición del cursor del mouse.</summary>
      <param name="e">
        <see cref="T:System.Windows.Forms.MouseEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Se le llama cuando se libera el botón del mouse.</summary>
      <param name="e">
        <see cref="T:System.Windows.Forms.MouseEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>Se le llama cuando es necesario actualizar la vista de la bandeja de componentes.</summary>
      <param name="pe">
        <see cref="T:System.Windows.Forms.PaintEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnSetCursor">
      <summary>Se le llama para establecer el cursor del mouse.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.RemoveComponent(System.ComponentModel.IComponent)">
      <summary>Quita el componente especificado de la bandeja.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se quita de la bandeja.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.SetLocation(System.ComponentModel.IComponent,System.Drawing.Point)">
      <summary>Establece el componente especificado en la ubicación especificada.</summary>
      <param name="receiver">
        <see cref="T:System.ComponentModel.IComponent" /> cuya ubicación se va a establecer.</param>
      <param name="location">
        <see cref="T:System.Drawing.Point" /> que indica la nueva ubicación del componente especificado.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.SetTrayLocation(System.ComponentModel.IComponent,System.Drawing.Point)">
      <summary>Establece el valor de la propiedad extensora <see langword="Location" />.</summary>
      <param name="receiver">La interfaz <see cref="T:System.ComponentModel.IComponent" /> que recibe la propiedad extensora location.</param>
      <param name="location">
        <see cref="T:System.Drawing.Point" /> que representa la ubicación de <paramref name="receiver" />.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.ShowLargeIcons">
      <summary>Obtiene o establece un valor que indica si la bandeja muestra un icono grande para representar cada componente de la bandeja.</summary>
      <returns>Es <see langword="true" /> si se muestran iconos grandes; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)" />.</summary>
      <param name="extendee">Objeto que va a recibir las propiedades extensoras.</param>
      <returns>
        <see langword="true" />si este objeto puede proporcionar propiedades extensoras al objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.WndProc(System.Windows.Forms.Message@)">
      <summary>Procesa los mensajes de Windows.</summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" /> para procesar.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.ControlDesigner">
      <summary>Extiende el comportamiento de un objeto <see cref="T:System.Windows.Forms.Control" /> en modo de diseño.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.ControlDesigner" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ControlDesigner.accessibilityObj">
      <summary>Especifica el objeto de accesibilidad para el diseñador.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AccessibilityObject">
      <summary>Obtiene <see cref="T:System.Windows.Forms.AccessibleObject" /> asignado al control.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleObject" /> asignado al control.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AssociatedComponents">
      <summary>Obtiene la colección de componentes asociados al componente administrado por el diseñador.</summary>
      <returns>Componentes asociados al componente administrado por el diseñador.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AutoResizeHandles">
      <summary>Obtiene o establece un valor que indica si la asignación del controlador de cambio de tamaño depende del valor de la propiedad <see cref="P:System.Windows.Forms.Control.AutoSize" />.</summary>
      <returns>Es <see langword="true" /> si la asignación del controlador de cambio de tamaño depende del valor de las propiedades <see cref="P:System.Windows.Forms.Control.AutoSize" /> y <see langword="AutoSizeMode" />; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.BaseWndProc(System.Windows.Forms.Message@)">
      <summary>Procesa los mensajes de Windows.</summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" /> para procesar.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.BehaviorService">
      <summary>Obtiene el <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> del entorno de diseño.</summary>
      <returns>El <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> o <see langword="null" /> si el servicio no está disponible.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.CanBeParentedTo(System.ComponentModel.Design.IDesigner)">
      <summary>Indica si el control del diseñador especificado puede ser el principal de este control de diseñador.</summary>
      <param name="parentDesigner">
        <see cref="T:System.ComponentModel.Design.IDesigner" /> que administra el control que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el control administrado por el diseñador especificado puede ser principal del control que administra este diseñador; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.Control">
      <summary>Obtiene el control que diseña el diseñador.</summary>
      <returns>Control que diseña el diseñador.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject">
      <summary>Proporciona un <see cref="T:System.Windows.Forms.AccessibleObject" /> para <see cref="T:System.Windows.Forms.Design.ControlDesigner" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.#ctor(System.Windows.Forms.Design.ControlDesigner,System.Windows.Forms.Control)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject" /> con el diseñador y control especificados.</summary>
      <param name="designer">
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> para el objeto accesible.</param>
      <param name="control">
        <see cref="T:System.Windows.Forms.Control" /> para el objeto accesible.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Bounds">
      <summary>Obtiene los puntos que definen los límites del objeto accesible para el diseñador.</summary>
      <returns>
        <see cref="T:System.Drawing.Rectangle" /> que indica los límites del objeto accesible para el diseñador.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.DefaultAction">
      <summary>Obtiene una cadena que describe la acción predeterminada del objeto especificado.</summary>
      <returns>Descripción de la acción predeterminada para un objeto especificado.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Description">
      <summary>Obtiene una cadena que describe la apariencia visual del objeto especificado.</summary>
      <returns>Descripción para el usuario de la apariencia visual del objeto o <see langword="null" /> si el objeto no tiene descripción.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetChild(System.Int32)">
      <summary>Recupera el elemento secundario accesible correspondiente al índice especificado.</summary>
      <param name="index">Índice de base cero del elemento secundario accesible.</param>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleObject" /> que representa el secundario accesible correspondiente al índice especificado.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetChildCount">
      <summary>Recupera el número de elementos secundarios que pertenecen a un objeto accesible.</summary>
      <returns>Número de elementos secundarios que pertenecen a un objeto accesible.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetFocused">
      <summary>Recupera el objeto que tiene el foco de teclado.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleObject" /> que especifica el secundario que tiene el foco actualmente. Este método devuelve el objeto de llamada si el propio objeto tiene el foco. Devuelve <see langword="null" /> si ningún objeto tiene el foco.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetSelected">
      <summary>Recupera el secundario seleccionado actualmente.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleObject" /> que representa el secundario seleccionado actualmente. Este método devuelve el objeto de llamada si el propio objeto está seleccionado. Devuelve <see langword="null" /> si no hay ningún secundario seleccionado actualmente y el propio objeto no tiene el foco.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.HitTest(System.Int32,System.Int32)">
      <summary>Recupera el objeto secundario que se encuentra en las coordenadas de pantalla especificadas.</summary>
      <param name="x">Coordenada horizontal de la pantalla.</param>
      <param name="y">Coordenada vertical de la pantalla.</param>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleObject" /> que representa el objeto secundario en las coordenadas de la pantalla proporcionadas. Este método devuelve el objeto de llamada si el propio objeto está en la ubicación especificada. Devuelve <see langword="null" /> si ningún objeto está en la ubicación probada.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Name">
      <summary>Obtiene o establece el nombre del objeto.</summary>
      <returns>Nombre del objeto o <see langword="null" /> si no se ha establecido la propiedad.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Parent">
      <summary>Obtiene el primario de un objeto accesible.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleObject" /> que representa el primario de un objeto accesible o <see langword="null" /> si no hay ningún objeto primario.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Role">
      <summary>Obtiene la función de este objeto accesible.</summary>
      <returns>Uno de los valores de <see cref="T:System.Windows.Forms.AccessibleRole" /> o <see cref="F:System.Windows.Forms.AccessibleRole.None" /> si no se ha especificado ningún rol.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.State">
      <summary>Obtiene el estado de este objeto accesible.</summary>
      <returns>Uno de los valores de <see cref="T:System.Windows.Forms.AccessibleStates" /> o <see cref="F:System.Windows.Forms.AccessibleStates.None" /> si no se ha establecido el estado.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Value">
      <summary>Obtiene o establece el valor de un objeto accesible.</summary>
      <returns>Valor de un objeto accesible o <see langword="null" /> si el objeto no tiene ningún valor establecido.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DefWndProc(System.Windows.Forms.Message@)">
      <summary>Proporciona procesamiento predeterminado para los mensajes de Windows.</summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" /> para procesar.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DisplayError(System.Exception)">
      <summary>Muestra información al usuario acerca de la excepción especificada.</summary>
      <param name="e">
        <see cref="T:System.Exception" /> que se va a mostrar.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.EnableDesignMode(System.Windows.Forms.Control,System.String)">
      <summary>Habilita la funcionalidad en tiempo de diseño para un control secundario.</summary>
      <param name="child">El control secundario para el que se habilitará el modo de diseño.</param>
      <param name="name">El nombre de <paramref name="child" /> tal y como se expone al usuario final.</param>
      <returns>Es <see langword="true" /> si el control secundario se puede habilitar para el tiempo de diseño; es <see langword="false" /> si la infraestructura host no lo permite.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> o <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.EnableDragDrop(System.Boolean)">
      <summary>Habilita o deshabilita la compatibilidad con arrastrar y colocar del control que se está diseñando.</summary>
      <param name="value">Es <see langword="true" /> para habilitar en el control la compatibilidad con arrastrar y colocar; es <see langword="false" /> si el control no admitirá la operación de arrastrar y colocar. De manera predeterminada, es <see langword="false" />.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.EnableDragRect">
      <summary>Obtiene un valor que indica si se pueden dibujar rectángulos de arrastre en este componente del diseñador.</summary>
      <returns>Es <see langword="true" /> si se pueden dibujar rectángulos de arrastre; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.GetControlGlyph(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>Devuelve <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" /> que representa los límites de este control.</summary>
      <param name="selectionType">Un valor <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> que especifica el estado de la selección.</param>
      <returns>Un <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" /> que representa los límites de este control.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.GetGlyphs(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>Obtiene una colección de objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> que representan los bordes de selección y los identificadores de agarre de un control estándar.</summary>
      <param name="selectionType">Un valor <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> que especifica el estado de la selección.</param>
      <returns>Una colección de objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.GetHitTest(System.Drawing.Point)">
      <summary>Indica si el control debe controlar un clic con el mouse en el punto especificado.</summary>
      <param name="point">
        <see cref="T:System.Drawing.Point" /> que indica la posición en que se ha hecho clic con el mouse, en coordenadas de la pantalla.</param>
      <returns>Es <see langword="true" /> si el control controla un clic en el punto especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.HookChildControls(System.Windows.Forms.Control)">
      <summary>Enruta los mensajes desde los controles secundarios del control especificado al diseñador.</summary>
      <param name="firstChild">Primer <see cref="T:System.Windows.Forms.Control" /> secundario que se va a procesar. Este método se puede llamar a sí mismo de forma recursiva para los secundarios del control.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.InheritanceAttribute">
      <summary>Obtiene el <see cref="T:System.ComponentModel.InheritanceAttribute" /> del diseñador.</summary>
      <returns>Es <see cref="F:System.ComponentModel.InheritanceAttribute.Inherited" /> si el diseñador es un diseñador raíz; de lo contrario, es el valor de la propiedad <see cref="P:System.ComponentModel.Design.ComponentDesigner.InheritanceAttribute" /> del diseñador primario.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Inicializa el diseñador con el componente especificado.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar al diseñador. Este componente siempre debe ser una instancia o derivar de <see cref="T:System.Windows.Forms.Control" />.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>Vuelve a inicializar un componente existente.</summary>
      <param name="defaultValues">Un diccionario de valores predeterminados de nombre y valor que se van a aplicar a propiedades. Puede ser <see langword="null" /> si no se especifican valores predeterminados.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Inicializa un componente recién creado.</summary>
      <param name="defaultValues">Un diccionario de valores predeterminados de nombre y valor que se van a aplicar a propiedades. Puede ser <see langword="null" /> si no se especifican valores predeterminados.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.InternalControlDesigner(System.Int32)">
      <summary>Devuelve al diseñador de controles internos el índice especificado en <see cref="T:System.Windows.Forms.Design.ControlDesigner" />.</summary>
      <param name="internalControlIndex">Un índice especificado para seleccionar el diseñador de controles internos. Este índice se basa en cero.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> que se encuentra en el índice especificado.</returns>
    </member>
    <member name="F:System.Windows.Forms.Design.ControlDesigner.InvalidPoint">
      <summary>Define un <see cref="T:System.Drawing.Point" /> local que representa los valores de un <see cref="T:System.Drawing.Point" /> no válido.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.NumberOfInternalControlDesigners">
      <summary>Devuelve el número de diseñadores de controles internos en <see cref="T:System.Windows.Forms.Design.ControlDesigner" />.</summary>
      <returns>El número de diseñadores de controles internos en <see cref="T:System.Windows.Forms.Design.ControlDesigner" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnContextMenu(System.Int32,System.Int32)">
      <summary>Muestra el menú contextual y permite realizar otros procesos adicionales cuando el menú contextual está a punto de mostrarse.</summary>
      <param name="x">Coordenada x donde se va a mostrar el menú contextual.</param>
      <param name="y">Coordenada y donde se va a mostrar el menú contextual.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnCreateHandle">
      <summary>Permite realizar otros procesos adicionales inmediatamente después de crear el identificador del control.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragComplete(System.Windows.Forms.DragEventArgs)">
      <summary>Recibe una llamada para limpiar una operación de arrastrar y colocar.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>Recibe una llamada cuando se coloca un objeto de arrastrar y colocar en la vista del diseñador del control.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>Recibe una llamada cuando una operación de arrastrar y colocar entra en la vista del diseñador del control.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragLeave(System.EventArgs)">
      <summary>Recibe una llamada cuando una operación de arrastrar y colocar sale de la vista del diseñador del control.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>Recibe una llamada cuando se arrastra un objeto de arrastrar y colocar en la vista del diseñador del control.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Recibe una llamada mientras se está realizando una operación de arrastrar y colocar para proporcionar guías visuales basadas en la ubicación del mouse cuando se está realizando una operación de arrastre.</summary>
      <param name="e">
        <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
      <summary>Recibe una llamada cuando se presiona el botón primario del mouse y se mantiene presionado mientras está sobre el componente.</summary>
      <param name="x">Posición x del mouse, en coordenadas de pantalla.</param>
      <param name="y">Posición y del mouse, en coordenadas de pantalla.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragEnd(System.Boolean)">
      <summary>Recibe una llamada al final de una operación de arrastrar y colocar para terminar o cancelar la operación.</summary>
      <param name="cancel">Es <see langword="true" /> para cancelar la operación de arrastrar; es <see langword="false" /> para confirmarla.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
      <summary>Recibe una llamada en cada movimiento del mouse durante una operación de arrastrar y colocar.</summary>
      <param name="x">Posición x del mouse, en coordenadas de pantalla.</param>
      <param name="y">Posición y del mouse, en coordenadas de pantalla.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseEnter">
      <summary>Recibe una llamada cuando el mouse entra en el control por primera vez.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseHover">
      <summary>Recibe una llamada después de que el mouse se desplace sobre el control.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseLeave">
      <summary>Recibe una llamada cuando el mouse entra en el control por primera vez.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>Recibe una llamada cuando el control que el diseñador está administrando tiene su superficie dibujada, de manera que el diseñador pueda dibujar otros adornos en la parte superior del control.</summary>
      <param name="pe">
        <see cref="T:System.Windows.Forms.PaintEventArgs" /> que el diseñador puede utilizar para dibujar en el control.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnSetComponentDefaults">
      <summary>Se llama cuando se inicializa el diseñador.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnSetCursor">
      <summary>Recibe una llamada cada vez que es necesario establecer el cursor.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ParentComponent">
      <summary>Obtiene el componente principal de <see cref="T:System.Windows.Forms.Design.ControlDesigner" />.</summary>
      <returns>El componente principal para <see cref="T:System.Windows.Forms.Design.ControlDesigner" />; de lo contrario, es <see langword="null" /> si no hay ningún componente principal.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ParticipatesWithSnapLines">
      <summary>Obtiene un valor que indica si <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> permitirá la alineación de las líneas de ajuste durante una operación de arrastre.</summary>
      <returns>Es <see langword="true" /> si <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> permitirá la alineación de las líneas de ajuste durante una operación de arrastre cuando el control de arrastre primario esté sobre este diseñador; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Ajusta el conjunto de propiedades que el componente expone mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">
        <see cref="T:System.Collections.IDictionary" /> que contiene las propiedades de la clase del componente.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.SelectionRules">
      <summary>Obtiene las reglas de selección que indican las posibilidades de movimiento de un componente.</summary>
      <returns>Combinación bit a bit de valores <see cref="T:System.Windows.Forms.Design.SelectionRules" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.SnapLines">
      <summary>Obtiene una lista de objetos <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> que representan los puntos de alineación significativos de este control.</summary>
      <returns>Lista de objetos <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> que representan los puntos de alineación significativos de este control.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.UnhookChildControls(System.Windows.Forms.Control)">
      <summary>Enruta los mensajes para los secundarios del control especificado a cada uno de los controles en lugar de a un diseñador principal.</summary>
      <param name="firstChild">Primer <see cref="T:System.Windows.Forms.Control" /> secundario que se va a procesar. Este método se puede llamar a sí mismo de forma recursiva para los secundarios del control.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>Procesa los mensajes de Windows y, de forma opcional, los enruta al control.</summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" /> para procesar.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.DesignerActionListsChangedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerActionListsChangedEventArgs.#ctor(System.Object,System.Windows.Forms.Design.DesignerActionListsChangedType,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.DesignerActionListsChangedEventArgs" /> con el objeto relacionado especificado, el tipo de cambio y las listas de acciones restantes para el objeto relacionado.</summary>
      <param name="relatedObject">Objeto relacionado.</param>
      <param name="changeType">Uno de los valores de enumeración que especifica el tipo de cambio.</param>
      <param name="actionLists">Colección que representa la lista de acciones restantes para el objeto relacionado.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerActionListsChangedEventArgs.ActionLists">
      <summary>Obtiene la colección que contiene la lista de acciones restantes para el objeto relacionado.</summary>
      <returns>Colección que contiene las listas de acciones restantes para el objeto relacionado.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerActionListsChangedEventArgs.ChangeType">
      <summary>Obtiene el tipo de cambio que hizo que se provocara el evento.</summary>
      <returns>Uno de los valores de enumeración que especifica el tipo de cambio.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerActionListsChangedEventArgs.RelatedObject">
      <summary>Obtiene el objeto que está asociado al evento.</summary>
      <returns>Objeto que está asociado al evento.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.DesignerActionListsChangedEventHandler">
      <param name="sender" />
      <param name="e" />
    </member>
    <member name="T:System.Windows.Forms.Design.DesignerActionListsChangedType" />
    <member name="F:System.Windows.Forms.Design.DesignerActionListsChangedType.ActionListsAdded" />
    <member name="F:System.Windows.Forms.Design.DesignerActionListsChangedType.ActionListsRemoved" />
    <member name="T:System.Windows.Forms.Design.DesignerActionUIService" />
    <member name="E:System.Windows.Forms.Design.DesignerActionUIService.DesignerActionUIStateChange" />
    <member name="M:System.Windows.Forms.Design.DesignerActionUIService.Dispose" />
    <member name="M:System.Windows.Forms.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)">
      <param name="component" />
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerActionUIService.Refresh(System.ComponentModel.IComponent)">
      <param name="component" />
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerActionUIService.ShouldAutoShow(System.ComponentModel.IComponent)">
      <param name="component" />
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerActionUIService.ShowUI(System.ComponentModel.IComponent)">
      <param name="component" />
    </member>
    <member name="T:System.Windows.Forms.Design.DesignerCommandSet" />
    <member name="M:System.Windows.Forms.Design.DesignerCommandSet.#ctor" />
    <member name="P:System.Windows.Forms.Design.DesignerCommandSet.ActionLists" />
    <member name="M:System.Windows.Forms.Design.DesignerCommandSet.GetCommands(System.String)">
      <param name="name" />
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerCommandSet.Verbs" />
    <member name="T:System.Windows.Forms.Design.DesignerOptions">
      <summary>Proporciona acceso para obtener y establecer los valores de las opciones de un diseñador.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerOptions.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.DesignerOptions" />.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.EnableInSituEditing">
      <summary>Obtiene o establece un valor que habilita o deshabilita la edición en contexto para los controles <see cref="T:System.Windows.Forms.ToolStrip" />.</summary>
      <returns>Es <see langword="true" /> si la edición en contexto para los controles <see cref="T:System.Windows.Forms.ToolStrip" /> está habilitada; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.GridSize">
      <summary>Obtiene o establece un <see cref="T:System.Drawing.Size" /> que representa las dimensiones de una unidad de la cuadrícula.</summary>
      <returns>Un <see cref="T:System.Drawing.Size" /> que representa las dimensiones de una unidad de la cuadrícula.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.ObjectBoundSmartTagAutoShow">
      <summary>Obtiene o establece un valor que especifica si un diseñador muestra automáticamente el panel de etiquetas inteligentes de un componente durante su creación.</summary>
      <returns>Es <see langword="true" /> para permitir que el panel de etiquetas inteligentes de un componente se abra automáticamente durante su creación; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.ShowGrid">
      <summary>Obtiene o establece un valor que habilita o deshabilita la cuadrícula en el diseñador.</summary>
      <returns>Es <see langword="true" /> si la cuadrícula está habilitada; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.SnapToGrid">
      <summary>Obtiene o establece un valor que habilita o deshabilita si los controles se colocan automáticamente en las coordenadas de la cuadrícula.</summary>
      <returns>Es <see langword="true" /> si el ajuste está habilitado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.UseOptimizedCodeGeneration">
      <summary>Obtiene o establece un valor que habilita o deshabilita la caché de componentes.</summary>
      <returns>Es <see langword="true" /> si la caché de componentes está habilitada; de lo contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.UseSmartTags">
      <summary>Obtiene o establece un valor que habilita o deshabilita las etiquetas inteligentes en el diseñador.</summary>
      <returns>Es <see langword="true" /> si las etiquetas inteligentes están habilitadas en el diseñador; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.UseSnapLines">
      <summary>Obtiene o establece un valor que habilita o deshabilita las líneas de ajuste en el diseñador.</summary>
      <returns>Es <see langword="true" /> si las líneas de ajuste del diseñador están habilitadas; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.DocumentDesigner">
      <summary>Clase de diseñador base para extender el comportamiento del modo de diseño de un <see cref="T:System.Windows.Forms.Control" /> que admite controles anidados y debe recibir mensajes de desplazamiento, así como para proporcionarle una vista de modo de diseño en el nivel raíz.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.DocumentDesigner" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.Windows.Forms.Design.DocumentDesigner" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.EnsureMenuEditorService(System.ComponentModel.IComponent)">
      <summary>Comprueba la existencia de un servicio de editor de menús y, si no hay, crea uno.</summary>
      <param name="c">
        <see cref="T:System.ComponentModel.IComponent" /> que garantiza que hay un servicio de menús contextuales.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.GetGlyphs(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>Obtiene <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> que representa los objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</summary>
      <param name="selectionType">Un valor <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> que especifica el estado de la selección.</param>
      <returns>Una colección de objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>Indica si la herramienta especificada es compatible con el diseñador.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> cuya compatibilidad con el cuadro de herramientas se va a comprobar.</param>
      <returns>Es <see langword="true" /> si la herramienta debe estar habilitada en el cuadro de herramientas; es <see langword="false" /> si el diseñador de documentos no sabe cómo utilizar la herramienta.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Inicializa el diseñador con el componente especificado.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar al diseñador.</param>
    </member>
    <member name="F:System.Windows.Forms.Design.DocumentDesigner.menuEditorService">
      <summary>Inicializa la variable menuEditorService en <see langword="null" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.OnContextMenu(System.Int32,System.Int32)">
      <summary>Se le llama cuando se debe mostrar el menú contextual.</summary>
      <param name="x">Coordenada de pantalla horizontal donde se va a mostrar el menú contextual.</param>
      <param name="y">Coordenada de pantalla vertical donde se va a mostrar el menú contextual.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.OnCreateHandle">
      <summary>Se le llama inmediatamente después de crear el identificador del diseñador.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Ajusta el conjunto de propiedades que el componente expone mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">
        <see cref="T:System.Collections.IDictionary" /> que contiene las propiedades de la clase del componente.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.DocumentDesigner.SelectionRules">
      <summary>Obtiene <see cref="T:System.Windows.Forms.Design.SelectionRules" /> para el diseñador.</summary>
      <returns>Combinación bit a bit de valores <see cref="T:System.Windows.Forms.Design.SelectionRules" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.System#ComponentModel#Design#IRootDesigner#GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Para una descripción de este miembro, vea <see cref="T:System.ComponentModel.Design.ViewTechnology" />.</summary>
      <param name="technology">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" /> que indica una tecnología de vista concreta.</param>
      <returns>Objeto que representa la vista de este diseñador.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DocumentDesigner.System#ComponentModel#Design#IRootDesigner#SupportedTechnologies">
      <summary>Para una descripción de este miembro, vea <see cref="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies" />.</summary>
      <returns>Matriz de valores <see cref="T:System.ComponentModel.Design.ViewTechnology" /> admitidos.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.System#Drawing#Design#IToolboxUser#GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" />.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> para el que se va a realizar una comprobación de compatibilidad con el cuadro de herramientas.</param>
      <returns>
        <see langword="true" /> si la herramienta es compatible con el cuadro de herramientas y puede habilitarse; <see langword="false" /> si el diseñador de documentos no sabe cómo utilizar la herramienta.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.System#Drawing#Design#IToolboxUser#ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.Drawing.Design.IToolboxUser.ToolPicked(System.Drawing.Design.ToolboxItem)" />.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> que se va a seleccionar.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>Selecciona la herramienta especificada.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> para el que se va a crear un componente.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>Procesa los mensajes de Windows.</summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" /> para procesar.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.EventHandlerService">
      <summary>Proporciona una manera sistemática de administrar los controladores de eventos para el documento actual.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.EventHandlerService" />.</summary>
      <param name="focusWnd">Control <see cref="T:System.Windows.Forms.Control" /> que se está diseñado.</param>
    </member>
    <member name="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged">
      <summary>Se desencadena un evento OnEventHandlerChanged.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow">
      <summary>Obtiene el control al que están asociados los controladores de eventos.</summary>
      <returns>Control <see cref="T:System.Windows.Forms.Control" /> asociado mediante el constructor.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)">
      <summary>Obtiene el controlador de eventos actualmente activo del tipo especificado.</summary>
      <param name="handlerType">Tipo del controlador que se va a obtener.</param>
      <returns>Instancia del controlador o <see langword="null" /> si no hay ningún controlador del tipo solicitado.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)">
      <summary>Extrae el controlador especificado de la pila.</summary>
      <param name="handler">Controlador que se va a quitar de la pila.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)">
      <summary>Inserta un nuevo controlador de eventos en la pila.</summary>
      <param name="handler">El controlador que se va a agregar a la pila.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.IContainsThemedScrollbarWindows">
      <summary>Define un método para obtener información sobre cómo las barras de desplazamiento de ventanas han de ser temáticas al mostrarlas en el diseñador de Visual Studio.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IContainsThemedScrollbarWindows.ThemedScrollbarWindows">
      <summary>Obtiene una enumeración de objetos <see cref="T:System.Windows.Forms.Design.ThemedScrollbarWindow" /> que representan las ventanas y cómo las barras de desplazamiento han de ser temáticas al mostrarlas en el diseñador de Visual Studio.</summary>
      <returns>Una enumeración de objetos que representan las ventanas y cómo las barras de desplazamiento han de ser temáticas al mostrarlas en el diseñador de Visual Studio.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ImageListCodeDomSerializer">
      <summary>Serializa los diccionarios de cadenas.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListCodeDomSerializer.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.ImageListCodeDomSerializer" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Deserializa en un objeto el objeto CodeDOM (Code Document Object Model) serializado especificado.</summary>
      <param name="manager">Interfaz del administrador de serialización que se utiliza durante el proceso de deserialización.</param>
      <param name="codeObject">Objeto CodeDOM serializado que se va a deserializar.</param>
      <returns>Objeto CodeDOM deserializado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> o <paramref name="codeObject" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializa el objeto especificado en un objeto CodeDOM (Code Document Object Model).</summary>
      <param name="manager">Administrador de serialización que se va a utilizar durante la serialización.</param>
      <param name="value">Objeto que se va a serializar.</param>
      <returns>Objeto CodeDOM que representa el objeto que se ha serializado.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.IMenuEditorService">
      <summary>Proporciona acceso al servicio de edición de menús.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.GetMenu">
      <summary>Obtiene el menú actual.</summary>
      <returns>Objeto <see cref="T:System.Windows.Forms.Menu" /> actual.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.IsActive">
      <summary>Indica si el menú actual está activo.</summary>
      <returns>Es <see langword="true" /> si el menú está activo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.MessageFilter(System.Windows.Forms.Message@)">
      <summary>Permite al servicio del editor interceptar los mensajes Win32.</summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" /> para procesar.</param>
      <returns>Es <see langword="true" /> si el mensaje está dirigido al control; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.SetMenu(System.Windows.Forms.Menu)">
      <summary>Hace visible el menú especificado en el formulario.</summary>
      <param name="menu">El objeto <see cref="T:System.Windows.Forms.Menu" /> que se va a representar.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.IMenuEditorService.SetSelection(System.Windows.Forms.MenuItem)">
      <summary>Establece el elemento de menú seleccionado del menú actual.</summary>
      <param name="item">Objeto <see cref="T:System.Windows.Forms.MenuItem" /> para establecer como el elemento de menú actualmente seleccionado.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.MenuCommands">
      <summary>Define un conjunto de campos <see cref="T:System.ComponentModel.Design.CommandID" />, cada uno de los cuales corresponde a una función de comando proporcionada por el entorno del host.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.MenuCommands.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.MenuCommands" />.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se puede utilizar para tener acceso al menú de la bandeja de componentes.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.ContainerMenu">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se puede utilizar para tener acceso al menú contenedor.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.DesignerProperties">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se puede utilizar para tener acceso a la página de propiedades del diseñador.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.EditLabel">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador para editar etiquetas.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyCancel">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se puede utilizar para tener acceso al controlador de la tecla de cancelación.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyDefaultAction">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se puede utilizar para tener acceso al controlador de la tecla predeterminada.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyEnd">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla Fin.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyHome">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla Inicio.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyInvokeSmartTag">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de invocación de etiqueta inteligente.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveDown">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite mover hacia abajo.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveLeft">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite mover a la izquierda.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveRight">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite mover a la derecha.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveUp">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite mover hacia arriba.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeDown">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite desplazar hacia abajo.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeHeightDecrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite reducir el alto.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeHeightIncrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite aumentar el alto.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeLeft">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite desplazar a la izquierda.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeRight">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite desplazar a la derecha.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeUp">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite desplazar hacia arriba.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeWidthDecrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite reducir el ancho.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeWidthIncrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite aumentar el ancho.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyReverseCancel">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite invertir la cancelación.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySelectNext">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite seleccionar lo siguiente.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySelectPrevious">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite seleccionar lo anterior.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyShiftEnd">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de las teclas MAYÚS-FIN.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyShiftHome">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de las teclas MAYÚS-INICIO.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeHeightDecrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite reducir el alto del tamaño.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeHeightIncrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite aumentar el alto del tamaño.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeWidthDecrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite reducir el ancho del tamaño.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeWidthIncrease">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla que permite aumentar el ancho del tamaño.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyTabOrderSelect">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para tener acceso al controlador de la tecla de seleccionar el orden de tabulación.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.SelectionMenu">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se puede utilizar para tener acceso al menú de selección.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.SetStatusRectangle">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para establecer el rectángulo de estado.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.SetStatusText">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que puede utilizarse para establecer el texto del rectángulo de estado.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> que se puede utilizar para tener acceso al menú de selección de la bandeja.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ParentControlDesigner">
      <summary>Extiende el comportamiento del modo de diseño de un <see cref="T:System.Windows.Forms.Control" /> que admite controles anidados.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.AddPaddingSnapLines(System.Collections.ArrayList@)">
      <summary>Agrega las líneas de ajuste del relleno.</summary>
      <param name="snapLines">Control <see cref="T:System.Collections.ArrayList" /> que contiene los objetos <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.AllowControlLasso">
      <summary>Obtiene un valor que indica si los controles seleccionados volverán a ser principales.</summary>
      <returns>Es <see langword="true" /> si los controles que se seleccionaron mediante lazo en la superficie del diseñador se volverán a hacer primarios de este control de diseñador.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.AllowGenericDragBox">
      <summary>Obtiene un valor que indica si se debe dibujar un cuadro de arrastre genérico al arrastrar un elemento del cuadro de herramientas sobre la superficie del diseñador.</summary>
      <returns>Es <see langword="true" /> si se debe dibujar un cuadro de arrastre genérico al arrastrar un elemento del cuadro de herramientas sobre la superficie del diseñador; en caso contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.AllowSetChildIndexOnDrop">
      <summary>Obtiene un valor que indica si se debe mantener el orden Z de los controles arrastrados cuando se colocan en un control <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" />.</summary>
      <returns>Es <see langword="true" /> si se debe mantener el orden Z de los controles arrastrados cuando se colocan en un control <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanAddComponent(System.ComponentModel.IComponent)">
      <summary>Se invoca cuando se agrega un componente al contenedor primario.</summary>
      <param name="component">Componente que se va a probar para determinar si tiene errores.</param>
      <returns>Es <see langword="true" /> si <paramref name="component" /> se puede agregar; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanParent(System.Windows.Forms.Control)">
      <summary>Indica si el control especificado puede ser secundario del control que administra este diseñador.</summary>
      <param name="control">
        <see cref="T:System.Windows.Forms.Control" /> que se va a probar.</param>
      <returns>Es <see langword="true" /> si el control especificado puede ser secundario del control que administra este diseñador; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanParent(System.Windows.Forms.Design.ControlDesigner)">
      <summary>Indica si el control administrado por el diseñador especificado puede ser secundario del control que administra este diseñador.</summary>
      <param name="controlDesigner">Diseñador del control que se va a probar.</param>
      <returns>Es <see langword="true" /> si el control administrado por el diseñador especificado puede ser secundario del control que administra este diseñador; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem)">
      <summary>Crea un componente o control a partir de la herramienta especificada y lo agrega al documento de diseño actual.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> a partir del cual se va a crear un componente.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem,System.Drawing.Point)">
      <summary>Crea un componente o control a partir de la herramienta especificada y lo agrega al documento de diseño actual en la ubicación especificada.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> a partir del cual se va a crear un componente.</param>
      <param name="location">
        <see cref="T:System.Drawing.Point" /> donde se centrará el componente, en coordenadas de pantalla de la vista en tiempo de diseño.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem,System.Drawing.Rectangle)">
      <summary>Crea un componente o control a partir de la herramienta especificada y lo agrega al documento de diseño actual dentro de los límites del rectángulo especificado.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> a partir del cual se va a crear un componente.</param>
      <param name="bounds">
        <see cref="T:System.Drawing.Rectangle" /> que indica la ubicación y tamaño del componente creado a partir de la herramienta. Los valores <see cref="P:System.Drawing.Rectangle.X" /> e <see cref="P:System.Drawing.Rectangle.Y" /> de <see cref="T:System.Drawing.Rectangle" /> indican las coordenadas de pantalla de la vista en tiempo de diseño de la esquina superior izquierda del componente.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateToolCore(System.Drawing.Design.ToolboxItem,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>Proporciona la funcionalidad central de todos los métodos <see cref="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem)" />.</summary>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> a partir del cual se va a crear un componente.</param>
      <param name="x">La posición horizontal, en coordenadas de la vista en tiempo de diseño, de la ubicación del borde izquierdo de la herramienta, si se ha especificado un tamaño; la posición horizontal del centro de la herramienta, si no se ha especificado ningún tamaño.</param>
      <param name="y">La posición vertical, en coordenadas de la vista en tiempo de diseño, de la ubicación del borde superior de la herramienta, si se ha especificado un tamaño; la posición vertical del centro de la herramienta, si no se ha especificado ningún tamaño.</param>
      <param name="width">Ancho de la herramienta. Este parámetro se pasa por alto si el parámetro <paramref name="hasSize" /> se establece en <see langword="false" />.</param>
      <param name="height">Alto de la herramienta. Este parámetro se pasa por alto si el parámetro <paramref name="hasSize" /> se establece en <see langword="false" />.</param>
      <param name="hasLocation">Es <see langword="true" /> si se ha especificado la ubicación del componente; es <see langword="false" /> si el componente se debe colocar en el centro del control actualmente seleccionado.</param>
      <param name="hasSize">Es <see langword="true" /> si se especifica el tamaño del componente; es <see langword="false" /> si se van a utilizar los valores del alto y ancho del componente.</param>
      <returns>Matriz de los componentes creados a partir de la herramienta.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.DefaultControlLocation">
      <summary>Obtiene la ubicación predeterminada de un control agregado al diseñador.</summary>
      <returns>
        <see cref="T:System.Drawing.Point" /> que indica la ubicación predeterminada de un control agregado al diseñador.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados utilizados por el objeto <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.DrawGrid">
      <summary>Obtiene o establece un valor que indica si se debe dibujar una cuadrícula en el control para este diseñador.</summary>
      <returns>Es <see langword="true" /> si se debe dibujar una cuadrícula en el control en el diseñador; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.EnableDragRect">
      <summary>Obtiene un valor que indica si el diseñador dibuja rectángulos de arrastre.</summary>
      <returns>Es <see langword="true" /> si se dibujan rectángulos de arrastre; en caso contrario, es <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetControl(System.Object)">
      <summary>Obtiene el control del componente especificado desde el diseñador.</summary>
      <param name="component">Componente del que se va a recuperar el control.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Control" /> al que pertenece el componente especificado.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetControlGlyph(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>Obtiene un glifo del cuerpo que representa los límites del control.</summary>
      <param name="selectionType">Un valor <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> que especifica el estado de la selección.</param>
      <returns>Un glifo del cuerpo que representa los límites del control.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetGlyphs(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>Obtiene una colección de objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> que representan los bordes de selección y los identificadores de agarre de un control estándar.</summary>
      <param name="selectionType">Un valor <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> que especifica el estado de la selección.</param>
      <returns>Una colección de objetos <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetParentForComponent(System.ComponentModel.IComponent)">
      <summary>Utilizado por clases derivadas para determinar si devuelve el control que se está dibujando o algún otro control <see cref="T:System.ComponentModel.Container" /> al agregarle un componente.</summary>
      <param name="component">Componente para el cual se va a recuperar el control <see cref="T:System.Windows.Forms.Control" /> principal.</param>
      <returns>Control <see cref="T:System.Windows.Forms.Control" /> principal para el componente.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetUpdatedRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary>Actualiza la posición del rectángulo especificado y lo alinea en la cuadrícula si el modo de alineación en la cuadrícula está habilitado.</summary>
      <param name="originalRect">
        <see cref="T:System.Drawing.Rectangle" /> que indica la posición inicial del componente que se va a actualizar.</param>
      <param name="dragRect">
        <see cref="T:System.Drawing.Rectangle" /> que indica la nueva posición del componente.</param>
      <param name="updateSize">Es <see langword="true" /> para actualizar el tamaño del rectángulo, si ha habido cambios; en caso contrario, es <see langword="false" />.</param>
      <returns>Rectángulo que indica la posición del componente en coordenadas de pantalla de la vista en tiempo de diseño. Si no se realizan cambios, este método devuelve el rectángulo original.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.GridSize">
      <summary>Obtiene o establece el tamaño de cada cuadro de la cuadrícula que se dibuja cuando el diseñador está en modo de dibujo de cuadrícula.</summary>
      <returns>
        <see cref="T:System.Drawing.Size" /> que representa el tamaño de cada cuadro de la cuadrícula dibujada en un formulario o control de usuario.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Drawing.Size" /> se encuentra fuera del intervalo permitido para la propiedad <see cref="P:System.Windows.Forms.Design.ParentControlDesigner.GridSize" />. El valor mínimo predeterminado es 2 y el valor máximo predeterminado es 200.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Inicializa el diseñador con el componente especificado.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> que se va a asociar al diseñador.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Inicializa un componente recién creado.</summary>
      <param name="defaultValues">Un diccionario de valores predeterminados de nombre y valor que se van a aplicar a propiedades. Puede ser <see langword="null" /> si no se especifican valores predeterminados.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.InvokeCreateTool(System.Windows.Forms.Design.ParentControlDesigner,System.Drawing.Design.ToolboxItem)">
      <summary>Crea una herramienta a partir del <see cref="T:System.Drawing.Design.ToolboxItem" /> especificado.</summary>
      <param name="toInvoke">
        <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" /> con el que se va a utilizar la herramienta.</param>
      <param name="tool">
        <see cref="T:System.Drawing.Design.ToolboxItem" /> a partir del cual se va a crear una herramienta.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.MouseDragTool">
      <summary>Obtiene un valor que indica si el diseñador tiene una herramienta válida durante una operación de arrastre.</summary>
      <returns>La herramienta que se está arrastrando, si se está creando un componente, o <see langword="null" /> si no hay ninguna herramienta.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragComplete(System.Windows.Forms.DragEventArgs)">
      <summary>Llamado para limpiar una operación de arrastrar y colocar.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>Se le llama cuando un objeto de arrastrar y colocar se coloca en la vista del diseñador del control.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>Se le llama cuando un objeto de arrastrar y colocar entra en la vista del diseñador del control.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragLeave(System.EventArgs)">
      <summary>Se llama cuando un objeto de arrastrar y colocar sale de la vista del diseñador del control.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>Se le llama cuando un objeto de arrastrar y colocar se arrastra sobre la vista del diseñador del control.</summary>
      <param name="de">
        <see cref="T:System.Windows.Forms.DragEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
      <summary>Se le llama cuando se presiona el botón primario del mouse y se mantiene presionado mientras está sobre el componente.</summary>
      <param name="x">La coordenada x del mouse, en coordenadas de pantalla.</param>
      <param name="y">La coordenada y del mouse, en coordenadas de pantalla.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragEnd(System.Boolean)">
      <summary>Se le llama al final de una operación de arrastrar y colocar para terminar o cancelar la operación.</summary>
      <param name="cancel">Es <see langword="true" /> para cancelar la operación de arrastrar; es <see langword="false" /> para confirmarla.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
      <summary>Se le llama en cada movimiento del mouse durante una operación de arrastrar y colocar.</summary>
      <param name="x">La coordenada x del mouse, en coordenadas de pantalla.</param>
      <param name="y">La coordenada y del mouse, en coordenadas de pantalla.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>Se llama cuando el control que el diseñador está administrando tiene su superficie dibujada, de manera que el diseñador pueda dibujar otros adornos en la parte superior del control.</summary>
      <param name="pe">
        <see cref="T:System.Windows.Forms.PaintEventArgs" /> que proporciona datos para el evento.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnSetCursor">
      <summary>Permite cambiar el cursor actual del mouse.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Ajusta el conjunto de propiedades que el componente expondrá mediante un <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">
        <see cref="T:System.Collections.IDictionary" /> que contiene las propiedades de la clase del componente.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.SnapLines">
      <summary>Obtiene una lista de objetos <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> que representan los puntos de alineación significativos de este control.</summary>
      <returns>Lista de objetos <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> que representan los puntos de alineación significativos de este control.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ScrollableControlDesigner">
      <summary>Clase base del diseñador para extender el comportamiento del modo de diseño de un <see cref="T:System.Windows.Forms.Control" /> que debe recibir mensajes de desplazamiento.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.ScrollableControlDesigner" />.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.GetHitTest(System.Drawing.Point)">
      <summary>Indica si el control debe controlar un clic con el mouse en el punto especificado.</summary>
      <param name="pt">
        <see cref="T:System.Drawing.Point" /> que indica la posición en que se ha hecho clic con el mouse, en coordenadas de la pantalla.</param>
      <returns>Es <see langword="true" /> si el control controla un clic en el punto especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>Procesa mensajes de Windows y pasa mensajes WM_HSCROLL y WM_VSCROLL al control en tiempo de diseño.</summary>
      <param name="m">
        <see cref="T:System.Windows.Forms.Message" /> para procesar.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.SelectionRules">
      <summary>Define los identificadores que se utilizan para indicar las reglas de selección de un componente.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.AllSizeable">
      <summary>Indica si se puede cambiar el tamaño del componente en todas las direcciones.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.BottomSizeable">
      <summary>Indica que el componente permite cambiar su tamaño desde la parte inferior.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.LeftSizeable">
      <summary>Indica que el componente permite cambiar su tamaño desde la izquierda.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Locked">
      <summary>Indica que el componente está bloqueado en su contenedor. Reemplaza los marcadores de bit <see cref="F:System.Windows.Forms.Design.SelectionRules.Moveable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.AllSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.BottomSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.LeftSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.RightSizeable" /> y <see cref="F:System.Windows.Forms.Design.SelectionRules.TopSizeable" /> de esta enumeración.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Moveable">
      <summary>Indica que el componente admite una propiedad de ubicación que permite moverlo por la pantalla.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.None">
      <summary>Indica que no hay atributos de selección especiales.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.RightSizeable">
      <summary>Indica que el componente permite cambiar su tamaño desde la derecha.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.TopSizeable">
      <summary>Indica que el componente permite cambiar su tamaño desde la parte superior.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Visible">
      <summary>Indica que el componente tiene alguna forma de interfaz de usuario visible y que el servicio de selección está dibujando un borde de selección alrededor de su interfaz de usuario. Si un componente seleccionado ya tiene establecida esta regla, puede suponer que el componente implementa <see cref="T:System.ComponentModel.IComponent" /> y que está asociado a la instancia correspondiente del diseñador.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ThemedScrollbarMode">
      <summary>Un valor que indica si las barras de desplazamiento de una ventana y sus elementos secundarios van a ser temáticas al mostrarlas en el diseñador de Visual Studio.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarMode.All">
      <summary>La ventana y todos sus elementos secundarios tendrán barras de desplazamiento temáticas.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarMode.None">
      <summary>La ventana y todos sus elementos secundarios no serán temáticos.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarMode.OnlyTopLevel">
      <summary>La ventana tendrá barras de desplazamiento temáticas pero todos sus elementos secundarios no serán temáticos.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ThemedScrollbarWindow">
      <summary>Representa una ventana y un valor que indica cómo las barras de desplazamiento deben ser temáticas al mostrarlas en el diseñador de Visual Studio.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarWindow.Handle">
      <summary>Identificador de la ventana.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarWindow.Mode">
      <summary>Un valor que indica cómo las barras de desplazamiento de ventana deben ser temáticas al mostrarlas en el diseñador de Visual Studio.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService">
      <summary>Proporciona acceso para obtener y establecer los valores de las opciones de un diseñador de Windows Forms.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.WindowsFormsDesignerOptionService.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService" />.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.WindowsFormsDesignerOptionService.CompatibilityOptions">
      <summary>Obtiene el objeto <see cref="T:System.Windows.Forms.Design.DesignerOptions" /> expuesto por el objeto <see cref="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService" />.</summary>
      <returns>Objeto <see cref="T:System.Windows.Forms.Design.DesignerOptions" /> expuesto por el objeto <see cref="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService" />.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.WindowsFormsDesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Rellena una colección <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options">Colección que se va a rellenar.</param>
    </member>
  </members>
</doc>
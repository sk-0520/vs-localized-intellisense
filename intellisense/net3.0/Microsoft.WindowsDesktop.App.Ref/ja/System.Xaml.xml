<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary>XAML マークアップ拡張機能特性のレガシ報告の型を記録します。</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この属性が報告する戻り値の型。</param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary>この属性が報告する戻り値の型を取得または設定します。</summary>
      <returns>この属性が報告する戻り値の型。</returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary>プロパティまたは型をアンビエントとして扱うよう指定しています。 アンビエントの概念は XAML プロセッサがメンバーの型の所有者を確認する方法と関連します。</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.AmbientAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>.NET Framework XAML サービスの <see langword="x:Array" /> サポートを実装します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ArrayExtension" /> クラスの新しいインスタンスを初期化します。 これにより、空の配列が作成されます。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>指定された生の配列に基づいて、<see cref="T:System.Windows.Markup.ArrayExtension" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elements">作成された配列のメンバーを追加する配列の内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.Markup.ArrayExtension" /> クラスの新しいインスタンスを初期化し、配列の型を初期化します。</summary>
      <param name="arrayType">新しい配列のオブジェクトの型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>指定したオブジェクトを配列の末尾に追加します。</summary>
      <param name="value">配列の末尾に追加するオブジェクト。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>新しい配列項目としてテキスト ノードを追加します。</summary>
      <param name="text">配列の末尾に追加するテキスト。</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>配列の内容を取得します。 XAML のコレクション構文を使用して XAML で設定可能。</summary>
      <returns>配列の内容。</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>
        <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> の値で指定されたオブジェクトの数に合わせてサイズが設定されている配列を返します。</summary>
      <param name="serviceProvider">マークアップ拡張機能のサービスを提供できるオブジェクト。</param>
      <returns>作成された配列、または null。</returns>
      <exception cref="T:System.InvalidOperationException">有効な <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> を提供しなかった配列が処理されました。  

または - 
配列の宣言型 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> と、その <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 値 (1 つまたは複数) の間で型が一致しません。</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>
        <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" /> の呼び出し時に作成される配列の型を取得または設定します。</summary>
      <returns>配列の型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary>パラメーターなし以外のコンストラクター構文を使用してオブジェクトを初期化できることと、指定した名前のプロパティが構造情報を提供できることを指定します。  この情報は主に XAML シリアル化用です。</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="argumentName">関連付けられたプロパティを初期化するコンストラクターの名前。</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary>関連するプロパティを初期化するコンストラクターの name パラメーターを取得します。</summary>
      <returns>コンストラクターの名前。 CLR バッキングの場合、これは関連するコンストラクター パラメーターの <see cref="P:System.Reflection.ParameterInfo.Name" /> に対応します。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>型のどのプロパティが XAML コンテンツ プロパティであるかを示します。 XAML プロセッサは、属性付き型の XAML 表現の XAML 子要素を処理するときに、この情報を使用します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>指定された名前を使用して、<see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コンテンツ プロパティであるプロパティのプロパティ名。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>コンテンツ プロパティであるプロパティの名前を取得します。</summary>
      <returns>コンテンツ プロパティであるプロパティの名前。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary>外部コンテンツをラップするために使用される関連するコレクション型に対して 1 つ以上の型を指定します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contentWrapper">コレクション型のコンテンツ ラッパーとして宣言される <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary>この属性に関連付けられているコレクション型のコンテンツ ラッパーとして宣言されている型を取得します。</summary>
      <returns>コレクション型のコンテンツ ラッパーとして宣言されている型。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary>
        <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> プロパティを比較して、指定した <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> がこの <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> と等しいかどうかを判断します。</summary>
      <param name="obj">比較対象の <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</param>
      <returns>
        <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> プロパティが等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary>この属性の一意の識別子を取得します。</summary>
      <returns>属性の一意の識別子。</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.DateTime" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.DateTime" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となる文字列。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>値を変換できる場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定したオブジェクトを <see cref="T:System.String" /> に変換できるかどうかについて判断します。</summary>
      <param name="value">変換の評価対象となるオブジェクト。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="value">
        <see cref="T:System.DateTime" /> に変換する文字列。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.DateTime" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.DateTime" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するオブジェクト。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.DateTime" /> の文字列表現。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> が <see cref="T:System.DateTime" /> ではないか、または <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary>属性付きプロパティが別のプロパティの値に依存することを示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.DependsOnAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">この <see cref="T:System.Windows.Markup.DependsOnAttribute" /> に関連付けられているプロパティが依存するプロパティ。</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary>この <see cref="T:System.Windows.Markup.DependsOnAttribute" /> で宣言されている関連するプロパティの名前を取得します。</summary>
      <returns>関連するプロパティの名前。</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary>この <see cref="T:System.Windows.Markup.DependsOnAttribute" />の一意の識別子を取得します。</summary>
      <returns>一意の識別子。</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary>暗黙のキー値を提供する関連付けられているクラスのプロパティを指定します。 <see langword="x:Key" /> コレクションの項目では、XAML で定義される明示的な <see cref="T:System.Collections.IDictionary" /> 属性ではなく、暗黙のキーが使用されます。</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">暗黙のキー値が用意されたプロパティの名前。</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary>暗黙のキー値が用意されたプロパティの名前を取得します。</summary>
      <returns>暗黙のキー値が用意されたプロパティの名前。</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary>名前付き XAML 要素およびその要素へのイベント ハンドラーのアタッチに対するマークアップのコンパイルとツールのサポートを提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary>イベントと名前をコンパイルされたコンテンツにアタッチします。</summary>
      <param name="connectionId">呼び出しを区別するための識別子トークン。</param>
      <param name="target">イベントと名前の接続先のターゲット。</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary>コンポーネントのコンパイルされたページを読み込みます。</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary>特定の XAML 名前スコープ内の要素の名前にアクセスする方法およびその XAML 名前スコープ内で名前が一意になるように強制する方法に関するコントラクトを定義します。</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary>指定された識別名を持つオブジェクトを返します。</summary>
      <param name="name">要求されているオブジェクトの名前識別子。</param>
      <returns>見つかった場合はオブジェクト。 その名前のオブジェクトが見つからなかった場合は <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary>指定された名前を現在の XAML 名前スコープに登録します。</summary>
      <param name="name">登録する名前。</param>
      <param name="scopedElement">指定された <paramref name="name" /> が参照する特定の要素。</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary>指定された名前の登録を現在の XAML 名前スコープから解除します。</summary>
      <param name="name">登録を解除する名前。</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary>XAML 名前スコープ内の名前の辞書を公開するのに役立つ列挙可能な値、コレクション、および辞書サポートを統一します。</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>マークアップ拡張機能の評価に対する状況的なオブジェクトとプロパティの関係を報告するサービスを表します。</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>報告されるターゲット オブジェクトを取得します。</summary>
      <returns>報告されるターゲット オブジェクト。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>報告されるターゲット プロパティの識別子を取得します。</summary>
      <returns>報告されるターゲット プロパティの識別子。</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary>指定されたプロパティを現在のスコープでアンビエントとして扱う必要があるかどうかを照会します。</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary>指定された名前付きプロパティを現在のスコープでアンビエントと見なすことができるかどうかを照会します。</summary>
      <param name="propertyName">アンビエンス状態を確認するプロパティの名前。</param>
      <returns>要求されたプロパティをアンビエントと見なすことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>アプリケーション コンテキストを使用して指定された相対 URI を絶対 URI に解決できるサービスを表します。</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>現在のアプリケーション コンテキストのベース URI を取得または設定します。</summary>
      <returns>アプリケーション コンテキストのベース URI。</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> に提供されるコンテキストを定義します。 このコンテキストは、特殊なケースのシリアル化や別のモードのシリアル化を有効にするのに使用できます。</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>指定されたプロパティ記述子の <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
      <param name="descriptor">変換されるプロパティの記述子。</param>
      <returns>指定されたプロパティをシリアル化できる <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>指定された型に関連付けられている <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
      <param name="type">変換する値の型。</param>
      <returns>指定された型をシリアル化できる <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary>XAML マークアップの名前付き要素から適切な CLR 型に解決するサービスを表します。</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary>名前付き XAML 型を対応する CLR の <see cref="T:System.Type" /> に解決します。</summary>
      <param name="qualifiedTypeName">解決する XAML 型名。 オプションで、型名は XML 名前空間のプレフィックスで修飾できます。 それ以外の場合は、現在の既定の XML 名前空間が仮定されます。</param>
      <returns>
        <paramref name="qualifiedTypeName" /> が解決される <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary>.NET Framework. XAML サービスによってサポートされる XAML マークアップ拡張機能の実装の基本クラス、および他の XAML リーダーと XAML ライターを提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtension" /> から派生したクラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>派生クラスで実装された場合、このマークアップ拡張機能のターゲット プロパティの値として提供されるオブジェクトを返します。</summary>
      <param name="serviceProvider">マークアップ拡張機能のサービスを提供できるサービス プロバイダーのヘルパー。</param>
      <returns>拡張機能が適用されたプロパティで設定するオブジェクト値。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute">
      <summary>マークアップ拡張で返すことができるかっこ文字を報告します。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.#ctor(System.Char,System.Char)">
      <summary>指定した文字を使用して <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="openingBracket">左角かっこ文字を定義する <see cref="T:System.Char" />。</param>
      <param name="closingBracket">右角かっこ文字を定義する <see cref="T:System.Char" />。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.ClosingBracket">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtension" /> で終了区切り記号として使用する文字を指定します。</summary>
      <returns>文字を表す <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.OpeningBracket">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtension" /> で開始区切り記号として使用する文字を指定します。</summary>
      <returns>文字を表す <see cref="T:System.Char" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary>マークアップ拡張機能で返すことができる型を報告します。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary>指定した <see cref="T:System.Type" /> を使用して <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="returnType">この属性が報告する戻り値の型。</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>非推奨。使用しないでください。</summary>
      <param name="returnType">この .NET Framework 属性 が報告する戻り値の型。</param>
      <param name="expressionType">非推奨。使用しないでください。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary>非推奨。使用しないでください。</summary>
      <returns>非推奨。使用しないでください。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary>この .NET Framework 属性 が報告する <see cref="T:System.Windows.Markup.MarkupExtension" /> 戻り値の型を取得します。</summary>
      <returns>
        <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> .NET Framework 属性 実装のタイプ セーフな戻り値の型。</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary>宣言的 XAML でクラスのメンバーを定義するマークアップ手法で使用される基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.MemberDefinition" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary>派生クラスで実装された場合、定義するメンバーの名前を取得または設定します。</summary>
      <returns>定義するメンバーの名前。</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary>文字列名をその名前を持つオブジェクトのオブジェクト参照に変換する、またはオブジェクト グラフからオブジェクトの名前を返す型変換を提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.NameReferenceConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターが特定の型のオブジェクトを別のオブジェクトに変換できるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターがオブジェクトを指定された型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定されたコンテキストとカルチャ情報を使用して、提供されたオブジェクトを別のオブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換する参照名の文字列。</param>
      <returns>返されたオブジェクト。これは、関連するバッキング アセンブリで型マッピングされ、XAML 名前参照により XAML で宣言できる任意のオブジェクトである可能性があります。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> が null 文字列または空の文字列です。  

または - 
<see cref="T:System.Xaml.IXamlNameResolver" /> サービスが見つからないか、無効です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>オブジェクトを指定された型に変換します。 これはオブジェクト グラフ内のオブジェクトの XAML 参照名を返すためのものです。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">参照名を取得するオブジェクト。</param>
      <param name="destinationType">返す型。 常に <see cref="T:System.String" /> 型を参照する必要があります。</param>
      <returns>入力 <paramref name="value" /> オブジェクトの参照名。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xaml.IXamlNameProvider" /> サービスが見つからないか、無効です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary>XAML 名前スコープの値を提供する関連付けらているクラスのプロパティを指定します。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary>指定した名前を使用して、<see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">XAML 名前スコープを提供する属性付き型のプロパティの名前。</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>指定した名前および型を使用して、<see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">XAML 名前スコープを提供するアタッチ可能なメンバーの名前。</param>
      <param name="type">XAML 名前スコープを提供するアタッチ可能なメンバーの所有者型。</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary>XAML 名前スコープを提供するプロパティの名前を取得します。</summary>
      <returns>XAML 名前スコープを提供するプロパティの名前を示す文字列値。</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary>XAML 名前スコープのサポートを提供する添付プロパティの所有者タイプを取得します。</summary>
      <returns>XAML 名前スコープのサポートを提供する添付プロパティの所有者タイプである <see cref="T:System.Type" /> 値。または <see langword="null" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>XAML で値を明示的に null に設定するときに使用できる null オブジェクトを返すために、XAML マークアップ拡張機能を実装します。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.NullExtension" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>マークアップ拡張機能の出力の値として使用する <see langword="null" /> を提供します。</summary>
      <param name="serviceProvider">マークアップ拡張機能の実装のサービスを提供できるオブジェクト。</param>
      <returns>null 参照。</returns>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary>宣言的 XAML 内のクラスのプロパティを定義するマークアップ手法をサポートします。</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.PropertyDefinition" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary>関連する CLR 属性のリストを取得します。</summary>
      <returns>関連する属性のリスト。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary>定義されたプロパティのアクセス レベルを取得または設定します。</summary>
      <returns>文字列としての、定義されたプロパティのアクセス レベル。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary>定義するプロパティの名前を取得または設定します。</summary>
      <returns>定義するプロパティの名前。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary>定義するプロパティの <see cref="T:System.Xaml.XamlType" /> を取得または設定します。</summary>
      <returns>定義するプロパティの XAML 型識別子。</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary>
        <c>{x:Reference}</c> のマークアップ拡張機能を実装します。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.Reference" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary>
        <paramref name="name" /> 引数で <see cref="T:System.Windows.Markup.Reference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">参照する要素の XAML 名。</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary>参照を取得する XAML の名前を取得または設定します。</summary>
      <returns>参照を取得する要素の XAML 名。</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary>ターゲット プロパティの値であるオブジェクトを返します。 <see cref="T:System.Windows.Markup.Reference" /> 型の場合、これは指定した <see cref="P:System.Windows.Markup.Reference.Name" /> が参照するオブジェクトです。</summary>
      <param name="serviceProvider">
        <see cref="T:System.Xaml.IXamlNameResolver" /> サービスを実装するクラス。</param>
      <returns>ターゲット プロパティの値。 これは関連するバッキング アセンブリで型マッピングされた任意のオブジェクトである可能性があります。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceProvider" /> 値は、<see cref="T:System.Xaml.IXamlNameResolver" /> サービスを実装しません。  

または - 
構造または位置指定を使用して、<see cref="P:System.Windows.Markup.Reference.Name" /> 値が設定されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary>Visual Studio プロジェクト ファイル内の <see langword="RootNamespace" /> プロパティの値を特定するために使用するアセンブリ レベル属性を表します。</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameSpace">ルート名前空間の値。</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary>Visual Studio プロジェクト ファイルの <see langword="RootNamespace" /> プロパティの値に対応する文字列を取得します。</summary>
      <returns>Visual Studio プロジェクトファイル内の<see langword="RootNamespace" />プロパティの値に対応する文字列。</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary>XAML x:Name attribute にマップする型のプロパティを報告する型レベル属性を表します。</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">クラスの <see langword="x:Name" /> に等価なものとして使用するプロパティの名前。</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary>この <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> で指定されるランタイム名のプロパティの名前を取得します。</summary>
      <returns>プロパティの名前。</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>静的フィールドとプロパティ参照を返すマークアップ拡張機能を実装します。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.StaticExtension" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>指定された <paramref name="member" /> 文字列を使用して、<see cref="T:System.Windows.Markup.StaticExtension" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">参照を作成する対象となるメンバーを識別する文字列。 この文字列では形式 <c>prefix:typeName.fieldOrPropertyName</c> が使用されています。 <c>prefix</c> は XAML 名前空間のマッピング プレフィックスで、既定の XAML 名前空間にマップされない静的な値を参照する場合にのみ必要です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>サービスで提供される型リゾルバーに基づいて静的なフィールドまたはプロパティを解決するために使用される、メンバー名文字列を取得または設定します。</summary>
      <returns>参照を作成する対象となるメンバーを識別する文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Windows.Markup.StaticExtension.Member" /> を <see langword="null" /> に設定しようとしました。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary>返す静的なメンバーを定義する <see cref="T:System.Type" /> を取得または設定します。</summary>
      <returns>返す静的なメンバーを定義する <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Windows.Markup.StaticExtension.MemberType" /> を <see langword="null" /> に設定しようとしました。</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>この拡張機能を適用するプロパティで設定するオブジェクトの値を返します。 <see cref="T:System.Windows.Markup.StaticExtension" /> の場合、戻り値は、要求された静的なメンバーの評価対象となる静的な値です。</summary>
      <param name="serviceProvider">マークアップ拡張機能のサービスを提供できるオブジェクト。 サービス プロバイダーは、型リゾルバー (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />) を実装するサービスを提供することが求められます。</param>
      <returns>拡張機能が適用されたプロパティで設定する静的な値。</returns>
      <exception cref="T:System.InvalidOperationException">拡張機能の <paramref name="member" /> 値は、評価時には <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 文字列は、正しく解析されなかった部分があります。 

または - 
<paramref name="serviceProvider" /> が <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> のサービスを提供しませんでした。  

または - 
<paramref name="member" /> 値は、静的メンバーに対して解決されませんでした。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary>マークアップで型の要素を囲んでいる空白をシリアル化時に削除するよう XAML プロセッサに指示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>文字列入力に基づいて、<see cref="T:System.Type" /> を返すマークアップ拡張機能を実装します。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.TypeExtension" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>指定した <paramref name="typeName" /> 文字列に基づいて <see cref="T:System.Windows.Markup.TypeExtension" /> 値を初期化し、<see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">参照を作成する対象となる型を識別する文字列。 この文字列の形式は <c>prefix:className</c> です。 <c>prefix</c> は XAML 名前空間のマッピング プレフィックスで、既定の XAML 名前空間にマップされない型を参照する場合にのみ必要です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> を <see langword="null" /> として指定しようとしました。</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>型を直接宣言して、<see cref="T:System.Windows.Markup.TypeExtension" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この <see cref="T:System.Windows.Markup.TypeExtension" /> によって表される型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" /> です</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>この拡張機能を適用するプロパティで設定するオブジェクトを返します。 <see cref="T:System.Windows.Markup.TypeExtension" /> の場合、これは、要求された型名の評価対象となる <see cref="T:System.Type" /> 値です。</summary>
      <param name="serviceProvider">マークアップ拡張機能のサービスを提供できるオブジェクト。 プロバイダーは、 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />に対するサービスを提供することが求められます。</param>
      <returns>拡張機能が適用されたプロパティで設定する <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.InvalidOperationException">拡張機能の <paramref name="member" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 文字列は、正しく解析されなかった部分があります。  
または 
 <paramref name="serviceProvider" /> が <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> のサービスを提供しませんでした。  

または - 
<paramref name="typeName" /> 値が、型に対して解決されませんでした。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> が <see langword="null" /></exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>この拡張機能の型情報を取得または設定します。</summary>
      <returns>確立された型。 ランタイムの場合は、get アクセスで <see langword="null" /> になることがありますが、 <see langword="null" />に設定することはできません。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" /> を設定しようとしました。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>このマークアップ拡張機能で表される型名を取得または設定します。</summary>
      <returns>型を識別する文字列。 この文字列の形式はprefix<c>:</c>classNameです。 (prefix は XML 名前空間のマッピング プレフィックスで、WPF の既定の XML 名前空間 (http://schemas.microsoft.com/winfx/2006/xaml/presentation) にマップされていない型を参照するためにだけ必要です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" />に設定しようとしました。</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary>x:Uid ディレクティブ値を提供するクラスの CLR プロパティを示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">
        <see langword="x:Uid" /> 値を提示するプロパティの名前。</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary>x:Uid ディレクティブ値を表す CLR プロパティの名前を取得します。</summary>
      <returns>x:Uid Directiveを表す CLR プロパティの名前。</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary>この型が XAML オブジェクト グラフの作成中に上から下に組み込まれるかどうかを示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="usable">関連付けられているクラスが初期化中に使用可能かどうかを定義します。</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary>関連付けられているクラスが、初期化中に使用できるかどうかを示す値を取得します。</summary>
      <returns>関連付けれているクラスが初期化中に使用できるようであれば <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary>オブジェクト表現からのシリアル化の変換動作を定義する抽象クラス。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>派生クラスでオーバーライドされると、指定した <see cref="T:System.String" /> が、<see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型のインスタンスに変換できるかどうかを確認します。</summary>
      <param name="value">変換の評価対象となる文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>値を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>派生クラスでオーバーライドされたとき、指定されたオブジェクトを <see cref="T:System.String" /> に変換できるかどうかを決定します。</summary>
      <param name="value">変換の評価対象となるオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外は <see langword="false." />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.String" /> を、<see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型のインスタンスに変換します。</summary>
      <param name="value">変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <paramref name="value" /> に基づいて <see cref="T:System.Windows.Markup.ValueSerializer" /> の実装でサポートされる型の新しいインスタンス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> を変換できません。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>派生クラスでオーバーライドされると、指定したオブジェクトを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定されたオブジェクトの文字列形式。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> を変換できません。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary>変換を実行できなかった場合にスローされる例外を返します。</summary>
      <param name="value">変換できなかったオブジェクト。</param>
      <returns>
        <see langword="ConvertFrom" /> の変換を実行できない場合にスローされる例外の <see cref="T:System.Exception" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary>変換を実行できなかった場合にスローされる例外を返します。</summary>
      <param name="value">変換できなかったオブジェクト。</param>
      <param name="destinationType">コンバーターが変換しようとした型を表す型。</param>
      <returns>
        <see langword="ConvertTo" /> の変換を実行できない場合にスローされる例外の <see cref="T:System.Exception" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>プロパティの CLR プロパティ記述子を渡すことにより、プロパティに対して宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
      <param name="descriptor">シリアル化するプロパティの CLR プロパティ記述子。</param>
      <returns>指定したプロパティに関連付けられているシリアライザー。 <see langword="null" /> を返す場合があります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定したコンテキストを使用して、指定されたプロパティに宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
      <param name="descriptor">シリアル化するプロパティの記述子。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定したプロパティに関連付けられているシリアライザー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary>指定した型に宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
      <param name="type">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得する対象の型。</param>
      <returns>指定した型に関連付けられているシリアライザー。 <see langword="null" /> を返す場合があります。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定したコンテキストを使用して、指定された型に宣言された <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得します。</summary>
      <param name="type">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> を取得する対象の型。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した型に関連付けられているシリアライザー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> によって参照される型の列挙体を取得します。</summary>
      <param name="value">シリアル化されている型。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>このシリアライザーによって変換された型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>型またはプロパティがシリアル化時に使用する <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスを識別します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>アセンブリ修飾型名文字列を使用して、<see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueSerializerTypeName">使用する <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスのアセンブリ修飾型名文字列。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>指定された型を使用して、<see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="valueSerializerType">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスの型を表す型。</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>この属性で報告される <see cref="T:System.Windows.Markup.ValueSerializer" /> クラスの型を取得します。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" />の型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>この型またはプロパティの <see cref="T:System.Windows.Markup.ValueSerializer" /> 型のアセンブリ修飾名を取得します。</summary>
      <returns>型のアセンブリ修飾名。</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary>コレクション型が XAML プロセッサで有意な空白として処理される必要があることを示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary>クラスまたはプロパティに XAML の遅延読み込みの使用 (テンプレート動作など) が含まれていることを示し、遅延動作を有効にするクラスと、その宛先/コンテンツ タイプを報告します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary>型の文字列名を使用して、<see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="loaderType">実装が遅延読み込み動作に使用する型の文字列名。</param>
      <param name="contentType">遅延読み込み動作の宛先/コンテンツ タイプの型の文字列名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary>CLR <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> の値を使用して、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="loaderType">実装が遅延読み込み動作に使用する CLR <see cref="T:System.Type" /> の値。</param>
      <param name="contentType">遅延読み込み動作の宛先/コンテンツ タイプの CLR <see cref="T:System.Type" /> の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary>遅延読み込み動作の宛先/コンテンツ タイプの CLR <see cref="T:System.Type" /> の値を取得します。</summary>
      <returns>遅延読み込み動作の宛先/コンテンツ タイプの CLR <see cref="T:System.Type" /> の値。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary>実装が遅延読み込み動作に使用する型の文字列名を取得します。</summary>
      <returns>コンバーターが遅延読み込み動作に使用する型の文字列名。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary>実装が遅延読み込み動作に使用する CLR <see cref="T:System.Type" /> の値を取得します。</summary>
      <returns>実装が遅延読み込み動作に使用する CLR <see cref="T:System.Type" /> の値。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary>遅延読み込み動作の宛先/コンテンツ タイプの型の文字列名を取得します。</summary>
      <returns>遅延読み込み動作の宛先/コンテンツ タイプの型の文字列名。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary>クラスはマークアップ拡張機能を使用して値を提供し、マークアップ拡張機能のセット操作で使用するハンドラーを参照することを示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xamlSetMarkupExtensionHandler">マークアップ拡張機能のセット操作で使用するハンドラーの名前</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary>マークアップ拡張機能のセット操作で使用するハンドラーの名前を取得します。</summary>
      <returns>マークアップ拡張機能のセット操作で使用するハンドラーの名前</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary>XAML オブジェクト ライターがマークアップ拡張機能を使用して値を設定するときに呼び出されるコールバックのデータを提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">設定されているメンバーの XAML 型システムおよびスキーマ情報。</param>
      <param name="value">設定されているメンバーに提供されるマークアップ拡張機能の参照。</param>
      <param name="serviceProvider">マークアップ拡張機能に渡されるサービス プロバイダー情報。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary>現在機能している型の基本クラスで定義されるコールバックを呼び出す方法を提供します。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary>この <see cref="T:System.Windows.Markup.MarkupExtension" /> に関連する <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> の参照を取得します。</summary>
      <returns>この <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> に関連するマークアップ拡張機能の参照。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary>マークアップ拡張機能に渡されたサービス プロバイダー情報を取得します。</summary>
      <returns>マークアップ拡張機能に渡されたサービス プロバイダー情報。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary>クラスは型コンバーターを使用して値を提供し、型コンバーターを設定する場合に使用するハンドラーを参照できることを示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xamlSetTypeConverterHandler">操作を設定する型コンバーターで使用するハンドラーの名前。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> で指定された <paramref name="xamlSetTypeConverterHandler" /> の初期値 (ハンドラー名) を取得します。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> で指定された <paramref name="xamlSetTypeConverterHandler" /> の値。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary>XAML ライターが型コンバーターの呼び出しを使用して値を設定するときに呼び出されるコールバックのデータを提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">設定されているメンバーの XAML 型システムおよびスキーマ情報。</param>
      <param name="typeConverter">呼び出される特定の型コンバーターのインスタンス。</param>
      <param name="value">設定されているメンバーに提供する値。</param>
      <param name="serviceProvider">
        <paramref name="typeConverter" /> クラスで使用できるサービス プロバイダー情報。</param>
      <param name="cultureInfo">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> およびその他のメソッドを呼び出すときに <paramref name="typeConverter" /> クラスで使用できるカルチャ情報。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary>現在機能している型の基本クラスで定義されるコールバックを呼び出す方法を提供します。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary>
        <see cref="T:System.Globalization.CultureInfo" /> およびその他のメソッドを呼び出すときに型コンバーター クラスで使用できる <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> の情報を取得します。</summary>
      <returns>型コンバーター クラスで使用できるカルチャ情報。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary>型コンバーター クラスで使用できる <see cref="T:System.IServiceProvider" /> の情報を取得します。</summary>
      <returns>
        <paramref name="typeConverter" /> クラスで使用できるサービス プロバイダー情報。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary>呼び出され、型変換動作を提供する <see cref="T:System.ComponentModel.TypeConverter" /> インスタンスを取得します。</summary>
      <returns>型変換動作を提供する型コンバーター。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> が特定の値に設定されるときに呼び出されるコールバックのデータを提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">設定されているメンバーの XAML 型システムおよびスキーマ情報。</param>
      <param name="value">メンバーに提供する値。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary>派生クラスでオーバーライドされると、現在機能している型の基本クラスで定義される <see langword="SetValue" /> コールバックを呼び出す方法を提供します。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> を使用している呼び出し元が <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> を呼び出さずに値を使用できるかどうかを確認する値を取得または設定します。</summary>
      <returns>値が使用可能で <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> の呼び出しが必要ない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary>設定されているメンバーの XAML 型システムおよび XAML スキーマ情報を取得します。</summary>
      <returns>設定されているメンバーの XAML 型システムおよび XAML スキーマ情報。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary>設定されているメンバーに提供する値を取得します。</summary>
      <returns>設定されているメンバーに提供する値。</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary>
        <see langword="Value" /> ノードの値として表示されるリテラル データを表します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.XData" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary>この <see cref="T:System.Windows.Markup.XData" /> がラップするリテラル値文字列を取得または設定します。</summary>
      <returns>リテラル値文字列。</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary>リテラル データのリーダーを取得または設定します。</summary>
      <returns>リテラル データのリーダー。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary>xml:lang 属性に関連付けるプロパティを識別します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">
        <see langword="xml:lang" /> 属性に関連付けるプロパティ名。</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary>この属性で指定されるプロパティの名前を取得します。</summary>
      <returns>プロパティの名前。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary>XAML 名前空間を別の XAML 名前空間によって包括できることを指定します。 通常、包含する側の XAML 名前空間は、あらかじめ定義した <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> で示されます。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="oldNamespace">参照 XAML 名前空間の識別子。</param>
      <param name="newNamespace">包括する XAML 名前空間の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldNamespace" /> または <paramref name="newNamespace" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary>この属性によって報告される、包括する名前空間の識別子を取得します。</summary>
      <returns>属性で報告される、包括する名前空間の識別子。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary>この属性によって報告される、参照名前空間の識別子を取得します。</summary>
      <returns>参照名前空間の識別子。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>XAML 名前空間と CLR 名前空間の間でアセンブリごとのマッピングを指定します。これは XAML オブジェクト ライターまたは XAML スキーマ コンテキストで、型の解決に使用されます。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlNamespace">XAML 名前空間の識別子。</param>
      <param name="clrNamespace">CLR 名前空間の名前を参照する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> または <paramref name="clrNamespace" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>属性に関連付けられたアセンブリの名前を取得または設定します。</summary>
      <returns>アセンブリ名。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>この属性で指定された CLR 名前空間の文字列名を取得します。</summary>
      <returns>文字列で指定した CLR 名前空間。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>この属性で指定される XAML 名前空間の識別子を取得します。</summary>
      <returns>XAML 名前空間の識別子。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>XAML ファイルに要素と属性を書き込む (シリアル化する) とき、または XAML 編集機能を持つデザイン環境とやり取りするときに、XAML で使用するために XAML 名前空間に関連付ける推奨プレフィックスを示します。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlNamespace">XAML 名前空間の識別子。</param>
      <param name="prefix">推奨プレフィックス文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> または <paramref name="prefix" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>この属性に関連付けられている推奨プレフィックスを取得します。</summary>
      <returns>推奨プレフィックス文字列。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>この属性に関連付けられている XAML 名前空間の識別子を取得します。</summary>
      <returns>XAML 名前空間の識別子。</returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary>
        <see cref="T:System.Xaml.IAmbientProvider" /> 実装の一部として、アンビエント プロパティに関する情報を報告します。</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>
        <see cref="T:System.Xaml.AmbientPropertyValue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="property">アンビエント プロパティを表す識別子。</param>
      <param name="value">報告される値。</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary>アンビエント プロパティを表す XAML 型システム識別子 (<see cref="T:System.Xaml.XamlMember" />) を取得します。</summary>
      <returns>アンビエント プロパティを表す識別子。</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary>アンビエント プロパティの値を取得します。</summary>
      <returns>アンビエント プロパティの値。</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary>アタッチ可能なメンバーの XAML 型システムの識別子表現を提供します。 識別子の構造は、アタッチ可能なメンバーの使用法の <paramref name="declaringType" /><see langword="." /><paramref name="memberName" /> 文字列形式に対応します。</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="declaringType">識別子の <paramref name="declaringType" /> 構成要素。宣言している <see cref="P:System.Xaml.XamlMember.Type" /> の名前と一致する必要があります。</param>
      <param name="memberName">識別子の <paramref name="memberName" /> 構成要素。<see cref="P:System.Xaml.XamlMember.Name" /> と一致する必要があります。</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> の <paramref name="declaringType" /> 構成要素の値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> の <paramref name="declaringType" /> 構成要素の値。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> のこのインスタンスと指定したオブジェクトの値が同一かどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Xaml.AttachableMemberIdentifier" /> と比較するオブジェクト。</param>
      <returns>
        <paramref name="obj" /> が <see cref="T:System.Xaml.AttachableMemberIdentifier" /> の場合、およびこのインスタンスと同じ値を保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary>このインスタンスと、指定した別の <see cref="T:System.Xaml.AttachableMemberIdentifier" /> の値が同一かどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Xaml.AttachableMemberIdentifier" /> と比較する <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</param>
      <returns>2 つのオブジェクトの値が同一の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary>この <see cref="T:System.Xaml.AttachableMemberIdentifier" /> のハッシュ コードを返します。</summary>
      <returns>整数のハッシュ コード。</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> の <paramref name="memberName" /> 構成要素の値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> の <paramref name="memberName" /> 構成要素の値。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>指定した 2 つの <see cref="T:System.Xaml.AttachableMemberIdentifier" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> または <see langword="null" />。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="left" /> の値が <paramref name="right" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>指定した 2 つの <see cref="T:System.Xaml.AttachableMemberIdentifier" /> オブジェクトの値が異なるかどうかを判断します。</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> または <see langword="null" />。</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="left" /> の値が <paramref name="right" /> の値と異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary>現在の <see cref="T:System.String" /> を表す <see cref="T:System.Xaml.AttachableMemberIdentifier" /> を返します。</summary>
      <returns>現在の <see cref="T:System.Xaml.AttachableMemberIdentifier" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary>アタッチ可能なプロパティから値およびアクセサー メソッド情報を取得し、添付プロパティ ストアを操作する静的なヘルパー メソッドを提供します。</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>指定されたアタッチ可能なプロパティ ストアから、すべてのアタッチ可能なプロパティと値のペアをコピー先の配列にコピーします。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" /> を実装する特定のアタッチ可能なプロパティ ストア、または静的な既定のアタッチ可能なプロパティ ストアにアクセスする任意の null でないオブジェクト。</param>
      <param name="array">コピー先の配列。 配列はジェネリック配列であり、次元の指定なしで渡す必要があります。また、構成要素として <see cref="T:System.Xaml.AttachableMemberIdentifier" /> および <see langword="object" /> が含まれている必要があります。</param>
      <param name="index">コピーする位置を示すコピー元インデックス。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary>指定されたストア内のアタッチ可能なプロパティのエントリ数を返します。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" /> を実装する特定のアタッチ可能なプロパティ ストア、または静的な既定のアタッチ可能なプロパティ ストアにアクセスする任意の null でないオブジェクト。</param>
      <returns>ストア内のエントリの数 (整数)。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary>指定されたアタッチ可能なプロパティのエントリを指定されたストアから削除します。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" /> を実装する特定のアタッチ可能なプロパティ ストア、または静的な既定のアタッチ可能なプロパティ ストアにアクセスする任意の null でないオブジェクト。</param>
      <param name="name">ストアから削除するアタッチ可能なプロパティ エントリの識別子。</param>
      <returns>
        <paramref name="name" /> に対応するアタッチ可能なプロパティ エントリがストア内に見つかり、ストアから削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>指定されたストアの指定されたアタッチ可能なプロパティの値を設定します。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" /> を実装する特定のアタッチ可能なプロパティ ストア、または静的な既定のアタッチ可能なプロパティ ストアを使用する任意の null でないオブジェクト。</param>
      <param name="name">値の設定対象となるアタッチ可能なプロパティ エントリの識別子。</param>
      <param name="value">設定する値。</param>
      <exception cref="T:System.InvalidOperationException">ストア内の値を設定できませんでした。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>指定されたストアで、指定されたアタッチ可能なプロパティの値の取得を試みます。 特定のアタッチ可能なプロパティがストア内に存在しない場合、例外はスローされません。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" /> を実装する特定のアタッチ可能なプロパティ ストア、または静的な既定のアタッチ可能なプロパティ ストアを使用する任意の null でないオブジェクト。</param>
      <param name="name">値の取得対象となるアタッチ可能なプロパティ エントリの識別子。</param>
      <param name="value">Out パラメーター。 <paramref name="name" /> がストア内に存在して値を保持している場合、このメソッドから戻ったときに、その値のコピー先オブジェクトが含まれます。</param>
      <returns>ストア内に <paramref name="name" /> に対応するアタッチ可能なプロパティ エントリが見つかり、値が <paramref name="value" /> にポストされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary>指定されたストアで、指定されたアタッチ可能なプロパティの値の取得を試み、ジェネリック出力フォームを返します。 特定のアタッチ可能なプロパティがストア内に存在しない場合、例外はスローされません。</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" /> を実装する特定のアタッチ可能なプロパティ ストア、または静的な既定のアタッチ可能なプロパティ ストアにアクセスする任意の null でないオブジェクト。</param>
      <param name="name">値の取得対象となるアタッチ可能なプロパティ エントリの識別子。</param>
      <param name="value">Out パラメーター。 <paramref name="name" /> がストア内に存在して値を保持している場合、このメソッドから戻ったときに、その値のコピー先オブジェクトが含まれます。</param>
      <typeparam name="T">出力に予測される型。</typeparam>
      <returns>ストア内に <paramref name="name" /> に対応するアタッチ可能なプロパティ エントリが見つかり、値が <paramref name="value" /> にポストされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary>型コンバーターおよびマークアップ拡張機能に、アンビエント プロパティまたはアンビエント型に関する情報アイテムを返すことのできるサービスを表します。</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>要求された型とプロパティのセットに対するアンビエント プロパティ情報項目の列挙可能なセットを返します。</summary>
      <param name="ceilingTypes">オブジェクト グラフの上方向の走査で検出された場合に評価を停止する 1 つ以上の型を指定します。 この型に目的のアンビエント プロパティが保持されています。 <see langword="null" /> でもかまいません。</param>
      <param name="searchLiveStackOnly">保存されたコンテキストを使用しない場合は <see langword="true" />。保存されたコンテキストを使用する場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</param>
      <param name="types">アンビエントと見なされる型を識別する 1 つ以上の型識別子オブジェクトを指定します。</param>
      <param name="properties">アンビエントと見なされるプロパティを識別する 1 つ以上のプロパティ識別子オブジェクトを指定します。</param>
      <returns>要求された型とプロパティのセットに対するアンビエント プロパティ情報アイテムの列挙可能なセット。 返された各 <see cref="T:System.Xaml.AmbientPropertyValue" /> のプロパティ情報は、入力された <paramref name="types" /> または <paramref name="properties" /> のいずれかに一致します。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>要求されたプロパティ セットに対するアンビエント プロパティ情報アイテムの列挙可能なセットを返します。</summary>
      <param name="ceilingTypes">オブジェクト グラフの上方向の走査で検出された場合に評価を停止する 1 つ以上の型を指定します。 この型に目的のアンビエント プロパティが保持されています。 <see langword="null" /> でもかまいません。</param>
      <param name="properties">アンビエントと見なされるプロパティを識別する 1 つ以上のプロパティ識別子オブジェクトを指定します。</param>
      <returns>要求されたプロパティ セットに対するアンビエント プロパティ情報アイテムの列挙可能なセット。 返された各 <see cref="T:System.Xaml.AmbientPropertyValue" /> のプロパティ情報は、入力された <paramref name="properties" /> のいずれかに一致します。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary>要求された型に対する使用可能なアンビエント型のオブジェクト インスタンスの列挙可能なセットを返します。</summary>
      <param name="types">アンビエント型情報を取得する型のセット。</param>
      <returns>要求した <see cref="T:System.Xaml.XamlType" /> 識別子のセットに対する値を表す列挙可能なオブジェクトのセット。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>最初に検出されたプロパティに基づいて、要求されたプロパティ セットから単一のアンビエント プロパティの情報アイテムを返します。</summary>
      <param name="ceilingTypes">オブジェクト グラフの上方向の走査で検出された場合に評価を停止する 1 つ以上の型を指定します。 この型に目的のアンビエント プロパティが保持されています。</param>
      <param name="properties">アンビエントと見なされるプロパティを識別する 1 つ以上のオブジェクトを指定します。</param>
      <returns>
        <paramref name="properties" /> リストで最初に見つかったアンビエント プロパティ値の単一のアンビエント プロパティの情報アイテム。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary>要求された型に対する使用可能なアンビエント型の最初に一致したオブジェクトを返します。</summary>
      <param name="types">アンビエント型情報を取得する型のセット。</param>
      <returns>要求されたセットに対する最初の結果オブジェクト。</returns>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary>アタッチ可能なメンバーが設定されているオブジェクトの、アタッチ可能なメンバー ストアを表します。 このアタッチ可能なメンバー ストアは、<see cref="T:System.Xaml.AttachablePropertyServices" /> を使用して参照できます。</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>このアタッチ可能なメンバー ストアからコピー先の配列に、アタッチ可能なすべてのメンバー/値のペアをコピーします。</summary>
      <param name="array">コピー先の配列。 配列はジェネリック配列であり、次元の指定なしで渡す必要があります。また、構成要素として <see cref="T:System.Xaml.AttachableMemberIdentifier" /> および <see langword="object" /> が含まれている必要があります。</param>
      <param name="index">コピーの開始位置を示すコピー元インデックス。</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary>このアタッチ可能なメンバー ストア内にあるアタッチ可能なメンバー エントリの数を取得します。</summary>
      <returns>ストア内のエントリの数 (整数)。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary>指定されたアタッチ可能なメンバーのエントリを、このアタッチ可能なメンバー ストアから削除します。</summary>
      <param name="attachableMemberIdentifier">削除するアタッチ可能なメンバー エントリの XAML 型システム識別子。</param>
      <returns>ストア内に <paramref name="attachableMemberIdentifier" /> に対応するアタッチ可能なメンバー エントリが見つかり、削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>指定されたストアに、指定されたアタッチ可能なメンバーの値を設定します。</summary>
      <param name="attachableMemberIdentifier">設定するアタッチ可能なメンバー エントリの XAML 型システム識別子。</param>
      <param name="value">設定する値。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>指定されたストアで、指定されたアタッチ可能なメンバーの値の取得を試みます。</summary>
      <param name="attachableMemberIdentifier">取得するアタッチ可能なメンバー エントリの XAML 型システム識別子。</param>
      <param name="value">Out パラメーター。 <paramref name="attachableMemberIdentifier" /> がストア内に存在して値を保持している場合、このメソッドから戻ったときに、その値のコピー先オブジェクトが含まれます。</param>
      <returns>ストア内に <paramref name="attachableMemberIdentifier" /> に対応するアタッチ可能なメンバー エントリが見つかり、値が <paramref name="value" /> にポストされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary>変換先の型の CLR 型システム識別子を返すことのできるサービスを表します。 変換先の型は、プロパティ設定操作の変換先の型がリフレクションまたはその他のメカニズムによって間接的に報告される場合に有意義です。</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary>関連する型コンバーターまたはマークアップ拡張機能の変換先の型を示す CLR の <see cref="T:System.Type" /> を返します。</summary>
      <returns>変換先の型の CLR <see cref="T:System.Type" /> 値。</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary>コンシューマーに XAML 名前空間マッピングの推奨プレフィックスを返すことのできるサービスを表します。 コンシューマーとしては、デザイン環境やシリアライザーなどがあります。</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary>指定した XAML 名前空間識別子に対して推奨されるプレフィックスを返します。</summary>
      <param name="ns">プレフィックスの取得対象となる XAML 名前空間識別子の文字列。</param>
      <returns>推奨プレフィックス。</returns>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary>解析するマークアップのルート オブジェクトを返すことができるサービスを記述します。</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary>マークアップまたはオブジェクト グラフからルート オブジェクトを取得します。</summary>
      <returns>ルート オブジェクト。</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary>ノード ベースの XAML リーダーの簡単な実装のためのインデックス付きノード コントロールを表すサービスを提供します。</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary>現在の外部ノード セット内のノードの数を取得します。</summary>
      <returns>現在の外部ノード セット内のノードの数。</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary>XAML ノードのインデックス付きリスト ビューにおける現在のリーダーの位置のインデックス番号を取得または設定します。</summary>
      <returns>現在のリーダーの位置のインデックス番号。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary>XAML リーダー実装でのテキスト行情報を報告するためのサービスを記述します。</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary>行情報が使用可能であるかどうかを指定する値を取得します。</summary>
      <returns>行情報が使用可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary>報告する行番号を取得します。</summary>
      <returns>報告する行番号。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary>報告する行の位置を取得します。</summary>
      <returns>報告する行の位置。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary>XAML ライターが報告された行情報を使用でき、またその情報を出力に含めることができるサービスを記述します。</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary>行情報を収集します。</summary>
      <param name="lineNumber">出力で使用する行番号。</param>
      <param name="linePosition">出力で使用する行の位置。</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary>行情報サービスによって値が提供され、関連する場合に <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> の呼び出しも行われるかどうかを決定する値を取得します。</summary>
      <returns>実装で行情報が使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary>保存操作時または書き込み操作時に、オブジェクトを入力して XAML 名を返すために使用されるサービスを提供します。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary>指定したオブジェクトの XAML 名を取得します。</summary>
      <param name="value">名前を取得するオブジェクト。</param>
      <returns>要求したオブジェクトの XAML 名の値。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary>XAML 名で指定されたオブジェクトを返すことができるサービスを記述するか、または代わりに名前解決を遅延するトークンを返します。 サービスは、XAML 名前スコープ内のすべての名前付きオブジェクトの列挙可能なセットを返すこともできます。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary>XAML 名前スコープ内のすべての名前付きオブジェクトの列挙可能なセットを返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> オブジェクトの列挙可能なセット。 それぞれの <see cref="T:System.Collections.Generic.KeyValuePair`2" /> で、<see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 構成要素は文字列であり、<see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 構成要素は XAML 名前スコープ内の <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 名を使用するオブジェクトです。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary>前方参照を生成する特定のマークアップ パターンを修正できるオブジェクトを返します。</summary>
      <param name="names">可能性のある前方参照である名前のコレクション。</param>
      <returns>後で評価される検索動作のトークンを提供するオブジェクト。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>前方参照を生成する特定のマークアップ パターンを修正できるオブジェクトを返します。</summary>
      <param name="names">可能性のある前方参照である名前のコレクション。</param>
      <param name="canAssignDirectly">解決された名前参照を対象のプロパティに直接割り当てる場合は <see langword="true" />。 再解析のユーザー コードを呼び出す場合は <see langword="false" />。 既定の動作は <see langword="false" /> です。</param>
      <returns>後で評価される検索動作のトークンを提供するオブジェクト。</returns>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary>名前からトークンへの前方解決を行うために <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> の呼び出しが使用できるかどうかを判断する値を取得します。</summary>
      <returns>前方解決の有効なトークンを返す実装として <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> が使用可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary>XAML プロセッサによって関連するすべての名前がバッキング XAML 名前スコープに登録されると発生します。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary>名前参照からオブジェクトを解決します。</summary>
      <param name="name">解決する名前参照。</param>
      <returns>解決されたオブジェクトまたは null。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary>名前参照からオブジェクトを解決し、オブジェクト グラフ用にオブジェクトが完全に初期化されているかどうかを報告する追跡値を提供します。</summary>
      <param name="name">解決する名前参照。</param>
      <param name="isFullyInitialized">このメソッドから制御が戻るとき、返されるオブジェクトに未解決の参照への依存関係がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>後で評価される検索動作のトークンを提供するオブジェクト。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary>XAML マークアップで対応付けられたプレフィックスに基づく XAML 名前空間を返すことができるサービスを記述します。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary>指定したプレフィックス文字列に対応する XAML 名前空間識別子を取得します。</summary>
      <param name="prefix">XAML 名前空間情報の取得対象となるプレフィックス。</param>
      <returns>要求した XAML 名前空間の、文字列としての識別子。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary>アクティブな XAML スキーマ コンテキストで使用できる可能性のある、プレフィックスと XAML 名前空間のすべてのマッピング (<see cref="T:System.Xaml.NamespaceDeclaration" /> の値) を返します。</summary>
      <returns>
        <see cref="T:System.Xaml.NamespaceDeclaration" /> の値の列挙可能なセット。 すべてのプレフィックス文字列を取得するには、返されたセット内の各値から <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> の値を取得します。 特定の XAML 名前空間のプレフィックスを取得するには、目的の <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 値を含む戻り値を処理します。</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary>現在の内部パーサー コンテキストに基づく <see cref="T:System.Xaml.XamlObjectWriter" /> を生成するサービスを表します。</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary>元の内部パーサー コンテキストから <see cref="T:System.Xaml.XamlObjectWriterSettings" /> を返します。</summary>
      <returns>元の内部パーサー コンテキストから返される設定。</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary>アクティブな XAML スキーマ コンテキストに基づく <see cref="T:System.Xaml.XamlObjectWriter" /> を返します。</summary>
      <param name="settings">
        <see cref="T:System.Xaml.XamlObjectWriter" /> の構築と初期化に使用する設定。</param>
      <returns>指定した設定の <see cref="T:System.Xaml.XamlObjectWriter" />。</returns>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary>型コンバーターおよびマークアップ拡張機能に XAML スキーマ コンテキスト情報を提供するサービスを表します。</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary>サービス コンテキストによって報告される <see cref="T:System.Xaml.XamlSchemaContext" /> を取得します。</summary>
      <returns>サービス コンテキストによって報告される XAML スキーマ コンテキスト。</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary>文字列値を個別のプロパティとして格納することにより、XAML 名前空間の識別子およびプレフィックスを宣言します。</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary>初期プロパティ値を使用して、<see cref="T:System.Xaml.NamespaceDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="ns">文字列としての XAML 名前空間の識別子。</param>
      <param name="prefix">プレフィックス マッピングで名前空間に使用される文字列プレフィックス。</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary>
        <see cref="T:System.Xaml.NamespaceDeclaration" /> の識別子コンポーネントを取得します。</summary>
      <returns>XAML 名前空間宣言の識別子。</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary>
        <see cref="T:System.Xaml.NamespaceDeclaration" /> の XAML 名前空間のマッピング プレフィックスとして使用されるプレフィックスを取得します。</summary>
      <returns>この <see cref="T:System.Xaml.NamespaceDeclaration" /> のプレフィックス文字列。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>XAML 読み込みのためのアセンブリと型に対するアクセス制御を定義します。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> で要求されたアセンブリに基づいて <see cref="T:System.Reflection.Assembly" /> インスタンスを返します。</summary>
      <param name="assembly">要求対象のアセンブリ。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> のソース情報として使用される <paramref name="assembly" /> 値を持つ <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> で要求されたアセンブリに基づいて <see cref="T:System.Reflection.AssemblyName" /> インスタンスを返します。</summary>
      <param name="assemblyName">要求のアセンブリ名。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> のソース情報として使用される <paramref name="assemblyName" /> 値を持つ <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> が有効な完全修飾アセンブリ名ではありません。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>この <see cref="T:System.Reflection.AssemblyName" /> がアクセス許可を決定するアセンブリの <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> を取得します。</summary>
      <returns>この <see cref="T:System.Reflection.AssemblyName" /> がアクセス許可を決定するアセンブリの <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>修飾名によって指定された特定の型に基づく <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> インスタンスを返します。</summary>
      <param name="assemblyQualifiedTypeName">アセンブリ修飾型名として解析される文字列。</param>
      <returns>型に対するリフレクションによって決定する <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> および <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> のソース情報として使用される <paramref name="assemblyQualifiedTypeName" /> 値を持つ、<see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> は、有効なアセンブリ修飾型名ではありません。  
または 
<paramref name="assemblyQualifiedTypeName" /> 内のアセンブリ名が有効なアセンブリ名ではありません。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> によって指定された特定の型に基づく <see cref="T:System.Type" /> インスタンスを返します。</summary>
      <param name="type">アクセスを要求する対象の <see cref="T:System.Type" />。</param>
      <returns>型に対するリフレクションによって決定する <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> および <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> のソース情報として使用される <paramref name="type" /> 値を持つ、<see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>この <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> がアクセス許可を決定する型の非修飾文字列名を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> がアクセス許可を決定する型の非修飾文字列名。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>XAML リーダーまたはライターで使用されるアセンブリから型を読み込むためのアクセス許可を宣言します。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>固有の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 値の列挙可能なセットを使用して、<see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="allowedAccess">固有の <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 値の列挙可能なセット。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> に、null の項目などの無効な情報が含まれていました。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>既存のアクセス許可を使用して、<see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 列挙値。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>単一の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 値を使用して、<see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="allowedAccess">定義する <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>この <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> で表されるすべての <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 値のリストを取得します。</summary>
      <returns>読み取り専用の <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 値のリスト、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> のコピーを作成して返します。</summary>
      <returns>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> のコピー。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>XML エンコードから指定された状態で、セキュリティ オブジェクトを再構築します。</summary>
      <param name="elem">セキュリティ オブジェクトの再構築に使用する XML エンコード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> に、<see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> の XML エンコーディングが含まれていません。  
または 
<paramref name="elem" /> 内の version 属性はサポートされていません。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.GetHashCode" />
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>この <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> の <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> のリスト内に指定された <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> が含まれるかどうかを返します。</summary>
      <param name="requestedAccess">チェックする特定の <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</param>
      <returns>現在の <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> のリスト内のアイテムとして <paramref name="requestedAccess" /> が存在する場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> が null です。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> と指定されたアクセス許可の積集合である <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> を作成して返します。</summary>
      <param name="target">現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> との積集合を持つ <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 <see langword="null" /> の可能性があります。</param>
      <returns>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> と指定した <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> の積集合を表す新しいアクセス許可。 積集合が空の場合、この新しいアクセス許可は <see langword="null" /> です。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> が <see langword="null" /> ではないか、または <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> ではありません。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> が、指定したアクセス許可のサブセットかどうかを判断します。</summary>
      <param name="target">サブセットの関係にあるかどうかをテストするアクセス許可。 <see langword="null" /> の可能性があります。</param>
      <returns>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> が、指定したアクセス許可のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> が <see langword="null" /> ではないか、または <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> ではありません。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>この <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> が無制限のアクセス許可を示すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> が無制限のアクセス許可を示す場合は <see langword="true" />。 この <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> の <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> に固有のアクセス レベル制限が含まれている場合や、アクセス許可がない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>この <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> とその現在の状態を表す XML エンコーディングを作成します。</summary>
      <returns>状態情報を含む、この <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> の XML エンコーディング。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> と指定したアクセス許可の和集合を表すアクセス許可を作成します。</summary>
      <param name="other">現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> と結合する <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 <see langword="null" /> の可能性があります。</param>
      <returns>現在の <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> と指定した <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> の和集合を表す新しい <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> が <see langword="null" /> ではないか、または <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> ではありません。</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary>XAML でプロパティを設定するときに適用される構文の制限 (<see cref="T:System.Xaml.XamlDirective" /> によって報告される) を指定します。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary>プロパティは <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> または <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> のどちらの位置にも設定できます (この列挙メンバーは、これらの値の組み合わせとして定義されます)。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary>プロパティは XAML の属性構文で設定できます。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary>プロパティは XAML のプロパティ要素構文で設定できます。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary>プロパティは XAML で設定できません。 既定値です。</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> によって報告されるシリアル化の動作を定義します。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary>不明。メンバーの型に従います。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary>結果をシリアル化しません。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary>結果をシリアル化します。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary>XAML メンバーによって使用されるコレクションのメタファ (ある場合) を記述します。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary>XAML メンバーは配列コレクションをサポートします。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary>XAML メンバーはリストまたはコレクションをサポートします。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary>XAML メンバーはディクショナリ (キーと値のペア) をサポートします。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary>XAML メンバーはコレクションをサポートしません。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary>リフレクション以外の方法で XAML メンバーのメンバー特性にアクセスできる拡張ポイントを提供します。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary>提供された <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に基づいて、<see cref="T:System.Xaml.XamlMember" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">この <see cref="T:System.Xaml.XamlMember" /> に関連する特定の XAML メンバーの <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary>インスタンスから関連するプロパティの値を取得します。</summary>
      <param name="instance">メンバーの所有者型のインスタンス。</param>
      <returns>要求されたプロパティ値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">不明な <see cref="T:System.Xaml.XamlMember" /> に基づく <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> で、このメソッドを呼び出しました。  
 -または-  
このメソッドを書き込み専用メンバーで呼び出しました。  
 -または-  
 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary>関連するプロパティの値をインスタンスに設定します。</summary>
      <param name="instance">メンバーの所有者型のインスタンス。</param>
      <param name="value">設定するプロパティ値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">不明な <see cref="T:System.Xaml.XamlMember" /> に基づく <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> で、このメソッドを呼び出しました。  
 -または-  
このメソッドを読み取り専用メンバーで呼び出しました。  
 -または-  
 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary>値をシリアル化処理によって永続化する必要があるかどうかを示します。</summary>
      <param name="instance">永続性について調べる対象のプロパティを持つインスタンス。</param>
      <returns>列挙体の値。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary>この <see cref="T:System.Reflection.MethodInfo" /> に関連するプロパティの値を取得する CLR メソッドの <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> を取得します。</summary>
      <returns>この <see cref="T:System.Reflection.MethodInfo" /> に関連するプロパティの値を取得する CLR メソッドの <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。または <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary>この <see cref="T:System.Reflection.MethodInfo" /> に関連するプロパティの値を設定する CLR メソッドの <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> を取得します。</summary>
      <returns>この <see cref="T:System.Reflection.MethodInfo" /> に関連するプロパティの値を設定する CLR メソッドの <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。または <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary>不明な、完全に実装されていない <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> を表す静的な値を提供します。</summary>
      <returns>不明な、完全に実装されていない <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> を表す静的な値。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary>リフレクションまたはコンストラクター以外の方法で XAML 型のインスタンスを構築できる拡張ポイントを提供します。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary>提供された <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に基づいて、<see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この <see cref="T:System.Xaml.XamlType" /> に関連する固有の XAML 型の <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary>指定した項目を、この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に関連する型のインスタンスに追加します。</summary>
      <param name="instance">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> を構築するために使用した <see cref="T:System.Xaml.XamlType" /> によって指定された型のインスタンス。</param>
      <param name="item">追加する項目。</param>
      <exception cref="T:System.NotSupportedException">不明な <see cref="T:System.Xaml.XamlType" /> に基づく <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。  
 -または-  
関連する型がコレクションではない <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> の <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> は、<see langword="null" /> を返します。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary>指定したキーと項目の値を、この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に関連する型のインスタンスに追加します。</summary>
      <param name="instance">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> を構築するために使用した <see cref="T:System.Xaml.XamlType" /> によって指定された型のインスタンス。</param>
      <param name="key">追加するアイテムのディクショナリ キー。</param>
      <param name="item">追加する項目値。</param>
      <exception cref="T:System.NotSupportedException">不明な <see cref="T:System.Xaml.XamlType" /> に基づく <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。  
 -または-  
関連する型がディクショナリではない <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> の <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> は、<see langword="null" /> を返します。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary>この <see cref="T:System.Xaml.XamlType" /> の構築が開始された <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に基づいて、オブジェクト インスタンスを作成します。</summary>
      <param name="arguments">インスタンスの <see langword="x:ConstructorArgs" /> を指定するオブジェクトの配列。 <see langword="null" /> を必要としないか、または使用しない型の場合は <see langword="x:ConstructorArgs" /> にできます。</param>
      <returns>この <see cref="T:System.Xaml.XamlType" /> の構築が開始された <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に基づいて作成されたインスタンス。</returns>
      <exception cref="T:System.MissingMethodException">コンストラクターを解決できませんでした。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary>コレクションまたはディクショナリに関連する <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> の関連する <see langword="Add" /> メソッドを返します。</summary>
      <param name="contentType">
        <see langword="Add" /> メソッドで使用されるアイテムの種類の <see cref="T:System.Xaml.XamlType" />。</param>
      <returns>
        <see langword="Add" /> メソッドの CLR <see cref="T:System.Reflection.MethodInfo" /> 情報、または null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary>アイテムを列挙できるメソッドを表すオブジェクトを返します。</summary>
      <returns>列挙子メソッドの <see cref="T:System.Reflection.MethodInfo" />、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary>アイテムのセットを表す <see cref="T:System.Collections.IEnumerator" /> オブジェクトを返します。</summary>
      <param name="instance">この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> を構築するために使用した <see cref="T:System.Xaml.XamlType" /> によって指定された型のインスタンス。</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> オブジェクト、または <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不明な <see cref="T:System.Xaml.XamlType" /> に基づく <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で、このメソッドを呼び出しました。  
 -または-  
このメソッドを、関連する型がコレクションまたは辞書でない <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> で呼び出しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> が実装された <see cref="T:System.Windows.Markup.MarkupExtension" /> を呼び出すときに使用するハンドラーを取得します。</summary>
      <returns>このような場合の処理を行うハンドラーの実装。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> が CLR によって実装された <see cref="T:System.ComponentModel.TypeConverter" /> を呼び出したときに使用するハンドラーを取得します。</summary>
      <returns>このような場合の処理を行うハンドラーの実装。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary>不明な、完全に実装されていない <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> を表す静的な値を提供します。</summary>
      <returns>不明な、完全に実装されていない <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> を表す静的な値。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary>名前および名前空間に関連して XAML 型を指定する方法を提供します。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary>名前および名前空間の文字列に基づいて、<see cref="T:System.Xaml.Schema.XamlTypeName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xamlNamespace">名前が含まれる XAML 名前空間。</param>
      <param name="name">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> を作成する型の名前。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary>名前および名前空間の文字列と、型引数の配列に基づいて、<see cref="T:System.Xaml.Schema.XamlTypeName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xamlNamespace">
        <paramref name="name" /> が含まれる XAML 名前空間。</param>
      <param name="name">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> を作成する型の名前。</param>
      <param name="typeArguments">それぞれが <see cref="T:System.Xaml.Schema.XamlTypeName" /> である必要のある、型引数の配列。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary>既存の <see cref="T:System.Xaml.Schema.XamlTypeName" /> に基づいて、<see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xamlType">既存の <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeName" /> を構築するために使用された名前を取得します。</summary>
      <returns>型の名前。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeName" /> を構築するために使用された XAML 名前空間の識別子を取得します。</summary>
      <returns>XAML 名前空間の識別子。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>マークアップ プレフィックスを名前空間に解決できる型名およびオブジェクトに基づいて <see cref="T:System.Xaml.Schema.XamlTypeName" /> 値を提供します。</summary>
      <param name="typeName">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 値を作成する型名。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" /> を実装するオブジェクトまたはサービス プロバイダー。</param>
      <returns>作成された <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> または <paramref name="namespaceResolver" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">文字列を解析できません。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>マークアップ プレフィックスを名前空間に解決できる複数の型名およびオブジェクトを指定できる文字列に基づいて <see cref="T:System.Xaml.Schema.XamlTypeName" /> 値を提供します。</summary>
      <param name="typeNameList">複数の型名が含まれる文字列。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" /> を実装するオブジェクトまたはサービス プロバイダー。</param>
      <returns>作成された <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> または <paramref name="namespaceResolver" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">文字列を解析できません。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeName" /> の値を等価の文字列形式に変換します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlTypeName" /> と等価の文字列形式。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeName" /> の値を、マークアップ構文内で複数の型のオブジェクト要素の使用方法に使用できる、等価の文字列形式に変換します。</summary>
      <param name="typeNameList">型のリスト。</param>
      <param name="prefixLookup">プレフィックスを検索するサービス参照。</param>
      <returns>すべての型の結果の連結文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefixLookup" /> または <paramref name="typeNameList" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeName" /> の値を、マークアップ構文内で型のオブジェクト要素の使用方法に使用できる、等価の文字列形式に変換します。</summary>
      <param name="prefixLookup">プレフィックスを検索するサービス参照。</param>
      <returns>プレフィックスが付けられた使用方法の文字列。</returns>
      <exception cref="T:System.InvalidOperationException">この <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> の <see cref="T:System.Xaml.Schema.XamlTypeName" /> は <see langword="null" /> です。  
または 
 <see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> が無効です。  
または 
プレフィックスを検索できませんでした。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary>マークアップ プレフィックスを名前空間に解決できる型名およびオブジェクトに基づいて <see cref="T:System.Xaml.Schema.XamlTypeName" /> 値を提供します。</summary>
      <param name="typeName">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 値を作成する型名。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" /> を実装するオブジェクトまたはサービス プロバイダー。</param>
      <param name="result">戻り値が <see langword="true" /> の場合に、作成される <see cref="T:System.Xaml.Schema.XamlTypeName" /> を含む Out パラメーター。</param>
      <returns>解析が成功し、<paramref name="result" /> に有効な値が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> または <paramref name="namespaceResolver" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary>マークアップ プレフィックスを名前空間に解決できる複数の型名およびオブジェクトを指定できる文字列に基づいて <see cref="T:System.Xaml.Schema.XamlTypeName" /> 値を提供します。</summary>
      <param name="typeNameList">複数の型名が含まれる文字列。</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" /> を実装するオブジェクトまたはサービス プロバイダー。</param>
      <param name="result">戻り値が <see langword="true" /> の場合に、作成される <see cref="T:System.Xaml.Schema.XamlTypeName" /> を含む Out パラメーター。</param>
      <returns>解析が成功し、<paramref name="result" /> に有効な値が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> または <paramref name="namespaceResolver" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeName" /> を構築するために使用された型引数を取得します。</summary>
      <returns>型引数 (存在する場合)。 null も指定できます。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary>
        <see cref="T:System.Xaml.XamlType" /> オブジェクトと型名を表す文字列との間で変換を実行します。 この機能は <see cref="T:System.Windows.Markup.PropertyDefinition" /> 経由でマークアップ定義により XAML 機能拡張に使われます。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、指定した型のオブジェクトを <see cref="T:System.Xaml.XamlType" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="sourceType">変換の評価対象となる型。</param>
      <returns>このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、<see cref="T:System.Xaml.XamlType" /> のインスタンスを指定した型に変換できるかどうかを判断します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="destinationType">変換の評価対象となる型。</param>
      <returns>このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストを使用して、指定したオブジェクトから <see cref="T:System.Xaml.XamlType" /> への変換を試みます。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> を変換できません。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストを使用して、<see cref="T:System.Xaml.XamlType" /> から指定した型への変換を試みます。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> を変換できません。</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary>最終的な変換先の型以外の入力に基づいて XAML の初期化値またはシリアル化値を生成する手法の共通 API サーフェイスを提供します。 これには、マークアップ拡張機能および型コンバーターが含まれます。</summary>
      <typeparam name="TConverterBase">この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> が表す特定のコンバーターの CLR 基本クラス。 これは通常 <see cref="T:System.ComponentModel.TypeConverter" />、<see cref="T:System.Windows.Markup.MarkupExtension" />、または <see cref="T:System.Windows.Markup.ValueSerializer" /> のいずれかです。</typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を実装するコンバーターと、<see cref="T:System.Type" /> の対象/変換先の型に基づいて、<see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="converterType">コンバーターの動作を実装する <see cref="T:System.Type" />。</param>
      <param name="targetType">
        <see cref="T:System.Xaml.XamlType" /> の対象/変換先の <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を実装するコンバーター、<see cref="T:System.Type" /> の対象/変換先の型、および文字列名に基づいて、<see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="converterType">コンバーターの動作を実装する <see cref="T:System.Type" />。</param>
      <param name="targetType">
        <see cref="T:System.Xaml.XamlType" /> の対象/変換先の <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <param name="name">文字列名。</param>
      <exception cref="T:System.ArgumentException">すべての 3 つのパラメーターが <see langword="null" /> です (少なくとも 1 つは null でないことが必要です)。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary>コンバーター実装の作成されたインスタンスを取得します。</summary>
      <returns>コンバーター実装の作成されたインスタンス、または <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary>コンバーターの動作を実装するクラスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>コンバーターの動作を実装するクラスの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary>コンバーター実装のインスタンスを返します。</summary>
      <returns>コンバーター実装のインスタンス、または <see langword="null" />。</returns>
      <exception cref="T:System.Xaml.XamlSchemaException">コンバーターは正しい基本型を実装しませんでした。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> のこのインスタンスと、指定したオブジェクトの値が同一かどうかを判断します。<see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトを指定する必要があります。</summary>
      <param name="obj">比較対象のオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="obj" /> で、このインスタンスと同じ値を保持している場合は <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> のこのインスタンスと、別の <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="other">比較対象の <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <returns>
        <paramref name="other" /> が <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> で、このインスタンスと同じ値を保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> のハッシュ コードを返します。</summary>
      <returns>整数のハッシュ コード。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の文字列名を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の文字列名。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>指定した 2 つの <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> または <see langword="null" />。</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="converter1" /> の値が <paramref name="converter2" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>指定した 2 つの <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトの値が異なるかどうかを判断します。</summary>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> または <see langword="null" />。</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="converter1" /> の値が <paramref name="converter2" /> の値と異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" /> の対象/変換先の <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> の対象/変換先の <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary>この <see cref="T:System.String" /> を表す <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を返します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary>読み取りと書き込みを異なるスレッドに切り離すことのできる、ダブル バッファリングを行う <see cref="T:System.Xaml.XamlReader" /> を実装します。</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary>
        <see cref="T:System.Xaml.XamlBackgroundReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="wrappedReader">この <see cref="T:System.Xaml.XamlReader" /> の基底となる <see cref="T:System.Xaml.XamlBackgroundReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappedReader" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlBackgroundReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースを解放する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary>行情報が使用可能であるかどうかを指定する値を取得します。</summary>
      <returns>行情報が使用可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary>リーダーの位置がファイルの末尾かどうかを示す値を取得します。</summary>
      <returns>位置がファイルの末尾にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary>報告する行番号を取得します。</summary>
      <returns>報告する行番号。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary>報告する行の位置を取得します。</summary>
      <returns>報告する行の位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary>リーダーが <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上に配置されている場合に、リーダーが現在配置されているメンバーを取得します。</summary>
      <returns>現在のメンバー。リーダーがメンバー上に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary>現在のノードから XAML 名前空間を取得します。</summary>
      <returns>XAML 名前空間 (使用可能な場合)。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 列挙体の値。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary>処理対象から次の XAML ノードを読み取ります (ノードがある場合)。</summary>
      <returns>ノードがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary>情報セットにスキーマ コンテキスト情報を提供するオブジェクトを取得します。</summary>
      <returns>情報セットにスキーマ コンテキスト情報を提供するオブジェクト。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary>
        <see cref="T:System.Threading.Thread" /> の名前付きスレッドを処理する (<see cref="T:System.Threading.ParameterizedThreadStart" /> から構築された) 新しい <see cref="T:System.Xaml.XamlReader" /> を作成して開始します。</summary>
      <exception cref="T:System.InvalidOperationException">スレッドは既に起動しています。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary>
        <see cref="T:System.Threading.Thread" /> の名前付きスレッドを処理する (<see cref="T:System.Threading.ParameterizedThreadStart" /> から構築された) 新しい <see cref="T:System.Xaml.XamlReader" /> を作成して開始します。 スレッド名をパラメーター値として指定します。</summary>
      <param name="threadName">スレッドの名前。</param>
      <exception cref="T:System.InvalidOperationException">スレッドは既に起動しています。</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary>現在のノードの <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>現在のノードの <see cref="T:System.Xaml.XamlType" />。現在のリーダーの位置がオブジェクト上にない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary>現在のノードの値を取得します。</summary>
      <returns>現在のノードの値。現在のリーダーの位置が <see cref="F:System.Xaml.XamlNodeType.Value" /> ノード型にない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary>遅延コンテンツを読み込み、それらのコンテンツを返す XAML リーダーの動作を表します。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlDeferringLoader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> およびサービス プロバイダーの必要な特定のサービスに基づいて、XAML コンテンツを遅延モードで読み込みます。</summary>
      <param name="xamlReader">
        <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" /> の呼び出しによって返される開始リーダー。</param>
      <param name="serviceProvider">必要なサービスのサービス プロバイダー。</param>
      <returns>入力 <see cref="T:System.Xaml.XamlReader" /> によって生成されたルート オブジェクト。</returns>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>遅延読み込みの値をコミットします。</summary>
      <param name="value">遅延読み込みをコミットする入力値。</param>
      <param name="serviceProvider">必要なサービスのサービス プロバイダー。</param>
      <returns>XAML ノード情報として遅延の値を取得するのに使用できる XAML リーダー。</returns>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary>メンバーが XAML ディレクティブでもある場合に、そのメンバーの XAML 型システム識別子を提供します。 <see cref="T:System.Xaml.XamlDirective" /> 識別子は、メンバー ノードの処理時に XAML リーダーおよび XAML ライターで使用されます。 この識別子は、XAML リーダーが <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上に配置されていて、<see cref="P:System.Xaml.XamlMember.IsDirective" /> が <see langword="true" /> の場合に使用されます。</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary>
        <see cref="T:System.Xaml.XamlDirective" /> のケースの値ごとに値を指定して、<see cref="T:System.Xaml.XamlDirective" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xamlNamespaces">この <see cref="T:System.Xaml.XamlDirective" /> が存在できる XAML 名前空間のセット。識別子文字列の列挙可能なセットとして渡されます。</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" /> の識別名。</param>
      <param name="xamlType">
        <see cref="T:System.Xaml.XamlDirective" /> をサポートする XAML 型。</param>
      <param name="typeConverter">この <see cref="T:System.Xaml.XamlDirective" /> がテキスト構文の変換に使用する型コンバーター。</param>
      <param name="allowedLocation">
        <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 列挙体の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary>名前および単一の XAML 名前空間の値を指定して、<see cref="T:System.Xaml.XamlDirective" /> クラスの新しいインスタンスを初期化します。 このシグネチャは、ディレクティブに対する <see cref="P:System.Xaml.XamlMember.IsUnknown" /> が <see langword="true" /> を報告することが必要であるか、または予期される場合にのみ使用します。</summary>
      <param name="xamlNamespace">この <see cref="T:System.Xaml.XamlDirective" /> が存在できるプライマリ XAML 名前空間。</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" /> の識別名。</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary>ディレクティブを指定できる XAML ノード型を指定する値を取得します。</summary>
      <returns>列挙体の値。 既定値は、列挙体の既定値である <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" /> です。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary>このオブジェクトのハッシュ コードを返します。</summary>
      <returns>整数のハッシュ コード。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary>この XAML メンバーが存在することのできる XAML 名前空間のリストを返します。</summary>
      <returns>文字列としての XAML 名前空間識別子のリスト。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 実装を返します。 この実装は常に <see langword="null" /> を返します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトを返します。これは XAML で宣言されたオブジェクトの遅延読み込み中に使用されます。 この実装は常に <see langword="null" /> を返します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary>
        <see cref="T:System.Xaml.XamlMember" /> オブジェクトの一覧を返します。 この一覧では、この <see cref="T:System.Xaml.XamlMember" /> に関連して初期化順序の依存関係が存在するメンバーが報告されます。 この実装は常に <see langword="null" /> を返します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に関連付けられている <see cref="T:System.Xaml.XamlDirective" /> を返します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> の <see cref="T:System.Xaml.XamlMember" /> 情報。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> がアンビエント プロパティとして報告されているかどうかを返します。</summary>
      <returns>常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> がイベントを表すかどうかを返します。</summary>
      <returns>常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> が目的の読み取り専用プロパティを表すかどうかを返します。</summary>
      <returns>常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> がパブリックの <see langword="get" /> アクセサーを持つプロパティを表すかどうかを返します。</summary>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> が型およびメンバーの解決に使用されるバッキング システムによって解決できないメンバーを表すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlDirective" /> が解決できないメンバーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> が目的の書き込み専用プロパティを表すかどうかを返します。</summary>
      <returns>常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> がパブリックの <see langword="set" /> アクセサーを持つプロパティを表すかどうかを返します。</summary>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" /> が存在できる型の <see cref="T:System.Xaml.XamlMember" /> を返します。 この実装は常に <see langword="null" /> を返します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary>メンバーで使用される型の <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <returns>メンバーで使用される型の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> に関連付けられている型コンバーターの実装を返します。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.ComponentModel.TypeConverter" /> インスタンス、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> に関連付けられている <see langword="get" /> アクセサーを返します。 この実装は常に <see langword="null" /> を返します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary>この <see cref="T:System.Reflection.MemberInfo" /> に関連付けられている CLR リフレクションの <see cref="T:System.Xaml.XamlDirective" /> を返します。 この実装は常に <see langword="null" /> を返します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> に関連付けられている <see langword="set" /> アクセサーを返します。 この実装は常に <see langword="null" /> を返します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary>この <see cref="T:System.Xaml.XamlDirective" /> の文字列表現を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlDirective" /> の文字列表現。</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary>XAML ライターが重複するメンバーの値を同じオブジェクト ノードに書き込もうとすると、スローされる例外。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Xaml.XamlDuplicateMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlDuplicateMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Xaml.XamlDuplicateMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Xaml.XamlDuplicateMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary>関連のメンバーと型情報を指定して、<see cref="T:System.Xaml.XamlDuplicateMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">報告する XAML メンバーの識別子。</param>
      <param name="type">親の型として報告する XAML の型識別子。</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary>プロパティを複製として示す XAML メンバーの識別子を取得または設定します。</summary>
      <returns>報告する <see cref="T:System.Xaml.XamlMember" /> オブジェクト (XAML メンバーの識別子)。</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlDuplicateMemberException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary>親の型として示される XAML の型識別子を取得または設定します。</summary>
      <returns>親の型として報告する <see cref="T:System.Xaml.XamlType" /> オブジェクト (XAML の型識別子)。</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary>XAML リーダーまたは XAML ライターの一般的な例外が発生したときにスローされる例外です。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> クラスの新しいインスタンスを初期化します。 インスタンスには、エラーを説明する、システム提供のメッセージが含まれます。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> クラスの新しいインスタンスを初期化します。 インスタンスには、エラーを説明する、指定されたメッセージが含まれます。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> クラスの新しいインスタンスを初期化します。 インスタンスには、指定されたエラー メッセージと、この例外の原因である内部例外への参照が含まれます。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> クラスの新しいインスタンスを初期化します。 インスタンスには、指定されたエラー メッセージ、内部例外、および行情報が含まれます。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。</param>
      <param name="lineNumber">デバッグまたは行情報のコンシューマーに報告する行番号。</param>
      <param name="linePosition">デバッグまたは行情報のコンシューマーに報告する行の位置。</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> を実装し、行情報データのシリアル化のサポートを提供します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary>例外で報告される XAML テキスト行情報の行番号コンポーネントを取得または設定します。</summary>
      <returns>XAML テキスト行情報の行番号コンポーネント。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary>例外で報告される XAML テキスト行情報の行の位置コンポーネントを取得または設定します。</summary>
      <returns>XAML テキスト行情報の行の位置コンポーネント。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary>例外メッセージを取得または設定します。行情報を取得できる場合は、例外メッセージに行情報を追加します。</summary>
      <returns>行情報が追加された例外メッセージ。</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary>XAML の読み取り中および XAML の書き込み中に発生する内部矛盾に対してスローされる例外です。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Xaml.XamlInternalException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlInternalException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Xaml.XamlInternalException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Xaml.XamlInternalException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary>XAML マークアップまたは XAML 型を使用するプログラミングに役立つ文字列またはオブジェクトを提供する定数を定義します。 これらの文字列またはオブジェクトは、XAML 言語の概念、.NET Framework XAML サービスでの XAML 言語の概念の実装、またはそれらの両方に関連しています。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary>.NET Framework XAML サービスで定義されている各 <see cref="T:System.Xaml.XamlDirective" /> 識別子の読み取り専用のジェネリック コレクションを取得します。</summary>
      <returns>.NET Framework XAML サービスで定義されている各 <see cref="T:System.Xaml.XamlDirective" /> 識別子の読み取り専用のジェネリック コレクション。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary>.NET Framework XAML サービスで定義されている、組み込み XAML 言語に一致するかまたはエイリアスとなる個別の <see cref="T:System.Xaml.XamlType" /> 値の読み取り専用のジェネリック コレクションを取得します。</summary>
      <returns>組み込み XAML 言語に一致する各 <see cref="T:System.Xaml.XamlType" /> の読み取り専用のジェネリック コレクション。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary>ファクトリ メソッドまたはジェネリックの使用法の <see langword="Arguments" /> の <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>ファクトリ メソッドまたはジェネリックの使用法の <see langword="Arguments" /> の <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary>組み込み XAML 言語の <see langword="Array" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Array" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary>
        <see langword="AsyncRecords" /> 擬似メンバーの <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>
        <see langword="AsyncRecords" /> 擬似メンバーの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary>XML の <see langword="base" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>XML の <see langword="base" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary>組み込み XAML 言語の <see langword="Boolean" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Boolean" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary>組み込み XAML 言語の <see langword="Byte" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Byte" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary>組み込み XAML 言語の <see langword="Char" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Char" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="Class" /> を取得します。</summary>
      <returns>XAML からの <see langword="Class" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="ClassAttributes" /> を取得します。</summary>
      <returns>XAML からの <see langword="ClassAttributes" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="ClassModifier" /> を取得します。</summary>
      <returns>XAML からの <see langword="ClassModifier" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary>[MS-XAML] で説明されている <see langword="Code" /> の <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>[MS-XAML] で説明されている <see langword="Code" /> の <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary>イベントをハンドラーに接続するコネクション ポイントを識別する <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>イベントをハンドラーに接続するコネクション ポイントを識別する <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary>組み込み XAML 言語の <see langword="Decimal" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Decimal" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary>組み込み XAML 言語の <see langword="Double" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Double" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary>XAML のファクトリ メソッドを識別する <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>XAML のファクトリ メソッドを識別する <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="FieldModifier" /> を取得します。</summary>
      <returns>XAML からの <see langword="FieldModifier" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="Initialization" /> を取得します。</summary>
      <returns>XAML からの <see langword="Initialization" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary>組み込み XAML 言語の <see langword="Int16" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Int16" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary>組み込み XAML 言語の <see langword="Int32" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Int32" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary>組み込み XAML 言語の <see langword="Int64" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Int64" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="Items" /> を取得します。</summary>
      <returns>XAML からの <see langword="Items" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="Key" /> を取得します。</summary>
      <returns>XAML からの <see langword="Key" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary>XML の <see langword="lang" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>XML の <see langword="lang" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary>
        <see cref="T:System.Xaml.XamlType" /> のアイテムの種類の <see cref="P:System.Xaml.XamlLanguage.Members" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> のアイテムの種類の <see cref="P:System.Xaml.XamlLanguage.Members" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary>XAML の <see langword="Members" /> の概念に対する <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>XAML の <see langword="Members" /> の概念に対する <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="Name" /> を取得します。</summary>
      <returns>XAML からの <see langword="Name" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary>組み込み XAML 言語の <see langword="Null" /> または <see langword="NullExtension" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語<see langword="Null" /><see cref="T:System.Xaml.XamlType" /> の。<see langword="NullExtension" /> /</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary>XAML 言語の概念 <see langword="Object" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>XAML 言語の概念 <see langword="Object" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="PositionalParameters" /> を取得します。</summary>
      <returns>XAML からの <see langword="PositionalParameters" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary>XAML の <see langword="Property" /> の概念に対する <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>XAML の <see langword="Property" /> の概念に対する <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary>XAML の <see langword="Reference" /> を表す <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>XAML の <see langword="Reference" /> を表す <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary>XAML の <see langword="Shared" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>XAML の <see langword="Shared" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary>組み込み XAML 言語の <see langword="Single" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="Single" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary>XML の <see langword="space" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>XML の <see langword="space" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary>組み込み XAML 言語の <see langword="Static" />/<see langword="StaticExtension" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語<see langword="Static" /><see cref="T:System.Xaml.XamlType" /> の。<see langword="StaticExtension" /> /</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary>組み込み XAML 言語の <see langword="String" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語の <see langword="String" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="Subclass" /> を取得します。</summary>
      <returns>XAML からの <see langword="Subclass" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary>XAML プロセッサによって対応するモードがサポートされている場合に、XAML の非同期読み込みを有効にする <see cref="T:System.Xaml.XamlDirective" /> を取得します。</summary>
      <returns>XAML の非同期読み込みを有効にする <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary>XAML 言語の <see langword="TimeSpan" /> の概念の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>XAML 言語の概念 <see langword="TimeSpan" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary>組み込み XAML 言語の <see langword="Type" />/<see langword="TypeExtension" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>組み込み XAML 言語<see langword="Type" /><see cref="T:System.Xaml.XamlType" /> の。<see langword="TypeExtension" /> /</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="TypeArguments" /> を取得します。</summary>
      <returns>XAML からの <see langword="TypeArguments" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="Uid" /> を取得します。</summary>
      <returns>XAML からの <see langword="Uid" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary>XAML から <see cref="T:System.Xaml.XamlDirective" /> ディレクティブの <see langword="UnknownContent" /> を取得します。</summary>
      <returns>XAML からの <see langword="UnknownContent" /> ディレクティブの <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary>XAML 言語の概念 <see langword="Uri" /> の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>XAML 言語の概念 <see langword="Uri" /> の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary>XAML (2006) 言語の名前空間を識別する文字列の文字列値を取得します。 [MS-XAML] セクション 5.1.1 に定義されているように、この名前空間は XAML (2006) の "x" プレフィックス付きの名前空間に対応しています。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary>XAML 名前空間の識別子のコレクションを取得します。</summary>
      <returns>XAML 名前空間の識別子のコレクション。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary>XAML の <see langword="XData" /> ブロックをサポートする XAML 型の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>
        <see langword="XData" /> ブロックをサポートする XAML 型の <see cref="T:System.Xaml.XamlType" />。 [5.2.23] セクションを参照してください。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary>XML (1998) 言語の名前空間を識別する文字列の文字列値を取得します。 [MS-XAML] セクション 5.1.2 で参照されるように、この名前空間は XML の "xml" プレフィックス付きの名前空間に対応しています。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary>XML 名前空間の識別子のコレクションを取得します。</summary>
      <returns>XML 名前空間の識別子のコレクション。</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary>XAML 型のメンバーの XAML 型システム識別子を提供します。 識別子は、メンバー ノードの処理時 (XAML リーダーの位置が <see cref="F:System.Xaml.XamlNodeType.StartMember" /> のとき) および一般的な XAML 型システムのロジックに、XAML リーダーおよび XAML ライターによって使用されます。</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary>CLR 型システムの <see cref="T:System.Xaml.XamlMember" /> および <see cref="T:System.Reflection.EventInfo" /> を使用して、<see cref="T:System.Xaml.XamlSchemaContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="eventInfo">イベント メンバーを表す CLR 型システム <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>CLR 型システム <see cref="T:System.Xaml.XamlMember" /> および <see cref="T:System.Reflection.EventInfo" /> (<see cref="T:System.Xaml.XamlSchemaContext" /> の情報を含みます) を使用して、<see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="eventInfo">イベント メンバーを表す CLR 型システム <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対してランタイムのリフレクション呼び出しを処理する <see cref="T:System.Xaml.XamlMember" /> 実装。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary>CLR 型システムの <see cref="T:System.Xaml.XamlMember" /> および <see cref="T:System.Reflection.PropertyInfo" /> を使用して、<see cref="T:System.Xaml.XamlSchemaContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyInfo">プロパティ メンバーを表す CLR 型システム <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>リフレクション <see cref="T:System.Xaml.XamlMember" /> および <see cref="T:System.Reflection.PropertyInfo" /> (<see cref="T:System.Xaml.XamlSchemaContext" /> の情報を含みます) を使用して、<see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyInfo">プロパティ メンバーを表す CLR 型システム <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対するランタイム呼び出しを処理する <see cref="T:System.Xaml.XamlMember" /> 実装。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>アタッチ可能なプロパティを表す <see cref="T:System.Xaml.XamlMember" /> に対する <see cref="T:System.Xaml.XamlMember" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attachablePropertyName">アタッチ可能なプロパティの文字列名。</param>
      <param name="getter">アタッチ可能なメンバーのバッキング実装の <see langword="get" /> アクセサーに対する CLR 型システムの <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter">アタッチ可能なメンバーのバッキング実装の <see langword="set" /> アクセサーに対する CLR 型システムの <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>アタッチ可能なプロパティを表す <see cref="T:System.Xaml.XamlMember" /> (<see cref="T:System.Xaml.XamlMember" /> の情報を含みます) に対する <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attachablePropertyName">アタッチ可能なプロパティの文字列名。</param>
      <param name="getter">アタッチ可能なメンバーのバッキング実装の <see langword="get" /> アクセサーに対する CLR 型システムの <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter">アタッチ可能なメンバーのバッキング実装の <see langword="set" /> アクセサーに対する CLR 型システムの <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対するランタイム呼び出しを処理する <see cref="T:System.Xaml.XamlMember" /> 実装。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>アタッチ可能なイベントを表す <see cref="T:System.Xaml.XamlMember" /> に対する <see cref="T:System.Xaml.XamlMember" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attachableEventName">アタッチ可能なイベントの文字列名。</param>
      <param name="adder">アタッチ可能なメンバーのバッキング実装のハンドラー <see langword="Add" /> メソッドに対する CLR 型システムの <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>アタッチ可能なイベントを表す <see cref="T:System.Xaml.XamlMember" /> (<see cref="T:System.Xaml.XamlMember" /> の情報を含みます) に対する <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attachableEventName">アタッチ可能なイベントの文字列名。</param>
      <param name="adder">アタッチ可能なメンバーのバッキング実装のハンドラー <see langword="Add" /> メソッドに対する CLR 型システムの <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext">メンバーを修飾する <see cref="T:System.Xaml.XamlSchemaContext" /> コンテキスト。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に対するランタイム呼び出しを処理する <see cref="T:System.Xaml.XamlMember" /> 実装。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary>文字列名と宣言 <see cref="T:System.Xaml.XamlMember" /> 情報を使用して、<see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。 このシグネチャで作成された <see cref="T:System.Xaml.XamlMember" /> には重要な制限があります。</summary>
      <param name="name">メンバーの文字列名。</param>
      <param name="declaringType">宣言している型に対する <see cref="T:System.Xaml.XamlType" /> 情報。</param>
      <param name="isAttachable">メンバーがアタッチ可能であることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="declaringType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary>この <see cref="T:System.Xaml.XamlType" /> に関連付けられているメンバーを宣言する型の <see cref="T:System.Xaml.XamlMember" /> を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> に関連付けられているメンバーを宣言する型の <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトを取得します。これは XAML で宣言されたオブジェクトの遅延読み込みに使用されます。</summary>
      <returns>ジェネリックの <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.Xaml.XamlDeferringLoader" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary>
        <see cref="T:System.Xaml.XamlMember" /> オブジェクトのリストを取得します。 これらは、この <see cref="T:System.Xaml.XamlMember" /> に関連して初期化順序の依存関係が存在するメンバーを報告します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> オブジェクトのリスト。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary>現在のオブジェクトが、別のオブジェクトと等しいかどうかを示します。</summary>
      <param name="obj">このオブジェクトと比較するオブジェクト。</param>
      <returns>現在のオブジェクトが <paramref name="obj" /> パラメーターと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary>現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</summary>
      <param name="other">このオブジェクトと比較するオブジェクト。</param>
      <returns>現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary>このオブジェクトのハッシュ コードを返します。</summary>
      <returns>整数のハッシュ コード。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary>この XAML メンバーが存在することのできる XAML 名前空間のリストを返します。</summary>
      <returns>文字列としての XAML 名前空間識別子のリスト。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary>この <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に関連付けられている <see cref="T:System.Xaml.XamlMember" /> の実装を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に関連付けられている <see cref="T:System.Xaml.XamlMember" /> 実装。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> をアンビエント プロパティとして報告するかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> がアンビエント プロパティとして報告される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> がアタッチ可能なメンバーかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> がアタッチ可能なメンバーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が XAML ディレクティブかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が XAML ディレクティブである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> がイベント メンバーを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> がイベントを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が <see cref="P:System.Xaml.XamlMember.Name" /> として有効な <see langword="xamlName" /> 文字列を使用して初期化されているかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が有効な <see langword="true" /> 文字列で初期化されている場合は <see langword="xamlName" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が読み取り専用のメンバーを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が読み取り専用メンバーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が、呼び出し可能なパブリックの <see langword="get" /> アクセサーを持つメンバーを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が呼び出し可能なパブリックの <see langword="true" /> アクセサーを表す場合は <see langword="get" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary>型およびメンバーの解決に使用されるバッキング システムによって解決できないメンバーであるかどうかを示す値を取得します。</summary>
      <returns>メンバーを解決できない場合は <see langword="true" />。メンバーを解決できる場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が書き込み専用のメンバーを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が書き込み専用メンバーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が、呼び出し可能なパブリックの <see langword="set" /> アクセサーを持つメンバーを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が呼び出し可能なパブリックの <see langword="true" /> アクセサーを表す場合は <see langword="set" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary>派生クラスで実装される場合、<see cref="T:System.Reflection.ICustomAttributeProvider" /> 実装を返します。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> の実装。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトを返します。これは XAML で宣言されたオブジェクトの遅延読み込みに使用されます。</summary>
      <returns>ジェネリックの <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.Xaml.XamlDeferringLoader" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary>
        <see cref="T:System.Xaml.XamlMember" /> オブジェクトの一覧を返します。 一覧の項目では、この <see cref="T:System.Xaml.XamlMember" /> に関連して初期化順序の依存関係が存在するメンバーが報告されます。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> オブジェクトのリスト。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary>この <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> に関連付けられた <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> の <see cref="T:System.Xaml.XamlMember" /> 情報、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> がアンビエント プロパティとして報告されているかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> をアンビエント プロパティとして報告する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> がイベントを表すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> がイベントを表すことを報告する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が目的の読み取り専用プロパティを表すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> を目的の読み取り専用プロパティとして報告する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> がパブリックの <see langword="get" /> アクセサーを持つプロパティを表すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> がパブリックの <see langword="true" /> アクセサーを持つプロパティを表す場合は <see langword="get" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が型およびメンバーの解決に使用されるバッキング システムによって解決できないメンバーを表すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が解決できないメンバーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> が、パブリックの <see langword="set" /> アクセサーを持ちパブリックの <see langword="get" /> アクセサーを持たないメンバーを表すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が書き込み専用メンバーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> がパブリックの <see langword="set" /> アクセサーを持つメンバーを表すかどうかを返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> が書き込み可能なメンバーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
      <summary>マークアップ拡張の左角かっこと右角かっこ文字を返します。</summary>
      <returns>左角かっこと右角かっこ文字を含むコレクション。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" /> が存在できる型の <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> が存在できる型。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary>メンバーで使用される型の <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <returns>メンバーで使用される型の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> に関連付けられている型コンバーターの実装を返します。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.ComponentModel.TypeConverter" /> インスタンス、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> に関連付けられている <see langword="get" /> アクセサーを返します。</summary>
      <returns>関連付けられている <see langword="get" /> アクセサーの <see cref="T:System.Reflection.MethodInfo" />、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary>この <see cref="T:System.Reflection.MemberInfo" /> に関連付けられている CLR 型システムの <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
      <returns>この <see cref="T:System.Reflection.MemberInfo" /> に関連付けられている CLR 型システムの <see cref="T:System.Xaml.XamlMember" />、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> に関連付けられている <see langword="set" /> アクセサーを返します。</summary>
      <returns>関連付けられている <see langword="set" /> アクセサーの <see cref="T:System.Reflection.MethodInfo" />、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> に関連付けられている値シリアライザーの実装を返します。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.Windows.Markup.ValueSerializer" /> インスタンス、または <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
      <summary>マークアップ拡張の左角かっこと右角かっこ文字を定義します。</summary>
      <returns>左角かっこと右角かっこ文字を含むコレクション。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> を宣言する <see langword="xamlName" /> 名文字列を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> を宣言する <see langword="xamlName" /> 名文字列。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>指定した 2 つの <see cref="T:System.Xaml.XamlMember" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="xamlMember1" /> の値が <paramref name="xamlMember2" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>指定した 2 つの <see cref="T:System.Xaml.XamlMember" /> オブジェクトの値が異なるかどうかを判断します。</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="xamlMember1" /> の値が <paramref name="xamlMember2" /> の値と異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary>
        <see cref="T:System.Xaml.XamlMember" /> のプライマリ XAML 名前空間を識別する単一の XAML 名前空間の URI を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> のプライマリ XAML 名前空間の識別子を示す文字列。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary>ビジュアルなデザイナーでのメンバーの処理方法を示す <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 値を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列挙体の値。 既定値は、<see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" /> が存在できる型の <see cref="T:System.Xaml.XamlMember" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> が存在できる型。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> の文字列表現を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> の文字列表現。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary>メンバーで使用される型の <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>メンバーで使用される型の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary>XAML で宣言されたオブジェクトの型変換の構築に使用できる <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトを取得します。</summary>
      <returns>ジェネリックの <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.ComponentModel.TypeConverter" /> の値。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary>
        <see cref="T:System.Reflection.MemberInfo" />、<see cref="T:System.Reflection.PropertyInfo" />、または <see cref="T:System.Reflection.MethodInfo" /> によって構築されるメンバーで使用できる CLR 型システム <see cref="T:System.Reflection.EventInfo" /> を取得します。</summary>
      <returns>初期コンストラクター パラメーターからキャストされた CLR 型システム <see cref="T:System.Reflection.MemberInfo" /> の情報。 <see cref="T:System.Xaml.XamlMember" /> シグネチャを使用して構築された <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> は、<see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトを取得します。これは XAML で宣言されたオブジェクトの値のシリアル化に使用されます。</summary>
      <returns>ジェネリックの <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary>延期実行で XAML ノードを書き込む場合などに使用できる XAML ノードのリストを提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>指定されたスキーマ コンテキストを使用して、<see cref="T:System.Xaml.XamlNodeList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="schemaContext">ノード操作に使用するスキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary>指定されたスキーマ コンテキストとリスト サイズを使用して、<see cref="T:System.Xaml.XamlNodeList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="schemaContext">ノード操作に使用するスキーマ コンテキスト。</param>
      <param name="size">使用するリストの項目数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary>このリスト内の項目を削除します。</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary>この <see cref="T:System.Xaml.XamlNodeList" /> 内のノードの数を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlNodeList" /> に含まれるノードの数。</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary>XAML リーダーの実装デリゲートを返します。</summary>
      <returns>XAML リーダーの実装デリゲート。</returns>
      <exception cref="T:System.Xaml.XamlException">
        <see cref="T:System.Xaml.XamlNodeList" /> は、まだ書き込みモードです。  
または 
ノード リストに使用される XAML ライターに、有効なスキーマ コンテキストがありません。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary>関連付けられている XAML ライターを取得します。</summary>
      <returns>関連付けられている XAML ライター。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary>ノードの書き込みと再読み取りのためのバッファーを提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>指定した XAML スキーマ コンテキストを使用して、<see cref="T:System.Xaml.XamlNodeQueue" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="schemaContext">ノード操作に使用するスキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlSchemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary>
        <see cref="T:System.Xaml.XamlNodeQueue" /> 内のノードの数を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeQueue" /> に含まれるノードの数。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary>この <see cref="T:System.Xaml.XamlNodeQueue" /> がノードを含んでいない状態かどうかを判断する値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlNodeQueue" /> がノードを含んでいない場合は <see langword="true" />。この <see cref="T:System.Xaml.XamlNodeQueue" /> がノードを含んでいる場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary>XAML リーダーの実装デリゲートを取得します。</summary>
      <returns>XAML リーダーの実装デリゲート。</returns>
      <exception cref="T:System.Xaml.XamlException">ノード リストに使用される XAML ライターに、有効な XAML スキーマ コンテキストがありません。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary>関連付けられている XAML ライターを取得します。</summary>
      <returns>関連付けられている XAML ライター。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary>XAML リーダーが現在処理中のノードの型を記述します。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary>リーダーはメンバー ノードの終了位置にあります。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary>リーダーはオブジェクト ノードの終了位置にあります。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary>リーダーはオブジェクト ノード内にあり、指定されたオブジェクト値ではなく既定または暗黙の値を書き込んでいます。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary>リーダーは XML 名前空間宣言内にあります。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary>リーダーの位置に実際のノードがありません (たとえば、リーダーの位置がファイルの末尾の場合です)。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary>リーダーはメンバー ノードの開始位置にあります。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary>リーダーはオブジェクト ノードの開始位置にあります。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary>リーダーはノード内にあり、値を処理中です。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary>オブジェクトの初期化およびプロパティ設定のために、順番に挿入できるコールバックのデータを提供します。 これは、<see cref="T:System.Xaml.XamlObjectWriter" /> によって生成されるオブジェクト グラフに影響を与えます。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="instance">イベント データに関連するオブジェクトのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLineNumber">
      <summary>関連するオブジェクトのインスタンスの行番号を取得または設定します。</summary>
      <returns>要素の行番号。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLinePosition">
      <summary>関連するオブジェクトのインスタンスの行内の位置を取得または設定します。</summary>
      <returns>要素のリスト内の位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary>イベント データに関連するオブジェクトのインスタンスを取得します。</summary>
      <returns>イベント データに関連するオブジェクトのインスタンス。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.SourceBamlUri">
      <summary>関連するオブジェクトのインスタンスの BAML URI を取得または設定します。</summary>
      <returns>関連するオブジェクトのインスタンスの BAML URI。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary>オブジェクト グラフを読み取り、XAML ノード ストリームを生成する <see cref="T:System.Xaml.XamlReader" /> 実装を提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="instance">読み取るオブジェクト ツリーまたはオブジェクト グラフのルート。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary>指定されたリーダー設定を使用して、<see cref="T:System.Xaml.XamlObjectReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="instance">読み取るオブジェクト ツリーのルート。</param>
      <param name="settings">設定オブジェクト。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary>指定されたスキーマ コンテキストを使用して、<see cref="T:System.Xaml.XamlObjectReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="instance">読み取るオブジェクト ツリーのルート。</param>
      <param name="schemaContext">リーダーが使用するスキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary>指定されたスキーマ コンテキストとリーダー設定を使用して、<see cref="T:System.Xaml.XamlObjectReader" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="instance">読み取るオブジェクト ツリーのルート。</param>
      <param name="schemaContext">リーダーが使用するスキーマ コンテキスト。</param>
      <param name="settings">設定オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary>現在のリーダーの位置にある使用可能なオブジェクト インスタンスを取得します。</summary>
      <returns>現在のリーダーの位置にあるオブジェクト インスタンス。リーダーがオブジェクト上に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary>リーダーがファイルの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns>ファイルの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary>リーダーが <see cref="T:System.Xaml.XamlMember" /> 上に配置されている場合に、リーダーが現在配置されている <see cref="F:System.Xaml.XamlNodeType.StartMember" /> を取得します。</summary>
      <returns>現在のメンバー。リーダーがメンバー上に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary>現在のリーダーの位置から XAML 名前空間宣言を取得します。</summary>
      <returns>リーダーが <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" /> 上に配置されている場合は XAML 名前空間宣言。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>現在のノードの種類。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary>ソース オブジェクト グラフから次の XAML ノードを読み取ります (ノードがある場合)。</summary>
      <returns>ノードがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary>情報セットにスキーマ情報を提供するオブジェクトを取得します。</summary>
      <returns>情報セットにスキーマ情報を提供するオブジェクト。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary>現在のリーダーの位置にあるオブジェクトの <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>現在のリーダーの位置にあるオブジェクトの <see cref="T:System.Xaml.XamlType" />。リーダーがオブジェクト上に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary>現在のリーダーの位置にあるノードの値を取得します。</summary>
      <returns>現在のノードの値。リーダーの位置が <see cref="F:System.Xaml.XamlNodeType.Value" /> ノード型にない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary>複数の <see cref="T:System.Xaml.XamlObjectReader" /> 内部ヘルパー API によってスローされる例外。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Xaml.XamlObjectReaderException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlObjectReaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Xaml.XamlObjectReaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Xaml.XamlObjectReaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReader" /> の処理規則またはオプション設定を指定します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary>コンテキストに対して関連付けられた <see cref="T:System.Xaml.XamlObjectReader" /> を使用するライターが、コンテンツの書き出しに明示的にデザイナーの設定を使用するかどうかを決定する値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Xaml.XamlMember.IsWritePublic" /> が <see langword="true" /> のとき、このコンテキストを使用するライターがすべての出力コンテンツの書き込みにデザイナーの設定を使用する場合は <see langword="false" />。デザイナーの設定を無視する場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary>作成元の XAML ノード ストリームからオブジェクト グラフを作成します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> で使用される XAML スキーマ コンテキストを使用して、<see cref="T:System.Xaml.XamlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="schemaContext">書き込み用のノードを提供する XAML リーダーとの間で共有される XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> が使用するコンテキストとその設定を使用して、<see cref="T:System.Xaml.XamlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="schemaContext">書き込み用のノードを提供する XAML リーダーとの間で共有される XAML スキーマ コンテキスト。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlObjectWriter" /> の動作および出力の特定のオプションを指定する設定オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary>すべての使用可能なフレームをリセットし、オブジェクト グラフをクリアします。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> メソッドを呼び出します。</summary>
      <param name="value">報告する対象のオブジェクト。 このオブジェクトは、ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> にパッケージ化されます。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> メソッドを呼び出します。</summary>
      <param name="value">報告する対象のオブジェクト。 この値は、ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> にパッケージ化されます。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> 参照メソッドを呼び出します。</summary>
      <param name="value">報告する対象のオブジェクト。 これは、ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> にパッケージ化されます。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary>この <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> の <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Xaml.XamlObjectWriter" /> 参照メソッドを呼び出します。</summary>
      <param name="value">ハンドラーの呼び出し時に <see cref="T:System.Xaml.XamlObjectEventArgs" /> を通じて渡される値。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary>
        <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> イベント データの <paramref name="handled" /> が <see langword="true" /> でない場合に、このライターの <see cref="T:System.Xaml.XamlObjectWriterSettings" /> に関連付けられている任意の <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 参照メソッドを呼び出します。</summary>
      <param name="eventSender">送信元としてハンドラーに報告するオブジェクト。</param>
      <param name="member">設定するプロパティの名前。これは、<see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> の一部としてハンドラーに渡されます。</param>
      <param name="value">
        <paramref name="property" /> で指定されたプロパティに提供する値。 この値は、<see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> の一部としてハンドラーに渡されます。</param>
      <returns>関連付けられている任意のハンドラーによって設定されたブール値。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary>最後に書き込まれたオブジェクトを取得します。 通常、ノード ストリームがその末尾に達したとき、およびオブジェクト グラフが完成したときにだけ呼び出されます。</summary>
      <returns>最後に書き込まれたオブジェクト、または <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary>XAML オブジェクト ライターの絶対ノード ルートの XAML 名前スコープを管理する <see cref="T:System.Windows.Markup.INameScope" /> サービスを取得します。</summary>
      <returns>オブジェクト ライターの現在のルートの XAML 名前スコープを管理する <see cref="T:System.Windows.Markup.INameScope" /> サービス。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary>アクティブな XAML スキーマ コンテキストを取得します。</summary>
      <returns>XAML スキーマ コンテキスト。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary>
        <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> を実装し、例外の行情報を提供します。</summary>
      <param name="lineNumber">リーダーからの行番号。</param>
      <param name="linePosition">リーダーからの行の位置。</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary>行情報サービスによって値が提供され、関連する場合に <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> メソッドの呼び出しも行われるかどうかを報告する値を取得します。</summary>
      <returns>ライターが行情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary>現在のメンバー スコープを閉じます。閉じるときにメンバー スコープの値を書き込む場合があります。 新しいスコープは、メンバーの親オブジェクトのスコープになります。</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException">この呼び出しと前の <see langword="StartMember" /> の間で見つかる値ノードからメンバーの値を作成できませんでした。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary>ライターの現在のオブジェクト スコープを閉じます。 新しいオブジェクト スコープは、親メンバーのスコープになります。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary>指定したオブジェクトが親プロパティの既定または暗黙の値である場合に、概念上の <see langword="StartObject" /> をオブジェクト グラフに書き込みます。 暗黙の値は、入力 XAML ノード セットでオブジェクト値として指定されているのではなく、XAML スキーマ コンテキストから取得した情報およびバッキング型情報から取得します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>次のオブジェクト スコープまたはメンバー スコープに適用される名前空間の宣言を定義します。</summary>
      <param name="namespaceDeclaration">書き込む名前空間宣言。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> のコンポーネントが <see langword="null" /> です。</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException">XAML 名前空間ノードを無効なスコープで記述しようとしました。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>現在のオブジェクト スコープに新しいメンバー ノードを書き込みます。スコープは新しいメンバーのスコープになります。</summary>
      <param name="property">書き込む XAML プロパティ。 通常、この値は XAML リーダーから XAML ノード ストリームを介して取得します。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <paramref name="property" /> の <see cref="P:System.Xaml.XamlMember.IsUnknown" /> が <see langword="true" /> に設定されました。  
または 
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> が渡されました。これは、XAML ノード ストリームにコンテンツをサポートしないオブジェクトのコンテンツが含まれることを示します。  

または - 
開始メンバーを無効なスコープで記述しようとしました。</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException">
        <paramref name="property" /> は、親オブジェクトのスコープで既に明示的に設定されているプロパティを指定します。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>現在のスコープにオブジェクト ノードを書き込みます。スコープを新しいオブジェクトのスコープに設定します。</summary>
      <param name="xamlType">書き込む型。 通常この値は XAML リーダーから取得します。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <see cref="P:System.Xaml.XamlType.IsUnknown" /> 型を処理します。オブジェクトを作成できません。  

または - 
開始オブジェクトを無効なスコープで記述しようとしました。</exception>
      <exception cref="T:System.Xaml.XamlParseException">ルート オブジェクトが既に設定に提供されたときにルート オブジェクトを書き込もうとしました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary>現在のメンバー スコープに値を書き込みます。 現在のスコープがコレクション、ディクショナリ、または配列オブジェクトの内部にある場合、値はコレクション、ディクショナリ、または配列内に追加されます。</summary>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">無効なスコープで値を書き込もうとしました。</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary>XAML ノード ストリームからオブジェクト グラフを作成中の XAML ライター (<see cref="T:System.Xaml.XamlObjectWriter" /> クラスなど) でエラーが発生した場合にスローされる例外です。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Xaml.XamlObjectWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlObjectWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Xaml.XamlObjectWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Xaml.XamlObjectWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> 固有の XAML ライター設定を提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary>既存のインスタンスのコピーに基づく <see cref="T:System.Xaml.XamlObjectWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="settings">コピー対象の設定インスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary>XAML ライターによって適用される <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> のアクセス許可を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> のアクセス許可。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary>作成された各オブジェクトの有効期間の <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> フェーズで XAML ライターによって呼び出されたコールバックへの参照を取得または設定します。</summary>
      <returns>オブジェクトの有効期間の <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> フェーズで XAML ライターによって呼び出されたコールバック。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary>作成された各オブジェクトの有効期間の <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> フェーズで XAML ライターによって呼び出されたコールバックへの参照を取得または設定します。</summary>
      <returns>オブジェクトの有効期間の <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> フェーズで XAML ライターによって呼び出されたコールバック。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary>作成された各オブジェクトの有効期間の post-member-write フェーズで XAML ライターによって呼び出されたコールバックへの参照を取得または設定します。</summary>
      <returns>オブジェクトの有効期間の post-member-write フェーズで XAML ライターによって呼び出されたコールバック。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary>作成された各オブジェクトの有効期間の pre-member-write フェーズで XAML ライターによって呼び出されたコールバックへの参照を取得または設定します。</summary>
      <returns>オブジェクトの有効期間の pre-member-write フェーズで XAML ライターによって呼び出されたコールバック。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary>
        <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> が <see langword="true" /> の場合に、XAML ライターからの名前の登録に使用する XAML 名前スコープを取得または設定します。</summary>
      <returns>名前の登録に使用する XAML 名前スコープ。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary>型コンバーターを使用する状況で、XAML ライターが <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> の <see cref="T:System.ComponentModel.TypeConverter" /> 実装を無視する (呼び出さない) かどうかを指定する値を取得または設定します。</summary>
      <returns>XAML ライターが <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 実装を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary>オブジェクト グラフ表現を書き込む前に <see cref="T:System.Xaml.XamlObjectWriter" /> の <paramref name="K" /> コンポーネントの型変換を実行する既定の <see cref="T:System.Collections.Generic.Dictionary`2" /> 機能を無効にするかどうかを判断する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクトの <paramref name="K" /> 型変換を無効にする場合は <see langword="true" />。 <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクトの <paramref name="K" /> 型変換を適用する場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary>指定された <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> に対して名前の登録を行う必要があるかどうかを判断する値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> に対して名前の登録を行う場合は <see langword="true" />。名前の登録を親 XAML 名前スコープに行う場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> の操作に使用する既存のルート オブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlObjectWriter" /> の操作に使用する既存のルート オブジェクト。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary>XAML ライターが重複するプロパティをチェックするコード パスのチェックを省略するかどうかを判断する値を取得または設定します。</summary>
      <returns>重複するプロパティのチェックを省略する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> がマークアップ拡張機能の <see langword="ProvideValue" /> の呼び出しを省略する必要があるかどうかを示す値を取得または設定します。これは、マークアップ拡張機能がオブジェクト グラフのルートを表す場合に使用します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlObjectWriter" /> がマークアップ拡張機能の <see langword="true" /> の呼び出しを省略する必要がある場合は <see langword="ProvideValue" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri">
      <summary>実際の <see langword="BaseUri" /> の代わりに <see langword="BeginInitHandler" /> に使用されました。</summary>
      <returns>実際の <see langword="BaseUri" /> の代わりに使用される <see cref="T:System.Uri" /> 。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary>オブジェクト ライターが CLR で実装された、依存関係プロパティの <see langword="SetValue" /> を呼び出す場合に使用するハンドラーを取得または設定します。</summary>
      <returns>このような場合の処理を行うハンドラーの実装。</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary>XAML リーダーが XAML リーダー ソースの要素を処理して XAML ノード ストリームにできない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Xaml.XamlParseException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlParseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Xaml.XamlParseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Xaml.XamlParseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary>XAML 入力を処理して XAML ノード ストリームを生成するクラスの基本定義を提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> クラスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary>XAML ノード ストリームを閉じます。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary>
        <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> が呼び出されているかどうかを取得します。</summary>
      <returns>
        <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> が呼び出されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary>派生クラスで実装されている場合に、リーダーがファイルの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns>XAML ノード ストリームのファイルの概念上の末尾に配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary>派生クラスで実装されており、リーダーが <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上に配置されている場合は、リーダーが現在配置されているメンバーを取得します。</summary>
      <returns>現在のメンバー。リーダーがメンバー上に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary>派生クラスで実装されている場合に、現在のノードから XAML 名前空間情報を取得します。</summary>
      <returns>XAML 名前空間情報 (使用可能な場合)。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary>派生クラスで実装された場合、現在のノードの型を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 列挙体の値。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary>派生クラスで実装された場合、処理対象から次の XAML ノードを読み取ります (ノードがある場合)。</summary>
      <returns>ノードがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary>現在の <see cref="T:System.Xaml.XamlReader" /> に基づく <see cref="T:System.Xaml.XamlReader" /> を返します。返された <see cref="T:System.Xaml.XamlReader" /> は、XAML ノード構造のサブツリーでの反復処理に使用されます。</summary>
      <returns>サブツリーの新しい XAML リーダー インスタンス。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary>派生クラスで実装されている場合に、情報セットに XAML スキーマ コンテキスト情報を提供するオブジェクトを取得します。</summary>
      <returns>情報セットに XAML スキーマ コンテキスト情報を提供するオブジェクト。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary>現在のノードをスキップして、リーダーの位置を次のノードに進めます。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary>派生クラスで実装されている場合に、現在のノードの <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>現在のノードの <see cref="T:System.Xaml.XamlType" />。現在のリーダーの位置がオブジェクト上にない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary>派生クラスで実装された場合、現在のノードの値を取得します。</summary>
      <returns>現在のノードの値。現在のリーダーの位置が <see cref="F:System.Xaml.XamlNodeType.Value" /> ノード型にない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> 実装の処理規則またはオプション設定を指定します。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary>別の <see cref="T:System.Xaml.XamlReaderSettings" /> オブジェクトの値に基づいて、<see cref="T:System.Xaml.XamlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="settings">既存の <see cref="T:System.Xaml.XamlReaderSettings" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary>XAML 型表現を報告する場合に、保護されたコードのアクセス モデルを持つメンバーがルート オブジェクトに含まれているかどうかを示す値を取得または設定します。</summary>
      <returns>保護されたコードのアクセス モデルを持つメンバーがルート オブジェクトに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary>相対パスの解決に使用される基本の URI を取得または設定します。</summary>
      <returns>使用する基本の URI。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary>プロパティ要素に存在する <see langword="x:Uid" /> 属性の値を XAML リーダーが無視する必要があるかどうかを指定する値を取得または設定します。</summary>
      <returns>プロパティ要素の <see langword="true" /> 属性の値をリーダーが無視する必要がある場合は <see langword="x:Uid" />。 プロパティ要素の <see langword="false" /> 属性をリーダーが処理する必要がある場合は <see langword="x:Uid" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary>処理対象の現在のローカル アセンブリを表すオブジェクトを取得または設定します。 このアセンブリ情報は、<see cref="M:System.Xaml.XamlType.GetAllMembers" /> などのヘルパー API の呼び出しで使用されます。</summary>
      <returns>CLR リフレクションの <see cref="T:System.Reflection.Assembly" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary>リーダーが行番号と位置を提供できるかどうかを指定する値を取得または設定します。</summary>
      <returns>リーダーが行番号と位置を提供できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary>リーダーがすべての <see langword="Value" /> ノードを強制的に <see langword="String" /> 型として処理するかどうかを指定する値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> のみが <see langword="String" /> ノードに含まれるようにリーダーが強制する場合は <see langword="Value" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary>XAML 型およびそれらの基になるアセンブリ内の型を解釈またはマッピングするために再利用できるコンテキストを定義します。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlSchemaContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>参照アセンブリのセットに基づいて、<see cref="T:System.Xaml.XamlSchemaContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="referenceAssemblies">アセンブリ情報項目の列挙可能なセット。 各アセンブリ情報項目は、<see cref="T:System.Reflection.Assembly" /> の値によって指定されます。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary>参照アセンブリのセットおよび設定オブジェクトに基づいて、<see cref="T:System.Xaml.XamlSchemaContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="referenceAssemblies">アセンブリ情報の列挙可能なセット。 各アセンブリ情報項目は、<see cref="T:System.Reflection.Assembly" /> の値によって指定されます。</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlSchemaContext" /> の構築に使用する設定オブジェクト。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>設定オブジェクトに基づいて、<see cref="T:System.Xaml.XamlSchemaContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="settings">
        <see cref="T:System.Xaml.XamlSchemaContext" /> の構築に使用する設定オブジェクト。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary>
        <see langword="Finalize" /> が呼び出されない非標準の <see langword="Dispose" /> 実装を提供します。</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>XAML スキーマとそのコンテキストで検索 API から返される値の完全修飾アセンブリ名を使用するかどうかを指定する値を取得します。</summary>
      <returns>XAML スキーマとそのコンテキストで検索 API から返される値の完全修飾アセンブリ名を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary>この <see cref="T:System.Xaml.XamlSchemaContext" /> が保持するアセンブリを検索し、名前空間のセットを返します。</summary>
      <returns>名前空間の識別子の列挙可能なセット。 これらの識別子は文字列として提供されます。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary>この <see cref="T:System.Xaml.XamlSchemaContext" /> が保持するアセンブリを検索し、指定された XAML 名前空間から型のセットを返します。</summary>
      <param name="xamlNamespace">返される型の XAML 名前空間。</param>
      <returns>XAML 型の列挙可能なセット。 セット内の各 XAML 型は、<see cref="T:System.Xaml.XamlType" /> オブジェクトによって表されます。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary>指定された XAML 名前空間を割り当てるときにコンシューマーが使用するのに適切なプレフィックスとして報告された文字列を取得します。</summary>
      <param name="xmlns">適切なプレフィックスを取得する XAML 名前空間。</param>
      <returns>マークアップで使用する指定された XAML 名前空間を割り当てるときにコンシューマーが使用する必要のある文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlns" /> が null です。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary>要求された <paramref name="targetType" /> への変換を行うことができる値コンバーターを返します。</summary>
      <param name="converterType">コンバーター実装。</param>
      <param name="targetType">コンバーターの目的の変換先の型。</param>
      <typeparam name="TConverterBase">特定のコンバーター基本クラス。</typeparam>
      <returns>メソッドの呼び出し時に指定された制約と一致する制約がある <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary>XAML 言語または特定の実装のディレクティブを表す <see cref="T:System.Xaml.XamlDirective" /> 値を返します。</summary>
      <param name="xamlNamespace">名前付きディレクティブが含まれている XAML 名前空間。</param>
      <param name="name">取得するディレクティブの名前。</param>
      <returns>要求されたディレクティブを表す <see cref="T:System.Xaml.XamlDirective" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> または <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary>XAML 名前空間と型名の文字列に基づく <see cref="T:System.Xaml.XamlType" /> を返します。 このシグネチャでは、目的の型がジェネリック型である場合は型引数を指定できます。</summary>
      <param name="xamlNamespace">目的の型が含まれている XAML 名前空間。</param>
      <param name="name">目的の型の文字列名。</param>
      <param name="typeArguments">ジェネリック型の初期化型引数。</param>
      <returns>入力された条件に一致する <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary>CLR 型識別子に基づく <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <param name="type">
        <see cref="T:System.Xaml.XamlType" /> を取得する対象の型。</param>
      <returns>入力された <paramref name="type" /> に一致する <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary>XAML システム型名に基づく <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <param name="xamlTypeName">
        <see cref="T:System.Xaml.XamlType" /> を取得する対象の XAML 型名。</param>
      <returns>入力された <paramref name="xamlTypeName" /> に一致する <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="xamlTypeName" /> のコンポーネント (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> または <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlTypeName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary>包含されている XAML 名前空間の解決に必要なアセンブリを解決するために操作によってこのスキーマ コンテキストが使用される場合に呼び出されます。</summary>
      <param name="assemblyName">読み込むアセンブリの名前。</param>
      <returns>解決されたアセンブリ。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary>XAML スキーマ コンテキストの参照アセンブリの列挙可能なセットを取得します。</summary>
      <returns>スキーマ コンテキストの参照アセンブリの列挙可能なセット。 各アセンブリ情報項目は、<see cref="T:System.Reflection.Assembly" /> の値によって指定されます。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary>XAML スキーマとそのコンテキストで、アリティ (入力パラメーターの個数) が同じコンストラクターを 2 つ持つマークアップ拡張機能がサポートされるかどうかを指定する値を取得します。</summary>
      <returns>スキーマ コンテキストで重複するアリティを持つマークアップ拡張が許可される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary>互換性のある XAML 名前空間に対する要求の成功または失敗を返します。 成功した要求では、Out パラメーターとしてその XAML 名前空間が報告されます。</summary>
      <param name="xamlNamespace">互換性の結果を確認する対象の XAML 名前空間の <see langword="xmlns" /> 文字列。</param>
      <param name="compatibleNamespace">このメソッドから戻るときには、互換性のある XAML 名前空間要求の <see langword="xmlns" /> 文字列。 メソッドが <see langword="false" /> を返す場合、これは <paramref name="xamlNamespace" /> と同じである可能性があります。</param>
      <returns>
        <paramref name="compatibleNamespace" /> に有効な結果が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary>
        <see cref="T:System.Xaml.XamlSchemaContext" /> のオプション設定を提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlSchemaContextSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>既存の <see cref="T:System.Xaml.XamlSchemaContextSettings" /> インスタンスの値をコピーして、<see cref="T:System.Xaml.XamlSchemaContextSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="settings">既存の <see cref="T:System.Xaml.XamlSchemaContextSettings" />。</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>XAML スキーマとそのコンテキストで検索 API から返される値の完全修飾アセンブリ名を使用するかどうかを指定する値を取得または設定します。</summary>
      <returns>XAML スキーマとそのコンテキストで検索 API から返される値の完全修飾アセンブリ名を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary>XAML スキーマ コンテキストで、アリティ (入力パラメーターの個数) が同じコンストラクターを 2 つ持つマークアップ拡張機能が許可されるかどうかを指定する値を取得または設定します。</summary>
      <returns>スキーマ コンテキストで重複するアリティのマークアップ拡張機能が許可される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary>XAML のバインディング システムまたは別のスキーマ表現システムがスキーマ コンテキストに対して例外を報告した場合にスローされる例外です。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Xaml.XamlSchemaException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlSchemaException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Xaml.XamlSchemaException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Xaml.XamlSchemaException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary>XAML の読み取りとオブジェクト グラフの書き込み、オブジェクト グラフの読み取りとシリアル化用の XAML ファイル出力の書き込みなどの共通の XAML タスクのための高いレベルのサービス (静的メソッド) を提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary>XAML リーダーの読み取り元の <see cref="T:System.IO.Stream" /> を読み込み、その出力をオブジェクト グラフとして書き込みます。</summary>
      <param name="stream">入力として読み込むストリーム。</param>
      <returns>出力として書き込まれるオブジェクト グラフ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary>
        <see cref="T:System.IO.TextReader" /> から XAML リーダーを作成し、オブジェクト グラフを返します。</summary>
      <param name="textReader">作成する <see cref="T:System.IO.TextReader" /> の基礎として使用する <see cref="T:System.Xml.XmlReader" />。</param>
      <returns>返されるオブジェクト グラフ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary>XAML リーダーの読み取り元の <see cref="T:System.IO.Stream" /> を読み込み、オブジェクト グラフを返します。</summary>
      <param name="fileName">読み込み元として使用するファイル名。</param>
      <returns>返されるオブジェクト グラフ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary>固有の XAML リーダー実装を読み込み、オブジェクト グラフを返します。</summary>
      <param name="xamlReader">この <see langword="Load" /> 操作のリーダーとして使用する XAML リーダー実装。</param>
      <returns>返されるオブジェクト グラフ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary>固有の XML リーダー実装を読み込み、オブジェクト グラフを返します。</summary>
      <param name="xmlReader">この <see langword="Load" /> 操作のリーダーとして使用する <see cref="T:System.Xml.XmlReader" /> 実装。</param>
      <returns>出力されたオブジェクト グラフ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary>XAML を文字列出力として読み取り、オブジェクト グラフを返します。</summary>
      <param name="xaml">解析する XAML 文字列入力。</param>
      <returns>返されるオブジェクト グラフ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xaml" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary>提供されたオブジェクト グラフを XAML ノード表現に処理した後、シリアル化の出力ストリームに処理します。</summary>
      <param name="stream">宛先のストリーム。</param>
      <param name="instance">処理されるオブジェクト グラフのルート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary>提供されたオブジェクト グラフを XAML ノード表現に処理した後、提供された <see cref="T:System.IO.TextWriter" /> で使用される出力に処理します。</summary>
      <param name="writer">出力を書き込む <see cref="T:System.IO.TextWriter" />。</param>
      <param name="instance">処理されるオブジェクト グラフのルート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary>提供されたオブジェクト ツリーを XAML ノード表現に処理した後、出力 XAML の文字列形式を返します。</summary>
      <param name="instance">処理されるオブジェクト グラフのルート。</param>
      <returns>文字列としての XAML マークアップ出力。</returns>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary>提供されたオブジェクト グラフを XAML ノード表現に処理した後、提供された場所の出力ファイルに書き込みます。</summary>
      <param name="fileName">出力を書き込むファイルの名前と場所。</param>
      <param name="instance">処理されるオブジェクト グラフのルート。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> が空の文字列です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary>提供されたオブジェクト グラフを XAML ノード表現に処理した後、提供された XAML ライターに書き込みます。</summary>
      <param name="writer">使用する <see cref="T:System.Xaml.XamlWriter" /> 実装。</param>
      <param name="instance">処理されるオブジェクト グラフのルート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary>提供されたオブジェクト グラフを XAML ノード表現に処理した後、提供された <see cref="T:System.Xml.XmlWriter" /> に書き込みます。</summary>
      <param name="writer">使用する <see cref="T:System.Xml.XmlWriter" /> 実装。</param>
      <param name="instance">処理されるオブジェクト グラフのルート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> の入力が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary>共通の XAML ノード セットの中継点を使用する <see cref="T:System.Xaml.XamlReader" /> と <see cref="T:System.Xaml.XamlWriter" /> を接続します。 提供されるリーダーとライターの種類に応じて、コンテンツが変換される可能性があります。</summary>
      <param name="xamlReader">使用する <see cref="T:System.Xaml.XamlReader" /> 実装。</param>
      <param name="xamlWriter">使用する <see cref="T:System.Xaml.XamlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> または <paramref name="xamlWriter" /> の入力が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xaml.XamlException">XAML スキーマ コンテキストが提供された <paramref name="xamlReader" /> と <paramref name="xamlWriter" /> の間で一致していません。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary>共通の XAML ノード セットの中継点を使用する <see cref="T:System.Xaml.XamlReader" /> と <see cref="T:System.Xaml.XamlWriter" /> を接続します。 提供されるリーダーとライターの種類に応じて、コンテンツが変換される可能性があります。 呼び出しの完了後にライターを閉じるかどうかを指定するパラメーターが用意されています。</summary>
      <param name="xamlReader">使用する <see cref="T:System.Xaml.XamlReader" /> 実装。</param>
      <param name="xamlWriter">使用する <see cref="T:System.Xaml.XamlWriter" />。</param>
      <param name="closeWriter">呼び出しの完了後にライターを閉じる場合は <see langword="true" />。最後の書き込み位置でライターをアクティブなままにする場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> または <paramref name="xamlWriter" /> の入力が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xaml.XamlException">XAML スキーマ コンテキストが提供された <paramref name="xamlReader" /> と <paramref name="xamlWriter" /> の間で一致していません。</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary>.NET Framework XAML サービスに実装されている XAML システム全体の一部として、XAML 型に関する情報を報告します。</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>型の文字列名に基づいて、<see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">作成する型の名前。</param>
      <param name="typeArguments">ジェネリック型を表す <see cref="T:System.Xaml.XamlType" /> の型引数。 (多くの場合は) <see langword="null" /> にできます。この値は、表される型がジェネリック型でないことを示します。</param>
      <param name="schemaContext">XAML リーダーおよび XAML ライターの XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="typeName" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>XAML 名前空間と型の文字列名に基づいて、<see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは、サポートする型システムと XAML スキーマ コンテキストにバッキングを持たないことがわかっている型の使用法の分析および XAML ノード記録にのみ使用されます。</summary>
      <param name="unknownTypeNamespace">文字列としての、型の XAML 名前空間。</param>
      <param name="unknownTypeName">指定された <paramref name="unknownTypeNamespace" /> XAML 名前空間内の型の名前。</param>
      <param name="typeArguments">ジェネリック型を表す <see cref="T:System.Xaml.XamlType" /> の型引数。 (多くの場合は) <see langword="null" /> にできます。この値は、表される型がジェネリック型でないことを示します。</param>
      <param name="schemaContext">XAML リーダーまたは XAML ライターの XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="unknownTypeNamespace" />、<paramref name="unknownTypeName" />、または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary>基になる CLR 型情報に基づいて、<see cref="T:System.Xaml.XamlType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="underlyingType">作成する XAML 型の基になる CLR <see cref="T:System.Type" />。</param>
      <param name="schemaContext">XAML リーダーまたは XAML ライターの XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="underlyingType" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary>基になる型情報、および <see cref="T:System.Xaml.XamlType" /> の実装に基づいて、<see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="underlyingType">作成する XAML 型の基になる型。</param>
      <param name="schemaContext">XAML リーダーの XAML スキーマ コンテキスト。</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に対してランタイムのリフレクション呼び出しを処理する <see cref="T:System.Xaml.XamlType" /> 実装。</param>
      <exception cref="T:System.ArgumentNullException">1 つ以上の <paramref name="underlyingType" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary>この <see cref="P:System.Xaml.XamlType.ContentProperty" /> の <see cref="T:System.Xaml.XamlType" /> の値として使用できる、型の読み取り専用のコレクションを取得します。</summary>
      <returns>使用可能なコンテンツ型の読み取り専用のコレクション。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary>この XAML 型の直接の基本型の <see cref="T:System.Xaml.XamlType" /> を取得します。 この値は、この <see cref="T:System.Xaml.XamlType" /> の基になる型とスキーマ コンテキストに基づいて決定されます。</summary>
      <returns>この XAML 型の直接の基本型の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary>この <see cref="T:System.Xaml.XamlType" /> のインスタンスの割り当て可能な型のリスト内に、指定された <see cref="T:System.Xaml.XamlType" /> が含まれているかどうかを示す値を返します。</summary>
      <param name="xamlType">現在の <see cref="T:System.Xaml.XamlType" /> に対して確認する型。</param>
      <returns>割り当て可能な型のリストに <paramref name="xamlType" /> が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary>型の有効なインスタンスを作成するために、この <see cref="T:System.Xaml.XamlType" /> が引数 (<see langword="x:TypeArguments" /> を通じたジェネリック制約、初期化テキスト、または他の XAML 手法) を持つ必要があるかどうかを示す値を取得します。</summary>
      <returns>インスタンスの作成に引数値が必要な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> のコンテンツ プロパティの <see cref="T:System.Xaml.XamlType" /> 情報を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> のコンテンツ プロパティの <see cref="T:System.Xaml.XamlType" /> 情報。 コンテンツ プロパティがない場合は <see langword="null" /> になります。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary>厳密に型指定された <see langword="Collection&lt;T&gt;" /> の文字列などのように、型の一致が厳密でない場合に、コンテンツ プロパティのコンテンツをラップする型を取得します。</summary>
      <returns>使用可能なコンテンツ ラッパー型の読み取り専用のコレクション、または <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary>この型の遅延読み込みの変換動作を表す <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> を取得します。</summary>
      <returns>この型の遅延読み込みの動作を表す <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.Xaml.XamlDeferringLoader" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary>現在のオブジェクトが、別のオブジェクトと等しいかどうかを示します。</summary>
      <param name="obj">このオブジェクトと比較するオブジェクト。</param>
      <returns>現在のオブジェクトが <paramref name="obj" /> パラメーターと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary>現在のオブジェクトが、同じ型の別のオブジェクトと等しいかどうかを示します。</summary>
      <param name="other">このオブジェクトと比較するオブジェクト。</param>
      <returns>現在のオブジェクトが <paramref name="other" /> パラメーターと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary>この <see cref="T:System.Xaml.XamlType" /> によってエイリアスが XAML ディレクティブに設定された XAML メンバーを返します。</summary>
      <param name="directive">エイリアスが設定されたメンバーの検索対象となるディレクティブ。</param>
      <returns>見つかった場合はエイリアスが設定されたメンバー。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary>この <see cref="T:System.Xaml.XamlType" /> で公開されているすべてのアタッチ可能なプロパティが含まれたコレクションを返します。</summary>
      <returns>0 個以上の <see cref="T:System.Xaml.XamlMember" /> 値が含まれたコレクション。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary>この <see cref="T:System.Xaml.XamlType" /> で公開されているすべてのメンバーが含まれたコレクションを返します。</summary>
      <returns>0 個以上の <see cref="T:System.Xaml.XamlMember" /> 値が含まれたコレクション。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary>この <see cref="T:System.Xaml.XamlType" /> の特定の名前の付いたアタッチ可能メンバーを表す <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
      <param name="name">
        <c>ownerTypeName.MemberName</c> フォームで取得するアタッチ可能メンバーの名前。</param>
      <returns>要求されたアタッチ可能メンバーの <see cref="T:System.Xaml.XamlMember" /> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary>このオブジェクトのハッシュ コードを返します。</summary>
      <returns>整数のハッシュ コード。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> から、特定の名前が付けられたメンバーの <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <param name="name">取得するメンバーの名前 (文字列)。</param>
      <returns>該当するメンバーが見つかった場合はメンバーの <see cref="T:System.Xaml.XamlMember" /> 情報。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary>マークアップ拡張型の場合は、この <see cref="T:System.Xaml.XamlType" /> の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型を返します。</summary>
      <param name="parameterCount">情報を取得する必要のある、特定の構文またはコンストラクター モードの個数 (アリティ)。</param>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 値のリスト。各 <see cref="T:System.Xaml.XamlType" /> は、構文内でその位置の型に相当します。 マークアップ拡張機能のマークアップ入力を指定する場合は、型を同一の順序で指定する必要があります。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary>型が含まれている XAML 名前空間の文字列識別子のリストを返します。</summary>
      <returns>文字列値のリスト。各文字列は XAML 名前空間の URI 識別子です。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に関連付けられている <see cref="T:System.Xaml.XamlType" /> の実装を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に関連付けられている <see cref="T:System.Xaml.XamlType" /> 実装。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によってアンビエント型を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がアンビエント型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が配列を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が配列を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary>この <see cref="T:System.Xaml.XamlType" /> がコレクションを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がコレクションを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって構築可能な型を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が構築可能な型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によってディクショナリを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がディクショナリを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary>この <see cref="T:System.Xaml.XamlType" /> がジェネリック型を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がジェネリック型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary>この <see cref="T:System.Xaml.XamlType" /> がマークアップ拡張機能を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がマークアップ拡張機能を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって XAML 名前スコープを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が XAML 名前スコープを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が <see cref="P:System.Xaml.XamlType.Name" /> に有効な <see langword="xamlName" /> 文字列を使用して初期化されているかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が有効な <see langword="true" /> 文字列を使用して初期化されている場合は <see langword="xamlName" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって null 許容型を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が null 許容型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が関連する型システムでパブリック型を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がパブリック型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が基になる型システムで解決できない型を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が解決できない型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary>XAML の初期化中にこの <see cref="T:System.Xaml.XamlType" /> がトップダウンで構築されるかどうかを示す値を取得します。</summary>
      <returns>XAML の初期化中にこの <see cref="T:System.Xaml.XamlType" /> がトップダウンで構築される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XML 定義によって有意な空白のコレクションを表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が有意な空白のコレクションを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって XML <see langword="XDATA" /> を表すかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が <see langword="true" /> を表す場合は <see langword="XDATA" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary>この <see cref="T:System.Xaml.XamlType" /> の <see langword="Items" /> プロパティの型情報を提供する値を取得します。</summary>
      <returns>コレクション内のアイテムの型の <see cref="T:System.Xaml.XamlType" /> オブジェクト。この <see cref="T:System.Xaml.XamlType" /> がコレクションを表していない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary>この <see cref="T:System.Xaml.XamlType" /> がディクショナリを表す場合、この <see cref="T:System.Xaml.XamlType" /> のキー プロパティの型情報を提供する値を取得します。</summary>
      <returns>ディクショナリを使用する場合はキーの型の <see cref="T:System.Xaml.XamlType" /> オブジェクト。この <see cref="T:System.Xaml.XamlType" /> がディクショナリを表していない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary>この <see cref="T:System.Xaml.XamlType" /> によってエイリアスが XAML ディレクティブに設定された XAML メンバーを返します。</summary>
      <param name="directive">エイリアスが設定されたメンバーの検索対象となるディレクティブ。</param>
      <returns>見つかった場合はエイリアスが設定されたメンバー。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary>この <see cref="T:System.Xaml.XamlType" /> で公開されているすべてのアタッチ可能なプロパティが含まれた列挙可能なセットを返します。</summary>
      <returns>0 個以上の <see cref="T:System.Xaml.XamlMember" /> 値が含まれている列挙可能なセット。または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary>この <see cref="T:System.Xaml.XamlType" /> で公開されているすべてのメンバーが含まれた列挙可能なセットを返します。</summary>
      <returns>0 個以上の <see cref="T:System.Xaml.XamlMember" /> 値が含まれている列挙可能なセット。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary>この <see cref="P:System.Xaml.XamlType.ContentProperty" /> の <see cref="T:System.Xaml.XamlType" /> 値として使用できる、型のリストを返します。</summary>
      <returns>使用可能なコンテンツ型のリスト。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary>この <see cref="T:System.Xaml.XamlType" /> から、特定の名前の付いたアタッチ可能なものを表す <see cref="T:System.Xaml.XamlMember" /> を返します。</summary>
      <param name="name">
        <c>ownerTypeName.MemberName</c> フォームで取得するアタッチ可能メンバーの名前。</param>
      <returns>要求されたアタッチ可能メンバーの <see cref="T:System.Xaml.XamlMember" /> オブジェクト。その名前のアタッチ可能メンバーが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary>この XAML 型の直接の基本型の <see cref="T:System.Xaml.XamlType" /> を返します。 この値は、この <see cref="T:System.Xaml.XamlType" /> の基になる型とスキーマ コンテキストに基づいて決定されます。</summary>
      <returns>この XAML 型の直接の基本型の <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary>この <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> で使用される特定のコレクション型を宣言する <see cref="T:System.Xaml.XamlType" /> 列挙体の値を返します。</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 列挙体の値。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary>型の有効なインスタンスを作成するために、この <see cref="T:System.Xaml.XamlType" /> が引数 (<see langword="x:TypeArguments" /> を通じたジェネリック制約、初期化テキスト、または他の XAML 手法) を持つ必要があるかどうかを示す値を返します。</summary>
      <returns>インスタンスの作成に引数値が必要な場合は <see langword="true" />。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> のコンテンツ プロパティの <see cref="T:System.Xaml.XamlType" /> 情報を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlMember" /> のコンテンツ プロパティの <see cref="T:System.Xaml.XamlType" /> 情報。 <see langword="null" /> でもかまいません。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary>この <see cref="T:System.Xaml.XamlType" /> のコンテンツ ラッパーを表す <see cref="T:System.Xaml.XamlType" /> 値のリストを取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> のコンテンツ ラッパーを表す <see cref="T:System.Xaml.XamlType" /> 値のリスト。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary>派生クラスで実装される場合、<see cref="T:System.Reflection.ICustomAttributeProvider" /> 実装を返します。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> の実装。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> オブジェクトを返します。これは XAML で宣言されたオブジェクトの遅延読み込みに使用されます。</summary>
      <returns>ジェネリックの <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 制約のある <see cref="T:System.Xaml.XamlDeferringLoader" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary>この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> に関連付けられた <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> の <see cref="T:System.Xaml.XamlType" /> 情報、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によってアンビエント型を表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がアンビエント型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって構築可能な型を表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が構築可能な型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary>この <see cref="T:System.Xaml.XamlType" /> がマークアップ拡張機能を表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がマークアップ拡張機能を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって XAML 名前スコープを表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が XAML 名前スコープを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって null 許容型を表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が null 許容型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が関連する型システムでパブリック型を表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> がパブリック型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が基になる型システムで解決できない型を表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が解決できない型を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XML 定義によって有意な空白のコレクションを表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が有意な空白のコレクションを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が XAML 定義によって XML <see langword="XDATA" /> を表すかどうかを示す値を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が <see langword="true" /> を表す場合は <see langword="XDATA" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary>この <see cref="T:System.Xaml.XamlType" /> の <see langword="Items" /> プロパティの型情報を提供する値を返します。</summary>
      <returns>コレクション内のアイテムの型の <see cref="T:System.Xaml.XamlType" /> オブジェクト。この <see cref="T:System.Xaml.XamlType" /> がコレクションを表していない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary>この <see cref="T:System.Xaml.XamlType" /> がディクショナリを表す場合、この <see cref="T:System.Xaml.XamlType" /> のキー プロパティの型情報を提供する値を返します。</summary>
      <returns>ディクショナリを使用する場合はキーの型の <see cref="T:System.Xaml.XamlType" /> オブジェクト。この <see cref="T:System.Xaml.XamlType" /> がディクショナリを表していない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary>マークアップ拡張機能を表す場合、この <see cref="T:System.Xaml.XamlType" /> の返された <see langword="ProvideValue" /> の型情報を提供する値を返します。</summary>
      <returns>マークアップ拡張機能を使用する場合は戻り値の型の <see cref="T:System.Xaml.XamlType" /> オブジェクト。この <see cref="T:System.Xaml.XamlType" /> がマークアップ拡張機能を表していない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary>この <see cref="T:System.Xaml.XamlMember" /> から、特定の名前が付けられたメンバーの <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <param name="name">取得するメンバーの名前 (文字列)。</param>
      <param name="skipReadOnlyCheck">メンバーの <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> の値が <see langword="true" /> であってもメンバーを返す場合は <see langword="true" />。<see cref="P:System.Xaml.XamlMember.IsReadOnly" /> のメンバーを返さない場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</param>
      <returns>該当するメンバーが見つかった場合はメンバーの <see cref="T:System.Xaml.XamlMember" /> 情報。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary>マークアップ拡張型の場合は、この <see cref="T:System.Xaml.XamlType" /> の特定のマークアップ拡張機能の使用でサポートされている位置指定パラメーターの型を返します。</summary>
      <param name="parameterCount">情報を取得する必要のある、特定の構文またはコンストラクター モードの個数 (アリティ)。</param>
      <returns>
        <see cref="T:System.Xaml.XamlType" /> 値のリスト。各 <see cref="T:System.Xaml.XamlType" /> は構文内でその位置の型に相当します。 マークアップ拡張機能のマークアップ入力を指定する場合は、これらの型を同一の順序で指定する必要があります。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary>マークアップ拡張機能のセット操作で使用するハンドラー コールバックを返します。</summary>
      <returns>マークアップ拡張機能のセット操作で使用するハンドラー コールバック。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary>型コンバーターを設定する場合に使用するハンドラーを返します。</summary>
      <returns>型コンバーターを設定する場合に使用するハンドラー。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary>周囲の空白をトリムするモードを使用して、この <see cref="T:System.Xaml.XamlType" /> をシリアル化する必要があるかどうかを示す値を返します。</summary>
      <returns>周囲の空白をトリムするモードでこの <see cref="T:System.Xaml.XamlType" /> をシリアル化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する型変換動作を表す <see cref="T:System.ComponentModel.TypeConverter" /> 制約がある <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する型変換動作を表す <see cref="T:System.ComponentModel.TypeConverter" /> 制約を持つ <see cref="T:System.Xaml.XamlType" />、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary>この <see cref="T:System.Type" /> の基になる CLR <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <returns>この <see cref="T:System.Type" /> の基になる CLR <see cref="T:System.Xaml.XamlType" />、または <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary>XAML の初期化中にこの <see cref="T:System.Xaml.XamlType" /> がトップダウンで構築されるかどうかを示す値を返します。</summary>
      <returns>XAML の初期化中にこの <see cref="T:System.Xaml.XamlType" /> がトップダウンで構築される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する値のシリアル化動作を表す <see cref="T:System.Windows.Markup.ValueSerializer" /> 制約がある <see cref="T:System.Xaml.XamlType" /> を返します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する値のシリアル化動作を表す <see cref="T:System.Windows.Markup.ValueSerializer" /> 制約を持つ <see cref="T:System.Xaml.XamlType" />、または <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary>マークアップ拡張機能を表す場合、この <see cref="T:System.Xaml.XamlType" /> の返された <see langword="ProvideValue" /> の型情報を提供する値を取得します。</summary>
      <returns>マークアップ拡張機能を使用する場合は戻り値の型の <see cref="T:System.Xaml.XamlType" /> オブジェクト。この <see cref="T:System.Xaml.XamlType" /> がマークアップ拡張機能を表していない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary>この <see cref="T:System.Xaml.XamlType" /> が表す型の文字列名を取得します。</summary>
      <returns>この XAML 型の文字列名。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>指定した 2 つの <see cref="T:System.Xaml.XamlType" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="xamlType1" /> の値が <paramref name="xamlType2" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>指定した 2 つの <see cref="T:System.Xaml.XamlType" /> オブジェクトの値が異なるかどうかを判断します。</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> または <see langword="null" />。</param>
      <returns>
        <paramref name="xamlType1" /> の値が <paramref name="xamlType2" /> の値と異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary>この <see cref="T:System.Xaml.XamlType" /> のプライマリ XAML 名前空間である単一の名前空間を取得します。</summary>
      <returns>文字列で表される、この XAML 型のプライマリ XAML 名前空間の識別子。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary>この <see cref="T:System.Xaml.XamlSchemaContext" /> を処理するアクティブな <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlSchemaContext" /> を処理するアクティブな <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary>この <see cref="T:System.Xaml.XamlType" /> の文字列表現を返します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> の文字列表現。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary>コンテンツを囲んでいる空白をトリムするシリアル化の空白処理動作がこの <see cref="T:System.Xaml.XamlType" /> に含まれているかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlType" /> が空白をトリムする型を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary>この <see cref="T:System.Xaml.XamlType" /> がジェネリックを表す場合に型引数のリストを取得します。</summary>
      <returns>型引数の型のリスト。または、この <see cref="T:System.Xaml.XamlType" /> がジェネリックを表していない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する型変換動作を表す <see cref="T:System.ComponentModel.TypeConverter" /> 制約を持つ <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する型変換動作を表す <see cref="T:System.ComponentModel.TypeConverter" /> 制約を持つ <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary>この <see cref="T:System.Type" /> の基になる CLR <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>この <see cref="T:System.Type" /> の基になる CLR <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する値のシリアル化動作を表す <see cref="T:System.Windows.Markup.ValueSerializer" /> 制約を持つ <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> の値に対する値のシリアル化動作を表す <see cref="T:System.Windows.Markup.ValueSerializer" /> 制約を持つ <see cref="T:System.Xaml.XamlType" />、または <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary>XAML ライターの既定の実装と基本クラス定義を提供します。 これは動作する既定の XAML ライターではありません。<see cref="T:System.Xaml.XamlWriter" /> の派生クラスを作成してその抽象メンバーを実装するか、または <see cref="T:System.Xaml.XamlWriter" /> の既存の派生クラスを使用する必要があります。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary>XAML ライター オブジェクトを閉じます。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary>
        <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> が呼び出されているかどうかを取得します。</summary>
      <returns>
        <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> が呼び出されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary>派生クラスで実装されている場合に、アクティブな XAML スキーマ コンテキストを取得します。</summary>
      <returns>アクティブな XAML スキーマ コンテキスト。</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary>以下を参照してください。<see cref="M:System.IDisposable.Dispose" /></summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary>派生クラスで実装された場合、終了メンバー ノードの表現を生成します。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary>派生クラスで実装された場合、終了オブジェクト ノードの表現を生成します。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary>派生クラスで実装された場合、オブジェクトが入力 XAML ノード セットで個々のオブジェクト値として指定されているのではなく設定中のプロパティの既定または暗黙の値であるときに、オブジェクトを生成します。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>派生クラスで実装された場合、XAML 名前空間宣言ノードを書き込みます。</summary>
      <param name="namespaceDeclaration">書き込む名前空間宣言。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary>XAML リーダーのノード型 (<see cref="P:System.Xaml.XamlReader.NodeType" />) に基づいて切り替えを実行し、ライター実装の関連する <see langword="Write" /> メソッドを呼び出します。</summary>
      <param name="reader">ノードの決定に使用するリーダー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotImplementedException">既定の実装で、既定の列挙体に含まれていない <see cref="T:System.Xaml.XamlNodeType" /> が出現しました。</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>派生クラスで実装された場合、開始メンバー ノードの表現を書き込みます。</summary>
      <param name="xamlMember">書き込むメンバー ノード。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>派生クラスで実装された場合、開始オブジェクト ノードの表現を書き込みます。</summary>
      <param name="type">書き込むオブジェクトの XAML 型。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary>派生クラスで実装された場合、値ノードを書き込みます。</summary>
      <param name="value">書き込む値。</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary>
        <see cref="T:System.Xaml.XamlWriter" /> 実装の初期化設定を提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary>別の既存の設定インスタンスを使用して、<see cref="T:System.Xaml.XamlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="settings">既存の <see cref="T:System.Xaml.XamlWriterSettings" /> オブジェクト。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> を媒介として使用して XML ファイルから XAML マークアップを処理し、XAML ノード ストリームを生成します。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary>ストリームに基づいて、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">リーダーに読み込む初期ストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>ストリームに基づき、指定した XAML スキーマ コンテキストを使用して、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">リーダーに読み込む初期ストリーム。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>ストリームに基づき、指定した XAML スキーマ コンテキストと XAML 固有の設定を使用して、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">リーダーに読み込む初期ストリーム。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <param name="settings">特定のリーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary>ストリームに基づき、XAML 固有の設定を使用して、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">リーダーに読み込む初期ストリーム。</param>
      <param name="settings">特定のリーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> に基づいて、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textReader">初期化に使用する <see cref="T:System.IO.TextReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> に基づき、指定したスキーマ コンテキストと XAML 固有の設定を使用して、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textReader">初期化に使用する <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> は <see langword="null" />です。  

または - 
<paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> に基づき、指定したスキーマ コンテキストと XAML 固有の設定を使用して、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textReader">初期化に使用する <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <param name="settings">特定のリーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> は <see langword="null" />です。  

または - 
<paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> に基づき、XAML 固有の設定を使用して、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textReader">初期化に使用する <see cref="T:System.IO.TextReader" />。</param>
      <param name="settings">特定のリーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary>既定の XML リーダーに読み込むファイルの名前に基づいて、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">読み込む XML ファイルの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary>既定の XML リーダーに読み込むファイルの名前に基づき、指定した XAML スキーマ コンテキストを使用して、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">読み込むファイルの名前。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>既定の XML リーダーに読み込むファイルの名前に基づき、指定した XAML スキーマ コンテキストと XAML 固有のリーダー設定を使用して、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">読み込む XML ファイルの名前。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <param name="settings">特定のリーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> は <see langword="null" />です。  

または - 
<paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary>既定の XML リーダーに読み込むファイルの名前に基づき、XAML 固有のリーダー設定を使用して、<see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">読み込む XML ファイルの名前。</param>
      <param name="settings">特定のリーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Xml.XmlReader" /> を使用して <see cref="T:System.Xaml.XamlXmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlReader">媒介の XML プロセッサとして使用する <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary>指定した <see cref="T:System.Xaml.XamlXmlReader" /> およびスキーマ コンテキストを使用して、<see cref="T:System.Xml.XmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlReader">媒介の XML プロセッサとして使用する <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>指定した <see cref="T:System.Xaml.XamlXmlReader" />、スキーマ コンテキスト、およびリーダー設定を使用して、<see cref="T:System.Xml.XmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlReader">媒介の XML プロセッサとして使用する <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext">XAML 処理の XAML スキーマ コンテキスト。</param>
      <param name="settings">特定の XAML リーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>指定した <see cref="T:System.Xaml.XamlXmlReader" /> およびリーダー設定を使用して、<see cref="T:System.Xml.XmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlReader">媒介の XML プロセッサとして使用する <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings">特定の XAML リーダー設定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary>行情報が使用可能であるかどうかを指定する値を取得します。</summary>
      <returns>行情報が使用可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary>XAML ノード ストリーム内でリーダーの位置が末尾かどうかを示す値を取得します。</summary>
      <returns>位置がノード ストリームのファイルの概念上の末尾である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary>報告する行番号を取得します。</summary>
      <returns>報告する行番号。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary>報告する行の位置を取得します。</summary>
      <returns>報告する行の位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary>現在のリーダーが <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上に配置されている場合に、リーダーが現在配置されているメンバーを取得します。</summary>
      <returns>現在のメンバー。現在のリーダーがメンバー上に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary>現在のノードから XAML 名前空間を取得します。</summary>
      <returns>現在のノードの XAML 名前空間 (使用可能な場合)。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 列挙体の値。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary>読み込まれたソースから次の XAML ノードを読み取ります (XAML ノードがある場合)。</summary>
      <returns>ノードがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary>情報セットにスキーマ情報を提供するオブジェクトを取得します。</summary>
      <returns>情報セットにスキーマ情報を提供するオブジェクト。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary>現在のノードの <see cref="T:System.Xaml.XamlType" /> を取得します。</summary>
      <returns>現在のノードの <see cref="T:System.Xaml.XamlType" />。リーダーがオブジェクト上に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary>現在のノードの値を取得します。</summary>
      <returns>現在のノードの値。リーダーが <see cref="F:System.Xaml.XamlNodeType.Value" /> ノード型に配置されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> XAML リーダー実装の処理規則またはオプション設定を指定します。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary>既存の <see cref="T:System.Xaml.XamlXmlReaderSettings" /> オブジェクトから設定をコピーして、<see cref="T:System.Xaml.XamlXmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="settings">コピーする既存の <see cref="T:System.Xaml.XamlXmlReaderSettings" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> を閉じるときに基になるストリームまたはテキスト リーダーを閉じる必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xaml.XamlXmlReader" /> を閉じるときに基になるストリームまたはリーダーを閉じる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> でマークアップ互換性のコンテンツを処理する既定の動作がリーダーと異なるかどうかを判断する値を取得または設定します。</summary>
      <returns>開始リーダーを直接使用する場合は <see langword="true" />。これは、XML 互換性マークアップをメイン ストリームの一部として処理し、互換性を考慮しないことを意味します。 既定の動作を使用する場合は <see langword="false" />。XML 互換性を個別に処理します。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary>リーダーがノードの <see langword="xml:lang" /> 属性を書き込むライターに上位変換する可能性のある言語設定の値を取得または設定します。</summary>
      <returns>リーダーに基づいて使用可能な <see langword="xml:lang" /> 出力に使用される文字列。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary>XAML リーダーが XAML ライターにノードの <see langword="xml:space" /> 属性を書き込むように指示するかどうかを判断する値を取得または設定します。 この動作が必要な場合、この情報は共有 XAML スキーマ コンテキストを介して渡されます。</summary>
      <returns>
        <see langword="true" />XAML ノードストリームを処理しているライターが<c>xml: space = "preserve"</c>を出力に書き込むことができる場合。<see langword="false" /> 属性をノードに書き込むこと<see langword="xml:space" />ができません。</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary>
        <see cref="T:System.IO.TextWriter" /> または <see cref="T:System.Xml.XmlWriter" /> サポート クラスを使用して、XAML ノード ストリームをテキストまたはマークアップのシリアル化形式に書き込みます。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>ストリームから <see cref="T:System.Xaml.XamlXmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">書き込むストリーム。</param>
      <param name="schemaContext">XAML ライターの XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> は <see langword="null" />です。  

または - 
<paramref name="schemaContext" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>ライター設定オブジェクトを使用して、ストリームから <see cref="T:System.Xaml.XamlXmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="stream">書き込むストリーム。</param>
      <param name="schemaContext">XAML ライターの XAML スキーマ コンテキスト。</param>
      <param name="settings">通常は既定以外の固有の設定を持つ、<see cref="T:System.Xaml.XamlXmlWriterSettings" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> を基礎として <see cref="T:System.IO.TextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textWriter">出力を書き込む <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext">XAML ライターの XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>設定オブジェクトを使用して、<see cref="T:System.Xaml.XamlXmlWriter" /> を基礎として <see cref="T:System.IO.TextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textWriter">出力を書き込む <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext">XAML ライターの XAML スキーマ コンテキスト。</param>
      <param name="settings">通常は既定以外の固有の設定を持つ、<see cref="T:System.Xaml.XamlXmlWriterSettings" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> を基礎として <see cref="T:System.Xml.XmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlWriter">出力を書き込む <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext">XAML ライターの XAML スキーマ コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>設定オブジェクトを使用して、<see cref="T:System.Xaml.XamlXmlWriter" /> を基礎として <see cref="T:System.Xml.XmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlWriter">出力を書き込む <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext">XAML ライターの XAML スキーマ コンテキスト。</param>
      <param name="settings">通常は既定以外の固有の設定を持つ、<see cref="T:System.Xaml.XamlXmlWriterSettings" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> または <paramref name="schemaContext" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">アンマネージ リソースを解放するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary>基になる <see cref="T:System.Xml.XmlWriter" /> または <see cref="T:System.IO.TextWriter" /> の <see langword="Flush" /> メソッドを呼び出します。これにより、現在のバッファーの内容がすべて書き込まれ、ライターが閉じられます。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary>この <see cref="T:System.Xaml.XamlXmlWriter" /> が処理に使用する XAML スキーマ コンテキストを取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlXmlWriter" /> が XAML 処理に使用する XAML スキーマ コンテキスト。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary>この <see cref="T:System.Xaml.XamlXmlWriter" /> が XAML 処理に使用するライター設定を取得します。</summary>
      <returns>この <see cref="T:System.Xaml.XamlXmlWriter" /> が XAML 処理に使用するライター設定を取得します。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary>基になる <see cref="T:System.Xml.XmlWriter" /> または <see cref="T:System.IO.TextWriter" /> に XAML 終了メンバー ノードを書き込みます。 XAML ノード ストリームの現在位置がメンバー内にない場合、または終了メンバーの書き込みが内部ライター状態でサポートされていない場合は、例外をスローします。</summary>
      <exception cref="T:System.InvalidOperationException">XAML ノード ストリームの現在位置が、メンバー内にありません。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">現在のライター状態は、終了メンバーの書き込みをサポートしていません。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary>基になる <see cref="T:System.Xml.XmlWriter" /> または <see cref="T:System.IO.TextWriter" /> に XAML 終了オブジェクト ノードを書き込みます。 処理される XAML ノード ストリームの現在位置に終了オブジェクトの書き込みとの互換性がない場合は、例外をスローします。</summary>
      <exception cref="T:System.InvalidOperationException">XAML ノード ストリームの現在位置が、終了メンバーを書き込むことができるスコープ内にありません。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">現在のライター状態は、終了オブジェクトの書き込みをサポートしていません。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary>指定したオブジェクトが入力 XAML ノード セットでオブジェクト値として指定されているのではなく、書き込まれるプロパティの既定または暗黙の値である場合に、オブジェクトを書き込みます。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>基になる <see cref="T:System.Xml.XmlWriter" /> または <see cref="T:System.IO.TextWriter" /> に名前空間の情報を書き込みます。 特定の状態で例外がスローされる可能性がありますが、例外をスローする代わりに、XAML 名前空間の宣言を挿入できる位置にライターおよび処理される XAML ノード ストリームが到達するまで名前空間情報の書き込みを遅延させる場合があります。</summary>
      <param name="namespaceDeclaration">書き込む XAML 名前空間宣言。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> は、有効な XAML 名前空間の宣言ではありません (null プレフィックスまたは null 識別子コンポーネントがあります)。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">現在のライター状態は、XAML 名前空間の宣言の書き込みをサポートしていません。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>基になる <see cref="T:System.Xml.XmlWriter" /> または <see cref="T:System.IO.TextWriter" /> に XAML 開始メンバー ノードを書き込みます。 XAML ノード ストリームの現在位置が別のメンバー内にある場合、または開始メンバーを書き込むことのできるスコープまたはライター状態にない場合は、例外をスローします。</summary>
      <param name="property">書き込むメンバーの XAML メンバー識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> は有効な <see cref="T:System.Xaml.XamlMember" /> ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">XAML ノード ストリームの現在位置が、開始メンバーの書き込みに対して無効です。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">ライター状態は、開始メンバーの書き込みについて有効ではありません。  
 または  
 XAML ライターが重複するメンバーを記述しようとしました。 この例外には、より正確な内部例外がある可能性があります。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>基になる <see cref="T:System.Xml.XmlWriter" /> または <see cref="T:System.IO.TextWriter" /> に XAML 開始オブジェクト ノードを書き込みます。 XAML ノード ストリームの現在位置が開始オブジェクトを書き込むことのできるスコープにない場合、またはライターが開始オブジェクトを書き込むことのできる状態にない場合は、例外をスローします。</summary>
      <param name="type">書き込むオブジェクトの <see cref="T:System.Xaml.XamlType" /> (XAML 型識別子)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が有効な <see cref="T:System.Xaml.XamlType" /> ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">XAML ノード ストリームの現在位置が、新規開始オブジェクトの書き込みに対して有効ではありません。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML ライターの状態が、新規開始オブジェクトの書き込みに対して有効ではありません。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary>基になる <see cref="T:System.Xml.XmlWriter" /> または <see cref="T:System.IO.TextWriter" /> に XAML 値ノードを書き込みます。 XAML ノード ストリームの現在位置が値の書き込みに対して無効である場合、またはライターが値を書き込めない状態にある場合は、例外をスローします。</summary>
      <param name="value">書き込む値情報。</param>
      <exception cref="T:System.InvalidOperationException">XAML ノード ストリームの現在位置が、値の書き込みに対して有効ではありません。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML ライター状態は、値ノードの書き込みをサポートしていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> に、null でも文字列でもない値が指定されています。</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary>特定の <see cref="T:System.Xaml.XamlXmlWriter" /> API によってスローされる例外。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Xaml.XamlXmlWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Xaml.XamlXmlWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Xaml.XamlXmlWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Xaml.XamlXmlWriterException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> XAML ライター実装の初期化設定を提供します。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary>重複の解決または他のエラー チェックの目的で、<see cref="T:System.Xaml.XamlXmlWriter" /> が常に有効な XAML 入力を予期する必要があるかどうかを指定する値を取得または設定します。</summary>
      <returns>メンバーが重複する場合に例外をスローするなどの特定の検証またはエラー チェックを <see cref="T:System.Xaml.XamlXmlWriter" /> がスキップする場合は <see langword="true" />。 無効な XAML が出現すると <see cref="T:System.Xaml.XamlXmlWriter" /> が例外をスローする場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> が <see langword="Dispose" /> または他の操作の直後に閉じる必要があるかどうか、または閉じる前に XAML ライターがバッファー出力を書き込む必要があるかどうかを指定する値を取得または設定します。 この設定は注意して使用してください。すぐに閉じると、再び読み込むことができない無効な XAML になる可能性があります</summary>
      <returns>
        <see langword="true" /> または類似の操作で <see cref="T:System.Xaml.XamlXmlWriter" /> がすぐに閉じる場合は <see langword="Dispose" />。 <see cref="T:System.Xaml.XamlXmlWriter" /> を解放する前に残りのバッファー出力を書き出す場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary>この <see cref="T:System.Xaml.XamlXmlWriterSettings" /> インスタンスのコピーを返します。</summary>
      <returns>返されたコピー。</returns>
    </member>
  </members>
</doc>
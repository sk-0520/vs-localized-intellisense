<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>C# コード ジェネレーターと C# コード コンパイラのインスタンスへのアクセスを提供します。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>
        <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>指定したプロバイダー オプションを使用して、<see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerOptions">構成ファイルのプロバイダー オプションが格納された <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>C# コード コンパイラのインスタンスを取得します。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 実装のインスタンス。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>C# コード ジェネレーターのインスタンスを取得します。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 実装のインスタンス。</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>ソース コード ファイルを作成するときに使用するファイル名拡張子を取得します。</summary>
      <returns>生成されるソース コード ファイルで使用するファイル名の拡張子。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定したテキスト ライターおよびコード ジェネレーターのオプションを使用して、指定したクラス メンバーのコードを生成します。</summary>
      <param name="member">コード生成の対象となる <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードの生成時に使用する <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>指定したオブジェクト型の <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</summary>
      <param name="type">型コンバーターを取得する対象のオブジェクトの型。</param>
      <returns>指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Visual Basic コード ジェネレーターと Visual Basic コード コンパイラのインスタンスへのアクセスを提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>指定したプロバイダー オプションを使用して、<see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerOptions">構成ファイルのプロバイダー オプションが格納された <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Visual Basic コード コンパイラのインスタンスを取得します。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 実装のインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Visual Basic コード ジェネレーターのインスタンスを取得します。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 実装のインスタンス。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>ソース コード ファイルを作成するときに使用するファイル名拡張子を取得します。</summary>
      <returns>生成されるソース コード ファイルで使用するファイル名の拡張子。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定したテキスト ライターおよびコード ジェネレーターのオプションを使用して、指定したクラス メンバーのコードを生成します。</summary>
      <param name="member">コード生成の対象となる <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードの生成時に使用する <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>指定したオブジェクト型の <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</summary>
      <param name="type">型コンバーターを取得する対象のオブジェクトの型。</param>
      <returns>指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>言語機能識別子を取得します。</summary>
      <returns>言語の特殊な機能を示す <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>メソッドに渡される引数の値への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>パラメーター名を指定して、<see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameterName">参照するパラメーターの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>この式が参照するパラメーターの名前を取得または設定します。</summary>
      <returns>参照するパラメーターの名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>配列を作成する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>配列のデータ型、および配列のインデックス数を示すコード式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="size">作成する配列のインデックスの数を示す式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>配列のデータ型と初期化式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="initializers">配列を初期化するために使用する式の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>配列のデータ型と配列のインデックス数を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="size">作成する配列のインデックスの数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>配列のデータ型名、および配列のインデックス数を示すコード式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型の名前。</param>
      <param name="size">作成する配列のインデックスの数を示す式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>配列のデータ型名と初期化子を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型の名前。</param>
      <param name="initializers">配列を初期化するために使用する式の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>配列のデータ型名と配列のインデックス数を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型の名前。</param>
      <param name="size">作成する配列のインデックスの数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>配列のデータ型、および配列のインデックス数を示すコード式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型。</param>
      <param name="size">作成する配列のインデックスの数を示す式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>配列のデータ型と初期化子を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型。</param>
      <param name="initializers">配列を初期化するために使用する式の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>配列のデータ型と配列のインデックス数を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成する配列のデータ型。</param>
      <param name="size">作成する配列のインデックスの数。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>作成する配列の型を取得または設定します。</summary>
      <returns>配列の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>配列を初期化するために使用する初期化子を取得します。</summary>
      <returns>初期値を示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>配列のインデックス数を取得または設定します。</summary>
      <returns>配列のインデックス数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>配列のサイズを示す式を取得または設定します。</summary>
      <returns>配列のサイズを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>配列のインデックスへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>対象オブジェクトとインデックスを指定して、<see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">インデクサーの対象である配列を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="indices">参照する 1 つ以上のインデックス。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>インデクサー式の 1 つ以上のインデックスを取得または設定します。</summary>
      <returns>インデクサー式の 1 つ以上のインデックスを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>この配列インデクサーの対象オブジェクトを取得または設定します。</summary>
      <returns>インデックス付け対象の配列を表す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>単純な代入ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAssignStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>式を指定して、<see cref="T:System.CodeDom.CodeAssignStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="left">代入先の変数。</param>
      <param name="right">代入する値。</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>代入先のオブジェクトや参照を表す式を取得または設定します。</summary>
      <returns>代入先のオブジェクトや参照を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>代入するオブジェクトや参照を表す式を取得または設定します。</summary>
      <returns>代入するオブジェクトや式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>イベント ハンドラーのデリゲートをイベントに結び付けるステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>イベントとデリゲートを指定して、<see cref="T:System.CodeDom.CodeAttachEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="eventRef">イベント ハンドラーを結び付けるイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</param>
      <param name="listener">新しいイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>イベント、イベント名、およびイベント ハンドラー デリゲートを格納しているオブジェクトを指定して、<see cref="T:System.CodeDom.CodeAttachEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="eventName">イベント ハンドラーを結び付けるイベントの名前。</param>
      <param name="listener">新しいイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>イベント ハンドラー デリゲートを結び付けるイベントを取得または設定します。</summary>
      <returns>イベント ハンドラーを結び付けるイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>イベントに結び付ける新しいイベント ハンドラーのデリゲートを取得または設定します。</summary>
      <returns>結び付ける新しいイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>メタデータ属性宣言で使用する引数を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>値を指定して、<see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">引数の値を表す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>名前と値を指定して、<see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">引数が適用される属性プロパティの名前。</param>
      <param name="value">引数の値を表す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>属性の名前を取得または設定します。</summary>
      <returns>引数が適用される属性プロパティの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>属性引数の値を取得または設定します。</summary>
      <returns>属性引数の値を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeArgument" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  
または 
<see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトを挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeAttributeArgument" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>属性宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>指定したコードの型参照を使用して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeType">属性を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>コード型参照と引数を指定して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeType">属性を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="arguments">属性の引数を含む <see cref="T:System.CodeDom.CodeAttributeArgument" /> 型の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>指定された名前を使用して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">属性の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>名前と引数を指定して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">属性の名前。</param>
      <param name="arguments">属性の引数を含む <see cref="T:System.CodeDom.CodeAttributeArgument" /> 型の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>属性の引数を取得します。</summary>
      <returns>属性の引数を格納する <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>コード属性宣言のコード型参照を取得します。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> を示す <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>宣言する属性の名前を取得または設定します。</summary>
      <returns>属性の名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>指定した値で、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得または設定します。</summary>
      <param name="value">検索する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトを挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>指定したインデックスの位置にある <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>基本クラスの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>2 つの式の間の二項演算から構成される式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>パラメーターを指定して、<see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="left">演算子の左辺にある <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="op">演算子の種類を示す <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。</param>
      <param name="right">演算子の右辺にある <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>演算子の左辺にあるコード式を取得または設定します。</summary>
      <returns>左オペランドを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>二項演算式の演算子を取得または設定します。</summary>
      <returns>式内の演算子の種類を示す <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>演算子の右辺にあるコード式を取得または設定します。</summary>
      <returns>右オペランドを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>サポートする二項演算子の識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>加算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>代入演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>ビットごとの AND 演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>ビットごとの OR 演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>ブール代数の AND 演算子。 これはショートサーキット演算子を表します。 ショートサーキット演算子は、正しい値を返すために必要な式だけを評価します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>ブール代数の OR 演算子。 これはショートサーキット演算子を表します。 ショートサーキット演算子は、正しい値を返すために必要な式だけを評価します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>除算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>大なり演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>以上演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>ID 等値演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>ID 不等演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>小なり演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>以下演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>剰余演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>乗算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>減算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>等値演算子。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>データ型またはインターフェイスにキャストする式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>キャスト先の型と式を指定して、<see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType">キャスト先の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="expression">キャストする <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>キャスト先の型と式を指定して、<see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType">キャスト先の型の名前。</param>
      <param name="expression">キャストする <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>キャスト先の型と式を指定して、<see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType">キャスト先のデータ型。</param>
      <param name="expression">キャストする <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>キャストする式を取得または設定します。</summary>
      <returns>キャストするコードを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>キャスト先の型を取得または設定します。</summary>
      <returns>キャスト先の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>
        <see langword="catch" /> ステートメントの <see langword="try/catch" /> 例外ブロックを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>例外のローカル変数名を指定して、<see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="localName">例外の catch 句で宣言されたローカル変数の名前。 これはオプションです。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>例外のローカル変数名と例外の種類を指定して、<see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="localName">例外の catch 句で宣言されたローカル変数の名前。 これはオプションです。</param>
      <param name="catchExceptionType">キャッチする例外の種類を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>例外のローカル変数名、例外の種類、およびステートメント コレクションを指定して、<see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="localName">例外の catch 句で宣言されたローカル変数の名前。 これはオプションです。</param>
      <param name="catchExceptionType">キャッチする例外の種類を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="statements">catch ブロックの内容を表す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>catch ブロックで処理される例外の型を取得または設定します。</summary>
      <returns>処理する例外の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>
        <see langword="catch" /> 句で処理する例外の変数名を取得または設定します。</summary>
      <returns>
        <see langword="catch" /> 句で処理する例外変数の名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>catch ブロック内で、ステートメントを取得します。</summary>
      <returns>catch ブロック内のステートメントが格納される <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCatchClauseCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeCatchClause" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCatchClause" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCatchClauseCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトを挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>コード チェックサムのプラグマ コード エンティティの表現。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeChecksumPragma" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>ファイル名、チェックサム アルゴリズムを表す GUID、およびチェックサム データを表すバイト ストリームを使用して、<see cref="T:System.CodeDom.CodeChecksumPragma" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">チェックサム ファイルへのパス。</param>
      <param name="checksumAlgorithmId">使用するチェックサム アルゴリズムを識別する <see cref="T:System.Guid" />。</param>
      <param name="checksumData">チェックサム データを格納するバイト配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>使用するチェックサム アルゴリズムを識別する GUID を取得または設定します。</summary>
      <returns>使用するチェックサム アルゴリズムを識別する <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>チェックサムの計算に使用するデータの値を取得または設定します。</summary>
      <returns>チェックサムの計算に使用するデータを格納するバイト配列。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>チェックサム ファイルへのパスを取得または設定します。</summary>
      <returns>チェックサム ファイルへのパス。</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>コメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeComment" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>内容としてテキストを指定して、<see cref="T:System.CodeDom.CodeComment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">コメントの内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>テキストとドキュメント コメント フラグを指定して、<see cref="T:System.CodeDom.CodeComment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">コメントの内容。</param>
      <param name="docComment">コメントがドキュメント コメントの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>コメントがドキュメント コメントかどうかを示す値を取得または設定します。</summary>
      <returns>コメントがドキュメント コメントの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>コメントのテキストを取得または設定します。</summary>
      <returns>コメント テキストを含む文字列。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>単一のコメントから成るステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>コメントを指定して、<see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comment">コメントを示す <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>内容としてテキストを指定して、<see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">コメントの内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>テキストとドキュメント コメント フラグを指定して、<see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">コメントの内容。</param>
      <param name="docComment">コメントがドキュメント コメントの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>コメントの内容を取得または設定します。</summary>
      <returns>コメントを示す <see cref="T:System.CodeDom.CodeComment" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCommentStatement" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索される <see cref="T:System.CodeDom.CodeCommentStatement" />。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>指定した 1 次元の <see cref="T:System.Array" /> にコレクション オブジェクトをコピーします。コピー操作は、指定したインデックスから始まります。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">検索する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>コレクション内の指定したインデックス位置に、<see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトを挿入します。</summary>
      <param name="index">項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>CodeDOM プログラム グラフ用のコンテナーを提供します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCompileUnit" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>生成されるアセンブリのカスタム属性のコレクションを取得します。</summary>
      <returns>生成されるアセンブリのカスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns>終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>名前空間のコレクションを取得します。</summary>
      <returns>コンパイル単位で使用される名前空間を示す <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>参照されたアセンブリを取得します。</summary>
      <returns>参照されるアセンブリのファイル名を格納した <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns>開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>通常は <see langword="if" /> ステートメントとして表される、条件分岐ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeConditionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>条件とステートメントを指定して、<see cref="T:System.CodeDom.CodeConditionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="condition">評価する式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="trueStatements">条件が <see langword="true" /> の場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>条件とステートメントを指定して、<see cref="T:System.CodeDom.CodeConditionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="condition">評価する条件を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="trueStatements">条件が <see langword="true" /> の場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
      <param name="falseStatements">条件が <see langword="false" /> の場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>
        <see langword="true" /> か <see langword="false" /> と評価される式を取得または設定します。</summary>
      <returns>
        <see langword="true" /> か <see langword="false" /> と評価される <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>条件式が <see langword="false" /> と評価される場合に実行されるステートメントのコレクションを取得します。</summary>
      <returns>条件式が <see langword="false" /> と評価される場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>条件式が <see langword="true" /> と評価される場合に実行されるステートメントのコレクションを取得します。</summary>
      <returns>条件式が <see langword="true" /> と評価される場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>型のインスタンス コンストラクターの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeConstructor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>基本コンストラクターの引数のコレクションを取得します。</summary>
      <returns>基本コンストラクターの引数を格納している <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>チェイン コンストラクターの引数のコレクションを取得します。</summary>
      <returns>チェイン コンストラクターの引数を格納している <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>既定値への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>指定したコードの型参照を使用して、<see cref="T:System.CodeDom.CodeDefaultValueExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">値の型への参照を指定する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>既定値に対するデータ型参照を取得または設定します。</summary>
      <returns>既定値が設定されたデータ型を表す <see cref="T:System.CodeDom.CodeTypeReference" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>デリゲートを作成する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="delegateType">デリゲートのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="targetObject">イベント ハンドラー メソッドを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName">イベント ハンドラー メソッドの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>デリゲートのデータ型を取得または設定します。</summary>
      <returns>デリゲートのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>イベント ハンドラー メソッドの名前を取得または設定します。</summary>
      <returns>イベント ハンドラー メソッドの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>イベント ハンドラー メソッドを格納するオブジェクトを取得または設定します。</summary>
      <returns>イベント ハンドラー メソッドを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>イベントを発生する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>対象オブジェクトを指定して、<see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>対象オブジェクトとパラメーターを指定して、<see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="parameters">パラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>イベントに結び付けられたイベント処理メソッドに渡すパラメーターを取得または設定します。</summary>
      <returns>イベントに結び付けられたイベント処理メソッドに渡すパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>呼び出されるイベントを取得または設定します。</summary>
      <returns>呼び出されるイベントを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>参照方向のインジケーターと共にメソッド呼び出しのパラメーターとして使用される式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDirectionExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>フィールドの方向と式を指定して、<see cref="T:System.CodeDom.CodeDirectionExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="direction">式のフィールドの方向を示す <see cref="T:System.CodeDom.FieldDirection" />。</param>
      <param name="expression">表すコード式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>この方向式のフィールドの方向を取得または設定します。</summary>
      <returns>この方向式のフィールドの方向を示す <see cref="T:System.CodeDom.FieldDirection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>表すコード式を取得または設定します。</summary>
      <returns>表す式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>コード ディレクティブ クラスの基本クラスとして機能します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDirective" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>指定した配列のコード ディレクティブ オブジェクトを使用して、<see cref="T:System.CodeDom.CodeDirectiveCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>指定したコード ディレクティブ コレクションの要素を使用して、<see cref="T:System.CodeDom.CodeDirectiveCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <returns>新しい要素が挿入されたインデックス位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>コレクションの末尾に <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトの配列を追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>指定した <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを格納している <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトがコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value">このコレクション内で検索する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元配列にコレクションの内容をコピーします。</summary>
      <param name="array">コレクションの値のコピー先となる <see cref="T:System.CodeDom.CodeDirective" /> 型の配列。</param>
      <param name="index">コレクション オブジェクトの挿入開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeDirectiveCollection" /> 内の要素の数が、<paramref name="index" /> で指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス位置。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトを挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス位置。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が <see cref="P:System.Collections.CollectionBase.Count" /> より大きくなっています。</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするインデックス位置。</param>
      <returns>インデックス位置にある <see cref="T:System.CodeDom.CodeDirective" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、コレクションのインデックス位置の有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>実行可能ファイルのエントリ ポイント メソッドを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeEntryPointMethod" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>イベントへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>対象オブジェクトとイベント名を指定して、<see cref="T:System.CodeDom.CodeEventReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="eventName">参照されるイベントの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>イベントの名前を取得または設定します。</summary>
      <returns>イベントの名前です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>イベントを格納するオブジェクトを取得または設定します。</summary>
      <returns>イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>コード式を表します。 これは、他のコード式オブジェクトの基本クラスです。このクラスがインスタンス化されることはありません。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>指定した配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeExpression" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeExpressionCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeExpressionCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトを挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションの、0 から始まるインデックス番号。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>単一の式から成るステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeExpressionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>式を指定して、<see cref="T:System.CodeDom.CodeExpressionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression">ステートメントの <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>ステートメントの式を取得または設定します。</summary>
      <returns>ステートメントの式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>フィールドへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>対象オブジェクトとフィールド名を指定して、<see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">フィールドを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="fieldName">フィールドの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>参照されるフィールドの名前を取得または設定します。</summary>
      <returns>フィールド名を含む文字列。</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>参照されるフィールドを格納したオブジェクトを取得または設定します。</summary>
      <returns>参照されるフィールドを格納したオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>
        <see langword="goto" /> ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeGotoStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>ラベル名を指定して、<see cref="T:System.CodeDom.CodeGotoStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="label">プログラムの実行を再開する位置のラベルの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>プログラムの実行を再開する位置のラベルの名前を取得または設定します。</summary>
      <returns>プログラムの実行を再開する位置のラベルの名前を示す文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> または空の文字列のため、ラベルを設定できません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>オブジェクトのインデクサー プロパティへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>対象オブジェクトとインデックスを指定して、<see cref="T:System.CodeDom.CodeIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">ターゲット オブジェクト。</param>
      <param name="indices">インデクサー式の 1 つ以上のインデックス。</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>インデクサー式のインデックスのコレクションを取得します。</summary>
      <returns>インデクサー式の 1 つ以上のインデックスを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>インデックス付けできる対象オブジェクトを取得または設定します。</summary>
      <returns>インデクサー オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>
        <see langword="for" /> ステートメント、またはループの続行条件としてテスト式を使用するステートメントのブロックを反復処理するループを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeIterationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>パラメーターを指定して、<see cref="T:System.CodeDom.CodeIterationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="initStatement">ループ初期化ステートメントを格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="testExpression">終了条件をテストする対象となる式を格納する <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="incrementStatement">循環ごとに値が増加するステートメントを格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="statements">ループ内のステートメントを格納する <see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>ループ循環後に繰り返し呼び出されるステートメントを取得または設定します。</summary>
      <returns>循環ごとに値が増加するステートメントを示す <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>ループ初期化ステートメントを取得または設定します。</summary>
      <returns>ループ初期化ステートメントを示す <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>ループ内で実行されるステートメントのコレクションを取得します。</summary>
      <returns>ループ内のステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>ループの続行条件としてテストする対象となる式を取得または設定します。</summary>
      <returns>テストする対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>ラベル付きステートメントまたはスタンドアロンのラベルを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeLabeledStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>ラベル名を指定して、<see cref="T:System.CodeDom.CodeLabeledStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="label">ラベルの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>ラベル名とステートメントを指定して、<see cref="T:System.CodeDom.CodeLabeledStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="label">ラベルの名前。</param>
      <param name="statement">ラベルに関連付ける <see cref="T:System.CodeDom.CodeStatement" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>ラベルの名前を取得または設定します。</summary>
      <returns>ラベルの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>省略可能な関連付けられているステートメントを取得または設定します。</summary>
      <returns>このラベルに関連付けられているステートメントを示す <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>特定ファイル内の特定の位置を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeLinePragma" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>
        <see cref="T:System.CodeDom.CodeLinePragma" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">関連付けられたファイルの名前。</param>
      <param name="lineNumber">参照を格納する行番号。</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>関連付けられたファイルの名前を取得または設定します。</summary>
      <returns>関連付けられたファイルの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>関連付けられた参照の行番号を取得または設定します。</summary>
      <returns>行番号。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>型のイベントの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberEvent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>メンバー イベントが実装しているデータ型を取得または設定します。</summary>
      <returns>メンバー イベントが実装している 1 つ以上のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>プライベートに実装されているデータ型が存在する場合は、そのデータ型を取得または設定します。</summary>
      <returns>イベントがプライベートに実装しているデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>イベントを処理するデリゲート型のデータ型を取得または設定します。</summary>
      <returns>イベントを処理するデリゲート型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>型のフィールドの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>フィールドの種類とフィールド名を指定して、<see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">フィールドの型を示すオブジェクト。</param>
      <param name="name">フィールドの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>フィールドの種類とフィールド名を指定して、<see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">フィールドの型。</param>
      <param name="name">フィールドの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>フィールドの種類とフィールド名を指定して、<see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">フィールドの型。</param>
      <param name="name">フィールドの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>フィールドの初期化式を取得または設定します。</summary>
      <returns>フィールドの初期化式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>フィールドの型を取得または設定します。</summary>
      <returns>フィールドの型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>型のメソッドの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberMethod" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>メソッドの実装が <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> プロパティで示されるプライベート メソッド実装である場合を除き、このメソッドによって実装されるインターフェイスのデータ型を取得します。</summary>
      <returns>このメソッドによって実装されるインターフェイスを示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>メソッドのパラメーター宣言を取得します。</summary>
      <returns>メソッドのパラメーターを示す <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>
        <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>
        <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>
        <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>このメソッドによってプライベート メソッドが実装されるインターフェイスがある場合に、そのインターフェイスのデータ型を取得または設定します。</summary>
      <returns>この <see cref="T:System.CodeDom.CodeTypeReference" /> によって表される宣言のプライベート メソッドがインターフェイスのメソッドを実装する場合、そのインターフェイスのデータ型を示す <see cref="T:System.CodeDom.CodeMemberMethod" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>メソッドの戻り値のデータ型を取得または設定します。</summary>
      <returns>メソッドの戻り値のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>メソッドの戻り値の型のカスタム属性を取得します。</summary>
      <returns>カスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>メソッド内で、ステートメントを取得します。</summary>
      <returns>メソッド内のステートメントを示す <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>現在のジェネリック メソッドの型パラメーターを取得します。</summary>
      <returns>ジェネリック メソッドの型パラメーターを格納する <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>型のプロパティの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberProperty" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>プロパティの <see langword="get" /> ステートメントのコレクションを取得します。</summary>
      <returns>メンバー プロパティの <see langword="get" /> ステートメントを格納する <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>プロパティに <see langword="get" /> メソッド アクセサーがあるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> コレクションの <see langword="true" /> プロパティが非ゼロの場合か、このプロパティの値が <see langword="Count" /> に設定されていた場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>プロパティに <see langword="set" /> メソッド アクセサーがあるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Collections.CollectionBase.Count" /> コレクションの <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> プロパティが非ゼロの場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>プロパティが実装しているすべてのインターフェイスのデータ型を取得します。</summary>
      <returns>プロパティが実装しているデータ型を示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>プロパティの宣言式のコレクションを取得します。</summary>
      <returns>プロパティの宣言式を示す <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>このプロパティがプライベートである場合に実装するインターフェイスがあるときに、そのインターフェイスのデータ型を取得または設定します。</summary>
      <returns>このプロパティがプライベートである場合に実装するインターフェイスがあるときに、そのインターフェイスのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>プロパティの <see langword="set" /> ステートメントのコレクションを取得します。</summary>
      <returns>メンバー プロパティの <see langword="set" /> ステートメントを格納する <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>プロパティのデータ型を取得または設定します。</summary>
      <returns>プロパティのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>メソッドを呼び出す式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>対象オブジェクト、メソッド名、およびパラメーターを指定して、<see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">呼び出されるメソッドのある対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName">呼び出すメソッドの名前。</param>
      <param name="parameters">メソッドの呼び出しに使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>メソッドとパラメーターを指定して、<see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="method">呼び出されるメソッドを示す <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</param>
      <param name="parameters">メソッドを呼び出すために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>呼び出されるメソッドを取得または設定します。</summary>
      <returns>呼び出されるメソッドを示す <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>メソッドの呼び出しに使用するパラメーターを取得します。</summary>
      <returns>メソッドの呼び出しに使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>メソッドへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>対象オブジェクトとメソッド名を指定して、<see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName">呼び出されるメソッドの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>対象オブジェクト、メソッド名、およびジェネリック型引数を指定して、<see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName">呼び出されるメソッドの名前。</param>
      <param name="typeParameters">この <see cref="T:System.CodeDom.CodeTypeReference" /> の <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> を指定する <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 値の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>参照されるメソッドの名前を取得または設定します。</summary>
      <returns>参照されるメソッドの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>参照されるメソッドを示す式を取得または設定します。</summary>
      <returns>参照されるメソッドを表す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>現在のジェネリック メソッド参照式の型引数を取得します。</summary>
      <returns>現在のコード <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> の型引数を格納する <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>値を返す return ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>指定した式を使用して、<see cref="T:System.CodeDom.CodeMethodReturnStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression">戻り値を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>戻り値を取得または設定します。</summary>
      <returns>return ステートメントで返す値を示す <see cref="T:System.CodeDom.CodeExpression" />。return ステートメントがサブルーチンの一部である場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>名前空間宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespace" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>指定された名前を使用して、<see cref="T:System.CodeDom.CodeNamespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">宣言する名前空間の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>名前空間のコメントを取得します。</summary>
      <returns>名前空間のコメントを示す <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>名前空間で使用する名前空間インポート ディレクティブのコレクションを取得します。</summary>
      <returns>名前空間で使用する名前空間インポートディレクティブを示す <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>名前空間の名前を取得または設定します。</summary>
      <returns>名前空間の名前。</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>
        <see cref="P:System.CodeDom.CodeNamespace.Comments" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>
        <see cref="P:System.CodeDom.CodeNamespace.Imports" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>
        <see cref="P:System.CodeDom.CodeNamespace.Types" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>名前空間に格納されている型のコレクションを取得します。</summary>
      <returns>名前空間に格納される型を示す <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeNamespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeNamespaceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeNamespace" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeNamespace" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>指定した <see cref="T:System.CodeDom.CodeNamespaceCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索される <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespace" /> がコレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeNamespaceCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>指定された <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトが <see cref="T:System.CodeDom.CodeNamespaceCollection" /> コレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">検索する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>指定された <see cref="T:System.CodeDom.CodeNamespace" /> のインデックスがコレクション内に存在する場合はそのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトを挿入します。</summary>
      <param name="index">新しい項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeNamespaceCollection" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeNamespace" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>使用する名前空間を示す名前空間インポート ディレクティブを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>インポートする名前空間を指定して、<see cref="T:System.CodeDom.CodeNamespaceImport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameSpace">インポートする名前空間の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>ステートメントのファイルと行を取得または設定します。</summary>
      <returns>ステートメントのコンテキストを示す <see cref="T:System.CodeDom.CodeLinePragma" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>インポートする名前空間を取得または設定します。</summary>
      <returns>インポートする名前空間の名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトのセットをコレクションに追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeNamespaceImport" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>メンバーのコレクションを消去します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>コレクション内の名前空間の数を取得します。</summary>
      <returns>コレクション内の名前空間の数。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>コレクション メンバーを列挙する列挙子を取得します。</summary>
      <returns>コレクション メンバーを示す <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.ICollection" />。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。 このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  このプロパティは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>オブジェクトを <see cref="T:System.Collections.IList" /> に追加します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <returns>新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>
        <see cref="T:System.Collections.IList" /> からすべての項目を削除します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns>値がリストに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>指定した位置にある <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">
        <see cref="T:System.Collections.IList" /> に挿入する <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> から削除する <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.IList" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>ほとんどの CodeDOM (Code Document Object Model) オブジェクトの共通基本クラスを提供します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>現在のオブジェクトのユーザー定義可能なデータを取得します。</summary>
      <returns>現在のオブジェクトのユーザー データを格納する <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>型の新しいインスタンスを作成する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>型とパラメーターを指定して、<see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成するオブジェクトのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="parameters">オブジェクトを作成するために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>型とパラメーターを指定して、<see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成するオブジェクトのデータ型の名前。</param>
      <param name="parameters">オブジェクトを作成するために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>型とパラメーターを指定して、<see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType">作成するオブジェクトのデータ型。</param>
      <param name="parameters">オブジェクトを作成するために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>作成するオブジェクトのデータ型を取得または設定します。</summary>
      <returns>作成するオブジェクトのデータ型に対する <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>オブジェクトの作成に使用するパラメーターを取得または設定します。</summary>
      <returns>オブジェクトを作成するときに使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>メソッド、プロパティ、またはコンストラクターのパラメーター宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>パラメーター型とパラメーター名を指定して、<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">宣言するパラメーターの型を示すオブジェクト。</param>
      <param name="name">宣言するパラメーターの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>パラメーター型とパラメーター名を指定して、<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">宣言するパラメーターの型。</param>
      <param name="name">宣言するパラメーターの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>パラメーター型とパラメーター名を指定して、<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">宣言するパラメーターの型。</param>
      <param name="name">宣言するパラメーターの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>パラメーター宣言のカスタム属性を取得または設定します。</summary>
      <returns>カスタム属性を示すオブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>フィールドの方向を取得または設定します。</summary>
      <returns>フィールドの方向を示すオブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>パラメーターの名前を取得または設定します。</summary>
      <returns>パラメーターの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>パラメーターの型を取得または設定します。</summary>
      <returns>パラメーターの型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> をコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>指定した配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> の内容をコレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> がコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value">コレクションで検索する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> がコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>コレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> を挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> を取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>指定された <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>プリミティブ データ型の値を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodePrimitiveExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>指定されたオブジェクトを使用して、<see cref="T:System.CodeDom.CodePrimitiveExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">表すオブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>表すプリミティブ データ型を取得または設定します。</summary>
      <returns>値を表すプリミティブ データ型のインスタンス。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>プロパティの値への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>対象オブジェクトとプロパティ名を指定して、<see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">参照するプロパティを格納したオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="propertyName">参照されるプロパティの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>参照されるプロパティの名前を取得または設定します。</summary>
      <returns>参照されるプロパティの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>参照するプロパティを格納したオブジェクトを取得または設定します。</summary>
      <returns>参照するプロパティを格納したオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>プロパティ設定メソッドの中の、プロパティ設定メソッドの呼び出しの値引数を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>コード領域の名前およびモードの指定。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeRegionDirective" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>モードと名前を指定して、<see cref="T:System.CodeDom.CodeRegionDirective" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="regionMode">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 値のいずれか 1 つ。</param>
      <param name="regionText">領域の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>領域ディレクティブのモードを取得または設定します。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeRegionMode" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.CodeDom.CodeRegionMode.None" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>領域の名前を取得または設定します。</summary>
      <returns>領域の名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>コード領域の先頭または末尾を指定します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>領域の末尾。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>使用しません。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>領域の先頭。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>イベント ハンドラーの結び付けを解除するステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>イベントとイベント ハンドラーを指定して、<see cref="T:System.CodeDom.CodeRemoveEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="eventRef">イベント ハンドラーの割り当てを解除する対象のイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</param>
      <param name="listener">削除するイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>対象オブジェクト、イベント名、およびイベント ハンドラーを指定して、<see cref="T:System.CodeDom.CodeRemoveEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject">イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="eventName">イベントの名前です。</param>
      <param name="listener">削除するイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>リスナーの結び付けを解除する対象となるイベントを取得または設定します。</summary>
      <returns>リスナーの結び付けを解除する対象となるイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>削除するイベント ハンドラーを取得または設定します。</summary>
      <returns>削除するイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>コンパイルできるリテラル コード片を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">表すリテラル コード片。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>ソース コード ドキュメント内でのコードの位置を示す行情報およびファイル情報を取得または設定します。</summary>
      <returns>コード片の位置を示す <see cref="T:System.CodeDom.CodeLinePragma" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>表すリテラル コード片を取得または設定します。</summary>
      <returns>リテラル コード片。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>リテラル式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>リテラル式を指定して、<see cref="T:System.CodeDom.CodeSnippetExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">表すリテラル式。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>コードのリテラル文字列を取得または設定します。</summary>
      <returns>リテラル文字列。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>リテラル コード片を使用してステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>コード片を指定して、<see cref="T:System.CodeDom.CodeSnippetStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">表すステートメントのリテラル コード片。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>リテラル コード片ステートメントを取得します。</summary>
      <returns>リテラル コード片ステートメント。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>リテラル コード片を使用して、型のメンバーを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>テキストを指定して、<see cref="T:System.CodeDom.CodeSnippetTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">型メンバーのリテラル コード片。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>型メンバーのリテラル コード片を取得または設定します。</summary>
      <returns>型メンバーのリテラル コード片。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>すべてのコード ステートメントの派生元となる <see langword="abstract" /> 基本クラスを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns>終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>コード ステートメントのある行を取得または設定します。</summary>
      <returns>コード ステートメントのコンテキストを示す <see cref="T:System.CodeDom.CodeLinePragma" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns>開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>
        <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトのセットをコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトが格納された <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">このコレクション内で検索する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクト。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>指定されたインデックスを開始位置として、<see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクトの要素を 1 次元 <see cref="T:System.Array" /> のインスタンスにコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeStatementCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>指定された <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトが <see cref="T:System.CodeDom.CodeStatementCollection" /> コレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトを挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeStatement" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>現在のローカル クラスのインスタンスへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>例外をスローするステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>例外型のインスタンスを指定して、<see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="toThrow">スローする例外を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>スローする例外を取得または設定します。</summary>
      <returns>スローする例外のインスタンスを表す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>任意の数の <see langword="try" /> 句と、省略可能な <see langword="catch" /> ブロックを持つ <see langword="finally" /> ブロックを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>try 句および catch 句のステートメントを指定して、<see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tryStatements">トライするステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <param name="catchClauses">キャッチする句を示す <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>try 句、catch 句、finally ステートメントなどのステートメントを指定して、<see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tryStatements">トライするステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <param name="catchClauses">キャッチする句を示す <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトの配列。</param>
      <param name="finallyStatements">使用する finally ステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>使用する catch 句を取得します。</summary>
      <returns>使用する catch 句を示す <see cref="T:System.CodeDom.CodeCatchClauseCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>使用する finally ステートメントを取得します。</summary>
      <returns>finally ステートメントを示す <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>トライするステートメントを取得します。</summary>
      <returns>トライするステートメントを示す <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>クラスの静的コンストラクターを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeConstructor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>クラス、構造体、インターフェイス、または列挙体の型宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>指定した名前を使用して、<see cref="T:System.CodeDom.CodeTypeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">新しい型の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>型の基本型を取得します。</summary>
      <returns>型の基本型を示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>型がクラスまたは参照型かどうかを示す値を取得または設定します。</summary>
      <returns>型がクラスまたは参照型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>型が列挙体かどうかを示す値を取得または設定します。</summary>
      <returns>型が列挙体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>型がインターフェイスかどうかを示す値を取得または設定します。</summary>
      <returns>型がインターフェイスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>型宣言が完全か部分的かを示す値を取得または設定します。</summary>
      <returns>クラス宣言または構造体宣言が部分的な実装表現である場合は、<see langword="true" />。これらの宣言がクラスまたは構造体の完全な実装である場合は、<see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>型が値型 (構造体) かどうかを示す値を取得または設定します。</summary>
      <returns>型が値型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>表される型のクラス メンバーのコレクションを取得します。</summary>
      <returns>クラス メンバーを示す <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> オブジェクト。</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>
        <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> コレクションが最初にアクセスされたときに発生します。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>
        <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> コレクションが最初にアクセスされたときに発生します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>型の属性を取得または設定します。</summary>
      <returns>型の属性を示す <see cref="T:System.Reflection.TypeAttributes" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>型宣言の型パラメーターを取得します。</summary>
      <returns>型宣言の型パラメーターを格納する <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>指定した配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトが格納された <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">このコレクション内で検索する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>指定されたインデックスを開始位置として、<see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクトの要素を 1 次元 <see cref="T:System.Array" /> のインスタンスにコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  
または 
<see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>指定された <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトが <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> コレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトを挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>デリゲート宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">デリゲートの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>デリゲートのパラメーターを取得します。</summary>
      <returns>デリゲートのパラメーターを示す <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>デリゲートの戻り値の型を取得または設定します。</summary>
      <returns>デリゲートの戻り値の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>型のメンバーの基本クラスを提供します。 型のメンバーには、フィールド、メソッド、プロパティ、コンストラクター、および入れ子にされた型があります。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>メンバーの属性を取得または設定します。</summary>
      <returns>メンバーの属性を表す <see cref="T:System.CodeDom.MemberAttributes" /> 値のビットごとの組み合わせ。 既定値は<see cref="F:System.CodeDom.MemberAttributes.Private" />  | です<see cref="F:System.CodeDom.MemberAttributes.Final" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>型メンバーのコメント コレクションを取得します。</summary>
      <returns>メンバーのコメントを示す <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>メンバーのカスタム属性を取得または設定します。</summary>
      <returns>メンバーのカスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>メンバーの終了ディレクティブを取得します。</summary>
      <returns>終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>型メンバーのステートメントが発生する行を取得または設定します。</summary>
      <returns>型メンバーの宣言の位置を示す <see cref="T:System.CodeDom.CodeLinePragma" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>メンバーの名前を取得または設定します。</summary>
      <returns>メンバーの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>メンバーの開始ディレクティブを取得します。</summary>
      <returns>開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeMemberCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>指定した値で、<see cref="T:System.CodeDom.CodeTypeMember" /> をコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeMember" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeMember" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>別の <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> の内容をコレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeMemberCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeMember" /> がコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索される <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>コレクション オブジェクトを指定のインデックスから開始する 1 次元 <see cref="T:System.Array" /> インスタンスにコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">配列先が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeMember" /> がコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>コレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeTypeMember" /> を挿入します。</summary>
      <param name="index">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeMember" /> を取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeTypeMember" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>コレクションから特定の <see cref="T:System.CodeDom.CodeTypeMember" /> を削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>指定した型名の <see cref="T:System.Type" /> を返す式である、<see langword="typeof" /> 式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">
        <see langword="typeof" /> 式のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>型を指定して、<see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">
        <see langword="typeof" /> 式のデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>型を指定して、<see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">
        <see langword="typeof" /> 式のデータ型のデータ型。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>
        <see langword="typeof" /> 式で参照されるデータ型を取得または設定します。</summary>
      <returns>
        <see langword="typeof" /> 式で参照されるデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。 このプロパティによって <see langword="null" /> が返されることはありません。このプロパティは、既定で <see cref="T:System.Void" /> 型に設定されます。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>ジェネリック型またはジェネリック メソッドの型パラメーターを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>指定した型パラメーター名を使用して <see cref="T:System.CodeDom.CodeTypeParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">型パラメーターの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>型パラメーターの制約を取得します。</summary>
      <returns>型パラメーターの制約を含む <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>型パラメーターのカスタム属性を取得します。</summary>
      <returns>型パラメーターのカスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>型パラメーターにコンストラクターの制約があるかどうかを表す値を取得または設定します。</summary>
      <returns>型パラメーターにコンストラクターの制約が設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>型パラメーターの名前を取得または設定します。</summary>
      <returns>型パラメーターの名前。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
      <returns>新しい要素が挿入された位置の、0 から始まるインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>指定したデータ型名を使用して、指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションに追加する対象のデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeParameter" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> オブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクションに格納されているかどうかを確認します。</summary>
      <param name="value">このコレクション内で検索する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクションに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>指定した 1 次元の <see cref="T:System.Array" /> の指定したインデックス位置に、コレクション内の項目をコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。  

または - 
<see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 内の要素の数が、<paramref name="index" /> で指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
      <returns>指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクションに存在する場合は、そのオブジェクトの 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトを挿入します。</summary>
      <param name="index">項目を挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトを取得または設定します。</summary>
      <param name="index">アクセスするコレクション オブジェクトの、0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、コレクションのインデックスの正しい範囲から外れています。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>型への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>コード型パラメーターを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeParameter">型パラメーターの型を表す <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>配列の型とランクを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="arrayType">配列の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="rank">配列の次元数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>型名を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">参照される型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>型名と型引数を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">参照される型の名前。</param>
      <param name="typeArguments">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 値の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>型名とコード型参照オプションを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">参照される型の名前。</param>
      <param name="codeTypeReferenceOption">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> のいずれかの値である、コード型参照オプション。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>配列の型名とランクを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="baseType">配列の要素の型の名前。</param>
      <param name="rank">配列の次元の数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>型を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">参照する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>型とコード型参照を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">参照する <see cref="T:System.Type" />。</param>
      <param name="codeTypeReferenceOption">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> のいずれかの値である、コード型参照オプション。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>配列内の要素の型を取得または設定します。</summary>
      <returns>配列の要素の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>配列の配列ランクを取得または設定します。</summary>
      <returns>配列の次元の数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>参照される型の名前を取得または設定します。</summary>
      <returns>参照先の型の名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>コード型参照オプションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>現在のジェネリック型参照の型引数を取得します。</summary>
      <returns>現在の <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクトの型引数を含む <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReference" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeReference" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>指定したデータ型名を使用して、<see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加します。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加する対象のデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>指定したデータ型を使用して、<see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加します。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加する対象のデータ型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeReference" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> の内容をコレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索される <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>指定した 1 次元の <see cref="T:System.Array" /> の指定したインデックス位置に、コレクション内の項目をコピーします。</summary>
      <param name="array">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> パラメーターが多次元です。  
または 
<see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクション内に存在する場合は、そのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>コレクション内の指定したインデックス位置に、<see cref="T:System.CodeDom.CodeTypeReference" /> を挿入します。</summary>
      <param name="index">項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeReference" /> を取得または設定します。</summary>
      <param name="index">アクセスするコレクションのインデックス。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>データ型への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>型を指定して、<see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">参照するデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>データ型名を指定して、<see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">参照するデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>データ型を指定して、<see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">参照するデータ型のインスタンス。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>参照するデータ型を取得または設定します。</summary>
      <returns>参照するデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>コード型参照の解決方法を指定します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>型パラメーターから型を解決します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>ルート名前空間から型を解決します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>変数宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>型と名前を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">変数のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="name">変数の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>データ型、変数名、および初期化式を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">変数の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="name">変数の名前。</param>
      <param name="initExpression">変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>データ型名と変数名を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">変数のデータ型の名前。</param>
      <param name="name">変数の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>データ型、変数名、および初期化式を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">変数のデータ型の名前。</param>
      <param name="name">変数の名前。</param>
      <param name="initExpression">変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>データ型と変数名を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">変数のデータ型。</param>
      <param name="name">変数の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>データ型、変数名、および初期化式を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">変数のデータ型。</param>
      <param name="name">変数の名前。</param>
      <param name="initExpression">変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>変数の初期化式を取得または設定します。</summary>
      <returns>変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>変数の名前を取得または設定します。</summary>
      <returns>変数の名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>変数のデータ型を取得または設定します。</summary>
      <returns>変数のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>ローカル変数への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>ローカル変数名を指定して、<see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="variableName">参照されるローカル変数の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>参照されるローカル変数の名前を取得または設定します。</summary>
      <returns>参照されるローカル変数の名前。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> インターフェイスの実装例を提供します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>指定した <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> からコンパイラに渡されるコマンド引数を取得します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" />。</param>
      <returns>コマンド引数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>コンパイラ実行可能ファイルの名前を取得します。</summary>
      <returns>コンパイラ実行可能ファイルの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>ソース ファイルに使用するファイル名拡張子を取得します。</summary>
      <returns>ソース ファイルに使用するファイル名拡張子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>指定したオプションを使用して、指定したコンパイル単位をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="e">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> オブジェクト。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>指定したオプションを使用して、指定した複数のコンパイル単位をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="ea">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> オブジェクトの配列。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> が <see langword="null" /> です。  

または - 
<paramref name="ea" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>指定したオプションを使用して、指定したファイルをコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileName">コンパイルするファイルの名前。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> は <see langword="null" />です。  

または - 
<paramref name="fileName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>指定したオプションを使用して、指定した複数のファイルをコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames">コンパイルするファイルの名前を示す文字列の配列。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> は <see langword="null" />です。  

または - 
<paramref name="fileNames" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>指定したオプションを使用して、指定したソース コード文字列をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="source">コンパイルするソース コード文字列。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>指定したオプションを使用して、指定した複数のソース コード文字列をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources">コンパイルするソース コードを格納している文字列の配列。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> が <see langword="null" /> です。  

または - 
<paramref name="sources" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>応答ファイルを生成するためにコンパイラを呼び出すときに使用するコマンド引数を取得します。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="cmdArgs">コマンド引数文字列。</param>
      <returns>応答ファイルを生成するときに使用するコマンド引数。応答ファイルを生成するときに引数を指定しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>指定した複数の文字列配列を結合します。</summary>
      <param name="sa">結合する文字列の配列。</param>
      <param name="separator">使用する区切り記号。</param>
      <returns>連結された文字列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>指定した <see cref="T:System.CodeDom.Compiler.CompilerResults" /> の指定した行を処理します。</summary>
      <param name="results">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" />。</param>
      <param name="line">処理対象の行。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />」をご覧ください。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="e">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />」をご覧ください。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="ea">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> オブジェクトの配列。</param>
      <returns>コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />」をご覧ください。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileName">コンパイルするファイルの名前。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>このメンバーの説明については、<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" /> のトピックを参照してください。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames">コンパイルするファイルの名前を示す文字列の配列。</param>
      <returns>コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />」をご覧ください。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="source">コンパイルするソース コードを示す文字列。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />」をご覧ください。</summary>
      <param name="options">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources">コンパイルするソース コードを示す文字列の配列。</param>
      <returns>コンパイルの結果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> の実装の基本クラスを提供します。 このクラスは抽象クラスです。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> オブジェクトの配列に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーに基づいてアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="compilationUnits">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> 型の配列。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames">コンパイルするファイルの名前の配列。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</summary>
      <param name="options">このコンパイルのコンパイラ設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources">コンパイルするソース コード文字列の配列。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>派生クラスでオーバーライドされると、新しいコード コンパイラを作成します。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> ベースのソース コードをコンパイルするために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>指定した値のエスケープ識別子を作成します。</summary>
      <param name="value">エスケープ識別子作成の対象となる文字列。</param>
      <returns>その値のエスケープ識別子。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>派生クラスでオーバーライドされると、出力用に指定されている <see cref="T:System.IO.TextWriter" /> を使用して、新しいコード ジェネレーターを作成します。</summary>
      <param name="output">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>派生クラスでオーバーライドされると、出力用に指定されているファイル名を使用して、新しいコード ジェネレーターを作成します。</summary>
      <param name="fileName">出力ファイル名。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>派生クラスでオーバーライドされると、新しいコード パーサーを作成します。</summary>
      <returns>ソース コードを解析するために使用できる <see cref="T:System.CodeDom.Compiler.ICodeParser" />。 基本実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</summary>
      <param name="language">言語名。</param>
      <returns>指定した言語名に対して実装される CodeDOM プロバイダー。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>指定された言語オプションおよびプロバイダー オプションの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</summary>
      <param name="language">言語名。</param>
      <param name="providerOptions">構成ファイルのプロバイダー オプションのコレクション。</param>
      <returns>指定した言語名およびオプションに対して実装される CodeDOM プロバイダー。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>指定した値の有効な識別子を作成します。</summary>
      <param name="value">有効な識別子生成の対象となる文字列。</param>
      <returns>指定した値の有効な識別子。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>現在の言語のソース コード ファイルに使用する既定のファイル名拡張子を取得します。</summary>
      <returns>現在の言語のソース ファイルの拡張子に対応するファイル名拡張子。 基本実装では、常に <see cref="F:System.String.Empty" /> を返します。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した CodeDOM (Code Document Object Model) コンパイル単位のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="compileUnit">コード生成の対象となる <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した CodeDOM (Code Document Object Model) 式のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="expression">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した CodeDOM (Code Document Object Model) メンバー宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="member">コード生成の対象となるメンバーを示す <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクト。</param>
      <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException">このメソッドは、派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した CodeDOM (Code Document Object Model) 名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="codeNamespace">コード生成の対象となる名前空間を示す <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクト。</param>
      <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した CodeDOM (Code Document Object Model) ステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="statement">コード生成の対象となる CodeDOM 要素を格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した CodeDOM (Code Document Object Model) 型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="codeType">コード生成の対象となる型を示す <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
      <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>このコンピューターの言語プロバイダーおよびコンパイラの構成設定を返します。</summary>
      <returns>構成済みのすべての <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定を表す <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 型の配列。</returns>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>指定した言語の言語プロバイダーおよびコンパイラの構成設定を返します。</summary>
      <param name="language">言語名。</param>
      <returns>構成済みの <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定で作成された <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>指定したデータ ソースの <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</summary>
      <param name="type">型コンバーターを取得する対象のオブジェクトの型。</param>
      <returns>指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。指定した型の <see cref="T:System.ComponentModel.TypeConverter" /> が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成セクションに構成されている、指定したファイル名拡張子に関連付けられた言語名を返します。</summary>
      <param name="extension">ファイル名拡張子。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成設定に構成されている、ファイル名拡張子に関連付けられた言語名。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">このコンピューターには、<paramref name="extension" /> の構成済みの言語プロバイダーがありません。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</summary>
      <param name="type">返される型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>このコード ジェネレーターによってコードを生成する際に使用する言語用に書式設定された、指定した型のテキスト表現。 たとえば、Visual Basic では、<see cref="T:System.CodeDom.CodeTypeReference" /> 型の <see cref="T:System.Int32" /> を渡すと、"Integer" が返されます。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>コンピューター上に、ファイル名拡張子の関連する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</summary>
      <param name="extension">ファイル名拡張子。</param>
      <returns>指定したファイル名拡張子に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>コンピューター上に、言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</summary>
      <param name="language">言語名。</param>
      <returns>指定した言語に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>指定した値が現在の言語で有効な識別子かどうかを示す値を返します。</summary>
      <param name="value">有効な識別子かどうかを検査する値。</param>
      <returns>
        <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>言語機能識別子を取得します。</summary>
      <returns>言語の特殊な機能を示す <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>指定したテキスト ストリームから読み取ったコードを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</summary>
      <param name="codeStream">解析するコードの読み取りに使用する <see cref="T:System.IO.TextReader" /> オブジェクト。</param>
      <returns>コードの解析後の表現を格納する <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>指定したコードを生成できるかどうかを示す値を返します。</summary>
      <param name="generatorSupport">検査するコード生成サポートの種類を示す <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクト。</param>
      <returns>指定したコードを生成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> インターフェイスの実装例を提供します。 このクラスは抽象クラスです。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>行連結文字を生成し、指定した文字列を新しい行に出力します。</summary>
      <param name="st">新しい行に書き込まれる文字列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>指定した値のエスケープ識別子を作成します。</summary>
      <param name="value">エスケープ識別子を作成する対象の文字列。</param>
      <returns>その値のエスケープ識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>指定した値の有効な識別子を作成します。</summary>
      <param name="value">有効な識別子を作成する対象の文字列。</param>
      <returns>その値の有効な識別子。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>現在のクラスのコード型宣言を取得します。</summary>
      <returns>現在のクラスのコード型宣言。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>クラスの現在のメンバーを取得します。</summary>
      <returns>クラスの現在のメンバー。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>現在のメンバーの名前を取得します。</summary>
      <returns>現在のメンバーの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>現在のクラスの名前を取得します。</summary>
      <returns>現在のクラスの名前。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>指定した引数参照式のコードを生成します。</summary>
      <param name="e">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>指定した配列作成式のコードを生成します。</summary>
      <param name="e">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeArrayCreateExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>指定した配列インデクサー式のコードを生成します。</summary>
      <param name="e">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>指定した代入ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメントを示す <see cref="T:System.CodeDom.CodeAssignStatement" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>指定した結合イベント ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメントを示す <see cref="T:System.CodeDom.CodeAttachEventStatement" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>指定した属性ブロックの終了のコードを生成します。</summary>
      <param name="attributes">コード生成の対象となる属性ブロックの終了を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>指定した属性ブロックの開始のコードを生成します。</summary>
      <param name="attributes">コード生成の対象となる属性ブロックの開始を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>指定したベース参照式のコードを生成します。</summary>
      <param name="e">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>指定した二項演算式のコードを生成します。</summary>
      <param name="e">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>指定したキャスト式のコードを生成します。</summary>
      <param name="e">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeCastExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定したテキスト ライターおよびコード ジェネレーターのオプションを使用して、指定したクラス メンバーのコードを生成します。</summary>
      <param name="member">コード生成の対象となるクラス メンバー。</param>
      <param name="writer">コードの出力先となるテキスト ライター。</param>
      <param name="options">コードの生成時に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> プロパティは <see langword="null" /> ではありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>指定したコメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となる <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>指定したコメント ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> の <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> プロパティが設定されていません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>指定した複数のコメント ステートメントのコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>指定したコンパイル単位のコードを生成します。</summary>
      <param name="e">コード生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>コンパイル単位の終了のコードを生成します。</summary>
      <param name="e">コード生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>コンパイル単位の開始のコードを生成します。</summary>
      <param name="e">コード生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>指定した条件付きステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>指定したコンストラクターのコードを生成します。</summary>
      <param name="e">コード生成の対象となるコンストラクター。</param>
      <param name="c">このコンストラクターが構築するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>指定した 10 進値のコードを生成します。</summary>
      <param name="d">コード生成の対象となる 10 進値。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>既定値への指定した参照のコードを生成します。</summary>
      <param name="e">コード生成の対象となる参照。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>指定したデリゲート作成式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>指定したデリゲート呼び出し式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>指定した方向式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>指定したコード ディレクティブのコードを生成します。</summary>
      <param name="directives">コード生成の対象となるコード ディレクティブ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>倍精度浮動小数点数のコードを生成します。</summary>
      <param name="d">コード生成の対象となる値。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>指定したエントリ ポイント メソッドのコードを生成します。</summary>
      <param name="e">コードのエントリ ポイント。</param>
      <param name="c">型を宣言するコード。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>指定したイベントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるメンバー イベント。</param>
      <param name="c">このイベントが発生するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>指定したイベント参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>指定したコード式のコードを生成します。</summary>
      <param name="e">コード生成の対象となるコード式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> は有効な <see cref="T:System.CodeDom.CodeStatement" /> ではありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>指定した式ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>指定したメンバー フィールドのコードを生成します。</summary>
      <param name="e">コード生成の対象となるフィールド。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>指定したフィールド参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>指定した <see langword="goto" /> ステートメントのコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>指定したインデクサー式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>指定した繰り返しステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>指定したラベル付きステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>指定した line プラグマの終了のコードを生成します。</summary>
      <param name="e">コード生成の対象となる line プラグマの終了。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>指定した line プラグマの開始のコードを生成します。</summary>
      <param name="e">コード生成の対象となる line プラグマの開始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>指定したメソッドのコードを生成します。</summary>
      <param name="e">コード生成の対象となるメンバー メソッド。</param>
      <param name="c">このメソッドが出現するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>指定したメソッド呼び出し式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>指定したメソッド参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>指定したメソッドの return ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>指定した名前空間のコードを生成します。</summary>
      <param name="e">コード生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>名前空間の終了のコードを生成します。</summary>
      <param name="e">コード生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>指定した名前空間へのインポートのコードを生成します。</summary>
      <param name="e">コード生成の対象となる名前空間インポート。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>指定した名前空間へのインポートのコードを生成します。</summary>
      <param name="e">コード生成の対象となる名前空間インポート。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>指定したコンパイル単位にある名前空間のコードを生成します。</summary>
      <param name="e">名前空間生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>名前空間の開始のコードを生成します。</summary>
      <param name="e">コード生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>指定したオブジェクト作成式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>指定したパラメーター宣言式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>指定したプリミティブ式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> は無効なデータ型を使用しています。 次のデータ型のみが有効です。 

string 
char 
byte 
Int16 
Int32 
Int64 
Single 
Double 
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>指定したプロパティのコードを生成します。</summary>
      <param name="e">コード生成の対象となるプロパティ。</param>
      <param name="c">このプロパティが出現するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>指定したプロパティ参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>指定したプロパティ セット値参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>指定した削除イベント ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>単精度浮動小数点数のコードを生成します。</summary>
      <param name="s">コード生成の対象となる値。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>指定したリテラル コード片コンパイル単位のコードを出力します。</summary>
      <param name="e">コード生成の対象となるリテラル コード片コンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>指定したリテラル コード片式のコードを出力します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>指定したリテラル コード片クラス メンバーのコードを出力します。</summary>
      <param name="e">コード生成の対象となるメンバー。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>指定したリテラル コード片ステートメントのコードを出力します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>指定したステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> は有効な <see cref="T:System.CodeDom.CodeStatement" /> ではありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>指定したステートメント コレクションのコードを生成します。</summary>
      <param name="stms">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>指定した this 参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>指定した throw 例外ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>指定した <see langword="try...catch...finally" /> ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>指定したクラス コンストラクターのコードを生成します。</summary>
      <param name="e">コード生成の対象となるクラス コンストラクター。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>指定したクラスの終了のコードを生成します。</summary>
      <param name="e">コード生成の対象となるクラスの終了。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>指定した型の式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>指定した型参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>指定した名前空間とその名前空間に格納されているクラスのコードを生成します。</summary>
      <param name="e">クラス生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>指定したクラスの開始のコードを生成します。</summary>
      <param name="e">コード生成の対象となるクラスの開始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>指定した変数宣言ステートメントのコードを生成します。</summary>
      <param name="e">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>指定した変数参照式のコードを生成します。</summary>
      <param name="e">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>指定したデータ型の名前を取得します。</summary>
      <param name="value">名前が返される型。</param>
      <returns>データ型参照の名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>各インデント レベルにインデント幅として適用する空白文字の数を取得または設定します。</summary>
      <returns>各インデント レベルにインデント幅として適用する空白文字の数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>生成されている現在のオブジェクトがクラスかどうかを示す値を取得します。</summary>
      <returns>現在のオブジェクトがクラスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>生成されている現在のオブジェクトがデリゲートかどうかを示す値を取得します。</summary>
      <returns>現在のオブジェクトがデリゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>生成されている現在のオブジェクトが列挙体かどうかを示す値を取得します。</summary>
      <returns>現在のオブジェクトが列挙体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>生成されている現在のオブジェクトがインターフェイスかどうかを示す値を取得します。</summary>
      <returns>現在のオブジェクトがインターフェイスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>生成されている現在のオブジェクトが値型または構造体かどうかを示す値を取得します。</summary>
      <returns>現在のオブジェクトが値型または構造体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>指定した値が有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value">有効な識別子と競合するかどうかをテストする対象の値。</param>
      <returns>値が有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>指定した文字列が有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value">有効かどうかをテストする対象の文字列。</param>
      <returns>指定した文字列が有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>
        <see langword="null" /> を表すトークンを取得します。</summary>
      <returns>
        <see langword="null" /> を表すトークン。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>コード ジェネレーターで使用されるオプションを取得します。</summary>
      <returns>コード ジェネレーターで使用されるオプションを示すオブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>出力に使用するテキスト ライターを取得します。</summary>
      <returns>出力に使用するテキスト ライター。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>属性ブロックにある引数を出力します。</summary>
      <param name="arg">コード生成の対象となる属性引数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>指定した属性宣言コレクションのコードを生成します。</summary>
      <param name="attributes">コード生成の対象となる属性。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>指定した <see cref="T:System.CodeDom.FieldDirection" /> のコードを生成します。</summary>
      <param name="dir">フィールドの属性を示す列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>指定した式リストのコードを生成します。</summary>
      <param name="expressions">コード生成の対象となる式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>指定した式リストのコードを生成します。</summary>
      <param name="expressions">コード生成の対象となる式。</param>
      <param name="newlineBetweenItems">各項目の後に改行文字を挿入する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>指定した属性に対応するフィールド スコープ修飾子を出力します。</summary>
      <param name="attributes">属性を指定する列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>指定した識別子を出力します。</summary>
      <param name="ident">出力する識別子。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>指定したメンバー アクセス修飾子のコードを生成します。</summary>
      <param name="attributes">コード生成の対象となるメンバー アクセス修飾子を示す列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>指定したメンバー スコープ修飾子のコードを生成します。</summary>
      <param name="attributes">コード生成の対象となるメンバー スコープ修飾子を示す列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>指定した演算子のコードを生成します。</summary>
      <param name="op">コード生成の対象となる演算子。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>指定したパラメーターのコードを生成します。</summary>
      <param name="parameters">コード生成の対象となるパラメーター宣言式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>指定した型のコードを生成します。</summary>
      <param name="typeRef">コード生成の対象となる型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>指定した型属性のコードを生成します。</summary>
      <param name="attributes">コード生成の対象となる型属性を示す列挙値の 1 つ。</param>
      <param name="isStruct">型が構造体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isEnum">型が列挙型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>指定したオブジェクト型とオブジェクト名の組み合わせのコードを生成します。</summary>
      <param name="typeRef">型。</param>
      <param name="name">オブジェクトの名前。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>エスケープ コード書式を付けることによって、指定した文字列を変換します。</summary>
      <param name="value">変換する文字列。</param>
      <returns>変換された文字列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>指定したコードを生成できるかどうかを示す値を取得します。</summary>
      <param name="support">コードを生成できるかどうかをテストする対象の型。</param>
      <returns>指定したコードを生成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>指定した値のエスケープ識別子を作成します。</summary>
      <param name="value">エスケープ識別子を作成する対象の文字列。</param>
      <returns>その値のエスケープ識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>指定した値の有効な識別子を作成します。</summary>
      <param name="value">有効な識別子を作成する対象の文字列。</param>
      <returns>指定した値の有効な識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の コンパイル ユニットのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">コードを生成する CodeDOM コンパイル ユニット。</param>
      <param name="w">コードの出力先となるテキスト ライター。</param>
      <param name="o">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の式のコードを生成し、指定したテキスト ライターに出力します。</summary>
      <param name="e">コードを生成する式。</param>
      <param name="w">コードの出力先となるテキスト ライター。</param>
      <param name="o">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">コード生成の対象となる名前空間。</param>
      <param name="w">コードの出力先となるテキスト ライター。</param>
      <param name="o">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) のステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">翻訳する CodeDOM 要素を含むステートメント。</param>
      <param name="w">コードの出力先となるテキスト ライター。</param>
      <param name="o">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">コード生成の対象となる型。</param>
      <param name="w">コードの出力先となるテキスト ライター。</param>
      <param name="o">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</summary>
      <param name="type">返す型。</param>
      <returns>データ型参照の名前。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>指定した値が現在の言語で有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value">テストする値。</param>
      <returns>
        <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>ジェネレーターが、指定した <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクトで表される言語機能のサポートを提供するかどうかを示す値を取得します。</summary>
      <param name="support">コード ジェネレーターがサポートしているかどうかをテストする対象の機能。</param>
      <returns>指定した機能がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>指定した値が有効な識別子ではない場合に、例外をスローします。</summary>
      <param name="value">検証する識別子。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>指定した文字列が有効な識別子ではない場合に、例外をスローします。</summary>
      <param name="value">識別子として有効かどうかをテストする対象の識別子。</param>
      <exception cref="T:System.ArgumentException">指定した識別子が無効な場合、または予約済みキーワードや言語キーワードと競合する場合。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>指定した <see cref="T:System.CodeDom.CodeObject" /> または <see cref="N:System.CodeDom" /> のツリーに格納されている各識別子フィールドの検証を試みます。</summary>
      <param name="e">無効な識別子をテストするオブジェクト。</param>
      <exception cref="T:System.ArgumentException">指定した <see cref="T:System.CodeDom.CodeObject" /> に無効な識別子が含まれています。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>コード ジェネレーターで使用するオプションのセットを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>各メンバーの間に空行を挿入するかどうかを示す値を取得または設定します。</summary>
      <returns>空行を挿入する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、このプロパティの値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>中かっこの記述時に適用するスタイルを取得または設定します。</summary>
      <returns>使用する中かっこスタイルを格納している文字列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>
        <see langword="else" />、<see langword="catch" />、<see langword="finally" /> の各ブロックを中かっこも含め、先行する <see langword="if" /> ブロックまたは <see langword="try" /> ブロックの終了行に追加するかどうかを示す値を取得または設定します。</summary>
      <returns>else を追加する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このプロパティの既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>インデントに使用する文字列を取得または設定します。</summary>
      <returns>インデントに使用する文字を格納している文字列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>指定したインデックスにあるオブジェクトを取得または設定します。</summary>
      <param name="index">取得するオブジェクトに関連付けられた名前。</param>
      <returns>指定した名前に関連付けられているオブジェクト。 指定した名前に関連付けられたオブジェクトがコレクションに存在しない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>メンバーがメンバー コレクションに現れる順番でメンバーを生成するかどうかを示す値を取得または設定します。</summary>
      <returns>メンバーがメンバー コレクションに現れる順番でメンバーを生成する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。 このプロパティの既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> インターフェイスの空実装を提供します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeParser" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>指定したテキスト ストリームを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</summary>
      <param name="codeStream">解析するコードの読み取りに使用する <see cref="T:System.IO.TextReader" />。</param>
      <returns>コードの解析から生成されるコード モデルを格納した <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>コンパイラのエラーまたは警告を表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>ファイル名、行、列、エラー番号、およびエラー テキストを指定して、<see cref="T:System.CodeDom.Compiler.CompilerError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName">エラーの発生時に、コンパイラによってコンパイルされていたファイルの名前。</param>
      <param name="line">エラーの原因となった行。</param>
      <param name="column">エラーの原因となった列。</param>
      <param name="errorNumber">エラーのエラー番号。</param>
      <param name="errorText">エラー メッセージ テキスト。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>エラーの原因となった列の番号を取得または設定します。</summary>
      <returns>コンパイラでエラーが発生したソース ファイルの列の番号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>エラー番号を取得または設定します。</summary>
      <returns>エラー番号を示す文字列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>エラー メッセージのテキストを取得または設定します。</summary>
      <returns>エラー メッセージのテキスト。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>エラーの原因となったコードが含まれるソース ファイルのファイル名を取得または設定します。</summary>
      <returns>エラーの原因となったコードが含まれるソース ファイルのファイル名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>エラーが警告かどうかを示す値を取得または設定します。</summary>
      <returns>エラーが警告である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>エラーの原因となった行の番号を取得または設定します。</summary>
      <returns>コンパイラでエラーが発生したソース ファイルの行の番号。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>オブジェクトの <see cref="M:System.Object.ToString" /> メソッドの実装を提供します。</summary>
      <returns>コンパイラ エラーの文字列形式。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.Compiler.CompilerError" /> の新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>指定した <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> の内容を格納する、<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクションを初期化するために使用する <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトをエラー コレクションに追加します。</summary>
      <param name="value">追加する <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクト。</param>
      <returns>新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>配列の要素をエラー コレクションの末尾にコピーします。</summary>
      <param name="value">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.Compiler.CompilerError" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>指定したコンパイラ エラー コレクションの内容をエラー コレクションの末尾に追加します。</summary>
      <param name="value">コレクションに追加するオブジェクトが格納された <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value">検索する <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> がコレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>1 次元の <see cref="T:System.Array" /> インスタンスの指定したインデックス位置に、コレクション値をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Array" /> の値のコピー先である 1 次元の <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</param>
      <param name="index">配列のコピーを開始する位置のインデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> パラメーターに指定されている配列が多次元です。  

または - 
<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 内の要素の数が、<paramref name="arrayIndex" /> パラメーターで指定されている配列内の、<paramref name="array" /> パラメーターで指定されているインデックス値から、<paramref name="array" /> パラメーターで指定されている配列の末尾までで使用できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターの値が、<paramref name="array" /> パラメーターで指定されている配列の下限値より小さくなっています。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>コレクションにエラーが格納されているかどうかを示す値を取得します。</summary>
      <returns>コレクションにエラーが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>コレクションに警告が格納されているかどうかを示す値を取得します。</summary>
      <returns>コレクションに警告が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value">検索する <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> が <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 内に存在する場合は、そのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>コレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> を挿入します。</summary>
      <param name="index">コンパイラ エラーを挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value">挿入する <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.CodeDom.Compiler.CompilerError" /> を取得または設定します。</summary>
      <param name="index">コレクションから取得するエントリの 0 から始まるインデックス番号。</param>
      <returns>有効な各インデックスにある <see cref="T:System.CodeDom.Compiler.CompilerError" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> パラメーターに指定されているインデックス値が、コレクションのインデックスの有効範囲外にあります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>コレクションから特定の <see cref="T:System.CodeDom.Compiler.CompilerError" /> を削除します。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> から削除する <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</param>
      <exception cref="T:System.ArgumentException">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>言語プロバイダーの構成設定を表します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>構成済みの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装の種類を取得します。</summary>
      <returns>構成済みの言語プロバイダーの種類を表す、読み取り専用の <see cref="T:System.Type" /> インスタンス。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">このコンピューターには、言語プロバイダーが構成されていません。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">型が <see langword="null" /> または空の文字列のため、特定できません。  

または - 
<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> の名前が構成ファイルに見つからないため、型を特定できません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>言語プロバイダー実装の構成済みのコンパイラ設定を取得します。</summary>
      <returns>言語プロバイダー用に構成されたコンパイラ オプションおよびコンパイラ設定を格納する読み取り専用の <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> インスタンス。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>現在の言語プロバイダー設定の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを返します。</summary>
      <returns>言語プロバイダーの構成に関連付けられた CodeDOM プロバイダー。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>現在の言語プロバイダー設定および指定されたオプションの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを返します。</summary>
      <param name="providerOptions">構成ファイルのプロバイダー オプションのコレクション。</param>
      <returns>言語プロバイダーの構成および指定されたオプションに関連付けられた CodeDOM プロバイダー。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">プロバイダーでオプションがサポートされていません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>指定したオブジェクトが表す言語プロバイダー設定とコンパイラ設定が、現在の <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> と同一であるかどうかを判断します。</summary>
      <param name="o">現在の <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> と比較するオブジェクト。</param>
      <returns>
        <paramref name="o" /> が <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> オブジェクトで、このインスタンスと同じ値を保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>言語プロバイダーがサポートするファイル名拡張子を返します。</summary>
      <returns>言語プロバイダーがサポートするファイル名拡張子の配列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> インスタンスの 32 ビット符号付き整数ハッシュ コード。ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適しています。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>言語プロバイダーがサポートする言語名を取得します。</summary>
      <returns>言語プロバイダーがサポートする言語名の配列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>コンピューター上に言語プロバイダー実装が構成されているかどうかを示す値を返します。</summary>
      <returns>コンピューター上に言語プロバイダー実装の種類が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>コンパイラを呼び出すために使用するパラメーターを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>指定したアセンブリ名を使用して、<see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyNames">参照するアセンブリの名前。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>指定したアセンブリ名と出力ファイル名を使用して、<see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyNames">参照するアセンブリの名前。</param>
      <param name="outputName">出力ファイル名。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>指定したアセンブリ名、出力名、デバッグ情報を含めるかどうかを示す値を使用して、<see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyNames">参照するアセンブリの名前。</param>
      <param name="outputName">出力ファイル名。</param>
      <param name="includeDebugInformation">デバッグ情報を含める場合は <see langword="true" />。デバッグ情報を除外する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>コンパイラを起動するときに使用する、オプションのコマンド ライン引数を取得または設定します。</summary>
      <returns>コンパイラに対する追加のコマンド ライン引数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>
        <see cref="T:System.Object" />、<see cref="T:System.String" />、<see cref="T:System.Int32" /> などの基本型を含むコアまたは標準アセンブリの名前を取得または設定します。</summary>
      <returns>基本型を格納しているコア アセンブリの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>アセンブリ出力をコンパイルするときに含める .NET Framework リソース ファイルを取得します。</summary>
      <returns>生成されるアセンブリに含めるための .NET Framework リソースのファイル パスを格納するコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>実行可能ファイルを生成するかどうかを示す値を取得または設定します。</summary>
      <returns>実行可能ファイルを生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>メモリ内で出力を生成するかどうかを示す値を取得または設定します。</summary>
      <returns>コンパイラがメモリ内で出力を生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>コンパイルされた実行可能ファイルにデバッグ情報を含めるかどうかを示す値を取得または設定します。</summary>
      <returns>デバッグ情報を生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>現在のソースで参照されている .NET Framework リソース ファイルを取得します。</summary>
      <returns>ソースによって参照される .NET Framework リソースのファイル パスを格納するコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>main クラスの名前を取得または設定します。</summary>
      <returns>main クラスの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>出力アセンブリの名前を取得または設定します。</summary>
      <returns>出力アセンブリの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>現在のプロジェクトで参照されるアセンブリを取得します。</summary>
      <returns>コンパイルするソースで参照されるアセンブリ名を格納するコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>一時ファイルを格納するコレクションを取得または設定します。</summary>
      <returns>一時ファイルを含むコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>警告をエラーとして扱うかどうかを示す値を取得または設定します。</summary>
      <returns>警告をエラーとして扱う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>コンパイラ プロセスを作成するときに使用するユーザー トークンを取得または設定します。</summary>
      <returns>使用するユーザー トークン。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>コンパイラがコンパイルを中止する警告レベルを取得または設定します。</summary>
      <returns>コンパイラがコンパイルを中止する警告レベル。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>コンパイルされるアセンブリにリンクする Win32 リソース ファイルの名前を取得または設定します。</summary>
      <returns>コンパイルされるアセンブリにリンクする Win32 リソース ファイル。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>コンパイラから返されるコンパイル結果を表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>指定した一時ファイルを使用する <see cref="T:System.CodeDom.Compiler.CompilerResults" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tempFiles">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>コンパイル済みのアセンブリを取得または設定します。</summary>
      <returns>コンパイル済みのアセンブリを示す <see cref="T:System.Reflection.Assembly" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>コンパイラのエラーおよび警告のコレクションを取得します。</summary>
      <returns>コンパイルの結果エラーおよび警告が発生した場合は、そのエラーおよび警告を示す <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>コンパイラからの戻り値を取得または設定します。</summary>
      <returns>コンパイラからの戻り値。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>コンパイラ出力メッセージを取得します。</summary>
      <returns>出力メッセージを格納する <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>コンパイル済みのアセンブリのパスを取得または設定します。</summary>
      <returns>アセンブリのパス。アセンブリがメモリ内に生成された場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>使用する一時ファイルのコレクションを取得または設定します。</summary>
      <returns>コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>コンパイラを呼び出すためのコマンド実行関数を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>指定した一時ファイルを使用してコマンドを実行し、呼び出しが戻るのを待ちます。</summary>
      <param name="cmd">実行するコマンド。</param>
      <param name="tempFiles">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>指定したユーザー トークンと一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="userToken">コンパイラ プロセスを開始するために使用するトークン。</param>
      <param name="cmd">実行するコマンド。</param>
      <param name="tempFiles">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName">発生したエラーの名前を格納する文字列への参照。</param>
      <returns>コンパイラからの戻り値。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>指定したユーザー トークン、現在のディレクトリ、および一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="userToken">コンパイラ プロセスを開始するために使用するトークン。</param>
      <param name="cmd">実行するコマンド。</param>
      <param name="currentDir">プロセスを開始するディレクトリ。</param>
      <param name="tempFiles">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName">発生したエラーの名前を格納する文字列への参照。</param>
      <returns>コンパイラからの戻り値。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>指定した一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="cmd">実行するコマンド。</param>
      <param name="tempFiles">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName">発生したエラーの名前を格納する文字列への参照。</param>
      <returns>コンパイラからの戻り値。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>指定した現在のディレクトリと一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="cmd">実行するコマンド。</param>
      <param name="currentDir">現在のフォルダー。</param>
      <param name="tempFiles">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName">発生したエラーの名前を格納する文字列への参照。</param>
      <returns>コンパイラからの戻り値。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>コード ジェネレーターが特定の型のコード要素をサポートしているかどうかを判断するために使用する識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>コード ジェネレーターが配列の配列をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>コード ジェネレーターがアセンブリ属性をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>コード ジェネレーターがチェイン コンストラクター引数をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>コード ジェネレーターが複雑な式をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>コード ジェネレーターがデリゲートの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>コード ジェネレーターが列挙体の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>コード ジェネレーターがイベントの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>コード ジェネレーターがインデクサー プロパティの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>コード ジェネレーターがインターフェイスの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>コード ジェネレーターが値型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>コード ジェネレーターがプログラム エントリ ポイント メソッドの指定をサポートしていることを示します。 この識別子は、実行可能ファイルを作成するときに使用されます。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>コード ジェネレーターがジェネリック型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>コード ジェネレーターがジェネリック型参照をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>コード ジェネレーターが goto ステートメントをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>コード ジェネレーターが多次元配列の参照をサポートしていることを示します。 現在、CodeDom を使用して多次元配列をインスタンス化することはできません。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>コード ジェネレーターが複数のインターフェイスを実装するメンバーの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>コード ジェネレーターが入れ子にされた型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>コード ジェネレーターがパラメーター属性をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>コード ジェネレーターが部分型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>コード ジェネレーターがパブリック静的メンバーをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>ジェネレーターが参照パラメーターおよび out パラメーターをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>コード ジェネレーターが .NET Framework リソースのコンパイルをサポートしていることを示します。 これらは、アセンブリに直接コンパイルされる既定のリソース、またはサテライト アセンブリで参照されるリソースです。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>コード ジェネレーターが戻り値の型の属性宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>コード ジェネレーターが静的コンストラクターをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>コード ジェネレーターが <see langword="try...catch" /> ステートメントをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>コード ジェネレーターが Win32 リソースのコンパイルをサポートしていることを示します。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>特定のコンパイラを使用してソース コードや CodeDOM ツリーのコンパイルを起動するためのインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーからアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="compilationUnit">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> オブジェクトの配列に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーに基づいてアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="compilationUnits">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> 型の配列。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileName">コンパイルするソース コードが格納されているファイルの名前。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames">コンパイルするファイルの名前。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列からアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="source">コンパイルするソース コード。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</summary>
      <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources">コンパイルするソース コード文字列。</param>
      <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>コードを生成するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>指定した値のエスケープ識別子を作成します。</summary>
      <param name="value">エスケープ識別子を作成する対象の文字列。</param>
      <returns>その値のエスケープ識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>指定した値の有効な識別子を作成します。</summary>
      <param name="value">有効な識別子を作成する対象の文字列。</param>
      <returns>指定した値の有効な識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の コンパイル ユニットのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">コード生成の対象となる <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="w">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の式のコードを生成し、指定したテキスト ライターに出力します。</summary>
      <param name="e">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="w">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">コード生成の対象となる名前空間を示す <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <param name="w">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) のステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">変換する CodeDOM 要素を格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="w">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>指定した Code Document Object Model (CodeDOM) の型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e">コード生成の対象となる型を示す <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <param name="w">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</summary>
      <param name="type">返される型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>コード ジェネレーターがコードの生成用として対応している言語での、指定した型のテキスト表現。 たとえば、Visual Basic では、System.Int32 型を渡すと "Integer" が返されます。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>指定した値が現在の言語で有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value">有効な識別子かどうかをテストする対象の値。</param>
      <returns>
        <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>ジェネレーターが、指定した <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクトで表される言語機能のサポートを提供するかどうかを示す値を取得します。</summary>
      <param name="supports">コード ジェネレーターがサポートしているかどうかをテストする対象の機能。</param>
      <returns>指定した機能がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>指定した値が有効な識別子ではない場合に、例外をスローします。</summary>
      <param name="value">検証する識別子。</param>
      <exception cref="T:System.ArgumentException">識別子が有効ではありません。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>コードを <see cref="T:System.CodeDom.CodeCompileUnit" /> に解析するためのインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>派生クラスで実装されると、指定したテキスト ストリームを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</summary>
      <param name="codeStream">コンパイルするコードの読み取りに使用できる <see cref="T:System.IO.TextReader" />。</param>
      <returns>コードの解析後の表現を格納する <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>ある言語の特殊な機能を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>言語では、大文字と小文字は区別されません。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>言語には、既定の特性があります。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>一時ファイルのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>既定では、一時ファイルを生成して使用した後、それらの一時ファイルを削除するように設定されている一時ディレクトリを使用して、<see cref="T:System.CodeDom.Compiler.TempFileCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tempDir">一時ファイルを格納するために使用する一時ディレクトリへのパス。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>既定では、指定した一時ディレクトリと、一時ファイルを生成して使用した後でそのファイルを保持するか削除するかを示す値を使用して、<see cref="T:System.CodeDom.Compiler.TempFileCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tempDir">一時ファイルを格納するために使用する一時ディレクトリへのパス。</param>
      <param name="keepFiles">使用後も一時ファイルを保持する場合は <see langword="true" />。一時ファイルを削除する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>指定したファイル名拡張子を持つファイル名をコレクションに追加します。</summary>
      <param name="fileExtension">コレクションに追加するための、自動生成される一時ファイル名のファイル名拡張子。</param>
      <returns>コレクションに追加された、指定した拡張子を持つファイル名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>ファイルを削除するかまたは保持するかを示す指定した値を使用して、指定したファイル名拡張子を持つファイル名をコレクションに追加します。</summary>
      <param name="fileExtension">コレクションに追加するための、自動生成される一時ファイル名のファイル名拡張子。</param>
      <param name="keepFile">使用後もファイルを保持する場合は <see langword="true" />。ファイルを削除する場合は <see langword="false" />。</param>
      <returns>コレクションに追加された、指定した拡張子を持つファイル名。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> は、<see langword="null" /> または空の文字列です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>コレクションが破棄された後、または <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> メソッドが呼び出された場合にファイルを保持するかどうかを示す指定値を使用して、指定したファイルをコレクションに追加します。</summary>
      <param name="fileName">コレクションに追加するファイルの名前。</param>
      <param name="keepFile">使用後もファイルを保持する場合は <see langword="true" />。ファイルを削除する場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> は、<see langword="null" /> または空の文字列です。  
または 
 <paramref name="fileName" /> は重複しています。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>コレクションの一時ファイル名を生成するために使用される、一時ディレクトリ パス上の (ファイル名拡張子を除いた) ベース ファイル名へのフル パスを取得します。</summary>
      <returns>コレクションの一時ファイル名を生成するために使用される、一時ディレクトリ パス上の (ファイル名拡張子を除いた) ベース ファイル名へのフル パス。</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> プロパティが設定されていないか <see langword="null" /> に設定されている場合、および <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> プロパティで示される一時ディレクトリに対して <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> が与えられていない場合。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>指定した文字列に、指定したインデックス位置からコレクションのメンバーをコピーします。</summary>
      <param name="fileNames">コピー先の文字列の配列。</param>
      <param name="start">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>コレクション内のファイルの数を取得します。</summary>
      <returns>コレクション内のファイルの数。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>このコレクション内の、保持する必要があるとマークされていなかった一時ファイルを削除します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>ガベージ コレクションがこのオブジェクトをクリアする前に一時ファイルの削除を試みます。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>コレクションのメンバーを列挙できる列挙子を取得します。</summary>
      <returns>コレクションのメンバーを格納する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>
        <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> メソッドが呼び出されたとき、またはコレクションが破棄されたときに、既定で、ファイルを保持するのかどうかを指定する値を取得または設定します。</summary>
      <returns>ファイルを保持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>コレクションの要素を配列にコピーします。コピー操作は、コピー先配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="start">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>コレクションに格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>一時ファイルの格納場所である一時ディレクトリを取得します。</summary>
      <returns>一時ファイルの格納場所である一時ディレクトリ。</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>パラメーターの方向および引数宣言を示すために使用する識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>in フィールド。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>out フィールド。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>参照渡しフィールド。</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>クラス メンバーのメンバー属性識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>抽象メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>アクセス マスク。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>同じアセンブリ内の任意のクラスにアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>定数メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>クラスと派生クラスのファミリ内にアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>クラス内および同じアセンブリの派生クラスにアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>クラス内、任意のアセンブリの派生クラス、および同じアセンブリの任意のクラスにアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>派生クラスでオーバーライドできないメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>新規メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>オーバーロードされたメンバー。 Visual Basic などの一部の言語では、オーバーロードされたメンバーを明示的に示す必要があります。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>基本クラス メンバーをオーバーライドするメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>プライベート メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>パブリック メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>スコープ マスク。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>静的メンバー。 このメンバーは、Visual Basic の <see langword="Shared" /> キーワードと等価です。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>VTable マスク。</summary>
    </member>
  </members>
</doc>
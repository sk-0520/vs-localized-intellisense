<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>Обеспечивает поддержку альтернативных методов создания MSIL и метаданных для динамического метода, включая методы создания токенов и вставки кода, обработки исключений и больших двоичных объектов подписи локальных переменных.</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>Возвращает динамический метод, основной текст которого создан текущим экземпляром.</summary>
      <returns>Объект <see cref="T:System.Reflection.Emit.DynamicMethod" />, представляющий динамический метод, для которого текущий объект <see cref="T:System.Reflection.Emit.DynamicILInfo" /> создает код.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего подпись для связанного динамического метода.</summary>
      <param name="signature">Массив, содержащий сигнатуру.</param>
      <returns>токен, который может быть внедрен в метаданные и поток MSIL для связанного динамического метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего динамический метод, который должен быть вызван из связанного метода.</summary>
      <param name="method">Вызываемый динамический метод.</param>
      <returns>токен, который может быть встроен в поток MSIL для связанного динамического метода в качестве назначения инструкции MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего поле, к которому должен быть предоставлен доступ из связанного динамического метода.</summary>
      <param name="field">Поле для доступа.</param>
      <returns>токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к полям, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Получает токен, допустимый в области текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего поле, к которому должен быть предоставлен доступ из связанного динамического метода; поле относится к указанному универсальному типу.</summary>
      <param name="field">Поле для доступа.</param>
      <param name="contextType">Универсальный тип, к которому относится поле.</param>
      <returns>Токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к полям в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего метод, к которому должен быть предоставлен доступ из связанного динамического метода.</summary>
      <param name="method">Метод для доступа.</param>
      <returns>токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к методам, таким как <see cref="F:System.Reflection.Emit.OpCodes.Call" /> или <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Возвращает токен, допустимый в области действия текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего метод в универсальном типе.</summary>
      <param name="method">Метод.</param>
      <param name="contextType">Универсальный тип, к которому принадлежит метод.</param>
      <returns>токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к методам, таким как <see cref="F:System.Reflection.Emit.OpCodes.Call" /> или <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего тип, который будет использоваться в связанном динамическом методе.</summary>
      <param name="type">Используемый тип.</param>
      <returns>токен, который может быть использован в качестве операнда инструкции MSIL, нуждающейся в типе, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего строковый литерал, который будет использоваться в связанном динамическом методе.</summary>
      <param name="literal">Используемая строка.</param>
      <returns>токен, который может быть использован в качестве операнда инструкции MSIL, нуждающейся в строке, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>Задает основной текст кода связанного динамического метода.</summary>
      <param name="code">Указатель на массив байтов, в котором содержится поток MSIL.</param>
      <param name="codeSize">Возвращает число байтов потока MSIL.</param>
      <param name="maxStackSize">Максимальное количество элементов в стеке операторов при выполнении метода.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> равно <see langword="null" />, а <paramref name="codeSize" /> больше 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="codeSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>Задает основной текст кода связанного динамического метода.</summary>
      <param name="code">Массив, который содержит поток MSIL.</param>
      <param name="maxStackSize">Максимальное количество элементов в стеке операторов при выполнении метода.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>Задает метаданные исключения для связанного динамического метода.</summary>
      <param name="exceptions">Указатель на массив байтов, содержащий метаданные исключения.</param>
      <param name="exceptionsSize">Количество байтов в метаданных исключения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> равно <see langword="null" />, а <paramref name="exceptionSize" /> больше 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="exceptionSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>Задает метаданные исключения для связанного динамического метода.</summary>
      <param name="exceptions">Массив, в котором содержатся метаданные исключения.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода.</summary>
      <param name="localSignature">Массив, содержащий структуру локальных переменных для связанного метода <see cref="T:System.Reflection.Emit.DynamicMethod" />.</param>
      <param name="signatureSize">Число байтов в подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> равно <see langword="null" />, а <paramref name="signatureSize" /> больше 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="signatureSize" /> меньше 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода.</summary>
      <param name="localSignature">Массив, содержащий структуру локальных переменных для связанного метода <see cref="T:System.Reflection.Emit.DynamicMethod" />.</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Определяет и представляет динамический метод, который можно скомпилировать, выполнить и удалить. Удаленные методы доступны для сборки мусора.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Создает динамический метод, который является глобальным для модуля, указывая имя метода, атрибуты, соглашение о вызовах, тип возвращаемого значения, типы параметров, модуль и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ промежуточный язык Майкрософт (MSIL) динамического метода.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="attributes">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, определяющая атрибуты динамического метода. Разрешена только комбинация <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Соглашение о вызовах для динамического метода. Должно иметь значение <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="m">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</param>
      <param name="skipVisibility">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="m" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> представляет собой сочетание флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.
-или-
<paramref name="callingConvention" /> не является <see cref="F:System.Reflection.CallingConventions.Standard" />.
-или-
<paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Создает динамический метод, указывая имя метода, атрибуты, соглашение о вызовах, тип возвращаемого значения, типы параметров, тип, с которым логически связан динамический метод, и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ промежуточный язык Майкрософт (MSIL) динамического метода.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="attributes">Битовая комбинация значений <see cref="T:System.Reflection.MethodAttributes" />, определяющая атрибуты динамического метода. Разрешена только комбинация <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Соглашение о вызовах для динамического метода. Должно иметь значение <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="owner">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод. Динамический метод имеет доступ ко всем членам типа.</param>
      <param name="skipVisibility">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> представляет собой сочетание флагов, отличных от <see cref="F:System.Reflection.MethodAttributes.Public" /> и <see cref="F:System.Reflection.MethodAttributes.Static" />.
-или-
<paramref name="callingConvention" /> не является <see cref="F:System.Reflection.CallingConventions.Standard" />.
-или-
<paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Инициализирует анонимно размещенный динамический метод, указывая имя метода, тип возвращаемого значения и типы параметров.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Инициализирует анонимно размещенный динамический метод, указывая имя метода, возвращаемый тип, типы параметров и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="restrictedSkipVisibility">
        <see langword="true" /> — пропускает проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода, с таким ограничением: уровень доверия сборок, содержащих эти типы и члены, должен быть равен уровню доверия стека вызовов, создающего динамический метод, или меньше его. В противном случае — <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Создает динамический метод, который является глобальным по отношению к модулю, используя имя метода, тип возвращаемого значения, типы параметров и модуль.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="m">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="m" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Создает динамический метод, который является глобальным для модуля, указывая имя метода, возвращаемый тип, типы параметров, модуль и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="m">Объект <see cref="T:System.Reflection.Module" />, представляющий модуль, с которым должен быть логически связан динамический метод.</param>
      <param name="skipVisibility">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="m" /> — это модуль, предоставляющий анонимное размещение для динамических методов.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="m" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> — это тип, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Создает динамический метод, указывая имя метода, возвращаемый тип, типы параметров и тип, с которым логически связан динамический метод.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="owner">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод. Динамический метод имеет доступ ко всем членам типа.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> имеет значение <see langword="null" /> или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Создает динамический метод, указывая имя метода, тип возвращаемого значения, типы параметров, тип, с которым логически связан динамический метод, и необходимость пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода.</summary>
      <param name="name">Имя динамического метода. Это может быть строка нулевой длины, но не <see langword="null" />.</param>
      <param name="returnType">Объект <see cref="T:System.Type" />, который указывает возвращаемый тип динамического метода, или значение <see langword="null" />, если метод не имеет возвращаемого типа.</param>
      <param name="parameterTypes">Массив объектов <see cref="T:System.Type" />, указывающих типы параметров динамического метода, или значение <see langword="null" />, если метод не имеет параметров.</param>
      <param name="owner">Тип <see cref="T:System.Type" />, с которым логически связан динамический метод. Динамический метод имеет доступ ко всем членам типа.</param>
      <param name="skipVisibility">Значение <see langword="true" /> для пропуска проверки видимости JIT для типов и членов, к которым получает доступ MSIL динамического метода; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="parameterTypes" /> имеет значение <see langword="null" /> или <see cref="T:System.Void" />.
-или-
<paramref name="owner" /> является интерфейсом, массивом, открытым универсальным типом или параметром универсального типа или метода.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="name" /> имеет значение <see langword="null" />.
-или-
Свойство <paramref name="owner" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> имеет значение <see langword="null" /> или является типом, для которого <see cref="P:System.Type.IsByRef" /> возвращает <see langword="true" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Возвращает атрибуты, указанные при создании динамического метода.</summary>
      <returns>Побитовое сочетание значений <see cref="T:System.Reflection.MethodAttributes" />, представляющее атрибуты для метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Получает соглашение о вызовах, указанное при создании динамического метода.</summary>
      <returns>Одно из значений <see cref="T:System.Reflection.CallingConventions" />, указывающее соглашение о вызовах метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Завершает динамический метод и создает делегата, который может использоваться для его выполнения.</summary>
      <param name="delegateType">Тип делегата, подпись которого совпадает с подписью динамического метода.</param>
      <returns>Делегат указанного типа, который может использоваться для выполнения динамического метода.</returns>
      <exception cref="T:System.InvalidOperationException">У динамического метода отсутствует тело метода.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> имеет неверное число параметров или неправильные типы параметров.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Завершает динамический метод и создает делегат, который может использоваться для его выполнения, указывая тип делегата и объект, к которому привязан делегат.</summary>
      <param name="delegateType">Тип делегата, подпись которого совпадает с подписью динамического метода минус первый параметр.</param>
      <param name="target">Объект, к которому привязан делегат. Должен быть того же типа, что и первый параметр динамического метода.</param>
      <returns>Делегат указанного типа, который может использоваться для выполнения динамического метода с указанным целевым объектом.</returns>
      <exception cref="T:System.InvalidOperationException">У динамического метода отсутствует тело метода.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> не относится к тому же типу, что и первый параметр динамического метода, и не может быть назначен этому типу.
-или-
<paramref name="delegateType" /> имеет неверное число параметров или неправильные типы параметров.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Возвращает тип, который объявляет метод, всегда являющийся <see langword="null" /> для динамических методов.</summary>
      <returns>Всегда <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Определяет параметр динамического метода.</summary>
      <param name="position">Позиция параметра в списке параметров. Параметры индексируются, начиная с номера 1 для первого параметра.</param>
      <param name="attributes">Битовая комбинация значений <see cref="T:System.Reflection.ParameterAttributes" />, определяющая атрибуты параметра.</param>
      <param name="parameterName">Имя параметра. Имя может быть строкой нулевой длины.</param>
      <returns>Всегда возвращает значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Метод не имеет параметров.
-или-
Значение параметра <paramref name="position" /> меньше 0.
-или-
<paramref name="position" /> превышает число параметров метода.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>Возвращает базовую реализацию метода.</summary>
      <returns>Базовая реализация метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>Возвращает все настраиваемые атрибуты, определенные для метода.</summary>
      <param name="inherit">
        <see langword="true" /> для поиска цепочки наследования метода для обнаружения настраиваемых атрибутов; <see langword="false" /> для проверки только текущего метода.</param>
      <returns>Массив объектов, представляющих все настраиваемые атрибуты метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Возвращает настраиваемые атрибуты заданного типа, которые были применены к методу.</summary>
      <param name="attributeType">
        <see cref="T:System.Type" />, представляющий тип возвращаемого настраиваемого атрибута.</param>
      <param name="inherit">
        <see langword="true" /> для поиска цепочки наследования метода для обнаружения настраиваемых атрибутов; <see langword="false" /> для проверки только текущего метода.</param>
      <returns>Массив объектов, представляющих атрибуты метода, которые относятся к типу <paramref name="attributeType" /> или являются производными от типа <paramref name="attributeType" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="attributeType" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>Возвращает объект <see cref="T:System.Reflection.Emit.DynamicILInfo" />, который может использоваться для создания тела метода из маркеров метаданных, областей и потоков промежуточного языка Майкрософт (MSIL).</summary>
      <returns>Объект <see cref="T:System.Reflection.Emit.DynamicILInfo" />, который может использоваться для создания тела метода из маркеров метаданных, областей и потоков MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Возвращает генератор MSIL для этого метода с размером потока MSIL, по умолчанию равным 64 байтам.</summary>
      <returns>Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Возвращает генератор промежуточного языка Майкрософт (MSIL) для этого метода с указанным размером потока MSIL.</summary>
      <param name="streamSize">Размер потока MSIL (в байтах).</param>
      <returns>Объект <see cref="T:System.Reflection.Emit.ILGenerator" /> для метода с указанным размером потока MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>Возвращает флаги реализации для метода.</summary>
      <returns>Битовая комбинация значений <see cref="T:System.Reflection.MethodImplAttributes" />, представляющая флаги реализации для метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Возвращает параметры динамического метода.</summary>
      <returns>Массив объектов <see cref="T:System.Reflection.ParameterInfo" />, которые представляют параметры динамического метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Возвращает или задает значение, указывающее, инициализированы ли локальные переменные в методе нулевым значением.</summary>
      <returns>Значение <see langword="true" />, если локальные переменные в методе инициализированы нулевым значением; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Вызывает динамический метод, используя указанные параметры и учитывая ограничения заданного модуля привязки и указанные сведения о языке и региональных параметрах.</summary>
      <param name="obj">Эти параметры игнорируются для динамических методов, поскольку они являются статическими. Задайте имя <see langword="null" />.</param>
      <param name="invokeAttr">Побитовое сочетание значений <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">Объект <see cref="T:System.Reflection.Binder" />, который допускает привязку, приведение типов аргументов, вызов элементов и извлечение объектов <see cref="T:System.Reflection.MemberInfo" /> путем отражения. Если значение параметра <paramref name="binder" /> равно <see langword="null" />, используется связыватель по умолчанию. Дополнительные сведения см. в разделе <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">Список аргументов. Это массив аргументов с тем же числом, порядком и типом, что и параметры вызываемого метода. Если параметров нет, этот параметр должен иметь значение <see langword="null" />.</param>
      <param name="culture">Экземпляр объекта <see cref="T:System.Globalization.CultureInfo" />, используемого для управления приведением типов. Если значение этого объекта — <see langword="null" />, для текущего потока используется <see cref="T:System.Globalization.CultureInfo" />. Например, эти сведения необходимы для правильного преобразовывая объекта <see cref="T:System.String" />, представляющего 1000, в значение <see cref="T:System.Double" />, поскольку в разных языках и региональных параметрах 1000 представляется по-разному.</param>
      <returns>Объект <see cref="T:System.Object" />, содержащий возвращаемое значение вызванного метода.</returns>
      <exception cref="T:System.NotSupportedException">Соглашение о вызовах <see cref="F:System.Reflection.CallingConventions.VarArgs" /> не поддерживается.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">Число элементов в <paramref name="parameters" /> не соответствует числу параметров в динамическом методе.</exception>
      <exception cref="T:System.ArgumentException">Тип одного или нескольких элементов <paramref name="parameters" /> не соответствует типу соответствующего параметра динамического метода.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Динамический метод связан с модулем, не размещен анонимно и был создан с параметром <paramref name="skipVisibility" />, для которого задано значение <see langword="false" />, однако он получает доступ к членам, которые не имеют тип <see langword="public" /> или <see langword="internal" /> (<see langword="Friend" /> в Visual Basic).
-или-
Динамический метод размещен анонимно и был создан с параметром <paramref name="skipVisibility" />, для которого задано значение <see langword="false" />, однако он получает доступ к членам, которые не имеют тип <see langword="public" />.
-или-
Динамический метод содержит непроверяемый код. См. подраздел "Проверка" в разделе примечаний для <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Указывает, определен ли заданный тип настраиваемых атрибутов.</summary>
      <param name="attributeType">
        <see cref="T:System.Type" />, представляющий тип искомого настраиваемого атрибута.</param>
      <param name="inherit">
        <see langword="true" /> для поиска цепочки наследования метода для обнаружения настраиваемых атрибутов; <see langword="false" /> для проверки только текущего метода.</param>
      <returns>Значение <see langword="true" />, если заданный тип настраиваемых атрибутов определен; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>Получает значение, которое указывает, является ли текущий динамический метод критическим с точки зрения безопасности или надежным с точки зрения безопасности и, следовательно, может ли он выполнять важные операции.</summary>
      <returns>Значение <see langword="true" />, если текущий динамический метод является критическим с точки зрения безопасности или надежным с точки зрения безопасности; значение <see langword="false" />, если он является прозрачным.</returns>
      <exception cref="T:System.InvalidOperationException">В этом динамическом методе отсутствует тело метода.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>Возвращает значение, которое указывает, является ли текущий динамический метод надежным с точки зрения безопасности на текущем уровне доверия и, следовательно, может ли он выполнять критически важные операции и предоставлять доступ прозрачному коду.</summary>
      <returns>Значение <see langword="true" />, если динамический метод надежен с точки зрения безопасности на текущем уровне доверия; значение <see langword="false" />, если он является критическим с точки зрения безопасности или прозрачным.</returns>
      <exception cref="T:System.InvalidOperationException">В этом динамическом методе отсутствует тело метода.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>Получает значение, которое указывает, является ли текущий динамический метод прозрачным на текущем уровне доверия и, следовательно, не может выполнять критические операции.</summary>
      <returns>Значение <see langword="true" />, если этот динамический метод является прозрачным на текущем уровне доверия; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">В этом динамическом методе отсутствует тело метода.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>Не поддерживается для динамических методов.</summary>
      <returns>Не поддерживается для динамических методов.</returns>
      <exception cref="T:System.InvalidOperationException">Не разрешено для динамических методов.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>Возвращает модуль, с которым логически связан динамический метод.</summary>
      <returns>Модуль <see cref="T:System.Reflection.Module" />, с которым связан текущий динамический метод.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Получает имя динамического метода.</summary>
      <returns>Простое имя метода.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>Возвращает класс, который использовался в отражении для получения метода.</summary>
      <returns>Всегда <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Возвращает выходной параметр динамического метода.</summary>
      <returns>Всегда <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Получает тип возвращаемого значения для динамического метода.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип возвращаемого значения текущего метода; значение <see cref="T:System.Void" />, если метод не имеет возвращаемого типа.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>Получает настраиваемые атрибуты типа возвращаемого значения для динамического метода.</summary>
      <returns>Объект <see cref="T:System.Reflection.ICustomAttributeProvider" />, представляющий настраиваемые атрибуты возвращаемого типа для динамического метода.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Возвращает сигнатуру метода, представленную в виде строки.</summary>
      <returns>Строка, представляющая сигнатуру метода.</returns>
    </member>
  </members>
</doc>
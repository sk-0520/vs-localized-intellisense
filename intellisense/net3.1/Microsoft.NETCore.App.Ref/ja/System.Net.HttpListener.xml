<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.HttpListener</name>
  </assembly>
  <members>
    <member name="T:System.Net.AuthenticationSchemeSelector">
      <summary>
        <see cref="T:System.Net.HttpListener" /> インスタンスの認証方式を選択します。</summary>
      <param name="httpRequest">認証方式の選択対象となる <see cref="T:System.Net.HttpListenerRequest" /> インスタンス。</param>
      <returns>指定したクライアント要求に使用する認証のメソッドを示す <see cref="T:System.Net.AuthenticationSchemes" /> 値の 1 つ。</returns>
    </member>
    <member name="T:System.Net.HttpListener">
      <summary>単純で、プログラムによって制御できる HTTP プロトコル リスナーを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Net.HttpListener.#ctor">
      <summary>
        <see cref="T:System.Net.HttpListener" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.PlatformNotSupportedException">このクラスは、現在のオペレーティング システムでは使用できません。 このクラスのインスタンスを使用するには、Windows Server 2003 または Windows XP SP2 以降が必要です。</exception>
    </member>
    <member name="M:System.Net.HttpListener.Abort">
      <summary>すぐに <see cref="T:System.Net.HttpListener" /> オブジェクトをシャットダウンし、現在キューに置かれているすべての要求を破棄します。</summary>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemes">
      <summary>クライアントの認証に使用する方式を取得または設定します。</summary>
      <returns>クライアントの認証方法を示す <see cref="T:System.Net.AuthenticationSchemes" /> 列挙値のビットごとの組み合わせ。 既定値は <see cref="F:System.Net.AuthenticationSchemes.Anonymous" /> です。</returns>
      <exception cref="T:System.ObjectDisposedException">このオブジェクトは閉じられました。</exception>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate">
      <summary>クライアントの認証に使用するプロトコルを確認するために呼び出されるデリゲートを取得または設定します。</summary>
      <returns>認証プロトコルの選択に使用されるメソッドを呼び出す <see cref="T:System.Net.AuthenticationSchemeSelector" /> デリゲート。 既定値は <see langword="null" /> です。</returns>
      <exception cref="T:System.ObjectDisposedException">このオブジェクトは閉じられました。</exception>
    </member>
    <member name="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
      <summary>受信要求の非同期の取得を開始します。</summary>
      <param name="callback">クライアント要求が使用可能なときに呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">操作に関する情報を格納するユーザー定義のオブジェクト。 このオブジェクトは、操作の完了時に <paramref name="callback" /> デリゲートに渡されます。</param>
      <returns>非同期操作のステータスを示す <see cref="T:System.IAsyncResult" /> オブジェクト。</returns>
      <exception cref="T:System.Net.HttpListenerException">Win32 関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</exception>
      <exception cref="T:System.InvalidOperationException">このオブジェクトが開始されていないか、現在停止されています。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="M:System.Net.HttpListener.Close">
      <summary>
        <see cref="T:System.Net.HttpListener" /> をシャットダウンします。</summary>
    </member>
    <member name="P:System.Net.HttpListener.DefaultServiceNames">
      <summary>登録済みプレフィックスによって決定される既定のサービス プロバイダー名 (SPN: Service Provider Name) の一覧を取得します。</summary>
      <returns>SPN の一覧を格納している <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</returns>
    </member>
    <member name="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)">
      <summary>受信クライアント要求を取得する非同期操作を完了します。</summary>
      <param name="asyncResult">非同期操作の開始時に取得した <see cref="T:System.IAsyncResult" /> オブジェクト。</param>
      <returns>クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> を <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> メソッドの呼び出しで取得できませんでした。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.HttpListenerException">Win32 関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> メソッドは、既に指定された <paramref name="asyncResult" /> オブジェクトに対して呼び出されています。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListener.ExtendedProtectionPolicy">
      <summary>セッションの拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> を取得または設定します。</summary>
      <returns>拡張保護に使用するポリシーを指定する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> プロパティを設定しようとしましたが、<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> プロパティは <see langword="null" /> ではありませんでした。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> プロパティを <see langword="null" /> に設定しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> メソッドを呼び出した後で <see cref="M:System.Net.HttpListener.Start" /> プロパティを設定しようとしました。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> プロパティが、拡張保護をサポートしていないプラットフォーム上で <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</exception>
    </member>
    <member name="T:System.Net.HttpListener.ExtendedProtectionSelector">
      <summary>各 <see cref="T:System.Net.HttpListener" /> 要求に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> を決定するために呼び出されるデリゲートです。</summary>
      <param name="request">
        <see cref="T:System.Net.HttpListener" /> インスタンスが拡張保護の提供に使用する拡張保護ポリシーを決定するための <see cref="T:System.Net.HttpListenerRequest" />。</param>
      <returns>この要求に使用する拡張保護ポリシーを指定する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate">
      <summary>各要求に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> を決定するために呼び出すデリゲートを取得または設定します。</summary>
      <returns>拡張保護に使用するポリシーを指定する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティを設定しようとしましたが、<see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> プロパティが <see langword="null" /> である必要があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティを <see langword="null" /> に設定しようとしました。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> メソッドを呼び出した後で <see cref="M:System.Net.HttpListener.Start" /> プロパティを設定しようとしました。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
      <exception cref="T:System.PlatformNotSupportedException">拡張保護をサポートしていないプラットフォームで <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> プロパティを設定しようとしました。</exception>
    </member>
    <member name="M:System.Net.HttpListener.GetContext">
      <summary>受信要求を待機し、受信するとその要求を返します。</summary>
      <returns>クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクト。</returns>
      <exception cref="T:System.Net.HttpListenerException">Win32 関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</exception>
      <exception cref="T:System.InvalidOperationException">このオブジェクトが開始されていないか、現在停止されています。
または
<see cref="T:System.Net.HttpListener" /> に、応答対象の URI (Uniform Resource Identifier) がありません。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="M:System.Net.HttpListener.GetContextAsync">
      <summary>非同期操作として受信要求を待ちます。</summary>
      <returns>非同期操作を表すタスク オブジェクト。 タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、クライアント要求を表す <see cref="T:System.Net.HttpListenerContext" /> オブジェクトを返します。</returns>
    </member>
    <member name="P:System.Net.HttpListener.IgnoreWriteExceptions">
      <summary>
        <see cref="T:System.Boolean" /> がクライアントに応答を送信したときに発生する例外をアプリケーションで受信するかどうかを指定する <see cref="T:System.Net.HttpListener" /> 値を取得または設定します。</summary>
      <returns>この <see cref="T:System.Net.HttpListener" /> がクライアントに応答を送信したときに発生する例外を返さない場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。 既定値は <see langword="false" /> です。</returns>
      <exception cref="T:System.ObjectDisposedException">このオブジェクトは閉じられました。</exception>
    </member>
    <member name="P:System.Net.HttpListener.IsListening">
      <summary>
        <see cref="T:System.Net.HttpListener" /> が開始されているかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が開始されている場合は <see cref="T:System.Net.HttpListener" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListener.IsSupported">
      <summary>現在のオペレーティング システムで <see cref="T:System.Net.HttpListener" /> を使用できるかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> がサポートされている場合は <see cref="T:System.Net.HttpListener" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListener.Prefixes">
      <summary>この <see cref="T:System.Net.HttpListener" /> オブジェクトによって処理される URI (Uniform Resource Identifier) プレフィックスを取得します。</summary>
      <returns>この <see cref="T:System.Net.HttpListenerPrefixCollection" /> オブジェクトで処理するように構成されている URI プレフィックスが格納された <see cref="T:System.Net.HttpListener" />。</returns>
      <exception cref="T:System.ObjectDisposedException">このオブジェクトは閉じられました。</exception>
    </member>
    <member name="P:System.Net.HttpListener.Realm">
      <summary>この <see cref="T:System.Net.HttpListener" /> オブジェクトに関連付けられているレルム (リソース パーティション) を取得または設定します。</summary>
      <returns>
        <see cref="T:System.String" /> オブジェクトに関連付けられているレルムの名前が格納された <see cref="T:System.Net.HttpListener" /> 値。</returns>
      <exception cref="T:System.ObjectDisposedException">このオブジェクトは閉じられました。</exception>
    </member>
    <member name="M:System.Net.HttpListener.Start">
      <summary>このインスタンスが受信要求を受信できるようにします。</summary>
      <exception cref="T:System.Net.HttpListenerException">Win32 関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="M:System.Net.HttpListener.Stop">
      <summary>このインスタンスの受信要求の受信を停止します。</summary>
      <exception cref="T:System.ObjectDisposedException">このオブジェクトは閉じられました。</exception>
    </member>
    <member name="M:System.Net.HttpListener.System#IDisposable#Dispose">
      <summary>この <see cref="T:System.Net.HttpListener" /> オブジェクトに保持されているリソースを解放します。</summary>
    </member>
    <member name="P:System.Net.HttpListener.TimeoutManager">
      <summary>この <see cref="T:System.Net.HttpListener" /> インスタンスのタイムアウト マネージャーです。</summary>
      <returns>この <see cref="T:System.Net.HttpListener" /> インスタンスのタイムアウト マネージャーです。</returns>
    </member>
    <member name="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
      <summary>NTLM が使用されているときに、同じ TCP (Transmission Control Protocol) 接続を使用した別の要求を認証する必要があるかどうかを制御する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
      <returns>最初の要求の <see langword="true" /> が同じ接続でなされる後続の要求に使用される場合は <see cref="T:System.Security.Principal.IIdentity" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
      <exception cref="T:System.ObjectDisposedException">このオブジェクトは閉じられました。</exception>
    </member>
    <member name="T:System.Net.HttpListenerBasicIdentity">
      <summary>基本認証要求から取得したユーザー名とパスワードを保持します。</summary>
    </member>
    <member name="M:System.Net.HttpListenerBasicIdentity.#ctor(System.String,System.String)">
      <summary>指定したユーザー名とパスワードを使用して、<see cref="T:System.Net.HttpListenerBasicIdentity" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="username">ユーザー名。</param>
      <param name="password">パスワード。</param>
    </member>
    <member name="P:System.Net.HttpListenerBasicIdentity.Password">
      <summary>基本認証の試行から取得したパスワードを示します。</summary>
      <returns>パスワードを保持する <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Net.HttpListenerContext">
      <summary>
        <see cref="T:System.Net.HttpListener" /> クラスで使用される要求オブジェクトと応答オブジェクトへのアクセスを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
      <summary>WebSocket 接続を非同期操作として受け入れます。</summary>
      <param name="subProtocol">サポートされる WebSocket サブプロトコル。</param>
      <returns>非同期操作を表すタスク オブジェクト。 タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> が空の文字列です。

または -
<paramref name="subProtocol" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
      <summary>サポートされている WebSocket サブプロトコル受信バッファー サイズと WebSocket のキープアライブ間隔を指定する WebSocket 接続を、非同期操作として受け入れます。</summary>
      <param name="subProtocol">サポートされる WebSocket サブプロトコル。</param>
      <param name="receiveBufferSize">受信バッファーのサイズ (バイト単位)。</param>
      <param name="keepAliveInterval">WebSocket プロトコルのミリ秒単位での keep-alive 間隔。</param>
      <returns>非同期操作を表すタスク オブジェクト。 タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> が空の文字列です。
または
<paramref name="subProtocol" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keepAliveInterval" /> が小さすぎます。

または -
<paramref name="receiveBufferSize" /> が 16 バイト未満です
または -
<paramref name="receiveBufferSize" /> が 64K バイトを超えています。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
      <summary>サポートされている WebSocket サブプロトコル受信バッファー サイズ、WebSocket のキープアライブ間隔、内部バッファーを指定する WebSocket 接続を、非同期操作として受け入れます。</summary>
      <param name="subProtocol">サポートされる WebSocket サブプロトコル。</param>
      <param name="receiveBufferSize">受信バッファーのサイズ (バイト単位)。</param>
      <param name="keepAliveInterval">WebSocket プロトコルのミリ秒単位での keep-alive 間隔。</param>
      <param name="internalBuffer">この操作で使用する内部バッファー。</param>
      <returns>非同期操作を表すタスク オブジェクト。 タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> が空の文字列です。

または -
<paramref name="subProtocol" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keepAliveInterval" /> が小さすぎます。

または -
<paramref name="receiveBufferSize" /> が 16 バイト未満です
または
<paramref name="receiveBufferSize" /> が 64K バイトを超えています。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
      <summary>サポートされている WebSocket サブプロトコルと WebSocket のキープアライブ間隔を指定する WebSocket 接続を、非同期操作として受け入れます。</summary>
      <param name="subProtocol">サポートされる WebSocket サブプロトコル。</param>
      <param name="keepAliveInterval">WebSocket プロトコルのミリ秒単位での keep-alive 間隔。</param>
      <returns>非同期操作を表すタスク オブジェクト。 タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、<see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> オブジェクトを返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> が空の文字列です。

または -
<paramref name="subProtocol" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keepAliveInterval" /> が小さすぎます。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">WebSocket ハンドシェイクを完了するために応答を送信中にエラーが発生しました。</exception>
    </member>
    <member name="P:System.Net.HttpListenerContext.Request">
      <summary>クライアントのリソース要求を表す <see cref="T:System.Net.HttpListenerRequest" /> を取得します。</summary>
      <returns>クライアント要求を表す <see cref="T:System.Net.HttpListenerRequest" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.Response">
      <summary>クライアントの要求に応答してクライアントに送信される <see cref="T:System.Net.HttpListenerResponse" /> オブジェクトを取得します。</summary>
      <returns>クライアントに応答を送り返すために使用する <see cref="T:System.Net.HttpListenerResponse" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.User">
      <summary>要求が <see cref="T:System.Net.HttpListenerContext" /> オブジェクトによって表されるクライアントの ID、認証情報、セキュリティ ロールを取得するために使用するオブジェクトを取得します。</summary>
      <returns>クライアントを記述する <see cref="T:System.Security.Principal.IPrincipal" /> オブジェクト。この <see cref="T:System.Net.HttpListener" /> を提供した <see cref="T:System.Net.HttpListenerContext" /> が認証を必要としない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Net.HttpListenerException">
      <summary>HTTP 要求の処理中にエラーが発生するとスローされる例外。</summary>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor">
      <summary>
        <see cref="T:System.Net.HttpListenerException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32)">
      <summary>指定したエラー コードを使用して、<see cref="T:System.Net.HttpListenerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="errorCode">発生したエラーを識別する <see cref="T:System.Int32" /> 値。</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32,System.String)">
      <summary>指定したエラー コードおよびメッセージを使用して、<see cref="T:System.Net.HttpListenerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="errorCode">発生したエラーを識別する <see cref="T:System.Int32" /> 値。</param>
      <param name="message">発生したエラーを説明する <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスと <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの指定したインスタンスから、<see cref="T:System.Net.HttpListenerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを逆シリアル化するために必要な情報を格納する <see cref="T:System.Net.HttpListenerException" /> オブジェクト。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="P:System.Net.HttpListenerException.ErrorCode">
      <summary>発生したエラーを識別する値を取得します。</summary>
      <returns>
        <see cref="T:System.Int32" /> 値。</returns>
    </member>
    <member name="T:System.Net.HttpListenerPrefixCollection">
      <summary>
        <see cref="T:System.Net.HttpListener" /> オブジェクトの URI (Uniform Resource Identifier) プレフィックスの格納に使用するコレクションを表します。</summary>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Add(System.String)">
      <summary>URI (Uniform Resource Identifier) プレフィックスをコレクションに追加します。</summary>
      <param name="uriPrefix">受信要求で比較される URI 情報を識別する <see cref="T:System.String" />。 プレフィックスは、スラッシュ ("/") で終了する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriPrefix" /> が、http:// または https:// スキームを使用していません。 <see cref="T:System.Net.HttpListener" /> オブジェクトでは、これらのスキームのみがサポートされています。
または
<paramref name="uriPrefix" /> が、正しい書式の URI プレフィックスではありません。 文字列が "/" で終わっていることを確認してください。</exception>
      <exception cref="T:System.ObjectDisposedException">このコレクションに関連付けられている <see cref="T:System.Net.HttpListener" /> は閉じています。</exception>
      <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。 この例外は、別の <see cref="T:System.Net.HttpListener" /> が既にプレフィックス <paramref name="uriPrefix" /> を追加している場合にスローされます。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Clear">
      <summary>コレクションからすべての URI プレフィックスを削除します。</summary>
      <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</exception>
      <exception cref="T:System.ObjectDisposedException">このコレクションに関連付けられている <see cref="T:System.Net.HttpListener" /> は閉じています。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Contains(System.String)">
      <summary>指定したプレフィックスがコレクションに含まれているかどうかを示す <see cref="T:System.Boolean" /> 値を返します。</summary>
      <param name="uriPrefix">テストする Uniform Resource Identifier (URI) プレフィックスを格納している <see cref="T:System.String" />。</param>
      <returns>このコレクションに <paramref name="uriPrefix" /> で指定したプレフィックスが存在する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定した配列に <see cref="T:System.Net.HttpListenerPrefixCollection" /> の内容をコピーします。</summary>
      <param name="array">このコレクション内の URI プレフィックス文字列を受け取る、1 次元の <see cref="T:System.Array" />。</param>
      <param name="offset">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> の次元が 2 次元以上です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">このコレクションには、<paramref name="offset" /> から始まる <paramref name="array" /> に格納できる数以上の要素が格納されています。</exception>
      <exception cref="T:System.ObjectDisposedException">このコレクションに関連付けられている <see cref="T:System.Net.HttpListener" /> は閉じています。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="array" /> には文字列値を格納できません。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
      <summary>指定した文字列配列に <see cref="T:System.Net.HttpListenerPrefixCollection" /> の内容をコピーします。</summary>
      <param name="array">このコレクション内の URI プレフィックス文字列を受け取る 1 次元文字列配列。</param>
      <param name="offset">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> の次元が 2 次元以上です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">このコレクションには、<paramref name="offset" /> から始まる <paramref name="array" /> に格納できる数以上の要素が格納されています。</exception>
      <exception cref="T:System.ObjectDisposedException">このコレクションに関連付けられている <see cref="T:System.Net.HttpListener" /> は閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.Count">
      <summary>コレクションに格納されているプレフィックスの数を取得します。</summary>
      <returns>このコレクション内のプレフィックスの数を格納している <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.GetEnumerator">
      <summary>コレクションを反復処理するために使用できるオブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> インターフェイスを実装し、このコレクション内の文字列にアクセスできるようにするオブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsReadOnly">
      <summary>コレクションへのアクセスが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Remove(System.String)">
      <summary>
        <see cref="T:System.Net.HttpListener" /> オブジェクトが処理するプレフィックスのリストから、指定した URI を削除します。</summary>
      <param name="uriPrefix">削除する URI プレフィックスを格納している <see cref="T:System.String" />。</param>
      <returns>
        <paramref name="uriPrefix" /> が <see cref="T:System.Net.HttpListenerPrefixCollection" /> に存在していたが削除された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の原因を判断するには、例外のエラー コードをチェックします。</exception>
      <exception cref="T:System.ObjectDisposedException">このコレクションに関連付けられている <see cref="T:System.Net.HttpListener" /> は閉じています。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理するために使用できるオブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> インターフェイスを実装し、このコレクション内の文字列にアクセスできるようにするオブジェクト。</returns>
    </member>
    <member name="T:System.Net.HttpListenerRequest">
      <summary>
        <see cref="T:System.Net.HttpListener" /> オブジェクトに対する受信 HTTP 要求を記述します。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Net.HttpListenerRequest.AcceptTypes">
      <summary>クライアントが受け入れる MIME の種類を取得します。</summary>
      <returns>要求の <see langword="Accept" /> ヘッダーで指定されているタイプの名前、またはクライアント要求に <see langword="null" /> ヘッダーが含まれていない場合は <see langword="Accept" /> を格納している <see cref="T:System.String" /> 配列。</returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
      <summary>クライアントの X.509 v.3 証明書への非同期要求を開始します。</summary>
      <param name="requestCallback">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">操作に関する情報を格納するユーザー定義のオブジェクト。 このオブジェクトは、操作の完了時にコールバック デリゲートに渡されます。</param>
      <returns>操作のステータスを示す <see cref="T:System.IAsyncResult" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ClientCertificateError">
      <summary>クライアントから提供された <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> の問題を識別するエラー コードを取得します。</summary>
      <returns>Windows エラー コードを格納している <see cref="T:System.Int32" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)" /> または <see cref="M:System.Net.HttpListenerRequest.GetClientCertificate" /> メソッドへの呼び出しによって、クライアント証明書がまだ初期化されていません。
または
操作はまだ進行中です。</exception>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentEncoding">
      <summary>要求と共に送信されるデータに使用できるコンテンツのエンコードを取得します。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> プロパティのデータへの使用に適した <see cref="P:System.Net.HttpListenerRequest.InputStream" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentLength64">
      <summary>要求に含まれている本体データの長さを取得します。</summary>
      <returns>要求の <see langword="Content-Length" /> ヘッダーの値。 コンテンツの長さが不明な場合、この値は -1 です。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentType">
      <summary>要求に含まれている本体データの MIME の種類を取得します。</summary>
      <returns>要求の <see langword="Content-Type" /> ヘッダーのテキストを格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Cookies">
      <summary>要求と共に送信されたクッキーを取得します。</summary>
      <returns>要求に伴うクッキーを格納している <see cref="T:System.Net.CookieCollection" />。 要求にクッキーが含まれていない場合、このプロパティは空のコレクションを返します。</returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
      <summary>クライアントの X.509 v.3 証明書への非同期要求を終了します。</summary>
      <param name="asyncResult">証明書への保留中の要求。</param>
      <returns>操作の開始時に返される <see cref="T:System.IAsyncResult" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)" />
        <paramref name="e." /> の呼び出しで、<paramref name="asyncResult" /> が取得されませんでした。</exception>
      <exception cref="T:System.InvalidOperationException">このメソッドは、<paramref name="asyncResult" /> で識別される操作に対して既に呼び出されています。</exception>
    </member>
    <member name="M:System.Net.HttpListenerRequest.GetClientCertificate">
      <summary>クライアントの X.509 v.3 証明書を取得します。</summary>
      <returns>クライアントの X.509 v.3 証明書を格納している <see cref="N:System.Security.Cryptography.X509Certificates" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">クライアントの X.509 v.3 証明書を取得するために既に呼び出されているので、このメソッドに対して別の呼び出しを行うことはできません。</exception>
    </member>
    <member name="M:System.Net.HttpListenerRequest.GetClientCertificateAsync">
      <summary>クライアントの X.509 v.3 証明書を非同期操作として取得します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。 タスク オブジェクトの <see cref="P:System.Threading.Tasks.Task`1.Result" /> プロパティは、クライアントの X.509 v.3 証明書を含む <see cref="N:System.Security.Cryptography.X509Certificates" /> オブジェクトを返します。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HasEntityBody">
      <summary>要求に関連付けられている本体データがあるかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>要求に関連付けられている本体データがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Headers">
      <summary>要求で送信されるヘッダーの名前と値のペアのコレクションを取得します。</summary>
      <returns>要求に含まれている HTTP ヘッダーを格納している <see cref="T:System.Net.WebHeaderCollection" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HttpMethod">
      <summary>クライアントによって指定された HTTP メソッドを取得します。</summary>
      <returns>要求で使用されているメソッドを格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.InputStream">
      <summary>クライアントから送信された本体データを格納しているストリームを取得します。</summary>
      <returns>要求の本体でクライアントから送信されたバイトを格納している読み取り可能な <see cref="T:System.IO.Stream" /> オブジェクト。 要求と共にデータが送信されなかった場合、このプロパティは <see cref="F:System.IO.Stream.Null" /> を返します。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsAuthenticated">
      <summary>この要求の送信元クライアントが認証されているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>クライアントが認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsLocal">
      <summary>要求がローカル コンピューターから送信されたかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>要求が、その要求を発行した <see cref="T:System.Net.HttpListener" /> オブジェクトと同じコンピューターから送信されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsSecureConnection">
      <summary>要求の送信に使用された TCP 接続が SSL (Secure Sockets Layer) プロトコルを使用しているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>TCP 接続が SSL を使用している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsWebSocketRequest">
      <summary>TCP 接続が WebSocket 要求であったかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。
TCP 接続が WebSocket 要求である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.KeepAlive">
      <summary>クライアントが永続的な接続を要求しているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>接続を開いておく必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.LocalEndPoint">
      <summary>要求の転送先のサーバー IP アドレスおよびポート番号を取得します。</summary>
      <returns>要求の送信先の IP アドレスを表す <see cref="T:System.Net.IPEndPoint" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ProtocolVersion">
      <summary>要求元クライアントで使用されている HTTP のバージョンを取得します。</summary>
      <returns>クライアントの HTTP のバージョンを示す <see cref="T:System.Version" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.QueryString">
      <summary>要求に含まれているクエリ文字列を取得します。</summary>
      <returns>要求の <see cref="T:System.Collections.Specialized.NameValueCollection" /> に含まれているクエリ データを格納している <see cref="P:System.Net.HttpListenerRequest.Url" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RawUrl">
      <summary>クライアントによって要求された (ホストおよびポートを含まない) URL 情報を取得します。</summary>
      <returns>この要求の生の URL を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RemoteEndPoint">
      <summary>要求の発行元の IP アドレスおよびポート番号を取得します。</summary>
      <returns>要求の発行元の IP アドレスおよびポート番号を表す <see cref="T:System.Net.IPEndPoint" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RequestTraceIdentifier">
      <summary>受信 HTTP 要求の要求 ID を取得します。</summary>
      <returns>HTTP 要求の ID を格納している <see cref="T:System.Guid" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ServiceName">
      <summary>クライアントが要求を送信したサービス プロバイダー名 (SPN: Service Provider Name) を取得します。</summary>
      <returns>クライアントが要求を送信した SPN を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.TransportContext">
      <summary>クライアント要求の <see cref="T:System.Net.TransportContext" /> を取得します。</summary>
      <returns>クライアント要求の <see cref="T:System.Net.TransportContext" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Url">
      <summary>クライアントによって要求された <see cref="T:System.Uri" /> オブジェクトを取得します。</summary>
      <returns>クライアントによって要求されたリソースを識別する <see cref="T:System.Uri" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UrlReferrer">
      <summary>クライアントをサーバーに導いたリソースの URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>要求の <see cref="T:System.Uri" /> ヘッダーのテキストが格納された <see cref="F:System.Net.HttpRequestHeader.Referer" /> オブジェクト。要求にヘッダーが含まれていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserAgent">
      <summary>クライアントによって示されたユーザー エージェントを取得します。</summary>
      <returns>要求の <see langword="User-Agent" /> ヘッダーのテキストを格納している <see cref="T:System.String" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostAddress">
      <summary>要求の転送先のサーバー IP アドレスおよびポート番号を取得します。</summary>
      <returns>ホスト アドレス情報を格納している <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostName">
      <summary>DNS 名とクライアントによって指定されたポート番号 (存在する場合) を取得します。</summary>
      <returns>要求の <see langword="Host" /> ヘッダーのテキストを格納している <see cref="T:System.String" /> 値。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserLanguages">
      <summary>応答への使用に適している自然言語を取得します。</summary>
      <returns>要求の <see cref="T:System.String" /> ヘッダーで指定されている自然言語を格納した <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage" /> 配列。クライアント要求に <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage" /> ヘッダーが含まれていない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Net.HttpListenerResponse">
      <summary>
        <see cref="T:System.Net.HttpListener" /> オブジェクトによって処理される要求に対する応答を表します。</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Abort">
      <summary>応答を送信せずにクライアントとの間の接続を閉じます。</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)">
      <summary>指定したヘッダーと値をこの応答の HTTP ヘッダーに追加します。</summary>
      <param name="name">設定する HTTP ヘッダーの名前。</param>
      <param name="value">
        <paramref name="name" /> ヘッダーの値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" /> または空の文字列 ("") です。</exception>
      <exception cref="T:System.ArgumentException">指定したヘッダーの指定が許可されていません。

または -
<paramref name="name" /> または <paramref name="value" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さが 65,535 文字を超えています。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)">
      <summary>指定した <see cref="T:System.Net.Cookie" /> をこの応答のクッキーのコレクションに追加します。</summary>
      <param name="cookie">この応答で送信されるコレクションに追加する <see cref="T:System.Net.Cookie" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
      <summary>この応答と共に送信される、指定した HTTP ヘッダーに値を追加します。</summary>
      <param name="name">
        <paramref name="value" /> の追加先となる HTTP ヘッダーの名前。</param>
      <param name="value">
        <paramref name="name" /> ヘッダーに追加する値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> は <see langword="null" /> または空の文字列 ("") です。

または -
指定したヘッダーの指定が許可されていません。

または -
<paramref name="name" /> または <paramref name="value" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> の長さが 65,535 文字を超えています。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close">
      <summary>クライアントに応答を送信し、この <see cref="T:System.Net.HttpListenerResponse" /> インスタンスに保持されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
      <summary>指定されたバイト配列をクライアントに返し、この <see cref="T:System.Net.HttpListenerResponse" /> インスタンスに保持されているリソースを解放します。</summary>
      <param name="responseEntity">クライアントに送信する応答を格納している <see cref="T:System.Byte" /> 配列。</param>
      <param name="willBlock">クライアントへのストリームのフラッシュ中は実行をブロックする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="responseEntity" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentEncoding">
      <summary>この応答の <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> の <see cref="T:System.Text.Encoding" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> プロパティのデータへの使用に適した <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> オブジェクト。エンコーディングが指定されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentLength64">
      <summary>応答に含まれている本体データのバイト数を取得または設定します。</summary>
      <returns>応答の <see langword="Content-Length" /> ヘッダーの値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定操作に指定された値が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">この応答は既に送信されています。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentType">
      <summary>返されるコンテンツの MIME の種類を取得または設定します。</summary>
      <returns>応答の <see langword="Content-Type" /> ヘッダーのテキストを格納している <see cref="T:System.String" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">設定操作として指定した値が空の文字列 ("") です。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Cookies">
      <summary>応答と共に返されるクッキーのコレクションを取得または設定します。</summary>
      <returns>応答に付随しているクッキーを格納している <see cref="T:System.Net.CookieCollection" />。 応答にクッキーが追加されていない場合、このコレクションは空です。</returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)">
      <summary>プロパティを、指定した <see cref="T:System.Net.HttpListenerResponse" /> からこの応答へコピーします。</summary>
      <param name="templateResponse">コピーする <see cref="T:System.Net.HttpListenerResponse" /> インスタンス。</param>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Headers">
      <summary>サーバーから返されるヘッダーの名前と値のペアのコレクションを取得または設定します。</summary>
      <returns>応答に挿入される、明示的に設定されたすべての HTTP ヘッダーを格納している <see cref="T:System.Net.WebHeaderCollection" /> インスタンス。</returns>
      <exception cref="T:System.InvalidOperationException">設定操作に指定された <see cref="T:System.Net.WebHeaderCollection" /> インスタンスが、応答では無効です。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.KeepAlive">
      <summary>サーバーが永続的な接続を要求しているかどうかを示す値を取得または設定します。</summary>
      <returns>サーバーが永続的な接続を要求している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.OutputStream">
      <summary>応答の書き込み先として使用できる <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
      <returns>応答の書き込み先として使用できる <see cref="T:System.IO.Stream" /> オブジェクト。</returns>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ProtocolVersion">
      <summary>応答に使用する HTTP バージョンを取得または設定します。</summary>
      <returns>クライアントへの応答時に使用される HTTP のバージョンを表す <see cref="T:System.Version" /> オブジェクト。 このプロパティは今後使用しません。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">設定操作に指定された値に、1 に設定された <see cref="P:System.Version.Major" /> プロパティが存在しないか、0 または 1 に設定された <see cref="P:System.Version.Minor" /> プロパティが存在しません。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Redirect(System.String)">
      <summary>指定した URL にクライアントをリダイレクトするように応答を構成します。</summary>
      <param name="url">クライアントが要求されたリソースの検索に使用する URL。</param>
    </member>
    <member name="P:System.Net.HttpListenerResponse.RedirectLocation">
      <summary>この応答の <see langword="Location" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="Location" /> ヘッダーでクライアントに送信される絶対 URL が格納された <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentException">設定操作として指定した値が空の文字列 ("") です。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.SendChunked">
      <summary>応答がチャンク処理された転送エンコーディングを使用するかどうかを取得または設定します。</summary>
      <returns>応答がチャンク処理された転送エンコーディングを使用するように設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)">
      <summary>この応答と共に送信されたクッキーのコレクションに対して <see cref="T:System.Net.Cookie" /> を追加または更新します。</summary>
      <param name="cookie">この応答の <see cref="T:System.Net.Cookie" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">クッキーが既にコレクション内に存在し、置き換えることができません。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusCode">
      <summary>クライアントへ返される HTTP ステータス コードを取得または設定します。</summary>
      <returns>要求されたリソースの HTTP ステータス コードを示す <see cref="T:System.Int32" /> 値。 既定値は <see cref="F:System.Net.HttpStatusCode.OK" /> で、サーバーがクライアントの要求を正常に処理し、要求されたリソースを応答本体に挿入したことを示します。</returns>
      <exception cref="T:System.ObjectDisposedException">オブジェクトが閉じています。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">設定操作として指定した値が無効です。 有効な値は 100 から 999 の範囲です。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusDescription">
      <summary>クライアントへ返される HTTP ステータス コードの説明テキストを取得または設定します。</summary>
      <returns>クライアントへ返される HTTP ステータス コードの説明テキスト。 既定値は、<see cref="P:System.Net.HttpListenerResponse.StatusCode" /> プロパティ値に対する RFC 2616 の説明、または RFC 2616 の説明が存在しない場合は空の文字列 ("") です。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">設定操作として指定した値に印刷できない文字が含まれます。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.Net.HttpListenerResponse" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="T:System.Net.HttpListenerTimeoutManager">
      <summary>
        <see cref="T:System.Net.HttpListener" /> オブジェクトが使用するタイムアウト マネージャーです。</summary>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.DrainEntityBody">
      <summary>
        <see cref="T:System.Net.HttpListener" /> が Keep-Alive 接続でエンティティ本体をドレインするまでに許容される時間を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.HttpListener" /> が keep-alive 接続でエンティティ本体をドレインするために許容される時間。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.EntityBody">
      <summary>要求のエンティティ本体が到着するまでに許容される時間を取得または設定します。</summary>
      <returns>要求エンティティ本体が到着するまでに許容される時間。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.HeaderWait">
      <summary>
        <see cref="T:System.Net.HttpListener" /> が要求ヘッダーを解析するために許容される時間を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.HttpListener" /> が要求ヘッダーを解析するために許容される時間。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.IdleConnection">
      <summary>接続で許容されるアイドル時間を取得または設定します。</summary>
      <returns>アイドル状態の接続で許容される時間です。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.MinSendBytesPerSecond">
      <summary>応答の最小の送信率を、毎秒のバイト数単位で取得または設定します。</summary>
      <returns>応答の最小送信速度 (1 秒あたりのバイト数)。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.RequestQueue">
      <summary>
        <see cref="T:System.Net.HttpListener" /> がピック アップする前に、要求が要求キュー内にとどまることができる時間を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.HttpListener" /> が要求を取得する前に要求が要求キューに保持される時間。</returns>
    </member>
    <member name="T:System.Net.WebSockets.HttpListenerWebSocketContext">
      <summary>WebSocket 接続を受け入れたときに <see cref="T:System.Net.HttpListener" /> のクラスが受け取った情報へのアクセスを提供します。</summary>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
      <summary>WebSocket を開くハンドシェイクの中で、<see cref="T:System.Net.HttpListener" /> オブジェクトが受信する Cookie を取得します。</summary>
      <returns>
        <see cref="T:System.Net.HttpListener" /> オブジェクトが受信したクッキーです。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.Headers">
      <summary>WebSocket を開くハンドシェイクの中で、<see cref="T:System.Net.HttpListener" /> オブジェクトが受信する HTTP ヘッダーを取得します。</summary>
      <returns>
        <see cref="T:System.Net.HttpListener" /> オブジェクトが受信した HTTP ヘッダーです。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
      <summary>WebSocket クライアントが認証済みかどうかを示す値を取得します。</summary>
      <returns>WebSocket クライアントが認証されているかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
      <summary>WebSocket クライアントがローカル コンピューターから接続されているかどうかを示す値を取得します。</summary>
      <returns>WebSocket クライアントがローカルコンピューターから接続されている場合は <see langword="true" />。それ以外の場合は、<see langword="false" />ます。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
      <summary>WebSocket 接続が SSL (Secure Sockets Layer) を使用して保護されているかどうかを示す値を取得します。</summary>
      <returns>WebSocket 接続が SSL を使用してセキュリティ保護されている場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.Origin">
      <summary>WebSocket 開始ハンドシェイクに含まれる起点 HTTP ヘッダーの値を取得します。</summary>
      <returns>起点 HTTP ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
      <summary>WebSocket クライアントによって要求された URI を取得します。</summary>
      <returns>WebSocket クライアントによって要求された URI。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
      <summary>WebSocket 開始ハンドシェイクに含まれる SecWebSocketKey HTTP ヘッダーの値を取得します。</summary>
      <returns>SecWebSocketKey HTTP ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
      <summary>WebSocket を開くハンドシェイクに含まれる、安全な WebSocket プロトコルのリストを取得します。</summary>
      <returns>安全な WebSocket プロトコルのリストです。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
      <summary>WebSocket クライアントから要求されるサブプロトコルのリストを取得します。</summary>
      <returns>WebSocket クライアントから要求されたサブプロトコルのリスト。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.User">
      <summary>WebSocket クライアントの ID、認証情報、およびセキュリティ ロールを取得するために使用されるオブジェクトを取得します。</summary>
      <returns>WebSocket クライアントの ID、認証情報、およびセキュリティ ロール。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
      <summary>
        <see cref="T:System.Net.WebSockets.WebSocket" /> 接続でデータの送受信に使用される <see cref="T:System.Net.WebSockets.WebSocket" /> インスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.Net.WebSockets.WebSocket" /> 接続を介してデータを送受信するために使用される <see cref="T:System.Net.WebSockets.WebSocket" /> インスタンス。</returns>
    </member>
  </members>
</doc>
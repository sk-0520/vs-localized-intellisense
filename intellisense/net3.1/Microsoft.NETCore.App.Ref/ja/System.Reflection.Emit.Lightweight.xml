<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>トークンを作成するメソッドや、コード、例外処理、およびローカル変数のシグネチャの BLOB を挿入するメソッドなど、動的メソッドの MSIL (Microsoft Intermediate Language) とメタデータを生成する代替の方法をサポートします。</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>本体が現在のインスタンスによって生成される動的メソッドを取得します。</summary>
      <returns>現在の <see cref="T:System.Reflection.Emit.DynamicMethod" /> オブジェクトによってコードが生成される動的メソッドを表す <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>関連付けられた動的メソッドのシグネチャを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="signature">シグネチャを格納している配列。</param>
      <returns>関連付けられた動的メソッドのメタデータおよび MSIL ストリームに埋め込むことができるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>関連付けられたメソッドから呼び出される動的メソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="method">呼び出す動的メソッド。</param>
      <returns>関連付けられた動的メソッドの MSIL ストリーム内に MSIL 命令のターゲットとして埋め込むことができるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>関連付けられた動的メソッドからアクセスされるフィールドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="field">アクセスされるフィールド。</param>
      <returns>現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、フィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>関連付けられた動的メソッドからアクセスされるフィールドのうち、指定されたジェネリック型に存在するフィールドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="field">アクセスされるフィールド。</param>
      <param name="contextType">フィールドが属するジェネリック型。</param>
      <returns>現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、フィールドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>関連付けられた動的メソッドからアクセスされるメソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="method">アクセスされるメソッド。</param>
      <returns>現在の <see cref="F:System.Reflection.Emit.OpCodes.Call" /> オブジェクトのスコープで、<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> や <see cref="T:System.Reflection.Emit.DynamicILInfo" /> などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>ジェネリック型のメソッドを表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="method">メソッド。</param>
      <param name="contextType">メソッドが属するジェネリック型。</param>
      <returns>現在の <see cref="F:System.Reflection.Emit.OpCodes.Call" /> オブジェクトのスコープで、<see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> や <see cref="T:System.Reflection.Emit.DynamicILInfo" /> などのメソッドにアクセスする MSIL 命令のオペランドとして使用できるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>関連付けられた動的メソッドで使用される型を表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="type">使用される型。</param>
      <returns>現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、型を必要とする MSIL 命令のオペランドとして使用できるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>関連付けられた動的メソッドで使用されるリテラル文字列を表す、現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> のスコープで有効なトークンを取得します。</summary>
      <param name="literal">使用される文字列。</param>
      <returns>現在の <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトのスコープで、文字列を必要とする MSIL 命令のオペランドとして使用できるトークン。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>関連付けられた動的メソッドのコード本体を設定します。</summary>
      <param name="code">MSIL ストリームを格納するバイト配列へのポインター。</param>
      <param name="codeSize">MSIL ストリームのバイト数。</param>
      <param name="maxStackSize">メソッド実行時のオペランド スタックのアイテムの最大数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> が <see langword="null" /> で、<paramref name="codeSize" /> が 0 より大きい値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>関連付けられた動的メソッドのコード本体を設定します。</summary>
      <param name="code">MSIL ストリームを格納している配列。</param>
      <param name="maxStackSize">メソッド実行時のオペランド スタックのアイテムの最大数。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>関連付けられた動的メソッドの例外のメタデータを設定します。</summary>
      <param name="exceptions">例外のメタデータを格納するバイト配列へのポインター。</param>
      <param name="exceptionsSize">例外のメタデータのバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> が <see langword="null" /> で、<paramref name="exceptionSize" /> が 0 より大きい値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>関連付けられた動的メソッドの例外のメタデータを設定します。</summary>
      <param name="exceptions">例外のメタデータを格納している配列。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</summary>
      <param name="localSignature">関連付けられた <see cref="T:System.Reflection.Emit.DynamicMethod" /> のローカル変数のレイアウトを格納している配列。</param>
      <param name="signatureSize">シグネチャのバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> が <see langword="null" /> で、<paramref name="signatureSize" /> が 0 より大きい値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>関連付けられた動的メソッドのローカル変数のレイアウトを記述する、ローカル変数のシグネチャを設定します。</summary>
      <param name="localSignature">関連付けられた <see cref="T:System.Reflection.Emit.DynamicMethod" /> のローカル変数のレイアウトを格納している配列。</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>コンパイル、実行、および破棄することのできる動的メソッドを定義し、またそれを表現します。 破棄されたメソッドは、ガベージ コレクションのために利用可能です。</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>メソッド名、属性、呼び出し規約、戻り値の型、パラメーターの型、モジュールを指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、動的メソッドを作成します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="attributes">動的メソッドの属性を指定する、<see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。 使用できる組み合わせは <see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> だけです。</param>
      <param name="callingConvention">動的メソッドの呼び出し規則。 <see cref="F:System.Reflection.CallingConventions.Standard" /> にする必要があります。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <param name="m">動的メソッドが論理的に関連付けられるモジュールを表す <see cref="T:System.Reflection.Module" />。</param>
      <param name="skipVisibility">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT 参照範囲チェックをスキップする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。

または -
<paramref name="m" /> は、動的メソッドに対して匿名のホストを提供するモジュールです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。

または -
<paramref name="m" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> は、<see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外のフラグの組み合わせです。

または -
<paramref name="callingConvention" /> が <see cref="F:System.Reflection.CallingConventions.Standard" /> ではありません。

または -
<paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>メソッド名、属性、呼び出し規則、戻り値の型、パラメーターの型、動的メソッドが論理的に関連付けられている型を指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、動的メソッドを作成します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="attributes">動的メソッドの属性を指定する、<see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。 使用できる組み合わせは <see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> だけです。</param>
      <param name="callingConvention">動的メソッドの呼び出し規則。 <see cref="F:System.Reflection.CallingConventions.Standard" /> にする必要があります。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <param name="owner">動的メソッドが論理的に関連付けられる <see cref="T:System.Type" />。 動的メソッドには、その型のすべてのメンバーへのアクセス権があります。</param>
      <param name="skipVisibility">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT 参照範囲チェックをスキップする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。

または -
<paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、またはジェネリック型またはメソッドの型パラメーターです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。

または -
<paramref name="owner" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> は、<see cref="F:System.Reflection.MethodAttributes.Public" /> と <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外のフラグの組み合わせです。

または -
<paramref name="callingConvention" /> が <see cref="F:System.Reflection.CallingConventions.Standard" /> ではありません。

または -
<paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>メソッド名、戻り値の型、パラメーターの型を指定して、匿名でホストされる動的メソッドを初期化します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>メソッド名、戻り値の型、パラメーターの型を指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、匿名ホスト対象の動的メソッドを初期化します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <param name="restrictedSkipVisibility">動的メソッドの MSIL によりアクセスされる型およびメンバーに対する JIT 参照範囲チェックをスキップする場合は <see langword="true" /> (ただし、それらの型およびメンバーが含まれるアセンブリの信頼レベルは、動的メソッドを出力する呼び出しスタックの信頼レベル以下でなければならないという制限あり)。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>モジュールに対してグローバルに適用される動的メソッドを作成し、メソッド名、戻り値の型、パラメーターの型、およびモジュールを指定します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <param name="m">動的メソッドが論理的に関連付けられるモジュールを表す <see cref="T:System.Reflection.Module" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。

または -
<paramref name="m" /> は、動的メソッドに対して匿名のホストを提供するモジュールです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。

または -
<paramref name="m" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>メソッド名、戻り値の型、パラメーターの型、モジュールを指定し、さらに Just-In-Time (JIT) 参照範囲チェックが動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーをスキップするかどうかを指定して、モジュールに対してグローバルな動的メソッドを作成します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <param name="m">動的メソッドが論理的に関連付けられるモジュールを表す <see cref="T:System.Reflection.Module" />。</param>
      <param name="skipVisibility">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT参照範囲チェックをスキップする場合は <see langword="true" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。

または -
<paramref name="m" /> は、動的メソッドに対して匿名のホストを提供するモジュールです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。

または -
<paramref name="m" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> は、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>メソッド名、戻り値の型、パラメーターの型、および動的メソッドが論理的に関連付けられる型を指定して、動的メソッドを作成します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <param name="owner">動的メソッドが論理的に関連付けられる <see cref="T:System.Type" />。 動的メソッドには、その型のすべてのメンバーへのアクセス権があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。

または -
<paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、またはジェネリック型またはメソッドの型パラメーターです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。

または -
<paramref name="owner" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> が <see langword="null" /> であるか、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す対象となる型です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>メソッド名、戻り値の型、パラメーターの型、動的メソッドが論理的に関連付けられている型を指定し、さらに動的メソッドの Microsoft Intermediate Language (MSIL) によりアクセスされる型やメンバーに対する Just-In-Time (JIT) 参照範囲チェックをスキップするかどうかを指定して、動的メソッドを作成します。</summary>
      <param name="name">動的メソッドの名前。 これには長さ 0 の文字列も可能ですが、<see langword="null" /> にすることはできません。</param>
      <param name="returnType">動的メソッドの戻り値の型を指定する <see cref="T:System.Type" /> オブジェクト。メソッドに戻り値の型がない場合は <see langword="null" />。</param>
      <param name="parameterTypes">動的メソッドのパラメーターの型を指定する <see cref="T:System.Type" /> オブジェクトの配列。メソッドにパラメーターがない場合は <see langword="null" />。</param>
      <param name="owner">動的メソッドが論理的に関連付けられる <see cref="T:System.Type" />。 動的メソッドには、その型のすべてのメンバーへのアクセス権があります。</param>
      <param name="skipVisibility">動的メソッドの MSIL によりアクセスされる型とメンバーに対する JIT 参照範囲チェックをスキップする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> の要素が <see langword="null" /> または <see cref="T:System.Void" /> です。

または -
<paramref name="owner" /> がインターフェイス、配列、オープン ジェネリック型、またはジェネリック型またはメソッドの型パラメーターです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は <see langword="null" />です。

または -
<paramref name="owner" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> が <see langword="null" /> であるか、<see cref="P:System.Type.IsByRef" /> が <see langword="true" /> を返す対象となる型です。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>動的メソッドの作成時に指定された属性を取得します。</summary>
      <returns>メソッドの属性を表す <see cref="T:System.Reflection.MethodAttributes" /> 値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>動的メソッドの作成時に指定された呼び出し規則を取得します。</summary>
      <returns>メソッドの呼び出し規則を示す <see cref="T:System.Reflection.CallingConventions" /> 値の 1 つ。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>動的メソッドを完了し、それを実行するために使用できるデリゲートを作成します。</summary>
      <param name="delegateType">動的メソッドのシグネチャと一致するシグネチャを持つデリゲート型。</param>
      <returns>動的メソッドを実行するために使用できる、指定した型のデリゲート。</returns>
      <exception cref="T:System.InvalidOperationException">動的メソッドにメソッド本体がありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> に含まれるパラメーターの数か型が正しくありません。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>動的メソッドを完了し、それを実行するために使用できるデリゲートを作成します。作成する際は、デリゲートの型と、デリゲートをバインドするオブジェクトを指定します。</summary>
      <param name="delegateType">動的メソッドのシグネチャと一致するシグネチャを持つデリゲート型 (最初のパラメーターは除く)。</param>
      <param name="target">デリゲートをバインドするオブジェクト。 動的メソッドの最初のパラメーターと同じ型でなければなりません。</param>
      <returns>指定したターゲット オブジェクトで動的メソッドを実行するために使用できる、指定した型のデリゲート。</returns>
      <exception cref="T:System.InvalidOperationException">動的メソッドにメソッド本体がありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> が動的メソッドの最初のパラメーターと同じ型ではありません。また、その型に代入可能でもありません。

または -
<paramref name="delegateType" /> に含まれるパラメーターの数か型が正しくありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>メソッドを宣言する型を取得します。動的メソッドの場合は常に <see langword="null" /> です。</summary>
      <returns>常に <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>動的メソッドのパラメーターを定義します。</summary>
      <param name="position">パラメーター リストのパラメーターの位置。 最初のパラメーターに対応する 1 から順番にインデックス番号がパラメーターに付けられます。</param>
      <param name="attributes">パラメーターの属性を指定する、<see cref="T:System.Reflection.ParameterAttributes" /> 値のビットごとの組み合わせ。</param>
      <param name="parameterName">パラメーターの名前。 長さ 0 の文字列も名前として可能です。</param>
      <returns>常に <see langword="null" /> を返します。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">メソッドにパラメーターが指定されていません。

または -
<paramref name="position" /> が 0 未満です。

または -
<paramref name="position" /> は、メソッドのパラメーターの数を超えています。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>メソッドの基本実装を返します。</summary>
      <returns>メソッドの基本実装。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>メソッドの定義済みのカスタム属性をすべて返します。</summary>
      <param name="inherit">メソッドの継承チェーンを検索してカスタム属性を見つける場合は <see langword="true" />、現在のメソッドだけを検査する場合は <see langword="false" />。</param>
      <returns>メソッドのすべてのカスタム属性を表す、オブジェクトの配列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>メソッドに適用されている、指定した型のカスタム属性を返します。</summary>
      <param name="attributeType">返されるカスタム属性の型を表す <see cref="T:System.Type" />。</param>
      <param name="inherit">メソッドの継承チェーンを検索してカスタム属性を見つける場合は <see langword="true" />、現在のメソッドだけを検査する場合は <see langword="false" />。</param>
      <returns>
        <paramref name="attributeType" /> 型であるか、または <paramref name="attributeType" /> 型から派生したメソッドの属性を表すオブジェクトの配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>メタデータ トークン、スコープ、および Microsoft Intermediate Language (MSIL) ストリームからメソッドの本体を生成するのに使用できる <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクトを返します。</summary>
      <returns>メタデータ トークン、スコープ、および MSIL ストリームからメソッドの本体を生成するのに使用できる <see cref="T:System.Reflection.Emit.DynamicILInfo" /> オブジェクト</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>メソッドの Microsoft Intermediate Language (MSIL) ジェネレーターを返します。これは 64 バイトの既定の MSIL ストリーム サイズを持ちます。</summary>
      <returns>メソッドの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>指定した Microsoft Intermediate Language (MSIL) ストリーム サイズの、メソッドの MSIL ジェネレーターを返します。</summary>
      <param name="streamSize">バイト単位の MSIL ストリームのサイズ。</param>
      <returns>指定された MSIL ストリーム サイズの、メソッドの <see cref="T:System.Reflection.Emit.ILGenerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>このメソッドの実装フラグを返します。</summary>
      <returns>メソッドの実装フラグを表す <see cref="T:System.Reflection.MethodImplAttributes" /> 値のビットごとの組み合わせ。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>動的メソッドのパラメーターを返します。</summary>
      <returns>動的メソッドのパラメーターを表す <see cref="T:System.Reflection.ParameterInfo" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>メソッドのローカル変数をゼロに初期化するかどうかを示す値を取得または設定します。</summary>
      <returns>メソッドのローカル変数をゼロに初期化する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>指定されたカルチャ情報を使用し、指定したバインダーの制約の下で、指定したパラメーターを使用して動的メソッドを呼び出します。</summary>
      <param name="obj">それらは静的であるため、動的メソッドではこのパラメーターは無視されます。 <see langword="null" />を指定します。</param>
      <param name="invokeAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 値のビットごとの組み合わせ。</param>
      <param name="binder">バインディング、引数型の強制変換、メンバーの呼び出し、およびリフレクションを使用した <see cref="T:System.Reflection.Binder" /> オブジェクトの取得を有効にする <see cref="T:System.Reflection.MemberInfo" /> オブジェクト。 <paramref name="binder" /> が <see langword="null" /> の場合は、既定のバインダーが使用されます。 詳細については、「<see cref="T:System.Reflection.Binder" />」を参照してください。</param>
      <param name="parameters">引数リスト。 これは、呼び出されるメソッドのパラメーターと同じ数、順序、型の引数の配列です。 パラメーターがない場合は、このパラメーターは <see langword="null" /> である必要があります。</param>
      <param name="culture">型の強制変換を制御するために使用する <see cref="T:System.Globalization.CultureInfo" /> のインスタンス。 <see langword="null" /> の場合は、現在のスレッドの <see cref="T:System.Globalization.CultureInfo" /> が使用されます。 たとえば、この情報は 1000 を表す <see cref="T:System.String" /> を <see cref="T:System.Double" /> 値に正しく変換する場合に必要です。これは、カルチャによって 1000 の表記が異なるためです。</param>
      <returns>呼び出されたメソッドの戻り値を格納する <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 呼び出し規則はサポートされません。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> の要素の数が動的メソッドのパラメーターの数と一致しません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> の 1 つ以上の要素の型が動的メソッドの対応するパラメーターの型と一致しません。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">動的メソッドは匿名でホストされずにモジュールに関連付けられます。それは、<paramref name="skipVisibility" /> を <see langword="false" /> に設定して構築されましたが、動的メソッドは <see langword="public" /> または <see langword="internal" /> (Visual Basic では <see langword="Friend" />) ではないメンバーにアクセスします。

または -
動的メソッドは匿名でホストされ、<paramref name="skipVisibility" /> を <see langword="false" /> に設定して構築されましたが、<see langword="public" /> ではないメンバーにアクセスします。

または -
動的メソッドには、検証できないコードが含まれています。 <see cref="T:System.Reflection.Emit.DynamicMethod" /> については、「解説」の「検証」セクションを参照してください。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>指定されたカスタム属性の型が定義されているかどうかを示します。</summary>
      <param name="attributeType">検索するカスタム属性の型を表す <see cref="T:System.Type" />。</param>
      <param name="inherit">メソッドの継承チェーンを検索してカスタム属性を見つける場合は <see langword="true" />、現在のメソッドだけを検査する場合は <see langword="false" />。</param>
      <returns>指定されたカスタム属性の型が定義されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>現在の動的メソッドがセキュリティ クリティカルまたはセキュリティ セーフ クリティカルであり、重要な操作を実行できるかどうかを示す値を取得します。</summary>
      <returns>現在の動的メソッドがセキュリティ クリティカルまたはセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の動的メソッドが透過的な場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">動的メソッドにメソッド本体がありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>現在の動的メソッドが現在の信頼レベルでセキュリティ セーフ クリティカルであるかどうか、つまり、重要な操作を実行でき、透過的なコードからアクセスできるかどうかを示す値を取得します。</summary>
      <returns>現在の動的メソッドが現在の信頼レベルでセキュリティ セーフ クリティカルである場合は <see langword="true" />。現在の型がセキュリティ クリティカルまたは透過的な場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">動的メソッドにメソッド本体がありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>現在の動的メソッドが現在の信頼レベルで透過的であり、重要な操作を実行できないかどうかを示す値を取得します。</summary>
      <returns>現在の動的メソッドが現在の信頼レベルで透過的セキュリティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">動的メソッドにメソッド本体がありません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>動的メソッドはサポートされていません。</summary>
      <returns>動的メソッドはサポートされていません。</returns>
      <exception cref="T:System.InvalidOperationException">動的メソッドは許可されていません。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>動的メソッドが論理的に関連付けられるモジュールを取得します。</summary>
      <returns>現在の動的メソッドが関連付けられる <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>動的メソッドの名前を取得します。</summary>
      <returns>メソッドの単純な名前。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>メソッドを取得するためにリフレクションで使用されたクラスを取得します。</summary>
      <returns>常に <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>動的メソッドの戻りパラメーターを取得します。</summary>
      <returns>常に <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>動的メソッドの戻り値の型を取得します。</summary>
      <returns>現在のメソッドの戻り値の型を表す <see cref="T:System.Type" />。メソッドに戻り値の型がない場合は <see cref="T:System.Void" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>動的メソッドの戻り値の型のカスタム属性を取得します。</summary>
      <returns>動的メソッドの戻り値の型のカスタム属性を表す <see cref="T:System.Reflection.ICustomAttributeProvider" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>文字列として表される、メソッドの署名を返します。</summary>
      <returns>メソッドの署名を表す文字列。</returns>
    </member>
  </members>
</doc>
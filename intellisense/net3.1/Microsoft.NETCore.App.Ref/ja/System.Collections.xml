<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.BitArray">
      <summary>ビット値の小型の配列を管理します。このビット値はブール型として表され、<see langword="true" /> はビットがオン (1)、<see langword="false" /> はビットがオフ (0) であることを示します。</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>指定されたブール値配列からコピーされたビット値を含む <see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values">コピーするブール値の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>指定したバイト配列からビット値をコピーして格納する、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bytes">コピーする値を格納しているバイト配列。各バイトは 8 個の連続ビットを表します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> の長さが <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>指定した <see cref="T:System.Collections.BitArray" /> からコピーされたビット値を格納する、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bits">コピーする <see cref="T:System.Collections.BitArray" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>指定数のビット値を格納できる、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。ビット値は <see langword="false" /> に初期設定されます。</summary>
      <param name="length">新しい <see cref="T:System.Collections.BitArray" /> 内のビット値の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>指定数のビット値を格納できる、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。ビット値は指定値に初期設定されます。</summary>
      <param name="length">新しい <see cref="T:System.Collections.BitArray" /> 内のビット値の数。</param>
      <param name="defaultValue">各ビットに代入するブール値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>指定した 32 ビット整数配列からビット値をコピーして格納する、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values">コピーする値を格納している整数配列。各整数は 32 個の連続ビットを表します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> の長さが <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>現在の <see cref="T:System.Collections.BitArray" /> オブジェクトの要素と指定した配列内の対応する要素の間で、ビットごとの AND 演算を実行します。 現在の <see cref="T:System.Collections.BitArray" /> オブジェクトが変更され、ビットごとの AND 演算の結果を格納します。</summary>
      <param name="value">ビットごとの AND 演算の実行対象となる配列。</param>
      <returns>ビットごとの AND 演算の結果を含み、現在の <see cref="T:System.Collections.BitArray" /> オブジェクトへの参照である配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> と現在の <see cref="T:System.Collections.BitArray" /> に同じ数の要素が指定されていません。</exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>
        <see cref="T:System.Collections.BitArray" /> の簡易コピーを作成します。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.BitArray" /> 全体を、互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.BitArray" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
コピー元の <see cref="T:System.Collections.BitArray" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
      <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Collections.BitArray" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>
        <see cref="T:System.Collections.BitArray" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>
        <see cref="T:System.Collections.BitArray" /> の特定位置にあるビット値を取得します。</summary>
      <param name="index">取得する値の 0 から始まるインデックス。</param>
      <returns>
        <paramref name="index" /> 位置にあるビットの値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が <see cref="T:System.Collections.BitArray" /> の要素数以上です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.BitArray" />を反復処理する列挙子を返します。</summary>
      <returns>全体の <see cref="T:System.Collections.BitArray" /> の <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.BitArray" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>このプロパティは常に <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>
        <see cref="T:System.Collections.BitArray" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>このプロパティは常に <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>
        <see cref="T:System.Collections.BitArray" /> の特定位置にあるビット値を取得または設定します。</summary>
      <param name="index">取得または設定する値の、0 から始まるインデックス番号。</param>
      <returns>
        <paramref name="index" /> 位置にあるビットの値。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が <see cref="P:System.Collections.BitArray.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <param name="count" />
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>
        <see cref="T:System.Collections.BitArray" /> 内の要素の数を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> にある要素の数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 未満の値に設定されています。</exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>現在の <see cref="T:System.Collections.BitArray" /> にあるすべてのビット値を反転し、<see langword="true" /> に設定されている要素を <see langword="false" /> に、<see langword="false" /> に設定されている要素を <see langword="true" /> に変更します。</summary>
      <returns>ビット値の反転後の現在のインスタンス。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>現在の <see cref="T:System.Collections.BitArray" /> オブジェクトの要素と指定した配列内の対応する要素の間で、ビットごとの OR 演算を実行します。 現在の <see cref="T:System.Collections.BitArray" /> オブジェクトが変更され、ビットごとの OR 演算の結果を格納します。</summary>
      <param name="value">ビットごとの OR 演算の実行対象となる配列。</param>
      <returns>ビットごとの OR 演算の結果を含み、現在の <see cref="T:System.Collections.BitArray" /> オブジェクトへの参照である配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> の要素数と現在の <see cref="T:System.Collections.BitArray" /> の要素数が異なります。</exception>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <param name="count" />
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Collections.BitArray" /> の特定位置にあるビットを指定した値に設定します。</summary>
      <param name="index">設定するビットの、0 から始まるインデックス番号。</param>
      <param name="value">ビットに代入するブール値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が、<see cref="T:System.Collections.BitArray" /> にある要素の数以上です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>
        <see cref="T:System.Collections.BitArray" /> 内のすべてのビットを指定した値に設定します。</summary>
      <param name="value">すべてのビットに代入するブール値。</param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>
        <see cref="T:System.Collections.BitArray" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>指定した配列内の対応する要素に対して、現在の <see cref="T:System.Collections.BitArray" /> の要素間でビットごとの排他的 OR 演算を実行します。 現在の <see cref="T:System.Collections.BitArray" /> オブジェクトが変更され、ビットごとの排他的 OR 演算の結果を格納します。</summary>
      <param name="value">ビットごとの排他的 OR 演算の実行対象となる配列。</param>
      <returns>ビットごとの排他的 OR 演算の結果を含み、現在の <see cref="T:System.Collections.BitArray" /> オブジェクトへの参照である配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> と現在の <see cref="T:System.Collections.BitArray" /> に同じ数の要素が指定されていません。</exception>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions">
      <summary>ジェネリック コレクションの拡張メソッドです。</summary>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <summary>
        <paramref name="dictionary" /> から、指定した <paramref name="key" /> に関連付けられている値の取得を試みます。</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key">取得する値のキー。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>
        <typeparamref name="TValue" /> のインスタンス。 このメソッドが成功した場合、返されるオブジェクトは、指定した <paramref name="key" /> に関連付けられている値になります。 このメソッドが失敗すると、<typeparamref name="TValue" /> の <see langword="default" /> 値が返されます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <summary>
        <paramref name="dictionary" /> から、指定したキーに関連付けられている値の取得を試みます。</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key">取得する値のキー。</param>
      <param name="defaultValue">
        <paramref name="dictionary" /> が指定した <paramref name="key" /> と関連付けられている値を見つけることができない場合に返す既定値。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>
        <typeparamref name="TValue" /> のインスタンス。 このメソッドが成功した場合、返されるオブジェクトは、指定した <paramref name="key" /> に関連付けられている値になります。 このメソッドが失敗すると、<paramref name="defaultValue" /> が返されます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <summary>
        <paramref name="dictionary" /> から、指定した <paramref name="key" /> の値を削除しようとします。</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key">削除する値のキー。</param>
      <param name="value">このメソッドが <see langword="true" /> を返す場合は、削除された値。このメソッドが <see langword="false" /> を返す場合は、<typeparamref name="TValue" /> の <see langword="default" /> 値。</param>
      <typeparam name="TKey">
        <paramref name="dictionary" /> 内のキーの型。</typeparam>
      <typeparam name="TValue">
        <paramref name="dictionary" /> 内の値の型。</typeparam>
      <returns>
        <paramref name="dictionary" /> から指定した <paramref name="key" /> の値が見つかった場合は <see langword="true" />。指定した <paramref name="key" /> に関連付けられている値が <paramref name="dictionary" /> で見つからない場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>指定した <paramref name="key" /> と <paramref name="value" /> を <paramref name="dictionary" /> に追加しようとします。</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key">追加する値のキー。</param>
      <param name="value">加算する値。</param>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
      <returns>
        <paramref name="key" /> と <paramref name="value" /> が <paramref name="dictionary" /> に正常に追加された場合は、<see langword="true" />。<paramref name="dictionary" /> に指定した <paramref name="key" /> が既に含まれている場合は <see langword="false" /> (この場合、何も追加されません)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>
        <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装のための基本クラスを提供します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.Comparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>派生クラスでオーバーライドされると、同じ型の 2 つのオブジェクトに対する比較を実行し、一方のオブジェクトが他方よりも小さいか、等しいか、大きいかを示す値を返します。</summary>
      <param name="x">比較する最初のオブジェクト。</param>
      <param name="y">比較する 2 番目のオブジェクト。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。
 [値] 
 説明 
 0 より小さい値 
<paramref name="x" /> は <paramref name="y" /> より小さい値です。  
  
 0 
<paramref name="x" /> と <paramref name="y" /> は等しい。  
  
 0 より大きい値 
<paramref name="x" /> が <paramref name="y" /> より大きくなっています。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 型が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスと <see cref="T:System.IComparable" /> インターフェイスのいずれも実装していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary>指定した比較を使用して比較子を作成します。</summary>
      <param name="comparison">使用する比較。</param>
      <returns>新しい比較子。</returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>汎用引数で指定された型に対して、既定の並べ替え順序比較子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Comparer`1" /> を継承し、<paramref name="T" /> 型の並べ替え順序の比較子として機能するオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>2 つのオブジェクトを比較して、一方が他方より小さいか、同じか、または大きいかを示す値を返します。</summary>
      <param name="x">比較する最初のオブジェクト。</param>
      <param name="y">比較する 2 番目のオブジェクト。</param>
      <returns>
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。
 [値] 
 説明 
 0 より小さい値 
<paramref name="x" /> は <paramref name="y" /> より小さい値です。  
  
 0 
<paramref name="x" /> と <paramref name="y" /> は等しい。  
  
 0 より大きい値 
<paramref name="x" /> が <paramref name="y" /> より大きくなっています。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> または <paramref name="y" /> が、<paramref name="T" /> 型にキャストできない型です。
または
<paramref name="x" /> および <paramref name="y" /> が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスと <see cref="T:System.IComparable" /> インターフェイスのいずれも実装していません。</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>キーと値のコレクションを表します。</summary>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>空で、既定の初期量を備え、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> から要素をコピーして格納し、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.IDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> に、1 つ以上の重複するキーが格納されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="collection" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <param name="collection" />
      <param name="comparer" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>空で、既定の初期量を備え、指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>空で、指定した初期量を備え、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>空で、指定した初期量を備え、指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> が格納できる要素数の初期値。</param>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Generic.Dictionary`2" /> 構造体。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>指定したキーと値をディクショナリに追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> からすべてのキーと値を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>ディクショナリのキーが等しいかどうかを確認するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を取得します。</summary>
      <returns>現在の <see cref="T:System.Collections.Generic.Dictionary`2" /> のキーが等しいかどうかを確認し、キーのハッシュ値を提供するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>指定したキーが <see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているかどうかを判断します。</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary>バッキング ストレージをさらに拡張することなく、ディクショナリに指定したエントリ数まで格納できるようにします。</summary>
      <param name="capacity">エントリの数。</param>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の現在の容量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の要素を列挙します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.Dictionary`2" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>ディクショナリ内の列挙子の現在位置にある、<see cref="T:System.Collections.DictionaryEntry" /> としての要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>列挙子の現在位置の要素のキーを取得します。</summary>
      <returns>ディクショナリ内の列挙子の現在位置にある要素のキー。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>列挙子の現在位置の要素の値を取得します。</summary>
      <returns>ディレクショナリ内の列挙子の現在位置にある要素の値。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の列挙子の現在位置にある、<see cref="T:System.Object" /> としての要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.Dictionary`2" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key">取得または設定する値のキー。</param>
      <returns>指定されたキーに関連付けられている値。 指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを持つ新しい要素を作成します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティが取得され、<paramref name="key" /> がコレクションに存在しません。</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内のキーのコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 内のキーを反映する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.Dictionary`2" /> にキーが反映される <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> に格納されている要素の数。
このプロパティ値を取得することは、O(1) 操作になります。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> の <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、元の <see cref="T:System.Collections.Generic.ICollection`1" /> で項目が見つからなかった場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 内のキーを格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Collections.Generic.Dictionary`2" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>指定したキーを持つ値を <see cref="T:System.Collections.Generic.Dictionary`2" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<paramref name="key" /> が <see cref="T:System.Collections.Generic.Dictionary`2" /> に見つからない場合、<see langword="false" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>指定した値を、指定したキーと共に <see cref="T:System.Collections.Generic.ICollection`1" /> に追加します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に追加するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> のキーは <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定のキーと値が格納されているかどうかを判断します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 内で検索される <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <returns>
        <see langword="true" /> が <paramref name="keyValuePair" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>指定した配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> からコピーされる <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 要素のコピー先である <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>ディクショナリが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>ディクショナリからキーと値を削除します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> から削除するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
      <returns>
        <paramref name="keyValuePair" /> で表されたキーと値が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="keyValuePair" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合、<see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <paramref name="TKey" /> 型の <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <paramref name="TValue" /> 型の <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> のキーを格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> のキーを格納しているコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> の値を格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 内の値を格納しているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元の配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーと値をディクショナリに追加します。</summary>
      <param name="key">キーとして使用するオブジェクト。</param>
      <param name="value">値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。

または -
<paramref name="value" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値の型である <paramref name="TValue" /> に代入できない型です。

または -
同じキーを持つ値が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーの値を取得または設定します。</summary>
      <param name="key">取得する値のキー。</param>
      <returns>指定したキーに関連付けられた値。ただし、<paramref name="key" /> がディクショナリにない場合、または <paramref name="key" /> が <see cref="T:System.Collections.Generic.Dictionary`2" /> のキー型 <paramref name="TKey" /> に割り当てられない型である場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.Dictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。

または -
値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.Dictionary`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary>このディクショナリの容量を、そのすべてのエントリが最初に初期化されていた場合に想定される容量に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary>バッキング ストレージをさらに拡張することなく、指定したエントリ数まで格納できるようにこのディクショナリの容量を設定します。</summary>
      <param name="capacity">新しい容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> は <see cref="T:System.Collections.Generic.Dictionary`2" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary>ディクショナリに対して、指定したキーと値の追加を試みます。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。 <see langword="null" />を指定できます。</param>
      <returns>キー/値ペアがディクショナリに正常に追加削除された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値のコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 内の値を反映する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.Dictionary`2" /> に値が反映される <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> の <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、元の <see langword="false" /> で <paramref name="item" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 内の値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装のための基本クラスを提供します。</summary>
      <typeparam name="T">比較するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.EqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>汎用引数で指定された型に対して、等値であるかどうかを比較するための既定の比較子を返します。</summary>
      <returns>
        <typeparamref name="T" /> 型の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> クラスの既定のインスタンス。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>派生クラスでオーバーライドされた場合、<typeparamref name="T" /> 型の 2 つのオブジェクトが等しいかどうかを確認します。</summary>
      <param name="x">比較する最初のオブジェクト。</param>
      <param name="y">比較する 2 番目のオブジェクト。</param>
      <returns>指定したオブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>派生クラスでオーバーライドされた場合、ハッシュ アルゴリズムや、ハッシュ テーブルなどのデータ構造体の指定したオブジェクトに使用するハッシュ関数として機能します。</summary>
      <param name="obj">ハッシュ コードを取得する対象となるオブジェクト。</param>
      <returns>指定したオブジェクトのハッシュ コード。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> の型が参照型で、<paramref name="obj" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>指定したオブジェクトが等しいかどうかを判断します。</summary>
      <param name="x">比較する最初のオブジェクト。</param>
      <param name="y">比較する 2 番目のオブジェクト。</param>
      <returns>指定したオブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> または <paramref name="y" /> が、<typeparamref name="T" /> 型にキャストできない型です。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>指定したオブジェクトのハッシュ コードを返します。</summary>
      <param name="obj">ハッシュ コードが返される対象の <see cref="T:System.Object" />。</param>
      <returns>指定したオブジェクトのハッシュ コード。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> の型が参照型で、<paramref name="obj" /> が <see langword="null" /> です。

または -
<paramref name="obj" /> が、<typeparamref name="T" /> 型にキャストできない型です。</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>値のセットを表します。</summary>
      <typeparam name="T">ハッシュ セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空です。このセット型には既定の等値比較子が使用されます。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には既定の等値比較子が使用されます。指定されたコレクションからコピーされた要素が格納され、コピー対象の要素数を格納できるだけの十分な容量が確保されます。</summary>
      <param name="collection">新しいセットの要素のコピー元となるコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には指定した等値比較子が使用されます。指定されたコレクションからコピーされた要素が格納され、コピー対象の要素数を格納できるだけの十分な容量が確保されます。</summary>
      <param name="collection">新しいセットの要素のコピー元となるコレクション。</param>
      <param name="comparer">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> の実装を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空です。このセット型には指定した等値比較子が使用されます。</summary>
      <param name="comparer">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> の実装を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空ですが、<paramref name="capacity" /> 項目の予約された領域があり、このセット型には既定の等値比較子が使用されます。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.HashSet`1" /> の初期サイズは、</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には指定した等値比較子が使用されます。また、<paramref name="capacity" /> 要素を格納できるだけの容量を備えています。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.HashSet`1" /> の初期サイズは、</param>
      <param name="comparer">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装を使用する場合は null (Visual Basic の場合は Nothing)。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトをシリアル化するために必要な情報を格納している <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>指定された要素をセットに追加します。</summary>
      <param name="item">セットに追加する要素。</param>
      <returns>要素が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに追加された場合は <see langword="true" />。要素が既に存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>セット内の値が等しいかどうかを確認するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> オブジェクトを取得します。</summary>
      <returns>セット内の値が等しいかどうかを調べるための <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>指定した要素が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに含まれているかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクト内で検索する要素。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに指定された要素が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからコピーされる要素のコピー先となる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>指定された配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからコピーされる要素のコピー先となる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> が、コピー先の <paramref name="array" /> の長さを超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>指定された配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから、指定された数の要素を配列にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからコピーされる要素のコピー先となる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count">
        <paramref name="array" /> にコピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> が、コピー先の <paramref name="array" /> の長さを超えています。

または -
<paramref name="count" /> が、コピー先の <paramref name="array" /> の <paramref name="index" /> から末尾までに格納できる数を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>セットに格納されている要素の数を取得します。</summary>
      <returns>セットに格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの等価テストに使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの深いレベルの等価テストに使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary>このハッシュ セットを大きくすることなく、指定された要素数を保持できるようにします。</summary>
      <param name="capacity">必要な最小容量。</param>
      <returns>このインスタンスの新しい容量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を列挙します。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の列挙子の現在位置にある、<see cref="T:System.Object" /> としての要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトをシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトをシリアル化するために必要な情報を格納している <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Collections.Generic.HashSet`1" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの両方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> の真のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションの真のスーパーセット (真上位集合) であるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> の真のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから指定された要素を削除します。</summary>
      <param name="item">削除する要素。</param>
      <returns>要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<paramref name="item" /> が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに見つからない場合、<see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>指定の述語によって定義された条件に一致するすべての要素を <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションから削除します。</summary>
      <param name="match">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションから削除された要素数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに項目を追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの容量を、そこに格納されている実際の要素数を最も近い実装に固有の値に切り上げて設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary>指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue">検索する値。</param>
      <param name="actualValue">セット内の検索で見つかった値。検索で一致するものがなかった場合は、既定の T の値。</param>
      <returns>検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに変更を加えて、そのオブジェクト自体、指定されたコレクション、またはそれら両方に存在するすべての要素を格納するようにします。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>ダブルリンク リストを表します。</summary>
      <typeparam name="T">リンク リストの要素の型を示します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定した <see cref="T:System.Collections.Generic.LinkedList`1" /> からコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.IEnumerable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">新しい <see cref="T:System.Collections.IEnumerable" /> に要素がコピーされた <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定した <see cref="T:System.Collections.Generic.LinkedList`1" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、シリアル化可能な <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの後に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="node">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を挿入する位置の直前の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する値。</param>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの後に、指定した新しいノードを追加します。</summary>
      <param name="node">
        <paramref name="newNode" /> を挿入する位置の直前の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> は <see langword="null" />です。

または -
<paramref name="newNode" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。
または
<paramref name="newNode" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの前に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="node">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を挿入する位置の直後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する値。</param>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの前に、指定した新しいノードを追加します。</summary>
      <param name="node">
        <paramref name="newNode" /> を挿入する位置の直後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> は <see langword="null" />です。

または -
<paramref name="newNode" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。
または
<paramref name="newNode" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に追加する値。</param>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に指定した新しいノードを追加します。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の先頭に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に追加する値。</param>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に、指定した新しいノードを追加します。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の末尾に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> からすべてのノードを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>ある値が <see cref="T:System.Collections.Generic.LinkedList`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <see langword="true" /> が <paramref name="value" /> に存在する場合は <see cref="T:System.Collections.Generic.LinkedList`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 全体を、互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.LinkedList`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.LinkedList`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に実際に格納されているノードの数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に実際に格納されているノードの数。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の要素を列挙します。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.LinkedList`1" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。 このクラスは継承できません。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>指定した値を含む最初のノードを検索します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索される値。</param>
      <returns>存在する場合は、指定した値を含む最初の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>指定した値を含む最後のノードを検索します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索される値。</param>
      <returns>存在する場合は、指定した値を含む最後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の最初のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の最初の <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> の <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> ノードの最後のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の最後の <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で最初に見つかった指定の値を削除します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> から削除する値。</param>
      <returns>
        <paramref name="value" /> を含んだ要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、元の <see cref="T:System.Collections.Generic.LinkedList`1" /> で <paramref name="value" /> が見つからなかった場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>指定したノードを <see cref="T:System.Collections.Generic.LinkedList`1" /> から削除します。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> から削除する <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭にあるノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾にあるノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> の末尾にアイテムを追加します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.ICollection`1" /> の末尾に追加する値。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションとしてリンク リストを反復処理する列挙子を返します。</summary>
      <returns>コレクションとしてリンク リストを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> のノードを表します。 このクラスは継承できません。</summary>
      <typeparam name="T">リンク リストの要素の型を示します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>指定した値を含んだ <see cref="T:System.Collections.Generic.LinkedListNode`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> に格納する値。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が属する <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が属する <see cref="T:System.Collections.Generic.LinkedListNode`1" /> への参照。<see cref="T:System.Collections.Generic.LinkedListNode`1" /> がリンクされていない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の次のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の次のノードへの参照。現在のノードが <see cref="P:System.Collections.Generic.LinkedList`1.Last" /> の最後の要素 (<see cref="T:System.Collections.Generic.LinkedList`1" />) である場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の前のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の前のノードへの参照。現在のノードが <see cref="P:System.Collections.Generic.LinkedList`1.First" /> の最初の要素 (<see cref="T:System.Collections.Generic.LinkedList`1" />) である場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>ノードに格納された値を取得します。</summary>
      <returns>ノードに格納された値。</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリストを表します。 リストの検索、並べ替え、および操作のためのメソッドを提供します。</summary>
      <typeparam name="T">リスト内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">新しいリストに要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">新しいリストに格納できる要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> の末尾にオブジェクトを追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したコレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加します。</summary>
      <param name="collection">
        <see cref="T:System.Collections.Generic.List`1" /> の末尾に要素が追加されるコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <see langword="null" /> が参照型の場合、コレクションに格納する要素は <paramref name="T" /> であってもかまいません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>現在のコレクションの読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパーを返します。</summary>
      <returns>現在の <see cref="T:System.Collections.Generic.List`1" /> をラップする読み取り専用のラッパーとして動作するオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。
または
既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <returns>
        <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="index">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索する範囲の長さ。</param>
      <param name="item">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <returns>
        <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を表していません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>内部データ構造体がサイズ変更せずに格納できる要素の合計数を取得または設定します。</summary>
      <returns>サイズ変更が必要となるまでに <see cref="T:System.Collections.Generic.List`1" /> に格納できる要素の数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> は <see cref="P:System.Collections.Generic.List`1.Count" /> より小さい値に設定します。</exception>
      <exception cref="T:System.OutOfMemoryException">システムで使用可能なメモリが不足しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>ある要素が <see cref="T:System.Collections.Generic.List`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary>現在の <see cref="T:System.Collections.Generic.List`1" /> の要素を別の型に変換し、変換された要素が格納されたリストを返します。</summary>
      <param name="converter">各要素の型を変換するための <see cref="T:System.Converter`2" /> デリゲート。</param>
      <typeparam name="TOutput">変換後の配列要素の型。</typeparam>
      <returns>現在の <see cref="T:System.Collections.Generic.List`1" /> の要素の型を変換した後の <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="converter" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 全体を、互換性のある 1 次元配列の、指定したインデックスから始まる位置にコピーします。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> のうちある範囲の要素を、互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="index">コピーを開始するコピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、0 から始まるインデックス番号。</param>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</param>
      <param name="count">コピーする要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="arrayIndex" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> がコピー元の <see cref="P:System.Collections.Generic.List`1.Count" /> の <see cref="T:System.Collections.Generic.List`1" /> 以上です。
または
コピー元の <paramref name="index" /> の <see cref="T:System.Collections.Generic.List`1" /> から最後までの要素数が、コピー先の <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能な領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> の要素を列挙します。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.List`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.List`1" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> のうち、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<see langword="true" /> に含まれる場合は、<see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Collections.Generic.List`1" /> 全体の中で最もインデックス番号の小さい要素を返します。</summary>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は、空の <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。
または
<paramref name="count" /> が 0 未満です。
または
<paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスから最後の要素までの範囲内で、指定した述語にで定義される条件に一致する要素を検索し、最初に見つかった 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary>指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Collections.Generic.List`1" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。
または
<paramref name="count" /> が 0 未満です。
または
<paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して、指定された処理を実行します。</summary>
      <param name="action">
        <see cref="T:System.Action`1" /> の各要素に対して実行する <see cref="T:System.Collections.Generic.List`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">コレクションの要素が変更されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1.Enumerator" /> の <see cref="T:System.Collections.Generic.List`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピーを作成します。</summary>
      <param name="index">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.Generic.List`1" /> のインデックス番号。</param>
      <param name="count">範囲内の要素の数。</param>
      <returns>コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピー。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス (0 から始まる) を返します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <paramref name="item" /> 全体を対象に <see cref="T:System.Collections.Generic.List`1" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> のうち指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <returns>
        <paramref name="item" /> から最後の要素までの <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="index" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Generic.List`1" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <returns>
        <paramref name="item" /> から始まって <see cref="T:System.Collections.Generic.List`1" /> 個の要素を格納する <paramref name="index" /> 内の要素の範囲内で <paramref name="count" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。
または
<paramref name="count" /> が 0 未満です。
または
<paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクトです。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>コレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に挿入します。</summary>
      <param name="index">新しい要素を挿入する位置の 0 から始まるインデックス。</param>
      <param name="collection">
        <see cref="T:System.Collections.Generic.List`1" /> に要素を挿入するコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <see langword="null" /> が参照型の場合、コレクションに格納する要素は <paramref name="T" /> であってもかまいません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最後に見つかったオブジェクトのインデックス (0 から始まる) を返します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <paramref name="item" /> が見つかった場合は、<see cref="T:System.Collections.Generic.List`1" /> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <returns>最初の要素から <paramref name="item" /> までの <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="index" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">検索対象の範囲内にある要素の数。</param>
      <returns>
        <paramref name="item" /> 個の要素を格納し、<see cref="T:System.Collections.Generic.List`1" /> の位置で終了する <paramref name="count" /> 内の要素の範囲内で <paramref name="index" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" /> の有効なインデックスの範囲外です。
または
<paramref name="count" /> が 0 未満です。
または
<paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.Generic.List`1" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" /> から削除するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <see langword="true" /> が正常に削除された場合は <paramref name="item" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.List`1" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary>指定した述語により定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> から削除される要素の数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> から要素の範囲を削除します。</summary>
      <param name="index">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">削除する要素の数を指定します。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 全体の要素の順序を反転させます。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>指定した範囲の要素の順序を反転させます。</summary>
      <param name="index">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">反転させる範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>既定の比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
      <exception cref="T:System.InvalidOperationException">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>指定した <see cref="T:System.Collections.Generic.List`1" /> を使用して、<see cref="T:System.Comparison`1" /> 全体内の要素を並べ替えます。</summary>
      <param name="comparison">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparison" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内の要素を並べ替えます。</summary>
      <param name="index">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count">並べ替える範囲の長さ。</param>
      <param name="comparer">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see langword="null" /> を使用する場合は <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。
または
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を指定していません。
または
<paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、<paramref name="comparer" /> は、項目をそれ自体と比較したときに 0 を返さなかった可能性があります。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <see cref="T:System.IComparable" /> 型の <paramref name="T" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを繰り返し処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーを開始する <paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。
または
<paramref name="array" /> には、0 から始まるインデックス番号がありません。
または
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの使用可能領域を超えています。
または
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを繰り返し処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="item">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <returns>新しい要素が挿入された位置です。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Object" /> 内で検索される <see cref="T:System.Collections.IList" />。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
      <param name="item">
        <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">
        <see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.ArgumentException">プロパティが設定されていて、<paramref name="value" /> が <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="item">
        <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> の要素を新しい配列にコピーします。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> の要素のコピーを格納する配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 内にある実際の要素数がしきい値未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致するかどうかを調べます。</summary>
      <param name="match">要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <returns>
        <see langword="true" /> 内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> は <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>オブジェクトの先入れ先出しコレクションを表します。</summary>
      <typeparam name="T">キュー内の要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">新しい <see cref="T:System.Collections.Generic.Queue`1" /> に要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>ある要素が <see cref="T:System.Collections.Generic.Queue`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Queue`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Queue`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.Queue`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除し、返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭から削除されたオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の末尾にオブジェクトを追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" /> に追加するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を列挙します。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> のうち、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.Queue`1" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Queue`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除せずに返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を新しい配列にコピーします。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> からコピーした要素を格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <param name="result" />
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <param name="result" />
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>キーに基づいて並べ替えられた、キーと値のペアのコレクションを表します。</summary>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>空で、キーの型の既定の <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 実装を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>空で、指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を使用してキーを比較する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> から要素をコピーして格納し、キーの型の既定の <see cref="T:System.Collections.Generic.IDictionary`2" /> 実装を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> 実装を使用してキーを比較する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> からすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.IComparer`1" /> の要素の順序付けに使用する <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IComparer`1" /> の要素の順序付けに使用する <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>指定したキーの要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているかどうかを確認します。</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>指定した値の要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているかどうかを確認します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 構造体の配列に <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 要素をコピーします。</summary>
      <param name="array">現在の <see cref="T:System.Collections.Generic.KeyValuePair`2" /> からコピーされる要素のコピー先である <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 構造体の 1 次元配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素を列挙します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>列挙子の現在位置の要素を <see cref="T:System.Collections.DictionaryEntry" /> 構造体として取得します。</summary>
      <returns>
        <see cref="T:System.Collections.DictionaryEntry" /> 構造体としての、ディクショナリの現在の位置にあるコレクション内の要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>列挙子の現在位置の要素のキーを取得します。</summary>
      <returns>コレクション内の列挙子の現在位置にある要素のキー。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>列挙子の現在位置の要素の値を取得します。</summary>
      <returns>コレクション内の列挙子の現在位置にある要素の値。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key">取得または設定する値のキー。</param>
      <returns>指定されたキーに関連付けられている値。 指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを持つ新しい要素を作成します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティが取得され、<paramref name="key" /> がコレクションに存在しません。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーのコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 内のキーを反映する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2" /> にキーが反映される <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素を既存の 1 次元の配列にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>指定した値が <see cref="T:System.Collections.Generic.ICollection`1" /> に格納されているかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns>
        <see langword="true" /> で項目が見つかった場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <returns>項目が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。 このメソッドは、項目が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合にも <see langword="false" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。
または
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 内のキーを格納している <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> に追加する <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定のキーと値が格納されているかどうかを判断します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 内で検索される <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <returns>
        <see langword="true" /> が <paramref name="keyValuePair" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で最初に見つかった指定の要素を削除します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> から削除する <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <returns>
        <see langword="true" /> が <paramref name="keyValuePair" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、<see langword="false" /> が <paramref name="keyValuePair" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> のキーを格納しているコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />内の値を格納しているコレクション。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる先の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value">追加する要素の値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> が、<see cref="T:System.Collections.IDictionary" /> のキーの型 <paramref name="TKey" /> に代入できない型です。

または -
<paramref name="value" /> が、<see cref="T:System.Collections.IDictionary" /> の値型 <paramref name="TValue" /> に代入できない型です。

または -
同じキーを持つ要素が、<see cref="T:System.Collections.IDictionary" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">取得する要素のキー。</param>
      <returns>指定したキーを持つ要素。<see langword="null" /> がディクショナリに存在しない場合、または <paramref name="key" /> が <paramref name="key" /> のキーの型 <paramref name="TKey" /> に代入できない型である場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。

または -
値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドは、キーが見つかった場合は指定したキーに関連付けられている値を返し、それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値を返します。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値のコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 内の値を反映する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に値が反映される <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素を既存の 1 次元の配列にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> から要素がコピーされる先の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に指定された値が含まれているかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからない場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる先の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 内の値を格納している <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary>関連付けられた <see cref="T:System.Collections.Generic.IComparer`1" /> 実装に基づいて、キーにより並べ替えられた、キーと値のペアのコレクションを表します。</summary>
      <typeparam name="TKey">コレクション内のキーの型。</typeparam>
      <typeparam name="TValue">コレクション内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary>空で、既定の初期量を備え、既定の <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>空で、既定の初期量を備え、指定した <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。

または -
キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedList`2" /> からコピーした要素を格納し、コピーした要素の数を格納できるだけの容量を備え、既定の <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedList`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> に、1 つ以上の重複するキーが格納されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedList`2" /> からコピーした要素を格納し、コピーした要素の数を格納できるだけの容量を備え、指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedList`2" />。</param>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。

または -
キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> に、1 つ以上の重複するキーが格納されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary>空で、指定した初期量を備え、既定の <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>空で、指定した初期量を備え、指定した <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> が格納できる要素数の初期値。</param>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。

または -
キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.SortedList`2" /> に追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedList`2" /> に既に存在します。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納できる要素の数を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納できる要素の数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> は <see cref="P:System.Collections.Generic.SortedList`2.Count" /> より小さい値に設定されます。</exception>
      <exception cref="T:System.OutOfMemoryException">システムで使用可能なメモリが不足しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> からすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary>並べ替えられたリストの <see cref="T:System.Collections.Generic.IComparer`1" /> を取得します。</summary>
      <returns>現在の <see cref="T:System.IComparable`1" /> の <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> に特定のキーが格納されているかどうかを判断します。</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> の <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary>指定したキーを検索し、<see cref="T:System.Collections.Generic.SortedList`2" /> 全体内でそのキーが見つかった位置の 0 から始まるインデックスを返します。</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索されるキー。</param>
      <returns>
        <paramref name="key" /> 全体内で <see cref="T:System.Collections.Generic.SortedList`2" /> が見つかった場合は、見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary>指定した値を検索し、<see cref="T:System.Collections.Generic.SortedList`2" /> 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索される値。  参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" /> 全体を対象に <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary>指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key">値を取得または設定する対象のキー。</param>
      <returns>指定されたキーに関連付けられている値。 指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを使用して新しい要素を作成します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティが取得されましたが、コレクション内に <paramref name="key" /> が存在しません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary>並べ替えられた順序で、<see cref="T:System.Collections.Generic.SortedList`2" /> 内のキーを含むコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 内のキーを格納している <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.Generic.SortedList`2" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、元の <see langword="false" /> で <paramref name="key" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.SortedList`2" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="index" /> が <see cref="P:System.Collections.Generic.SortedList`2.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に、キー/値ペアを追加します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> に追加する <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定の要素が格納されているかどうかを判断します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索される <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
      <returns>
        <see langword="true" /> が <paramref name="keyValuePair" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.ICollection`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で最初に見つかった特定のキー/値ペアを削除します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> から削除する <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
      <returns>
        <see langword="true" /> が <paramref name="keyValuePair" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、元の <see langword="false" /> で <paramref name="keyValuePair" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />内の値を格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>読み取り専用のディクショナリのキーを含む列挙可能なコレクションを取得します。</summary>
      <returns>読み取り専用のディクショナリのキーを含む列挙可能なコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>読み取り専用のディクショナリの値を含む列挙可能なコレクションを取得します。</summary>
      <returns>読み取り専用のディクショナリの値を含む列挙可能なコレクション。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキーとして使用する <see cref="T:System.Object" />。</param>
      <param name="value">追加する要素の値として使用する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> が、<see cref="T:System.Collections.IDictionary" /> のキーの型 <paramref name="TKey" /> に代入できない型です。

または -
<paramref name="value" /> が、<see cref="T:System.Collections.IDictionary" /> の値型 <paramref name="TValue" /> に代入できない型です。

または -
同じキーを持つ要素が、<see cref="T:System.Collections.IDictionary" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">取得または設定する要素のキー。</param>
      <returns>指定したキーを持つ要素。<see langword="null" /> がディクショナリに存在しない場合、または <paramref name="key" /> が <paramref name="key" /> のキーの型 <paramref name="TKey" /> に代入できない型である場合は <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.SortedList`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。

または -
値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.SortedList`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <param name="key">値を取得する対象のキー。</param>
      <param name="value">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
      <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>一定の並べ替え順序で管理されたオブジェクトのコレクションを表します。</summary>
      <typeparam name="T">セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>指定された比較子を使用する <see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer">オブジェクトの比較に使用する既定の比較子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定の列挙可能なコレクションからコピーされた要素を格納する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">コピーする列挙可能なコレクション。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>指定の列挙可能なコレクションからコピーされた要素を格納し、指定された比較子を使用する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">コピーする列挙可能なコレクション。</param>
      <param name="comparer">オブジェクトの比較に使用する既定の比較子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを格納する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトをシリアル化するために必要な情報を格納しているオブジェクト。</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する構造体。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>要素をセットに追加し、正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item">セットに追加する要素。</param>
      <returns>
        <paramref name="item" /> がセットに追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>セットからすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> の中の値を順序付けするために使用する <see cref="T:System.Collections.Generic.IComparer`1" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> の中の値を順序付けするために使用する比較演算子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>セットに特定の要素が含まれているかどうかを判断します。</summary>
      <param name="item">セット内で検索する要素。</param>
      <returns>セットに <paramref name="item" /> が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。</param>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedSet`1" /> の要素数が、コピー先の配列に格納できる要素の数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentException">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>指定された数の要素を <see cref="T:System.Collections.Generic.SortedSet`1" /> から互換性のある 1 次元配列にコピーします。コピー操作は、指定された配列インデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count">コピーする要素の数。</param>
      <exception cref="T:System.ArgumentException">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。

または -
<paramref name="count" /> が 0 未満です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> にある要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> にある要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary>個々のセットを含んだコレクションを作成する際に使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを返します。</summary>
      <returns>セットのコレクションを作成するための比較子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>個々のセットを含んだコレクションを作成する際に使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを、指定された比較子に従って返します。</summary>
      <param name="memberEqualityComparer">戻り値となる比較子の作成に使用する比較子。</param>
      <returns>セットのコレクションを作成するための比較子。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトの要素を列挙します。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedSet`1" /> コレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> をソートされた順序で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトをシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 内のサブセットのビューを返します。</summary>
      <param name="lowerValue">目的のビューの範囲の最小値。</param>
      <param name="upperValue">目的のビューの範囲の最大値。</param>
      <returns>指定された範囲の値だけを含むサブセット ビュー。</returns>
      <exception cref="T:System.ArgumentException">比較子に照らすと、<paramref name="lowerValue" /> が <paramref name="upperValue" /> を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">ビューで試行された操作が、<paramref name="lowerValue" /> および <paramref name="upperValue" /> で指定された範囲外です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションに存在する要素だけが含まれるように現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> の真のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションの真のスーパーセット (真上位集合) であるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> の真のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>比較子によって定義された、<see cref="T:System.Collections.Generic.SortedSet`1" /> 内の最大値を取得します。</summary>
      <returns>セット内の最大値。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>比較子によって定義された、<see cref="T:System.Collections.Generic.SortedSet`1" /> 内の最小値を取得します。</summary>
      <returns>セット内の最小値。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>指定した項目を <see cref="T:System.Collections.Generic.SortedSet`1" /> から削除します。</summary>
      <param name="item">削除する要素。</param>
      <returns>要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>指定の述語によって定義された条件に一致するすべての要素を <see cref="T:System.Collections.Generic.SortedSet`1" /> から削除します。</summary>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> コレクションから削除された要素数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を逆順で反復処理する <see cref="T:System.Collections.Generic.SortedSet`1" /> を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を逆順で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <returns>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに項目を追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.ICollection" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentException">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary>指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue">検索する値。</param>
      <param name="actualValue">セット内の検索で見つかった値。検索で一致するものがなかった場合は、既定の T の値。</param>
      <returns>検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを、現在のオブジェクトまたは指定したコレクションのいずれかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>指定した同じ型のインスタンスの、後入れ先出し (LIFO) の可変サイズのコレクションを表します。</summary>
      <typeparam name="T">スタック内の要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">要素のコピー元のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>空で、指定した初期量または既定の初期量のうち大きい方の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>ある要素が <see cref="T:System.Collections.Generic.Stack`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Stack`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>既存の 1 次元の <see cref="T:System.Collections.Generic.Stack`1" /> に <see cref="T:System.Array" /> をコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Stack`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.Stack`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の要素を列挙します。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> のうち、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.Stack`1" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。 このクラスは継承できません。</summary>
      <exception cref="T:System.InvalidOperationException">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除せずに返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> の一番上にあるオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除し、返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> の一番上から削除されたオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にオブジェクトを挿入します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" /> にプッシュするオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。

または -
<paramref name="array" /> には、0 から始まるインデックス番号がありません。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。

または -
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。  <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> を新しい配列にコピーします。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> の要素のコピーを格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <param name="result" />
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <param name="result" />
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary>2 つのコレクション オブジェクトの構造比較を実行するオブジェクトを提供します。</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary>2 つのオブジェクトの構造比較を実行する定義済みのオブジェクトを取得します。</summary>
      <returns>2 つのコレクション オブジェクトの構造比較に使用される定義済みのオブジェクト。</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary>2 つのオブジェクトの構造上の等価性を比較する定義済みのオブジェクトを取得します。</summary>
      <returns>2 つのコレクション オブジェクトの構造上の等価性を比較するのに使用される定義済みのオブジェクト。</returns>
    </member>
  </members>
</doc>
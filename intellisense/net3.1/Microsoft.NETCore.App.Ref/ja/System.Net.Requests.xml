<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Requests</name>
  </assembly>
  <members>
    <member name="T:System.Net.AuthenticationManager">
      <summary>クライアント認証プロセス中に呼び出される認証モジュールを管理します。</summary>
    </member>
    <member name="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>認証要求に応答できる最初のモジュールを検出するには、各登録済み認証モジュールを呼び出します。</summary>
      <param name="challenge">インターネット リソースが返すチャレンジ。</param>
      <param name="request">認証チャレンジを開始した <see cref="T:System.Net.WebRequest" />。</param>
      <param name="credentials">この要求と関連付けられている <see cref="T:System.Net.ICredentials" />。</param>
      <returns>承認試行の結果を格納する <see cref="T:System.Net.Authorization" /> クラスのインスタンス。 チャレンジに応答する認証モジュールがない場合、このメソッドは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="challenge" /> は <see langword="null" />です。

または -
<paramref name="request" /> は <see langword="null" />です。

または -
<paramref name="credentials" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Net.AuthenticationManager.CredentialPolicy">
      <summary>
        <see cref="T:System.Net.HttpWebRequest" /> クラスを使用して行われるリソース要求に使用される資格情報ポリシーを取得または設定します。</summary>
      <returns>要求と共に資格情報が送信されるかどうかを決定する <see cref="T:System.Net.ICredentialPolicy" /> インターフェイスを実装するオブジェクト。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.AuthenticationManager.CustomTargetNameDictionary">
      <summary>
        <see cref="T:System.Net.WebRequest" /> およびその派生クラスを使用して行われた要求に対する Kerberos 認証中にホストを識別するために使用されるサービス プリンシパル名 (SPN) を格納したディクショナリを取得します。</summary>
      <returns>ホスト情報で構成されているキーの SPN 値を格納している書き込み可能な <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
    </member>
    <member name="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>要求の事前認証を行います。</summary>
      <param name="request">インターネット リソースへの <see cref="T:System.Net.WebRequest" />。</param>
      <param name="credentials">要求に関連付けられている <see cref="T:System.Net.ICredentials" />。</param>
      <returns>要求を事前認証できる場合は <see cref="T:System.Net.Authorization" /> クラスのインスタンス、それ以外の場合は <see langword="null" /> です。 <paramref name="credentials" /> が <see langword="null" /> の場合、このメソッドは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)">
      <summary>認証マネージャーに認証モジュールを登録します。</summary>
      <param name="authenticationModule">認証マネージャーに登録する <see cref="T:System.Net.IAuthenticationModule" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationModule" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Net.AuthenticationManager.RegisteredModules">
      <summary>認証マネージャーに登録されている認証モジュールの一覧を取得します。</summary>
      <returns>登録済み認証モジュールの読み取りを有効にする <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)">
      <summary>登録済みモジュールの一覧から指定した認証モジュールを削除します。</summary>
      <param name="authenticationModule">登録されたモジュールの一覧から削除する <see cref="T:System.Net.IAuthenticationModule" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationModule" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">指定した <see cref="T:System.Net.IAuthenticationModule" /> は登録されていません。</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.String)">
      <summary>登録済みモジュールの一覧から指定した認証方式の認証モジュールを削除します。</summary>
      <param name="authenticationScheme">削除するモジュールの認証方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationScheme" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">この認証方式のモジュールは登録されていません。</exception>
    </member>
    <member name="T:System.Net.Authorization">
      <summary>インターネット サーバー用の認証メッセージが含まれています。</summary>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String)">
      <summary>指定した承認メッセージを使用して、<see cref="T:System.Net.Authorization" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="token">サーバーで予期される暗号化された承認メッセージ。</param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean)">
      <summary>指定した承認メッセージおよび完了ステータスを使用して、<see cref="T:System.Net.Authorization" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="token">サーバーで予期される暗号化された承認メッセージ。</param>
      <param name="finished">承認試行の完了ステータス。 承認試行が完了した場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean,System.String)">
      <summary>
        <see cref="T:System.Net.Authorization" /> クラスの新しいインスタンスを、指定した承認メッセージ、完了ステータス、接続グループ識別子を使用して作成します。</summary>
      <param name="token">サーバーで予期される暗号化された承認メッセージ。</param>
      <param name="finished">承認試行の完了ステータス。 承認試行が完了した場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</param>
      <param name="connectionGroupId">この承認方式のみにバインドされるプライベート クライアント サーバー接続を作成するために使用できる一意識別子。</param>
    </member>
    <member name="P:System.Net.Authorization.Complete">
      <summary>承認の完了ステータスを取得します。</summary>
      <returns>認証処理が完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Authorization.ConnectionGroupId">
      <summary>ユーザー固有接続の一意識別子を取得します。</summary>
      <returns>認証エンティティに接続を関連付ける一意の文字列。</returns>
    </member>
    <member name="P:System.Net.Authorization.Message">
      <summary>認証チャレンジに応答して、サーバーに返されるメッセージを取得します。</summary>
      <returns>認証チャレンジに応答してサーバーに返されるメッセージ。</returns>
    </member>
    <member name="P:System.Net.Authorization.MutuallyAuthenticated">
      <summary>相互認証が行われたかどうかを示す <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
      <returns>クライアントとサーバーの両方が認証された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.Authorization.ProtectionRealm">
      <summary>
        <see cref="P:System.Net.Authorization.Message" /> プロパティで認証できる URI (Uniform Resource Identifier) のプレフィックスを取得または設定します。</summary>
      <returns>URI プリフィックスを格納する文字列の配列。</returns>
    </member>
    <member name="T:System.Net.Cache.HttpCacheAgeControl">
      <summary>
        <see cref="T:System.Net.HttpWebRequest" /> オブジェクトを使用して取得されるリソースのキャッシュ動作を制御する時刻の値の意味を指定します。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAge">
      <summary>コンテンツは、この値で指定された世代より古くなるまで、キャッシュから取得できます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMaxStale">
      <summary>
        <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge" /> および <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale" />。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMinFresh">
      <summary>
        <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge" /> および <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh" />。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxStale">
      <summary>コンテンツは、有効期限が切れた後も、この値で指定された時間が経過するまで、キャッシュから取得できます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MinFresh">
      <summary>コンテンツは、残りの有効期間がこの値で指定された時間以上の場合、キャッシュから取得できます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.None">
      <summary>内部使用のみ。 このパラメーターを使用しようとすると、<see cref="T:System.ArgumentException" /> がスローされます。</summary>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCacheLevel">
      <summary>ハイパーテキスト転送プロトコル (HTTP: Hypertext Transfer protocol) を使用して取得されるリソースのキャッシュ動作を指定します。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.BypassCache">
      <summary>サーバーを使用して要求に応じます。 クライアントとサーバー間では、エントリはキャッシュから取得したり、キャッシュに追加、またはキャッシュから削除したりされません。 クライアントとサーバー間では、エントリはキャッシュから取得したり、キャッシュに追加、またはキャッシュから削除したりされません。 これは、.NET Framework と共に配布されるコンピューターの構成ファイルで指定されている既定のキャッシュ動作です。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheIfAvailable">
      <summary>リソースが利用可能な場合は、キャッシュからリソースの要求に応じます。それ以外の場合は、リソースの要求をサーバーに送信します。 要求されたアイテムがクライアントとサーバー間のキャッシュにある場合は、その中間キャッシュから要求に応じることもあります。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOnly">
      <summary>ローカルにキャッシュされたリソースを使用して要求に応じ、キャッシュにないアイテムの要求は送信しません。 このキャッシュ ポリシー レベルが指定されている場合、アイテムがクライアントのキャッシュになければ <see cref="T:System.Net.WebException" /> 例外がスローされます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOrNextCacheOnly">
      <summary>ローカル コンピューターのキャッシュまたはローカル エリア ネットワーク上のリモート キャッシュから、リソースの要求に応じます。 要求に応じることができない場合は、<see cref="T:System.Net.WebException" /> 例外がスローされます。 HTTP キャッシュ プロトコルの場合、これは <see langword="only-if-cached" /> キャッシュ制御ディレクティブを使用して実現されます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Default">
      <summary>キャッシュされたリソースのコピーを使用するか、リソースの要求をサーバーに送信して、リソースの要求に応じます。 実行される動作は、現在のキャッシュ ポリシーとキャッシュ内のコンテンツの世代によって決まります。 これが、ほとんどのアプリケーションで使用されるキャッシュ レベルです。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.NoCacheNoStore">
      <summary>キャッシュのリソースを使用して要求に応じることはなく、リソースをキャッシュしません。 リソースがローカル キャッシュに存在する場合は、削除されます。 このポリシー レベルは、中間キャッシュに、リソースをキャッシュから削除する必要があることを示します。 HTTP キャッシュ プロトコルの場合、これは no-cache キャッシュ制御ディレクティブを使用して実現されます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Refresh">
      <summary>サーバーを使用するか、またはローカル キャッシュ以外のキャッシュを使用して要求に応じます。 中間キャッシュが要求を満たす前に、そのキャッシュは、サーバーに対してキャッシュされたエントリの再検証を行う必要があります。 HTTP キャッシュ プロトコルの場合、これは max-age = 0 キャッシュ制御ディレクティブと no-cache <see langword="Pragma" /> ヘッダーを使用して実現されます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Reload">
      <summary>サーバーを使用して要求に応じます。 応答は、キャッシュに保存される可能性があります。 HTTP キャッシュ プロトコルの場合、これは no-cache キャッシュ制御ディレクティブと no-cache <see langword="Pragma" /> ヘッダーを使用して実現されます。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Revalidate">
      <summary>キャッシュ内のリソースのコピーとサーバー上のコピーを比較します。 サーバー上のコピーが新しい場合は、要求を満たすために使用され、キャッシュ内のコピーは置き換えられます。 キャッシュ内のコピーがサーバー上のコピーと同じ場合、キャッシュされたコピーが使用されます。 HTTP キャッシュ プロトコルの場合、条件付き要求を使用してこの処理が実行されます。</summary>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCachePolicy">
      <summary>
        <see cref="T:System.Net.HttpWebRequest" /> オブジェクトを使用して取得されるリソースに対するアプリケーションのキャッシュ要件を定義します。</summary>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor">
      <summary>
        <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.DateTime)">
      <summary>キャッシュ同期日時を指定して、<see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="cacheSyncDate">キャッシュされたリソースの再検証が必要となる日時を指定する <see cref="T:System.DateTime" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan)">
      <summary>保存期間の制御と日時の値を指定して、<see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="cacheAgeControl">
        <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 列挙値、つまり <see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxAge" />、<see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxStale" />、または <see cref="F:System.Net.Cache.HttpCacheAgeControl.MinFresh" /> の 1 つ。</param>
      <param name="ageOrFreshOrStale">期間を指定する <see cref="T:System.TimeSpan" /> 値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="cacheAgeControl" /> パラメーターに指定した値が、このコントラクターでは使用できません。</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan)">
      <summary>有効期限、保存期間の制御値、日時の値を指定して、<see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="cacheAgeControl">
        <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 値。</param>
      <param name="maxAge">リソースの有効期限を指定する <see cref="T:System.TimeSpan" /> 値。</param>
      <param name="freshOrStale">期間を指定する <see cref="T:System.TimeSpan" /> 値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="cacheAgeControl" /> パラメーターに指定された値が無効です。</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan,System.DateTime)">
      <summary>有効期限、保存期間の制御値、日時の値、キャッシュ同期日時を指定して、<see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="cacheAgeControl">
        <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 値。</param>
      <param name="maxAge">リソースの有効期限を指定する <see cref="T:System.TimeSpan" /> 値。</param>
      <param name="freshOrStale">期間を指定する <see cref="T:System.TimeSpan" /> 値。</param>
      <param name="cacheSyncDate">キャッシュされたリソースの再検証が必要となる日時を指定する <see cref="T:System.DateTime" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpRequestCacheLevel)">
      <summary>キャッシュ ポリシーを指定して、<see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="level">
        <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 値。</param>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.CacheSyncDate">
      <summary>このインスタンスのキャッシュ同期日時を取得します。</summary>
      <returns>このインスタンスが作成されたときに指定された日時に設定された <see cref="T:System.DateTime" />。 日時が指定されなかった場合、このプロパティの値は <see cref="F:System.DateTime.MinValue" /> です。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.Level">
      <summary>このインスタンスが作成されたときに指定された <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 値を取得します。</summary>
      <returns>
        <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> オブジェクトを使用して取得されたリソースのキャッシュ動作を指定する <see cref="T:System.Net.HttpWebRequest" /> 値。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge">
      <summary>キャッシュから返されるリソースに許可されている有効期限を取得します。</summary>
      <returns>このインスタンスが作成されたときに指定された有効期限の値に設定された <see cref="T:System.TimeSpan" /> 値。 日時が指定されなかった場合、このプロパティの値は <see cref="F:System.DateTime.MinValue" /> です。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale">
      <summary>キャッシュから返されるリソースに許可される延長期限を取得します。</summary>
      <returns>このインスタンスが作成されたときに指定された延長期限の値に設定された <see cref="T:System.TimeSpan" />。 日時が指定されなかった場合、このプロパティの値は <see cref="F:System.DateTime.MinValue" /> です。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh">
      <summary>キャッシュから返されるリソースに許可される短縮期限を取得します。</summary>
      <returns>このインスタンスが作成されたときに指定された短縮期限を指定する <see cref="T:System.TimeSpan" /> 値。 日時が指定されなかった場合、このプロパティの値は <see cref="F:System.DateTime.MinValue" /> です。</returns>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスのプロパティ値を格納している <see cref="T:System.String" /> 値。</returns>
    </member>
    <member name="T:System.Net.FileWebRequest">
      <summary>
        <see cref="T:System.Net.WebRequest" /> クラスのファイル システムの実装を提供します。</summary>
    </member>
    <member name="M:System.Net.FileWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスと <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの指定したインスタンスから、<see cref="T:System.Net.FileWebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要な情報を格納する <see cref="T:System.Net.FileWebRequest" /> オブジェクト。</param>
      <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトに関連付けられているシリアル化ストリームの転送元を格納する <see cref="T:System.Net.FileWebRequest" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.FileWebRequest.Abort">
      <summary>インターネット リソースへの要求を取り消します。</summary>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を開始します。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">この要求の状態情報を格納するオブジェクト。</param>
      <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FileWebRequest.Method" /> プロパティが <c>GET</c> で、アプリケーションがストリームに書き込んでいます。</exception>
      <exception cref="T:System.InvalidOperationException">ストリームが、<see cref="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の前回の呼び出しで使用されています。</exception>
      <exception cref="T:System.ApplicationException">書き込みストリームが使用できません。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="T:System.Net.FileWebRequest" /> が中止されました。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>ファイル システム リソースへの非同期要求を開始します。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">この要求の状態情報を格納するオブジェクト。</param>
      <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="T:System.Net.FileWebRequest" /> が中止されました。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.ConnectionGroupName">
      <summary>要求に対して使用する接続グループの名前を取得または設定します。 このプロパティは、今後使用するために予約されています。</summary>
      <returns>要求で使用する接続グループの名前。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentLength">
      <summary>送信しているデータのコンテンツ長を取得または設定します。</summary>
      <returns>送信している要求データのバイト数。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.FileWebRequest.ContentLength" /> が 0 未満です。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentType">
      <summary>送信しているデータのコンテンツ タイプを取得または設定します。 このプロパティは、今後使用するために予約されています。</summary>
      <returns>送信しているデータのコンテンツ タイプ。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Credentials">
      <summary>この要求に関連付けられている資格情報を取得または設定します。 このプロパティは、今後使用するために予約されています。</summary>
      <returns>この要求に関連付けられている認証資格情報を格納する <see cref="T:System.Net.ICredentials" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>アプリケーションがデータを書き込むために使用する <see cref="T:System.IO.Stream" /> インスタンスの非同期要求を終了します。</summary>
      <param name="asyncResult">ストリームの保留中の要求を参照する <see cref="T:System.IAsyncResult" />。</param>
      <returns>アプリケーションがデータを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>ファイル システム リソースへの非同期要求を終了します。</summary>
      <param name="asyncResult">応答に対する保留中の要求を参照する <see cref="T:System.IAsyncResult" />。</param>
      <returns>ファイル システム リソースからの応答を格納する <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.FileWebRequest.GetRequestStream">
      <summary>ファイル システム リソースにデータを書き込む <see cref="T:System.IO.Stream" /> オブジェクトを返します。</summary>
      <returns>ファイル システム リソースにデータを書き込む <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.Net.WebException">要求がタイムアウトしました。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetRequestStreamAsync">
      <summary>非同期操作としてファイル システム リソースにデータを書き込むストリームを返します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">ストリームが、<see cref="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の前回の呼び出しで使用されています。

または -

ストリームでは、要求の前に既に応答が受信されています。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FileWebRequest.Method" /> プロパティは GET または HEAD です。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="T:System.Net.FileWebRequest" /> が中止されました。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetResponse">
      <summary>ファイル システム要求への応答を返します。</summary>
      <returns>ファイル システム リソースからの応答を格納する <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.Net.WebException">要求がタイムアウトしました。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetResponseAsync">
      <summary>非同期操作としてファイル システム要求への応答を返します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="T:System.Net.FileWebRequest" /> が中止されました。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.Headers">
      <summary>要求に関連付けられているヘッダーの名前/値ペアのコレクションを取得します。 このプロパティは、今後使用するために予約されています。</summary>
      <returns>要求と関連付けられたヘッダーの名前/値ペアを格納する <see cref="T:System.Net.WebHeaderCollection" />。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Method">
      <summary>要求に使用するプロトコル メソッドを取得または設定します。 このプロパティは、今後使用するために予約されています。</summary>
      <returns>要求で使用するプロトコル メソッド。</returns>
      <exception cref="T:System.ArgumentException">メソッドが無効です。

または -

メソッドがサポートされていません。

または -

複数のメソッドが指定されました。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.PreAuthenticate">
      <summary>要求を事前認証するかどうかを示す値を取得または設定します。 このプロパティは、今後使用するために予約されています。</summary>
      <returns>事前認証を行う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Proxy">
      <summary>要求に使用するネットワーク プロキシを取得または設定します。 このプロパティは、今後使用するために予約されています。</summary>
      <returns>要求に使用するネットワーク プロキシを示す <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.RequestUri">
      <summary>要求の URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>要求の URI を格納している <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.Net.FileWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、<see cref="T:System.Net.FileWebRequest" /> をシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> のシリアル化されたデータを保持している <see cref="T:System.Net.FileWebRequest" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Net.FileWebRequest" /> に関連付けられているシリアル化ストリームの転送先を格納している <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="P:System.Net.FileWebRequest.Timeout">
      <summary>要求がタイムアウトするまでの時間を取得または設定します。</summary>
      <returns>要求がタイムアウトするまでのミリ秒単位の時間、または要求がタイムアウトしないことを示す値 <see cref="F:System.Threading.Timeout.Infinite" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定した値が 0 以下のため <see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.UseDefaultCredentials">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">既定の資格情報は、ファイル URI (Uniform Resource Identifier) に対してはサポートされません。</exception>
    </member>
    <member name="T:System.Net.FileWebResponse">
      <summary>
        <see cref="T:System.Net.WebResponse" /> クラスのファイル システムの実装を提供します。</summary>
    </member>
    <member name="M:System.Net.FileWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスと <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの指定したインスタンスから、<see cref="T:System.Net.FileWebResponse" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Net.FileWebResponse" /> インスタンス。</param>
      <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースを格納する <see cref="T:System.Net.FileWebResponse" /> クラスのインスタンス。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.Close">
      <summary>応答ストリームを閉じます。</summary>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentLength">
      <summary>ファイル システム リソースのコンテンツ長を取得します。</summary>
      <returns>ファイル システム リソースから返されるバイト数。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentType">
      <summary>ファイル システム リソースのコンテンツ タイプを取得します。</summary>
      <returns>値 "binary/octet-stream"。</returns>
    </member>
    <member name="M:System.Net.FileWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.GetResponseStream">
      <summary>ファイル システム リソースからデータ ストリームを返します。</summary>
      <returns>ファイル システム リソースからデータを読み取る <see cref="T:System.IO.Stream" />。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.Headers">
      <summary>応答に関連付けられているヘッダーの名前/値ペアのコレクションを取得します。</summary>
      <returns>応答に関連付けられているヘッダーの名前/値ペアを格納する <see cref="T:System.Net.WebHeaderCollection" />。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ResponseUri">
      <summary>応答したファイル システム リソースの URI を取得します。</summary>
      <returns>応答したファイル システム リソースの URI を格納する <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.SupportsHeaders">
      <summary>
        <see cref="P:System.Net.FileWebResponse.Headers" /> プロパティが <see cref="T:System.Net.FileWebResponse" /> インスタンスによってサポートされているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="P:System.Net.FileWebResponse.Headers" /> プロパティが <see cref="T:System.Net.FileWebResponse" /> インスタンスによってサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.FileWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスに、<see cref="T:System.Net.FileWebResponse" /> をシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> のシリアル化されたデータを保持している <see cref="T:System.Net.FileWebResponse" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームの転送先を格納している <see cref="T:System.Net.FileWebResponse" />。</param>
    </member>
    <member name="T:System.Net.FtpStatusCode">
      <summary>ファイル転送プロトコル (FTP: File Transfer Protocol) 操作に対して返されるステータス コードを指定します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.AccountNeeded">
      <summary>サーバー上のユーザー アカウントが必要なことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedLocalProcessingError">
      <summary>要求動作の完了を妨げるエラーが発生したことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedUnknownPageType">
      <summary>指定されたページ型が不明であるため、要求された動作を実行できないことを示します。 ページ型は、RFC 959 Section 3.1.2.3 に記載されています。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFilenameNotAllowed">
      <summary>指定されたファイルに対して、要求された動作を実行できないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailable">
      <summary>ファイルが使用できないため、指定されたファイルに対して、要求された動作を実行できないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailableOrBusy">
      <summary>ファイルが使用できないか使用中であるため、指定されたファイルに対して、要求された動作を実行できないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenInsufficientSpace">
      <summary>サーバー上の領域が不足しているため、要求された動作を実行できないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ArgumentSyntaxError">
      <summary>1 つ以上のコマンド引数に構文エラーがあることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.BadCommandSequence">
      <summary>コマンドの順序が正しい順序ではないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CantOpenData">
      <summary>データ接続を開くことができないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingControl">
      <summary>サーバーが制御接続を閉じていることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingData">
      <summary>サーバーがデータ接続を閉じていて、要求されたファイルの動作が成功したことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandExtraneous">
      <summary>必要がないため、サーバーでそのコマンドが実装されていないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandNotImplemented">
      <summary>FTP サーバーでそのコマンドが実装されていないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandOK">
      <summary>コマンドが正常に終了したことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandSyntaxError">
      <summary>コマンドに構文エラーがあるか、サーバーで認識されるコマンドではないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ConnectionClosed">
      <summary>接続が閉じられていることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.DataAlreadyOpen">
      <summary>データ接続が既に開かれていて、要求された転送が開始していることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.DirectoryStatus">
      <summary>ディレクトリの状態を示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.EnteringPassive">
      <summary>サーバーがパッシブ モードになったことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionAborted">
      <summary>要求された動作を実行できないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionOK">
      <summary>要求されたファイルの動作が正常に終了したことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileCommandPending">
      <summary>要求されたファイルの動作に追加情報が必要であることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileStatus">
      <summary>ファイルの状態を示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.LoggedInProceed">
      <summary>ユーザーがログインしておりコマンドを送信できることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.NeedLoginAccount">
      <summary>サーバーがログイン アカウントの入力を要求していることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.NotLoggedIn">
      <summary>サーバーにログイン情報を送信する必要があることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.OpeningData">
      <summary>サーバーがデータ接続を開いていることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.PathnameCreated">
      <summary>要求されたパス名が作成されたことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.RestartMarker">
      <summary>応答にリスタート マーカー応答が含まれていることを示します。 この状態に関連付けられている説明のテキストには、ユーザー データ ストリームのマーカーとサーバーのマーカーが含まれています。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendPasswordCommand">
      <summary>サーバーがパスワードの入力を要求していることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendUserCommand">
      <summary>サーバーはユーザー ログイン操作ができる状態であることを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServerWantsSecureSession">
      <summary>クライアントで指定された認証機構をサーバーが受け入れ、セキュリティ データの交換が完了したことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceNotAvailable">
      <summary>サービスが使用できないことを示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceTemporarilyNotAvailable">
      <summary>サービスが現在使用できないことを示します。しばらくしてから要求してください。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SystemType">
      <summary>IANA (Internet Assigned Numbers Authority) で発行される Assigned Numbers ドキュメントで公開されているシステム名を使用するシステム タイプ名を示します。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.Undefined">
      <summary>完全を期すために含まれており、この値がサーバーから返されることはありません。</summary>
    </member>
    <member name="T:System.Net.FtpWebRequest">
      <summary>ファイル転送プロトコル (FTP: File Transfer Protocol) クライアントを実装します。</summary>
    </member>
    <member name="M:System.Net.FtpWebRequest.Abort">
      <summary>非同期の FTP 操作を終了します。</summary>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>書き込み用に、要求のコンテンツ ストリームの非同期的なオープンを開始します。</summary>
      <param name="callback">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">操作に関する情報を格納するユーザー定義のオブジェクト。 このオブジェクトは、操作の完了時に <paramref name="callback" /> デリゲートに渡されます。</param>
      <returns>操作の状態を示す <see cref="T:System.IAsyncResult" /> インスタンス。</returns>
      <exception cref="T:System.InvalidOperationException">このメソッドまたは <see cref="M:System.Net.FtpWebRequest.GetRequestStream" /> の前回の呼び出しがまだ完了していません。</exception>
      <exception cref="T:System.Net.WebException">FTP サーバーへの接続を確立できませんでした。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FtpWebRequest.Method" /> プロパティが <see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>要求の非同期的な送信と、FTP サーバーからの応答の非同期的な受信を開始します。</summary>
      <param name="callback">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">操作に関する情報を格納するユーザー定義のオブジェクト。 このオブジェクトは、操作の完了時に <paramref name="callback" /> デリゲートに渡されます。</param>
      <returns>操作の状態を示す <see cref="T:System.IAsyncResult" /> インスタンス。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.FtpWebRequest.GetResponse" /> または <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> は、このインスタンスに対して既に呼び出されています。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ClientCertificates">
      <summary>FTP サーバーへの暗号化接続を確立するために使用する証明書を取得または設定します。</summary>
      <returns>クライアント証明書を格納している <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> オブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ConnectionGroupName">
      <summary>現在の要求を送信するために使用するサービス ポイントが含まれる接続グループの名前を取得または設定します。</summary>
      <returns>接続グループ名を格納している <see cref="T:System.String" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentLength">
      <summary>
        <see cref="T:System.Net.FtpWebRequest" /> クラスによって無視される値を取得または設定します。</summary>
      <returns>無視される必要がある <see cref="T:System.Int64" /> 値。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentOffset">
      <summary>この要求でダウンロードされるファイル内のバイト オフセットを取得または設定します。</summary>
      <returns>ファイルのオフセットをバイト単位で指定する <see cref="T:System.Int64" /> インスタンス。 既定値は 0 です。</returns>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">このプロパティに対して指定された値が 0 未満です。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentType">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">コンテンツ タイプの情報が FTP でサポートされていません。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Credentials">
      <summary>FTP サーバーとの通信に使用する資格情報を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> インスタンス。プロパティが設定されていない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Net.ICredentials" /> 以外の種類の <see cref="T:System.Net.NetworkCredential" /> が、設定操作に指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.DefaultCachePolicy">
      <summary>すべての FTP 要求に対する既定のキャッシュ ポリシーを定義します。</summary>
      <returns>FTP 要求に対するキャッシュ ポリシーを定義する <see cref="T:System.Net.Cache.RequestCachePolicy" />。</returns>
      <exception cref="T:System.ArgumentNullException">呼び出し元がこのプロパティを <see langword="null" /> に設定しようとしました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.EnableSsl">
      <summary>SSL 接続を使用する必要があるかどうかを指定する <see cref="T:System.Boolean" /> を取得または設定します。</summary>
      <returns>制御およびデータの伝送が暗号化されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">FTP サーバーへの接続が既に確立されています。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>
        <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> で開始された保留中の非同期操作を終了します。</summary>
      <param name="asyncResult">操作の開始時に返された <see cref="T:System.IAsyncResult" /> オブジェクト。</param>
      <returns>このインスタンスに関連付けられている、書き込み可能な <see cref="T:System.IO.Stream" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の呼び出しで、<paramref name="asyncResult" /> が取得されませんでした。</exception>
      <exception cref="T:System.InvalidOperationException">このメソッドは、<paramref name="asyncResult" /> で識別される操作に対して既に呼び出されています。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>
        <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> で開始された保留中の非同期操作を終了します。</summary>
      <param name="asyncResult">操作の開始時に返された <see cref="T:System.IAsyncResult" />。</param>
      <returns>
        <see cref="T:System.Net.WebResponse" /> インスタンスを格納している <see cref="T:System.Net.FtpWebResponse" /> 参照。 このオブジェクトは、要求に対する FTP サーバーの応答を格納しています。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> の呼び出しで、<paramref name="asyncResult" /> が取得されませんでした。</exception>
      <exception cref="T:System.InvalidOperationException">このメソッドは、<paramref name="asyncResult" /> で識別される操作に対して既に呼び出されています。</exception>
      <exception cref="T:System.Net.WebException">HTTP プロキシの使用中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetRequestStream">
      <summary>FTP サーバーにデータをアップロードするために使用するストリームを取得します。</summary>
      <returns>現在の要求でサーバーに送信されるデータを格納するために使用する、書き込み可能な <see cref="T:System.IO.Stream" /> インスタンス。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> が呼び出されており、完了していません。

または -
HTTP プロキシが有効で、<see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />、<see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory" />、または <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails" /> 以外の FTP コマンドを使用しようとしました。</exception>
      <exception cref="T:System.Net.WebException">FTP サーバーへの接続を確立できませんでした。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FtpWebRequest.Method" /> プロパティが、<see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile" /> または <see cref="F:System.Net.WebRequestMethods.Ftp.AppendFile" /> に設定されていません。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetResponse">
      <summary>FTP サーバーの応答を返します。</summary>
      <returns>
        <see cref="T:System.Net.WebResponse" /> インスタンスを格納している <see cref="T:System.Net.FtpWebResponse" /> 参照。 このオブジェクトは、要求に対する FTP サーバーの応答を格納しています。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.FtpWebRequest.GetResponse" /> または <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> は、このインスタンスに対して既に呼び出されています。

または -
HTTP プロキシが有効で、<see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />、<see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory" />、または <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails" /> 以外の FTP コマンドを使用しようとしました。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="P:System.Net.FtpWebRequest.EnableSsl" /> は <see langword="true" /> に設定されていますが、サーバーはこの機能をサポートしていません。
または
<see cref="P:System.Net.FtpWebRequest.Timeout" /> が指定され、タイムアウトの時間が経過しました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Headers">
      <summary>空の <see cref="T:System.Net.WebHeaderCollection" /> オブジェクトを取得します。</summary>
      <returns>空の <see cref="T:System.Net.WebHeaderCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.KeepAlive">
      <summary>要求の完了後に FTP サーバーへの制御接続を閉じるかどうかを指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
      <returns>サーバーへの接続を破棄させない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Method">
      <summary>FTP サーバーに送信するためのコマンドを取得または設定します。</summary>
      <returns>サーバーに送信するための FTP コマンドを格納している <see cref="T:System.String" /> 値。 既定値は <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
      <exception cref="T:System.ArgumentException">メソッドが無効です。
または
メソッドがサポートされていません。
または
複数のメソッドが指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.PreAuthenticate">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">事前認証は FTP でサポートされていません。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Proxy">
      <summary>FTP サーバーとの通信に使用するプロキシを取得または設定します。</summary>
      <returns>FTP サーバーとの通信を行う <see cref="T:System.Net.IWebProxy" /> インスタンス。 .NET Core では、その値<see langword="null" />はです。</returns>
      <exception cref="T:System.ArgumentNullException">このプロパティは <see langword="null" /> に設定できません。</exception>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ReadWriteTimeout">
      <summary>ストリームからの読み取り時またはストリームへの書き込み時のタイムアウトを取得または設定します。</summary>
      <returns>読み取りまたは書き込みがタイムアウトするまでのミリ秒数。既定値は30万ミリ秒 (5 分) です。</returns>
      <exception cref="T:System.InvalidOperationException">要求は既に送信されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定操作に指定された値は 0 以下であり、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.RenameTo">
      <summary>名前を変更されたファイルの新しい名前を取得または設定します。</summary>
      <returns>名前を変更されたファイルの新しい名前。</returns>
      <exception cref="T:System.ArgumentException">設定操作として指定した値が、<see langword="null" /> または空の文字列です。</exception>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.RequestUri">
      <summary>このインスタンスで要求された URI を取得します。</summary>
      <returns>ファイル転送プロトコルを使用してアクセスされるリソースを識別する <see cref="T:System.Uri" /> インスタンス。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ServicePoint">
      <summary>FTP サーバーに接続するために使用する <see cref="T:System.Net.ServicePoint" /> オブジェクトを取得します。</summary>
      <returns>接続の動作をカスタマイズするために使用できる <see cref="T:System.Net.ServicePoint" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.Timeout">
      <summary>要求に対するミリ秒単位の待機時間を取得または設定します。</summary>
      <returns>要求がタイムアウトするまでのミリ秒単位の待機時間を格納している値。 <see cref="T:System.Int32" /> 既定値は<see cref="F:System.Threading.Timeout.Infinite" />です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定された値が 0 未満で、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseBinary">
      <summary>ファイル転送のデータ型を指定する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> の場合は、転送されるデータがバイナリであることがサーバーに示されます。<see langword="false" /> の場合は、データがテキストであることが示されます。 既定値は <see langword="true" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseDefaultCredentials">
      <summary>常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
      <exception cref="T:System.NotSupportedException">既定の資格情報が FTP でサポートされていません。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UsePassive">
      <summary>クライアント アプリケーションのデータ転送処理の動作を取得または設定します。</summary>
      <returns>クライアント アプリケーションのデータ転送処理がデータ ポートで接続を待機する場合は <see langword="false" />。それ以外で、クライアントがデータ ポートで接続を開始する必要がある場合は <see langword="true" />。 既定値は <see langword="true" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">既に処理中の要求で、このプロパティに対して新しい値が指定されました。</exception>
    </member>
    <member name="T:System.Net.FtpWebResponse">
      <summary>要求に対するファイル転送プロトコル (FTP: File Transfer Protocol) サーバーの応答をカプセル化します。</summary>
    </member>
    <member name="P:System.Net.FtpWebResponse.BannerMessage">
      <summary>ログオン前に接続が確立された場合に、FTP サーバーが送信するメッセージを取得します。</summary>
      <returns>サーバーが送信する見出しメッセージを格納している <see cref="T:System.String" />。メッセージが送信されない場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Net.FtpWebResponse.Close">
      <summary>応答によって保持されているリソースを解放します。</summary>
    </member>
    <member name="P:System.Net.FtpWebResponse.ContentLength">
      <summary>FTP サーバーから受信したデータの長さを取得します。</summary>
      <returns>FTP サーバーから受信したデータのバイト数を格納している <see cref="T:System.Int64" /> 値。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ContentType">
      <summary>常に <see cref="T:System.NotImplementedException" /> をスローします。</summary>
      <returns>常に <see cref="T:System.NotImplementedException" /> をスローします。</returns>
      <exception cref="T:System.NotImplementedException">すべての場合。</exception>
    </member>
    <member name="P:System.Net.FtpWebResponse.ExitMessage">
      <summary>FTP セッションの終了時にサーバーが送信するメッセージを取得します。</summary>
      <returns>サーバーが送信する終了メッセージを格納している <see cref="T:System.String" />。メッセージが送信されない場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Net.FtpWebResponse.GetResponseStream">
      <summary>FTP サーバーから送信された応答データを格納しているストリームを取得します。</summary>
      <returns>応答で返されたデータを格納している読み取り可能な <see cref="T:System.IO.Stream" /> インスタンス。サーバーによって返された応答データがない場合は <see cref="F:System.IO.Stream.Null" />。</returns>
      <exception cref="T:System.InvalidOperationException">応答でデータ ストリームが返されませんでした。</exception>
    </member>
    <member name="P:System.Net.FtpWebResponse.Headers">
      <summary>空の <see cref="T:System.Net.WebHeaderCollection" /> オブジェクトを取得します。</summary>
      <returns>空の <see cref="T:System.Net.WebHeaderCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.LastModified">
      <summary>FTP サーバー上のファイルが最後に更新された日時を取得します。</summary>
      <returns>ファイルの最終更新日時を格納している <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ResponseUri">
      <summary>要求に対する応答を送信する URI を取得します。</summary>
      <returns>この応答に関連付けられたリソースを識別する <see cref="T:System.Uri" /> インスタンス。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusCode">
      <summary>FTP サーバーから送信された最新のステータス コードを取得します。</summary>
      <returns>この応答で返された最新のステータス コードを示す <see cref="T:System.Net.FtpStatusCode" /> 値。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusDescription">
      <summary>FTP サーバーから送信されたステータス コードを示すテキストを取得します。</summary>
      <returns>この応答で返されたステータス コードとメッセージを格納している <see cref="T:System.String" /> インスタンス。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.SupportsHeaders">
      <summary>
        <see cref="P:System.Net.FtpWebResponse.Headers" /> プロパティが <see cref="T:System.Net.FtpWebResponse" /> インスタンスによってサポートされているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。
<see cref="P:System.Net.FtpWebResponse.Headers" /> プロパティが <see cref="T:System.Net.FtpWebResponse" /> インスタンスによってサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.WelcomeMessage">
      <summary>認証の完了時に FTP サーバーが送信するメッセージを取得します。</summary>
      <returns>サーバーが送信するウェルカム メッセージを格納している <see cref="T:System.String" />。メッセージが送信されない場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="T:System.Net.GlobalProxySelection">
      <summary>すべての HTTP 要求のグローバルな既定のプロキシ インスタンスを格納します。</summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.#ctor">
      <summary>
        <see cref="T:System.Net.GlobalProxySelection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.GetEmptyWebProxy">
      <summary>空白のプロキシ インスタンスを返します。</summary>
      <returns>情報が格納されていない <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="P:System.Net.GlobalProxySelection.Select">
      <summary>グローバル HTTP プロキシを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.IWebProxy" /> へのすべての呼び出しが使用する <see cref="M:System.Net.HttpWebRequest.GetResponse" />。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作として指定した値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された操作に対するアクセス許可がありません。</exception>
    </member>
    <member name="T:System.Net.HttpContinueDelegate">
      <summary>クライアントが continue 応答を受信したときに、呼び出し元に通知するメソッドを表します。</summary>
      <param name="StatusCode">サーバーからの HTTP 状態の数値。</param>
      <param name="httpHeaders">サーバーから 100-continue 応答と共に返されるヘッダー。</param>
    </member>
    <member name="T:System.Net.HttpWebRequest">
      <summary>
        <see cref="T:System.Net.WebRequest" /> クラスの HTTP 固有の実装を提供します。</summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Net.HttpWebRequest" /> クラスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスの指定したインスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。 このコンストラクターは今後は使用しません。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトをシリアル化するために必要な情報を格納する <see cref="T:System.Net.HttpWebRequest" /> オブジェクト。</param>
      <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Net.HttpWebRequest" /> オブジェクト。</param>
    </member>
    <member name="M:System.Net.HttpWebRequest.Abort">
      <summary>インターネット リソースへの要求を取り消します。</summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Accept">
      <summary>
        <see langword="Accept" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="Accept" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32)">
      <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
      <param name="range">範囲の先頭または末尾。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)">
      <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
      <param name="from">データの送信を開始する位置。</param>
      <param name="to">データの送信を終了する位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> は <paramref name="to" /> より大きい

または -
<paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int64)">
      <summary>要求されたデータの先頭または末尾からの特定の範囲の要求にバイト範囲ヘッダーを追加します。</summary>
      <param name="range">範囲の先頭または末尾。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)">
      <summary>指定した範囲の要求にバイト範囲ヘッダーを追加します。</summary>
      <param name="from">データの送信を開始する位置。</param>
      <param name="to">データの送信を終了する位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> は <paramref name="to" /> より大きい

または -
<paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)">
      <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
      <param name="rangeSpecifier">範囲の説明。</param>
      <param name="range">範囲の先頭または末尾。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)">
      <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
      <param name="rangeSpecifier">範囲の説明。</param>
      <param name="from">データの送信を開始する位置。</param>
      <param name="to">データの送信を終了する位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> は <paramref name="to" /> より大きい

または -
<paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64)">
      <summary>要求されたデータの先頭または末尾からの特定の範囲の要求に Range ヘッダーを追加します。</summary>
      <param name="rangeSpecifier">範囲の説明。</param>
      <param name="range">範囲の先頭または末尾。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)">
      <summary>指定した範囲の要求に範囲ヘッダーを追加します。</summary>
      <param name="rangeSpecifier">範囲の説明。</param>
      <param name="from">データの送信を開始する位置。</param>
      <param name="to">データの送信を終了する位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> は <paramref name="to" /> より大きい

または -
<paramref name="from" /> または <paramref name="to" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">範囲ヘッダーを追加できませんでした。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Address">
      <summary>要求に実際に応答するインターネット リソースの URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>要求に実際に応答するインターネット リソースを識別する <see cref="T:System.Uri" />。 既定値は、<see cref="M:System.Net.WebRequest.Create(System.String)" /> メソッドが要求を初期化するために使用する URI です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowAutoRedirect">
      <summary>要求がリダイレクト応答に従うかどうかを示す値を取得または設定します。</summary>
      <returns>要求がインターネット リソースからのリダイレクト応答に自動的に従う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowReadStreamBuffering">
      <summary>インターネット リソースから受け取ったデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
      <returns>インターネット リソースから受信したデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering">
      <summary>インターネット リソースに送信するデータをバッファリングするかどうかを示す値を取得または設定します。</summary>
      <returns>インターネット リソースに送信するデータのバッファリングを有効にする場合は <see langword="true" />。バッファリングを無効にする場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AutomaticDecompression">
      <summary>使用される圧縮解除の種類を取得または設定します。</summary>
      <returns>使用される圧縮解除の種類を示す <see cref="T:System.Net.DecompressionMethods" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">オブジェクトの現在の状態では、このプロパティを設定できません。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を開始します。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">この要求に対して使用する状態オブジェクト。</param>
      <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。

または -
<see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
      <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが使用中です。

または -
<see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。

または -
スレッド プールは、スレッドを使い切りました。</exception>
      <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
      <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さが 0 の要求の処理の詳細については、「.NET Compact Framework のネットワーク プログラミング」をご覧ください。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>インターネット リソースへの非同期要求を開始します。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート</param>
      <param name="state">この要求に対して使用する状態オブジェクト。</param>
      <returns>応答の非同期要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。

または -
<see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。

または -
スレッド プールは、スレッドを使い切りました。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。

または -
<see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。

または -
<see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> メソッドが呼び出されています。

または -
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 よりも大きい値に設定されていますが、アプリケーションは保証されたデータをすべては書き込みません。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ClientCertificates">
      <summary>この要求に関連付けられているセキュリティ証明書のコレクションを取得または設定します。</summary>
      <returns>この要求に関連付けられているセキュリティ証明書を格納している <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</returns>
      <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Connection">
      <summary>
        <see langword="Connection" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="Connection" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpWebRequest.Connection" /> の値が Keep-alive または Close に設定されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ConnectionGroupName">
      <summary>要求に対して使用する接続グループの名前を取得または設定します。</summary>
      <returns>この要求に対して使用する接続グループの名前。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentLength">
      <summary>
        <see langword="Content-length" /> HTTP ヘッダーを取得または設定します。</summary>
      <returns>インターネット リソースに送信するデータのバイト数。 既定値は -1 です。このプロパティが設定されていないこと、および送信する要求データが存在しないことを示します。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">新規 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 値が 0 未満です。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentType">
      <summary>
        <see langword="Content-type" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="Content-type" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueDelegate">
      <summary>インターネット リソースから HTTP 100-continue 応答を受信したときに呼び出されるデリゲート メソッドを取得または設定します。</summary>
      <returns>インターネット リソースから HTTP Continue 応答が返されたときに実行されるコールバック メソッドを実装するデリゲート。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueTimeout">
      <summary>100 回の続行まで待機するミリ秒単位のタイムアウト値をサーバーから取得または設定します。</summary>
      <returns>100 回の続行まで待機するミリ秒単位のタイムアウト値。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.CookieContainer">
      <summary>要求に関連付けられているクッキーを取得または設定します。</summary>
      <returns>この要求に関連付けられているクッキーを格納している <see cref="T:System.Net.CookieContainer" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Credentials">
      <summary>要求に対して使用する認証情報を取得または設定します。</summary>
      <returns>要求と関連付けられた認証資格情報を格納する <see cref="T:System.Net.ICredentials" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Date">
      <summary>HTTP 要求で使用する <see langword="Date" /> HTTP ヘッダー値を取得または設定します。</summary>
      <returns>HTTP 要求の Date ヘッダーの値。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultCachePolicy">
      <summary>この要求の既定のキャッシュ ポリシーを取得または設定します。</summary>
      <returns>他のポリシーが適用できない場合に、この要求で有効なキャッシュ ポリシーを指定する <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength">
      <summary>HTTP エラー応答の既定の最大長を取得または設定します。</summary>
      <returns>HTTP エラー応答の既定の最大長。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、-1 とは異なっています。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength">
      <summary>
        <see cref="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" /> プロパティの既定値を取得または設定します。</summary>
      <returns>受信した応答ヘッダーの KB (1024 バイト) 単位の既定の最大長。 既定の構成ファイルは、この値を 64 KB に設定します。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値は -1 と等しくなく、0 未満です。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトの非同期要求を終了します。</summary>
      <param name="asyncResult">ストリームの保留中の要求。</param>
      <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
      <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。

または -
この要求の処理中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)">
      <summary>データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトに対する非同期要求を終了し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
      <param name="asyncResult">ストリームの保留中の要求。</param>
      <param name="context">
        <see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
      <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult" /> を使用して呼び出されました。</exception>
      <exception cref="T:System.IO.IOException">要求が完了しませんでした。使用できるストリームはありません。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。

または -
この要求の処理中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>インターネット リソースへの非同期要求を終了します。</summary>
      <param name="asyncResult">応答の保留中の要求。</param>
      <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">このメソッドは以前に <paramref name="asyncResult." /> を使用して呼び出されました。

または -
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> プロパティが 0 を超えていますが、データが要求ストリームに書き込まれていません。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。

または -
この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> は、<see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> の呼び出しから現在のインスタンスにより返されたものではありません。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Expect">
      <summary>
        <see langword="Expect" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="Expect" /> HTTP ヘッダーの内容。 既定値は <see langword="null" /> です。

このプロパティの値は <see cref="T:System.Net.WebHeaderCollection" />に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="Expect" /> は、部分文字列として "100-continue" を含む文字列に設定されます。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、ターゲット オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream">
      <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
      <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。

または -
<see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。

または -
<see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
      <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。

または -
要求のタイムアウト期間の期限が切れました。

または -
この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">.NET Compact Framework アプリケーションでコンテンツの長さが 0 の要求ストリームが取得されず、正しく閉じられませんでした。 コンテンツの長さが 0 の要求の処理の詳細については、「.NET Compact Framework のネットワーク プログラミング」をご覧ください。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)">
      <summary>要求データを書き込むために使用する <see cref="T:System.IO.Stream" /> オブジェクトを取得し、そのストリームに関連付けられている <see cref="T:System.Net.TransportContext" /> を出力します。</summary>
      <param name="context">
        <see cref="T:System.Net.TransportContext" /> の <see cref="T:System.IO.Stream" />。</param>
      <returns>要求データを書き込むために使用する <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.Exception">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが <see cref="T:System.IO.Stream" /> を取得できませんでした。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが複数回呼び出されています。

または -
<see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
      <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されることを示していますが、データを書き込む要求ではキャッシュを使用してはなりません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> プロパティは GET または HEAD です。

または -
<see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。

または -
要求のタイムアウト期間の期限が切れました。

または -
この要求の処理中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetResponse">
      <summary>インターネット リソースからの応答を返します。</summary>
      <returns>インターネット リソースからの応答を格納している <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.InvalidOperationException">前回の <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> への呼び出しでストリームが既に使用中です。

または -
<see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> が値に設定されており、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> です。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> が GET または HEAD で、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 以上であるか <see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="true" />です。

または -
<see cref="P:System.Net.HttpWebRequest.KeepAlive" /> が <see langword="true" />、<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> が <see langword="false" />、<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が -1、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> で、<see cref="P:System.Net.HttpWebRequest.Method" /> が POST か PUT です。

または -
<see cref="T:System.Net.HttpWebRequest" /> にはエンティティ本体がありますが、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドを呼び出さずに <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドが呼び出されています。

または -
<see cref="P:System.Net.HttpWebRequest.ContentLength" /> が 0 よりも大きい値に設定されていますが、アプリケーションは保証されたデータをすべては書き込みません。</exception>
      <exception cref="T:System.NotSupportedException">要求キャッシュの検証コントロールは、この要求に対する応答がキャッシュから提供されたことを示していますが、この要求にはサーバーに送信されるデータが含まれています。 データを送信する要求には、キャッシュを使用できません。 正しく実装されていないカスタム キャッシュの検証コントロールを使用すると、この例外が発生する場合があります。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> は以前に呼び出されました。

または -
要求のタイムアウト期間の期限が切れました。

または -
この要求の処理中にエラーが発生しました。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.HaveResponse">
      <summary>インターネット リソースから応答が受信されたかどうかを示す値を取得します。</summary>
      <returns>応答を受信した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Headers">
      <summary>HTTP ヘッダーを構成する名前と値のペアのコレクションを指定します。</summary>
      <returns>HTTP 要求のヘッダーを構成する名前と値のペアを格納している <see cref="T:System.Net.WebHeaderCollection" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Host">
      <summary>要求 URI に依存しない HTTP 要求で使用する Host ヘッダー値を取得または設定します。</summary>
      <returns>HTTP 要求の Host ヘッダーの値。</returns>
      <exception cref="T:System.ArgumentNullException">Host ヘッダーを <see langword="null" /> に設定することはできません。</exception>
      <exception cref="T:System.ArgumentException">ホスト ヘッダーを無効な値には設定できません。</exception>
      <exception cref="T:System.InvalidOperationException">Host ヘッダーは、<see cref="T:System.Net.HttpWebRequest" /> の送信が既に開始された後には設定できません。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.IfModifiedSince">
      <summary>
        <see langword="If-Modified-Since" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.DateTime" /> HTTP ヘッダーの内容を格納する <see langword="If-Modified-Since" />。 既定値は、現在の日付と時刻です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.KeepAlive">
      <summary>インターネット リソースへの永続的な接続を行うかどうかを示す値を取得または設定します。</summary>
      <returns>値 Keep-alive を持つ <see langword="true" /> HTTP ヘッダーをインターネット リソースへの要求に含める場合は <see langword="Connection" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections">
      <summary>要求によって実行されるリダイレクトの最大数を取得または設定します。</summary>
      <returns>要求によって実行されるリダイレクト応答の最大数。 既定値は 50 です。</returns>
      <exception cref="T:System.ArgumentException">設定値が 0 以下です。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength">
      <summary>応答ヘッダーの許容最大長を取得または設定します。</summary>
      <returns>応答ヘッダーの長さ (KB 単位、1 KB = 1024 バイト)。</returns>
      <exception cref="T:System.InvalidOperationException">プロパティは、要求が送信された後に設定されます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値は 0 より小さく、-1 とは異なっています。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.MediaType">
      <summary>要求のメディア タイプを取得または設定します。</summary>
      <returns>要求のメディア タイプ。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Method">
      <summary>要求に対して使用するメソッドを取得または設定します。</summary>
      <returns>インターネット リソースと通信するために使用する要求メソッド。 既定値は GET です。</returns>
      <exception cref="T:System.ArgumentException">メソッドが提供されていません。

または -

メソッドの文字列に正しくない文字が含まれています。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Pipelined">
      <summary>インターネット リソースへの要求をパイプライン処理するかどうかを示す値を取得または設定します。</summary>
      <returns>要求をパイプライン処理する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.PreAuthenticate">
      <summary>要求で Authorization ヘッダーを送信するかどうかを示す値を取得または設定します。</summary>
      <returns>認証が行われた後で、要求と共に HTTP Authorization ヘッダーを送信するには <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ProtocolVersion">
      <summary>要求に対して使用する HTTP バージョンを取得または設定します。</summary>
      <returns>要求に対して使用する HTTP バージョン。 既定値は、<see cref="F:System.Net.HttpVersion.Version11" /> です。</returns>
      <exception cref="T:System.ArgumentException">HTTP バージョンが 1.0 または 1.1 以外の値に設定されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Proxy">
      <summary>要求に対して使用するプロキシ情報を取得または設定します。</summary>
      <returns>要求に対するプロキシで使用する <see cref="T:System.Net.IWebProxy" /> オブジェクト。 既定値は <see cref="P:System.Net.GlobalProxySelection.Select" /> プロパティを呼び出して設定します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.HttpWebRequest.Proxy" /> が <see langword="null" /> に設定されます。</exception>
      <exception cref="T:System.InvalidOperationException">要求が <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> の呼び出しにより既に開始されています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された操作に対するアクセス許可がありません。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ReadWriteTimeout">
      <summary>ストリームへの書き込み時またはストリームからの読み取り時のタイムアウト (ミリ秒単位) を取得または設定します。</summary>
      <returns>書き込みまたは読み取りがタイムアウトするまでのミリ秒数。既定値は30万ミリ秒 (5 分) です。</returns>
      <exception cref="T:System.InvalidOperationException">要求が既に送信されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">セット操作に指定された値は 0 以下であり、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Referer">
      <summary>
        <see langword="Referer" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="Referer" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.RequestUri">
      <summary>要求の元の URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> メソッドに渡されたインターネット リソースの URI を格納している <see cref="M:System.Net.WebRequest.Create(System.String)" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.SendChunked">
      <summary>インターネット リソースへセグメント単位でデータを送信するかどうかを示す値を取得または設定します。</summary>
      <returns>インターネット リソースへセグメント単位でデータを送信する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" />、または <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> メソッドを呼び出すことにより要求が開始されました。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServerCertificateValidationCallback">
      <summary>サーバー証明書を検証するコールバック関数を取得または設定します。</summary>
      <returns>サーバー証明書を検証するコールバック関数。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServicePoint">
      <summary>要求に対して使用するサービス ポイントを取得します。</summary>
      <returns>インターネット リソースへのネットワーク接続を表す <see cref="T:System.Net.ServicePoint" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.SupportsCookieContainer">
      <summary>要求が <see cref="T:System.Net.CookieContainer" /> をサポートするかどうかを示す値を取得します。</summary>
      <returns>要求が <see langword="true" /> をサポートする場合は <see cref="T:System.Net.CookieContainer" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="P:System.Net.HttpWebRequest.Timeout">
      <summary>
        <see cref="M:System.Net.HttpWebRequest.GetResponse" /> メソッドと <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> メソッドのタイムアウト値 (ミリ秒単位) を取得または設定します。</summary>
      <returns>要求がタイムアウトするまでのミリ秒単位の待機時間。既定値は10万ミリ秒 (100 秒) です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定された値が 0 未満で、<see cref="F:System.Threading.Timeout.Infinite" /> ではありません。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.TransferEncoding">
      <summary>
        <see langword="Transfer-encoding" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="Transfer-encoding" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は、<see cref="P:System.Net.HttpWebRequest.SendChunked" /> が <see langword="false" /> である場合に設定されます。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> は "Chunked" 値に設定されます。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing">
      <summary>高速 NTLM 認証された接続共有を許可するかどうかを示す値を取得または設定します。</summary>
      <returns>認証された接続を確立し続ける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.UseDefaultCredentials">
      <summary>既定の資格情報が要求と共に送信されるかどうかを制御する <see cref="T:System.Boolean" /> 値を取得または設定します。</summary>
      <returns>既定の資格情報が使用されている場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。 既定値は <see langword="false" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">要求の送信後に、このプロパティを設定しようとしました。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.UserAgent">
      <summary>
        <see langword="User-agent" /> HTTP ヘッダーの値を取得または設定します。</summary>
      <returns>
        <see langword="User-agent" /> HTTP ヘッダーの値。 既定値は <see langword="null" /> です。

このプロパティの値は <see cref="T:System.Net.WebHeaderCollection" />に格納されます。 WebHeaderCollection が設定されている場合、プロパティ値は失われます。</returns>
    </member>
    <member name="T:System.Net.HttpWebResponse">
      <summary>
        <see cref="T:System.Net.WebResponse" /> クラスの HTTP 固有の実装を提供します。</summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor">
      <summary>
        <see cref="T:System.Net.HttpWebResponse" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定した <see cref="T:System.Net.HttpWebResponse" /> インスタンスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Net.HttpWebRequest" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられるシリアル化ストリームの転送元を格納する <see cref="T:System.Net.HttpWebRequest" />。</param>
    </member>
    <member name="P:System.Net.HttpWebResponse.CharacterSet">
      <summary>応答の文字セットを取得します。</summary>
      <returns>応答の文字セットを含む文字列。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.Close">
      <summary>応答ストリームを閉じます。</summary>
      <exception cref="T:System.ObjectDisposedException">.NET Core のみ: この <see cref="T:System.Net.HttpWebResponse" /> オブジェクトは破棄されました。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentEncoding">
      <summary>応答の本体をエンコードするために使用するメソッドを取得します。</summary>
      <returns>応答の本文をエンコードするために使用するメソッドを記述する文字列。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentLength">
      <summary>要求で返されるコンテンツ長を取得します。</summary>
      <returns>要求で返されるバイト数。 コンテンツ長には、ヘッダー情報は含まれません。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentType">
      <summary>応答のコンテンツ タイプを取得します。</summary>
      <returns>応答のコンテンツ タイプを格納する文字列。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Cookies">
      <summary>この応答に関連付けられているクッキーを取得または設定します。</summary>
      <returns>この要求に関連付けられているクッキーを格納する <see cref="T:System.Net.CookieCollection" />。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.HttpWebResponse" /> が使用しているアンマネージド リソースを解放します。オプションでマネージド リソースも破棄します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseHeader(System.String)">
      <summary>応答で返されたヘッダーの内容を取得します。</summary>
      <param name="headerName">返されるヘッダー値。</param>
      <returns>指定したヘッダーの内容。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseStream">
      <summary>サーバーから応答の本文を読み取るために使用するストリームを取得します。</summary>
      <returns>応答の本文を格納している <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">応答ストリームがありません。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Headers">
      <summary>応答に関連付けられているヘッダーをサーバーから取得します。</summary>
      <returns>応答で返されるヘッダー情報を格納する <see cref="T:System.Net.WebHeaderCollection" />。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.IsMutuallyAuthenticated">
      <summary>クライアントとサーバーの両方が認証されたかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>相互認証が行われた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.LastModified">
      <summary>応答の内容が最後に変更された日付と時刻を取得します。</summary>
      <returns>応答の内容が変更された日付と時刻を格納する <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Method">
      <summary>応答を返すために使用するメソッドを取得します。</summary>
      <returns>応答を返すために使用する HTTP メソッドを格納する文字列。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ProtocolVersion">
      <summary>応答で使用される HTTP プロトコルのバージョンを取得します。</summary>
      <returns>応答の HTTP プロトコルのバージョンを格納する <see cref="T:System.Version" />。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ResponseUri">
      <summary>要求に応答したインターネット リソースの URI を取得します。</summary>
      <returns>要求に応答したインターネットリソースの URI。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Server">
      <summary>応答を送信したサーバーの名前を取得します。</summary>
      <returns>応答を送信したサーバーの名前を格納する文字列。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusCode">
      <summary>応答のステータスを取得します。</summary>
      <returns>
        <see cref="T:System.Net.HttpStatusCode" /> の値の 1 つ。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusDescription">
      <summary>応答で返されるステータス記述を取得します。</summary>
      <returns>応答のステータスを記述する文字列。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは破棄されています。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.SupportsHeaders">
      <summary>ヘッダーがサポートされているかどうかを示す値を取得します。</summary>
      <returns>ヘッダーがサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Net.HttpWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>このインスタンスを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトにシリアル化します。</summary>
      <param name="serializationInfo">この <see cref="T:System.Net.HttpWebResponse" /> のシリアル化の転送先となるオブジェクト。</param>
      <param name="streamingContext">シリアル化の転送先。</param>
    </member>
    <member name="T:System.Net.IAuthenticationModule">
      <summary>Web クライアント認証モジュールに基本認証インターフェイスを提供します。</summary>
    </member>
    <member name="M:System.Net.IAuthenticationModule.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>サーバーからの認証チャレンジに応答して、<see cref="T:System.Net.Authorization" /> クラスのインスタンスを返します。</summary>
      <param name="challenge">サーバーが送信する認証チャレンジ。</param>
      <param name="request">チャレンジと関連付けられる <see cref="T:System.Net.WebRequest" /> インスタンス。</param>
      <param name="credentials">チャレンジと関連付けられる資格情報。</param>
      <returns>要求の承認メッセージを格納する <see cref="T:System.Net.Authorization" /> インスタンス。またはチャレンジを処理できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.AuthenticationType">
      <summary>認証モジュールが提供する認証の種類を取得します。</summary>
      <returns>認証モジュールが提供する認証の種類を示す文字列。</returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.CanPreAuthenticate">
      <summary>認証モジュールが事前認証をサポートしているかどうかを示す値を取得します。</summary>
      <returns>承認モジュールが事前認証をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.IAuthenticationModule.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>サーバーへの認証要求のために <see cref="T:System.Net.Authorization" /> クラスのインスタンスを返します。</summary>
      <param name="request">認証要求と関連付けられる <see cref="T:System.Net.WebRequest" /> インスタンス。</param>
      <param name="credentials">認証要求と関連付けられる資格情報。</param>
      <returns>要求の承認メッセージを格納する <see cref="T:System.Net.Authorization" /> インスタンス。</returns>
    </member>
    <member name="T:System.Net.ICredentialPolicy">
      <summary>
        <see cref="T:System.Net.WebRequest" /> およびその派生クラスを使用して行われるリソース要求で使用される資格情報ポリシーを定義します。</summary>
    </member>
    <member name="M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)">
      <summary>
        <see cref="T:System.Net.WebRequest" /> クラスのインスタンスを使用して行われるリソース要求と共にクライアントの資格情報を送信するかどうかを示す <see cref="T:System.Boolean" /> を返します。</summary>
      <param name="challengeUri">要求を受信する <see cref="T:System.Uri" />。</param>
      <param name="request">要求されるリソースを表す <see cref="T:System.Net.WebRequest" />。</param>
      <param name="credential">このメソッドが <see langword="true" /> を返した場合に要求と共に送信される <see cref="T:System.Net.NetworkCredential" />。</param>
      <param name="authenticationModule">認証が必要な場合に認証を実行する <see cref="T:System.Net.IAuthenticationModule" />。</param>
      <returns>要求と共に資格情報が送信される場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Net.IWebRequestCreate">
      <summary>
        <see cref="T:System.Net.WebRequest" /> インスタンスを作成するための基本インターフェイスを提供します。</summary>
    </member>
    <member name="M:System.Net.IWebRequestCreate.Create(System.Uri)">
      <summary>
        <see cref="T:System.Net.WebRequest" /> インスタンスを作成します。</summary>
      <param name="uri">Web リソースの URI (Uniform Resource Identifier)。</param>
      <returns>
        <see cref="T:System.Net.WebRequest" /> のインスタンス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="uri" /> で指定された要求スキームは、この <see cref="T:System.Net.IWebRequestCreate" /> インスタンスでサポートされていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  

            
  
 <paramref name="uri" /> で指定された URI は、有効な URI ではありません。</exception>
    </member>
    <member name="T:System.Net.ProtocolViolationException">
      <summary>ネットワーク プロトコルの使用中にエラーが発生した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor">
      <summary>
        <see cref="T:System.Net.ProtocolViolationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定した <see cref="T:System.Net.ProtocolViolationException" /> インスタンスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を逆シリアル化するために必要な情報を格納する <see cref="T:System.Net.ProtocolViolationException" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Net.ProtocolViolationException" /> に関連付けられるシリアル化ストリームの転送元を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Net.ProtocolViolationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー メッセージ文字列。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、対象のオブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>このインスタンスを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトにシリアル化します。</summary>
      <param name="serializationInfo">この <see cref="T:System.Net.ProtocolViolationException" /> のシリアル化の転送先となるオブジェクト。</param>
      <param name="streamingContext">シリアル化の転送先。</param>
    </member>
    <member name="T:System.Net.WebException">
      <summary>プラグ可能プロトコルによるネットワークへのアクセスでエラーが発生した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor">
      <summary>
        <see cref="T:System.Net.WebException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定した <see cref="T:System.Net.WebException" /> インスタンスと <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスから、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Net.WebException" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Net.WebException" /> に関連付けられるシリアル化ストリームの転送元を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String)">
      <summary>指定されたエラー メッセージで <see cref="T:System.Net.WebException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー メッセージのテキスト。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Net.WebException" /> クラスの新しいインスタンスを、指定したエラー メッセージと入れ子になった例外を使用して初期化します。</summary>
      <param name="message">エラー メッセージのテキスト。</param>
      <param name="inner">入れ子になった例外。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
      <summary>
        <see cref="T:System.Net.WebException" /> クラスの新しいインスタンスを、指定したエラー メッセージ、入れ子になった例外、ステータス、および応答を使用して初期化します。</summary>
      <param name="message">エラー メッセージのテキスト。</param>
      <param name="inner">入れ子になった例外。</param>
      <param name="status">
        <see cref="T:System.Net.WebExceptionStatus" /> 値のいずれか 1 つ。</param>
      <param name="response">リモート ホストからの応答を格納する <see cref="T:System.Net.WebResponse" /> インスタンス。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
      <summary>
        <see cref="T:System.Net.WebException" /> クラスの新しいインスタンスを、指定したエラー メッセージとステータスを使用して初期化します。</summary>
      <param name="message">エラー メッセージのテキスト。</param>
      <param name="status">
        <see cref="T:System.Net.WebExceptionStatus" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.Net.WebException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスに、<see cref="T:System.Net.WebException" /> をシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">使用する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="P:System.Net.WebException.Response">
      <summary>リモート ホストが返す応答を取得します。</summary>
      <returns>インターネット リソースから応答がある場合は、インターネット リソースからのエラー応答を格納した <see cref="T:System.Net.WebResponse" /> インスタンス。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Net.WebException.Status">
      <summary>応答のステータスを取得します。</summary>
      <returns>
        <see cref="T:System.Net.WebExceptionStatus" /> 値のいずれか。</returns>
    </member>
    <member name="M:System.Net.WebException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>このインスタンスを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトにシリアル化します。</summary>
      <param name="serializationInfo">この <see cref="T:System.Net.WebException" /> のシリアル化の転送先となるオブジェクト。</param>
      <param name="streamingContext">シリアル化の転送先。</param>
    </member>
    <member name="T:System.Net.WebExceptionStatus">
      <summary>
        <see cref="T:System.Net.WebException" /> クラスのステータス コードを定義します。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.CacheEntryNotFound">
      <summary>指定したキャッシュ エントリが見つかりませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
      <summary>トランスポート レベルで、リモート サービス ポイントと通信できませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectionClosed">
      <summary>接続を終了するのが早すぎました。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.KeepAliveFailure">
      <summary>Keep-alive ヘッダーを指定する要求のための接続が予期せずに閉じられました。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.MessageLengthLimitExceeded">
      <summary>要求の送信時またはサーバーから応答の受信時に指定された制限を超えるメッセージが受信されました。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.NameResolutionFailure">
      <summary>名前解決サービスがホスト名を解決できませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Pending">
      <summary>内部非同期要求が保留中です。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.PipelineFailure">
      <summary>要求がパイプライン処理された要求で、応答の受信前に接続が閉じられました。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProtocolError">
      <summary>サーバーから受信した応答は完了しましたが、プロトコルレベルのエラーを示しています。 たとえば、"401 アクセス拒否" などの HTTP プロトコル エラーは、このステータスを使用します。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProxyNameResolutionFailure">
      <summary>ネーム リゾルバー サービスがプロキシ ホスト名を解決できませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ReceiveFailure">
      <summary>完全な応答がリモート サーバーから受信されませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
      <summary>要求が取り消されたか、<see cref="M:System.Net.WebRequest.Abort" /> メソッドが呼び出されたか、または分類できないエラーが発生しました。 これは、<see cref="P:System.Net.WebException.Status" /> の既定値です。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByCachePolicy">
      <summary>要求はキャッシュ ポリシーで許可されませんでした。 これは通常、要求をキャッシュに保存できず、有効なポリシーによってサーバーへの要求の送信が禁止されている場合に発生します。 このステータスは、要求メソッドが要求本体の存在を示している場合、要求メソッドがサーバーとの直接の対話を要求している場合、または要求に条件ヘッダーが含まれている場合に受け取ることがあります。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByProxy">
      <summary>この要求はプロキシで許可されませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SecureChannelFailure">
      <summary>SSL を使用して接続を確立する際にエラーが発生しました。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SendFailure">
      <summary>リモート サーバーに完全な要求を送信できませでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ServerProtocolViolation">
      <summary>サーバーの応答が有効な HTTP 応答ではありません。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Success">
      <summary>エラーは発生しませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Timeout">
      <summary>要求のタイムアウト時間中に応答が受信されませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.TrustFailure">
      <summary>サーバー証明書を検証できませんでした。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.UnknownError">
      <summary>不明な種類の例外が発生しました。</summary>
    </member>
    <member name="T:System.Net.WebRequest">
      <summary>Uniform Resource Identifier (URI) に対する要求を実行します。 これは <see langword="abstract" /> クラスです。</summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor">
      <summary>
        <see cref="T:System.Net.WebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスと <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの指定したインスタンスから、<see cref="T:System.Net.WebRequest" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Net.WebRequest" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースを示す <see cref="T:System.Net.WebRequest" />。</param>
      <exception cref="T:System.NotImplementedException">コンストラクターが派生クラスでオーバーライドされていないのに、そのコンストラクターへのアクセスが試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.Abort">
      <summary>要求を中止します。</summary>
      <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.AuthenticationLevel">
      <summary>この要求で使用する認証レベルおよび偽装レベルを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.Security.AuthenticationLevel" /> 値のビットごとの組み合わせ。 既定値は <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" /> です。
相互認証では、クライアントとサーバーの両方が、それらの身元を証明する資格情報を提供します。 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> と <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" /> は、Kerberos 認証に関連する値です。 Kerberos 認証は、直接サポートすることも、Negotiate セキュリティ プロトコルを使用して実際のセキュリティ プロトコルを選択する場合に使用することもできます。 認証プロトコルの詳細については、「インターネット認証」を参照してください。
相互認証が行われたかどうかを確認するには、<see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated" /> プロパティをチェックします。
<see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> 認証フラグの値を指定していて相互認証が行われない場合、アプリケーションは、相互認証が失敗したことを示す <see cref="T:System.Net.ProtocolViolationException" /> 内部例外を持つ <see cref="T:System.IO.IOException" /> を受け取ります。</returns>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>派生クラスでオーバーライドされると、<see cref="M:System.Net.WebRequest.GetRequestStream" /> メソッドの非同期バージョンを提供します。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期要求の状態情報を格納するオブジェクト。</param>
      <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>派生クラスでオーバーライドされると、インターネット リソースの非同期要求を開始します。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期要求の状態情報を格納するオブジェクト。</param>
      <returns>非同期の要求を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.CachePolicy">
      <summary>この要求のキャッシュ ポリシーを取得または設定します。</summary>
      <returns>キャッシュ ポリシーを定義する <see cref="T:System.Net.Cache.RequestCachePolicy" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Net.WebRequest.ConnectionGroupName">
      <summary>派生クラスでオーバーライドされると、要求で使用する接続グループの名前を取得または設定します。</summary>
      <returns>要求で使用する接続グループの名前。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.ContentLength">
      <summary>派生クラスでオーバーライドされると、送信している要求データのコンテンツ長を取得または設定します。</summary>
      <returns>送信している要求データのバイト数。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.ContentType">
      <summary>派生クラスでオーバーライドされると、送信している要求データのコンテンツ タイプを取得または設定します。</summary>
      <returns>要求データのコンテンツ タイプ。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.String)">
      <summary>指定した URI スキーム用に新しい <see cref="T:System.Net.WebRequest" /> のインスタンスを初期化します。</summary>
      <param name="requestUriString">インターネット リソースを識別する URI。</param>
      <returns>特定の URI スキーム用の <see cref="T:System.Net.WebRequest" /> 派生クラス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUriString" /> で指定された要求スキームが登録されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUriString" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するための <see cref="T:System.Net.WebPermissionAttribute" /> アクセス許可がありません。</exception>
      <exception cref="T:System.UriFormatException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  

            
  
 <paramref name="requestUriString" /> で指定された URI は、有効な URI ではありません。</exception>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.Uri)">
      <summary>指定した URI スキーム用に新しい <see cref="T:System.Net.WebRequest" /> のインスタンスを初期化します。</summary>
      <param name="requestUri">要求されたリソースの URI を格納する <see cref="T:System.Uri" />。</param>
      <returns>指定した URI スキーム用の <see cref="T:System.Net.WebRequest" /> 派生クラス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUri" /> で指定された要求スキームが登録されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するための <see cref="T:System.Net.WebPermissionAttribute" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateDefault(System.Uri)">
      <summary>指定した URI スキーム用に新しい <see cref="T:System.Net.WebRequest" /> のインスタンスを初期化します。</summary>
      <param name="requestUri">要求されたリソースの URI を格納する <see cref="T:System.Uri" />。</param>
      <returns>指定した URI スキーム用の <see cref="T:System.Net.WebRequest" /> 派生クラス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUri" /> で指定された要求スキームが登録されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するための <see cref="T:System.Net.WebPermissionAttribute" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.String)">
      <summary>指定した URI 文字列用に新しい <see cref="T:System.Net.HttpWebRequest" /> インスタンスを初期化します。</summary>
      <param name="requestUriString">インターネット リソースを識別する URI 文字列。</param>
      <returns>指定した URI 文字列の <see cref="T:System.Net.HttpWebRequest" /> インスタンス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUriString" /> で指定された要求スキームが、http スキームまたは https スキームです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUriString" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するための <see cref="T:System.Net.WebPermissionAttribute" /> アクセス許可がありません。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="requestUriString" /> で指定された URI は、有効な URI ではありません。</exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.Uri)">
      <summary>指定した URI 用に新しい <see cref="T:System.Net.HttpWebRequest" /> インスタンスを初期化します。</summary>
      <param name="requestUri">インターネット リソースを識別する URI。</param>
      <returns>指定した URI 文字列の <see cref="T:System.Net.HttpWebRequest" /> インスタンス。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="requestUri" /> で指定された要求スキームが、http スキームまたは https スキームです。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、要求された URI または要求のリダイレクト先である URI に接続するための <see cref="T:System.Net.WebPermissionAttribute" /> アクセス許可がありません。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="requestUri" /> で指定された URI は、有効な URI ではありません。</exception>
    </member>
    <member name="P:System.Net.WebRequest.Credentials">
      <summary>派生クラスでオーバーライドされると、インターネット リソースを使用して要求を認証するために使用されるネットワーク資格情報を取得または設定します。</summary>
      <returns>要求に関連付けられた認証資格情報を格納する <see cref="T:System.Net.ICredentials" />。 既定値は、<see langword="null" /> です。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.DefaultCachePolicy">
      <summary>この要求の既定のキャッシュ ポリシーを取得または設定します。</summary>
      <returns>他のポリシーが適用できない場合に、この要求で有効なキャッシュ ポリシーを指定する <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />。</returns>
    </member>
    <member name="P:System.Net.WebRequest.DefaultWebProxy">
      <summary>グローバル HTTP プロキシを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Net.IWebProxy" /> のインスタンスへのすべての呼び出しで使用される <see cref="T:System.Net.WebRequest" />。</returns>
    </member>
    <member name="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>派生クラスでオーバーライドされると、インターネット リソースにデータを書き込むための <see cref="T:System.IO.Stream" /> を返します。</summary>
      <param name="asyncResult">ストリームの保留中の要求を参照する <see cref="T:System.IAsyncResult" />。</param>
      <returns>データを書き込む <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Net.WebResponse" /> を返します。</summary>
      <param name="asyncResult">応答に対する保留中の要求を参照する <see cref="T:System.IAsyncResult" />。</param>
      <returns>インターネット要求への応答を格納する <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStream">
      <summary>派生クラスでオーバーライドされると、インターネット リソースにデータを書き込むための <see cref="T:System.IO.Stream" /> を返します。</summary>
      <returns>インターネット リソースにデータを書き込む <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStreamAsync">
      <summary>派生クラスでオーバーライドされると、インターネット リソースへのデータ書き込みの <see cref="T:System.IO.Stream" /> を非同期操作として返します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.WebRequest.GetResponse">
      <summary>派生クラスでオーバーライドされると、インターネット要求への応答を返します。</summary>
      <returns>インターネット要求への応答を格納する <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.NotImplementedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.GetResponseAsync">
      <summary>派生クラスでオーバーライドされると、インターネット要求への応答を非同期操作として返します。</summary>
      <returns>非同期操作を表すタスク オブジェクト。</returns>
    </member>
    <member name="M:System.Net.WebRequest.GetSystemWebProxy">
      <summary>現在の偽装ユーザーの Internet Explorer の設定で構成されたプロキシを返します。</summary>
      <returns>
        <see cref="T:System.Net.IWebProxy" /> のインスタンスへのすべての呼び出しで使用される <see cref="T:System.Net.WebRequest" />。</returns>
    </member>
    <member name="P:System.Net.WebRequest.Headers">
      <summary>派生クラスでオーバーライドされると、要求に関連付けられたヘッダーの名前/値ペアのコレクションを取得または設定します。</summary>
      <returns>要求に関連付けられたヘッダーの名前/値ペアを格納する <see cref="T:System.Net.WebHeaderCollection" />。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.ImpersonationLevel">
      <summary>現在の要求に対する偽装レベルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値。</returns>
    </member>
    <member name="P:System.Net.WebRequest.Method">
      <summary>派生クラスでオーバーライドされると、要求で使用するプロトコル メソッドを取得または設定します。</summary>
      <returns>要求で使用するプロトコル メソッド。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.PreAuthenticate">
      <summary>派生クラスでオーバーライドされる場合、要求を事前認証するかどうかを指定します。</summary>
      <returns>事前認証する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.Proxy">
      <summary>派生クラスでオーバーライドされると、インターネット リソースにアクセスするために使用するネットワーク プロキシを取得または設定します。</summary>
      <returns>インターネット リソースにアクセスするために使用する <see cref="T:System.Net.IWebProxy" />。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)">
      <summary>指定した URI 用の <see cref="T:System.Net.WebRequest" /> 派生クラスを登録します。</summary>
      <param name="prefix">
        <see cref="T:System.Net.WebRequest" /> 派生クラスが処理する完全な URI または URI プリフィックス。</param>
      <param name="creator">
        <see cref="T:System.Net.WebRequest" /> が <see cref="T:System.Net.WebRequest" /> 派生クラスを作成するために呼び出す作成メソッド。</param>
      <returns>登録が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> は <see langword="null" /> です

または -
<paramref name="creator" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Net.WebRequest.RequestUri">
      <summary>派生クラスでオーバーライドされると、要求に関連付けられたインターネット リソースの URI を取得します。</summary>
      <returns>要求に関連付けられているリソースを表す <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="M:System.Net.WebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>派生クラスでオーバーライドされる場合、<see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスに、<see cref="T:System.Net.WebRequest" /> をシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Net.WebRequest" /> のシリアル化されたデータを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Net.WebRequest" /> に関連付けられているシリアル化ストリームの転送先を格納している <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <exception cref="T:System.NotImplementedException">インターフェイスが派生クラスでオーバーライドされていないのに、オブジェクトのシリアル化が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.Timeout">
      <summary>要求がタイムアウトするまでのミリ秒単位の時間を取得または設定します。</summary>
      <returns>要求がタイムアウトするまでの時間の長さ (ミリ秒単位)。または、要求がタイムアウトしないことを示す値 <see cref="F:System.Threading.Timeout.Infinite" /> ます。既定値は、派生クラスによって定義されます。</returns>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebRequest.UseDefaultCredentials">
      <summary>派生クラスでオーバーライドされる場合、<see cref="T:System.Boolean" /> が要求と共に送信されるかどうかを制御する <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 値を取得または設定します。</summary>
      <returns>既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">要求の送信後に、このプロパティを設定しようとしました。</exception>
      <exception cref="T:System.NotImplementedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティへのアクセスが試行されました。</exception>
    </member>
    <member name="T:System.Net.WebRequestMethods">
      <summary>
        <see cref="T:System.Net.WebRequestMethods.Ftp" />、<see cref="T:System.Net.WebRequestMethods.File" />、および <see cref="T:System.Net.WebRequestMethods.Http" /> の各クラスのコンテナー クラス。 このクラスは継承できません。</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.File">
      <summary>FILE 要求で使用できる、ファイル プロトコル メソッドの種類を表します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.DownloadFile">
      <summary>指定した場所からファイルを取得するために使用される FILE GET プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.UploadFile">
      <summary>指定した場所にファイルをコピーするために使用される FILE PUT プロトコル メソッドを表します。</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.Ftp">
      <summary>FTP 要求で使用できる、FTP プロトコル メソッドの種類を表します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.AppendFile">
      <summary>FTP サーバー上の既存のファイルにファイルを追加するために使用される FTP APPE プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DeleteFile">
      <summary>FTP サーバー上のファイルを削除するために使用される FTP DELE プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DownloadFile">
      <summary>FTP サーバーからファイルをダウンロードするために使用される FTP RETR プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetDateTimestamp">
      <summary>FTP サーバー上のファイルから日付時刻スタンプ取得するために使用される FTP MDTM プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetFileSize">
      <summary>FTP サーバー上のファイルのサイズを取得するために使用される FTP SIZE プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectory">
      <summary>FTP サーバー上のファイルの短い一覧を取得する FTP NLIST プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails">
      <summary>FTP サーバー上のファイルの詳細な一覧を取得する FTP LIST プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.MakeDirectory">
      <summary>FTP サーバー上にディレクトリを作成する FTP MKD プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.PrintWorkingDirectory">
      <summary>現在の作業ディレクトリの名前を出力する FTP PWD プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.RemoveDirectory">
      <summary>ディレクトリを削除する FTP RMD プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.Rename">
      <summary>ディレクトリの名前を変更する FTP RENAME プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFile">
      <summary>FTP サーバーにファイルをアップロードする FTP STOR プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFileWithUniqueName">
      <summary>FTP サーバーに、一意名を持つファイルをアップロードする FTP STOU プロトコル メソッドを表します。</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.Http">
      <summary>HTTP 要求で使用できる、HTTP プロトコル メソッドの種類を表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Connect">
      <summary>SSL トンネリングの場合のように、動的にトンネリングに切り替えることができるプロキシで使用される HTTP CONNECT プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Get">
      <summary>HTTP GET プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Head">
      <summary>HTTP HEAD プロトコル メソッドを表します。 HEAD メソッドは、サーバーが応答でメッセージ本文は返さずにメッセージ ヘッダーだけを返すこと以外、GET と同じです。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.MkCol">
      <summary>要求の URI (Uniform Resource Identifier) で指定された場所で新しいコレクション (ページのコレクションなど) を作成する HTTP MKCOL 要求を表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Post">
      <summary>URI への追加として新しいエントリをポストするために使用される HTTP POST プロトコル メソッドを表します。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Put">
      <summary>URI で識別されるエントリを置き換えるために使用される HTTP PUT プロトコル メソッドを表します。</summary>
    </member>
    <member name="T:System.Net.WebResponse">
      <summary>URI (Uniform Resource Identifier) からの応答を利用できるようにします。 これは <see langword="abstract" /> クラスです。</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor">
      <summary>
        <see cref="T:System.Net.WebResponse" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスと <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの指定したインスタンスから、<see cref="T:System.Net.WebResponse" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializationInfo">新しい <see cref="T:System.Net.WebRequest" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラスのインスタンス。</param>
      <param name="streamingContext">新しい <see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースを指定する <see cref="T:System.Net.WebRequest" /> クラスのインスタンス。</param>
      <exception cref="T:System.NotSupportedException">コンストラクターが派生クラスでオーバーライドされていないのに、そのコンストラクターへのアクセスが試行されました。</exception>
    </member>
    <member name="M:System.Net.WebResponse.Close">
      <summary>派生クラスでオーバーライドされると、応答ストリームを閉じます。</summary>
      <exception cref="T:System.NotSupportedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentLength">
      <summary>派生クラスでオーバーライドされると、受信しているデータのコンテンツ長を取得または設定します。</summary>
      <returns>インターネット リソースから返されるバイト数。</returns>
      <exception cref="T:System.NotSupportedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentType">
      <summary>派生クラスでオーバーライドされると、受信しているデータのコンテンツ タイプを取得または設定します。</summary>
      <returns>応答のコンテンツ タイプを格納する文字列。</returns>
      <exception cref="T:System.NotSupportedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="M:System.Net.WebResponse.Dispose">
      <summary>
        <see cref="T:System.Net.WebResponse" /> オブジェクトによって使用されているアンマネージ リソースを解放します。</summary>
    </member>
    <member name="M:System.Net.WebResponse.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Net.WebResponse" /> オブジェクトによって使用されているアンマネージド リソースを解放します。オプションとして、マネージド リソースを破棄することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.WebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> に、ターゲット オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">データの読み込み先となる <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">このシリアル化の転送先を指定する <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebResponse.GetResponseStream">
      <summary>派生クラスでオーバーライドされると、インターネット リソースからデータ ストリームを返します。</summary>
      <returns>インターネット リソースからデータを読み取るための <see cref="T:System.IO.Stream" /> クラスのインスタンス。</returns>
      <exception cref="T:System.NotSupportedException">メソッドが派生クラスでオーバーライドされていないのに、そのメソッドへのアクセスが試行されました。</exception>
    </member>
    <member name="P:System.Net.WebResponse.Headers">
      <summary>派生クラスでオーバーライドされると、この要求に関連付けられたヘッダーの名前と値のペアのコレクションを取得します。</summary>
      <returns>この応答に関連付けられているヘッダーの値を格納している <see cref="T:System.Net.WebHeaderCollection" /> クラスのインスタンス。</returns>
      <exception cref="T:System.NotSupportedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebResponse.IsFromCache">
      <summary>この応答がキャッシュから取得されたかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>応答がキャッシュから取得された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.WebResponse.IsMutuallyAuthenticated">
      <summary>相互認証が行われたかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</summary>
      <returns>クライアントとサーバーの両方が認証された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Net.WebResponse.ResponseUri">
      <summary>派生クラスでオーバーライドされると、要求に実際に応答したインターネット リソースの URI を取得します。</summary>
      <returns>要求に実際に応答したインターネット リソースの URI を格納する <see cref="T:System.Uri" /> クラスのインスタンス。</returns>
      <exception cref="T:System.NotSupportedException">プロパティが派生クラスでオーバーライドされていないのに、そのプロパティの取得または設定が試行されました。</exception>
    </member>
    <member name="P:System.Net.WebResponse.SupportsHeaders">
      <summary>ヘッダーがサポートされているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。
ヘッダーがサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.WebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスに、<see cref="T:System.Net.WebResponse" /> をシリアル化するために必要なデータを設定します。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Net.WebResponse" /> のシリアル化されたデータを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">新しい <see cref="T:System.Net.WebResponse" /> に関連付けられているシリアル化ストリームの転送先を格納している <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
  </members>
</doc>
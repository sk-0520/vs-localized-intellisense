<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>Proporciona compatibilidad con relación a las diferentes formas existentes a la hora de generar el lenguaje intermedio de Microsoft (MSIL) y metadatos para un método dinámico, incluidos métodos para la creación de símbolos (token) y para la inserción de código, control de excepciones y objetos binarios (BLOB) para la firma de variables locales.</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>Obtiene el método dinámico cuyo cuerpo viene generado por la instancia actual.</summary>
      <returns>Objeto <see cref="T:System.Reflection.Emit.DynamicMethod" /> que representa el método dinámico para el cual está generando código el objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa la firma para el método dinámico asociado.</summary>
      <param name="signature">Matriz que contiene la firma.</param>
      <returns>Símbolo (token) que se puede incrustar en los metadatos y en la secuencia de MSIL para el método dinámico asociado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un método dinámico al que llamar desde el método asociado.</summary>
      <param name="method">Método dinámico al que se va a llamar.</param>
      <returns>Símbolo (token) que se puede incrustar en la secuencia de MSIL para el método dinámico asociado, como el destino de una instrucción de MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un campo al que se puede obtener acceso desde el método dinámico asociado.</summary>
      <param name="field">Campo al que se va a obtener acceso.</param>
      <returns>Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL con acceso a campos, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Obtiene un token, válido en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un campo al que se puede obtener acceso desde el método dinámico asociado; el campo es del tipo genérico especificado.</summary>
      <param name="field">Campo al que se va a obtener acceso.</param>
      <param name="contextType">Tipo genérico al que pertenece el campo.</param>
      <returns>Token que puede utilizarse como operando de una instrucción MSIL que obtiene acceso a campos en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un método al que se puede obtener acceso desde el método dinámico asociado.</summary>
      <param name="method">Método al que se va a obtener acceso.</param>
      <returns>Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL con acceso a métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> o <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un método en un tipo genérico.</summary>
      <param name="method">Método.</param>
      <param name="contextType">Tipo genérico al que pertenece el método.</param>
      <returns>Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL con acceso a métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> o <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un tipo que se puede utilizar en el método dinámico asociado.</summary>
      <param name="type">Tipo que se va a utilizar.</param>
      <returns>Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL que necesita un tipo, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un literal de cadena que se puede utilizar en el método dinámico asociado.</summary>
      <param name="literal">La cadena que que se va a utilizar.</param>
      <returns>Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL que necesita una cadena, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>Establece el cuerpo de código del método dinámico asociado.</summary>
      <param name="code">Puntero a una matriz de bytes que contiene la secuencia de MSIL.</param>
      <param name="codeSize">Número de bytes de la secuencia de MSIL.</param>
      <param name="maxStackSize">Número máximo de elementos en la pila de operandos cuando se está ejecutando el método.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> es <see langword="null" /> y <paramref name="codeSize" /> es mayor que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>Establece el cuerpo de código del método dinámico asociado.</summary>
      <param name="code">Matriz que contiene la secuencia de MSIL.</param>
      <param name="maxStackSize">Número máximo de elementos en la pila de operandos cuando se está ejecutando el método.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>Establece los metadatos de excepción del método dinámico asociado.</summary>
      <param name="exceptions">Puntero a una matriz de bytes que contiene los metadatos de excepción.</param>
      <param name="exceptionsSize">Número de bytes de los metadatos de excepción.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> es <see langword="null" /> y <paramref name="exceptionSize" /> es mayor que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>Establece los metadatos de excepción del método dinámico asociado.</summary>
      <param name="exceptions">Matriz que contiene los metadatos de excepción.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>Establece la firma de variable local que describe el diseño de las variables locales para el método dinámico asociado.</summary>
      <param name="localSignature">Matriz que contiene el diseño de las variables locales para el objeto <see cref="T:System.Reflection.Emit.DynamicMethod" /> asociado.</param>
      <param name="signatureSize">Número de bytes de la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> es <see langword="null" /> y <paramref name="signatureSize" /> es mayor que 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>Establece la firma de variable local que describe el diseño de las variables locales para el método dinámico asociado.</summary>
      <param name="localSignature">Matriz que contiene el diseño de las variables locales para el objeto <see cref="T:System.Reflection.Emit.DynamicMethod" /> asociado.</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Define y representa un método dinámico que se puede compilar, ejecutar y descartar. Los métodos descartados están disponibles para la recolección de elementos no utilizados.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Crea un método dinámico que es global para un módulo, especificando el nombre del método, los atributos, la convención de nomenclatura, el tipo de valor devuelto, los tipos de parámetros, el módulo y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no el valor <see langword="null" />.</param>
      <param name="attributes">Combinación bit a bit de valores de <see cref="T:System.Reflection.MethodAttributes" /> que especifica los atributos del método dinámico. La única combinación permitida es <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convención de llamada para el método dinámico. Debe ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</param>
      <param name="m">
        <see cref="T:System.Reflection.Module" /> que representa el módulo al que se va a asociar lógicamente el método dinámico.</param>
      <param name="skipVisibility">
        <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.
O bien
<paramref name="m" /> es un módulo que proporciona hospedaje anónimo a los métodos dinámicos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.
o bien
<paramref name="m" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> es una combinación de marcadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.
O bien
<paramref name="callingConvention" /> no es <see cref="F:System.Reflection.CallingConventions.Standard" />.
O bien
<paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Crea un método dinámico que especifica el nombre del método, los atributos, la convención de llamada, el tipo de valor de devolución, los tipos de parámetros, el tipo con el que está asociado lógicamente el método dinámico y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para los tipos y miembros a los que se tiene acceso mediante el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no el valor <see langword="null" />.</param>
      <param name="attributes">Combinación bit a bit de valores de <see cref="T:System.Reflection.MethodAttributes" /> que especifica los atributos del método dinámico. La única combinación permitida es <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convención de llamada para el método dinámico. Debe ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</param>
      <param name="owner">
        <see cref="T:System.Type" /> al que está asociado lógicamente el método dinámico. El método dinámico tiene acceso a todos los miembros del tipo.</param>
      <param name="skipVisibility">
        <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.
o bien
<paramref name="owner" /> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un método o tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.
O bien
<paramref name="owner" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> es una combinación de marcadores diferente de <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.
O bien
<paramref name="callingConvention" /> no es <see cref="F:System.Reflection.CallingConventions.Standard" />.
O bien
<paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Inicializa un método dinámico hospedado de forma anónima, especificando el nombre del método, el tipo de valor devuelto y los tipos de parámetros.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico, o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Inicializa un método dinámico hospedado de forma anónima, especificando el nombre del método, el tipo de valor devuelto, los tipos de parámetros y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico, o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifica los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</param>
      <param name="restrictedSkipVisibility">
        <see langword="true" /> para omitir las comprobaciones de visibilidad de JIT en tipos y miembros a los que se tiene acceso por el MSIL del método dinámico, con esta restricción: el nivel de confianza de los ensamblados que contienen esos tipos y miembros debe ser igual o menor que el nivel de confianza de la pila de llamadas que emite el método dinámico; de lo contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Crea un método dinámico que es global para un módulo, especificando el nombre del método, el tipo de devolución, los tipos de parámetros y el módulo.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico, o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</param>
      <param name="m">
        <see cref="T:System.Reflection.Module" /> que representa el módulo con el que se va a asociar de manera lógica al método dinámico.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.
O bien
<paramref name="m" /> es un módulo que proporciona hospedaje anónimo a los métodos dinámicos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.
o bien
<paramref name="m" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Crea un método dinámico que es global para un módulo, especificando el nombre del método, el tipo de valor devuelto, los tipos de parámetros, el módulo y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico, o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</param>
      <param name="m">
        <see cref="T:System.Reflection.Module" /> que representa el módulo con el que se va a asociar de manera lógica al método dinámico.</param>
      <param name="skipVisibility">
        <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el Lenguaje intermedio de Microsoft (MSIL) del método dinámico.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.
o bien
<paramref name="m" /> es un módulo que proporciona hospedaje anónimo a los métodos dinámicos.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.
o bien
<paramref name="m" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Crea un método dinámico, especificando el nombre del método, tipo de valor devuelto, los tipos de parámetro y el tipo al que está asociado lógicamente el método dinámico.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico, o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</param>
      <param name="owner">
        <see cref="T:System.Type" /> al que está asociado lógicamente el método dinámico. El método dinámico tiene acceso a todos los miembros del tipo.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.
O bien
<paramref name="owner" /> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un método o tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.
O bien
<paramref name="owner" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> es <see langword="null" /> o es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Crea un método dinámico que especifica el nombre del método, el tipo de valor de devolución, los tipos de parámetros, el tipo con el que está asociado lógicamente el método dinámico y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para los tipos y miembros a los que se tiene acceso mediante el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</summary>
      <param name="name">Nombre del método dinámico. Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</param>
      <param name="returnType">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico, o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</param>
      <param name="parameterTypes">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</param>
      <param name="owner">
        <see cref="T:System.Type" /> al que está asociado lógicamente el método dinámico. El método dinámico tiene acceso a todos los miembros del tipo.</param>
      <param name="skipVisibility">
        <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el Lenguaje intermedio de Microsoft (MSIL) del método dinámico; de lo contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.
o bien
<paramref name="owner" /> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un método o tipo genérico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.
O bien
<paramref name="owner" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> es <see langword="null" /> o es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Obtiene los atributos especificados cuando se creó el método dinámico.</summary>
      <returns>Una combinación bit a bit de los valores <see cref="T:System.Reflection.MethodAttributes" /> que representan los atributos del método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Obtiene la convención de llamada especificada cuando se creó el método dinámico.</summary>
      <returns>Uno de los valores de <see cref="T:System.Reflection.CallingConventions" /> que indica la convención de llamada del método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Finaliza el método dinámico y crea a un delegado que se puede usar para ejecutarlo.</summary>
      <param name="delegateType">Tipo de delegado cuya firma coincide con la del método dinámico.</param>
      <returns>Un delegado del tipo especificado, que se puede usar para ejecutar el método dinámico.</returns>
      <exception cref="T:System.InvalidOperationException">El método dinámico no tiene ningún cuerpo de método.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> tiene el número de parámetros o los tipos de parámetro incorrectos.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Completa el método dinámico y crea un delegado que se puede utilizar para ejecutarlo, especificando el tipo de delegado y un objeto al que se enlaza el delegado.</summary>
      <param name="delegateType">Tipo de delegado cuya firma coincide con el método dinámico, menos el primer parámetro.</param>
      <param name="target">Objeto al que se enlaza el delegado. Debe ser del mismo tipo que el primer parámetro del método dinámico.</param>
      <returns>Delegado del tipo especificado, que se puede usar para ejecutar el método dinámico con el objeto de destino especificado.</returns>
      <exception cref="T:System.InvalidOperationException">El método dinámico no tiene ningún cuerpo de método.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> no es del mismo tipo que el primer parámetro del método dinámico y no se puede asignar a ese tipo.
o bien
<paramref name="delegateType" /> tiene el número incorrecto de parámetros o los tipos de parámetro incorrectos.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Obtiene el tipo que declara el método, que siempre es <see langword="null" /> para los métodos dinámicos.</summary>
      <returns>Siempre es <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Define un parámetro del método dinámico.</summary>
      <param name="position">Posición del parámetro en la lista de parámetros. Los parámetros se indizan empezando por el número 1 en el primer parámetro.</param>
      <param name="attributes">Combinación bit a bit de valores de <see cref="T:System.Reflection.ParameterAttributes" /> que especifica los atributos del parámetro.</param>
      <param name="parameterName">Nombre del parámetro. El nombre puede ser una cadena de longitud cero.</param>
      <returns>Siempre devuelve <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El método no tiene parámetros.
o bien
<paramref name="position" /> es menor que 0.
o bien
<paramref name="position" /> es mayor que el número de los parámetros del método.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>Devuelve la implementación base del método.</summary>
      <returns>La implementación base del método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>Devuelve todos los atributos personalizados definidos para el método.</summary>
      <param name="inherit">
        <see langword="true" /> para buscar la cadena de herencia del método con el fin de encontrar los atributos personalizados; <see langword="false" /> para comprobar solo el método actual.</param>
      <returns>Matriz de objetos que representa todos los atributos personalizados del método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Devuelve los atributos personalizados del tipo especificado aplicados al método.</summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> que representa el tipo de atributo personalizado que se va a devolver.</param>
      <param name="inherit">
        <see langword="true" /> para buscar en la cadena de herencia del método los atributos personalizados; <see langword="false" /> para comprobar solo el método actual.</param>
      <returns>Matriz de objetos que representan los atributos que son de tipo <paramref name="attributeType" /> o derivan del tipo <paramref name="attributeType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>Devuelve un objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> que se puede utilizar para generar un cuerpo de método a partir de los símbolos (token) de metadatos, los ámbitos y las secuencias de Lenguaje intermedio de Microsoft (MSIL).</summary>
      <returns>Objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> que se puede usar para generar un cuerpo de método a partir de los tokens de metadatos, los ámbitos y las secuencias de MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Devuelve un generador de Lenguaje intermedio de Microsoft (MILS) para el método con un tamaño predeterminado de secuencia de MSIL de 64 bytes.</summary>
      <returns>Objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para el método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Devuelve un generador de Lenguaje intermedio de Microsoft (MSIL) para el método con el tamaño de secuencia de MSIL especificado.</summary>
      <param name="streamSize">El tamaño de la secuencia MSIL, en bytes.</param>
      <returns>Un objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para el método, con el tamaño de secuencia de MSIL especificado.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>Devuelve las marcas de implementación para el método.</summary>
      <returns>Una combinación bit a bit de valores de <see cref="T:System.Reflection.MethodImplAttributes" /> que representan las marcas de implementación para el método.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Devuelve los parámetros del método dinámico.</summary>
      <returns>Una matriz de objetos <see cref="T:System.Reflection.ParameterInfo" /> que representan los parámetros del método dinámico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Obtiene o establece un valor que indica si las variables locales del método se inicializan a cero.</summary>
      <returns>
        <see langword="true" /> si las variables locales del método se inicializan en cero; de lo contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Llama al método dinámico utilizando los parámetros especificados, bajo las restricciones del enlazador especificado, con la información de la referencia cultural especificada.</summary>
      <param name="obj">Este parámetro se omite para los métodos dinámicos porque son estáticos. Especifique <see langword="null" />.</param>
      <param name="invokeAttr">Combinación bit a bit de valores <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">Objeto <see cref="T:System.Reflection.Binder" /> que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante reflexión. Si <paramref name="binder" /> es <see langword="null" />, se usa el enlazador predeterminado. Para obtener más información, vea <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">Lista de argumentos. Esta matriz de argumentos tiene el mismo número, orden y tipo que los parámetros del método al que se va a invocar. Si no hay parámetros, este parámetro debe ser <see langword="null" />.</param>
      <param name="culture">Instancia de <see cref="T:System.Globalization.CultureInfo" /> usada para regir la conversión de tipos. Si es <see langword="null" />, se utiliza <see cref="T:System.Globalization.CultureInfo" /> para el subproceso actual. Por ejemplo, esta información es necesaria para convertir correctamente un objeto <see cref="T:System.String" /> que representa 1000 en un valor <see cref="T:System.Double" />, ya que 1000 se representa de manera diferente en referencias culturales diferentes.</param>
      <returns>
        <see cref="T:System.Object" /> que contiene el valor devuelto por el método invocado.</returns>
      <exception cref="T:System.NotSupportedException">No se admite la convención de llamada <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">El número de elementos de <paramref name="parameters" /> no coincide con el número de parámetros del método dinámico.</exception>
      <exception cref="T:System.ArgumentException">El tipo de uno o más elementos de <paramref name="parameters" /> no coincide con el tipo del parámetro correspondiente del método dinámico.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">El método dinámico está asociado con un módulo, no está hospedado de forma anónima y se construyó con el parámetro <paramref name="skipVisibility" /> establecido en <see langword="false" />, pero tiene acceso a los miembros que no son <see langword="public" /> o <see langword="internal" /> (<see langword="Friend" /> en Visual Basic).
o bien
El método dinámico está hospedado de forma anónima y se construyó con el parámetro <paramref name="skipVisibility" /> establecido en <see langword="false" />, pero tiene acceso a miembros que no son <see langword="public" />.
o bien
El método dinámico contiene código no comprobable. Vea la sección "Comprobación" en Comentarios para <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Indica si se ha definido el tipo de atributo personalizado especificado.</summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> que representa el tipo de atributo personalizado que se va a buscar.</param>
      <param name="inherit">
        <see langword="true" /> para buscar en la cadena de herencia del método los atributos personalizados; <see langword="false" /> para comprobar solo el método actual.</param>
      <returns>
        <see langword="true" /> si se define el tipo de atributo personalizado especificado; si no, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>Obtiene un valor que indica si el método dinámico actual es crítico para la seguridad o crítico para la seguridad y disponible desde código transparente y, por tanto, puede realizar operaciones críticas.</summary>
      <returns>
        <see langword="true" /> si el método dinámico actual es crítico para la seguridad o crítico para la seguridad y disponible desde código transparente; <see langword="false" /> si es transparente.</returns>
      <exception cref="T:System.InvalidOperationException">El método dinámico no tiene un cuerpo de método.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>Obtiene un valor que indica si el método dinámico actual es crítico para la seguridad y disponible desde código transparente en el nivel de confianza actual; es decir, si puede realizar operaciones críticas y está disponible desde código transparente.</summary>
      <returns>
        <see langword="true" /> si el método dinámico es crítico para la seguridad y disponible desde código transparente en el nivel de confianza actual; <see langword="false" /> si es crítico para la seguridad o transparente.</returns>
      <exception cref="T:System.InvalidOperationException">El método dinámico no tiene un cuerpo de método.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>Obtiene un valor que indica si el método dinámico actual es transparente en el nivel de confianza actual y, por tanto, no puede realizar operaciones críticas.</summary>
      <returns>
        <see langword="true" /> si el método dinámico es transparente en seguridad en el nivel de confianza actual; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">El método dinámico no tiene un cuerpo de método.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>No se admite para los métodos dinámicos.</summary>
      <returns>No se admite para los métodos dinámicos.</returns>
      <exception cref="T:System.InvalidOperationException">No se permite para los métodos dinámicos.</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>Obtiene el módulo al que está asociado lógicamente el método dinámico.</summary>
      <returns>Elemento <see cref="T:System.Reflection.Module" /> con el que está asociado el método dinámico actual.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Obtiene el nombre del método dinámico.</summary>
      <returns>Nombre simple del método.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>Obtiene la clase que se usó en la reflexión para obtener el método.</summary>
      <returns>Siempre es <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Obtiene el parámetro devuelto del método dinámico.</summary>
      <returns>Siempre es <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Obtiene el tipo de valor devuelto para el método dinámico.</summary>
      <returns>
        <see cref="T:System.Type" /> que representa el tipo del valor devuelto del método actual; <see cref="T:System.Void" /> si el método no tiene ningún tipo de valor devuelto.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>Obtiene los atributos personalizados del tipo de valor devuelto para el método dinámico.</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> que representa los atributos personalizados del tipo de valor devuelto para el método dinámico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Devuelve la firma del método, representada como una cadena.</summary>
      <returns>Cadena que representa la firma del método.</returns>
    </member>
  </members>
</doc>
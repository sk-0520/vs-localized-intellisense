<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>Contiene funciones genéricas de nivel bajo para manipular punteros.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>Agrega un desplazamiento de elemento a la referencia especificada.</summary>
      <param name="source">Referencia a la que se agregará el desplazamiento.</param>
      <param name="elementOffset">Desplazamiento que se va a sumar.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Nueva referencia que refleja la suma del desplazamiento al puntero.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>Agrega un desplazamiento de elemento a la referencia especificada.</summary>
      <param name="source">Referencia a la que se agregará el desplazamiento.</param>
      <param name="elementOffset">Desplazamiento que se va a sumar.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Nueva referencia que refleja la suma del desplazamiento al puntero.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>Agrega un desplazamiento de elemento al puntero void especificado.</summary>
      <param name="source">Puntero void al que se va a sumar el desplazamiento.</param>
      <param name="elementOffset">Desplazamiento que se va a sumar.</param>
      <typeparam name="T">Tipo de puntero void.</typeparam>
      <returns>Nuevo puntero void que refleja la suma del desplazamiento al puntero especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>Agrega un desplazamiento de bytes a la referencia especificada.</summary>
      <param name="source">Referencia a la que se agregará el desplazamiento.</param>
      <param name="byteOffset">Desplazamiento que se va a sumar.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Nueva referencia que refleja la suma del desplazamiento de bytes al puntero.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>Determina si las referencias especificadas apuntan a la misma ubicación.</summary>
      <param name="left">Primera referencia que se comparará.</param>
      <param name="right">Segunda referencia que se comparará.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> apuntan a la misma ubicación; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>Convierte el objeto indicado al tipo especificado.</summary>
      <param name="o">Objeto que se convertirá.</param>
      <typeparam name="T">Tipo al que se convertirá el objeto.</typeparam>
      <returns>Objeto original, convertido al tipo especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>Reinterpreta la referencia especificada como una referencia a un valor del tipo <typeparamref name="TTo" />.</summary>
      <param name="source">Referencia que se reinterpretará.</param>
      <typeparam name="TFrom">Tipo de referencia que se va a reinterpretar.</typeparam>
      <typeparam name="TTo">Tipo deseado de la referencia.</typeparam>
      <returns>Referencia a un valor del tipo <typeparamref name="TTo" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>Devuelve un puntero al parámetro by-ref especificado.</summary>
      <param name="value">Objeto cuyo puntero se obtendrá.</param>
      <typeparam name="T">Tipo del objeto.</typeparam>
      <returns>Puntero al valor especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>Reinterpreta la referencia de solo lectura especificada como una referencia.</summary>
      <param name="source">Referencia de solo lectura que se reinterpretará.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Referencia a un valor del tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>Reinterpreta la ubicación especificada como una referencia a un valor del tipo <typeparamref name="T" />.</summary>
      <param name="source">Ubicación del valor al que se hará referencia.</param>
      <typeparam name="T">Tipo de la ubicación interpretada.</typeparam>
      <returns>Referencia a un valor del tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>Determina el desplazamiento de bytes desde el origen al destino a partir de las referencias especificadas.</summary>
      <param name="origin">Referencia de origen.</param>
      <param name="target">Referencia de destino.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Desplazamiento de bytes desde el origen al destino (es decir, <paramref name="target" /> - <paramref name="origin" />).</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>Copia un valor del tipo <typeparamref name="T" /> en la ubicación especificada.</summary>
      <param name="destination">Ubicación donde se copiará.</param>
      <param name="source">Puntero al valor que se copiará.</param>
      <typeparam name="T">Tipo de valor que se va a copiar.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>Copia un valor del tipo <typeparamref name="T" /> en la ubicación especificada.</summary>
      <param name="destination">Ubicación donde se copiará.</param>
      <param name="source">Referencia al valor que se copiará.</param>
      <typeparam name="T">Tipo de valor que se va a copiar.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copia bytes desde la dirección de origen a la dirección de destino.</summary>
      <param name="destination">Dirección de destino donde se copiará.</param>
      <param name="source">Dirección de origen desde donde se copiará.</param>
      <param name="byteCount">Número de bytes que se van a copiar.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>Copia bytes desde la dirección de origen a la dirección de destino.</summary>
      <param name="destination">Dirección de destino donde se copiará.</param>
      <param name="source">Dirección de origen desde donde se copiará.</param>
      <param name="byteCount">Número de bytes que se van a copiar.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Copia bytes desde la dirección de origen a la dirección de destino sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</summary>
      <param name="destination">Dirección de destino donde se copiará.</param>
      <param name="source">Dirección de origen desde donde se copiará.</param>
      <param name="byteCount">Número de bytes que se van a copiar.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>Copia bytes desde la dirección de origen a la dirección de destino sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</summary>
      <param name="destination">Dirección de destino donde se copiará.</param>
      <param name="source">Dirección de origen desde donde se copiará.</param>
      <param name="byteCount">Número de bytes que se van a copiar.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado.</summary>
      <param name="startAddress">Dirección del inicio del bloque de memoria que se inicializará.</param>
      <param name="value">Valor con el que se inicializará el bloque.</param>
      <param name="byteCount">Número de bytes que se inicializarán.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado.</summary>
      <param name="startAddress">Dirección del inicio del bloque de memoria que se inicializará.</param>
      <param name="value">Valor con el que se inicializará el bloque.</param>
      <param name="byteCount">Número de bytes que se inicializarán.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado sin tener en cuenta la alineación dependiente de la arquitectura de la dirección.</summary>
      <param name="startAddress">Dirección del inicio del bloque de memoria que se inicializará.</param>
      <param name="value">Valor con el que se inicializará el bloque.</param>
      <param name="byteCount">Número de bytes que se inicializarán.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado sin tener en cuenta la alineación dependiente de la arquitectura de la dirección.</summary>
      <param name="startAddress">Dirección del inicio del bloque de memoria que se inicializará.</param>
      <param name="value">Valor con el que se inicializará el bloque.</param>
      <param name="byteCount">Número de bytes que se inicializarán.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>Devuelve un valor que indica si una referencia especificada es mayor que otra referencia especificada.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <typeparam name="T">Tipo de la referencia.</typeparam>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>Devuelve un valor que indica si una referencia especificada es menor que otra referencia especificada.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <typeparam name="T">Tipo de la referencia.</typeparam>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>Lee un valor del tipo <typeparamref name="T" /> desde la ubicación especificada.</summary>
      <param name="source">Ubicación desde donde se leerá.</param>
      <typeparam name="T">Tipo que se va a leer.</typeparam>
      <returns>Objeto del tipo <typeparamref name="T" /> leído desde la ubicación especificada.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>Lee un valor del tipo <typeparamref name="T" /> desde la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</summary>
      <param name="source">Ubicación desde donde se leerá.</param>
      <typeparam name="T">Tipo que se va a leer.</typeparam>
      <returns>Objeto del tipo <typeparamref name="T" /> leído desde la ubicación especificada.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>Lee un valor del tipo <typeparamref name="T" /> desde la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</summary>
      <param name="source">Ubicación desde donde se leerá.</param>
      <typeparam name="T">Tipo que se va a leer.</typeparam>
      <returns>Objeto del tipo <typeparamref name="T" /> leído desde la ubicación especificada.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>Devuelve el tamaño de un objeto del parámetro de tipo especificado.</summary>
      <typeparam name="T">Tipo de objeto cuyo tamaño se recupera.</typeparam>
      <returns>Tamaño del objeto del tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>Resta un desplazamiento de elemento de la referencia especificada.</summary>
      <param name="source">Referencia que se restará del desplazamiento.</param>
      <param name="elementOffset">Desplazamiento que se va a restar.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Nueva referencia que refleja la resta del desplazamiento del puntero.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>Resta un desplazamiento de elemento de la referencia especificada.</summary>
      <param name="source">Referencia que se restará del desplazamiento.</param>
      <param name="elementOffset">Desplazamiento que se va a restar.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Nueva referencia que refleja la resta del desplazamiento del puntero.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>Resta un desplazamiento de elemento del puntero void especificado.</summary>
      <param name="source">Puntero void del que se va a restar el desplazamiento.</param>
      <param name="elementOffset">Desplazamiento que se va a restar.</param>
      <typeparam name="T">Tipo del puntero void.</typeparam>
      <returns>Nuevo puntero void que refleja la resta del desplazamiento del puntero especificado.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>Resta un desplazamiento de bytes de la referencia especificada.</summary>
      <param name="source">Referencia que se restará del desplazamiento.</param>
      <param name="byteOffset">Desplazamiento que se va a restar.</param>
      <typeparam name="T">Tipo de referencia.</typeparam>
      <returns>Nueva referencia que refleja la resta del desplazamiento de bytes del puntero.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>Devuelve un <see langword="mutable ref" /> a un valor con conversión boxing.</summary>
      <param name="box">El valor al que aplicar la conversión unboxing.</param>
      <typeparam name="T">Tipo al que se va a aplicar la conversión unboxing.</typeparam>
      <returns>Un <see langword="mutable ref" /> al valor al que se ha aplicado la conversión boxing <paramref name="box" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> es <see langword="null" />, y <typeparamref name="T" /> es un tipo de valor que no acepta valores NULL.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> no es un tipo de valor al que se ha aplicado la conversión boxing.
O bien
<paramref name="box" /> no es un <typeparamref name="T" /> al que se ha aplicado una conversión boxing.</exception>
      <exception cref="T:System.TypeLoadException">No se encuentra <typeparamref name="T" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>Escribe un valor del tipo <typeparamref name="T" /> en la ubicación especificada.</summary>
      <param name="destination">Ubicación donde se escribirá.</param>
      <param name="value">Valor que se va a escribir.</param>
      <typeparam name="T">Tipo de valor que se va a escribir.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>Escribe un valor del tipo <typeparamref name="T" /> en la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</summary>
      <param name="destination">Ubicación donde se escribirá.</param>
      <param name="value">Valor que se va a escribir.</param>
      <typeparam name="T">Tipo de valor que se va a escribir.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>Escribe un valor del tipo <typeparamref name="T" /> en la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</summary>
      <param name="destination">Ubicación donde se escribirá.</param>
      <param name="value">Valor que se va a escribir.</param>
      <typeparam name="T">Tipo de valor que se va a escribir.</typeparam>
    </member>
  </members>
</doc>
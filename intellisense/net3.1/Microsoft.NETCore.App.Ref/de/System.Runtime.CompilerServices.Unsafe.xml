<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>Enthält generische detaillierte Funktionen zum Bearbeiten von Zeigern.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>Fügt dem angegebenen Verweis ein Elementoffset hinzu.</summary>
      <param name="source">Der Verweis, zu dem der Offset addiert werden soll.</param>
      <param name="elementOffset">Der Offset, der addiert werden soll.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Ein neuer Verweis, der die Addition des Offsets zum Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>Fügt dem angegebenen Verweis ein Elementoffset hinzu.</summary>
      <param name="source">Der Verweis, zu dem der Offset addiert werden soll.</param>
      <param name="elementOffset">Der Offset, der addiert werden soll.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Ein neuer Verweis, der die Addition des Offsets zum Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>Fügt dem angegebenen void-Zeiger ein Elementoffset hinzu.</summary>
      <param name="source">Der void-Zeiger, zu dem der Offset addiert werden soll.</param>
      <param name="elementOffset">Der Offset, der addiert werden soll.</param>
      <typeparam name="T">Der Typ des void-Zeigers.</typeparam>
      <returns>Ein neuer void-Zeiger, der die Addition des Offsets zum angegebenen Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>Fügt dem angegebenen Verweis ein Byteoffset hinzu.</summary>
      <param name="source">Der Verweis, zu dem der Offset addiert werden soll.</param>
      <param name="byteOffset">Der Offset, der addiert werden soll.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Ein neuer Verweis, der die Addition des Byteoffsets zum Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>Bestimmt, ob die angegebenen Verweise auf denselben Speicherort zeigen.</summary>
      <param name="left">Der erste zu vergleichende Verweis.</param>
      <param name="right">Der zweite zu vergleichende Verweis.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Wenn <paramref name="left" /> und <paramref name="right" /> auf den gleichen Speicherort zeigen: <see langword="true" />, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>Wandelt das angegebene Objekt in den angegebenen Typ um.</summary>
      <param name="o">Das Objekt, das umgewandelt werden soll.</param>
      <typeparam name="T">Der Typ, in den das Objekt umgewandelt wird.</typeparam>
      <returns>Das Ursprungsobjekt, das in den angegebenen Typ umgewandelt wurde.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>Interpretiert den angegebenen Verweis als Verweis auf einen Wert vom Typ <typeparamref name="TTo" />.</summary>
      <param name="source">Der Verweis, der neu interpretiert werden soll.</param>
      <typeparam name="TFrom">Der Typ des Verweises, der neu interpretiert werden soll.</typeparam>
      <typeparam name="TTo">Der gewünschte Typ des Verweises.</typeparam>
      <returns>Ein Verweis auf einen Wert vom Typ <typeparamref name="TTo" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>Gibt einen Zeiger zurück, der auf den angegebenen ByRef-Parameter zeigt.</summary>
      <param name="value">Das Objekt, dessen Zeiger abgerufen wird.</param>
      <typeparam name="T">Der Objekttyp.</typeparam>
      <returns>Ein Zeiger für den angegebenen Wert.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>Interpretiert den angegebenen schreibgeschützten Verweis als Verweis neu.</summary>
      <param name="source">Der schreibgeschützte Verweis, der neu interpretiert werden soll.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Ein Verweis auf einen Wert vom Typ <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>Interpretiert den angegebenen Speicherort als Verweis auf einen Wert vom Typ <typeparamref name="T" />.</summary>
      <param name="source">Der Speicherort des Werts, auf den verwiesen werden soll.</param>
      <typeparam name="T">Der Typ des interpretierten Speicher Orts.</typeparam>
      <returns>Ein Verweis auf einen Wert vom Typ <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>Bestimmt das Byteoffset vom Ursprung zum Ziel aus den angegebenen Verweisen.</summary>
      <param name="origin">Der Verweis auf den Ursprung.</param>
      <param name="target">Der Verweis auf das Ziel.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Byteoffset vom Ursprung zum Ziel, d.h. <paramref name="target" /> - <paramref name="origin" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>Kopiert einen Wert vom Typ <typeparamref name="T" /> zum angegebenen Speicherort.</summary>
      <param name="destination">Der Speicherort, an den kopiert werden soll.</param>
      <param name="source">Ein Zeiger auf den zu kopierenden Wert.</param>
      <typeparam name="T">Der Werttyp, der kopiert werden soll.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>Kopiert einen Wert vom Typ <typeparamref name="T" /> zum angegebenen Speicherort.</summary>
      <param name="destination">Der Speicherort, an den kopiert werden soll.</param>
      <param name="source">Ein Verweis auf den zu kopierenden Wert.</param>
      <typeparam name="T">Der Werttyp, der kopiert werden soll.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Kopiert Bytes von der Quelladresse zur Zieladresse.</summary>
      <param name="destination">Die Zieladresse, zu der kopiert werden soll.</param>
      <param name="source">Die Quelladresse, aus der kopiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu kopierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>Kopiert Bytes von der Quelladresse zur Zieladresse.</summary>
      <param name="destination">Die Zieladresse, zu der kopiert werden soll.</param>
      <param name="source">Die Quelladresse, aus der kopiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu kopierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Kopiert Bytes aus der Quelladresse zur Zieladresse, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</summary>
      <param name="destination">Die Zieladresse, zu der kopiert werden soll.</param>
      <param name="source">Die Quelladresse, aus der kopiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu kopierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>Kopiert Bytes aus der Quelladresse zur Zieladresse, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</summary>
      <param name="destination">Die Zieladresse, zu der kopiert werden soll.</param>
      <param name="source">Die Quelladresse, aus der kopiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu kopierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert.</summary>
      <param name="startAddress">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</param>
      <param name="value">Der Wert, mit dem der Block initialisiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu initialisierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert.</summary>
      <param name="startAddress">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</param>
      <param name="value">Der Wert, mit dem der Block initialisiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu initialisierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert, ohne eine architekturabhängige Ausrichtung der Adresse vorauszusetzen.</summary>
      <param name="startAddress">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</param>
      <param name="value">Der Wert, mit dem der Block initialisiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu initialisierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>Initialisiert einen Speicherblock an dem angegebenen Speicherort mit einem angegebenen Anfangswert, ohne eine architekturabhängige Ausrichtung der Adresse vorauszusetzen.</summary>
      <param name="startAddress">Die Adresse vom Anfang des Speicherblocks, der initialisiert werden soll.</param>
      <param name="value">Der Wert, mit dem der Block initialisiert werden soll.</param>
      <param name="byteCount">Die Anzahl der zu initialisierenden Bytes.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein angegebener Verweis größer als ein anderer angegebener Verweis ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> größer als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein angegebener Verweis kleiner als ein anderer angegebener Verweis ist.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> kleiner als <paramref name="right" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>Liest einen Wert vom Typ <typeparamref name="T" /> aus dem angegebenen Speicherort.</summary>
      <param name="source">Der Speicherort, aus dem gelesen werden soll.</param>
      <typeparam name="T">Der zu lesende Typ.</typeparam>
      <returns>Ein Objekt vom Typ <typeparamref name="T" />, das aus dem angegebenen Speicherort gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>Liest einen Wert vom Typ <typeparamref name="T" /> aus dem angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</summary>
      <param name="source">Der Speicherort, aus dem gelesen werden soll.</param>
      <typeparam name="T">Der zu lesende Typ.</typeparam>
      <returns>Ein Objekt vom Typ <typeparamref name="T" />, das aus dem angegebenen Speicherort gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>Liest einen Wert vom Typ <typeparamref name="T" /> aus dem angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</summary>
      <param name="source">Der Speicherort, aus dem gelesen werden soll.</param>
      <typeparam name="T">Der zu lesende Typ.</typeparam>
      <returns>Ein Objekt vom Typ <typeparamref name="T" />, das aus dem angegebenen Speicherort gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>Gibt die Größe eines Objekts des angegebenen Typparameters zurück.</summary>
      <typeparam name="T">Der Typ des Objekts, dessen Größe abgerufen wird.</typeparam>
      <returns>Die Größe eines Objekts vom Typ <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>Subtrahiert ein Elementoffset vom angegebenen Verweis.</summary>
      <param name="source">Der Verweis, von dem das Offset abgezogen werden soll.</param>
      <param name="elementOffset">Der Offset, der subtrahiert werden soll.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Ein neuer Verweis, der die Subtraktion des Offsets vom Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>Subtrahiert ein Elementoffset vom angegebenen Verweis.</summary>
      <param name="source">Der Verweis, von dem das Offset abgezogen werden soll.</param>
      <param name="elementOffset">Der Offset, der subtrahiert werden soll.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Ein neuer Verweis, der die Subtraktion des Offsets vom Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>Subtrahiert ein Elementoffset vom angegebenen void-Zeiger.</summary>
      <param name="source">Der void-Zeiger, von dem der Offset subtrahiert werden soll.</param>
      <param name="elementOffset">Der Offset, der subtrahiert werden soll.</param>
      <typeparam name="T">Der Typ des void-Zeigers.</typeparam>
      <returns>Ein neuer void-Zeiger, der die Subtraktion des Offsets vom angegebenen Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>Subtrahiert ein Byteoffset vom angegebenen Verweis.</summary>
      <param name="source">Der Verweis, von dem das Offset abgezogen werden soll.</param>
      <param name="byteOffset">Der Offset, der subtrahiert werden soll.</param>
      <typeparam name="T">Der Typ des Verweises.</typeparam>
      <returns>Ein neuer Verweis, der die Subtraktion des Byteoffsets vom Zeiger widerspiegelt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>Gibt eine <see langword="mutable ref" /> für einen geschachtelten Wert zurück.</summary>
      <param name="box">Der mittels Unboxing zu konvertierende Wert.</param>
      <typeparam name="T">Der Typ, der entpackt werden soll.</typeparam>
      <returns>Die <see langword="mutable ref" /> für den geschachtelten Wert <paramref name="box" />.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="box" /> ist <see langword="null" /> und <typeparamref name="T" /> ist ein nicht auf 0 (null) festlegbarer Werttyp.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> ist ein geschachtelter Werttyp.
- oder -
<paramref name="box" /> ist kein geschachtelter <typeparamref name="T" />.</exception>
      <exception cref="T:System.TypeLoadException">
        <typeparamref name="T" /> kann nicht gefunden werden.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>Schreibt einen Wert vom Typ <typeparamref name="T" /> in den angegebenen Speicherort.</summary>
      <param name="destination">Der Speicherort, an den geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
      <typeparam name="T">Der Typ des zu schreibenden Werts.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>Schreibt einen Wert vom Typ <typeparamref name="T" /> in den angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</summary>
      <param name="destination">Der Speicherort, an den geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
      <typeparam name="T">Der Typ des zu schreibenden Werts.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>Schreibt einen Wert vom Typ <typeparamref name="T" /> in den angegebenen Speicherort, ohne eine architekturabhängige Ausrichtung der Adressen vorauszusetzen.</summary>
      <param name="destination">Der Speicherort, an den geschrieben werden soll.</param>
      <param name="value">Der zu schreibende Wert.</param>
      <typeparam name="T">Der Typ des zu schreibenden Werts.</typeparam>
    </member>
  </members>
</doc>
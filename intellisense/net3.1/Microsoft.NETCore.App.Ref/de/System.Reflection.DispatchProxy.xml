<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.DispatchProxy</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.DispatchProxy">
      <summary>Stellt einen Mechanismus bereit, mit dem sich Proxyobjekte instanziieren lassen und der Dispatch der Methoden behandelt werden kann.</summary>
    </member>
    <member name="M:System.Reflection.DispatchProxy.#ctor" />
    <member name="M:System.Reflection.DispatchProxy.Create``2">
      <summary>Erstellt eine Objektinstanz, die von der Klasse <typeparamref name="TProxy" /> erbt und die Schnittstelle <typeparamref name="T" /> implementiert.</summary>
      <typeparam name="T">Die Schnittstelle, die der Proxy implementieren soll.</typeparam>
      <typeparam name="TProxy">Die Basisklasse, die für die Proxy Klasse verwendet werden soll.</typeparam>
      <returns>Eine Objektinstanz, die <typeparamref name="T" /> implementiert.</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> ist eine Klasse. Alternativ ist <typeparamref name="TProxy" /> versiegelt oder verfügt nicht über einen parameterlosen Konstruktor.</exception>
    </member>
    <member name="M:System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
      <summary>Wenn eine Methode für den generierten Proxytyp aufgerufen wird, wird diese Methode zur Steuerungsdelegation verwendet.</summary>
      <param name="targetMethod">Die Methode, die die aufrufende Funktion aufgerufen hat.</param>
      <param name="args">Die Argumente, die die aufrufende Funktion der Methode übergeben hat.</param>
      <returns>Das Objekt, das an die aufrufende Funktion zurückgegeben wird, oder <see langword="null" /> für void-Methoden.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualBasic.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualBasic.AppWinStyle">
      <summary>Gibt in Aufrufen der <see langword="Shell" />-Funktion den Fensterstil an, der für das aufgerufene Programm verwendet werden soll.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.Hide">
      <summary>Das Fenster wird ausgeblendet, und das ausgeblendete Fenster erhält den Fokus. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbHide" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MaximizedFocus">
      <summary>Das Fenster wird maximiert und besitzt den Fokus. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMaximizedFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedFocus">
      <summary>Das Fenster wird als Symbol angezeigt, das den Fokus besitzt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMinimizedFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.MinimizedNoFocus">
      <summary>Das Fenster wird als Symbol angezeigt. Das derzeit aktive Fenster bleibt aktiv. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMinimizedNoFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalFocus">
      <summary>Das Fenster besitzt den Fokus und wird in der ursprünglichen Größe und an der ursprünglichen Position wiederhergestellt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbNormalFocus" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.AppWinStyle.NormalNoFocus">
      <summary>Das Fenster wird in der letzten Größe und an der letzten Position wiederhergestellt. Das derzeit aktive Fenster bleibt aktiv. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbNormalNoFocus" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CallType">
      <summary>Gibt den Typ der Prozedur an, die beim Aufrufen der <see langword="CallByName" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Get">
      <summary>Ein Eigenschaftswert wird abgerufen.  Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbGet" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Let">
      <summary>Ein Objekteigenschaftswert wird festgelegt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbLet" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Method">
      <summary>Eine Methode wird aufgerufen.  Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMethod" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Set">
      <summary>Ein Eigenschaftswert wird festgelegt.  Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbSet" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Collection">
      <summary>Eine Visual Basic-<see langword="Collection" /> ist eine geordnete Menge von Elementen, auf die als Einheit verwiesen werden kann.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.#ctor">
      <summary>Erstellt ein neues <see cref="T:Microsoft.VisualBasic.Collection" />-Objekt von Visual Basic und gibt dieses zurück</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
      <summary>Fügt einem <see langword="Collection" />-Objekt ein Element hinzu.</summary>
      <param name="Item">Erforderlich. Ein Objekt eines beliebigen Typs, das das Element angibt, das der Auflistung hinzugefügt werden soll.</param>
      <param name="Key">Dies ist optional. Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf dieses neue Element in der Auflistung zuzugreifen.</param>
      <param name="Before">Optional. Ein Ausdruck, der eine relative Position in der Auflistung angibt. Das hinzuzufügende Element wird in der Auflistung vor dem Element platziert, das vom <paramref name="Before" />-Argument angegeben wird. Wenn <paramref name="Before" /> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung handeln. Ist <paramref name="Before" /> ein <see langword="String" />-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde. Sie können nicht gleichzeitig <paramref name="Before" /> und <paramref name="After" /> festlegen.</param>
      <param name="After">Dies ist optional. Ein Ausdruck, der eine relative Position in der Auflistung angibt. Das hinzuzufügende Element wird in der Auflistung nach dem Element platziert, das vom <paramref name="After" />-Argument angegeben wird. Wenn <paramref name="After" /> ein numerischer Ausdruck ist, muss es sich dabei um eine Zahl zwischen 1 und dem Wert der <see langword="Count" />-Eigenschaft der Auflistung handeln. Ist <paramref name="After" /> ein <see langword="String" />-Ausdruck, muss dieser der Schlüsselzeichenfolge entsprechen, die angegeben wurde, als das Element, auf das verwiesen wird, zur Auflistung hinzugefügt wurde. Sie können nicht gleichzeitig <paramref name="Before" /> und <paramref name="After" /> festlegen.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Clear">
      <summary>Löscht alle Elemente eines <see langword="Collection" />-Objekts in Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
      <summary>Gibt einen Wert zurück, der angibt, ob ein <see langword="Collection" />-Objekt in Visual Basic ein Element mit einem bestimmten Schlüssel enthält.</summary>
      <param name="Key">Erforderlich. Ein <see langword="String" />-Ausdruck, der den Schlüssel angibt, nach dem die Elemente der Auflistung durchsucht werden sollen.</param>
      <returns>
        <see langword="true" />, wenn das Visual Basic <see langword="Collection" />-Objekt ein Element mit einem bestimmten Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Count">
      <summary>Ruft die Anzahl der Elemente in einer Auflistung ab.</summary>
      <returns>Die Anzahl der Elemente in einer Auflistung.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
      <summary>Ruft ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel ab.</summary>
      <param name="Index">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt. <paramref name="Index" /> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein. Oder (B) Ein <see langword="Object" />-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</param>
      <returns>Ein bestimmtes Element eines <see langword="Collection" /> Objekts entweder anhand der Position oder anhand des Schlüssels.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
      <summary>Ruft ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel ab.</summary>
      <param name="Index">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt. <paramref name="Index" /> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein. Oder (B) Ein <see langword="Object" />-Ausdruck, der die Position oder Schlüsselzeichenfolge eines Elements der Auflistung angibt.</param>
      <returns>Ein bestimmtes Element eines <see langword="Collection" /> Objekts entweder anhand der Position oder anhand des Schlüssels.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.String)">
      <summary>Ruft ein bestimmtes Element eines <see langword="Collection" />-Objekts entweder nach Position oder nach Schlüssel ab.</summary>
      <param name="Key">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen. <paramref name="Key" /> muss dem <paramref name="Key" />-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</param>
      <returns>Ein bestimmtes Element eines <see langword="Collection" /> Objekts entweder anhand der Position oder anhand des Schlüssels.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
      <summary>Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</summary>
      <param name="Index">Ein numerischer Ausdruck, der die Position eines Elements der Auflistung angibt. <paramref name="Index" /> muss eine Zahl zwischen 1 und dem Wert der <see cref="P:Microsoft.VisualBasic.Collection.Count" />-Eigenschaft der Auflistung sein.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
      <summary>Entfernt ein Element aus einem <see langword="Collection" />-Objekt.</summary>
      <param name="Key">Ein eindeutiger <see langword="String" />-Ausdruck, der eine Schlüsselzeichenfolge angibt, die anstelle eines Positionsindex verwendet werden kann, um auf ein Element der Auflistung zuzugreifen. <paramref name="Key" /> muss dem <paramref name="Key" />-Argument entsprechen, das beim Hinzufügen des Elements zur Auflistung angegeben wurde.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.ComClassAttribute">
      <summary>Das <see langword="ComClassAttribute" />-Attribut weist den Compiler an, Metadaten hinzuzufügen, die es ermöglichen, dass eine Klasse als COM-Objekt verfügbar gemacht wird.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see langword="ComClassAttribute" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see langword="ComClassAttribute" />-Klasse.</summary>
      <param name="_ClassID">Initialisiert den Wert der <see langword="ClassID" />-Eigenschaft, mit der eine Klasse eindeutig identifiziert wird.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see langword="ComClassAttribute" />-Klasse.</summary>
      <param name="_ClassID">Initialisiert den Wert der <see langword="ClassID" />-Eigenschaft, mit der eine Klasse eindeutig identifiziert wird.</param>
      <param name="_InterfaceID">Initialisiert den Wert der <see langword="InterfaceID" />-Eigenschaft, mit der eine Schnittstelle eindeutig identifiziert wird.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.ComClassAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see langword="ComClassAttribute" />-Klasse.</summary>
      <param name="_ClassID">Initialisiert den Wert der <see langword="ClassID" />-Eigenschaft, mit der eine Klasse eindeutig identifiziert wird.</param>
      <param name="_InterfaceID">Initialisiert den Wert der <see langword="InterfaceID" />-Eigenschaft, mit der eine Schnittstelle eindeutig identifiziert wird.</param>
      <param name="_EventId">Initialisiert den Wert der <see langword="EventID" />-Eigenschaft, mit der ein Ereignis eindeutig identifiziert wird.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.ClassID">
      <summary>Ruft eine Klassen-ID ab, mit der eine Klasse eindeutig identifiziert wird.</summary>
      <returns>Schreibgeschützt. Eine Zeichenfolge, mit der der Compiler beim Erstellen eines COM-Objekts eindeutig die Klasse identifizieren kann.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.EventID">
      <summary>Ruft eine Ereignis-ID ab, mit der ein Ereignis eindeutig identifiziert wird.</summary>
      <returns>Schreibgeschützt. Eine Zeichenfolge, mit der der Compiler beim Erstellen eines COM-Objekts eindeutig ein Ereignis für die Klasse identifizieren kann.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceID">
      <summary>Ruft eine Schnittstellen-ID ab, mit der eine Schnittstelle eindeutig identifiziert wird.</summary>
      <returns>Schreibgeschützt. Eine Zeichenfolge, mit der der Compiler beim Erstellen eines COM-Objekts eindeutig eine Schnittstelle für die Klasse identifizieren kann.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ComClassAttribute.InterfaceShadows">
      <summary>Gibt an, dass der COM-Schnittstellenname ein Shadowing für einen anderen Member der Klasse oder der Basisklasse ausführt.</summary>
      <returns>Ein <see langword="Boolean" />-Wert, der angibt, dass der COM-Schnittstellenname ein Shadowing für einen anderen Member der Klasse oder der Basisklasse ausführt.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompareMethod">
      <summary>Gibt in Aufrufen von Vergleichsfunktionen an, wie Zeichenfolgen miteinander verglichen werden sollen.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Binary">
      <summary>Führt einen binären Vergleich durch. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbBinaryCompare" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Text">
      <summary>Führt einen Textvergleich durch. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbTextCompare" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.BooleanType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Boolean" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Boolean" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.BooleanType.FromString(System.String)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Boolean" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Boolean" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ByteType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Byte" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Byte" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Byte" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ByteType.FromString(System.String)">
      <summary>Gibt einen <see langword="Byte" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Byte" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Byte" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharArrayType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="CharArray" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="CharArray" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="CharArray" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharArrayType.FromString(System.String)">
      <summary>Gibt einen <see langword="CharArray" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="CharArray" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="CharArray" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.CharType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Char" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Char" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Char" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.CharType.FromString(System.String)">
      <summary>Gibt einen <see langword="Char" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Char" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Char" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Conversions">
      <summary>Enthält Methoden, die verschiedene Typkonvertierungen ausführen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ChangeType(System.Object,System.Type)">
      <summary>Konvertiert ein Objekt in den angegebenen Typ.</summary>
      <param name="Expression">Das zu konvertierende Objekt.</param>
      <param name="TargetType">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <returns>Ein Objekt vom angegebenen Zieltyp.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FallbackUserDefinedConversion(System.Object,System.Type)">
      <summary>Konvertiert ein Objekt in den angegebenen Typ.</summary>
      <param name="Expression">Das zu konvertierende Objekt.</param>
      <param name="TargetType">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <returns>Ein Objekt vom angegebenen Zieltyp.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharAndCount(System.Char,System.Int32)">
      <summary>Konvertiert einen <see cref="T:System.Char" />-Wert in eine Zeichenfolge, wobei eine Byteanzahl angegeben wird.</summary>
      <param name="Value">Der zu konvertierende <see langword="Char" />-Wert.</param>
      <param name="Count">Die Byteanzahl des <see langword="Char" />-Werts.</param>
      <returns>Die Zeichenfolgenentsprechung des angegebenen Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArray(System.Char[])">
      <summary>Konvertiert ein <see cref="T:System.Char" />-Array in eine Zeichenfolge.</summary>
      <param name="Value">Das zu konvertierende <see langword="Char" />-Array.</param>
      <returns>Die Zeichenfolgenentsprechung des angegebenen Arrays.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArraySubset(System.Char[],System.Int32,System.Int32)">
      <summary>Konvertiert eine Teilmenge eines <see cref="T:System.Char" />-Arrays in eine Zeichenfolge.</summary>
      <param name="Value">Das zu konvertierende <see langword="Char" />-Array.</param>
      <param name="StartIndex">Nullbasierter Index der Anfangsposition.</param>
      <param name="Length">Länge der Teilmenge in Bytes.</param>
      <returns>Die Zeichenfolgenentsprechung des angegebenen Arrays von der Anfangsposition bis zur angegebenen Länge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.Boolean" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Ein <see langword="Boolean" />-Wert. Gibt <see langword="False" /> zurück, wenn das Objekt NULL ist, andernfalls <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see cref="T:System.Boolean" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Ein <see langword="Boolean" />-Wert. Gibt <see langword="False" /> zurück, wenn die Zeichenfolge NULL ist, andernfalls <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.Byte" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Byte" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see cref="T:System.Byte" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Byte" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.Char" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Char" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see cref="T:System.Char" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Char" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.Object)">
      <summary>Konvertiert ein Objekt in ein eindimensionales <see cref="T:System.Char" />-Array.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Ein eindimensionales <see langword="Char" />-Array.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.String)">
      <summary>Konvertiert eine Zeichenfolge in ein eindimensionales <see cref="T:System.Char" />-Array.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Ein eindimensionales <see langword="Char" />-Array.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.DateTime" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="DateTime" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see cref="T:System.DateTime" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="DateTime" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Boolean)">
      <summary>Konvertiert einen <see cref="T:System.Boolean" />-Wert in einen <see cref="T:System.Decimal" />-Wert.</summary>
      <param name="Value">Ein zu konvertierender boolescher Wert.</param>
      <returns>Der <see langword="Decimal" />-Wert des booleschen Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.Decimal" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Decimal" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see cref="T:System.Decimal" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Decimal" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.Double" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Double" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see cref="T:System.Double" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Double" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToGenericParameter``1(System.Object)">
      <summary>Konvertiert ein Objekt in einen generischen Typ <paramref name="T" />.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <typeparam name="T">Der Typ, in den <paramref name="Value" /> konvertiert werden soll.</typeparam>
      <returns>Eine Struktur oder ein Objekt des generischen Typs <paramref name="T" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.Object)">
      <summary>Konvertiert ein Objekt in einen ganzzahligen Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="int" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen ganzzahligen Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="int" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see langword="Long" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Long" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see langword="Long" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Long" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.SByte" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="SByte" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see cref="T:System.SByte" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="SByte" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see langword="Short" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Short" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see langword="Short" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Short" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.Single" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Single" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.String)">
      <summary>Konvertiert einen <see cref="T:System.String" /> in einen <see cref="T:System.Single" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Single" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Boolean)">
      <summary>Konvertiert einen <see cref="T:System.Boolean" />-Wert in einen <see cref="T:System.String" />.</summary>
      <param name="Value">Der zu konvertierende <see langword="Boolean" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Boolean" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Byte)">
      <summary>Konvertiert einen <see cref="T:System.Byte" />-Wert in einen <see cref="T:System.String" />.</summary>
      <param name="Value">Der zu konvertierende <see langword="Byte" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Byte" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Char)">
      <summary>Konvertiert einen <see cref="T:System.Char" />-Wert in einen <see cref="T:System.String" />.</summary>
      <param name="Value">Der zu konvertierende <see langword="Char" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Char" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.DateTime)">
      <summary>Konvertiert einen <see cref="T:System.DateTime" />-Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="DateTime" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="DateTime" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal)">
      <summary>Konvertiert einen <see cref="T:System.Decimal" />-Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="Decimal" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Decimal" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>Konvertiert einen <see cref="T:System.Decimal" />-Wert in einen <see cref="T:System.String" />-Wert und verwendet das angegebene Zahlenformat.</summary>
      <param name="Value">Der zu konvertierende <see langword="decimal" />-Wert.</param>
      <param name="NumberFormat">Das nach <see cref="T:System.Globalization.NumberFormatInfo" /> zu verwendende Zahlenformat.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Decimal" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double)">
      <summary>Konvertiert einen <see cref="T:System.Double" />-Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="Double" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Double" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>Konvertiert einen <see cref="T:System.Double" />-Wert in einen <see cref="T:System.String" />-Wert und verwendet das angegebene Zahlenformat.</summary>
      <param name="Value">Der zu konvertierende <see langword="Double" />-Wert.</param>
      <param name="NumberFormat">Das nach <see cref="T:System.Globalization.NumberFormatInfo" /> zu verwendende Zahlenformat.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Double" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int16)">
      <summary>Konvertiert einen <see langword="Short" />-Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="Short" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Short" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int32)">
      <summary>Konvertiert einen ganzzahligen Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="int" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="int" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int64)">
      <summary>Konvertiert einen <see langword="Long" />-Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="Long" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Long" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Die <see langword="String" />-Entsprechung des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single)">
      <summary>Konvertiert einen <see cref="T:System.Single" />-Wert (Gleitkommazahl mit einfacher Genauigkeit) in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="Single" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Single" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>Konvertiert einen <see cref="T:System.Single" />-Wert in einen <see cref="T:System.String" />-Wert und verwendet das angegebene Zahlenformat.</summary>
      <param name="Value">Der zu konvertierende <see langword="Single" />-Wert.</param>
      <param name="NumberFormat">Das nach <see cref="T:System.Globalization.NumberFormatInfo" /> zu verwendende Zahlenformat.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Single" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt32)">
      <summary>Konvertiert einen <see langword="uint" />-Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="Uint" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Uint" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt64)">
      <summary>Konvertiert einen <see langword="Ulong" />-Wert in einen <see cref="T:System.String" />-Wert.</summary>
      <param name="Value">Der zu konvertierende <see langword="Ulong" />-Wert.</param>
      <returns>Die <see langword="String" />-Entsprechung des <see langword="Ulong" />-Werts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see langword="Uint" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Uint" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see langword="Uint" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Uint" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see langword="Ulong" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Ulong" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see langword="Ulong" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Ulong" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.Object)">
      <summary>Konvertiert ein Objekt in einen <see langword="Ushort" />-Wert.</summary>
      <param name="Value">Das zu konvertierende Objekt.</param>
      <returns>Der <see langword="Ushort" />-Wert des Objekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.String)">
      <summary>Konvertiert eine Zeichenfolge in einen <see langword="Ushort" />-Wert.</summary>
      <param name="Value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Der <see langword="Ushort" />-Wert der Zeichenfolge.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DateType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Date" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Date" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Date" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Date" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DateType.FromString(System.String,System.Globalization.CultureInfo)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der der angegebenen Zeichenfolge entspricht, sowie Informationen zur Kultur.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Date" />-Wert konvertiert werden soll.</param>
      <param name="culture">Erforderlich. Ein <see cref="T:System.Globalization.CultureInfo" />-Objekt, das definiert, wie Datumswerte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Date" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DecimalType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromBoolean(System.Boolean)">
      <summary>Gibt einen <see langword="Decimal" />-Wert zurück, der dem angegebenen <see langword="Boolean" />-Wert entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Boolean" />, der in einen <see langword="Decimal" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Decimal" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Decimal" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Decimal" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Decimal" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Decimal" />-Wert zurück, der dem angegebenen Objekt entspricht, sowie Informationen zum Zahlenformat.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Decimal" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Decimal" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String)">
      <summary>Gibt einen <see langword="Decimal" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Decimal" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Decimal" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Decimal" />-Wert zurück, der der angegebenen Zeichenfolge entspricht, sowie Informationen zum Zahlenformat.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Decimal" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Decimal" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DecimalType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Decimal" />-Wert zurück, der der angegebenen Zeichenfolge entspricht, sowie Informationen zum Zahlenformat.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Decimal" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Decimal" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute">
      <summary>Beim Anwenden auf eine Klasse ruft der Compiler implizit eine Methode zum Initialisieren der Komponente aus dem standardmäßigen synthetischen Standardkonstruktor auf.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz des <see cref="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute" />-Attributs.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DoubleType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Double" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Double" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Double" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Double" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Double" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Double" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String)">
      <summary>Gibt einen <see langword="Double" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Double" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Double" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Double" />-Wert zurück, der der angegebenen Zeichenfolge entspricht, sowie Informationen zum Zahlenformat.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Double" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Double" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String)">
      <summary>Gibt einen <see langword="Double" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Double" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Double" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DoubleType.Parse(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Double" />-Wert zurück, der der angegebenen Zeichenfolge entspricht, sowie Informationen zum Zahlenformat.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Double" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Double" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization">
      <summary>Der Visual Basic-Compiler verwendet diese Klasse während der statischen lokalen Initialisierung. Sie ist nicht für den direkten Aufruf aus Code vorgesehen. Eine Ausnahme dieses Typs wird ausgelöst, wenn eine statische lokale Variable nicht initialisiert werden kann.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" />-Klasse.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IntegerType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Integer" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Integer" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Integer" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IntegerType.FromString(System.String)">
      <summary>Gibt einen <see langword="Integer" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Integer" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Integer" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LateBinding">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>Führt einen Aufruf einer Objektmethode mit später Bindung aus.</summary>
      <param name="o">Das Objekt, für das eine Methode aufgerufen werden soll.</param>
      <param name="objType">Der Typ des Objekts.</param>
      <param name="name">Der Methodenname des aufzurufenden <paramref name="o" />.</param>
      <param name="args">Ein Array von Parameterwerten, die an die Methode übergeben werden sollen.</param>
      <param name="paramnames">Ein Array mit den Namen der Parameter, an die die Werte im <paramref name="args" />-Array übergeben werden.</param>
      <param name="CopyBack">Ein Array von <see langword="Boolean" />-Werten, wobei <see langword="True" /> angibt, dass der zugeordnete Parameter als <see langword="ByRef" /> übergeben wird.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean[])">
      <summary>Gibt einen Wert mit später Bindung aus einem Objekt zurück.</summary>
      <param name="o">Das Objekt, aus dem der Wert zurückgegeben werden soll.</param>
      <param name="objType">Der Typ des Objekts.</param>
      <param name="name">Der Membername von <paramref name="o" />, aus dem ein Wert abgerufen werden soll.</param>
      <param name="args">Ein Array von einem oder mehreren Indexwerten, die die Position in <paramref name="o" /> angeben, wenn <paramref name="o" /> ein eindimensionales oder mehrdimensionales Array ist, oder Argumentwerte, die an das Objekt <paramref name="o" /> übergeben werden sollen.</param>
      <param name="paramnames">Ein Array mit den Namen der Parameter, an die die Werte im <paramref name="args" />-Array übergeben werden.</param>
      <param name="CopyBack">Ein Array von <see langword="Boolean" />-Werten, wobei <see langword="True" /> angibt, dass der zugeordnete Parameter als <see langword="ByRef" /> übergeben wird.</param>
      <returns>Wenn <paramref name="o" /> ein Array ist, der Wert aus <paramref name="o" /> an der von <paramref name="args" /> angegebenen Position. Wenn <paramref name="o" /> ein Objekt ist, der Rückgabewert von <paramref name="o" />, dessen Aufruf mit den benannten Parametern in <paramref name="paramnames" /> und ihren zugeordneten Werten in <paramref name="args" /> erfolgt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>Gibt einen Wert mit später Bindung aus einem Objekt zurück, wobei der angegebene Index bzw. die angegebenen Parameter verwendet werden.</summary>
      <param name="o">Das Objekt, aus dem der Wert zurückgegeben werden soll.</param>
      <param name="args">Ein Array von einem oder mehreren Indexwerten, die die Position in <paramref name="o" /> angeben, wenn <paramref name="o" /> ein eindimensionales oder mehrdimensionales Array ist, oder Argumentwerte, die an das Objekt <paramref name="o" /> übergeben werden sollen.</param>
      <param name="paramnames">Ein Array mit den Namen der Parameter, an die die Werte im <paramref name="args" />-Array übergeben werden.</param>
      <returns>Wenn <paramref name="o" /> ein Array ist, der Wert aus <paramref name="o" /> an der von <paramref name="args" /> angegebenen Position. Wenn <paramref name="o" /> ein Objekt ist, der Rückgabewert von <paramref name="o" />, dessen Aufruf mit den benannten Parametern in <paramref name="paramnames" /> und ihren zugeordneten Werten in <paramref name="args" /> erfolgt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Legt einen Wert mit später Bindung für ein Objekt fest, wobei die angegebenen Parameter verwendet werden.</summary>
      <param name="o">Das Objekt, für das der Wert festgelegt werden soll.</param>
      <param name="args">Ein Array von einem oder mehreren Indexwerten, die die Position in <paramref name="o" /> angeben, wenn <paramref name="o" /> ein eindimensionales oder mehrdimensionales Array ist, oder Argumentwerte, die an das Objekt <paramref name="o" /> übergeben werden sollen.</param>
      <param name="paramnames">Ein Array mit den Namen der Parameter, an die die Werte im <paramref name="args" />-Array übergeben werden.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Legt einen Wert mit später Bindung für ein Objekt fest, wobei die angegebenen Parameter verwendet werden.</summary>
      <param name="o">Das Objekt, für das der Wert festgelegt werden soll.</param>
      <param name="args">Ein Array von einem oder mehreren Parameterwerten, die an das Objekt <paramref name="o" /> übergeben werden sollen.</param>
      <param name="paramnames">Ein Array mit den Namen der Parameter, an die die Werte im <paramref name="args" />-Array übergeben werden.</param>
      <param name="OptimisticSet">
        <see langword="True" />, um die Ausnahme zu unterdrücken, die ausgelöst wird, wenn der festgelegte Member nicht gefunden wird.</param>
      <param name="RValueBase">
        <see langword="True" />, um <paramref name="o" /> als Ergebnis eines Ausdrucks mit später Bindung anzugeben.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[])">
      <summary>Legt einen Wert mit später Bindung für einen Member eines Objekts fest, wobei die angegebenen Parameter verwendet werden.</summary>
      <param name="o">Das Objekt, für das der Memberwert festgelegt werden soll.</param>
      <param name="objType">Der Typ des Objekts.</param>
      <param name="name">Der festzulegende Membername.</param>
      <param name="args">Ein Array von einem oder mehreren Parameterwerten, die an den Member von <paramref name="o" /> übergeben werden sollen.</param>
      <param name="paramnames">Ein Array mit den Namen der Parameter, an die die Werte im <paramref name="args" />-Array übergeben werden.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Legt einen Wert mit später Bindung für einen Member eines Objekts fest, wobei die angegebenen Parameter verwendet werden.</summary>
      <param name="o">Das Objekt, für das der Memberwert festgelegt werden soll.</param>
      <param name="objType">Der Typ des Objekts.</param>
      <param name="name">Der festzulegende Membername.</param>
      <param name="args">Ein Array von einem oder mehreren Parameterwerten, die an den Member von <paramref name="o" /> übergeben werden sollen.</param>
      <param name="paramnames">Ein Array mit den Namen der Parameter, an die die Werte im <paramref name="args" />-Array übergeben werden.</param>
      <param name="OptimisticSet">
        <see langword="True" />, um die Ausnahme zu unterdrücken, die ausgelöst wird, wenn der festgelegte Member nicht gefunden wird.</param>
      <param name="RValueBase">
        <see langword="True" />, um <paramref name="o" /> als Ergebnis eines Ausdrucks mit später Bindung anzugeben.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LikeOperator">
      <summary>Diese Klasse stellt Hilfsmethoden bereit, die der Visual Basic-Compiler verwendet, um die Arbeit für den Like-Operator auszuführen. Sie ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>Führt einen binären Vergleich oder einen Textzeichenfolgenvergleich für zwei angegebene Objekte aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Source">Die zu vergleichende Zeichenfolge.</param>
      <param name="Pattern">Der Zeichenfolge, mit der <paramref name="Source" /> verglichen wird.</param>
      <param name="CompareOption">Eine <see cref="T:Microsoft.VisualBasic.CompareMethod" />-Enumeration, die angibt, ob ein Textvergleich durchgeführt werden soll. Wenn <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" /> festgelegt ist, verwendet diese Methode den Textvergleich; wenn <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" /> festgelegt ist, verwendet die Methode den binären Vergleich.</param>
      <returns>
        <see langword="True" />, wenn die Zeichenfolgen übereinstimmen; andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Führt einen binären Vergleich oder einen Textzeichenfolgenvergleich für zwei angegebene Zeichenfolgen aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Source">Die zu vergleichende Zeichenfolge.</param>
      <param name="Pattern">Der Zeichenfolge, mit der <paramref name="Source" /> verglichen wird.</param>
      <param name="CompareOption">Eine <see cref="T:Microsoft.VisualBasic.CompareMethod" />-Enumeration, die angibt, ob ein Textvergleich durchgeführt werden soll. Wenn <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" /> festgelegt ist, verwendet diese Methode den Textvergleich; wenn <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" /> festgelegt ist, verwendet die Methode den binären Vergleich.</param>
      <returns>
        <see langword="True" />, wenn die Zeichenfolgen übereinstimmen; andernfalls <see langword="False" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LongType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Long" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Long" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Long" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LongType.FromString(System.String)">
      <summary>Gibt einen <see langword="Long" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Long" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Long" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.NewLateBinding">
      <summary>Diese Klasse stellt Hilfsmethoden bereit, die der Visual Basic-Compiler für Aufrufe mit später Bindung verwendet. Sie ist nicht für den direkten Aufruf aus Code vorgesehen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackCall(System.Object,System.String,System.Object[],System.String[],System.Boolean)">
      <summary>Führt eine spät gebundene Methode oder einen Funktionsaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="IgnoreReturn">Ein <see langword="Boolean" />-Wert, der angibt, ob der Rückgabewert ignoriert werden kann.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackGet(System.Object,System.String,System.Object[],System.String[])">
      <summary>Führt einen Get-Vorgang einer spät gebundenen Eigenschaft oder einen Feldzugriffsaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="OptimisticSet">Ein <see langword="Boolean" />-Wert, mit dem ermittelt wird, ob der Set-Vorgang funktioniert. Legen Sie <see langword="True" /> fest, wenn Sie glauben, dass in der Eigenschaft oder im Feld ein Zwischenwert festgelegt wurde, andernfalls <see langword="False" />.</param>
      <param name="RValueBase">Ein <see langword="Boolean" />-Wert, der angibt, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Legen Sie <see langword="True" /> fest, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Dadurch können Sie eine Laufzeitausnahme für späte Zuweisungen zu Feldern der Werttypen von <see langword="RValues" /> generieren. Andernfalls legen Sie <see langword="False" /> fest.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault1(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Führt einen spät gebundenen Abruf der Standardeigenschaft oder des Felds oder einen Aufruf der Standardmethode oder Funktion aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht. Wenn <paramref name="Instance" /> den Typ <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> aufweist, binden Sie mit der Dynamic Language Runtime. Führen Sie andernfalls die standardmäßige späte Bindung aus.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="ReportErrors">Ein <see langword="Boolean" />-Wert, der angibt, ob beim Auftreten eines Fehlers Ausnahmen ausgelöst werden sollen. Auf <see langword="True" /> festlegen, wenn Ausnahmen ausgelöst werden sollen. Auf <see langword="False" /> festlegen, wenn bei Auftreten eines Fehlers <see langword="Nothing" /> zurückgegeben werden soll.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackInvokeDefault2(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Führt einen spät gebundenen Abruf der Standardeigenschaft oder des Felds oder einen Aufruf der Standardmethode oder Funktion aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="ReportErrors">Ein <see langword="Boolean" />-Wert, der angibt, ob beim Auftreten eines Fehlers Ausnahmen ausgelöst werden sollen. Auf <see langword="True" /> festlegen, wenn Ausnahmen ausgelöst werden sollen. Auf <see langword="False" /> festlegen, wenn bei Auftreten eines Fehlers <see langword="Nothing" /> zurückgegeben werden soll.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSet(System.Object,System.String,System.Object[])">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.FallbackSetComplex(System.Object,System.String,System.Object[],System.Boolean,System.Boolean)">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="OptimisticSet">Ein <see langword="Boolean" />-Wert, mit dem ermittelt wird, ob der Set-Vorgang funktioniert. Legen Sie <see langword="True" /> fest, wenn Sie glauben, dass in der Eigenschaft oder im Feld ein Zwischenwert festgelegt wurde, andernfalls <see langword="False" />.</param>
      <param name="RValueBase">Ein <see langword="Boolean" />-Wert, der angibt, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Legen Sie <see langword="True" /> fest, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Dadurch können Sie eine Laufzeitausnahme für späte Zuweisungen zu Feldern der Werttypen von <see langword="RValues" /> generieren. Andernfalls legen Sie <see langword="False" /> fest.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[],System.Boolean)">
      <summary>Führt eine spät gebundene Methode oder einen Funktionsaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Type">Der Typ des Aufrufobjekts.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="TypeArguments">Ein Array von Argumenttypen. Es wird nur für generische Aufrufe zum Übergeben von Argumenttypen verwendet.</param>
      <param name="CopyBack">Ein Array von <see langword="Boolean" />-Werten, die bei der späten Bindung verwendet werden, um die Aufrufsite darüber zu informieren, welche Argumente mit <see langword="ByRef" />-Parametern übereinstimmen. Jeder <see langword="True" />-Wert gibt an, dass die Argumente übereingestimmt haben und herauskopiert werden sollen, nachdem der Aufruf von <see langword="LateCall" /> abgeschlossen ist.</param>
      <param name="IgnoreReturn">Ein <see langword="Boolean" />-Wert, der angibt, ob der Rückgabewert ignoriert werden kann.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCallInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Führt einen spät gebundenen Aufruf der Standardmethode oder Funktion aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="ReportErrors">Ein <see langword="Boolean" />-Wert, der angibt, ob beim Auftreten eines Fehlers Ausnahmen ausgelöst werden sollen. Auf <see langword="True" /> festlegen, wenn Ausnahmen ausgelöst werden sollen. Auf <see langword="False" /> festlegen, wenn bei Auftreten eines Fehlers <see langword="Nothing" /> zurückgegeben werden soll.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[])">
      <summary>Führt einen Get-Vorgang einer spät gebundenen Eigenschaft oder einen Feldzugriffsaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Type">Der Typ des Aufrufobjekts.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="TypeArguments">Ein Array von Argumenttypen. Es wird nur für generische Aufrufe zum Übergeben von Argumenttypen verwendet.</param>
      <param name="CopyBack">Ein Array von <see langword="Boolean" />-Werten, die bei der späten Bindung verwendet werden, um die Aufrufsite darüber zu informieren, welche Argumente mit <see langword="ByRef" />-Parametern übereinstimmen. Jeder <see langword="True" />-Wert gibt an, dass die Argumente übereingestimmt haben und herauskopiert werden sollen, nachdem der Aufruf von <see langword="LateCall" /> abgeschlossen ist.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGetInvokeDefault(System.Object,System.Object[],System.String[],System.Boolean)">
      <summary>Führt einen spät gebundenen Abruf der Standardeigenschaft oder des Felds aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="ReportErrors">Ein <see langword="Boolean" />-Wert, der angibt, ob beim Auftreten eines Fehlers Ausnahmen ausgelöst werden sollen. Auf <see langword="True" /> festlegen, wenn Ausnahmen ausgelöst werden sollen. Auf <see langword="False" /> festlegen, wenn bei Auftreten eines Fehlers <see langword="Nothing" /> zurückgegeben werden soll.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>Führt einen Get-Vorgang einer spät gebundenen Eigenschaft oder einen Feldzugriffsaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <returns>Eine Instanz des Aufrufobjekts.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="OptimisticSet">Ein <see langword="Boolean" />-Wert, mit dem ermittelt wird, ob der Set-Vorgang funktioniert. Legen Sie <see langword="True" /> fest, wenn Sie glauben, dass in der Eigenschaft oder im Feld ein Zwischenwert festgelegt wurde, andernfalls <see langword="False" />.</param>
      <param name="RValueBase">Ein <see langword="Boolean" />-Wert, der angibt, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Legen Sie <see langword="True" /> fest, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Dadurch können Sie eine Laufzeitausnahme für späte Zuweisungen zu Feldern der Werttypen von <see langword="RValues" /> generieren. Andernfalls legen Sie <see langword="False" /> fest.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[])">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Type">Der Typ des Aufrufobjekts.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="TypeArguments">Ein Array von Argumenttypen. Es wird nur für generische Aufrufe zum Übergeben von Argumenttypen verwendet.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean,Microsoft.VisualBasic.CallType)">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Type">Der Typ des Aufrufobjekts.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="TypeArguments">Ein Array von Argumenttypen. Es wird nur für generische Aufrufe zum Übergeben von Argumenttypen verwendet.</param>
      <param name="OptimisticSet">Ein <see langword="Boolean" />-Wert, mit dem ermittelt wird, ob der Set-Vorgang funktioniert. Legen Sie <see langword="True" /> fest, wenn Sie glauben, dass in der Eigenschaft oder im Feld ein Zwischenwert festgelegt wurde, andernfalls <see langword="False" />.</param>
      <param name="RValueBase">Ein <see langword="Boolean" />-Wert, der angibt, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Legen Sie <see langword="True" /> fest, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Dadurch können Sie eine Laufzeitausnahme für späte Zuweisungen zu Feldern der Werttypen von <see langword="RValues" /> generieren. Andernfalls legen Sie <see langword="False" /> fest.</param>
      <param name="CallType">Ein Enumerationsmember vom Typ <see cref="T:Microsoft.VisualBasic.CallType" />, der den Typ der aufgerufenen Prozedur darstellt. Der Wert von CallType kann <see langword="Method" />, <see langword="Get" /> oder <see langword="Set" /> sein. Es wird nur <see langword="Set" /> verwendet.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean)">
      <summary>Führt einen Set-Vorgang einer spät gebundenen Eigenschaft oder einen Feldschreibaufruf aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="Instance">Eine Instanz des Aufrufobjekts, die die Eigenschaft oder die Methode verfügbar macht.</param>
      <param name="Type">Der Typ des Aufrufobjekts.</param>
      <param name="MemberName">Der Name der Eigenschaft oder der Methode für das Aufrufobjekt.</param>
      <param name="Arguments">Ein Array mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <param name="ArgumentNames">Ein Array von Argumentnamen.</param>
      <param name="TypeArguments">Ein Array von Argumenttypen. Es wird nur für generische Aufrufe zum Übergeben von Argumenttypen verwendet.</param>
      <param name="OptimisticSet">Ein <see langword="Boolean" />-Wert, mit dem ermittelt wird, ob der Set-Vorgang funktioniert. Legen Sie <see langword="True" /> fest, wenn Sie glauben, dass in der Eigenschaft oder im Feld ein Zwischenwert festgelegt wurde, andernfalls <see langword="False" />.</param>
      <param name="RValueBase">Ein <see langword="Boolean" />-Wert, der angibt, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Legen Sie <see langword="True" /> fest, wenn der Basisverweis des späten Verweises ein <see langword="RValue" /> ist. Dadurch können Sie eine Laufzeitausnahme für späte Zuweisungen zu Feldern der Werttypen von <see langword="RValues" /> generieren. Andernfalls legen Sie <see langword="False" /> fest.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl">
      <summary>Der Visual Basic-Compiler verwendet diese Klasse für die Objektablaufsteuerung. Sie ist nicht für den direkten Aufruf aus Code vorgesehen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.CheckForSyncLockOnValueType(System.Object)">
      <summary>Prüft auf eine Synchronisierungssperre für den angegebenen Typ.</summary>
      <param name="Expression">Der Datentyp, der auf eine Synchronisierungssperre geprüft wird.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl">
      <summary>Stellt für den Visual Basic-Compiler Dienste zum Kompilieren von <see langword="For...Next" />-Schleifen bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)">
      <summary>Initialisiert eine <see langword="For...Next" />-Schleife.</summary>
      <param name="Counter">Die Zählervariable für die Schleife.</param>
      <param name="Start">Der Anfangswert des Schleifenzählers.</param>
      <param name="Limit">Der Wert der <see langword="To" />-Option.</param>
      <param name="StepValue">Der Wert der <see langword="Step" />-Option.</param>
      <param name="LoopForResult">Ein Objekt, das überprüfte Werte für Schleifenwerte enthält.</param>
      <param name="CounterResult">Der Zählerwert für die nächste Schleifeniteration.</param>
      <returns>
        <see langword="False" />, wenn der Schleifendurchlauf beendet wurde, andernfalls <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)">
      <summary>Führt eine Überprüfung auf gültige Werte für den Schleifenzähler sowie den <see langword="Step" />-Wert und den <see langword="To" />-Wert aus.</summary>
      <param name="count">Erforderlich. Ein <see langword="Decimal" />-Wert, der den Anfangswert darstellt, der für die Zählervariable der Schleife übergeben wird.</param>
      <param name="limit">Erforderlich. Ein <see langword="Decimal" />-Wert, der den Wert darstellt, der mit dem <see langword="To" />-Schlüsselwort übergeben wird.</param>
      <param name="StepValue">Erforderlich. Ein <see langword="Decimal" />-Wert, der den Wert darstellt, der mit dem <see langword="Step" />-Schlüsselwort übergeben wird.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="StepValue" /> größer als 0 (null) und <paramref name="count" /> kleiner als oder gleich <paramref name="limit" /> ist oder wenn <paramref name="StepValue" /> kleiner als oder gleich 0 (null) und <paramref name="count" /> größer als oder gleich <paramref name="limit" /> ist, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)">
      <summary>Inkrementiert eine <see langword="For...Next" />-Schleife.</summary>
      <param name="Counter">Die Zählervariable für die Schleife.</param>
      <param name="LoopObj">Ein Objekt, das überprüfte Werte für Schleifenwerte enthält.</param>
      <param name="CounterResult">Der Zählerwert für die nächste Schleifeniteration.</param>
      <returns>
        <see langword="False" />, wenn der Schleifendurchlauf beendet wurde, andernfalls <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)">
      <summary>Führt eine Überprüfung auf gültige Werte für den Schleifenzähler sowie den <see langword="Step" />-Wert und den <see langword="To" />-Wert aus.</summary>
      <param name="count">Erforderlich. Ein <see langword="Single" />-Wert, der den Anfangswert darstellt, der für die Zählervariable der Schleife übergeben wird.</param>
      <param name="limit">Erforderlich. Ein <see langword="Single" />-Wert, der den Wert darstellt, der mit dem <see langword="To" />-Schlüsselwort übergeben wird.</param>
      <param name="StepValue">Erforderlich. Ein <see langword="Single" />-Wert, der den Wert darstellt, der mit dem <see langword="Step" />-Schlüsselwort übergeben wird.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="StepValue" /> größer als 0 (null) und <paramref name="count" /> kleiner als oder gleich <paramref name="limit" /> ist oder wenn <paramref name="StepValue" /> kleiner als oder gleich 0 (null) und <paramref name="count" /> größer als oder gleich <paramref name="limit" /> ist, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)">
      <summary>Führt eine Überprüfung auf gültige Werte für den Schleifenzähler sowie den <see langword="Step" />-Wert und den <see langword="To" />-Wert aus.</summary>
      <param name="count">Erforderlich. Ein <see langword="Double" />-Wert, der den Anfangswert darstellt, der für die Zählervariable der Schleife übergeben wird.</param>
      <param name="limit">Erforderlich. Ein <see langword="Double" />-Wert, der den Wert darstellt, der mit dem <see langword="To" />-Schlüsselwort übergeben wird.</param>
      <param name="StepValue">Erforderlich. Ein <see langword="Double" />-Wert, der den Wert darstellt, der mit dem <see langword="Step" />-Schlüsselwort übergeben wird.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="StepValue" /> größer als 0 (null) und <paramref name="count" /> kleiner als oder gleich <paramref name="limit" /> ist oder wenn <paramref name="StepValue" /> kleiner als oder gleich 0 (null) und <paramref name="count" /> größer als oder gleich <paramref name="limit" /> ist, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.CompilerServices.ObjectType" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.AddObj(System.Object,System.Object)">
      <summary>Führt einen Additionsvorgang (+) aus.</summary>
      <param name="o1">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="o2">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Die Summe von <paramref name="o1" /> und <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitAndObj(System.Object,System.Object)">
      <summary>Führt eine bitweise <see langword="And" />-Operation aus.</summary>
      <param name="obj1">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <param name="obj2">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>1, wenn sowohl <paramref name="obj1" /> als auch <paramref name="obj2" /> 1 ergeben, andernfalls 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitOrObj(System.Object,System.Object)">
      <summary>Führt eine bitweise <see langword="Or" />-Operation aus.</summary>
      <param name="obj1">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <param name="obj2">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>0, wenn sowohl <paramref name="obj1" /> als auch <paramref name="obj2" /> 0 ergeben, andernfalls 1.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.BitXorObj(System.Object,System.Object)">
      <summary>Führt eine <see langword="Xor" />-Operation aus.</summary>
      <param name="obj1">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <param name="obj2">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>Ein numerischer Wert, der den bitweisen Ausschluss (exklusive bitweise Disjunktion) aus zwei numerischen Bitmustern darstellt. Weitere Informationen finden Sie unter Xor Operator.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.DivObj(System.Object,System.Object)">
      <summary>Führt einen Divisionsvorgang (/) aus.</summary>
      <param name="o1">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="o2">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der volle Quotient, der sich aus der Division von <paramref name="o1" /> durch <paramref name="o2" /> ergibt, einschließlich des Rests.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.GetObjectValuePrimitive(System.Object)">
      <summary>Gibt einen geschachtelten primitiven Wert zurück. Mithilfe dieser Methode wird verhindert, dass Strukturen mehrmals kopiert werden.</summary>
      <param name="o">Erforderlich. Beliebiger Ausdruck.</param>
      <returns>Der primitive Wert des als Objekt festgelegten <paramref name="o" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.IDivObj(System.Object,System.Object)">
      <summary>Führt einen Divisionsvorgang (\) mit ganzen Zahlen aus.</summary>
      <param name="o1">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="o2">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der ganzzahlige Quotient, der sich aus der Division von <paramref name="o1" /> durch <paramref name="o2" /> ergibt. Es wird nur der ganzzahlige Teil beibehalten, und ein eventueller Rest wird verworfen.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.LikeObj(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>Führt einen <see langword="Like" />-Vergleich aus.</summary>
      <param name="vLeft">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="vRight">Erforderlich. Ein beliebiger Zeichenfolgenausdruck, der den in Like-Operator beschriebenen Mustervergleichskonventionen entspricht.</param>
      <param name="CompareOption">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.CompareMethod" />-Wert, der angibt, dass bei der Operation ein Textvergleich oder ein binärer Vergleich durchgeführt wird.</param>
      <returns>
        <see langword="True" />, wenn die Zeichenfolgendarstellung des Werts in <paramref name="vLeft" /> dem in <paramref name="vRight" /> enthaltenen Muster entspricht, andernfalls <see langword="False" />. <see langword="True" />, wenn sowohl <paramref name="vLeft" /> als auch <paramref name="vRight" /> gleich <see langword="Nothing" /> sind.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ModObj(System.Object,System.Object)">
      <summary>Führt einen Modulo-Vorgang (<see langword="Mod" />) aus.</summary>
      <param name="o1">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="o2">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der Rest aus der Division von <paramref name="o1" /> durch <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.MulObj(System.Object,System.Object)">
      <summary>Führt einen Multiplikationsvorgang (*) aus.</summary>
      <param name="o1">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="o2">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Das Produkt von <paramref name="o1" /> und <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NegObj(System.Object)">
      <summary>Führt den Vorgang „unäres Minus“ (–) aus.</summary>
      <param name="obj">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der negative Wert von <paramref name="obj" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.NotObj(System.Object)">
      <summary>Führt eine <see langword="Not" />-Operation aus.</summary>
      <param name="obj">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>Für <see langword="Boolean" />-Operationen: <see langword="False" />, wenn <paramref name="obj" /> gleich <see langword="True" /> ist, andernfalls <see langword="True" />. Für bitweise Operationen: 1, wenn <paramref name="obj" /> gleich 0 ist, andernfalls 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ObjTst(System.Object,System.Object,System.Boolean)">
      <summary>Führt einen binären Vergleich oder einen Textzeichenfolgenvergleich für zwei angegebene Objekte aus.</summary>
      <param name="o1">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="o2">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Wert 
 Bedingung 
 -1 

<paramref name="o1" /> ist kleiner als <paramref name="o2" />.  
  
 0 

<paramref name="o1" /> ist gleich <paramref name="o2" />.  
  
 1 

<paramref name="o1" /> ist größer als <paramref name="o2" />.  
  

.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PlusObj(System.Object)">
      <summary>Führt einen unären Additionsvorgang (+) aus.</summary>
      <param name="obj">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der Wert von <paramref name="obj" />. (Das Vorzeichen von <paramref name="obj" /> wird nicht geändert.)</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.PowObj(System.Object,System.Object)">
      <summary>Führt einen Exponentialvorgang (^) aus.</summary>
      <param name="obj1">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="obj2">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Das Ergebnis der Potenzierung von <paramref name="obj1" /> mit <paramref name="obj2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftLeftObj(System.Object,System.Int32)">
      <summary>Führt eine arithmetische Verschiebung nach links (&lt;&lt;) aus.</summary>
      <param name="o1">Erforderlich. Ein ganzzahliger numerischer Ausdruck. Das zu verschiebende Bitmuster. Der Datentyp muss ein ganzzahliger Typ (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" /> oder <see langword="ULong" />) sein.</param>
      <param name="amount">Erforderlich. Ein numerischer Ausdruck. Die Anzahl der Bits, um die das Bitmuster verschoben werden soll. Der Datentyp muss <see langword="Integer" /> sein oder zu <see langword="Integer" /> erweitert werden.</param>
      <returns>Ein ganzzahliger numerischer Wert. Das Ergebnis der Verschiebung des Bitmusters. Der Datentyp entspricht dem von <paramref name="o1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.ShiftRightObj(System.Object,System.Int32)">
      <summary>Führt eine arithmetische Verschiebung nach rechts (&gt;&gt;) aus.</summary>
      <param name="o1">Erforderlich. Ein ganzzahliger numerischer Ausdruck. Das zu verschiebende Bitmuster. Der Datentyp muss ein ganzzahliger Typ (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" /> oder <see langword="ULong" />) sein.</param>
      <param name="amount">Erforderlich. Ein numerischer Ausdruck. Die Anzahl der Bits, um die das Bitmuster verschoben werden soll. Der Datentyp muss <see langword="Integer" /> sein oder zu <see langword="Integer" /> erweitert werden.</param>
      <returns>Ein ganzzahliger numerischer Wert. Das Ergebnis der Verschiebung des Bitmusters. Der Datentyp entspricht dem von <paramref name="o1" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.StrCatObj(System.Object,System.Object)">
      <summary>Führt eine Zeichenfolgenverkettung (&amp;) aus.</summary>
      <param name="vLeft">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="vRight">Erforderlich. Beliebiger Ausdruck.</param>
      <returns>Eine Zeichenfolge, die die Verkettung von <paramref name="vLeft" /> und <paramref name="vRight" /> darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.SubObj(System.Object,System.Object)">
      <summary>Führt einen Subtraktionsvorgang (–) aus.</summary>
      <param name="o1">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="o2">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Die Differenz zwischen <paramref name="o1" /> und <paramref name="o2" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectType.XorObj(System.Object,System.Object)">
      <summary>Führt einen <see langword="Xor" />-Vergleich aus.</summary>
      <param name="obj1">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <param name="obj2">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>Ein <see langword="Boolean" />-Wert oder ein numerischer Wert. Bei einem <see langword="Boolean" />-Vergleich ist der Rückgabewert der logische Ausschluss (exklusive logische Disjunktion) aus zwei <see langword="Boolean" />-Werten. Bei bitweisen (numerischen) Vorgängen ist der Rückgabewert ein numerischer Wert, der den bitweisen Ausschluss (exklusive bitweise Disjunktion) aus zwei numerischen Bitmustern darstellt. Weitere Informationen finden Sie unter Xor Operator.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Operators">
      <summary>Stellt mathematische Operatoren mit später Bindung bereit, z. B. <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)" /> und <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)" />, die vom Visual Basic-Compiler intern verwendet werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)">
      <summary>Stellt den Visual Basic-Additionsoperator (+) dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Die Summe von <paramref name="Left" /> und <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)">
      <summary>Stellt den <see langword="And" />-Operator in Visual Basic dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>Für <see langword="Boolean" />-Operationen: <see langword="True" />, wenn sowohl <paramref name="Left" /> als auch <paramref name="Right" /><see langword="True" /> ergeben, andernfalls <see langword="False" />. Für bitweise Operationen: 1, wenn sowohl <paramref name="Left" /> als auch <paramref name="Right" /> 1 ergeben, andernfalls 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den Visual Basic-Gleichheitsoperator (=) dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="Left" /> und <paramref name="Right" /> gleich sind, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den Visual Basic-größer-als (&gt;)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="Left" /> größer als <paramref name="Right" /> ist, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den Visual Basic-größer-als-oder-gleich (&gt;=)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="Left" /> größer oder gleich <paramref name="Right" /> ist, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den Visual Basic-kleiner-als (&lt;)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="Left" /> kleiner als <paramref name="Right" /> ist, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den Visual Basic-kleiner-als-oder-gleich (&lt;=)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="Left" /> kleiner oder gleich <paramref name="Right" /> ist, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den Visual Basic-Ungleichheitsoperator (&lt;&gt;) dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>
        <see langword="True" />, wenn <paramref name="Left" /> und <paramref name="Right" /> ungleich sind, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)">
      <summary>Führt einen binären Vergleich oder einen Textzeichenfolgenvergleich für zwei angegebene Zeichenfolgen aus.</summary>
      <param name="Left">Erforderlich. Beliebiger <see langword="String" /> -Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger <see langword="String" /> -Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Wert 
 Bedingung 
 -1 

<paramref name="Left" /> ist kleiner als <paramref name="Right" />.  
  
 0 

<paramref name="Left" /> ist gleich <paramref name="Right" />.  
  
 1 

<paramref name="Left" /> ist größer als <paramref name="Right" />.  
  

.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)">
      <summary>Stellt den Visual Basic-Verkettungsoperator (&amp;) dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <returns>Eine Zeichenfolge, die die Verkettung von <paramref name="Left" /> und <paramref name="Right" /> darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den überladenen Visual Basic-Gleichheitsoperator (=) dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Das Ergebnis des überladenen Gleichheitsoperators. <see langword="False" />, wenn eine Operatorüberladung nicht unterstützt wird.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den überladenen Visual Basic-größer-als (&gt;)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Das Ergebnis des überladenen Größer-als-Operators. <see langword="False" />, wenn eine Operatorüberladung nicht unterstützt wird.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den überladenen Visual Basic-größer-als-oder-gleich (&gt;=)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Das Ergebnis des überladenen Größer-als-Operators oder des überladenen Gleichheitsoperators. <see langword="False" />, wenn eine Operatorüberladung nicht unterstützt wird.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den überladenen Visual Basic-kleiner-als (&lt;)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Das Ergebnis des überladenen Kleiner-als-Operators. <see langword="False" />, wenn eine Operatorüberladung nicht unterstützt wird.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den überladenen Visual Basic-kleiner-als-oder-gleich (&lt;=)-Operator dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Das Ergebnis des überladenen Kleiner-als-Operators oder des überladenen Gleichheitsoperators. <see langword="False" />, wenn eine Operatorüberladung nicht unterstützt wird.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>Stellt den überladenen Visual Basic-Ungleichheitsoperator (&lt;&gt;) dar.</summary>
      <param name="Left">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="Right">Erforderlich. Beliebiger Ausdruck.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Zeichenfolgenvergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Das Ergebnis des überladenen Ungleichheitsoperators. <see langword="False" />, wenn eine Operatorüberladung nicht unterstützt wird.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)">
      <summary>Stellt den Visual Basic-Divisionsoperator (/) dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der volle Quotient, der sich aus der Division von <paramref name="Left" /> durch <paramref name="Right" /> ergibt, einschließlich des Rests.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)">
      <summary>Stellt den Visual Basic-Exponentialoperator (^) dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Das Ergebnis der Potenzierung von <paramref name="Left" /> mit <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.FallbackInvokeUserDefinedOperator(System.Object,System.Object[])">
      <summary>Führt eine spät gebundene Auswertung für einen benutzerdefinierten Operator aus. Diese Hilfsmethode ist nicht für den direkten Aufruf aus dem Code vorgesehen.</summary>
      <param name="vbOp">Der benutzerdefinierte Operator.</param>
      <param name="Arguments">Die Argumentwerte, die an den benutzerdefinierten Operator übergeben werden sollen.</param>
      <returns>Das vom benutzerdefinierten Operator zurückgegebene Ergebnis.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)">
      <summary>Stellt den Ganzzahl-Divisionsoperator (\) in Visual Basic dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der ganzzahlige Quotient, der sich aus der Division von <paramref name="Left" /> durch <paramref name="Right" /> ergibt. Es wird nur der ganzzahlige Teil beibehalten, und ein eventueller Rest wird verworfen.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)">
      <summary>Stellt den Operator für die Stellenverschiebung nach links (&lt;&lt;) in Visual Basic dar.</summary>
      <param name="Operand">Erforderlich. Ein ganzzahliger numerischer Ausdruck. Das zu verschiebende Bitmuster. Der Datentyp muss ein ganzzahliger Typ (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" /> oder <see langword="ULong" />) sein.</param>
      <param name="Amount">Erforderlich. Ein numerischer Ausdruck. Die Anzahl der Bits, um die das Bitmuster verschoben werden soll. Der Datentyp muss <see langword="Integer" /> sein oder zu <see langword="Integer" /> erweitert werden.</param>
      <returns>Ein ganzzahliger numerischer Wert. Das Ergebnis der Verschiebung des Bitmusters. Der Datentyp entspricht dem von <paramref name="Operand" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)">
      <summary>Stellt den <see langword="Mod" />-Operator in Visual Basic dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der Rest aus der Division von <paramref name="Left" /> durch <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)">
      <summary>Stellt den Visual Basic-Multiplikationsoperator (*) dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Das Produkt von <paramref name="Left" /> und <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)">
      <summary>Stellt den unären Subtraktionsoperator (–) in Visual Basic dar.</summary>
      <param name="Operand">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der negative Wert von <paramref name="Operand" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)">
      <summary>Stellt den <see langword="Not" />-Operator in Visual Basic dar.</summary>
      <param name="Operand">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>Für <see langword="Boolean" />-Operationen: <see langword="False" />, wenn <paramref name="Operand" /> gleich <see langword="True" /> ist, andernfalls <see langword="True" />. Für bitweise Operationen: 1, wenn <paramref name="Operand" /> gleich 0 ist, andernfalls 0.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)">
      <summary>Stellt den <see langword="Or" />-Operator in Visual Basic dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>Für <see langword="Boolean" />-Operationen: <see langword="False" />, wenn sowohl <paramref name="Left" /> als auch <paramref name="Right" /><see langword="False" /> ergeben, andernfalls <see langword="True" />. Für bitweise Operationen: 0, wenn sowohl <paramref name="Left" />, als auch <paramref name="Right" /> 0 ergeben, andernfalls 1.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)">
      <summary>Stellt den unären Additionsoperator (+) in Visual Basic dar.</summary>
      <param name="Operand">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Der Wert von <paramref name="Operand" />. (Das Vorzeichen von <paramref name="Operand" /> wird nicht geändert.)</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)">
      <summary>Stellt den Operator für die Stellenverschiebung nach rechts (&gt;&gt;) in Visual Basic dar.</summary>
      <param name="Operand">Erforderlich. Ein ganzzahliger numerischer Ausdruck. Das zu verschiebende Bitmuster. Der Datentyp muss ein ganzzahliger Typ (<see langword="SByte" />, <see langword="Byte" />, <see langword="Short" />, <see langword="UShort" />, <see langword="Integer" />, <see langword="UInteger" />, <see langword="Long" /> oder <see langword="ULong" />) sein.</param>
      <param name="Amount">Erforderlich. Ein numerischer Ausdruck. Die Anzahl der Bits, um die das Bitmuster verschoben werden soll. Der Datentyp muss <see langword="Integer" /> sein oder zu <see langword="Integer" /> erweitert werden.</param>
      <returns>Ein ganzzahliger numerischer Wert. Das Ergebnis der Verschiebung des Bitmusters. Der Datentyp entspricht dem von <paramref name="Operand" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)">
      <summary>Stellt den Visual Basic-Subtraktionsoperator (–) dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger numerischer Ausdruck.</param>
      <returns>Die Differenz zwischen <paramref name="Left" /> und <paramref name="Right" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)">
      <summary>Stellt den <see langword="Xor" />-Operator in Visual Basic dar.</summary>
      <param name="Left">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <param name="Right">Erforderlich. Ein beliebiger <see langword="Boolean" />-Ausdruck oder numerischer Ausdruck.</param>
      <returns>Ein <see langword="Boolean" />-Wert oder ein numerischer Wert. Bei einem <see langword="Boolean" />-Vergleich ist der Rückgabewert der logische Ausschluss (exklusive logische Disjunktion) aus zwei <see langword="Boolean" />-Werten. Bei bitweisen (numerischen) Vorgängen ist der Rückgabewert ein numerischer Wert, der den bitweisen Ausschluss (exklusive bitweise Disjunktion) aus zwei numerischen Bitmustern darstellt. Weitere Informationen finden Sie unter Xor Operator.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute">
      <summary>Gibt an, dass die aktuelle <see langword="Option Compare" />-Einstellung als Standardwert für ein Argument übergeben werden soll.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute" />-Klasse.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute">
      <summary>Der Visual Basic-Compiler gibt diese Hilfsklasse aus, um (für das Visual Basic-Debuggen) anzugeben, welche Vergleichsoption (Binär oder Text) verwendet werden soll.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute" />-Klasse. Dies ist eine Hilfsmethode.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ProjectData">
      <summary>Stellt Hilfsmethoden für das <see langword="Err" />-Objekt in Visual Basic bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.ClearProjectError">
      <summary>Führt die Vorgänge für die <see langword="Clear" />-Methode des <see langword="Err" />-Objekts aus. Dies ist eine Hilfsmethode.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.CreateProjectError(System.Int32)">
      <summary>Führt die Vorgänge für die <see langword="Raise" />-Methode des <see langword="Err" />-Objekts aus. Dies ist eine Hilfsmethode.</summary>
      <param name="hr">Ein ganzzahliger Wert, der die Art des Fehlers identifiziert. Visual Basic-Fehler liegen im Bereich 0–65535. Der Bereich 0–512 ist für Systemfehler reserviert. Der Bereich 513–65535 steht für benutzerdefinierte Fehler zur Verfügung.</param>
      <returns>Ein <see cref="T:System.Exception" />-Objekt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.EndApp">
      <summary>Schließt alle Dateien für die aufrufende Assembly und beendet den Prozess.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception)">
      <summary>Der Visual Basic-Compiler verwendet diese Hilfsmethode, um Ausnahmen im <see langword="Err" />-Objekt aufzuzeichnen.</summary>
      <param name="ex">Das abzufangende <see cref="T:System.Exception" />-Objekt.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception,System.Int32)">
      <summary>Der Visual Basic-Compiler verwendet diese Hilfsmethode, um Ausnahmen im <see langword="Err" />-Objekt aufzuzeichnen.</summary>
      <param name="ex">Das abzufangende <see cref="T:System.Exception" />-Objekt.</param>
      <param name="lErl">Die Zeilennummer der Ausnahme.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ShortType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Short" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Short" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Short" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ShortType.FromString(System.String)">
      <summary>Gibt einen <see langword="Short" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Short" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Short" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.SingleType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="Single" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Single" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Single" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromObject(System.Object,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Single" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="Single" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Single" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String)">
      <summary>Gibt einen <see langword="Single" />-Wert zurück, der der angegebenen Zeichenfolge entspricht.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Single" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="Single" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.SingleType.FromString(System.String,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="Single" />-Wert zurück, der der angegebenen Zeichenfolge entspricht, sowie Informationen zum Zahlenformat.</summary>
      <param name="Value">Erforderlich. Die Zeichenfolge, die in einen <see langword="Single" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="Single" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute">
      <summary>Diese Klasse stellt Attribute bereit, die auf das Standardmodulkonstrukt angewendet werden, wenn es in die Intermediate Language (IL) ausgegeben wird. Sie ist nicht für den direkten Aufruf aus Code vorgesehen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute" />-Klasse.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag">
      <summary>Der Visual Basic-Compiler verwendet diese Klasse intern zum Initialisieren statischer lokaler Member. Sie ist nicht für den direkten Aufruf aus Code vorgesehen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag" />-Klasse.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.State">
      <summary>Gibt den Zustand des Initialisierungsflags (initialisiert oder nicht) des statischen lokalen Members zurück.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StringType">
      <summary>Diese Klasse ist seit Visual Basic 2005 veraltet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromBoolean(System.Boolean)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der dem angegebenen <see langword="Boolean" /> entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Boolean" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromByte(System.Byte)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der dem angegebenen <see langword="Byte" /> entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Byte" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromChar(System.Char)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der dem angegebenen <see langword="Char" /> entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Char" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDate(System.DateTime)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der dem angegebenen Datum entspricht.</summary>
      <param name="Value">Erforderlich. Das in einen <see langword="String" />-Wert zu konvertierende Datum.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der dem angegebenen <see langword="Decimal" /> entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Decimal" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDecimal(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Decimal" /> entspricht, sowie Informationen für das Zahlenformat.</summary>
      <param name="Value">Erforderlich. <see langword="Decimal" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Double" /> entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Double" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromDouble(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Double" /> entspricht, sowie Informationen für das Zahlenformat.</summary>
      <param name="Value">Erforderlich. <see langword="Double" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromInteger(System.Int32)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Integer" /> entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Integer" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromLong(System.Int64)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Int64" /> (64-Bit-Ganzzahl) entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Int64" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromObject(System.Object)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der dem angegebenen Objekt entspricht.</summary>
      <param name="Value">Erforderlich. Objekt, das in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromShort(System.Int16)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Int16" /> (16-Bit-Ganzzahl) entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Int616" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Single" /> entspricht.</summary>
      <param name="Value">Erforderlich. <see langword="Single" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.FromSingle(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der einem angegebenen <see langword="Single" /> entspricht, sowie Informationen für das Zahlenformat.</summary>
      <param name="Value">Erforderlich. <see langword="Single" />, der in einen <see langword="String" />-Wert konvertiert werden soll.</param>
      <param name="NumberFormat">Ein <see cref="T:System.Globalization.NumberFormatInfo" />-Objekt, das definiert, wie numerische Werte in Abhängigkeit von der jeweiligen Kultur formatiert und angezeigt werden.</param>
      <returns>Der <see langword="String" />-Wert, der <paramref name="Value" /> entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.MidStmtStr(System.String@,System.Int32,System.Int32,System.String)">
      <summary>Überschreibt den <paramref name="sDest" />-Parameter mit dem Inhalt des <paramref name="sInsert" />-Parameters.</summary>
      <param name="sDest">Erforderlich. Die zu ändernde Zeichenfolgenvariable.</param>
      <param name="StartPosition">Erforderlich. Die Position im <paramref name="sDest" />-Parameter, ab der mit dem Überschreibevorgang begonnen werden soll. Der Index ist 1-basiert.</param>
      <param name="MaxInsertLength">Erforderlich. Die maximale Anzahl der zu verwendenden Zeichen aus dem <paramref name="sInsert" />-Parameter, beginnend mit dem ersten Zeichen.</param>
      <param name="sInsert">Erforderlich. Der Zeichenfolgenwert, mit dem der <paramref name="sDest" />-Parameter überschrieben werden soll.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrCmp(System.String,System.String,System.Boolean)">
      <summary>Vergleicht zwei Zeichenfolgen.</summary>
      <param name="sLeft">Erforderlich. Die Zeichenfolge, die mit <paramref name="sRight" /> verglichen werden soll.</param>
      <param name="sRight">Erforderlich. Die Zeichenfolge, die mit <paramref name="sLeft" /> verglichen werden soll.</param>
      <param name="TextCompare">Erforderlich. <see langword="True" />, um einen Vergleich ohne Berücksichtigung der Groß- und Kleinschreibung auszuführen, andernfalls <see langword="False" />.</param>
      <returns>Wert 
 Bedingung 
 Null 
 Die beiden Zeichenfolgen sind gleich.  
  
 kleiner als 0 (Null) 

<paramref name="sLeft" /> ist kleiner als <paramref name="sRight" />.  
  
 größer als 0 (Null) 

<paramref name="sLeft" /> ist größer als <paramref name="sRight" />.  
  

.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLike(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Vergleicht die Parameter <paramref name="Source" /> und <paramref name="Pattern" /> und gibt die gleichen Ergebnisse wie der Operator <see langword="Like" /> zurück.</summary>
      <param name="Source">Erforderlich. Beliebiger <see langword="String" /> -Ausdruck.</param>
      <param name="Pattern">Ein beliebiger <see langword="String" />-Ausdruck, der den in Like-Operator beschriebenen Mustervergleichskonventionen entspricht.</param>
      <param name="CompareOption">Gibt an, wie Zeichenfolgen gemäß <see cref="T:Microsoft.VisualBasic.CompareMethod" /> mit Mustern verglichen werden. Mögliche Werte sind <see langword="vbBinaryCompare" /> für binäre Vergleiche oder <see langword="vbTextCompare" /> für einen Vergleich auf der Grundlage einer Textsortierfolge ohne Berücksichtigung von Groß- und Kleinschreibung, die vom <see langword="LocaleID" />-Wert des Systems definiert wird.</param>
      <returns>Ein <see langword="Boolean" />-Wert, der angibt, ob die Zeichenfolge dem Muster entspricht. Wenn der Wert der Zeichenfolge das Muster erfüllt, ist das Ergebnis <see langword="True" />. Wenn die Zeichenfolge das Muster nicht erfüllt, ist das Ergebnis <see langword="False" />. Wenn sowohl Zeichenfolge als auch Muster leere Zeichenfolgen sind, ist das Ergebnis <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeBinary(System.String,System.String)">
      <summary>Vergleicht die Parameter <paramref name="Source" /> und <paramref name="Pattern" /> und gibt unter Verwendung eines binären Vergleichs die gleichen Ergebnisse wie der Operator <see langword="Like" /> zurück.</summary>
      <param name="Source">Erforderlich. Beliebiger <see langword="String" /> -Ausdruck.</param>
      <param name="Pattern">Erforderlich. Ein beliebiger <see langword="String" />-Ausdruck, der den in Like-Operator beschriebenen Mustervergleichskonventionen entspricht.</param>
      <returns>Ein <see langword="Boolean" />-Wert, der angibt, ob die Zeichenfolge dem Muster entspricht. Wenn der Wert der Zeichenfolge das Muster erfüllt, ist das Ergebnis <see langword="True" />. Wenn die Zeichenfolge das Muster nicht erfüllt, ist das Ergebnis <see langword="False" />. Wenn sowohl Zeichenfolge als auch Muster leere Zeichenfolgen sind, ist das Ergebnis <see langword="True" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StringType.StrLikeText(System.String,System.String)">
      <summary>Vergleicht die Parameter <paramref name="Source" /> und <paramref name="Pattern" /> und gibt unter Verwendung eines Textvergleichs die gleichen Ergebnisse wie der Operator <see langword="Like" /> zurück.</summary>
      <param name="Source">Erforderlich. Beliebiger <see langword="String" /> -Ausdruck.</param>
      <param name="Pattern">Erforderlich. Ein beliebiger <see langword="String" />-Ausdruck, der den in Like-Operator beschriebenen Mustervergleichskonventionen entspricht.</param>
      <returns>Ein <see langword="Boolean" />-Wert, der angibt, ob die Zeichenfolge dem Muster entspricht. Wenn der Wert der Zeichenfolge das Muster erfüllt, ist das Ergebnis <see langword="True" />. Wenn die Zeichenfolge das Muster nicht erfüllt, ist das Ergebnis <see langword="False" />. Wenn sowohl Zeichenfolge als auch Muster leere Zeichenfolgen sind, ist das Ergebnis <see langword="True" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Utils">
      <summary>Enthält Werkzeuge, die der Visual Basic-Compiler verwendet.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.CopyArray(System.Array,System.Array)">
      <summary>Wird vom Visual Basic-Compiler als Hilfsmethode für <see langword="Redim" /> verwendet.</summary>
      <param name="arySrc">Das zu kopierende Array.</param>
      <param name="aryDest">Das Zielarray.</param>
      <returns>Das kopierte Array.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Versioned">
      <summary>Das <see cref="T:Microsoft.VisualBasic.CompilerServices.Versioned" />-Modul enthält Prozeduren für die Interaktion mit Objekten, Anwendungen und Systemen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>Führt eine Methode für ein Objekt aus oder legt eine Eigenschaft für ein Objekt fest oder gibt diese zurück.</summary>
      <param name="Instance">Erforderlich. <see langword="Object" />. Ein Zeiger auf das Objekt, das die Eigenschaft oder Methode verfügbar macht.</param>
      <param name="MethodName">Erforderlich. <see langword="String" />. Ein Zeichenfolgenausdruck, der den Namen der Eigenschaft oder der Methode für das Objekt enthält.</param>
      <param name="UseCallType">Erforderlich. Ein Enumerationsmember vom Typ <see cref="T:Microsoft.VisualBasic.CallType" />, der den Typ der aufgerufenen Prozedur darstellt. Der Wert von <see langword="CallType" /> kann <see langword="Method" />, <see langword="Get" /> oder <see langword="Set" /> sein.</param>
      <param name="Arguments">Dies ist optional. <see langword="ParamArray" />. Ein Parameterarray mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <returns>Führt eine Methode für ein Objekt aus oder legt eine Eigenschaft für ein Objekt fest oder gibt diese zurück.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.IsNumeric(System.Object)">
      <summary>Gibt einen booleschen Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
      <returns>Gibt einen booleschen Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.SystemTypeName(System.String)">
      <summary>Gibt einen Zeichenfolgenwert mit dem Systemnamen des Datentyps einer Variablen zurück.</summary>
      <param name="VbName">Erforderlich. Eine Zeichenfolgenvariable, die einen Visual Basic-Typnamen enthält.</param>
      <returns>Gibt einen Zeichenfolgenwert mit dem Systemnamen des Datentyps einer Variablen zurück.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.TypeName(System.Object)">
      <summary>Gibt einen Zeichenfolgenwert zurück, der Datentypinformationen über eine Variable enthält.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Variable. Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</param>
      <returns>Gibt einen Zeichenfolgenwert zurück, der Datentypinformationen über eine Variable enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.VbTypeName(System.String)">
      <summary>Gibt einen Zeichenfolgenwert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</summary>
      <param name="SystemName">Erforderlich. Zeichenfolgenvariable mit dem Typnamen, der von der Common Language Runtime verwendet wird.</param>
      <returns>Gibt einen Zeichenfolgenwert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Constants">
      <summary>Das <see langword="Constants" />-Modul enthält verschiedene Konstanten. Diese Konstanten können an einer beliebigen Stelle im Code verwendet werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbort">
      <summary>Gibt an, dass in einem Meldungsfeld auf die Schaltfläche <see langword="Abort" /> geklickt wurde. Von der <see langword="MsgBox" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbAbortRetryIgnore">
      <summary>Gibt an, dass die Schaltflächen <see langword="Abort" />, <see langword="Retry" /> und <see langword="Ignore" /> angezeigt werden, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbApplicationModal">
      <summary>Gibt an, dass das Meldungsfeld als modales Dialogfeld angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArchive">
      <summary>Gibt an, dass die Datei seit dem letzten Sicherungsvorgang für Dateizugriffsfunktionen geändert wurde.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArray">
      <summary>Gibt an, dass der Typ eines Variant-Objekts ein Array ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBack">
      <summary>Stellt ein Rücktastenzeichen für Druck- und Anzeigefunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBinaryCompare">
      <summary>Gibt an, dass ein binärer Vergleich ausgeführt werden soll, wenn Vergleichsfunktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBoolean">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Boolean" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbByte">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Byte" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCancel">
      <summary>Gibt an, dass in einem Meldungsfeld auf die Schaltfläche <see langword="Cancel" /> geklickt wurde. Von der <see langword="MsgBox" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCr">
      <summary>Stellt ein Wagenrücklaufzeichen für Druck- und Anzeigefunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCritical">
      <summary>Gibt an, dass das Symbol für wichtige Meldungen angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCrLf">
      <summary>Stellt ein Wagenrücklaufzeichen mit einem Zeilenvorschubzeichen für Druck- und Anzeigefunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCurrency">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Currency" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDate">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Date" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDecimal">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Decimal" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton1">
      <summary>Gibt an, dass die ganz links angezeigte Schaltfläche als Standardschaltfläche ausgewählt wird, wenn das Meldungsfeld angezeigt wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton2">
      <summary>Gibt an, dass die zweite Schaltfläche von links als Standardschaltfläche ausgewählt wird, wenn das Meldungsfeld angezeigt wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDefaultButton3">
      <summary>Gibt an, dass die dritte Schaltfläche von links als Standardschaltfläche ausgewählt wird, wenn das Meldungsfeld angezeigt wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDirectory">
      <summary>Gibt an, dass die Datei ein Verzeichnis oder Ordner für Dateizugriffsfunktionen ist.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDouble">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Double" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbEmpty">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Empty" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbExclamation">
      <summary>Gibt an, dass das Ausrufezeichensymbol angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFalse">
      <summary>Gibt an, dass ein <see langword="Boolean" /> Wert von <see langword="False" /> verwendet werden soll, wenn Zahlenformatierungsfunktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFourDays">
      <summary>Gibt an, dass die erste Woche des Jahres mit mindestens vier Tagen verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFullWeek">
      <summary>Gibt an, dass die erste vollständige Woche des Jahres verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstJan1">
      <summary>Gibt an, dass die Woche des Jahres mit 1. Januar verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFormFeed">
      <summary>Stellt ein Seitenvorschubzeichen für Druckfunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFriday">
      <summary>Gibt an, dass Freitag als erster Tag der Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGeneralDate">
      <summary>Gibt an, dass das allgemeine Datumsformat für die aktuelle Kultur verwendet werden soll, wenn die <see langword="FormatDateTime" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGet">
      <summary>Gibt an, dass ein Eigenschaftswert abgerufen werden soll, wenn die <see langword="CallByName" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHidden">
      <summary>Gibt an, dass die Datei eine versteckte Datei für Dateizugriffsfunktionen ist.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHide">
      <summary>Gibt an, dass der Fensterstil für das aufgerufene Programm ausgeblendet ist, wenn die <see langword="Shell" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbHiragana">
      <summary>Gibt an, dass Hiragana-Zeichen in Katakana-Zeichen konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbIgnore">
      <summary>Gibt an, dass in einem Meldungsfeld auf die Schaltfläche <see langword="Ignore" /> geklickt wurde. Von der <see langword="MsgBox" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInformation">
      <summary>Gibt an, dass das Informationssymbol angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInteger">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Integer" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbKatakana">
      <summary>Gibt an, dass Katakana-Zeichen in Hiragana-Zeichen konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLet">
      <summary>Gibt an, dass ein Eigenschaftswert auf eine Objektinstanz festgelegt werden soll, wenn die <see langword="CallByName" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLf">
      <summary>Stellt ein Zeilenvorschubzeichen für Druck- und Anzeigefunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLinguisticCasing">
      <summary>Gibt an, dass Zeichen konvertiert werden sollen, um sprachliche Regeln für die Groß-/Kleinschreibung anstelle der Dateisystemregeln für die Groß-/Kleinschreibung zu verwenden, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLong">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Long" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongDate">
      <summary>Gibt an, dass das lange Datumsformat für die aktuelle Kultur verwendet werden soll, wenn die <see langword="FormatDateTime" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongTime">
      <summary>Gibt an, dass das lange Zeitformat für die aktuelle Kultur verwendet werden soll, wenn die <see langword="FormatDateTime" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLowerCase">
      <summary>Gibt an, dass Zeichen in Kleinbuchstaben konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMaximizedFocus">
      <summary>Gibt an, dass der Fensterstil maximiert wird und den Fokus für das aufgerufene Programm besitzt, wenn die <see langword="Shell" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMethod">
      <summary>Gibt an, dass eine Methode aufgerufen werden soll, wenn die <see langword="CallByName" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedFocus">
      <summary>Gibt an, dass der Fensterstil minimiert wird und den Fokus für das aufgerufene Programm besitzt, wenn die <see langword="Shell" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMinimizedNoFocus">
      <summary>Gibt an, dass der Fensterstil minimiert wird und keinen Fokus für das aufgerufene Programm besitzt, wenn die <see langword="Shell" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMonday">
      <summary>Gibt an, dass Montag als erster Tag der Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxHelp">
      <summary>Gibt an, dass die Schaltfläche <see langword="Help" /> angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRight">
      <summary>Gibt an, dass der Text rechts ausgerichtet wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxRtlReading">
      <summary>Gibt an, dass Text mit Leserichtung von rechts nach links (hebräische und arabische Systeme) angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMsgBoxSetForeground">
      <summary>Gibt an, dass das Meldungsfeld im Vordergrund angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNarrow">
      <summary>Gibt an, dass breite Zeichen (zwei Bytes) in schmale Zeichen (ein Byte) konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNewLine">
      <summary>Stellt ein Zeilenumbruchzeichen für Druck- und Anzeigefunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNo">
      <summary>Gibt an, dass in einem Meldungsfeld auf die Schaltfläche <see langword="No" /> geklickt wurde. Von der <see langword="MsgBox" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormal">
      <summary>Gibt an, dass die Datei eine normale Datei für Dateizugriffsfunktionen ist.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalFocus">
      <summary>Gibt an, dass der Fensterstil normal ist und den Fokus für das aufgerufene Programm besitzt, wenn die <see langword="Shell" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNormalNoFocus">
      <summary>Gibt an, dass der Fensterstil normal ist und keinen Fokus für das aufgerufene Programm besitzt, wenn die <see langword="Shell" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNull">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Nothing" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullChar">
      <summary>Stellt ein NULL-Zeichen für Druck- und Anzeigefunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullString">
      <summary>Stellt eine Zeichenfolge der Länge 0 (null) für Druck- und Anzeigefunktionen sowie zum Aufrufen externer Prozeduren dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObject">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Object" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObjectError">
      <summary>Stellt die Fehlernummer für das Objekt dar. Benutzerdefinierte Fehlernummern sollten größer als dieser Wert sein.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOK">
      <summary>Gibt an, dass in einem Meldungsfeld auf die Schaltfläche <see langword="OK" /> geklickt wurde. Von der <see langword="MsgBox" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKCancel">
      <summary>Gibt an, dass die Schaltflächen <see langword="OK" /> und <see langword="Cancel" /> angezeigt werden, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbOKOnly">
      <summary>Gibt an, dass nur die Schaltfläche <see langword="OK" /> angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbProperCase">
      <summary>Gibt an, dass der erste Buchstabe jedes Worts in einer Zeichenfolge in Großbuchstaben und die übrigen Zeichen in Kleinbuchstaben konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbQuestion">
      <summary>Gibt an, dass das Fragezeichensymbol angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbReadOnly">
      <summary>Gibt an, dass die Datei eine schreibgeschützte Datei für Dateizugriffsfunktionen ist.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetry">
      <summary>Gibt an, dass in einem Meldungsfeld auf die Schaltfläche <see langword="Retry" /> geklickt wurde. Von der <see langword="MsgBox" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbRetryCancel">
      <summary>Gibt an, dass die Schaltflächen <see langword="Retry" /> und <see langword="Cancel" /> angezeigt werden, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSaturday">
      <summary>Gibt an, dass Samstag als erster Tag der Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSet">
      <summary>Gibt an, dass ein Eigenschaftswert festgelegt werden soll, wenn die <see langword="CallByName" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortDate">
      <summary>Gibt an, dass das kurze Datumsformat für die aktuelle Kultur verwendet werden soll, wenn die <see langword="FormatDateTime" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortTime">
      <summary>Gibt an, dass das kurze Zeitformat für die aktuelle Kultur verwendet werden soll, wenn die <see langword="FormatDateTime" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSimplifiedChinese">
      <summary>Gibt an, dass Zeichen in vereinfachte chinesische Zeichen konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSingle">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Single" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbString">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="String" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSunday">
      <summary>Gibt an, dass Sonntag als erster Tag der Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystem">
      <summary>Gibt an, dass die Datei eine Systemdatei für Dateizugriffsfunktionen ist.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSystemModal">
      <summary>Gibt an, dass das Meldungsfeld als modales Dialogfeld angezeigt wird, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTab">
      <summary>Stellt ein Tabulatorzeichen für Druck- und Anzeigefunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTextCompare">
      <summary>Gibt an, dass ein Textvergleich ausgeführt werden soll, wenn Vergleichsfunktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbThursday">
      <summary>Gibt an, dass Donnerstag als erster Tag der Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTraditionalChinese">
      <summary>Gibt an, dass Zeichen in traditionelle chinesische Zeichen konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTrue">
      <summary>Gibt an, dass ein <see langword="Boolean" /> Wert von <see langword="True" /> verwendet werden soll, wenn Zahlenformatierungsfunktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTuesday">
      <summary>Gibt an, dass Dienstag als erster Tag der Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUpperCase">
      <summary>Gibt an, dass Zeichen in Großbuchstaben konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseDefault">
      <summary>Gibt an, dass der <see langword="Boolean" /> Standardwert verwendet werden soll, wenn Zahlenformatierungsfunktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUserDefinedType">
      <summary>Gibt an, dass der Typ eines Variant-Objekts ein benutzerdefinierter Typ ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystem">
      <summary>Gibt an, dass die vom System als erste Woche des Jahres angegebene Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystemDayOfWeek">
      <summary>Gibt an, dass der vom System als erster Tag der Woche angegebene Tag verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVariant">
      <summary>Gibt an, dass der Typ eines Variant-Objekts <see langword="Variant" /> ist. Von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVerticalTab">
      <summary>Stellt ein Wagenrücklaufzeichen für Druckfunktionen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVolume">
      <summary>Gibt das Volumebezeichnungsdateiattribut für Dateizugriffsfunktionen an.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWednesday">
      <summary>Gibt an, dass Mittwoch als erster Tag der Woche verwendet werden soll, wenn datumsbezogene Funktionen aufgerufen werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWide">
      <summary>Gibt an, dass schmale Zeichen (ein Byte) in breite Zeichen (zwei Bytes) konvertiert werden sollen, wenn die <see langword="StrConv" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYes">
      <summary>Gibt an, dass in einem Meldungsfeld auf die Schaltfläche <see langword="Yes" /> geklickt wurde. Von der <see langword="MsgBox" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNo">
      <summary>Gibt an, dass die Schaltflächen <see langword="Yes" /> und <see langword="No" /> angezeigt werden, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbYesNoCancel">
      <summary>Gibt an, dass die Schaltflächen <see langword="Yes" />, <see langword="No" /> und <see langword="Cancel" /> angezeigt werden, wenn die <see langword="MsgBox" />-Funktion aufgerufen wird.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ControlChars">
      <summary>Das <see langword="ControlChars" />-Modul enthält Konstanten, die als Steuerzeichen verwendet werden. Diese Konstanten können an einer beliebigen Stelle im Code verwendet werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ControlChars.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.ControlChars" />-Klasse.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Back">
      <summary>Stellt ein Rücktastenzeichen dar (<see langword="vbBack" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Cr">
      <summary>Stellt ein Wagenrücklaufzeichen dar (<see langword="vbCr" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.CrLf">
      <summary>Stellt eine Kombination aus Wagenrücklauf- und Zeilenvorschubzeichen dar (<see langword="vbCrLf" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.FormFeed">
      <summary>Stellt ein Seitenvorschubzeichen für Druckfunktionen dar (<see langword="vbFormFeed" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Lf">
      <summary>Stellt ein Zeilenvorschubzeichen dar (<see langword="vbLf" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NewLine">
      <summary>Stellt ein Neue-Zeile-Zeichen dar (<see langword="vbNewLine" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NullChar">
      <summary>Stellt ein NULL-Zeichen dar (<see langword="vbNullChar" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Quote">
      <summary>Stellt ein doppeltes Anführungszeichen dar.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Tab">
      <summary>Stellt ein Tabstoppzeichen dar (<see langword="vbTab" />).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.VerticalTab">
      <summary>Stellt ein vertikales Tabstoppzeichen dar (<see langword="vbVerticalTab" />).</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Conversion">
      <summary>Das <see langword="Conversion" />-Modul enthält Prozeduren, mit denen verschiedene Konvertierungsoperationen ausgeführt werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)">
      <summary>Konvertiert ein Objekt in den angegebenen Typ.</summary>
      <param name="Expression">Das zu konvertierende Objekt.</param>
      <param name="TargetType">Der Typ, in den das Objekt konvertiert werden soll.</param>
      <returns>Ein Objekt, dessen Typ zur Laufzeit der angeforderte Zieltyp ist.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)">
      <summary>Konvertiert ein Objekt in den angegebenen generischen Typ.</summary>
      <param name="Expression">Das zu konvertierende Objekt.</param>
      <typeparam name="TargetType">Der Typ, in den das Objekt konvertiert werden soll.</typeparam>
      <returns>Ein Objekt, das statisch als der angeforderte generische Typ typisiert ist.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString">
      <summary>Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</summary>
      <returns>Die Fehlermeldung, die dem letzten Laufzeitfehler entspricht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
      <summary>Gibt die Fehlermeldung zurück, die der jeweiligen Fehlernummer entspricht.</summary>
      <param name="ErrorNumber">Optional. Eine beliebige gültige Fehlernummer.</param>
      <returns>Die Fehlermeldung, die einer bestimmten Fehlernummer entspricht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ErrorNumber" /> liegt außerhalb des Bereichs.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck. Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
      <summary>Gibt eine Zeichenfolge zurück, die den Hexadezimalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Hexadezimalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Decimal" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Double" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Short" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Integer" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Long" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Object" /> oder ein beliebiger gültiger numerischer Ausdruck. Wenn <paramref name="Number" /><see langword="Nothing" /> enthält, wird <see langword="Nothing" /> zurückgegeben.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
      <summary>Gibt den Integeranteil einer Zahl zurück.</summary>
      <param name="Number">Erforderlich. Eine Zahl vom Typ <see langword="Single" /> oder ein beliebiger gültiger numerischer Ausdruck.</param>
      <returns>Der Integeranteil einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">Number ist nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">Number ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)">
      <summary>Gibt eine Zeichenfolge zurück, die den Oktalwert einer Zahl darstellt.</summary>
      <param name="Number">Erforderlich. Jeder gültige numerische Ausdruck oder <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die den Oktalwert einer Zahl darstellt.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
      <summary>Gibt eine <see langword="String" />-Darstellung dieser Zahl zurück.</summary>
      <param name="Number">Erforderlich. Ein <see langword="Object" />, das einen beliebigen gültigen numerischen Ausdruck enthält.</param>
      <returns>Eine <see langword="String" />-Darstellung einer Zahl.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Number" /> wurde nicht angegeben.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Number" /> ist kein numerischer Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
      <summary>Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</summary>
      <param name="Expression">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert. Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
      <returns>Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> ist zu groß.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
      <summary>Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</summary>
      <param name="Expression">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert. Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
      <returns>Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> ist zu groß.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
      <summary>Gibt die in einer Zeichenfolge enthaltenen Zahlen als numerischen Wert eines geeigneten Typs zurück.</summary>
      <param name="InputStr">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck, jede gültige <see langword="Object" />-Variable, jeder gültige <see langword="Char" />-Wert. Wenn <paramref name="Expression" /> den Typ <see langword="Object" /> aufweist, muss der Wert in <see langword="String" /> konvertierbar sein, sonst tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
      <returns>Die in einer Zeichenfolge enthaltenen Zahlen als numerischer Wert eines geeigneten Typs.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="InputStr" /> ist zu groß.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Expression" /> ist ein Ausdruck vom Typ <see langword="Object" />, der nicht in <see langword="String" /> konvertierbar ist.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.DateAndTime">
      <summary>Das <see langword="DateAndTime" />-Modul enthält Prozeduren und Eigenschaften, die in Datum- und Uhrzeitoperationen verwendet werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
      <summary>Die Funktion gibt einen Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
      <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das zu addierende Zeitintervall darstellt.</param>
      <param name="Number">Erforderlich. Gleitkommaausdruck, der die Zahl der hinzuzufügenden Intervalle darstellt. Er kann entweder positiv (zum Abrufen von Datums-/Zeitwerten in der Zukunft) oder negativ (zum Abrufen von Datums-/Zeitwerten in der Vergangenheit) sein. Er kann Nachkommastellen enthalten, wenn <paramref name="Interval" /> Stunden, Minuten oder Sekunden angibt. Bei anderen Werten von <paramref name="Interval" /> werden alle Dezimalstellen von <paramref name="Number" /> ignoriert.</param>
      <param name="DateValue">Erforderlich. Ein Ausdruck, der Datum und Uhrzeit angibt, zu denen das Intervall hinzuaddiert werden muss. <paramref name="DateValue" /> selbst wird im aufrufenden Programm nicht geändert.</param>
      <returns>Ein Wert, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> ist nicht gültig.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Das berechnete Datum liegt vor 00:00:00 Uhr am 1. Januar des Jahres 1 oder nach 23:59:59 Uhr am 31. Dezember 9999.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
      <summary>Die Funktion gibt einen Wert zurück, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</summary>
      <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das zu addierende Zeitintervall darstellt.</param>
      <param name="Number">Erforderlich. Gleitkommaausdruck, der die Zahl der hinzuzufügenden Intervalle darstellt. <paramref name="Number" /> kann entweder positiv (zum Abrufen von Datums-/Zeitwerten in der Zukunft) oder negativ (zum Abrufen von Datums-/Zeitwerten in der Vergangenheit) sein. Er kann Nachkommastellen enthalten, wenn <paramref name="Interval" /> Stunden, Minuten oder Sekunden angibt. Bei anderen Werten von <paramref name="Interval" /> werden alle Dezimalstellen von <paramref name="Number" /> ignoriert.</param>
      <param name="DateValue">Erforderlich. Ein Ausdruck, der Datum und Uhrzeit angibt, zu denen das Intervall hinzuaddiert werden muss. <paramref name="DateValue" /> selbst wird im aufrufenden Programm nicht geändert.</param>
      <returns>Ein Wert, der einen Datumswert und einen Zeitwert enthält, zu dem ein festgelegtes Zeitintervall addiert wird.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> ist nicht gültig.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Das berechnete Datum liegt vor 00:00:00 Uhr am 1. Januar des Jahres 1 oder nach 23:59:59 Uhr am 31. Dezember 9999.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Gibt einen Long-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
      <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das Zeitintervall angibt, das Sie als Einheit für die Differenz zwischen <paramref name="Date1" /> und <paramref name="Date2" /> verwenden möchten.</param>
      <param name="Date1">Erforderlich. Der erste Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
      <param name="Date2">Erforderlich. Der zweite Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
      <param name="DayOfWeek">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
      <param name="WeekOfYear">Dies ist optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
      <returns>Ein Long-Wert, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Date1" />, <paramref name="Date2" /> oder <paramref name="DayofWeek" /> liegt außerhalb des Bereichs.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> oder <paramref name="Date2" /> hat einen ungültigen Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Gibt einen Long-Wert zurück, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</summary>
      <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der das Zeitintervall angibt, das Sie als Einheit für die Differenz zwischen <paramref name="Date1" /> und <paramref name="Date2" /> verwenden möchten.</param>
      <param name="Date1">Erforderlich. Der erste Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
      <param name="Date2">Erforderlich. Der zweite Datums-/Zeitwert, den Sie bei der Berechnung verwenden möchten.</param>
      <param name="DayOfWeek">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
      <param name="WeekOfYear">Dies ist optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
      <returns>Ein Long-Wert, der die Anzahl der Zeitintervalle zwischen zwei <see langword="Date" />-Werten angibt.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Date1" />, <paramref name="Date2" /> oder <paramref name="DayofWeek" /> liegt außerhalb des Bereichs.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="Date1" /> oder <paramref name="Date2" /> hat einen ungültigen Typ.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Gibt einen ganzzahligen Wert zurück, der die angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</summary>
      <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der den Teil des Datums-/Zeitwerts darstellt, der zurückgegeben werden soll.</param>
      <param name="DateValue">Erforderlich. Der auszuwertende <see langword="Date" />-Wert.</param>
      <param name="FirstDayOfWeekValue">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
      <param name="FirstWeekOfYearValue">Dies ist optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
      <returns>Ein ganzzahliger Wert, der eine angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> ist nicht gültig.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>Gibt einen Wert zurück, der eine angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</summary>
      <param name="Interval">Erforderlich. Ein <see cref="T:Microsoft.VisualBasic.DateInterval" />-Enumerationswert oder ein Zeichenfolgenausdruck, der den Teil des Datums-/Zeitwerts darstellt, der zurückgegeben werden soll.</param>
      <param name="DateValue">Erforderlich. Ein auszuwertender <see langword="Date" />-Wert.</param>
      <param name="DayOfWeek">Dies ist optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
      <param name="WeekOfYear">Dies ist optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />-Enumeration, der die erste Woche des Jahres angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1" /> verwendet.</param>
      <returns>Ein ganzzahliger Wert, der eine angegebene Komponente eines bestimmten <see langword="Date" />-Werts enthält.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Interval" /> ist ungültig.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="DateValue" /> kann nicht in <see langword="Date" /> umgewandelt werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der ein angegebenes Jahr, einen angegebenen Monat und einen angegebenen Tag darstellt und dessen Zeitangabe Mitternacht (00:00:00) lautet.</summary>
      <param name="Year">Erforderlich. Ganzzahliger Ausdruck zwischen 1 und 9999. Werte unterhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Wenn <paramref name="Year" /> im Bereich von 0 bis 99 liegt, wird das Argument als Wert zwischen 1930 und 2029 interpretiert, wie unten im Abschnitt Hinweise erläutert. Ist <paramref name="Year" /> kleiner als 1, wird es vom aktuellen Jahr subtrahiert.</param>
      <param name="Month">Erforderlich. Ganzzahliger Ausdruck zwischen 1 und 12. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Month" /> wird um 1 verringert und auf den Januar des berechneten Jahres angewendet. Anders ausgedrückt: (<paramref name="Month" /> – 1) wird zu Januar addiert. Falls erforderlich, wird das Jahr neu berechnet. In den folgenden Ergebnissen wird dieser Effekt veranschaulicht:
Wenn <paramref name="Month" /> 1 ist, ist das Ergebnis der Januar des berechneten Jahres.
Wenn <paramref name="Month" /> 0 ist, ist das Ergebnis der Dezember des vorherigen Jahres.
Wenn <paramref name="Month" /> -1 ist, ist das Ergebnis der November des vorherigen Jahres.
Wenn <paramref name="Month" /> 13 ist, ist das Ergebnis der Januar des nächsten Jahres.</param>
      <param name="Day">Erforderlich. Ganzzahliger Ausdruck zwischen 1 und 31. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Day" /> wird um 1 verringert und auf den ersten Tag des berechneten Monats angewendet. Anders ausgedrückt: (<paramref name="Day" /> - 1) wird zum Monatsersten addiert. Falls erforderlich, werden der Monat und das Jahr neu berechnet. In den folgenden Ergebnissen wird dieser Effekt veranschaulicht:
Wenn <paramref name="Day" /> 1 ist, ist das Ergebnis der erste Tag des berechneten Monats.
Wenn <paramref name="Day" /> 0 ist, ist das Ergebnis der letzte Tag des vorherigen Monats.
Wenn <paramref name="Day" /> -1 ist, ist das Ergebnis der vorletzte Tag des vorherigen Monats.
Wenn <paramref name="Day" /> das Ende des aktuellen Monats überschreitet, ist das Ergebnis der entsprechende Tag des nächsten Monats. Wenn z. B. <paramref name="Month" /> 4 ist und <paramref name="Day" /> 31, dann lautet das Ergebnis 1. Mai.</param>
      <returns>Ein <see langword="Date" />-Wert, der ein angegebenes Jahr, einen angegebenen Monat und einen angegebenen Tag darstellt und dessen Zeitangabe Mitternacht (00:00:00) lautet.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.DateString">
      <summary>Gibt einen Zeichenfolgenwert zurück, der das aktuelle Datum gemäß Ihrem System darstellt, oder legt ihn fest.</summary>
      <returns>Gibt einen Zeichenfolgenwert zurück, der das aktuelle Datum gemäß Ihrem System darstellt, oder legt ihn fest.</returns>
      <exception cref="T:System.InvalidCastException">Ungültiges Format, mit dem der Wert von <see cref="P:Microsoft.VisualBasic.DateAndTime.DateString" /> festgelegt wurde.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der die Datumsangabe als Zeichenfolge enthält und dessen Zeitangabe Mitternacht (00:00:00) lautet.</summary>
      <param name="StringDate">Erforderlich. Zeichenfolgenausdruck, der ein Datum und eine Uhrzeit zwischen 00:00:00 Uhr am 1. Januar des Jahres 1 und 23:59:59 Uhr am 31. Dezember 9999 darstellt.</param>
      <returns>Ein <see langword="Date" />-Wert, der die Datumsangabe als Zeichenfolge enthält und dessen Zeitangabe Mitternacht (00:00:00) lautet.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringDate" /> enthält eine ungültige Zeitangabe.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)">
      <summary>Gibt einen ganzzahligen Wert von 1 bis 31 zurück, der den Tag des Monats darstellt.</summary>
      <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem der Tag extrahiert werden soll.</param>
      <returns>Ein ganzzahliger Wert von 1 bis 31, der den Tag des Monats darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)">
      <summary>Gibt einen ganzzahligen Wert von 0 bis 23 zurück, der eine Stunde des Tags darstellt.</summary>
      <param name="TimeValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem die Stunde extrahiert werden soll.</param>
      <returns>Ein ganzzahliger Wert von 0 bis 23, der eine Stunde des Tags darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)">
      <summary>Gibt einen ganzzahligen Wert von 0 bis 59 zurück, der die Minute einer Stunde darstellt.</summary>
      <param name="TimeValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem die Minute extrahiert werden soll.</param>
      <returns>Ein ganzzahliger Wert von 0 bis 59, der die Minute einer Stunde darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)">
      <summary>Gibt einen ganzzahligen Wert von 1 bis 12 zurück, der den Monat eines Jahres darstellt.</summary>
      <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem der Monat extrahiert werden soll.</param>
      <returns>Ein ganzzahliger Wert von 1 bis 12, der den Monat eines Jahres darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)">
      <summary>Gibt einen Zeichenfolgenwert mit dem Namen des angegebenen Monats zurück.</summary>
      <param name="Month">Erforderlich. Die numerische Bezeichnung des Monats von 1 bis 13, wobei 1 für Januar und 12 für Dezember steht. Den Wert 13 können Sie für einen 13-Monats-Kalender verwenden. Wenn im System ein 12-Monats-Kalender verwendet wird und <paramref name="Month" /> 13 ist, gibt <c>MonthName</c> eine leere Zeichenfolge zurück.</param>
      <param name="Abbreviate">Optional. <see langword="True" /> zum Abkürzen des Monatsnamens; andernfalls <see langword="False" />. Die Standardeinstellung ist <see langword="False" />.</param>
      <returns>Ein Zeichenfolgenwert mit dem Namen des angegebenen Monats.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Month" /> ist größer als 1 oder größer als 13.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Now">
      <summary>Gibt einen Wert zurück, der das aktuelle Datum und die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</summary>
      <returns>Das aktuelle Datum und die Uhrzeit gemäß Ihrem System.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)">
      <summary>Gibt einen ganzzahligen Wert von 0 bis 59 zurück, der die Sekunde einer Minute darstellt.</summary>
      <param name="TimeValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem die Sekunde extrahiert werden soll.</param>
      <returns>Ein ganzzahliger Wert von 0 bis 59, der die Sekunde einer Minute darstellt.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay">
      <summary>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</summary>
      <returns>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der die aktuelle Uhrzeit gemäß der Systemeinstellung enthält.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Timer">
      <summary>Gibt einen Wert vom Typ <see cref="T:System.Double" /> zurück, der die Anzahl der seit Mitternacht vergangenen Sekunden angibt.</summary>
      <returns>Ein-Wert, der die Anzahl der seit Mitternacht verstrichenen Sekunden darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der eine bestimmte Stunde, Minute und Sekunde angibt und dessen Datum der 1. Januar des Jahres 1 ist.</summary>
      <param name="Hour">Erforderlich. Ganzzahliger Ausdruck zwischen 0 und 23. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert.</param>
      <param name="Minute">Erforderlich. Ganzzahliger Ausdruck zwischen 0 und 59. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Minute" /> wird zu der berechneten Stunde addiert, sodass ein negativer Wert Minuten vor dieser Stunde angibt.</param>
      <param name="Second">Erforderlich. Ganzzahliger Ausdruck zwischen 0 und 59. Werte außerhalb dieses Bereichs werden jedoch ebenfalls akzeptiert. Der Wert von <paramref name="Second" /> wird zu der berechneten Minute addiert, sodass ein negativer Wert Sekunden vor dieser Minute angibt.</param>
      <returns>Ein <see langword="Date" />-Wert, der eine bestimmte Stunde, Minute und Sekunde angibt und dessen Datum der 1. Januar des Jahres 1 ist.</returns>
      <exception cref="T:System.ArgumentException">Ein Argument liegt nicht im Bereich zwischen –2.147.483.648 und 2.147.483.647</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Errechnete Zeit ist kleiner als der Wert für –24 Stunden</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeString">
      <summary>Gibt einen Zeichenfolgenwert zurück, der die aktuelle Tageszeit gemäß Ihrem System darstellt, oder legt ihn fest.</summary>
      <returns>Gibt einen Zeichenfolgenwert zurück, der die aktuelle Tageszeit gemäß Ihrem System darstellt, oder legt ihn fest.</returns>
      <exception cref="T:System.InvalidCastException">Ungültiges Format, mit dem der Wert von <see langword="TimeString" /> festgelegt wurde.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der die Zeitangabe als Zeichenfolge enthält und dessen Datum der 1. Januar des Jahres 1 ist.</summary>
      <param name="StringTime">Erforderlich. Ein Zeichenfolgenausdruck, der ein Datum und eine Uhrzeit zwischen 00:00:00 Uhr am 1. Januar des Jahres 1 und 23:59:59 Uhr am 31. Dezember 9999 darstellt.</param>
      <returns>Ein <see langword="Date" />-Wert, der die Zeitangabe als Zeichenfolge enthält und dessen Datum der 1. Januar des Jahres 1 ist.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="StringTime" /> enthält ungültige Datumsinformationen.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Today">
      <summary>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</summary>
      <returns>Gibt einen <see langword="Date" />-Wert zurück bzw. legt einen Date-Wert fest, der das aktuelle Datum gemäß den Systemeinstellungen angibt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>Gibt einen ganzzahligen Wert mit einer Zahl zurück, die den Tag der Woche darstellt.</summary>
      <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, für den der Wochentag ermittelt werden soll.</param>
      <param name="DayOfWeek">Dies ist optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see cref="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday" /> verwendet.</param>
      <returns>Ein ganzzahliger Wert mit einer Zahl, die den Tag der Woche darstellt.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="DayOfWeek" /> ist kleiner als 0 oder größer als 7.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>Gibt einen Zeichenfolgenwert mit dem Namen des angegebenen Wochentags zurück.</summary>
      <param name="Weekday">Erforderlich. Integer. Die numerische Bezeichnung des Wochentags von 1 bis 7, wobei 1 für den ersten und 7 für den letzten Tag der Woche steht. Welcher jeweils der erste und letzte Tag der Woche ist, hängt von der Einstellung für <paramref name="FirstDayOfWeekValue" /> ab.</param>
      <param name="Abbreviate">Optional. Ein <see langword="Boolean" />-Wert, der angibt, ob der Name des Wochentags abgekürzt werden soll. Wenn dieser Wert nicht angegeben wird, lautet der Standardwert <see langword="False" />, d. h., der Name des Wochentags wird nicht abgekürzt.</param>
      <param name="FirstDayOfWeekValue">Optional. Ein Wert aus der <see cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />-Enumeration, der den ersten Tag der Woche angibt. Wenn dieser nicht angegeben wurde, wird <see langword="FirstDayOfWeek.System" /> verwendet.</param>
      <returns>Ein Zeichenfolgenwert mit dem Namen des angegebenen Wochentags.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Weekday" /> ist kleiner als 1 oder größer als 7, oder <paramref name="FirstDayOfWeekValue" /> ist kleiner als 0 oder größer als 7.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)">
      <summary>Gibt einen ganzzahligen Wert von 1 bis 9.999 zurück, der das Jahr darstellt.</summary>
      <param name="DateValue">Erforderlich. Ein <see langword="Date" />-Wert, aus dem das Jahr extrahiert werden soll.</param>
      <returns>Ein ganzzahliger Wert von 1 bis 9999, der das Jahr darstellt.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.DateFormat">
      <summary>Gibt in Aufrufen der <see langword="FormatDateTime" />-Funktion an, wie Datumsangaben angezeigt werden sollen.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.GeneralDate">
      <summary>Bei reellen Zahlen werden Datum und Uhrzeit angezeigt. Wenn die Zahl keine Dezimalstellen enthält, wird nur ein Datum angezeigt. Wenn die Zahl keinen ganzzahligen Teil enthält, wird nur die Uhrzeit angezeigt. Die Anzeige von Datum und Uhrzeit wird von den regionalen Einstellungen des Computers bestimmt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbGeneralDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongDate">
      <summary>Zeigt ein Datum in dem langen Datumsformat an, das in den regionalen Einstellungen des Computers angegeben wurde. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbLongDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongTime">
      <summary>Zeigt eine Uhrzeit in dem langen Zeitformat an, das in den regionalen Einstellungen des Computers angegeben wurde. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbLongTime" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortDate">
      <summary>Zeigt ein Datum in dem kurzen Datumsformat an, das in den regionalen Einstellungen des Computers angegeben wurde. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbShortDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortTime">
      <summary>Zeigt eine Uhrzeit in dem kurzen Zeitformat an, das in den regionalen Einstellungen des Computers angegeben wurde. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbShortTime" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DateInterval">
      <summary>Gibt an, wie Datumsintervalle beim Aufrufen von Datumsfunktionen festgelegt und formatiert werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Day">
      <summary>Tag des Monats (1 bis 31)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.DayOfYear">
      <summary>Tag des Jahres (1 bis 366)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Hour">
      <summary>Stunde (0 bis 23)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Minute">
      <summary>Minute (0 bis 59)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Month">
      <summary>Monat (1 bis 12).</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Quarter">
      <summary>Quartal des Jahres (1 bis 4)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Second">
      <summary>Sekunde (0 bis 59)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Weekday">
      <summary>Tag der Woche (1 bis 7)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.WeekOfYear">
      <summary>Woche des Jahres (1 bis 53)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Year">
      <summary>Jahr</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DueDate">
      <summary>Gibt beim Aufruf von Finanzmethoden an, wann Zahlungen fällig sind.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.BegOfPeriod">
      <summary>Tritt am Anfang des Datumsintervalls ein.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DueDate.EndOfPeriod">
      <summary>Tritt am Ende des Datumsintervalls ein.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ErrObject">
      <summary>Das <see langword="ErrObject" />-Modul enthält Eigenschaften und Prozeduren, mit denen Laufzeitfehler unter Verwendung des <see langword="Err" />-Objekts identifiziert und behandelt werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Clear">
      <summary>Löscht alle Eigenschafteneinstellungen des <see langword="Err" />-Objekt.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Description">
      <summary>Gibt einen <see langword="String" />-Ausdruck zurück, der eine einem Fehler zugeordnete beschreibende Zeichenfolge enthält, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
      <returns>Gibt einen <see langword="String" />-Ausdruck zurück, der eine einem Fehler zugeordnete beschreibende Zeichenfolge enthält, oder legt diesen fest. Lese-/Schreibzugriff.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Erl">
      <summary>Ruft eine ganze Zahl ab, die die Zeilennummer der letzten ausgeführten Anweisung angibt.</summary>
      <returns>Die Zeilennummer der letzten ausgeführten Anweisung.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.GetException">
      <summary>Gibt die Ausnahme zurück, die den aufgetretenen Fehler darstellt.</summary>
      <returns>Die Ausnahme, die den aufgetretenen Fehler darstellt.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.LastDllError">
      <summary>Ruft einen von einem Aufruf einer Dynamic Link Library (DLL) erzeugten Systemfehlercode ab.</summary>
      <returns>Ein Systemfehler Code, der durch einen aufzurufenden Befehl einer Dynamic Link Library (dll) erzeugt wird.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Number">
      <summary>Gibt einen numerischen Wert zurück, der einen Fehler angibt, oder legt diesen fest. Lese-/Schreibzugriff.</summary>
      <returns>Gibt einen numerischen Wert zurück, der einen Fehler angibt, oder legt diesen fest. Lese-/Schreibzugriff.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist größer als 65535.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)">
      <summary>Generiert einen Laufzeitfehler und kann statt der <see langword="Error" />-Anweisung verwendet werden.</summary>
      <param name="Number">Erforderlich. <see langword="Long" />-Integer, der die Art des Fehlers identifiziert. Visual Basic-Fehler liegen im Bereich 0–65535. Der Bereich 0–512 ist für Systemfehler reserviert. Der Bereich 513–65535 steht für benutzerdefinierte Fehler zur Verfügung. Beim Festlegen der <see langword="Number" />-Eigenschaft auf den eigenen Code in einem Klassenmodul fügen Sie der <see langword="vbObjectError" />-Konstante Ihre Fehlercodenummer hinzu. Um z.B. die Fehlernummer 513 zu generieren, weisen Sie <c>vbObjectError + 513</c> der <see langword="Number" />-Eigenschaft zu.</param>
      <param name="Source">Dies ist optional. <see langword="String" />-Ausdruck, der das Objekt oder die Anwendung nennt, das bzw. die den Fehler generiert hat. Wenn Sie diese Eigenschaft für ein Objekt festlegen, verwenden Sie das Format <c>Projekt</c>.<c>Klasse</c>. Wird <paramref name="Source" /> nicht angegeben, wird die Prozess-ID des aktuellen Visual Basic-Projekts verwendet.</param>
      <param name="Description">Dies ist optional. <see langword="String" />-Ausdruck, der den Fehler beschreibt. Ohne Angabe wird der Wert in der <see langword="Number" />-Eigenschaft überprüft. Wenn eine Zuordnung zu dem Code eines Visual Basic-Laufzeitfehlers möglich ist, wird die Zeichenfolge, die von der <see langword="Error" />-Funktion zurückgegeben wird, als <see langword="Description" />-Eigenschaft verwendet. Entspricht der <see langword="Number" />-Eigenschaft kein Visual Basic-Fehler, wird die Meldung "Anwendungs- oder objektdefinierter Fehler" verwendet.</param>
      <param name="HelpFile">Dies ist optional. Der vollqualifizierte Pfad zu der Hilfedatei, in der Hilfe zu diesem Fehler zur Verfügung steht. Ohne Angabe verwendet Visual Basic den vollqualifizierten Laufwerks-, Pfad- und Dateinamen der Visual Basic-Hilfedatei.</param>
      <param name="HelpContext">Optional. Die Kontext-ID, die ein Thema in <paramref name="HelpFile" /> identifiziert, das Hilfe für den Fehler bereitstellt. Wenn keine Angabe erfolgt, wird die Kontext-ID in der Visual Basic-Hilfedatei für den Fehler verwendet, der der <see langword="Number" />-Eigenschaft entspricht, sofern vorhanden.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.FileAttribute">
      <summary>Gibt beim Aufruf von Dateizugriffsfunktionen die zu verwendenden Dateiattribute an.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Archive">
      <summary>Die Datei wurde nach der letzten Sicherung geändert. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbArchive" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Directory">
      <summary>Verzeichnis oder Ordner. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbDirectory" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Hidden">
      <summary>Ausgeblendet. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbHidden" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Normal">
      <summary>Normal (Standardwert für <see langword="Dir" /> und <see langword="SetAttr" />). Diese Datei weist keine besonderen Charakteristika auf. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbNormal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.ReadOnly">
      <summary>Schreibgeschützt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbReadOnly" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.System">
      <summary>Systemdatei. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbSystem" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileAttribute.Volume">
      <summary>Volumebezeichnung. Dieses Attribut ist bei Verwendung mit <see langword="SetAttr" /> nicht gültig. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbVolume" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption">
      <summary>Gibt an, was geschehen soll, wenn ein Verzeichnis, das gelöscht werden soll, Dateien oder Verzeichnisse enthält.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.DeleteAllContents">
      <summary>Löscht den Inhalt des Verzeichnisses sowie das Verzeichnis selbst. Standard.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.DeleteDirectoryOption.ThrowIfDirectoryNonEmpty">
      <summary>Löst eine <see cref="T:System.IO.IOException" /> aus, wenn das Verzeichnis nicht leer ist. Die <see langword="Data" />-Eigenschaft der Ausnahme listet die Dateien auf, die nicht gelöscht werden konnten.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FieldType">
      <summary>Gibt an, ob Textfelder Trennzeichen enthalten oder eine feste Breite aufweisen.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.Delimited">
      <summary>Gibt an, dass die Felder Trennzeichen enthalten.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.FieldType.FixedWidth">
      <summary>Gibt an, dass die Felder eine feste Breite aufweisen.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.FileSystem">
      <summary>Stellt Eigenschaften und Methoden für die Arbeit mit Laufwerken, Dateien und Verzeichnissen bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CombinePath(System.String,System.String)">
      <summary>Verknüpft zwei Pfade und gibt einen ordnungsgemäß formatierten Pfad zurück.</summary>
      <param name="baseDirectory">
        <see langword="String" />. Erster Pfad, der kombiniert werden soll.</param>
      <param name="relativePath">
        <see langword="String" />. Zweiter Pfad, der kombiniert werden soll.</param>
      <returns>Die Kombination der angegebenen Pfade.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseDirectory" /> oder <paramref name="relativePath" /> sind fehlerhafte Pfade.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String)">
      <summary>Kopiert den Inhalt eines Verzeichnisses in ein anderes Verzeichnis.</summary>
      <param name="sourceDirectoryName">Das zu kopierende Verzeichnis.</param>
      <param name="destinationDirectoryName">Der Speicherort, an den der Verzeichnisinhalt kopiert werden soll.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> oder <paramref name="sourceDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das Quellverzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Der Quellpfad und der Zielpfad sind identisch.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Ordnername im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Eine Zieldatei ist vorhanden, aber es ist kein Zugriff auf die Datei möglich.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Kopiert den Inhalt eines Verzeichnisses in ein anderes Verzeichnis.</summary>
      <param name="sourceDirectoryName">Das zu kopierende Verzeichnis.</param>
      <param name="destinationDirectoryName">Der Speicherort, an den der Verzeichnisinhalt kopiert werden soll.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> oder <paramref name="sourceDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das Quellverzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Der Quellpfad und der Zielpfad sind identisch.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Ordnername im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Eine Zieldatei ist vorhanden, aber es ist kein Zugriff auf die Datei möglich.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> ist auf <see langword="UIOption.AllDialogs" /> festgelegt, und der Vorgang wird vom Benutzer abgebrochen, oder mindestens eine Datei im Verzeichnis kann nicht kopiert werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Kopiert den Inhalt eines Verzeichnisses in ein anderes Verzeichnis.</summary>
      <param name="sourceDirectoryName">Das zu kopierende Verzeichnis.</param>
      <param name="destinationDirectoryName">Der Speicherort, an den der Verzeichnisinhalt kopiert werden soll.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Gibt die Aktion an, die ausgeführt werden soll, wenn während des Vorgangs auf Abbrechen geklickt wird. Der Standardwert ist <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> oder <paramref name="sourceDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das Quellverzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Der Quellpfad und der Zielpfad sind identisch.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Ordnername im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Eine Zieldatei ist vorhanden, aber es ist kein Zugriff auf die Datei möglich.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="ShowUI" /> ist auf <see langword="UIOption.AllDialogs" /> festgelegt, und der Vorgang wird vom Benutzer abgebrochen, oder mindestens eine Datei im Verzeichnis kann nicht kopiert werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyDirectory(System.String,System.String,System.Boolean)">
      <summary>Kopiert den Inhalt eines Verzeichnisses in ein anderes Verzeichnis.</summary>
      <param name="sourceDirectoryName">Das zu kopierende Verzeichnis.</param>
      <param name="destinationDirectoryName">Der Speicherort, an den der Verzeichnisinhalt kopiert werden soll.</param>
      <param name="overwrite">
        <see langword="True" />, wenn vorhandene Dateien überschrieben werden sollen, andernfalls <see langword="False" />. Der Standardwert ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationDirectoryName" /> oder <paramref name="sourceDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das Quellverzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Der Quellpfad und der Zielpfad sind identisch.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Ordnername im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Eine Zieldatei ist vorhanden, aber es ist kein Zugriff auf die Datei möglich.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)">
      <summary>Kopiert eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Die zu kopierende Datei.</param>
      <param name="destinationFileName">Der Speicherort, an den die Datei kopiert werden soll.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> enthält Pfadinformationen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> oder <paramref name="sourceFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Eine Datei im Zielverzeichnis mit demselben Namen wird gegenwärtig verwendet.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Kopiert eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Die zu kopierende Datei.</param>
      <param name="destinationFileName">Der Speicherort, an den die Datei kopiert werden soll.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> enthält Pfadinformationen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> oder <paramref name="sourceFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Zieldatei ist bereits vorhanden, und <paramref name="overwrite" /> ist auf <see langword="False" /> festgelegt.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Kopiert eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Die zu kopierende Datei.</param>
      <param name="destinationFileName">Der Speicherort, an den die Datei kopiert werden soll.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Gibt die Aktion an, die ausgeführt werden soll, wenn während des Vorgangs auf Abbrechen geklickt wird. Der Standardwert ist <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> enthält Pfadinformationen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> oder <paramref name="sourceFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Zieldatei ist bereits vorhanden, und <paramref name="overwrite" /> ist auf <see langword="False" /> festgelegt.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="UICancelOption" /> ist auf <see langword="ThrowException" /> festgelegt, und entweder hat der Benutzer den Vorgang abgebrochen, oder ein nicht näher bezeichneter E/A-Fehler tritt auf.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String,System.Boolean)">
      <summary>Kopiert eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Die zu kopierende Datei.</param>
      <param name="destinationFileName">Der Speicherort, an den die Datei kopiert werden soll.</param>
      <param name="overwrite">
        <see langword="True" />, wenn vorhandene Dateien überschrieben werden sollen, andernfalls <see langword="False" />. Der Standardwert ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destinationFileName" /> enthält Pfadinformationen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationFileName" /> oder <paramref name="sourceFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Zieldatei ist bereits vorhanden, und <paramref name="overwrite" /> ist auf <see langword="False" /> festgelegt.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)">
      <summary>Erstellt ein Verzeichnis.</summary>
      <param name="directory">Der Name und der Speicherort des Verzeichnisses.</param>
      <exception cref="T:System.ArgumentException">Der Name des Verzeichnisses ist falsch formatiert. Er enthält beispielsweise unzulässige Zeichen oder besteht nur aus Leerzeichen.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Verzeichnisname ist zu lang.</exception>
      <exception cref="T:System.NotSupportedException">Der Verzeichnisname besteht nur aus einem Doppelpunkt (:).</exception>
      <exception cref="T:System.IO.IOException">Das übergeordnete Verzeichnis des zu erstellenden Verzeichnisses ist schreibgeschützt.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer ist nicht zum Erstellen des Verzeichnisses berechtigt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory">
      <summary>Ruft das aktuelle Verzeichnis ab oder legt dieses fest.</summary>
      <returns>Das aktuelle Verzeichnis für Datei-E/A-Operationen.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist nicht gültig.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.DeleteDirectoryOption)">
      <summary>Löscht ein Verzeichnis.</summary>
      <param name="directory">Das zu löschende Verzeichnis.</param>
      <param name="onDirectoryNotEmpty">Gibt an, was geschehen soll, wenn ein Verzeichnis, das gelöscht werden soll, Dateien oder Verzeichnisse enthält. Der Standardwert ist <see langword="DeleteDirectoryOption.DeleteAllContents" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0, der Pfad ist falsch formatiert, er enthält nur Leerzeichen oder er enthält ungültige Zeichen (einschließlich Platzhalterzeichen). Der Pfad ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das Verzeichnis ist nicht vorhanden, oder es handelt sich um eine Datei.</exception>
      <exception cref="T:System.IO.IOException">Eine Datei im Verzeichnis oder Unterverzeichnis wird gegenwärtig verwendet.</exception>
      <exception cref="T:System.NotSupportedException">Der Verzeichnisname enthält einen Doppelpunkt (:).</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
      <exception cref="T:System.OperationCanceledException">Der Benutzer bricht den Vorgang ab, oder das Verzeichnis kann nicht gelöscht werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>Löscht ein Verzeichnis.</summary>
      <param name="directory">Das zu löschende Verzeichnis.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Gibt an, ob die gelöschte Datei in den Papierkorb verschoben werden soll. Der Standardwert ist <see langword="RecycleOption.DeletePermanently" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0, der Pfad ist falsch formatiert, er enthält nur Leerzeichen oder er enthält ungültige Zeichen (einschließlich Platzhalterzeichen). Der Pfad ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das Verzeichnis ist nicht vorhanden, oder es handelt sich um eine Datei.</exception>
      <exception cref="T:System.IO.IOException">Eine Datei im Verzeichnis oder Unterverzeichnis wird gegenwärtig verwendet.</exception>
      <exception cref="T:System.NotSupportedException">Der Verzeichnisname enthält einen Doppelpunkt (:).</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
      <exception cref="T:System.OperationCanceledException">Der Benutzer bricht den Vorgang ab, oder das Verzeichnis kann nicht gelöscht werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Löscht ein Verzeichnis.</summary>
      <param name="directory">Das zu löschende Verzeichnis.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Gibt an, ob die gelöschte Datei in den Papierkorb verschoben werden soll. Der Standardwert ist <see langword="RecycleOption.DeletePermanently" />.</param>
      <param name="onUserCancel">Gibt an, ob eine Ausnahme ausgelöst werden soll, wenn auf Abbrechen geklickt wird.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0, der Pfad ist falsch formatiert, er enthält nur Leerzeichen oder er enthält ungültige Zeichen (einschließlich Platzhalterzeichen). Der Pfad ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das Verzeichnis ist nicht vorhanden, oder es handelt sich um eine Datei.</exception>
      <exception cref="T:System.IO.IOException">Eine Datei im Verzeichnis oder Unterverzeichnis wird gegenwärtig verwendet.</exception>
      <exception cref="T:System.NotSupportedException">Der Verzeichnisname enthält einen Doppelpunkt (:).</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
      <exception cref="T:System.OperationCanceledException">Der Benutzer bricht den Vorgang ab, oder das Verzeichnis kann nicht gelöscht werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String)">
      <summary>Löscht eine Datei.</summary>
      <param name="file">Name und Pfad der zu löschenden Datei.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; er weist an der Position, an der eine Datei angegeben werden muss, einen abschließenden Schrägstrich auf; es handelt sich um einen Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="file" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird gegenwärtig verwendet.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung zum Löschen der Datei, oder die Datei ist schreibgeschützt.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption)">
      <summary>Löscht eine Datei.</summary>
      <param name="file">Name und Pfad der zu löschenden Datei.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Gibt an, ob die gelöschte Datei in den Papierkorb verschoben werden soll. Der Standardwert ist <see langword="RecycleOption.DeletePermanently" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; er weist an der Position, an der eine Datei angegeben werden muss, einen abschließenden Schrägstrich auf; es handelt sich um einen Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="file" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird gegenwärtig verwendet.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung zum Löschen der Datei, oder die Datei ist schreibgeschützt.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DeleteFile(System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.RecycleOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Löscht eine Datei.</summary>
      <param name="file">Name und Pfad der zu löschenden Datei.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="recycle">Gibt an, ob die gelöschte Datei in den Papierkorb verschoben werden soll. Der Standardwert ist <see langword="RecycleOption.DeletePermanently" />.</param>
      <param name="onUserCancel">Gibt an, ob eine Ausnahme ausgelöst wird, wenn der Benutzer den Vorgang abbricht. Der Standardwert ist <see langword="UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; er weist an der Position, an der eine Datei angegeben werden muss, einen abschließenden Schrägstrich auf; es handelt sich um einen Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="file" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird gegenwärtig verwendet.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung zum Löschen der Datei, oder die Datei ist schreibgeschützt.</exception>
      <exception cref="T:System.OperationCanceledException">Der Benutzer hat den Vorgang abgebrochen, und <paramref name="onUserCancel" /> ist auf <see cref="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException" /> festgelegt.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.DirectoryExists(System.String)">
      <summary>Gibt <see langword="True" /> zurück, wenn das angegebene Verzeichnis vorhanden ist.</summary>
      <param name="directory">Der Pfad des Verzeichnisses.</param>
      <returns>
        <see langword="True" />, wenn das Verzeichnis vorhanden ist, andernfalls <see langword="False" />. Diese Methode gibt auch <see langword="False" /> zurück, wenn der Parameter den Namen und Pfad einer Datei statt ein Verzeichnis darstellt.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.FileSystem.Drives">
      <summary>Gibt eine schreibgeschützte Auflistung aller verfügbaren Laufwerknamen zurück.</summary>
      <returns>Eine schreibgeschützte Auflistung aller verfügbaren Laufwerke als <see cref="T:System.IO.DriveInfo" />-Objekte.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FileExists(System.String)">
      <summary>Gibt <see langword="True" /> zurück, wenn die angegebene Datei vorhanden ist.</summary>
      <param name="file">Name und Pfad der Datei.</param>
      <returns>Diese Methode gibt <see langword="True" /> zurück, wenn die Datei vorhanden ist, andernfalls gibt sie <see langword="False" /> zurück. Diese Methode gibt auch <see langword="False" /> zurück, wenn der Parameter den Pfad eines Verzeichnisses statt einer Datei darstellt.</returns>
      <exception cref="T:System.ArgumentException">Der Name der Datei endet mit einem umgekehrten Schrägstrich (\).</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption)">
      <summary>Gibt eine schreibgeschützte Auflistung von Zeichenfolgen zurück, die die Namen der Dateien mit dem angegebenen Text darstellen.</summary>
      <param name="directory">Das zu durchsuchende Verzeichnis.</param>
      <param name="containsText">Der Suchtext.</param>
      <param name="ignoreCase">
        <see langword="True" />, wenn die Groß-/Kleinschreibung bei der Suche berücksichtigt werden soll, andernfalls <see langword="False" />. Der Standardwert ist <see langword="True" />.</param>
      <param name="searchType">Gibt an, ob Unterordner eingeschlossen werden. Der Standardwert ist <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <returns>Eine schreibgeschützte Collection der Namen der Dateien, die den angegebenen Text enthalten.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0 (null), er enthält nur Leerzeichen, er enthält ungültige Zeichen, oder er ist ein Gerätepfad (beginnt mit <c>\.&lt;/code&gt;).</c></exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das angegebene Verzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Das angegebene Verzeichnis zeigt auf eine vorhandene Datei.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Der angegebene Verzeichnispfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.FindInFiles(System.String,System.String,System.Boolean,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>Gibt eine schreibgeschützte Auflistung von Zeichenfolgen zurück, die die Namen der Dateien mit dem angegebenen Text darstellen.</summary>
      <param name="directory">Das zu durchsuchende Verzeichnis.</param>
      <param name="containsText">Der Suchtext.</param>
      <param name="ignoreCase">
        <see langword="True" />, wenn die Groß-/Kleinschreibung bei der Suche berücksichtigt werden soll, andernfalls <see langword="False" />. Der Standardwert ist <see langword="True" />.</param>
      <param name="searchType">Gibt an, ob Unterordner eingeschlossen werden. Der Standardwert ist <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <param name="fileWildcards">Das Muster, das übereinstimmen muss.</param>
      <returns>Eine schreibgeschützte Collection der Namen der Dateien, die den angegebenen Text enthalten.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0 (null), er enthält nur Leerzeichen, er enthält ungültige Zeichen, oder er ist ein Gerätepfad (beginnt mit <c>\.&lt;/code&gt;).</c></exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das angegebene Verzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Das angegebene Verzeichnis zeigt auf eine vorhandene Datei.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Der angegebene Verzeichnispfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String)">
      <summary>Gibt eine Auflistung von Zeichenfolgen zurück, die die Pfadnamen der Unterverzeichnisse in einem Verzeichnis darstellen.</summary>
      <param name="directory">Name und Pfad des Verzeichnisses.</param>
      <returns>Schreibgeschützte Auflistung der Pfadnamen für die Unterverzeichnisse im angegebenen Verzeichnis.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das angegebene Verzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Das angegebene Verzeichnis zeigt auf eine vorhandene Datei.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectories(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>Gibt eine Auflistung von Zeichenfolgen zurück, die die Pfadnamen der Unterverzeichnisse in einem Verzeichnis darstellen.</summary>
      <param name="directory">Name und Pfad des Verzeichnisses.</param>
      <param name="searchType">Gibt an, ob Unterordner eingeschlossen werden. Der Standardwert ist <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <param name="wildcards">Das Muster für den Namensvergleich.</param>
      <returns>Schreibgeschützte Auflistung der Pfadnamen für die Unterverzeichnisse im angegebenen Verzeichnis.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Mindestens eines der angegebenen Platzhalterzeichen ist <see langword="Nothing" />, eine leere Zeichenfolge oder enthält nur Leerzeichen.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das angegebene Verzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Das angegebene Verzeichnis zeigt auf eine vorhandene Datei.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)">
      <summary>Gibt für den angegebenen Pfad ein <see cref="T:System.IO.DirectoryInfo" />-Objekt zurück.</summary>
      <param name="directory">
        <see langword="String" />. Pfad des Verzeichnisses.</param>
      <returns>Ein <see cref="T:System.IO.DirectoryInfo" />-Objekt für den angegebenen Pfad.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="directory" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Der Verzeichnispfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDriveInfo(System.String)">
      <summary>Gibt ein <see cref="T:System.IO.DriveInfo" />-Objekt für das angegebene Laufwerk zurück.</summary>
      <param name="drive">Das zu überprüfende Laufwerk.</param>
      <returns>Ein <see cref="T:System.IO.DriveInfo" />-Objekt für das angegebene Laufwerk.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="drive" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)">
      <summary>Gibt ein <see cref="T:System.IO.FileInfo" />-Objekt für die angegebene Datei zurück.</summary>
      <param name="file">Name und Pfad der Datei.</param>
      <returns>Ein <see cref="T:System.IO.FileInfo" />-Objekt für die angegebene Datei.</returns>
      <exception cref="T:System.ArgumentException">Der Pfadname ist falsch formatiert. Er enthält beispielsweise ungültige Zeichen oder besteht nur aus Leerzeichen. Der Dateiname enthält einen nachgestellten Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="file" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.NotSupportedException">Der Pfad enthält einen Doppelpunkt in der Mitte der Zeichenfolge.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad ist zu lang.</exception>
      <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt über keinen ACL (Access Control List)-Zugriff auf die Datei.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String)">
      <summary>Gibt eine schreibgeschützte Auflistung von Zeichenfolgen zurück, die die Namen der Dateien in einem Verzeichnis darstellen.</summary>
      <param name="directory">Das zu durchsuchende Verzeichnis.</param>
      <returns>Eine schreibgeschützte Auflistung von Dateinamen aus dem angegebenen Verzeichnis.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das zu durchsuchende Verzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> zeigt auf eine vorhandene Datei.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles(System.String,Microsoft.VisualBasic.FileIO.SearchOption,System.String[])">
      <summary>Gibt eine schreibgeschützte Auflistung von Zeichenfolgen zurück, die die Namen der Dateien in einem Verzeichnis darstellen.</summary>
      <param name="directory">Das zu durchsuchende Verzeichnis.</param>
      <param name="searchType">Gibt an, ob Unterordner eingeschlossen werden. Der Standardwert ist <see langword="SearchOption.SearchTopLevelOnly" />.</param>
      <param name="wildcards">Das Muster, das übereinstimmen muss.</param>
      <returns>Eine schreibgeschützte Auflistung von Dateinamen aus dem angegebenen Verzeichnis.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Das zu durchsuchende Verzeichnis ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="directory" /> zeigt auf eine vorhandene Datei.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetName(System.String)">
      <summary>Analysiert den Dateinamen aus dem bereitgestellten Pfad.</summary>
      <param name="path">Erforderlich. Der zu analysierende Pfad. <see langword="String" />.</param>
      <returns>Der Dateiname aus dem angegebenen Pfad.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetParentPath(System.String)">
      <summary>Gibt den übergeordneten Pfad des bereitgestellten Pfades zurück.</summary>
      <param name="path">Der zu überprüfende Pfad.</param>
      <returns>Der übergeordnete Pfad des bereitgestellten Pfads.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad verfügt über keinen übergeordneten Pfad, weil er ein Stammpfad ist.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.GetTempFileName">
      <summary>Erstellt eine eindeutig benannte temporäre Datei mit einer Größe von 0 Byte auf dem Datenträger und gibt den vollständigen Pfad dieser Datei zurück.</summary>
      <returns>Ein <see langword="String" />, der den vollständigen Pfad der temporären Datei enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String)">
      <summary>Verschiebt ein Verzeichnis von einem Speicherort an einen anderen.</summary>
      <param name="sourceDirectoryName">Der Pfad des Verzeichnisses, das verschoben werden soll.</param>
      <param name="destinationDirectoryName">Der Pfad des Verzeichnisses, in das das Quellverzeichnis verschoben wird.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> oder <paramref name="destinationDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Quelle ist ein Stammverzeichnis, oder der Quellpfad und der Zielpfad sind identisch.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Verschiebt ein Verzeichnis von einem Speicherort an einen anderen.</summary>
      <param name="sourceDirectoryName">Der Pfad des Verzeichnisses, das verschoben werden soll.</param>
      <param name="destinationDirectoryName">Der Pfad des Verzeichnisses, in das das Quellverzeichnis verschoben wird.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> oder <paramref name="destinationDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Das Zielverzeichnis ist bereits vorhanden, und <paramref name="overwrite" /> ist auf den Wert <see langword="False" /> festgelegt.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Verschiebt ein Verzeichnis von einem Speicherort an einen anderen.</summary>
      <param name="sourceDirectoryName">Der Pfad des Verzeichnisses, das verschoben werden soll.</param>
      <param name="destinationDirectoryName">Der Pfad des Verzeichnisses, in das das Quellverzeichnis verschoben wird.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Gibt an, ob eine Ausnahme ausgelöst wird, wenn der Benutzer den Vorgang abbricht. Der Standardwert ist <see langword="UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> oder <paramref name="destinationDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="onUserCancel" /> ist auf <see langword="ThrowException" /> festgelegt, und ein Unterverzeichnis der Datei kann nicht kopiert werden.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> ist auf <see langword="ThrowException" /> festgelegt, und der Benutzer bricht den Vorgang ab, oder der Vorgang kann nicht abgeschlossen werden.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveDirectory(System.String,System.String,System.Boolean)">
      <summary>Verschiebt ein Verzeichnis von einem Speicherort an einen anderen.</summary>
      <param name="sourceDirectoryName">Der Pfad des Verzeichnisses, das verschoben werden soll.</param>
      <param name="destinationDirectoryName">Der Pfad des Verzeichnisses, in das das Quellverzeichnis verschoben wird.</param>
      <param name="overwrite">
        <see langword="True" />, wenn vorhandene Verzeichnisse überschrieben werden sollen, andernfalls <see langword="False" />. Der Standardwert ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Er ist eine Zeichenfolge der Länge 0; er enthält nur Leerräume; er enthält ungültige Zeichen; er ist ein Gerätepfad (beginnt mit \\.\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirectoryName" /> oder <paramref name="destinationDirectoryName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Das Zielverzeichnis ist bereits vorhanden, und <paramref name="overwrite" /> ist auf den Wert <see langword="False" /> festgelegt.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.InvalidOperationException">Der Vorgang ist zyklisch.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String)">
      <summary>Verschiebt eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Der Pfad der zu verschiebenden Datei.</param>
      <param name="destinationFileName">Der Pfad des Verzeichnisses, in das die Datei verschoben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="destinationFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption)">
      <summary>Verschiebt eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Der Pfad der zu verschiebenden Datei.</param>
      <param name="destinationFileName">Der Pfad des Verzeichnisses, in das die Datei verschoben werden soll.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="destinationFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,Microsoft.VisualBasic.FileIO.UIOption,Microsoft.VisualBasic.FileIO.UICancelOption)">
      <summary>Verschiebt eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Der Pfad der zu verschiebenden Datei.</param>
      <param name="destinationFileName">Der Pfad des Verzeichnisses, in das die Datei verschoben werden soll.</param>
      <param name="showUI">Gibt an, ob der Status des Vorgangs visuell dargestellt werden soll. Der Standardwert ist <see langword="UIOption.OnlyErrorDialogs" />.</param>
      <param name="onUserCancel">Gibt an, ob eine Ausnahme ausgelöst wird, wenn der Benutzer den Vorgang abbricht. Der Standardwert ist <see langword="UICancelOption.ThrowException" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="destinationFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="onUserCancel" /> ist auf <see langword="ThrowException" /> festgelegt, und entweder hat der Benutzer den Vorgang abgebrochen, oder ein nicht näher bezeichneter E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.MoveFile(System.String,System.String,System.Boolean)">
      <summary>Verschiebt eine Datei an einen neuen Speicherort.</summary>
      <param name="sourceFileName">Der Pfad der zu verschiebenden Datei.</param>
      <param name="destinationFileName">Der Pfad des Verzeichnisses, in das die Datei verschoben werden soll.</param>
      <param name="overwrite">
        <see langword="True" />, wenn vorhandene Dateien überschrieben werden sollen, andernfalls <see langword="False" />. Der Standardwert ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="destinationFileName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Quelldatei ist ungültig oder nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)">
      <summary>Mit der <see langword="OpenTextFieldParser" />-Methode kann ein <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt erstellt werden, mit dessen Hilfe strukturierte Textdateien, z.B. Protokolle, sowohl einfach, als auch effizient analysiert werden können. Mit dem <see langword="TextFieldParser" />-Objekt können sowohl Dateien mit Trennzeichen als auch Dateien mit fester Breite gelesen werden.</summary>
      <param name="file">Die Datei, die mit dem <see langword="TextFieldParser" /> geöffnet werden soll.</param>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> zum Lesen der angegebenen Datei.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Eine Zeile kann nicht mit dem angegebenen Format analysiert werden. Die Ausnahmemeldung gibt die Zeile an, die die Ausnahme verursacht, während der in der Zeile enthaltene Text der <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />-Eigenschaft zugewiesen wird.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.Int32[])">
      <summary>Mit der <see langword="OpenTextFieldParser" />-Methode kann ein <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt erstellt werden, mit dessen Hilfe strukturierte Textdateien, z. B. Protokolle, sowohl einfach als auch effizient analysiert werden können. Mit dem <see langword="TextFieldParser" />-Objekt können sowohl Dateien mit Trennzeichen als auch Dateien mit fester Breite gelesen werden.</summary>
      <param name="file">Die Datei, die mit dem <see langword="TextFieldParser" /> geöffnet werden soll.</param>
      <param name="fieldWidths">Die Breiten der Felder.</param>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> zum Lesen der angegebenen Datei.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Eine Zeile kann nicht mit dem angegebenen Format analysiert werden. Die Ausnahmemeldung gibt die Zeile an, die die Ausnahme verursacht, während der in der Zeile enthaltene Text der <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />-Eigenschaft zugewiesen wird.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String,System.String[])">
      <summary>Mit der <see langword="OpenTextFieldParser" />-Methode kann ein <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt erstellt werden, mit dessen Hilfe strukturierte Textdateien, z. B. Protokolle, sowohl einfach als auch effizient analysiert werden können. Mit dem <see langword="TextFieldParser" />-Objekt können sowohl Dateien mit Trennzeichen als auch Dateien mit fester Breite gelesen werden.</summary>
      <param name="file">Die Datei, die mit dem <see langword="TextFieldParser" /> geöffnet werden soll.</param>
      <param name="delimiters">Trennzeichen für die Felder.</param>
      <returns>
        <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> zum Lesen der angegebenen Datei.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Eine Zeile kann nicht mit dem angegebenen Format analysiert werden. Die Ausnahmemeldung gibt die Zeile an, die die Ausnahme verursacht, während der in der Zeile enthaltene Text der <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />-Eigenschaft zugewiesen wird.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String)">
      <summary>Öffnet ein <see cref="T:System.IO.StreamReader" />-Objekt, das aus einer Datei gelesen werden soll.</summary>
      <param name="file">Die zu lesende Datei.</param>
      <returns>
        <see cref="T:System.IO.StreamReader" />-Objekt zum Lesen aus der Datei</returns>
      <exception cref="T:System.ArgumentException">Der Dateiname endet mit einem umgekehrten Schrägstrich (\).</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die angegebene Datei kann nicht gefunden werden.</exception>
      <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus der Datei.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileReader(System.String,System.Text.Encoding)">
      <summary>Öffnet ein <see cref="T:System.IO.StreamReader" />-Objekt, das aus einer Datei gelesen werden soll.</summary>
      <param name="file">Die zu lesende Datei.</param>
      <param name="encoding">Die für den Inhalt der Datei zu verwendende Codierung. Der Standardwert ist ASCII.</param>
      <returns>
        <see cref="T:System.IO.StreamReader" />-Objekt zum Lesen aus der Datei</returns>
      <exception cref="T:System.ArgumentException">Der Dateiname endet mit einem umgekehrten Schrägstrich (\).</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die angegebene Datei kann nicht gefunden werden.</exception>
      <exception cref="T:System.Security.SecurityException">Der Benutzer verfügt nicht über die erforderlichen Berechtigungen zum Lesen aus der Datei.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean)">
      <summary>Öffnet ein <see cref="T:System.IO.StreamWriter" />-Objekt, das in die angegebene Datei geschrieben werden soll.</summary>
      <param name="file">Die Datei, in die geschrieben werden soll.</param>
      <param name="append">
        <see langword="True" />, wenn Daten an den Inhalt der Datei angefügt werden sollen, <see langword="False" />, wenn der Inhalt der Datei überschrieben werden soll. Der Standardwert ist <see langword="False" />.</param>
      <returns>
        <see cref="T:System.IO.StreamWriter" />-Objekt, das in die angegebene Datei geschrieben werden soll.</returns>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="file" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.ArgumentException">Der Dateiname endet mit einem nachgestellten Schrägstrich.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFileWriter(System.String,System.Boolean,System.Text.Encoding)">
      <summary>Öffnet einen <see cref="T:System.IO.StreamWriter" />, der in die angegebene Datei geschrieben werden soll.</summary>
      <param name="file">Die Datei, in die geschrieben werden soll.</param>
      <param name="append">
        <see langword="True" />, wenn Daten an den Inhalt in der Datei angefügt werden sollen, <see langword="False" />, wenn der Inhalt der Datei überschrieben werden soll. Der Standardwert ist <see langword="False" />.</param>
      <param name="encoding">Die Codierung, die beim Schreiben in die Datei verwendet werden soll. Der Standardwert ist ASCII.</param>
      <returns>
        <see cref="T:System.IO.StreamWriter" />-Objekt, das in die angegebene Datei geschrieben werden soll.</returns>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="file" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.ArgumentException">Der Dateiname endet mit einem nachgestellten Schrägstrich.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllBytes(System.String)">
      <summary>Gibt den Inhalt einer Datei als Bytearray zurück.</summary>
      <param name="file">Die zu lesende Datei.</param>
      <returns>Ein <see langword="Byte" />-Array mit dem Inhalt der Datei.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um die Zeichenfolge in den Puffer zu schreiben.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String)">
      <summary>Gibt den Inhalt einer Textdatei als <see langword="String" /> zurück.</summary>
      <param name="file">Name und Pfad der zu lesenden Datei.</param>
      <returns>Ein <see langword="String" /> mit dem Inhalt der Datei.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um die Zeichenfolge in den Puffer zu schreiben.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.ReadAllText(System.String,System.Text.Encoding)">
      <summary>Gibt den Inhalt einer Textdatei als <see langword="String" /> zurück.</summary>
      <param name="file">Name und Pfad der zu lesenden Datei.</param>
      <param name="encoding">Die Zeichencodierung, die beim Lesen der Datei verwendet werden soll. Die Standardeinstellung ist UTF-8.</param>
      <returns>Ein <see langword="String" /> mit dem Inhalt der Datei.</returns>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um die Zeichenfolge in den Puffer zu schreiben.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameDirectory(System.String,System.String)">
      <summary>Benennt ein Verzeichnis um.</summary>
      <param name="directory">Der Pfad und der Name des umzubenennenden Verzeichnisses.</param>
      <param name="newName">Neuer Name für das Verzeichnis.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> enthält Pfadinformationen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="directory" /> ist <see langword="Nothing" />.
- oder -
Der <paramref name="newName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Es ist eine Datei oder ein Verzeichnis mit dem in <paramref name="newName" /> angegebenen Namen vorhanden.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(System.String,System.String)">
      <summary>Benennt eine Datei um.</summary>
      <param name="file">Die Datei, die umbenannt werden soll.</param>
      <param name="newName">Neuer Name der Datei.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newName" /> enthält Pfadinformationen oder endet mit einem umgekehrten Schrägstrich (\).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.
- oder -
Der <paramref name="newName" /> ist <see langword="Nothing" /> oder eine leere Zeichenfolge.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Es ist eine Datei oder ein Verzeichnis mit dem in <paramref name="newName" /> angegebenen Namen vorhanden.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Der Benutzer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllBytes(System.String,System.Byte[],System.Boolean)">
      <summary>Schreibt Daten in eine Binärdatei.</summary>
      <param name="file">Der Pfad und Name der Datei, in die geschrieben werden soll.</param>
      <param name="data">Die in die Datei zu schreibenden Daten.</param>
      <param name="append">
        <see langword="True" />, wenn Daten an den Inhalt der Datei angefügt werden sollen, <see langword="False" />, wenn der Inhalt der Datei überschrieben werden soll. Der Standardwert ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um die Zeichenfolge in den Puffer zu schreiben.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean)">
      <summary>Schreibt Text in eine Datei.</summary>
      <param name="file">Die Datei, in die geschrieben werden soll.</param>
      <param name="text">Text, der in eine Datei geschrieben werden soll.</param>
      <param name="append">
        <see langword="True" />, wenn Daten an den Inhalt der Datei angefügt werden sollen, <see langword="False" />, wenn der Inhalt der Datei überschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um die Zeichenfolge in den Puffer zu schreiben.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.FileSystem.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)">
      <summary>Schreibt Text in eine Datei.</summary>
      <param name="file">Die Datei, in die geschrieben werden soll.</param>
      <param name="text">Text, der in eine Datei geschrieben werden soll.</param>
      <param name="append">
        <see langword="True" />, wenn Daten an den Inhalt der Datei angefügt werden sollen, <see langword="False" />, wenn der Inhalt der Datei überschrieben werden soll.</param>
      <param name="encoding">Die beim Schreiben in die Datei zu verwendende Codierung.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist aus einem der folgenden Gründe ungültig: Es handelt sich um eine Zeichenfolge der Länge 0; der Pfad enthält nur Leerräume; er enthält ungültige Zeichen; es handelt sich um einen Gerätepfad (beginnt mit \\.\); er endet mit einem nachstehenden Schrägstrich.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Die Datei wird von einem anderen Prozess verwendet, oder ein E/A-Fehler tritt auf.</exception>
      <exception cref="T:System.IO.PathTooLongException">Der Pfad überschreitet die im System definierte maximale Länge.</exception>
      <exception cref="T:System.NotSupportedException">Ein Datei- oder Verzeichnisname im Pfad enthält einen Doppelpunkt (:) oder hat ein ungültiges Format.</exception>
      <exception cref="T:System.OutOfMemoryException">Es ist nicht genügend Arbeitsspeicher vorhanden, um die Zeichenfolge in den Puffer zu schreiben.</exception>
      <exception cref="T:System.Security.SecurityException">Dem Benutzer fehlen die erforderlichen Berechtigungen zum Anzeigen des Pfads.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
      <summary>Diese Ausnahme wird ausgelöst, wenn die <see cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />-Methode eine Zeile mit dem angegebenen Format nicht analysieren kann.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt, das die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
      <param name="context">Die <see cref="T:System.Runtime.Serialization.StreamingContext" />-Struktur, die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message">Eine Meldung mit einer Beschreibung des Fehlers.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Ein <see cref="T:System.String" />, der den Fehler beschreibt.</param>
      <param name="innerException">Das <see cref="T:System.Exception" />-Objekt, das die aktuelle Ausnahme verursacht. Wenn der <see cref="P:System.Exception.InnerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem catch-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Klasse mit einer angegebenen Fehlermeldung und einer Zeilennummer.</summary>
      <param name="message">Die Nachricht für die Ausnahme.</param>
      <param name="lineNumber">Die Zeilennummer der fehlerhaften Zeile.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.#ctor(System.String,System.Int64,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Klasse mit einer angegebenen Fehlermeldung, einer Zeilennummer und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Die Nachricht für die Ausnahme.</param>
      <param name="lineNumber">Die Zeilennummer der fehlerhaften Zeile.</param>
      <param name="innerException">Die <see cref="T:System.Exception" />, die die aktuelle Ausnahme verursacht hat. Wenn der <see cref="P:System.Exception.InnerException" />-Parameter kein NULL-Verweis ist (<see langword="Nothing" /> in Visual Basic), wird die aktuelle Ausnahme in einem Catch-Block ausgelöst, der die innere Ausnahme verarbeitet.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Legt das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt mit Informationen zur Ausnahme fest.</summary>
      <param name="info">Das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt, das die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
      <param name="context">Die <see cref="T:System.Runtime.Serialization.StreamingContext" />-Struktur, die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.MalformedLineException.LineNumber">
      <summary>Ruft die Zeilennummer der fehlerhaften Zeile ab.</summary>
      <returns>Die Zeilennummer der fehlerhaften Zeile.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.MalformedLineException.ToString">
      <summary>Erstellt eine Zeichenfolgendarstellung der aktuellen Ausnahme und gibt diese zurück.</summary>
      <returns>Eine Zeichenfolgendarstellung der aktuellen Ausnahme.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.RecycleOption">
      <summary>Gibt an, ob eine Datei endgültig gelöscht oder in den Papierkorb verschoben werden soll.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.DeletePermanently">
      <summary>Löscht die Datei oder das Verzeichnis dauerhaft. Standard.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.RecycleOption.SendToRecycleBin">
      <summary>Verschiebt die Datei oder das Verzeichnis in den Papierkorb.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SearchOption">
      <summary>Gibt an, ob alle Verzeichnisse oder nur die Verzeichnisse der obersten Ebene durchsucht werden sollen.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories">
      <summary>Durchsucht das angegebene Verzeichnis und alle darin enthaltenen Unterverzeichnisse. Standard.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.SearchOption.SearchTopLevelOnly">
      <summary>Durchsucht nur das angegebene Verzeichnis und schließt die Unterverzeichnisse aus.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.SpecialDirectories">
      <summary>Stellt Eigenschaften für den Zugriff auf häufig verwiesene Verzeichnisse bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.SpecialDirectories.#ctor">
      <summary>Gibt eine Instanz der <see cref="P:Microsoft.VisualBasic.MyServices.FileSystemProxy.SpecialDirectories" />-Klasse zurück.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.AllUsersApplicationData">
      <summary>Ruft einen Pfadnamen ab, der auf das Anwendungsdatenverzeichnis für alle Benutzer zeigt.</summary>
      <returns>Der Pfad zum Anwendungsdatenverzeichnis für alle Benutzer.</returns>
      <exception cref="T:System.Security.Permissions.EnvironmentPermission">Steuert den Zugriff auf System- und Benutzerumgebungsvariablen. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.CurrentUserApplicationData">
      <summary>Ruft einen Pfadnamen ab, der auf das Anwendungsdatenverzeichnis für den aktuellen Benutzer zeigt.</summary>
      <returns>Der Pfad zum Anwendungsdatenverzeichnis für den aktuellen Benutzer.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Desktop">
      <summary>Ruft einen Pfadnamen ab, der auf das Desktop-Verzeichnis zeigt.</summary>
      <returns>Der Pfad zum Desktopverzeichnis.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyDocuments">
      <summary>Ruft einen Pfadnamen ab, der auf das Verzeichnis Eigene Dokumente zeigt.</summary>
      <returns>Der Pfad zum Verzeichnis Eigene Dateien.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyMusic">
      <summary>Ruft einen Pfadnamen ab, der auf das Verzeichnis Eigene Musik zeigt.</summary>
      <returns>Der Pfad zum Verzeichnis Eigene Musik.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.MyPictures">
      <summary>Ruft einen Pfadnamen ab, der auf das Verzeichnis Eigene Bilder zeigt.</summary>
      <returns>Der Pfad zum Verzeichnis Eigene Bilder.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.ProgramFiles">
      <summary>Ruft einen Pfad ab, der auf das Verzeichnis Programme zeigt.</summary>
      <returns>Der Pfad zum Verzeichnis " Programme ".</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Programs">
      <summary>Ruft einen Pfadnamen ab, der auf das Verzeichnis Programme zeigt.</summary>
      <returns>Der Pfad zum Verzeichnis Programme.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.SpecialDirectories.Temp">
      <summary>Ruft einen Pfadnamen ab, der auf das Temp-Verzeichnis zeigt.</summary>
      <returns>Der Pfad zum Verzeichnis Temp.</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">Der Pfad ist leer. Dies liegt in der Regel daran, dass das Betriebssystem das Verzeichnis nicht unterstützt.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.TextFieldParser">
      <summary>Stellt Methoden und Eigenschaften zur Analyse strukturierter Textdateien bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. Der zu analysierende Datenstrom.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> kann nicht gelesen werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. Der zu analysierende Datenstrom.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann. Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> kann nicht gelesen werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. Der zu analysierende Datenstrom.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann. Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. Gibt an, ob am Anfang der Datei nach Bytereihenfolgemarken gesucht werden soll. Der Standardwert ist <see langword="True" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> kann nicht gelesen werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />. Der zu analysierende Datenstrom.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann. Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. Gibt an, ob am Anfang der Datei nach Bytereihenfolgemarken gesucht werden soll. Der Standardwert ist <see langword="True" />.</param>
      <param name="leaveOpen">
        <see langword="Boolean" />. Gibt an, ob <paramref name="stream" /> geöffnet bleiben soll, wenn das <see langword="TextFieldParser" />-Objekt geschlossen wird. Der Standardwert ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> kann nicht gelesen werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="reader">
        <see cref="T:System.IO.TextReader" />. Der zu analysierende <see cref="T:System.IO.TextReader" />-Datenstrom.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> ist <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="path">
        <see langword="String" />. Der vollständige Pfad der zu analysierenden Datei.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ist eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="path">
        <see langword="String" />. Der vollständige Pfad der zu analysierenden Datei.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann. Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ist eine leere Zeichenfolge, oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see langword="TextFieldParser" />-Klasse.</summary>
      <param name="path">
        <see langword="String" />. Der vollständige Pfad der zu analysierenden Datei.</param>
      <param name="defaultEncoding">
        <see cref="T:System.Text.Encoding" />. Die zu verwendende Zeichencodierung, wenn die Codierung nicht aus der Datei ermittelt werden kann. Der Standardwert ist <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <param name="detectEncoding">
        <see langword="Boolean" />. Gibt an, ob am Anfang der Datei nach Bytereihenfolgemarken gesucht werden soll. Der Standardwert ist <see langword="True" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> ist eine leere Zeichenfolge, oder <paramref name="defaultEncoding" /> ist <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close">
      <summary>Schließt das aktuelle <see langword="TextFieldParser" />-Objekt.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens">
      <summary>Definiert Kommentartoken. Ein Kommentartoken ist eine Zeichenfolge am Anfang einer Zeile, die angibt, dass die Zeile ein Kommentar ist und vom Parser ignoriert werden soll.</summary>
      <returns>Ein Zeichenfolgenarray, das alle Kommentartoken für das <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt enthält.</returns>
      <exception cref="T:System.ArgumentException">Ein Kommentartoken enthält Leerzeichen.</exception>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters">
      <summary>Definiert die Trennzeichen für eine Textdatei.</summary>
      <returns>Ein Zeichenfolgenarray, das alle Feldtrennzeichen für das <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt enthält.</returns>
      <exception cref="T:System.ArgumentException">Ein Trennzeichenwert wird auf ein Neue-Zeile-Zeichen, eine leere Zeichenfolge oder <see langword="Nothing" /> festgelegt.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)">
      <summary>Gibt vom <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt verwendete Ressourcen frei.</summary>
      <param name="disposing">Boolesch. Bei <see langword="True" /> werden sowohl verwaltete als auch nicht verwaltete Ressourcen, bei <see langword="False" /> nur nicht verwaltete Ressourcen freigegeben.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData">
      <summary>Gibt <see langword="True" /> zurück, wenn sich zwischen der aktuellen Cursorposition und dem Dateiende keine Zeilen befinden, die nicht leer bzw. keine Kommentare sind.</summary>
      <returns>
        <see langword="True" />, wenn keine weiteren Daten gelesen werden, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine">
      <summary>Gibt die Zeile zurück, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</summary>
      <returns>Die Zeile, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber">
      <summary>Gibt die Nummer der Zeile zurück, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</summary>
      <returns>Die Nummer der Zeile, die die letzte <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />-Ausnahme verursacht hat.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths">
      <summary>Kennzeichnet die Breite der einzelnen Spalten in der Textdatei, die analysiert wird.</summary>
      <returns>Ein Array mit ganzen Zahlen, das die Breite jeder Spalte in der Textdatei enthält, die analysiert wird.</returns>
      <exception cref="T:System.ArgumentException">Ein Wert für die Breite eines beliebigen Eintrags außer dem letzten Eintrag des Arrays ist kleiner oder gleich 0 (null).</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize">
      <summary>Ermöglicht es dem <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor dieser vom Garbage Collector wieder zugänglich gemacht wird.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes">
      <summary>Gibt beim Analysieren einer Datei mit Trennzeichen an, ob die Felder in Anführungszeichen eingeschlossen sind.</summary>
      <returns>
        <see langword="True" />, wenn Felder in Anführungszeichen eingeschlossen sind, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber">
      <summary>Gibt die aktuelle Zeilennummer oder -1 zurück, wenn im Stream keine weiteren Zeichen verfügbar sind.</summary>
      <returns>Die aktuelle Zeilennummer.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)">
      <summary>Liest die angegebene Anzahl von Zeichen, ohne die Cursorposition zu ändern.</summary>
      <param name="numberOfChars">
        <see langword="Int32" />. Anzahl der zu lesenden Zeichen. Erforderlich.</param>
      <returns>Eine Zeichenfolge, die die angegebene Anzahl gelesener Zeichen enthält.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="numberOfChars" /> ist kleiner als 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields">
      <summary>Liest alle Felder in der aktuellen Zeile, gibt sie als Zeichenfolgenarray zurück und setzt den Cursor in die nächste Zeile mit Daten.</summary>
      <returns>Ein Array von Zeichenfolgen, das Feldwerte für die aktuelle Zeile enthält.</returns>
      <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">Ein Feld kann mit dem angegebenen Format nicht analysiert werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine">
      <summary>Gibt die aktuelle Zeile als Zeichenfolge zurück und setzt den Cursor in die nächste Zeile.</summary>
      <returns>Die aktuelle Zeile aus der Datei oder dem Datenstrom.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd">
      <summary>Liest die verbleibende Textdatei und gibt sie als Zeichenfolge zurück.</summary>
      <returns>Der verbleibende Text aus der Datei oder dem Datenstrom.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])">
      <summary>Legt die Trennzeichen für den Reader auf die angegebenen Werte und den Feldtyp auf <see langword="Delimited" /> fest.</summary>
      <param name="delimiters">Array vom Typ <see langword="String" />.</param>
      <exception cref="T:System.ArgumentException">Ein Trennzeichen hat die Länge 0 (null).</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])">
      <summary>Legt die Trennzeichen für den Reader auf die angegebenen Werte fest.</summary>
      <param name="fieldWidths">Array von <see langword="Integer" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileIO.TextFieldParser.System#IDisposable#Dispose">
      <summary>Gibt vom <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />-Objekt verwendete Ressourcen frei.</summary>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType">
      <summary>Gibt an, ob die zu analysierende Datei Trennzeichen enthält oder eine feste Breite aufweist.</summary>
      <returns>Ein <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />-Wert, der angibt, ob die zu analysierende Datei Trennzeichen enthält oder eine feste Breite aufweist.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace">
      <summary>Gibt an, ob vorangestellte und nachfolgende Leerzeichen aus Feldwerten entfernt werden sollen.</summary>
      <returns>
        <see langword="True" />, wenn vorangestellte und nachfolgende Leerzeichen aus Feldwerten entfernt werden sollen, andernfalls <see langword="False" />.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UICancelOption">
      <summary>Gibt an, ob eine Ausnahme ausgelöst wird, wenn der Benutzer während eines Vorgangs auf Abbrechen klickt.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.DoNothing">
      <summary>Wenn der Benutzer auf Abbrechen klickt, wird keine Aktion durchgeführt.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UICancelOption.ThrowException">
      <summary>Wenn der Benutzer auf Abbrechen klickt, wird eine Ausnahme ausgelöst.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileIO.UIOption">
      <summary>Gibt an, welche Dialogfelder beim Kopieren, Löschen oder Verschieben von Dateien oder Verzeichnissen angezeigt werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.AllDialogs">
      <summary>Zeigt ein Statusdialogfeld und ggf. Fehlerdialogfelder an.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FileIO.UIOption.OnlyErrorDialogs">
      <summary>Zeigt nur Fehlerdialogfelder an und blendet Statusdialogfeldfelder aus. Standard.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FileSystem">
      <summary>Das <see langword="FileSystem" />-Modul enthält Prozeduren, mit denen Datei-, Verzeichnis- oder Ordner- und Systemoperationen ausgeführt werden. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als bei Verwendung des <see langword="FileSystem" />-Moduls. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)">
      <summary>Ändert das aktuelle Verzeichnis oder den aktuellen Ordner. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung als die <see langword="ChDir" />-Funktion. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
      <param name="Path">Erforderlich. Ein Zeichenfolgenausdruck, der das Verzeichnis oder den Ordner bezeichnet, das bzw. der zum neuen Verzeichnis oder Ordner wird. <paramref name="Path" /> enthält möglicherweise das Laufwerk. Wenn kein Laufwerk angegeben wird, ändert <see langword="ChDir" /> das Standardverzeichnis oder den Ordner in das aktuelle Laufwerk.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> ist leer.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Angegebenes Laufwerk ungültig oder nicht verfügbar.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)">
      <summary>Ändert das aktuelle Laufwerk.</summary>
      <param name="Drive">Erforderlich. Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt. Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht. Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</param>
      <exception cref="T:System.IO.IOException">Angegebenes Laufwerk ungültig oder nicht verfügbar.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)">
      <summary>Ändert das aktuelle Laufwerk.</summary>
      <param name="Drive">Erforderlich. Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt. Wenn Sie eine Zeichenfolge der Länge 0 (null) ("") angeben, ändert sich das aktuelle Laufwerk nicht. Wenn das <paramref name="Drive" />-Argument eine Zeichenfolge mit mehreren Zeichen ist, verwendet <see langword="ChDrive" /> nur den ersten Buchstaben.</param>
      <exception cref="T:System.IO.IOException">Angegebenes Laufwerk ungültig oder nicht verfügbar.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir">
      <summary>Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück. Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
      <returns>Eine Zeichenfolge mit dem aktuellen Pfad.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)">
      <summary>Gibt eine Zeichenfolge mit dem aktuellen Pfad zurück. Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="CurDir" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
      <param name="Drive">Dies ist optional. Ein <see langword="Char" />-Ausdruck, der ein vorhandenes Laufwerk angibt. Wenn kein Laufwerk angegeben wird oder <paramref name="Drive" /> eine Zeichenfolgen der Länge 0 (null) ("") ist, gibt <see langword="CurDir" /> den Pfad für das aktuelle Laufwerk zurück.</param>
      <returns>Eine Zeichenfolge mit dem aktuellen Pfad.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir">
      <summary>Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht. Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</summary>
      <returns>Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>Gibt eine Zeichenfolge zurück, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht. Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="Dir" />-Funktion. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</summary>
      <param name="PathName">Dies ist optional. Ein Zeichenfolgenausdruck, der einen Dateinamen, ein Verzeichnis, einen Ordnernamen oder eine Volumebezeichnung des Laufwerks angibt. Eine Zeichenfolge der Länge 0 (null) (<see langword="&quot;&quot;" />) wird zurückgegeben, wenn <paramref name="PathName" /> nicht gefunden wird.</param>
      <param name="Attributes">Dies ist optional. Enumeration oder numerischer Ausdruck, dessen Wert Dateiattribute angibt. Wenn der Wert nicht angegeben wird, gibt <see langword="Dir" /> Dateien zurück, die mit <paramref name="Pathname" /> übereinstimmen, aber keine Attribute besitzen.</param>
      <returns>Eine Zeichenfolge, die den Namen einer Datei, eines Verzeichnisses oder eines Ordners darstellt, der einem bestimmten Muster oder Dateiattribut oder der Volumebezeichnung eines Laufwerks entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)">
      <summary>Gibt den booleschen Wert <see langword="True" /> zurück, wenn das Ende einer für <see langword="Random" />- oder sequenziellen <see langword="Input" />-Zugriff geöffneten Datei erreicht wurde.</summary>
      <param name="FileNumber">Erforderlich. Ein <see langword="Integer" /> mit einer beliebigen gültigen Dateinummer.</param>
      <returns>Ein boolescher Wert <see langword="True" />, wenn das Ende einer für <see langword="Random" /> oder sequenzielle <see langword="Input" /> geöffneten Datei erreicht wurde.</returns>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)">
      <summary>Gibt eine Enumeration zurück, die den Dateimodus für Dateien darstellt, die mit der <see langword="FileOpen" />-Funktion geöffnet wurden. Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als die <see langword="FileAttr" />-Funktion. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</summary>
      <param name="FileNumber">Erforderlich. <see langword="Integer" />. Eine beliebige gültige Dateinummer.</param>
      <returns>Die folgenden Enumerationswerte geben den Dateizugriffsmodus an:
  Wert 
  Modus 
  1 
 <see langword="OpenMode.Input" /> 2 
 <see langword="OpenMode.Output" /> 4 
 <see langword="OpenMode.Random" /> 8 
 <see langword="OpenMode.Append" /> 32 
 <see langword="OpenMode.Binary" /></returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])">
      <summary>Schließt die Eingabe/Ausgabe (E/A) für eine Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wird. <see langword="My" /> ermöglicht bei Datei-E/A-Vorgängen eine höhere Produktivität und Leistung. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumbers">Optional. Parameterarray von 0 oder mehr zu schließenden Channels.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> existiert nicht.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)">
      <summary>Kopiert eine Datei Das <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="FileCopy" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</summary>
      <param name="Source">Erforderlich. Ein Zeichenfolgenausdruck, der den Namen der zu kopierenden Datei angibt. <paramref name="Source" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Quelldatei beinhalten.</param>
      <param name="Destination">Erforderlich. Ein Zeichenfolgenausdruck, der den Zieldateinamen angibt. <paramref name="Destination" /> kann das Verzeichnis oder den Ordner sowie das Laufwerk der Zieldatei beinhalten.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> oder <paramref name="Destination" /> ist ungültig oder nicht angegeben.</exception>
      <exception cref="T:System.IO.IOException">Datei ist bereits geöffnet.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)">
      <summary>Gibt einen <see langword="Date" />-Wert zurück, der Datum und Uhrzeit des Schreibvorgangs in einer Datei angibt. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileDateTime" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></summary>
      <param name="PathName">Erforderlich. Ein Zeichenfolgenausdruck, der einen Dateinamen angibt. <paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</param>
      <returns>Ein <see langword="Date" />-Wert, der Datum und Uhrzeit der Erstellung oder letzten Änderung der Datei angibt.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="PathName" /> ist ungültig oder enthält Platzhalterzeichen.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Zieldatei ist nicht vorhanden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <param name="ArrayIsDynamic">Dies ist optional. Betrifft nur das Schreiben eines Arrays. Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor erforderlich ist, der die Größe und die Begrenzungen des Arrays beschreibt.</param>
      <param name="StringIsFixedLength">Dies ist optional. Betrifft nur das Schreiben einer Zeichenfolge. Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt. Die Standardeinstellung ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <param name="StringIsFixedLength">Optional. Betrifft nur das Schreiben einer Zeichenfolge. Gibt an, ob ein 2-Byte-Deskriptor für die Zeichenfolge geschrieben werden soll, der die Länge beschreibt. Die Standardeinstellung ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)">
      <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable.  Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGetObject" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)">
      <summary>Gibt einen Wert zurück, der die Länge einer Datei in Byte angibt. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileLen" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</summary>
      <param name="PathName">Erforderlich. Ein Zeichenfolgenausdruck, der eine Datei angibt. <paramref name="PathName" /> kann das Verzeichnis bzw. den Ordner und das Laufwerk enthalten.</param>
      <returns>Die Länge einer Datei in Byte.</returns>
      <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)">
      <summary>Öffnet eine Datei für Eingabe oder Ausgabe. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileOpen" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer. Verwenden Sie die <see langword="FreeFile" />-Funktion, um die nächste verfügbare Dateinummer zu erhalten.</param>
      <param name="FileName">Erforderlich. Ein Zeichenfolgenausdruck, der einen Dateinamen angibt. Kann das Verzeichnis oder den Ordner und das Laufwerk enthalten.</param>
      <param name="Mode">Erforderlich. Eine Enumeration, die den Dateimodus angibt: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> oder <see langword="Random" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenMode" />.</param>
      <param name="Access">Dies ist optional. Eine Enumeration, die die für eine offene Datei erlaubten Operationen angibt: <see langword="Read" />, <see langword="Write" /> oder <see langword="ReadWrite" />. Wird standardmäßig auf <see langword="ReadWrite" /> festgelegt. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</param>
      <param name="Share">Dies ist optional. Eine Enumeration, die für eine offene Datei aus anderen Prozessen nicht erlaubten Operationen angibt: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> und <see langword="Lock Read Write" />. Wird standardmäßig auf <see langword="Lock Read Write" /> festgelegt. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenShare" />.</param>
      <param name="RecordLength">Optional. Eine Zahl kleiner oder gleich 32.767 (Bytes). Bei Dateien, die mit Random-Zugriff geöffnet wurden, ist dieser Wert die Datensatzlänge. Bei sequenziellen Dateien ist dieser Wert die Anzahl von gepufferten Zeichen.</param>
      <exception cref="T:System.ArgumentException">Datensatzlänge ist negativ (und nicht gleich -1).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileName" /> ist bereits geöffnet, oder <paramref name="FileName" /> ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <param name="ArrayIsDynamic">Dies ist optional. Betrifft nur das Schreiben eines Arrays. Gibt an, ob das Array als dynamisches Array behandelt werden soll und ein Arraydeskriptor für die Zeichenfolge erforderlich ist, der die Länge beschreibt.</param>
      <param name="StringIsFixedLength">Dies ist optional. Betrifft nur das Schreiben einer Zeichenfolge. Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll. Die Standardeinstellung ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <param name="StringIsFixedLength">Optional. Betrifft nur das Schreiben einer Zeichenfolge. Gibt an, ob ein 2-Byte-Zeichenfolgenlängendeskriptor in die Datei für die Zeichenfolge geschrieben werden soll. Die Standardeinstellung ist <see langword="False" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Dies ist optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="RecordNumber" /> &lt; 1 und ungleich –1.</exception>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)">
      <summary>Schreibt Daten aus einer Variablen in eine Datei auf einem Datenträger.  Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePutObject" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Gültiger Variablenname, der auf den Datenträger geschriebene Daten enthält.</param>
      <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), an der der Schreibvorgang beginnt.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)">
      <summary>Weist einer Datei, die mit der <see langword="FileOpen" />-Funktion geöffnet wurde, eine Ausgabezeilenbreite zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="RecordWidth">Erforderlich. Ein numerischer Ausdruck im Bereich 0–255 einschließlich, der angibt, wie viele Zeichen auf einer Zeile stehen, bevor eine neue Zeile beginnt. Wenn <paramref name="RecordWidth" /> gleich 0 ist, ist die Länge einer Zeile unbegrenzt. Der Standardwert von <paramref name="RecordWidth" /> ist 0.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.FreeFile">
      <summary>Gibt einen <see langword="Integer" />-Wert zurück, der die nächste zur Verwendung durch die <see langword="FileOpen" />-Funktion verfügbare Dateinummer darstellt.</summary>
      <returns>Ein ganzzahliger Wert, der die nächste für die Funktion <see langword="FileOpen" /> verfügbare Dateinummer angibt.</returns>
      <exception cref="T:System.IO.IOException">Mehr als 255 Dateien verwendet.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)">
      <summary>Gibt einen <see langword="FileAttribute" />-Wert zurück, der die Attribute einer Datei, eines Verzeichnisses oder eines Ordners darstellt. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileAttribute" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="PathName">Erforderlich. Ein Zeichenfolgenausdruck, der einen Datei-, Verzeichnis- oder Ordnernamen angibt. <paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</param>
      <returns>Eine bitweise Kombination der Enumerationswerte.</returns>
      <exception cref="T:System.IO.IOException">
        <paramref name="Pathname" /> ist ungültig oder enthält Platzhalterzeichen.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Zieldatei ist nicht vorhanden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)">
      <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist diese Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Value">Erforderlich. Eine Variable, der die aus der Datei gelesenen Werte zugewiesen werden, kann kein Array und keine Objektvariable sein.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der Zeichen aus einer im Modus <see langword="Input" /> oder <see langword="Binary" /> geöffneten Datei enthält. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="CharCount">Erforderlich. Ein beliebiger gültiger numerischer Ausdruck, der die Anzahl der zu lesenden Zeichen angibt.</param>
      <returns>Eine Zeichenfolge, die Zeichen aus einer im <see langword="Input" />- oder <see langword="Binary" />-Modus geöffneten Datei enthält. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</returns>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> existiert nicht.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCount" /> &lt; 0 oder &gt; 214.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)">
      <summary>Löscht Dateien von einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Kill" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="PathName">Erforderlich. Ein Zeichenfolgenausdruck, der einen oder mehrere Namen von zu löschenden Dateien angibt. <paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</param>
      <exception cref="T:System.IO.IOException">Zieldatei(en) geöffnet.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Zieldatei(en) nicht gefunden.</exception>
      <exception cref="T:System.Security.SecurityException">Berechtigung verweigert.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)">
      <summary>Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <returns>Liest eine einzelne Zeile aus einer offenen sequenziellen Datei und weist diese einer <see langword="String" />-Variablen zu.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Dateiende erreicht.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="FileNumber" /> existiert nicht.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)">
      <summary>Gibt einen Wert zurück, der die aktuelle Lese-/Schreibposition in einer geöffneten Datei angibt.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige <see langword="Integer" />-Dateinummer.</param>
      <returns>Die aktuelle Lese- oder Schreibposition in einer geöffneten Datei.</returns>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)">
      <summary>Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)">
      <summary>Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Record">Dies ist optional. Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)">
      <summary>Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="FromRecord">Optional. Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</param>
      <param name="ToRecord">Dies ist optional. Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)">
      <summary>Gibt die Größe in Byte einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei zurück. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Ein ganzzahliger Wert, der eine gültige Dateinummer enthält.</param>
      <returns>Gibt die Größe in Byte einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei zurück. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</returns>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)">
      <summary>Erstellt ein neues Verzeichnis. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="MkDir" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</summary>
      <param name="Path">Erforderlich. Ein Zeichenfolgenausdruck, der das zu erstellende Verzeichnis angibt. <paramref name="Path" /> enthält möglicherweise das Laufwerk. Wenn kein Laufwerk angegeben wird, erstellt <see langword="MkDir" /> das neue Verzeichnis auf dem aktuellen Laufwerk.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> ist nicht angegeben oder leer.</exception>
      <exception cref="T:System.Security.SecurityException">Berechtigung verweigert.</exception>
      <exception cref="T:System.IO.IOException">Verzeichnis ist bereits vorhanden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])">
      <summary>Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Output">Optional. 0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.
Die <paramref name="Output" />-Argumenteinstellungen lauten:
<see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.
<see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])">
      <summary>Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Output">Dies ist optional. 0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.
Die <paramref name="Output" />-Argumenteinstellungen lauten:
<see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.
<see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> existiert nicht.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)">
      <summary>Benennt eine Datenträgerdatei oder ein Verzeichnis um. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Rename" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="OldPath">Erforderlich. Ein Zeichenfolgenausdruck, der den Namen und den Speicherort der vorhandenen Datei angibt. <paramref name="OldPath" /> kann das Verzeichnis und das Laufwerk der Datei beinhalten.</param>
      <param name="NewPath">Erforderlich. Ein Zeichenfolgenausdruck, der den Namen und den Speicherort der neuen Datei angibt. <paramref name="NewPath" /> kann das Verzeichnis und das Laufwerk des Zielspeicherorts beinhalten. Der durch <paramref name="NewPath" /> angegebene Dateiname darf noch nicht vorhanden sein.</param>
      <exception cref="T:System.ArgumentException">Der Pfad ist ungültig.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Die <paramref name="OldPath" />-Datei ist nicht vorhanden.</exception>
      <exception cref="T:System.IO.IOException">Kann nicht auf anderes Gerät umbenannt werden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Reset">
      <summary>Schließt alle mit der <see langword="FileOpen" />-Funktion geöffneten Datenträgerdateien. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Reset" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)">
      <summary>Entfernt ein vorhandenes Verzeichnis. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="RmDir" />. Weitere Informationen finden Sie unter <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</summary>
      <param name="Path">Erforderlich. Ein Zeichenfolgenausdruck, der das zu entfernende Verzeichnis oder den zu entfernenden Ordner angibt. <paramref name="Path" /> kann das Laufwerk enthalten. Wenn kein Laufwerk angegeben wird, entfernt <see langword="RmDir" /> das Verzeichnis vom aktuellen Laufwerk.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Path" /> ist nicht angegeben oder leer.</exception>
      <exception cref="T:System.IO.IOException">Zielverzeichnis enthält Dateien.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Verzeichnis ist nicht vorhanden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)">
      <summary>Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</param>
      <returns>Ein <see langword="Long" />-Wert, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt oder die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei festlegt.</returns>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)">
      <summary>Gibt einen <see langword="Long" />-Wert zurück, der die aktuelle Lese-/Schreibposition innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei angibt, oder legt die Position des nächsten Lese-/Schreibvorgangs innerhalb einer mithilfe der <see langword="FileOpen" />-Funktion geöffneten Datei fest. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Ein <see langword="Integer" /> mit einer gültigen Dateinummer.</param>
      <param name="Position">Erforderlich. Eine Zahl im Bereich 1–2.147.483.647 einschließlich, die angibt, wo die nächste Lese-/Schreiboperation erfolgen soll.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)">
      <summary>Legt Attributinformationen für eine Datei fest. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="SetAttr" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="PathName">Erforderlich. Ein Zeichenfolgenausdruck, der einen Dateinamen angibt. <paramref name="PathName" /> kann auch das Verzeichnis oder den Ordner sowie das Laufwerk beinhalten.</param>
      <param name="Attributes">Erforderlich. Konstanter oder numerischer Ausdruck, dessen Summe Dateiattribute angibt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="Attribute" />-Typ ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)">
      <summary>Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</summary>
      <param name="Count">Erforderlich. Die Anzahl von Leerzeichen, die vor dem Anzeigen oder Ausgeben des nächsten Ausdrucks in einer Liste eingefügt werden sollen.</param>
      <returns>Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB">
      <summary>Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</summary>
      <returns>Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)">
      <summary>Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</summary>
      <param name="Column">Optional. Die Spaltennummer, zu der vor dem Anzeigen oder Drucken des nächsten Ausdrucks in einer Liste gewechselt wird. Wenn der Wert nicht angegeben wird, verschiebt <see langword="TAB" /> die Einfügemarke an den Anfang der nächsten Ausgabezone.</param>
      <returns>Wird mit der <see langword="Print" />-Funktion oder der <see langword="PrintLine" />-Funktion zum Positionieren der Ausgabe verwendet.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)">
      <summary>Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)">
      <summary>Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="Record">Optional. Die Nummer des einzigen zu sperrenden oder zu entsperrenden Datensatzes.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)">
      <summary>Steuert den Zugriff durch andere Prozesse auf die gesamte mithilfe der <see langword="Open" />-Funktion geöffnete Datei oder einen Teil davon. Das <see langword="My" />-Feature ermöglicht bei Datei-E/A-Vorgängen höhere Produktivität und Leistung als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
      <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
      <param name="FromRecord">Dies ist optional. Die Nummer des ersten zu sperrenden oder zu entsperrenden Datensatzes.</param>
      <param name="ToRecord">Dies ist optional. Die Nummer des letzten zu sperrenden oder zu entsperrenden Datensatzes.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])">
      <summary>Schreibt Daten in eine sequenzielle Datei. Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</summary>
      <param name="FileNumber">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</param>
      <param name="Output">Dies ist optional. Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</param>
      <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])">
      <summary>Schreibt Daten in eine sequenzielle Datei. Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</summary>
      <param name="FileNumber">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</param>
      <param name="Output">Dies ist optional. Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</param>
    </member>
    <member name="T:Microsoft.VisualBasic.Financial">
      <summary>Das <see langword="Financial" />-Modul enthält Prozeduren, mit denen finanzielle Operationen ausgeführt werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Gibt einen Wert zurück, der die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen gewählten Methode angibt.</summary>
      <param name="Cost">Erforderlich. Die Anschaffungskosten des Vermögenswerts.</param>
      <param name="Salvage">Erforderlich. Der Wert des Vermögenswerts am Ende seiner Nutzungsdauer.</param>
      <param name="Life">Erforderlich. Die Länge der Nutzungsdauer des Vermögenswerts.</param>
      <param name="Period">Erforderlich. Der Zeitraum für den die Abschreibung des Vermögenswerts berechnet wird.</param>
      <param name="Factor">Dies ist optional. Der Faktor, um den der Wert vermindert wird. Wird der Wert nicht angegeben, so wird 2 (geometrisch degressive Methode) angenommen.</param>
      <returns>Die Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum mithilfe der geometrisch degressiven Abschreibungsmethode oder einer von Ihnen gewählten Methode.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0, oder <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Gibt einen Wert zurück, der den zukünftigen Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
      <param name="Rate">Erforderlich. Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
      <param name="NPer">Erforderlich. Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
      <param name="Pmt">Erforderlich. Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
      <param name="PV">Dies ist optional. Der Barwert (oder Gesamtbetrag) einer Folge zukünftiger Zahlungen. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
      <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <see langword="DueDate.EndOfPeriod" /> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <see langword="DueDate.BegOfPeriod" />, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wird der Wert nicht angegeben, so wird <see langword="DueDate.EndOfPeriod" /> angenommen.</param>
      <returns>Der zukünftige Wert einer Annuität bei regelmäßigen, konstanten Zahlungsausgängen und einem konstanten Zinssatz.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Gibt einen Wert zurück, der die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
      <param name="Rate">Erforderlich. Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
      <param name="Per">Erforderlich. Der Zahlungszeitraum im Bereich von 1 bis <paramref name="NPer" />.</param>
      <param name="NPer">Erforderlich. Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
      <param name="PV">Erforderlich. Der Barwert oder heutige Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
      <param name="FV">Dies ist optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
      <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
      <returns>Die Zinszahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" /> &lt;= 0 oder <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)">
      <summary>Gibt einen Wert zurück, der den internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
      <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
      <param name="Guess">Dies ist optional. Ein Objekt, das einen von Ihnen geschätzten Wert enthält, der von <see langword="IRR" /> zurückgegeben wird. Wird der Wert nicht angegeben, so ist <paramref name="Guess" /> gleich 0,1 (10 Prozent).</param>
      <returns>Der interne Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen).</returns>
      <exception cref="T:System.ArgumentException">Arrayargumentwerte sind ungültig oder <paramref name="Guess" /> &lt;= –1.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)">
      <summary>Gibt einen Wert zurück, der den geänderten internen Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen) angibt.</summary>
      <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
      <param name="FinanceRate">Erforderlich. Der Zinssatz, der als Finanzierungskosten anfällt.</param>
      <param name="ReinvestRate">Erforderlich. Der Zinssatz, der bei erneuter Anlage von Kapital erzielt werden kann.</param>
      <returns>Der geänderte interne Ertragssatz für eine Folge regelmäßiger Cashflows (Aus- und Einzahlungen).</returns>
      <exception cref="T:System.ArgumentException">Rang von <paramref name="ValueArray" /> ist ungleich 1, <paramref name="FinanceRate" /> = -1 oder <paramref name="ReinvestRate" /> = -1</exception>
      <exception cref="T:System.DivideByZeroException">Division durch 0 (null) durchgeführt.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Gibt einen Wert zurück, der die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
      <param name="Rate">Erforderlich. Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
      <param name="Pmt">Erforderlich. Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
      <param name="PV">Erforderlich. Der Barwert oder heutige Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
      <param name="FV">Dies ist optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
      <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
      <returns>Die Anzahl der Zeiträume für eine Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Rate" /> = 0 und <paramref name="Pmt" /> = 0</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)">
      <summary>Gibt einen Wert zurück, der den Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz angibt.</summary>
      <param name="Rate">Erforderlich. Der Diskontsatz bezogen auf die Dauer des Zeitraums (ausgedrückt als Dezimalzahl).</param>
      <param name="ValueArray">Erforderlich. Ein Array von Werten des Typs <see langword="Double" />, die Cashflowwerte enthalten. Das Array muss mindestens einen negativen Wert (Zahlungsausgang) und einen positiven Wert (Zahlungseingang) enthalten.</param>
      <returns>Der Nettobarwert einer Investition bei regelmäßigen Cashflows (Aus- und Einzahlungen) und einem Diskontsatz.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ValueArray" /> ist gleich <see langword="Nothing" />. Bereich von <paramref name="ValueArray" /> &lt;&gt; 1 oder <paramref name="Rate" /> = –1</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Gibt einen Wert zurück, der die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz angibt.</summary>
      <param name="Rate">Erforderlich. Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
      <param name="NPer">Erforderlich. Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 × 12 (oder 48).</param>
      <param name="PV">Erforderlich. Der Barwert (oder Gesamtbetrag), den eine Folge zukünftiger Aus- oder Einzahlungen jetzt ausmacht. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
      <param name="FV">Dies ist optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder über 18 Jahre 50.000 Euro ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
      <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
      <returns>Die Zahlung für eine Annuität bei regelmäßigen konstanten Zahlungsausgängen und konstantem Zinssatz.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" /> = 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Gibt einen Wert zurück, der die Hauptzahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz angibt.</summary>
      <param name="Rate">Erforderlich. Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
      <param name="Per">Erforderlich. Der Zahlungszeitraum im Bereich von 1 bis <paramref name="NPer" />.</param>
      <param name="NPer">Erforderlich. Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
      <param name="PV">Erforderlich. Der aktuelle Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
      <param name="FV">Optional. Der zukünftige Wert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
      <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
      <returns>Die Hauptzahlung für einen bestimmten Zeitraum einer Annuität bei regelmäßigen, konstanten Zahlungen und einem konstanten Zinssatz.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Per" /> &lt;=0 oder <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)">
      <summary>Gibt einen Wert zurück, der den Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz angibt.</summary>
      <param name="Rate">Erforderlich. Der Zinssatz pro Zeitraum. Wenn Sie beispielsweise einen Kredit für ein Auto mit einem Jahreszins von 10 Prozent aufnehmen und monatliche Zahlungen vereinbart haben, beträgt der Zinssatz pro Zeitraum 0,1 dividiert durch 12 oder 0,0083.</param>
      <param name="NPer">Erforderlich. Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 x 12 (oder 48).</param>
      <param name="Pmt">Erforderlich. Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
      <param name="FV">Dies ist optional. Der Endwert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
      <param name="Due">Optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
      <returns>Der Barwert einer Annuität bei zukünftig regelmäßig und konstant zu leistenden Zahlungsausgängen und einem konstanten Zinssatz.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)">
      <summary>Gibt einen Wert zurück, der den Zinssatz einer Annuität pro Zeitraum angibt.</summary>
      <param name="NPer">Erforderlich. Die Gesamtzahl der Zahlungszeiträume für die Annuität. Wenn Sie beispielsweise monatliche Zahlungen für einen Autokredit mit vierjähriger Laufzeit vereinbart haben, beträgt die Summe der Zahlungszeiträume für den Kredit 4 * 12 (oder 48).</param>
      <param name="Pmt">Erforderlich. Die in jedem Zeitraum zu leistende Zahlung. Die Zahlungen enthalten in der Regel Kapital und Zinsen und ändern sich während der Laufzeit einer Annuität nicht.</param>
      <param name="PV">Erforderlich. Der Barwert oder heutige Wert einer Folge zukünftiger Einnahmen oder Ausgaben. Wenn Sie beispielsweise einen Kredit für einen Autokauf aufnehmen, stellt die Kredithöhe für den Kreditgeber den Barwert der von Ihnen zu leistenden monatlichen Zahlungen dar.</param>
      <param name="FV">Dies ist optional. Der Endwert oder Kassenbestand, der nach der letzten Zahlung erreicht sein soll. Der Endwert eines Kredits ist z. B. 0 Euro, da dies die Kredithöhe nach der letzten Zahlung ist. Wenn Sie jedoch für die Ausbildung Ihrer Kinder 50.000 Euro in 18 Jahren ansparen möchten, entspricht der Endwert 50.000 Euro. Wenn der Wert nicht angegeben wird, wird 0 angenommen.</param>
      <param name="Due">Dies ist optional. Ein Objekt vom Typ <see cref="T:Microsoft.VisualBasic.DueDate" />, das den Fälligkeitszeitpunkt einer Zahlung angibt. Dieses Argument muss entweder <c>DueDate.EndOfPeriod</c> sein, wenn die Zahlungen am Ende des Zahlungszeitraums fällig sind, oder <c>DueDate.BegOfPeriod</c>, wenn die Zahlungen zu Beginn des Zeitraums fällig sind. Wenn der Wert nicht angegeben wird, wird <c>DueDate.EndOfPeriod</c> angenommen.</param>
      <param name="Guess">Optional. Der von Ihnen geschätzte Wert wird von <see langword="Rate" /> zurückgegeben. Wird der Wert nicht angegeben, so ist <paramref name="Guess" /> gleich 0,1 (10 Prozent).</param>
      <returns>Der Zinssatz einer Annuität pro Zeitraum.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="NPer" /> &lt;= 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)">
      <summary>Gibt einen Wert zurück, der die arithmetische Abschreibung eines Vermögenswerts über einen bestimmten Zeitraum angibt.</summary>
      <param name="Cost">Erforderlich. Die Anschaffungskosten des Vermögenswerts.</param>
      <param name="Salvage">Erforderlich. Der Wert des Vermögenswerts am Ende seiner Nutzungsdauer.</param>
      <param name="Life">Erforderlich. Die Länge der Nutzungsdauer des Vermögenswerts.</param>
      <returns>Die arithmetische Abschreibung eines Vermögenswerts über einen einzelnen Zeitraum.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Life" /> = 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)">
      <summary>Gibt einen Wert zurück, der die Jahresabschreibung eines Vermögenswerts für einen bestimmten Zeitraum angibt.</summary>
      <param name="Cost">Erforderlich. Die Anschaffungskosten des Vermögenswerts.</param>
      <param name="Salvage">Erforderlich. Der Wert des Vermögenswerts am Ende seiner Nutzungsdauer.</param>
      <param name="Life">Erforderlich. Die Länge der Nutzungsdauer des Vermögenswerts.</param>
      <param name="Period">Erforderlich. Der Zeitraum für den die Abschreibung des Vermögenswerts berechnet wird.</param>
      <returns>Die Jahresabschreibung eines Vermögenswerts über einen bestimmten Zeitraum.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, oder <paramref name="Period" /> &lt;=0.</exception>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstDayOfWeek">
      <summary>Gibt in Aufrufen datumsbezogener Funktionen an, welcher Tag den ersten Tag der Woche darstellen soll.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Friday">
      <summary>Friday. Dieser Member entspricht der Konstante <see langword="vbFriday" /> in Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Monday">
      <summary>Monday. Dieser Member entspricht der Konstante <see langword="vbMonday" /> in Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Saturday">
      <summary>Saturday. Dieser Member entspricht der Konstante <see langword="vbSaturday" /> in Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday">
      <summary>Sunday (Standardeinstellung). Dieser Member entspricht der Konstante <see langword="vbSunday" /> in Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.System">
      <summary>Der Wochentag, der in den Systemeinstellungen als erster Wochentag festgelegt ist. Dieser Member entspricht der Konstante <see langword="vbUseSystemDayOfWeek" /> in Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Thursday">
      <summary>Thursday. Dieser Member entspricht der Konstante <see langword="vbThursday" /> in Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Tuesday">
      <summary>Tuesday. Dieser Member entspricht der Konstante <see langword="vbTuesday" /> in Visual Basic.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Wednesday">
      <summary>Wednesday. Dieser Member entspricht der Konstante <see langword="vbWednesday" /> in Visual Basic.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstWeekOfYear">
      <summary>Gibt in Aufrufen datumsbezogener Funktionen die Woche an, welche die erste Woche des Jahres darstellen soll.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFourDays">
      <summary>Die erste Woche, die im neuen Jahr mindestens vier Tage hat. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbFirstFourDays" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFullWeek">
      <summary>Die erste vollständige Woche eines Jahres. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbFirstFullWeek" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1">
      <summary>Die Woche, in der der 1. Januar liegt (Standardwert). Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbFirstJan1" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.System">
      <summary>Die in den Systemeinstellungen als erste Woche des Jahres festgelegte Woche. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbUseSystem" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.HideModuleNameAttribute">
      <summary>Wenn das <see langword="HideModuleNameAttribute" />-Attribut auf ein Modul angewendet wird, sind für den Zugriff auf die Member des Moduls nur die Zugriffsberechtigungen für das Modul erforderlich.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.HideModuleNameAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz des <see cref="T:Microsoft.VisualBasic.HideModuleNameAttribute" />-Attributs.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Information">
      <summary>Das <see langword="Information" />-Modul enthält Prozeduren, mit denen Informationen zurückgegeben, getestet oder überprüft werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Err">
      <summary>Enthält Informationen über Laufzeitfehler.</summary>
      <returns>Enthält Informationen über Laufzeitfehler.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</summary>
      <param name="VarName">Erforderlich. <see langword="Object" />-Variable.</param>
      <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob eine Variable auf ein Array verweist.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
      <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen gültigen <see langword="Date" />-Wert darstellt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
      <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck die <see cref="T:System.DBNull" />-Klasse ergibt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
      <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck ein Ausnahmetyp ist.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
      <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob einem Ausdruck kein Objekt zugewiesen ist.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
      <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck als Zahl ausgewertet werden kann.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
      <summary>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</summary>
      <param name="Expression">Erforderlich. <see langword="Object" />-Ausdruck.</param>
      <returns>Gibt einen <see langword="Boolean" />-Wert zurück, der angibt, ob ein Ausdruck einen Verweistyp ergibt.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
      <summary>Gibt den niedrigsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</summary>
      <param name="Array">Erforderlich. Array eines beliebigen Datentyps. Das Array, in dem der niedrigste mögliche Feldindex einer Dimension ermittelt werden soll.</param>
      <param name="Rank">Dies ist optional. <see langword="Integer" />. Die Dimension, für die der niedrigste mögliche Feldindex zurückgegeben wird. Verwenden Sie für die erste Dimension 1, für die zweite 2 usw. Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</param>
      <returns>
        <see langword="Integer" />. Der niedrigste Wert, den der Feldindex für die angegebene Dimension enthalten kann. <see langword="LBound" /> gibt immer 0 zurück, sobald <paramref name="Array" /> initialisiert wurde, auch wenn es keine Elemente enthält (z. B. bei einer Zeichenfolge der Länge 0). Wenn <paramref name="Array" /><see langword="Nothing" /> ist, löst <see langword="LBound" /> eine <see cref="T:System.ArgumentNullException" /> aus.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)">
      <summary>Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</summary>
      <param name="Color">Erforderlich. Eine ganze Zahl zwischen 0–15.</param>
      <returns>Gibt einen <see langword="Integer" />-Wert zurück, der den RGB-Farbcode darstellt, der der angegebenen Farbnummer entspricht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Color" /> befindet sich nicht im Bereich von 0 bis einschließlich 15.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)">
      <summary>Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</summary>
      <param name="Red">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Rotanteils der Farbe darstellt.</param>
      <param name="Green">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Grünanteils der Farbe darstellt.</param>
      <param name="Blue">Erforderlich. <see langword="Integer" /> im Bereich zwischen 0 und 255 bis einschließlich 255, der die Intensität des Blauanteils der Farbe darstellt.</param>
      <returns>Gibt einen <see langword="Integer" /> zurück, der einen RGB-Farbwert aus roten, grünen und blauen Farbanteilen darstellt.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Green" />, <paramref name="Blue" />, or <paramref name="Red" /> befindet sich außerhalb des Bereichs 0 bis 255 (einschließlich).</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)">
      <summary>Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</summary>
      <param name="VbName">Erforderlich. Eine <see langword="String" />-Variable, die einen Visual Basic-Typnamen enthält.</param>
      <returns>Gibt einen <see langword="String" />-Wert mit dem Systemnamen des Datentyps einer Variablen zurück.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.TypeName(System.Object)">
      <summary>Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</summary>
      <param name="VarName">Erforderlich. <see langword="Object" />-Variable. Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</param>
      <returns>Gibt einen <see langword="String" />-Wert zurück, der Datentypinformationen über eine Variable enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
      <summary>Gibt den höchsten verfügbaren Feldindex für die angegebene Dimension eines Arrays zurück.</summary>
      <param name="Array">Erforderlich. Array eines beliebigen Datentyps. Das Array, in dem der höchste mögliche Feldindex einer Dimension ermittelt werden soll.</param>
      <param name="Rank">Dies ist optional. <see langword="Integer" />. Die Dimension, für die der höchste mögliche Feldindex zurückgegeben wird. Verwenden Sie für die erste Dimension 1, für die zweite 2 usw. Wird <paramref name="Rank" /> ausgelassen, so wird bei 1 begonnen.</param>
      <returns>
        <see langword="Integer" />. Der höchste Wert, den der Feldindex für die angegebene Dimension enthalten kann. Wenn <paramref name="Array" /> nur über ein Element verfügt, gibt <see langword="UBound" /> 0 zurück. Wenn <paramref name="Array" /> keine Elemente enthält, z. B., wenn es eine Zeichenfolge der Länge 0 ist, gibt <see langword="UBound" /> -1 zurück.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Array" /> ist <see langword="Nothing" />.</exception>
      <exception cref="T:System.RankException">
        <paramref name="Rank" /> ist kleiner als 1 oder <paramref name="Rank" /> ist größer als der Rang von <paramref name="Array" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
      <summary>Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</summary>
      <param name="VarName">Erforderlich. <see langword="Object" />-Variable. Wenn für <see langword="Option Strict" /> der Wert <see langword="Off" /> festgelegt ist, können Sie, mit Ausnahme von Strukturen, Variablen eines beliebigen Datentyps übergeben.</param>
      <returns>Gibt einen <see langword="Integer" />-Wert mit der Datentypklassifizierung einer Variablen zurück.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)">
      <summary>Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</summary>
      <param name="UrtName">Erforderlich. <see langword="String" />-Variable mit einem Typnamen, der von der Common Language Runtime verwendet wird.</param>
      <returns>Gibt einen <see langword="String" />-Wert mit dem Visual Basic-Namen des Datentyps einer Variablen zurück.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Interaction">
      <summary>Das <see langword="Interaction" />-Modul enthält Prozeduren für die Interaktion mit Objekten, Anwendungen und Systemen.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Beep">
      <summary>Spielt einen Signalton über den Lautsprecher des Computers ab.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>Führt eine Methode für ein Objekt aus oder legt eine Eigenschaft für ein Objekt fest oder gibt diese zurück.</summary>
      <param name="ObjectRef">Erforderlich. <see langword="Object" />. Ein Zeiger auf das Objekt, das die Eigenschaft oder Methode verfügbar macht.</param>
      <param name="ProcName">Erforderlich. <see langword="String" />. Ein Zeichenfolgenausdruck, der den Namen der Eigenschaft oder der Methode für das Objekt enthält.</param>
      <param name="UseCallType">Erforderlich. Ein Enumerationsmember vom Typ <see cref="T:Microsoft.VisualBasic.CallType" />, der den Typ der aufgerufenen Prozedur darstellt. Der Wert von <see langword="CallType" /> kann <see langword="Method" />, <see langword="Get" /> oder <see langword="Set" /> sein.</param>
      <param name="Args">Dies ist optional. <see langword="ParamArray" />. Ein Parameterarray mit den Argumenten, die an die aufgerufene Eigenschaft oder Methode übergeben werden sollen.</param>
      <returns>Führt eine Methode für ein Objekt aus oder legt eine Eigenschaft für ein Objekt fest oder gibt diese zurück.</returns>
      <exception cref="T:System.ArgumentException">Ungültiger <paramref name="UseCallType" />-Wert; muss <see langword="Method" />, <see langword="Get" /> oder <see langword="Set" /> sein.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)">
      <summary>Erstellt und gibt einen Verweis auf ein COM-Objekt zurück. <see langword="CreateObject" /> kann in Visual Basic nur dann zur Erstellung von Klasseninstanzen verwendet werden, wenn diese explizit als COM-Komponenten verfügbar gemacht werden.</summary>
      <param name="ProgId">Erforderlich. <see langword="String" />. Die Programm-ID des zu erstellenden Objekts.</param>
      <param name="ServerName">Dies ist optional. <see langword="String" />. Der Name des Netzwerkservers, auf dem das Objekt erstellt wird. Wenn <paramref name="ServerName" /> eine leere Zeichenfolge ("") ist, wird der lokale Computer verwendet.</param>
      <returns>Erstellt und gibt einen Verweis auf ein COM-Objekt zurück. <see langword="CreateObject" /> kann in Visual Basic nur dann zur Erstellung von Klasseninstanzen verwendet werden, wenn diese explizit als COM-Komponenten verfügbar gemacht werden.</returns>
      <exception cref="T:System.Exception">Server ist nicht verfügbar</exception>
      <exception cref="T:System.IO.FileNotFoundException">Es ist kein Objekt des angegebenen Typs vorhanden.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)">
      <summary>Gibt eines von zwei Objekten zurück, abhängig von der Evaluierung eines Ausdrucks.</summary>
      <param name="Expression">Erforderlich. <see langword="Boolean" />. Der auszuwertende Ausdruck.</param>
      <param name="TruePart">Erforderlich. <see langword="Object" />. Wird zurückgegeben, wenn <paramref name="Expression" /> den Wert <see langword="True" /> ergibt.</param>
      <param name="FalsePart">Erforderlich. <see langword="Object" />. Wird zurückgegeben, wenn <paramref name="Expression" /> den Wert <see langword="False" /> ergibt.</param>
      <returns>Gibt eines von zwei Objekten zurück, abhängig von der Evaluierung eines Ausdrucks.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxResult">
      <summary>Gibt gemäß Rückgabe durch die <see langword="MsgBox" />-Funktion an, welche Schaltfläche in einem Meldungsfeld gedrückt wurde.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Abort">
      <summary>Die Schaltfläche Abbrechen wurde gedrückt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbAbort" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Cancel">
      <summary>Die Schaltfläche Abbrechen wurde gedrückt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbCancel" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ignore">
      <summary>Die Schaltfläche Ignorieren wurde gedrückt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbIgnore" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.No">
      <summary>Die Schaltfläche Nein wurde gedrückt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbNo" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Ok">
      <summary>Die Schaltfläche OK wurde gedrückt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbOK" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Retry">
      <summary>Die Schaltfläche Wiederholen wurde gedrückt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbRetry" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxResult.Yes">
      <summary>Die Schaltfläche Ja wurde gedrückt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbYes" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MsgBoxStyle">
      <summary>Gibt an, welche Schaltflächen beim Aufrufen der <see langword="MsgBox" />-Funktion angezeigt werden.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.AbortRetryIgnore">
      <summary>Die Schaltflächen Abbrechen, Wiederholen und Ignorieren. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbAbortRetryIgnore" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal">
      <summary>Modales Meldungsfeld der Anwendung. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbApplicationModal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Critical">
      <summary>Wichtige Meldung. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbCritical" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton1">
      <summary>Erste Schaltfläche ist Standard. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbDefaultButton1" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton2">
      <summary>Zweite Schaltfläche ist Standard. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbDefaultButton2" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.DefaultButton3">
      <summary>Dritte Schaltfläche ist Standard. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbDefaultButton3" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Exclamation">
      <summary>Warnmeldung. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbExclamation" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Information">
      <summary>Informationsmeldung. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbInformation" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxHelp">
      <summary>Hilfetext. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMsgBoxHelp" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRight">
      <summary>Rechtsbündiger Text. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMsgBoxRight" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxRtlReading">
      <summary>Von rechts nach links zu lesender Text (hebräische und arabische Systeme). Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMsgBoxRtlReading" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.MsgBoxSetForeground">
      <summary>Fenster für Vordergrundmeldungsfeld. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbMsgBoxSetForeground" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkCancel">
      <summary>Die SchaltflächenOK und Abbrechen. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbOKCancel" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.OkOnly">
      <summary>Nur die Schaltfläche OK (Standard). Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbOKOnly" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.Question">
      <summary>Warnabfrage. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbQuestion" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.RetryCancel">
      <summary>Die SchaltflächenWiederholen und Abbrechen. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbRetryCancel" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.SystemModal">
      <summary>Modales Meldungsfeld des Systems. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbSystemModal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNo">
      <summary>Die SchaltflächenJa und Nein. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbYesNo" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.MsgBoxStyle.YesNoCancel">
      <summary>SchaltflächenJa, Neinund Abbrechen. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbYesNoCancel" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.MyGroupCollectionAttribute">
      <summary>Dieses Attribut unterstützt <see langword="My.Forms" /> und <see langword="My.WebServices" /> in Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.MyGroupCollectionAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Dieses Attribut unterstützt <see langword="My.Forms" /> und <see langword="My.WebServices" /> in Visual Basic.</summary>
      <param name="typeToCollect">
        <see langword="String" />. Initialisiert die <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName" />-Eigenschaft. Der Compiler generiert Accessoreigenschaften für Klassen, die von diesem Typ abgeleitet werden.</param>
      <param name="createInstanceMethodName">
        <see langword="String" />. Initialisiert die <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod" />-Eigenschaft. Gibt die Methode in der Klasse an, die die Instanzen des Typs erstellt.</param>
      <param name="disposeInstanceMethodName">
        <see langword="String" />. Initialisiert die <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod" />-Eigenschaft. Gibt die Methode in der Klasse an, die die Instanzen des Typs löscht.</param>
      <param name="defaultInstanceAlias">
        <see langword="String" />. Initialisiert die <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias" />-Eigenschaft. Gibt den Namen der Eigenschaft an, die die Standardinstanz der Klasse zurückgibt.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod">
      <summary>Diese Eigenschaft unterstützt <see langword="My" /> in Visual Basic.</summary>
      <returns>Gibt die Methode in der Klasse an, die die Instanzen des Typs erstellt.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias">
      <summary>Diese Eigenschaft unterstützt <see langword="My" /> in Visual Basic.</summary>
      <returns>Gibt den Namen der Eigenschaft an, die die Standardinstanz der Klasse zurückgibt.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod">
      <summary>Diese Eigenschaft unterstützt <see langword="My" /> in Visual Basic.</summary>
      <returns>Gibt die Methode in der Klasse an, die die Instanzen des Typs löscht.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName">
      <summary>Diese Eigenschaft unterstützt <see langword="My" /> in Visual Basic.</summary>
      <returns>Gibt den Namen des Typs an, für den der Compiler Accessoreigenschaften generiert.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenAccess">
      <summary>Gibt an, wie eine Datei beim Aufruf von Dateizugriffsfunktionen geöffnet werden kann.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Default">
      <summary>Lese-/Schreibzugriff zulässig. Dies ist die Standardeinstellung.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Read">
      <summary>Lesezugriff zulässig.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.ReadWrite">
      <summary>Lese-/Schreibzugriff zulässig.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenAccess.Write">
      <summary>Schreibzugriff zulässig.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenMode">
      <summary>Gibt an, wie eine Datei beim Aufruf von Dateizugriffsfunktionen geöffnet werden kann.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Append">
      <summary>Die Datei wurde geöffnet, um Daten anzufügen. Standard.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Binary">
      <summary>Die Datei wurde für den binären Zugriff geöffnet.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Input">
      <summary>Die Datei wurde für den Lesezugriff geöffnet.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Output">
      <summary>Die Datei wurde für den Schreibzugriff geöffnet.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenMode.Random">
      <summary>Die Datei wurde für den zufälligen Zugriff geöffnet.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.OpenShare">
      <summary>Gibt an, wie eine Datei beim Aufruf von Dateizugriffsfunktionen geöffnet werden kann.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Default">
      <summary>
        <see langword="LockReadWrite" />. Dies ist die Standardeinstellung.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockRead">
      <summary>Andere Prozesse können die Datei nicht lesen.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockReadWrite">
      <summary>Andere Prozesse können nicht aus der Datei lesen oder in diese schreiben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.LockWrite">
      <summary>Andere Prozesse können nicht in die Datei schreiben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.OpenShare.Shared">
      <summary>Alle Prozesse können aus der Datei lesen oder in diese schreiben.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.SpcInfo">
      <summary>Diese Klasse unterstützt die Visual Basic-Funktionen <see langword="Print" /> und <see langword="PrintLine" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.SpcInfo.Count">
      <summary>Dieses Feld unterstützt die Visual Basic-Funktionen <see langword="Print" /> und <see langword="PrintLine" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Strings">
      <summary>Das <see langword="Strings" />-Modul enthält Prozeduren, mit denen Zeichenfolgenoperationen ausgeführt werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.Char)">
      <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
      <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /><see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
      <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Asc(System.String)">
      <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
      <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /><see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
      <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
      <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
      <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /><see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
      <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
      <summary>Gibt einen ganzzahligen Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
      <param name="String">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke oder <see langword="String" />-Ausdrücke. Wenn <paramref name="String" /> ein <see langword="String" />-Ausdruck ist, wird nur das erste Zeichen der Zeichenfolge als Eingabe verwendet. Wenn <paramref name="String" /><see langword="Nothing" /> ist oder keine Zeichen enthält, tritt ein <see cref="T:System.ArgumentException" />-Fehler auf.</param>
      <returns>Der Zeichencode, der einem Zeichen entspricht.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)">
      <summary>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</summary>
      <param name="CharCode">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der den <c>Codepunkt</c> oder Zeichencode für das Zeichen darstellt.</param>
      <returns>Das dem angegebenen Zeichencode zugeordnete Zeichen.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCode" /> &lt; 0 oder &gt; 255 für <see langword="Chr" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
      <summary>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</summary>
      <param name="CharCode">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der den <c>Codepunkt</c> oder Zeichencode für das Zeichen darstellt.</param>
      <returns>Das dem angegebenen Zeichencode zugeordnete Zeichen.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="CharCode" /> &lt; – 32768 oder &gt; 65535 für <see langword="ChrW" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</summary>
      <param name="Source">Erforderlich. Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</param>
      <param name="Match">Erforderlich. Die zu suchende Zeichenfolge.</param>
      <param name="Include">Optional. Ein <see langword="Boolean" />-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <paramref name="Match" /> einschließen oder ausschließen. Wenn <paramref name="Include" /><see langword="True" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> als eine untergeordnete Zeichenfolge enthält. Wenn <paramref name="Include" /><see langword="False" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> nicht als eine untergeordnete Zeichenfolge enthält.</param>
      <param name="Compare">Dies ist optional. Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt. Die Werte finden Sie unter „Einstellungen“.</param>
      <returns>Ein nullbasiertes Array, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> ist <see langword="Nothing" /> oder kein eindimensionales Array.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</summary>
      <param name="Source">Erforderlich. Eindimensionales Zeichenfolgenarray, das durchsucht werden soll.</param>
      <param name="Match">Erforderlich. Die zu suchende Zeichenfolge.</param>
      <param name="Include">Dies ist optional. Ein <see langword="Boolean" />-Wert, der angibt, ob untergeordnete Zeichenfolgen zurückgegeben werden sollen, die <paramref name="Match" /> einschließen oder ausschließen. Wenn <paramref name="Include" /><see langword="True" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> als eine untergeordnete Zeichenfolge enthält. Wenn <paramref name="Include" /><see langword="False" /> ist, gibt die <see langword="Filter" />-Funktion eine Teilmenge des Arrays zurück, die <paramref name="Match" /> nicht als eine untergeordnete Zeichenfolge enthält.</param>
      <param name="Compare">Optional. Numerischer Wert, der die Art des zu verwendenden Zeichenfolgenvergleichs angibt. Die Werte finden Sie unter „Einstellungen“.</param>
      <returns>Ein nullbasiertes Array, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Source" /> ist <see langword="Nothing" /> oder kein eindimensionales Array.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
      <summary>Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</summary>
      <param name="Expression">Erforderlich. Jeder gültige Ausdruck.</param>
      <param name="Style">Dies ist optional. Ein gültiger benannter oder benutzerdefinierter Format-<see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</summary>
      <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
      <param name="NumDigitsAfterDecimal">Dies ist optional. Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden. Der Standardwert ist –1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</param>
      <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob bei Bruchwerten eine führende Null angezeigt wird. Weitere Informationen finden Sie in den Hinweisen zu Werten.</param>
      <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob negative Werte in Klammern gesetzt werden. Weitere Informationen finden Sie in den Hinweisen zu Werten.</param>
      <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Enumeration, die angibt, ob Zahlen mithilfe des Gruppentrennzeichens gruppiert werden, das in den regionalen Einstellungen des Computers definiert ist. Weitere Informationen finden Sie in den Hinweisen zu Werten.</param>
      <returns>Ein mit dem in der Systemsteuerung festgelegten Währungssymbol als Währungsbetrag formatierter Ausdruck.</returns>
      <exception cref="T:System.ArgumentException">Anzahl der Stellen nach dem Dezimalzeichen ist größer als 99.</exception>
      <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
      <summary>Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</summary>
      <param name="Expression">Erforderlich. Der zu formatierende <see langword="Date" />-Ausdruck.</param>
      <param name="NamedFormat">Dies ist optional. Numerischer Wert, der das verwendete Datum-/Zeitformat angibt. Wird der Wert nicht angegeben, so wird <see langword="DateFormat.GeneralDate" /> verwendet.</param>
      <returns>Ein Zeichenfolgenausdruck, der einen Datums-/Zeitwert darstellt.</returns>
      <exception cref="T:System.ArgumentException">Die Einstellung <paramref name="NamedFormat" /> ist nicht gültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Gibt einen als Zahl formatierten Ausdruck zurück.</summary>
      <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
      <param name="NumDigitsAfterDecimal">Dies ist optional. Numerischer Wert, der angibt, wie viele Stellen hinter dem Dezimaltrennzeichen angezeigt werden. Der Standardwert ist –1 und gibt an, dass die regionalen Einstellungen des Computers verwendet werden.</param>
      <param name="IncludeLeadingDigit">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob bei Bruchwerten eine führende 0 angezeigt wird. Die Werte finden Sie unter „Einstellungen“.</param>
      <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden. Die Werte finden Sie unter „Einstellungen“.</param>
      <param name="GroupDigits">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
      <returns>Ein als Zahl formatierter Ausdruck.</returns>
      <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</summary>
      <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
      <param name="NumDigitsAfterDecimal">Optional. Numerischer Wert, der angibt, wie viele Stellen rechts neben dem Dezimaltrennzeichen angezeigt werden. Der Standardwert ist –1, was darauf hinweist, dass die Einstellungen des Gebietsschemas verwendet werden.</param>
      <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob bei Dezimalzahlen eine führende Null angezeigt werden soll. Die Werte finden Sie unter „Einstellungen“.</param>
      <param name="UseParensForNegativeNumbers">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
      <param name="GroupDigits">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
      <returns>Ein als Prozentangabe (d. h. multipliziert mit 100) und mit einem abschließenden %-Zeichen formatierter Ausdruck.</returns>
      <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
      <summary>Gibt einen <see langword="Char" />-Wert zurück, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</summary>
      <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
      <param name="Index">Erforderlich. <see langword="Integer" />-Ausdruck. Der (1-basierte) Index des Zeichens in <paramref name="str" />, der zurückgegeben werden soll.</param>
      <returns>
        <see langword="Char" />-Wert, der das Zeichen am angegebenen Index in der angegebenen Zeichenfolge darstellt.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> ist <see langword="Nothing" />, <paramref name="Index" /> &lt; 1 oder <paramref name="Index" /> ist größer als der Index des letzten Zeichens von <paramref name="str" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</summary>
      <param name="Start">Dies ist optional. Numerischer Ausdruck, der die Anfangsposition für jede Suche festlegt. Wenn dieser ausgelassen wird, beginnt die Suche an der ersten Zeichenposition. Der Anfangsindex ist 1-basiert.</param>
      <param name="String1">Erforderlich. <see langword="String" />-Ausdruck, der durchsucht wird.</param>
      <param name="String2">Erforderlich. Gesuchter <see langword="String" />-Ausdruck.</param>
      <param name="Compare">Dies ist optional. Gibt den Typ des Zeichenfolgenvergleichs an. Wenn <paramref name="Compare" /> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</param>
      <returns>If 
 Rückgabewert von InStr 

<paramref name="String1" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />. 0 

<paramref name="String2" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />.
<paramref name="start" /><paramref name="String2" /> wird nicht gefunden. 
 0 

<paramref name="String2" /> wurde in <paramref name="String1" /> gefunden. Position, an der die gefundene Zeichenfolge beginnt 

<paramref name="Start" /> &gt; Länge von <paramref name="String1" /> 0 

.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt; 1.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</summary>
      <param name="String1">Erforderlich. <see langword="String" />-Ausdruck, der durchsucht wird.</param>
      <param name="String2">Erforderlich. Gesuchter <see langword="String" />-Ausdruck.</param>
      <param name="Compare">Optional. Gibt den Typ des Zeichenfolgenvergleichs an. Wenn <paramref name="Compare" /> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</param>
      <returns>If 
 Rückgabewert von InStr 

<paramref name="String1" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />. 0 

<paramref name="String2" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />. Die Startposition für die Suche, mit Standard an der ersten Zeichenposition.  
  

<paramref name="String2" /> wird nicht gefunden. 
 0 

<paramref name="String2" /> wurde in <paramref name="String1" /> gefunden. Position, an der die gefundene Zeichenfolge beginnt 



.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt die Position des ersten Vorkommens einer Zeichenfolge innerhalb einer anderen Zeichenfolge von rechts nach links gesehen zurück.</summary>
      <param name="StringCheck">Erforderlich. Der gesuchte Zeichenfolgenausdruck.</param>
      <param name="StringMatch">Erforderlich. Der gesuchte Zeichenfolgenausdruck.</param>
      <param name="Start">Optional. Numerischer Ausdruck, der die 1-basierte Anfangsposition für jede Suche festlegt, beginnend auf der linken Seite der Zeichenfolge. Wenn <paramref name="Start" /> weggelassen wird, wird –1 verwendet, d. h., dass die Suche an der letzten Zeichenposition beginnt. Die Suche wird dann von rechts nach links fortgesetzt.</param>
      <param name="Compare">Dies ist optional. Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird. Wenn dieser ausgelassen wird, wird ein binärer Vergleich durchgeführt. Werte finden Sie im Abschnitt "Einstellungen".</param>
      <returns>If 
 InStrRev gibt Folgendes zurück 

<paramref name="StringCheck" /> ist eine Zeichenfolge mit der Länge 0 (null) 
 0 

<paramref name="StringMatch" /> ist eine Zeichenfolge mit der Länge 0 (null) 

<paramref name="Start" /><paramref name="StringMatch" /> wird nicht gefunden. 
 0 

<paramref name="StringMatch" /> wurde in <paramref name="StringCheck" /> gefunden. Position, an der die erste Übereinstimmung gefunden wird, beginnend mit der rechten Seite der Zeichenfolge.  
  

<paramref name="Start" /> ist größer als die Länge von <paramref name="StringMatch" />. 0 

.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> = 0 oder <paramref name="Start" /> &lt; –1.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
      <summary>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</summary>
      <param name="SourceArray">Erforderlich. Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</param>
      <param name="Delimiter">Optional. Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden. Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet. Wenn <paramref name="Delimiter" /> eine leere Zeichenfolge ("") oder <see langword="Nothing" /> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</param>
      <returns>Eine Zeichenfolge, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> ist nicht eindimensional.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
      <summary>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</summary>
      <param name="SourceArray">Erforderlich. Ein eindimensionales Array, das untergeordnete Zeichenfolgen enthält, die verknüpft werden sollen.</param>
      <param name="Delimiter">Optional. Eine beliebige Zeichenfolge, mit der die untergeordneten Zeichenfolgen in der zurückgegebenen Zeichenfolge getrennt werden. Wenn diese ausgelassen wird, wird das Leerzeichen (" ") verwendet. Wenn <paramref name="Delimiter" /> eine leere Zeichenfolge ("") oder <see langword="Nothing" /> ist, werden alle Elemente der Liste ohne Trennzeichen verkettet.</param>
      <returns>Eine Zeichenfolge, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="SourceArray" /> ist nicht eindimensional.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
      <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</summary>
      <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
      <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das in Kleinbuchstaben konvertiert wurde.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
      <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</summary>
      <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
      <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das in Kleinbuchstaben konvertiert wurde.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
      <summary>Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</summary>
      <param name="str">Erforderlich. <see langword="String" />-Ausdruck, von dem die äußersten linken Zeichen zurückgegeben werden.</param>
      <param name="Length">Erforderlich. <see langword="Integer" />-Ausdruck. Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen. Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben. Wenn der Wert größer oder gleich der Anzahl von Zeichen in <paramref name="str" /> ist, wird die ganze Zeichenfolge zurückgegeben.</param>
      <returns>Eine Zeichenfolge, die eine angegebene Anzahl Zeichen von der linken Seite einer Zeichenfolge enthält.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Byte)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Char)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Double)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int16)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int32)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Int64)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Object)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.SByte)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.Single)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.String)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)">
      <summary>Gibt eine ganze Zahl zurück, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</summary>
      <param name="Expression">Jeder gültige <see langword="String" />-Ausdruck oder -Variablenname. Wenn <paramref name="Expression" /> vom Typ <see langword="Object" /> ist, gibt die <see langword="Len" />-Funktion die Größe zurück, wie sie von der <see langword="FilePut" />-Funktion in die Datei geschrieben wird.</param>
      <returns>Eine ganze Zahl, die entweder die Anzahl der Zeichen in einer Zeichenfolge oder die zum Speichern einer Variablen erforderliche nominale Byteanzahl enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
      <summary>Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</summary>
      <param name="Source">Erforderlich. <see langword="String" />-Ausdruck. Name der Zeichenfolgenvariablen.</param>
      <param name="Length">Erforderlich. <see langword="Integer" />-Ausdruck. Länge der zurückgegebenen Zeichenfolge.</param>
      <returns>Eine links ausgerichtete Zeichenfolge, die die an die angegebene Länge angepasste angegebene Zeichenfolge enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
      <summary>Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</summary>
      <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
      <summary>Gibt eine Zeichenfolge zurück, die alle Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</summary>
      <param name="str">Erforderlich. <see langword="String" />-Ausdruck, aus dem Zeichen zurückgegeben werden.</param>
      <param name="Start">Erforderlich. <see langword="Integer" />-Ausdruck. Anfangsposition der zurückzugebenden Zeichen. Wenn <paramref name="Start" /> größer als die Anzahl der Zeichen in <paramref name="str" /> ist, gibt die <see langword="Mid" />-Funktion eine Zeichenfolge ("") der Länge 0 zurück. <paramref name="Start" /> ist 1-basiert.</param>
      <returns>Eine Zeichenfolge, die aus allen Zeichen beginnend bei der angegebenen Position in der Zeichenfolge besteht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 oder <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
      <summary>Gibt eine Zeichenfolge zurück, die eine angegebene Anzahl von Zeichen enthält, beginnend bei einer angegebenen Position in einer Zeichenfolge.</summary>
      <param name="str">Erforderlich. <see langword="String" />-Ausdruck, aus dem Zeichen zurückgegeben werden.</param>
      <param name="Start">Erforderlich. <see langword="Integer" />-Ausdruck. Anfangsposition der zurückzugebenden Zeichen. Wenn <paramref name="Start" /> größer als die Anzahl der Zeichen in <paramref name="str" /> ist, gibt die <see langword="Mid" />-Funktion eine Zeichenfolge ("") der Länge 0 zurück. <paramref name="Start" /> ist 1-basiert.</param>
      <param name="Length">Dies ist optional. <see langword="Integer" />-Ausdruck. Die Anzahl der zurückzugebenden Zeichen. Wenn der Ausdruck ausgelassen wird oder weniger als <paramref name="Length" /> Zeichen im Text enthalten sind (einschließlich des Zeichens an Position <paramref name="Start" />), werden alle Zeichen von der Anfangs- bis zur Endposition der Zeichenfolge zurückgegeben.</param>
      <returns>Eine Zeichenfolge, die aus der angegebenen Anzahl von Zeichen besteht, beginnend bei der angegebenen Position in der Zeichenfolge.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Start" /> &lt;= 0 oder <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt eine Zeichenfolge zurück, in der eine bestimmte untergeordnete Zeichenfolge so oft wie angegeben durch eine andere Zeichenfolge ersetzt wurde.</summary>
      <param name="Expression">Erforderlich. Zeichenfolgenausdruck mit der zu ersetzenden untergeordneten Zeichenfolge.</param>
      <param name="Find">Erforderlich. Die gesuchte untergeordnete Zeichenfolge.</param>
      <param name="Replacement">Erforderlich. Untergeordnete Ersetzungszeichenfolge.</param>
      <param name="Start">Dies ist optional. Position in <paramref name="Expression" />, die eine für die Ersetzung verwendete Teilzeichenfolge startet. Der Rückgabewert von <see langword="Replace" /> ist eine Zeichenfolge, die bei <paramref name="Start" /> beginnt, mit entsprechenden Ersetzungen. Wenn der Wert nicht angegeben wird, wird 1 angenommen.</param>
      <param name="Count">Dies ist optional. Die Anzahl der durchzuführenden Ersetzungen für untergeordnete Zeichenfolgen. Wenn der Wert nicht angegeben wird, ist der Standardwert –1, d. h., dass alle möglichen Ersetzungen vorgenommen werden.</param>
      <param name="Compare">Dies ist optional. Numerischer Wert, der den Typ des Vergleichs angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird. Werte finden Sie im Abschnitt "Einstellungen".</param>
      <returns>
        <see langword="Replace" /> gibt die folgenden Werte zurück.
 If 
 Replace gibt Folgendes zurück 
<paramref name="Find" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />. Kopie von <paramref name="Expression" /><paramref name="Replace" /> ist eine Zeichenfolge mit der Länge 0 (null) 
 Kopie von <paramref name="Expression" /> ohne Vorkommen von <paramref name="Find" /><paramref name="Expression" /> ist eine Zeichenfolge mit der Länge 0 (null) oder <see langword="Nothing" />, oder <paramref name="Start" /> ist größer als die Länge von <paramref name="Expression" /><see langword="Nothing" /><paramref name="Count" /> ist 0 
 Kopie von <paramref name="Expression" /></returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> &lt; –1 oder <paramref name="Start" /> &lt;= 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
      <summary>Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</summary>
      <param name="str">Erforderlich. <see langword="String" />-Ausdruck, von dem die äußersten rechten Zeichen zurückgegeben werden.</param>
      <param name="Length">Erforderlich. <see langword="Integer" />. Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben werden sollen. Wenn der Wert 0 ist, wird eine Zeichenfolge ("") der Länge 0 (null) zurückgegeben. Wenn der Wert größer oder gleich der Anzahl von Zeichen in <paramref name="str" /> ist, wird die ganze Zeichenfolge zurückgegeben.</param>
      <returns>Eine Zeichenfolge mit einer angegebenen Anzahl von Zeichen von der rechten Seite einer Zeichenfolge.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Length" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
      <summary>Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</summary>
      <param name="Source">Erforderlich. <see langword="String" />-Ausdruck. Name der Zeichenfolgenvariablen.</param>
      <param name="Length">Erforderlich. <see langword="Integer" />-Ausdruck. Länge der zurückgegebenen Zeichenfolge.</param>
      <returns>Eine rechts ausgerichtete Zeichenfolge, die die an die angegebene Länge angepasste angegebene Zeichenfolge enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
      <summary>Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</summary>
      <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
      <summary>Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</summary>
      <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Anzahl der gewünschten Leerzeichen in der Zeichenfolge.</param>
      <returns>Eine Zeichenfolge mit der angegebenen Anzahl Leerzeichen.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> &lt; 0.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt ein nullbasiertes, eindimensionales Array zurück, das eine angegebene Anzahl von Teilzeichenfolgen enthält.</summary>
      <param name="Expression">Erforderlich. <see langword="String" />-Ausdruck mit untergeordneten Zeichenfolgen und Trennzeichen.</param>
      <param name="Delimiter">Optional. Jedes einzelne Zeichen, mit dem Grenzen von untergeordneten Zeichenfolgen gekennzeichnet werden. Wenn <paramref name="Delimiter" /> nicht angegeben wird, wird als Trennzeichen das Leerzeichen (" ") angenommen.</param>
      <param name="Limit">Dies ist optional. Die maximale Anzahl von untergeordneten Zeichenfolgen, in die die Eingabezeichenfolge geteilt werden soll. Der Standardwert –1 gibt an, dass die Eingabezeichenfolge an jedem Vorkommen der <paramref name="Delimiter" />-Zeichenfolge getrennt werden soll.</param>
      <param name="Compare">Optional. Numerischer Wert, der den Vergleich angibt, der für das Auswerten von untergeordneten Zeichenfolgen verwendet wird. Die Werte finden Sie unter „Einstellungen“.</param>
      <returns>
        <see langword="String" /> -Array. Wenn <paramref name="Expression" /> eine Zeichenfolge ("") der Länge 0 (null) ist, gibt <see langword="Split" /> ein Array mit einem Element zurück, das eine Zeichenfolge der Länge 0 (null) enthält. Wenn <paramref name="Delimiter" /> eine Zeichenfolge der Länge 0 (null) ist oder nicht in <paramref name="Expression" /> vorkommt, gibt <see langword="Split" /> ein Array mit einem Element zurück, das die gesamte <paramref name="Expression" />-Zeichenfolge enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>Gibt abhängig vom Ergebnis eines Zeichenfolgenvergleichs den Wert -1, 0 oder 1 zurück.</summary>
      <param name="String1">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
      <param name="String2">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
      <param name="Compare">Dies ist optional. Gibt den Typ des Zeichenfolgenvergleichs an. Wenn <paramref name="Compare" /> ausgelassen wird, bestimmt die <see langword="Option Compare" />-Einstellung den Typ des Vergleichs.</param>
      <returns>Die <see langword="StrComp" />-Funktion besitzt die folgenden Rückgabewerte.
  If 
  Rückgabewert von StrComp 
 <paramref name="String1" /> Sortierung vor <paramref name="String2" /> -1 
 <paramref name="String1" /> ist gleich <paramref name="String2" />. 0 
 <paramref name="String1" /> Sortierung nach <paramref name="String2" /> 1</returns>
      <exception cref="T:System.ArgumentException">Der <paramref name="Compare" />-Wert ist ungültig.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)">
      <summary>Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</summary>
      <param name="str">Erforderlich. Der zu konvertierende <see langword="String" />-Ausdruck.</param>
      <param name="Conversion">Erforderlich. <see cref="T:Microsoft.VisualBasic.VbStrConv" />-Member. Der Enumerationswert, der den Typ der auszuführenden Konvertierung angibt.</param>
      <param name="LocaleID">Optional. Der <see langword="LocaleID" />-Wert, wenn dieser sich vom <see langword="LocaleID" />-Wert des Systems unterscheidet. (Der <see langword="LocaleID" />-Wert des Systems ist der Standardwert.)</param>
      <returns>Eine wie angegeben konvertierte Zeichenfolge.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="LocaleID" /> nicht unterstützt, <paramref name="Conversion" /> &lt; 0 oder &gt; 2048, oder nicht unterstützte Konvertierung für das angegebene Gebietsschema.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
      <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
      <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Länge der zurückzugebenden Zeichenfolge.</param>
      <param name="Character">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke. Es wird nur das erste Zeichen des Ausdrucks verwendet. Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</param>
      <returns>Eine Zeichenfolge oder ein Objekt, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> ist <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
      <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
      <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Länge der zurückzugebenden Zeichenfolge.</param>
      <param name="Character">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke. Es wird nur das erste Zeichen des Ausdrucks verwendet. Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</param>
      <returns>Eine Zeichenfolge oder ein Objekt, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> ist <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
      <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
      <param name="Number">Erforderlich. <see langword="Integer" />-Ausdruck. Die Länge der zurückzugebenden Zeichenfolge.</param>
      <param name="Character">Erforderlich. Alle gültigen <see langword="Char" />-Ausdrücke, <see langword="String" />-Ausdrücke oder <see langword="Object" />-Ausdrücke. Es wird nur das erste Zeichen des Ausdrucks verwendet. Wenn das Zeichen vom Typ <see langword="Object" /> ist, muss es entweder einen <see langword="Char" />-Wert oder einen <see langword="String" />-Wert enthalten.</param>
      <returns>Eine Zeichenfolge oder ein Objekt, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="Number" /> ist kleiner als 0 (null), oder der <paramref name="Character" />-Typ ist nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Character" /> ist <see langword="Nothing" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
      <summary>Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</summary>
      <param name="Expression">Erforderlich. Zeichenfolgenausdruck, dessen Zeichen umgekehrt werden müssen. Wenn <paramref name="Expression" /> eine Zeichenfolge der Länge 0 ("") ist, wird eine Zeichenfolge der Länge 0 (null) zurückgegeben.</param>
      <returns>Eine Zeichenfolge, in der die Reihenfolge der Zeichen in einer angegebenen Zeichenfolge umgekehrt wurde.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
      <summary>Gibt eine Zeichenfolge zurück, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</summary>
      <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
      <returns>Eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen (<see langword="LTrim" />), ohne nachstehende Leerzeichen (<see langword="RTrim" />) bzw. ohne führende und nachstehende Leerzeichen (<see langword="Trim" />) enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
      <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</summary>
      <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
      <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das die angegebene Zeichenfolge in Großbuchstaben konvertiert enthält.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
      <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</summary>
      <param name="Value">Erforderlich. Alle gültigen <see langword="String" />-Ausdrücke oder <see langword="Char" />-Ausdrücke.</param>
      <returns>Eine Zeichenfolge oder ein Zeichen, die bzw. das die angegebene Zeichenfolge in Großbuchstaben konvertiert enthält.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.TabInfo">
      <summary>Diese Klasse unterstützt die Visual Basic-Funktionen <see langword="Print" /> und <see langword="PrintLine" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TabInfo.Column">
      <summary>Dieses Feld unterstützt die Visual Basic-Funktionen <see langword="Print" /> und <see langword="PrintLine" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.TriState">
      <summary>Gibt einen booleschen Wert an oder gibt an, ob beim Aufrufen von Zahlenformatierungsfunktionen der Standardwert verwendet werden soll.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.False">
      <summary>False. Der numerische Wert dieses Members ist 0.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.True">
      <summary>True. Der numerische Wert dieses Members ist –1.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.UseDefault">
      <summary>Standardeinstellung. Der numerische Wert dieses Members ist –2.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VariantType">
      <summary>Gibt den Typ eines Variant-Objekts an und wird von der <see langword="VarType" />-Funktion zurückgegeben.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Array">
      <summary>Array. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbArray" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Boolean">
      <summary>
        <see langword="Boolean" />. (<see langword="True" /> oder <see langword="False" />.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbBoolean" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Byte">
      <summary>
        <see langword="Byte" />. (0 bis 255.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbByte" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Char">
      <summary>
        <see langword="Char" />. (0 bis 65535.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbChar" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Currency">
      <summary>Währung. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbCurrency" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.DataObject">
      <summary>DataObject.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Date">
      <summary>
        <see langword="Date" />. 0:00:00, 1. Januar 0001 bis 23:59:59, 31. Dezember 9999. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbDate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Decimal">
      <summary>
        <see langword="Decimal" />. (0 bis +/–79.228.162.514.264.337.593.543.950.335 ohne Dezimaltrennzeichen; 0 bis +/–7,9228162514264337593543950335 mit 28 Stellen rechts vom Dezimalkomma; die kleinste Zahl ungleich 0 lautet +/–0,0000000000000000000000000001.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbDecimal" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Double">
      <summary>
        <see langword="Double" />. (–1,79769313486231E+308 bis –4,94065645841247E–324 für negative Werte; 4,94065645841247E–324 bis 1,79769313486231E+308 für positive Werte.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbDouble" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Empty">
      <summary>NULL-Verweis. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbEmpty" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Error">
      <summary>
        <see cref="T:System.Exception" />
      </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Integer">
      <summary>
        <see langword="Integer" />. (–2.147.483.648 bis 2.147.483.647.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbInteger" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Long">
      <summary>
        <see langword="Long" />. (–9.223.372.036.854.775.808 bis 9.223.372.036.854.775.807.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbLong" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Null">
      <summary>Nullobjekt. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbNull" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Object">
      <summary>In einer Variablen vom Typ <see langword="Object" /> kann jeder beliebige Typ gespeichert werden. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbObject" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Short">
      <summary>
        <see langword="Short" />. (–32.768 bis 32.767)</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Single">
      <summary>
        <see langword="Single" />. (-3,402823E+38 bis -1,401298E-45 für negative Werte; 1,401298E-45 bis 3,402823E+38 für positive Werte.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbSingle" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.String">
      <summary>
        <see langword="String" />. (0 bis ca. 2 Milliarden Unicode-Zeichen.) Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbString" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.UserDefinedType">
      <summary>Benutzerdefinierter Typ. Jeder Member in der Struktur hat einen Wertbereich, der von seinem Datentyp bestimmt wird. Dieser ist unabhängig von den Wertbereichen der anderen Member. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbUserDefinedType" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Variant">
      <summary>
        <see langword="Variant" />. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbVariant" />.</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedArrayAttribute">
      <summary>Gibt an, dass ein Array in einer Struktur oder nicht lokalen Variable als Array fester Länge behandelt werden soll.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32)">
      <summary>Initialisiert den Wert der <see langword="Bounds" />-Eigenschaft.</summary>
      <param name="UpperBound1">Initialisiert den Wert des oberen Feldes, der die Größe der ersten Dimension des Arrays darstellt.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedArrayAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initialisiert den Wert der <see langword="Bounds" />-Eigenschaft.</summary>
      <param name="UpperBound1">Initialisiert den Wert des oberen Feldes, der die Größe der ersten Dimension des Arrays darstellt.</param>
      <param name="UpperBound2">Initialisiert den Wert des oberen Feldes, der die Größe der zweiten Dimension des Arrays darstellt.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Bounds">
      <summary>Gibt die Arraygrenzen zurück.</summary>
      <returns>Enthält ein Ganzzahlarray, das die Grenzen des Arrays darstellt.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedArrayAttribute.Length">
      <summary>Gibt die Größe des Arrays zurück.</summary>
      <returns>Enthält eine ganze Zahl, die die Anzahl der Elemente in dem Array darstellt.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBFixedStringAttribute">
      <summary>Gibt an, dass eine Zeichenfolge behandelt werden soll, als ob sie eine feste Länge hätte.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBFixedStringAttribute.#ctor(System.Int32)">
      <summary>Initialisiert den Wert des <see langword="SizeConst" />-Feldes.</summary>
      <param name="Length">Die Länge der Zeichenfolge fester Länge.</param>
    </member>
    <member name="P:Microsoft.VisualBasic.VBFixedStringAttribute.Length">
      <summary>Ruft die Länge der Zeichenfolge ab.</summary>
      <returns>Die Länge der Zeichenfolge.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBMath">
      <summary>Das <see langword="VbMath" />-Modul enthält Prozeduren, mit denen mathematische Operationen ausgeführt werden.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize">
      <summary>Initialisiert den Zufallszahlengenerator.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)">
      <summary>Initialisiert den Zufallszahlengenerator.</summary>
      <param name="Number">Optional. Ein <see langword="Object" /> oder ein gültiger numerischer Ausdruck.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd">
      <summary>Gibt eine Zufallszahl des Typs <see langword="Single" /> zurück.</summary>
      <returns>Die nächste Zufallszahl in der Folge.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)">
      <summary>Gibt eine Zufallszahl des Typs <see langword="Single" /> zurück.</summary>
      <param name="Number">Dies ist optional. Ein <see langword="Single" />-Wert oder ein gültiger <see langword="Single" />-Ausdruck.</param>
      <returns>Wenn die Zahl kleiner als 0 ist, generiert Rnd jedes Mal dieselbe Zahl und verwendet <paramref name="Number" /> als Startwert. Ist die Zahl größer als 0, generiert Rnd die nächste Zufallszahl in der Folge. Wenn die Zahl gleich 0 ist, generiert Rnd die zuletzt generierte Zahl. Wird die Zahl nicht angegeben, generiert Rnd die nächste Zufallszahl in der Folge.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VbStrConv">
      <summary>Gibt an, welche Art der Konvertierung beim Aufruf der <see langword="StrConv" />-Funktion ausgeführt werden soll.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Hiragana">
      <summary>Konvertiert Katakana-Zeichen in der Zeichenfolge in Hiragana-Zeichen. Gilt nur für das japanische Gebietsschema. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbHiragana" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Katakana">
      <summary>Konvertiert Hiragana-Zeichen in der Zeichenfolge in Katakana-Zeichen. Gilt nur für das japanische Gebietsschema. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbKatakana" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.LinguisticCasing">
      <summary>Konvertiert die Zeichenfolge von einer Schreibweise gemäß Dateisystemregeln in eine Schreibweise gemäß linguistischer Regeln. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbLinguisticCasing" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Lowercase">
      <summary>Konvertiert die Zeichenfolge in Kleinbuchstaben. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbLowerCase" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Narrow">
      <summary>Konvertiert Doppelbytezeichen in der Zeichenfolge in Einzelbytezeichen. Gilt für asiatische Gebietsschemas. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbNarrow" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.None">
      <summary>Führt keine Konvertierung aus.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.ProperCase">
      <summary>Konvertiert den ersten Buchstaben jedes Worts in der Zeichenfolge in einen Großbuchstaben. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbProperCase" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.SimplifiedChinese">
      <summary>Konvertiert die Zeichenfolge in vereinfachte chinesische Zeichen. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbSimplifiedChinese" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.TraditionalChinese">
      <summary>Konvertiert die Zeichenfolge in traditionelle chinesische Zeichen. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbTraditionalChinese" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Uppercase">
      <summary>Konvertiert die Zeichenfolge in Großbuchstaben. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbUpperCase" />.</summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VbStrConv.Wide">
      <summary>Konvertiert Einzelbytezeichen in der Zeichenfolge in Doppelbytezeichen. Gilt für asiatische Gebietsschemas. Dieser Member ist identisch mit der Visual Basic-Konstanten <see langword="vbWide" />. Die Konvertierung kann die Normalisierungsform „C“ verwenden, auch wenn ein Eingabezeichen bereits die volle Breite aufweist. Die Zeichenfolge „は“, die bereits die volle Breite aufweist, wird beispielsweise zu „ば“ normalisiert. Weitere Informationen finden Sie unter Unicode normalization forms (Unicode-Normalisierungsformen).</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.AppDomain">
      <summary>애플리케이션이 실행되는 격리된 환경인 애플리케이션 도메인을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.AppDomain.AppendPrivatePath(System.String)">
      <summary>지정된 디렉터리 이름을 전용 경로 목록에 추가합니다.</summary>
      <param name="path">프라이빗 경로에 추가되는 디렉터리 이름입니다.</param>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.ApplyPolicy(System.String)">
      <summary>정책이 적용된 후 어셈블리 표시 이름을 반환합니다.</summary>
      <param name="assemblyName">
        <see cref="P:System.Reflection.Assembly.FullName" /> 속성에서 제공하는 형식의 어셈블리 표시 이름입니다.</param>
      <returns>정책이 적용된 후의 어셈블리 표시 이름이 포함된 문자열입니다.</returns>
    </member>
    <member name="E:System.AppDomain.AssemblyLoad">
      <summary>어셈블리가 로드될 때 발생합니다.</summary>
    </member>
    <member name="E:System.AppDomain.AssemblyResolve">
      <summary>어셈블리를 확인하지 못할 경우 발생합니다.</summary>
    </member>
    <member name="P:System.AppDomain.BaseDirectory">
      <summary>어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리를 가져옵니다.</summary>
      <returns>어셈블리 확인자에서 어셈블리를 조사하는 데 사용하는 기본 디렉터리입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.ClearPrivatePath">
      <summary>프라이빗 어셈블리의 위치를 지정하는 경로를 빈 문자열(&amp;quot;&amp;quot;)로 다시 설정합니다.</summary>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.ClearShadowCopyPath">
      <summary>섀도 복사된 어셈블리를 포함하는 디렉터리 목록을 빈 문자열("")로 다시 설정합니다.</summary>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.CreateDomain(System.String)">
      <summary>지정한 이름을 가진 새 애플리케이션 도메인을 만듭니다.</summary>
      <param name="friendlyName">도메인의 이름입니다.</param>
      <returns>새로 만든 애플리케이션 도메인입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core에서 지원되지 않는 메서드입니다.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String)">
      <summary>지정된 어셈블리에 정의되어 있는 지정된 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <returns>
        <paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다. 실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">일치하는 public 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.NullReferenceException">이 인스턴스가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>지정된 어셈블리에 정의되어 있는 지정된 형식의 새 인스턴스를 만듭니다. 매개 변수는 바인더, 바인딩 플래그, 생성자 인수, 인수 해석에 사용되는 문화권별 정보 및 선택적 활성화 특성을 지정합니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다. <paramref name="bindingAttr" />가 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. <paramref name="binder" />가 null이면 기본 바인더가 사용됩니다.</param>
      <param name="args">생성자에 전달할 인수입니다. 이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다. 매개 변수가 없는 생성자를 사용하려면 <paramref name="args" />가 빈 배열이거나 null이어야 합니다.</param>
      <param name="culture">
        <paramref name="typeName" /> 생성자에 대해 선언된 공식적인 형식에 <paramref name="args" />를 강제로 적용하는 것을 제어하는 문화권별 정보입니다. <paramref name="culture" />가 <see langword="null" />이면 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.
이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>
        <paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다. 실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
<paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">일치하는 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.NullReferenceException">이 인스턴스가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])">
      <summary>지정된 어셈블리에 정의되어 있는 지정된 형식의 새 인스턴스를 만듭니다. 매개 변수에서는 활성화 특성의 배열을 지정합니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.
이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>
        <paramref name="typeName" />에서 지정한 새 인스턴스의 래퍼인 개체입니다. 실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">일치하는 public 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.NullReferenceException">이 인스턴스가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
      <summary>지정한 형식의 새 인스턴스를 만듭니다. 매개 변수에서는 형식이 정의되는 어셈블리와 해당 형식의 이름을 지정합니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <returns>
        <paramref name="typeName" />에서 지정한 개체의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.MissingMethodException">일치하는 public 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>형식 이름의 대/소문자를 구분할지 여부, 만들 형식을 선택하는 데 사용되는 바인더와 바인딩 특성, 생성자의 인수, 문화권 및 활성화 특성을 지정하여, 지정한 어셈블리에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다. <paramref name="bindingAttr" />가 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체의 검색을 가능하게 하는 개체입니다. <paramref name="binder" />가 null이면 기본 바인더가 사용됩니다.</param>
      <param name="args">생성자에 전달할 인수입니다. 이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다. 매개 변수가 없는 생성자를 사용하려면 <paramref name="args" />가 빈 배열이거나 null이어야 합니다.</param>
      <param name="culture">형식의 강제 변환을 제어하는 데 사용되는 문화권별 개체입니다. <paramref name="culture" />가 <see langword="null" />이면 현재 스레드의 <see langword="CultureInfo" />가 사용됩니다.</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다. 원격 개체를 활성화하는 데 필요한 URL을 지정합니다.
이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>
        <paramref name="typeName" />에서 지정한 개체의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.MissingMethodException">일치하는 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
<paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
      <summary>지정한 형식의 새 인스턴스를 만듭니다. 매개 변수에서는 형식이 정의되는 어셈블리, 해당 형식의 이름 및 활성화 특성의 배열을 지정합니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.
이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>
        <paramref name="typeName" />에서 지정한 개체의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 또는 <paramref name="typeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.MissingMethodException">일치하는 public 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typename" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 권한이 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)">
      <summary>지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyFile">경로를 포함하여 요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다. 어셈블리는 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 메서드를 사용하여 로드됩니다.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <returns>새 인스턴스에 대한 래퍼인 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다. 실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" />가 <see langword="null" />입니다.
또는
<paramref name="typeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyFile" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.MissingMethodException">매개 변수가 없는 public 생성자를 찾지 못한 경우</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.NullReferenceException">이 인스턴스가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyFile">경로를 포함하여 요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다. 어셈블리는 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 메서드를 사용하여 로드됩니다.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다. <paramref name="bindingAttr" />가 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체 검색을 사용할 수 있도록 하는 개체입니다. <paramref name="binder" />가 null이면 기본 바인더가 사용됩니다.</param>
      <param name="args">생성자에 전달할 인수입니다. 이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다. 매개 변수가 없는 생성자를 사용하려면 <paramref name="args" />가 빈 배열이거나 null이어야 합니다.</param>
      <param name="culture">
        <paramref name="typeName" /> 생성자에 대해 선언된 공식적인 형식에 <paramref name="args" />를 강제로 적용하는 것을 제어하는 문화권별 정보입니다. <paramref name="culture" />가 <see langword="null" />이면 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.
이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>새 인스턴스에 대한 래퍼인 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다. 실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" />가 <see langword="null" />입니다.
또는
<paramref name="typeName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 에서 <paramref name="assemblyFile" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">일치하는 public 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.
또는
<paramref name="assemblyFile" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.NullReferenceException">이 인스턴스가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyFile">경로를 포함하여 요청된 형식을 정의하는 어셈블리가 포함된 파일 이름입니다. 어셈블리는 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 메서드를 사용하여 로드됩니다.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.
이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>새 인스턴스에 대한 래퍼인 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다. 실제 개체에 액세스하려면 반환 값은 래핑되지 않아야 합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyFile" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">일치하는 public 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.NullReferenceException">이 인스턴스가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)">
      <summary>지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyName">요청된 형식을 정의하는 어셈블리의 파일 이름과 경로입니다.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <returns>요청된 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" />가 <see langword="null" />인 경우
또는
<paramref name="typeName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">매개 변수가 없는 public 생성자를 찾지 못한 경우</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>형식 이름의 대/소문자를 구분할지 여부, 만들 형식을 선택하는 데 사용되는 바인더와 바인딩 특성, 생성자의 인수, 문화권 및 활성화 특성을 지정하여, 지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyFile">요청된 형식을 정의하는 어셈블리의 파일 이름과 경로입니다.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름으로, <see cref="P:System.Type.FullName" /> 속성에 의해 반환됩니다.</param>
      <param name="ignoreCase">검색할 때 대/소문자를 구분할지를 지정하는 부울 값입니다.</param>
      <param name="bindingAttr">
        <paramref name="typeName" /> 생성자 검색에 영향을 미치는 0 또는 그 이상의 비트 플래그 조합입니다. <paramref name="bindingAttr" />가 0이면 대/소문자를 구분한 public 생성자 검색이 수행됩니다.</param>
      <param name="binder">리플렉션을 통해 바인딩, 인수 형식의 강제 변환, 멤버 호출 및 <see cref="T:System.Reflection.MemberInfo" /> 개체 검색을 사용할 수 있도록 하는 개체입니다. <paramref name="binder" />가 null이면 기본 바인더가 사용됩니다.</param>
      <param name="args">생성자에 전달할 인수입니다. 이 인수 배열은 호출할 생성자의 매개 변수와 개수, 순서 및 형식이 일치해야 합니다. 매개 변수가 없는 생성자를 사용하려면 <paramref name="args" />가 빈 배열이거나 null이어야 합니다.</param>
      <param name="culture">
        <paramref name="typeName" /> 생성자에 대해 선언된 공식적인 형식에 <paramref name="args" />를 강제로 적용하는 것을 제어하는 문화권별 정보입니다. <paramref name="culture" />가 <see langword="null" />이면 현재 스레드의 <see cref="T:System.Globalization.CultureInfo" />가 사용됩니다.</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.
이 매개 변수는 클라이언트 활성 개체와 관련되어 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>요청된 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" />가 <see langword="null" />입니다.
또는
<paramref name="typeName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 에서 <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">일치하는 public 생성자를 찾을 수 없습니다.</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
<paramref name="assemblyName" />가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
      <summary>지정한 어셈블리 파일에 정의된 지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="assemblyName">요청된 형식을 정의하는 어셈블리의 파일 이름과 경로입니다.</param>
      <param name="typeName">네임스페이스만 포함하고 어셈블리는 포함하지 않는 요청된 형식의 정규화된 이름입니다(<see cref="P:System.Type.FullName" /> 속성 참조).</param>
      <param name="activationAttributes">활성화할 수 있는 하나 이상의 특성으로 이루어진 배열입니다. 일반적으로, 원격 개체를 활성화하는 데 필요한 URL을 지정하는 단일 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 개체가 포함된 배열입니다.
이 매개 변수는 클라이언트 활성 개체와 관련이 있습니다. 클라이언트 활성화는 이전 버전과의 호환성을 위해 유지되지만 새로운 개발에는 권장되지 않는 레거시 기술입니다. 분산된 애플리케이션은 Windows Communication Foundation을 사용해야 합니다.</param>
      <returns>요청된 개체이거나, <paramref name="typeName" />이 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" />가 <see langword="null" />인 경우
또는
<paramref name="typeName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">호출자가 <see cref="T:System.MarshalByRefObject" />에서 상속되지 않는 개체에 대한 활성화 특성을 제공할 수 없습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="assemblyName" />에서 <paramref name="typeName" />을 찾을 수 없습니다.</exception>
      <exception cref="T:System.MissingMethodException">매개 변수가 없는 public 생성자를 찾지 못한 경우</exception>
      <exception cref="T:System.MethodAccessException">호출자에게 이 생성자를 호출할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />가 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>현재 <see cref="T:System.Threading.Thread" />에 대한 현재 애플리케이션 도메인을 가져옵니다.</summary>
      <returns>현재 애플리케이션 도메인입니다.</returns>
    </member>
    <member name="E:System.AppDomain.DomainUnload">
      <summary>
        <see cref="T:System.AppDomain" />이 언로드되려고 할 때 발생합니다.</summary>
    </member>
    <member name="P:System.AppDomain.DynamicDirectory">
      <summary>어셈블리 확인자에서 동적으로 만든 어셈블리를 조사하는 데 사용하는 디렉터리를 가져옵니다.</summary>
      <returns>어셈블리 확인자에서 동적으로 만든 어셈블리를 조사하는 데 사용하는 디렉터리입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String)">
      <summary>지정한 파일에 포함된 어셈블리를 실행합니다.</summary>
      <param name="assemblyFile">실행할 어셈블리가 포함된 파일 이름입니다.</param>
      <returns>어셈블리의 진입점에서 반환한 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" />가 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyFile" />이 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.MissingMethodException">지정된 어셈블리에 진입점이 없습니다.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])">
      <summary>지정한 인수를 사용하여 지정한 파일에 포함된 어셈블리를 실행합니다.</summary>
      <param name="assemblyFile">실행할 어셈블리가 포함된 파일 이름입니다.</param>
      <param name="args">어셈블리의 진입점에 대한 인수입니다.</param>
      <returns>어셈블리의 진입점에서 반환된 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" />가 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.
또는
<paramref name="assemblyFile" /> 가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.MissingMethodException">지정된 어셈블리에 진입점이 없습니다.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>지정한 인수, 해시 값 및 해시 알고리즘을 사용하여 지정한 파일에 포함된 어셈블리를 실행합니다.</summary>
      <param name="assemblyFile">실행할 어셈블리가 포함된 파일 이름입니다.</param>
      <param name="args">어셈블리의 진입점에 대한 인수입니다.</param>
      <param name="hashValue">계산된 해시 코드의 값을 나타냅니다.</param>
      <param name="hashAlgorithm">어셈블리 매니페스트에 사용되는 해시 알고리즘을 나타냅니다.</param>
      <returns>어셈블리의 진입점에서 반환된 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" />가 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.
또는
<paramref name="assemblyFile" /> 가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
      <exception cref="T:System.MissingMethodException">지정된 어셈블리에 진입점이 없습니다.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])">
      <summary>지정한 인수를 사용하여 <see cref="T:System.Reflection.AssemblyName" />이 지정된 어셈블리를 실행합니다.</summary>
      <param name="assemblyName">어셈블리의 이름을 나타내는 <see cref="T:System.Reflection.AssemblyName" /> 개체입니다.</param>
      <param name="args">프로세스를 시작할 때 전달할 명령줄 인수입니다.</param>
      <returns>어셈블리의 진입점에서 반환된 값입니다.</returns>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우
또는
<paramref name="assemblyName" /> 가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.MissingMethodException">지정된 어셈블리에 진입점이 없습니다.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String)">
      <summary>표시 이름이 지정된 어셈블리를 실행합니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <returns>어셈블리의 진입점에서 반환한 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyName" />이 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</exception>
      <exception cref="T:System.MissingMethodException">지정된 어셈블리에 진입점이 없습니다.</exception>
    </member>
    <member name="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])">
      <summary>지정한 인수를 사용하여 표시 이름이 지정된 어셈블리를 실행합니다.</summary>
      <param name="assemblyName">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <param name="args">프로세스를 시작할 때 전달할 명령줄 인수입니다.</param>
      <returns>어셈블리의 진입점에서 반환된 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyName" />으로 지정한 어셈블리를 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyName" />으로 지정한 어셈블리를 찾았으나 로드할 수 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" />으로 지정한 어셈블리가 올바른 어셈블리가 아닌 경우
또는
<paramref name="assemblyName" /> 가 현재 로드된 버전보다 이후 버전의 공용 언어 런타임으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.MissingMethodException">지정된 어셈블리에 진입점이 없습니다.</exception>
    </member>
    <member name="E:System.AppDomain.FirstChanceException">
      <summary>애플리케이션 도메인에서 런타임이 예외 처리기에 대한 호출 스택을 검색하기 전에 관리 코드에서 예외가 throw될 경우 발생합니다.</summary>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>이 애플리케이션 도메인의 이름을 가져옵니다.</summary>
      <returns>이 애플리케이션 도메인의 이름입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>이 애플리케이션 도메인의 실행 컨텍스트에 로드된 어셈블리를 가져옵니다.</summary>
      <returns>이 애플리케이션 도메인에 있는 어셈블리의 배열입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.GetCurrentThreadId">
      <summary>현재 스레드 식별자를 가져옵니다.</summary>
      <returns>현재 스레드의 식별자인 부호 있는 32비트 정수입니다.</returns>
    </member>
    <member name="M:System.AppDomain.GetData(System.String)">
      <summary>지정한 이름에 대해 현재 애플리케이션 도메인에 저장된 값을 가져옵니다.</summary>
      <param name="name">미리 정의된 애플리케이션 도메인 속성의 이름 또는 사용자가 정의한 애플리케이션 도메인 속성의 이름입니다.</param>
      <returns>
        <paramref name="name" /> 속성의 값이거나, 속성이 없을 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="P:System.AppDomain.Id">
      <summary>프로세스 내 애플리케이션 도메인을 고유하게 식별하는 정수를 가져옵니다.</summary>
      <returns>애플리케이션 도메인을 식별하는 정수입니다.</returns>
    </member>
    <member name="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)">
      <summary>호환성 스위치가 설정되어 있는지를 확인하고 설정되어 있으면 지정한 호환성 스위치가 설정되어 있는지를 나타내는 nullable 부울 값을 가져옵니다.</summary>
      <param name="value">테스트할 호환성 스위치입니다.</param>
      <returns>호환성 스위치가 설정되어 있으면 <paramref name="value" />에 지정된 호환성 스위치가 설정되어 있는지 여부를 나타내는 부울 값이고, 그렇지 않으면 Null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="M:System.AppDomain.IsDefaultAppDomain">
      <summary>애플리케이션 도메인이 해당 프로세스에 대한 기본 애플리케이션 도메인인지를 나타내는 값을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.AppDomain" /> 개체가 해당 프로세스에 대한 기본 애플리케이션 도메인을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.AppDomain.IsFinalizingForUnload">
      <summary>이 애플리케이션 도메인의 언로드 여부 및 공용 언어 런타임에서 이 애플리케이션 도메인에 포함된 개체를 종료하고 있는지를 나타냅니다.</summary>
      <returns>이 애플리케이션 도메인의 언로드 작업이 수행되고 공용 언어 런타임에서 이미 종료자를 호출했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.AppDomain.IsFullyTrusted">
      <summary>현재 애플리케이션 도메인에 로드된 어셈블리가 완전 신뢰로 실행되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 애플리케이션 도메인에 로드된 어셈블리가 완전 신뢰로 실행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.AppDomain.IsHomogenous">
      <summary>애플리케이션 도메인에 로드된 모든 어셈블리에 부여된 권한 집합이 현재 애플리케이션 도메인에 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 애플리케이션 도메인에 형식이 같은 권한 집합이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[])">
      <summary>내보낸 <see cref="T:System.Reflection.Assembly" />가 들어 있는 COFF(Common Object File Format) 기반 이미지를 사용한 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</summary>
      <param name="rawAssembly">내보낸 어셈블리가 포함된 COFF 기반 이미지인 <see langword="byte" /> 형식의 배열입니다.</param>
      <returns>로드된 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />이 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Byte[],System.Byte[])">
      <summary>내보낸 <see cref="T:System.Reflection.Assembly" />가 들어 있는 COFF(Common Object File Format) 기반 이미지를 사용한 <see cref="T:System.Reflection.Assembly" />를 로드합니다. <see cref="T:System.Reflection.Assembly" />에 대한 기호를 나타내는 원시 바이트도 로드됩니다.</summary>
      <param name="rawAssembly">내보낸 어셈블리가 포함된 COFF 기반 이미지인 <see langword="byte" /> 형식의 배열입니다.</param>
      <param name="rawSymbolStore">어셈블리의 기호를 나타내는 원시 바이트가 포함된 <see langword="byte" /> 형식의 배열입니다.</param>
      <returns>로드된 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="rawAssembly" />이 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.Reflection.AssemblyName)">
      <summary>
        <see cref="T:System.Reflection.AssemblyName" />이 지정된 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</summary>
      <param name="assemblyRef">로드할 어셈블리를 설명하는 개체입니다.</param>
      <returns>로드된 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" />가 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyRef" />이 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="M:System.AppDomain.Load(System.String)">
      <summary>표시 이름이 지정된 <see cref="T:System.Reflection.Assembly" />를 로드합니다.</summary>
      <param name="assemblyString">어셈블리의 표시 이름입니다. <see cref="P:System.Reflection.Assembly.FullName" />을 참조하세요.</param>
      <returns>로드된 어셈블리입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 입니다.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" />는 유효한 어셈블리가 아닙니다.
또는
버전 2.0 이상의 공용 언어 런타임이 현재 로드되어 있으며 <paramref name="assemblyString" />이 이후 버전으로 컴파일되었습니다.</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
      <exception cref="T:System.IO.FileLoadException">어셈블리 또는 모듈이 서로 다른 두 증명 정보로 두 번 로드되었습니다.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringIsEnabled">
      <summary>현재 프로세스에 애플리케이션 도메인의 CPU 및 메모리 모니터링을 사용할 수 있는지를 나타내는 값을 가져오거나 설정합니다. 프로세스에 모니터링을 사용할 수 있는 경우 사용하지 못하도록 설정할 수 없습니다.</summary>
      <returns>모니터링을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">현재 프로세스가 이 속성에 <see langword="false" /> 값을 할당하려 했습니다.</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedMemorySize">
      <summary>현재 애플리케이션 도메인에서 참조하도록 알려진 마지막 컬렉션 후에도 유지되는 바이트 수를 가져옵니다.</summary>
      <returns>유지되는 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성이 <see langword="false" />로 설정된 경우</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringSurvivedProcessMemorySize">
      <summary>프로세스의 모든 애플리케이션 도메인에 대한 마지막 컬렉션에서 유지된 총 바이트 수를 가져옵니다.</summary>
      <returns>프로세스의 유지되는 총 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성이 <see langword="false" />로 설정된 경우</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalAllocatedMemorySize">
      <summary>애플리케이션 도메인이 만들어진 후 실행된 모든 메모리 할당의 총 크기(바이트)를 수집된 메모리의 크기를 제외하지 않고 가져옵니다.</summary>
      <returns>모든 메모리 할당의 총 크기입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성이 <see langword="false" />로 설정된 경우</exception>
    </member>
    <member name="P:System.AppDomain.MonitoringTotalProcessorTime">
      <summary>프로세스가 시작된 후 현재 애플리케이션 도메인에서 실행되는 동안 모든 스레드에서 사용된 총 프로세서 시간을 가져옵니다.</summary>
      <returns>현재 애플리케이션 도메인의 총 프로세서 시간입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> 속성이 <see langword="false" />로 설정된 경우</exception>
    </member>
    <member name="P:System.AppDomain.PermissionSet">
      <summary>샌드박스가 적용된 애플리케이션 도메인의 권한 집합을 가져옵니다.</summary>
      <returns>샌드박스가 적용된 애플리케이션 도메인의 권한 집합입니다.</returns>
    </member>
    <member name="E:System.AppDomain.ProcessExit">
      <summary>기본 애플리케이션 도메인의 부모 프로세스가 종료하면 이 이벤트가 발생합니다.</summary>
    </member>
    <member name="E:System.AppDomain.ReflectionOnlyAssemblyResolve">
      <summary>어셈블리 전용 컨텍스트에서 어셈블리 확인이 실패하면 이 이벤트가 발생합니다.</summary>
    </member>
    <member name="M:System.AppDomain.ReflectionOnlyGetAssemblies">
      <summary>애플리케이션 도메인의 리플렉션 전용 컨텍스트로 로드된 어셈블리를 반환합니다.</summary>
      <returns>애플리케이션 도메인의 리플렉션 전용 컨텍스트에 로드된 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" /> 개체의 배열입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업을 시도한 경우</exception>
    </member>
    <member name="P:System.AppDomain.RelativeSearchPath">
      <summary>어셈블리 확인자에서 프라이빗 어셈블리를 조사할 기본 디렉터리 아래의 경로를 가져옵니다.</summary>
      <returns>어셈블리 확인자에서 프라이빗 어셈블리를 조사할 기본 디렉터리 아래의 경로입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="E:System.AppDomain.ResourceResolve">
      <summary>리소스가 어셈블리에서 올바르게 링크되거나 포함된 리소스가 아니어서 리소스 확인이 실패하면 이 이벤트가 발생합니다.</summary>
    </member>
    <member name="M:System.AppDomain.SetCachePath(System.String)">
      <summary>지정한 디렉터리 경로를 어셈블리가 섀도 복사되는 위치로 설정합니다.</summary>
      <param name="path">섀도 복사본 위치에 대한 정규화된 경로입니다.</param>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.SetData(System.String,System.Object)">
      <summary>지정한 애플리케이션 도메인 속성에 지정한 값을 할당합니다.</summary>
      <param name="name">만들거나 변경할 사용자 정의 애플리케이션 도메인 속성의 이름입니다.</param>
      <param name="data">속성 값입니다.</param>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.SetDynamicBase(System.String)">
      <summary>지정한 디렉터리 경로를 동적으로 생성된 파일을 저장하고 액세스하는 하위 디렉터리의 기본 디렉터리로 설정합니다.</summary>
      <param name="path">동적 어셈블리를 저장하는 하위 디렉터리의 기본 디렉터리인 정규화된 경로입니다.</param>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)">
      <summary>이 애플리케이션 도메인에서 실행되는 동안 스레드가 특정 보안 주체에 바인딩하려는 경우 Principal 개체 및 Identity 개체를 스레드에 연결하는 방법을 지정합니다.</summary>
      <param name="policy">스레드에 연결할 Principal 개체의 형식을 지정하는 <see cref="T:System.Security.Principal.PrincipalPolicy" /> 값 중 하나입니다.</param>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyFiles">
      <summary>섀도 복사를 설정합니다.</summary>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.SetShadowCopyPath(System.String)">
      <summary>지정한 디렉터리 경로를 어셈블리가 섀도 복사되는 위치로 설정합니다.</summary>
      <param name="path">각 이름이 세미콜론으로 구분되는 디렉터리 이름 목록입니다.</param>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)">
      <summary>이 애플리케이션 도메인에서 실행되는 동안 스레드가 특정 보안 주체에 바인딩하려는 경우 스레드에 연결되는 기본 Principal 개체를 설정합니다.</summary>
      <param name="principal">스레드에 연결할 Principal 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="principal" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.Policy.PolicyException">스레드 보안 주체가 이미 설정되어 있는 경우</exception>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="P:System.AppDomain.SetupInformation">
      <summary>이 인스턴스의 애플리케이션 도메인 구성 정보를 가져옵니다.</summary>
      <returns>애플리케이션 도메인 초기화 정보입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="P:System.AppDomain.ShadowCopyFiles">
      <summary>애플리케이션 도메인이 파일을 섀도 복사하도록 구성되어 있는지를 나타내는 표시를 가져옵니다.</summary>
      <returns>애플리케이션 도메인이 파일을 섀도 복사하도록 구성되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">언로드된 애플리케이션 도메인에서 작업이 시도됩니다.</exception>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>애플리케이션 도메인과 컨텍스트 정책의 이름이 포함된 문자열 표현을 가져옵니다.</summary>
      <returns>리터럴 문자열 "이름:", 애플리케이션 도메인의 이름 및 컨텍스트 정책의 문자열 표현 또는 "컨텍스트 정책이 없습니다." 문자열을 연결하여 구성되는 문자열입니다.</returns>
      <exception cref="T:System.AppDomainUnloadedException">현재 <see cref="T:System.AppDomain" />으로 표시된 애플리케이션 도메인이 언로드된 경우</exception>
    </member>
    <member name="E:System.AppDomain.TypeResolve">
      <summary>형식을 확인하지 못할 경우 발생합니다.</summary>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>예외가 catch되지 않으면 발생합니다.</summary>
    </member>
    <member name="M:System.AppDomain.Unload(System.AppDomain)">
      <summary>지정한 애플리케이션 도메인을 언로드합니다.</summary>
      <param name="domain">언로드할 애플리케이션 도메인입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="domain" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.CannotUnloadAppDomainException">
        <paramref name="domain" />을 언로드할 수 없는 경우</exception>
      <exception cref="T:System.Exception">언로드하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>
        <see cref="T:System.AppDomain" />의 인스턴스에 추가할 수 있는 어셈블리 바인딩 정보를 나타냅니다.</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationBase">
      <summary>애플리케이션이 들어 있는 디렉터리의 이름을 가져오거나 설정합니다.</summary>
      <returns>애플리케이션 기준 위치 디렉터리의 이름입니다.</returns>
    </member>
    <member name="P:System.AppDomainSetup.TargetFrameworkName">
      <summary>
        <see cref="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)" /> 생성자가 구문 분석할 수 있는 형식으로 애플리케이션에 대한 .NET Framework의 대상 버전 및 프로필을 지정하는 문자열을 가져오거나 설정합니다.</summary>
      <returns>.NET Framework의 대상 버전 및 프로필입니다.</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>언로드된 애플리케이션 도메인에 액세스할 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>
        <see cref="T:System.AppDomainUnloadedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.AppDomainUnloadedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.AppDomainUnloadedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.AppDomainUnloadedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 null 참조가 아닌 경우 내부 예외를 처리하는 <see langword="catch" /> 블록에서 현재 예외가 발생합니다.</param>
    </member>
    <member name="T:System.ApplicationId">
      <summary>매니페스트 기반 애플리케이션을 고유하게 식별하는 데 사용되는 정보를 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ApplicationId.#ctor(System.Byte[],System.String,System.Version,System.String,System.String)">
      <summary>
        <see cref="T:System.ApplicationId" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="publicKeyToken">원시 공개 키 데이터를 나타내는 바이트 배열입니다.</param>
      <param name="name">애플리케이션의 이름입니다.</param>
      <param name="version">애플리케이션의 버전을 지정하는 <see cref="T:System.Version" /> 개체입니다.</param>
      <param name="processorArchitecture">애플리케이션의 프로세서 아키텍처입니다.</param>
      <param name="culture">애플리케이션의 culture입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우
또는
<paramref name="version" />가 <see langword="null" />인 경우
또는
<paramref name="publicKeyToken" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.ApplicationId.Copy">
      <summary>현재 애플리케이션 ID의 동일한 복사본을 만들어 반환합니다.</summary>
      <returns>원본과 정확하게 일치하는 복사본을 나타내는 <see cref="T:System.ApplicationId" /> 개체입니다.</returns>
    </member>
    <member name="P:System.ApplicationId.Culture">
      <summary>애플리케이션의 culture 정보를 나타내는 문자열을 가져옵니다.</summary>
      <returns>애플리케이션의 culture 정보입니다.</returns>
    </member>
    <member name="M:System.ApplicationId.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.ApplicationId" /> 개체가 현재 <see cref="T:System.ApplicationId" />와 같은지 여부를 확인합니다.</summary>
      <param name="o">현재 <see cref="T:System.ApplicationId" />과 비교할 <see cref="T:System.ApplicationId" /> 개체입니다.</param>
      <returns>지정된 <see cref="T:System.ApplicationId" /> 개체가 현재 <see cref="T:System.ApplicationId" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ApplicationId.GetHashCode">
      <summary>현재 애플리케이션 ID의 해시 코드를 가져옵니다.</summary>
      <returns>현재 애플리케이션 ID의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ApplicationId.Name">
      <summary>애플리케이션의 이름을 가져옵니다.</summary>
      <returns>애플리케이션의 이름입니다.</returns>
    </member>
    <member name="P:System.ApplicationId.ProcessorArchitecture">
      <summary>애플리케이션의 대상 프로세서 아키텍처를 가져옵니다.</summary>
      <returns>애플리케이션의 프로세서 아키텍처입니다.</returns>
    </member>
    <member name="P:System.ApplicationId.PublicKeyToken">
      <summary>애플리케이션의 공개 키 토큰을 가져옵니다.</summary>
      <returns>애플리케이션의 공개 키 토큰이 포함된 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.ApplicationId.ToString">
      <summary>애플리케이션 ID의 문자열 표현을 만들어 반환합니다.</summary>
      <returns>애플리케이션 ID의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.ApplicationId.Version">
      <summary>애플리케이션의 버전을 가져옵니다.</summary>
      <returns>애플리케이션의 버전을 지정하는 <see cref="T:System.Version" />입니다.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventArgs">
      <summary>
        <see cref="E:System.AppDomain.AssemblyLoad" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.AssemblyLoadEventArgs.#ctor(System.Reflection.Assembly)">
      <summary>지정된 <see cref="T:System.AssemblyLoadEventArgs" />를 사용하여 <see cref="T:System.Reflection.Assembly" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="loadedAssembly">현재 로드된 어셈블리를 나타내는 인스턴스입니다.</param>
    </member>
    <member name="P:System.AssemblyLoadEventArgs.LoadedAssembly">
      <summary>현재 로드된 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" />를 가져옵니다.</summary>
      <returns>현재 로드된 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.AssemblyLoadEventHandler">
      <summary>
        <see cref="E:System.AppDomain.AssemblyLoad" />의 <see cref="T:System.AppDomain" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="args">이벤트 데이터를 포함하는 <see cref="T:System.AssemblyLoadEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Base64FormattingOptions">
      <summary>관련 <see cref="Overload:System.Convert.ToBase64CharArray" /> 및 <see cref="Overload:System.Convert.ToBase64String" /> 메서드가 출력에 줄 바꿈을 삽입할지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.InsertLineBreaks">
      <summary>문자열 표현에서 76자마다 줄 바꿈을 삽입합니다.</summary>
    </member>
    <member name="F:System.Base64FormattingOptions.None">
      <summary>문자열 표현에서 76자마다 줄 바꿈을 삽입하지 않습니다.</summary>
    </member>
    <member name="T:System.BitConverter">
      <summary>기본 데이터 형식을 바이트의 배열로, 바이트의 배열을 기본 데이터 형식으로 변환합니다.</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자를 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>
        <paramref name="value" />의 값에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>지정된 부울 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">부울 값입니다.</param>
      <returns>길이가 1 인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>지정된 유니코드 문자 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 문자입니다.</param>
      <returns>길이가 2인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 8인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 2인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 4인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 8인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 4인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 2인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 4인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수 값을 바이트 배열로 반환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>길이가 8인 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.BitConverter.Int32BitsToSingle(System.Int32)">
      <summary>지정된 32비트 정수를 단정밀도 부동 소수점 값으로 재해석합니다.</summary>
      <param name="value">변환할 정수입니다.</param>
      <returns>변환된 정수를 나타내는 단정밀도 부동 소수점 값입니다.</returns>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수를 배정밀도 부동 소수점 숫자로 재해석합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 수입니다.</returns>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>이 컴퓨터 아키텍처에서 데이터가 저장되는 바이트 순서("endian")를 나타냅니다.</summary>
    </member>
    <member name="M:System.BitConverter.SingleToInt32Bits(System.Single)">
      <summary>단정밀도 부동 소수점 값을 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 값입니다.</param>
      <returns>변환된 단정밀도 부동 소수점 값을 나타내는 정수입니다.</returns>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>바이트에서 변환된 부울 값을 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내에 있는 바이트의 인덱스입니다.</param>
      <returns>
        <paramref name="startIndex" />의 <paramref name="value" />에 있는 바이트가 0이 아니면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 부울입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>2바이트에서 변환된 유니코드 문자를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 2바이트로 형성된 문자입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 1을 뺀 값과 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 문자로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 문자입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 <see cref="T:System.Char" />의 길이보다 작습니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>8바이트에서 변환된 배정밀도 부동 소수점 숫자를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 8바이트로 형성된 배정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 7을 뺀 값보다 크거나 같고 <paramref name="value" />의 길이에서 1을 뺀 값보다 작거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 배정밀도 부동 소수점 값으로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 배정밀도 부동 소수점 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 <see cref="T:System.Double" /> 값의 길이보다 작습니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>2바이트에서 변환된 16비트 부호 있는 정수를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 2바이트로 형성된 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 1을 뺀 값과 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 2보다 작습니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>4바이트에서 변환된 32비트 부호 있는 정수를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 4바이트로 형성된 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 3을 뺀 값보다 크거나 같고 <paramref name="value" />의 길이에서 1을 뺀 값보다 작거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 4보다 작은 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>8바이트에서 변환된 64비트 부호 있는 정수를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 8바이트로 형성된 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 7을 뺀 값보다 크거나 같고 <paramref name="value" />의 길이에서 1을 뺀 값보다 작거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 8보다 작습니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>4바이트에서 변환된 단정밀도 부동 소수점 숫자를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 4바이트로 형성된 단정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 3을 뺀 값보다 크거나 같고 <paramref name="value" />의 길이에서 1을 뺀 값보다 작거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 배정밀도 부동 소수점 값으로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 배정밀도 부동 소수점 값입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 <see cref="T:System.Double" /> 값의 길이보다 작습니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>지정된 바이트 배열의 각 요소 숫자 값을 해당하는 16진수 문자열 표현으로 변환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <returns>하이픈으로 구분된 16진수 쌍의 문자열이며 여기에서 각 쌍은 <paramref name="value" />;의 해당 요소(예: "7F-2C-4A-00")를 나타냅니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>지정된 바이트 하위 배열의 각 요소 숫자 값을 해당하는 16진수 문자열 표현으로 변환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>하이픈으로 구분된 16진수 쌍의 문자열이며 여기에서 각 쌍은 <paramref name="value" />;의 하위 배열에서 해당 요소(예: "7F-2C-4A-00")를 나타냅니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이트 하위 배열의 각 요소 숫자 값을 해당하는 16진수 문자열 표현으로 변환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <param name="length">
        <paramref name="value" />의 배열 요소 중에서 변환할 배열 요소의 수입니다.</param>
      <returns>하이픈으로 구분된 16진수 쌍의 문자열이며 여기에서 각 쌍은 <paramref name="value" />;의 하위 배열에서 해당 요소(예: "7F-2C-4A-00")를 나타냅니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 또는 <paramref name="length" />가 0보다 작습니다.
또는
<paramref name="startIndex" />가 0보다 크고 <paramref name="value" />의 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />와 <paramref name="length" />를 합하면 <paramref name="value" /> 내에 위치를 지정할 수 없는 경우. 즉, <paramref name="startIndex" /> 매개 변수가 <paramref name="value" />의 길이에서 <paramref name="length" /> 매개 변수를 뺀 값보다 큰 경우입니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>2바이트에서 변환된 16비트 부호 없는 정수를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 2바이트로 형성된 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 1을 뺀 값과 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 2보다 작습니다.</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>4바이트에서 변환된 32비트 부호 없는 정수를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 4바이트로 형성된 32비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 3을 뺀 값보다 크거나 같고 <paramref name="value" />의 길이에서 1을 뺀 값보다 작거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.ReadOnlySpan{System.Byte})">
      <summary>읽기 전용 바이트 범위를 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 32비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />의 길이가 4보다 작은 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>8바이트에서 변환된 64비트 부호 없는 정수를 바이트 배열의 지정된 위치에 반환합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
      <param name="startIndex">
        <paramref name="value" /> 내의 시작 위치입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하고 8바이트로 형성된 64비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" />가 <paramref name="value" />의 길이에서 7을 뺀 값보다 크거나 같고 <paramref name="value" />의 길이에서 1을 뺀 값보다 작거나 같은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 0보다 작거나 <paramref name="value" /> - 1의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.ReadOnlySpan{System.Byte})">
      <summary>바이트를 부호 없는 long으로 변환합니다.</summary>
      <param name="value">변환할 바이트를 포함하는 읽기 전용 범위입니다.</param>
      <returns>변환된 바이트를 나타내는 64비트 부호 없는 정수입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Boolean)">
      <summary>부울을 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 부울을 나타내는 바이트입니다.</param>
      <param name="value">변환할 부울입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Char)">
      <summary>문자를 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 문자를 나타내는 바이트입니다.</param>
      <param name="value">변환할 문자입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Double)">
      <summary>배정밀도 부동 소수점 값을 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 배정밀도 부동 소수점 값을 나타내는 바이트입니다.</param>
      <param name="value">변환할 배정밀도 부동 소수점 값입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int16)">
      <summary>16비트 부호 있는 정수를 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 16비트 부호 있는 정수를 나타내는 바이트입니다.</param>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int32)">
      <summary>32비트 부호 있는 정수를 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 32비트 부호 있는 정수를 나타내는 바이트입니다.</param>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Int64)">
      <summary>64비트 부호 있는 정수를 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 64비트 부호 있는 정수를 나타내는 바이트입니다.</param>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.Single)">
      <summary>배정밀도 부동 소수점 값을 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 배정밀도 부동 소수점 값을 나타내는 바이트입니다.</param>
      <param name="value">변환할 배정밀도 부동 소수점 값입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt16)">
      <summary>부호 없는 16비트 정수를 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 부호 없는 16비트 정수를 나타내는 바이트입니다.</param>
      <param name="value">변환할 부호 없는 16비트 정수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt32)">
      <summary>32비트 부호 없는 정수를 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 부호 없는 32비트 정수를 나타내는 바이트입니다.</param>
      <param name="value">변환할 부호 없는 32비트 정수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.BitConverter.TryWriteBytes(System.Span{System.Byte},System.UInt64)">
      <summary>부호 없는 64비트 정수를 바이트 범위로 변환합니다.</summary>
      <param name="destination">이 메서드가 반환될 때 변환된 부호 없는 64비트 정수를 나타내는 바이트입니다.</param>
      <param name="value">변환할 부호 없는 64비트 정수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>애플리케이션 도메인 언로드에 실패하면 throw 되는 예외입니다.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>
        <see cref="T:System.CannotUnloadAppDomainException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터로부터 <see cref="T:System.CannotUnloadAppDomainException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.CannotUnloadAppDomainException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.CannotUnloadAppDomainException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)가 아니면, 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생한 것입니다.</param>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>탭 문자열 토큰으로 새 줄을 들여쓰기할 수 있는 텍스트 작성기를 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>지정된 텍스트 작성기 및 기본 탭 문자열을 사용하여 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="writer">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>지정된 텍스트 작성기 및 기본 탭 문자열을 사용하여 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="writer">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="tabString">들여쓰기에 사용할 탭 문자열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>작성 중인 문서를 닫습니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>기본 탭 문자열을 지정합니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>텍스트 작성기에서 사용할 인코딩을 가져옵니다.</summary>
      <returns>텍스트 작성기에서 사용할 인코딩을 나타내는 <see cref="T:System.Text.Encoding" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>스트림을 플러시합니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>들여쓸 공백의 수를 가져오거나 설정합니다.</summary>
      <returns>들여쓸 공백의 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>사용할 <see cref="T:System.IO.TextWriter" />입니다.</summary>
      <returns>사용할 <see cref="T:System.IO.TextWriter" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>사용할 줄 바꿈 문자를 가져오거나 설정합니다.</summary>
      <returns>사용할 줄 바꿈 문자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>
        <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 속성에 따라 각 들여쓰기 수준마다 탭 문자열을 출력합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>텍스트 스트림에 Boolean 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 Boolean 값입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>텍스트 스트림에 문자를 씁니다.</summary>
      <param name="value">쓸 문자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>텍스트 스트림에 문자 배열을 씁니다.</summary>
      <param name="buffer">쓸 문자 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>텍스트 스트림에 문자의 하위 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">버퍼의 시작 인덱스입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>Double 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 <see langword="double" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>텍스트 스트림에 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 정수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>텍스트 스트림에 8바이트 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 8바이트 정수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>텍스트 스트림에 개체의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>Single 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 <see langword="single" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>텍스트 스트림에 지정된 문자열을 씁니다.</summary>
      <param name="s">쓸 문자열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>지정된 것과 같은 의미론을 사용하여 서식이 지정된 문자열을 출력합니다.</summary>
      <param name="format">서식 지정 문자열입니다.</param>
      <param name="arg0">형식이 지정된 문자열에 쓸 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>지정된 것과 같은 의미론을 사용하여 서식이 지정된 문자열을 출력합니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg0">서식 지정 문자열에 쓸 첫째 개체입니다.</param>
      <param name="arg1">서식 지정 문자열에 쓸 둘째 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>지정된 것과 같은 의미론을 사용하여 서식이 지정된 문자열을 출력합니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg">출력할 인수 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>줄 종결자를 씁니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 Boolean 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 Boolean입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 문자를 씁니다.</summary>
      <param name="value">쓸 문자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 문자 배열을 씁니다.</summary>
      <param name="buffer">쓸 문자 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 문자의 하위 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">버퍼의 시작 인덱스입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 Double의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 <see langword="double" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 정수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 8바이트 정수의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 8바이트 정수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 개체의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 Single 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 <see langword="single" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 지정된 문자열을 씁니다.</summary>
      <param name="s">쓸 문자열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>지정된 것과 같은 의미론을 사용하여 서식이 지정된 문자열을 줄 종결자가 다음에 오도록 씁니다.</summary>
      <param name="format">서식 지정 문자열입니다.</param>
      <param name="arg0">형식이 지정된 문자열에 쓸 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>지정된 것과 같은 의미론을 사용하여 서식이 지정된 문자열을 줄 종결자가 다음에 오도록 씁니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg0">서식 지정 문자열에 쓸 첫째 개체입니다.</param>
      <param name="arg1">서식 지정 문자열에 쓸 둘째 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>지정된 것과 같은 의미론을 사용하여 서식이 지정된 문자열을 줄 종결자가 다음에 오도록 씁니다.</summary>
      <param name="format">사용할 서식 지정 문자열입니다.</param>
      <param name="arg">출력할 인수 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 UInt32의 텍스트 표현을 씁니다.</summary>
      <param name="value">출력할 UInt32입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>탭 없는 줄에 지정된 문자열을 씁니다.</summary>
      <param name="s">쓸 문자열입니다.</param>
    </member>
    <member name="T:System.Collections.ArrayList">
      <summary>필요에 따라 크기가 동적으로 증가하는 배열을 사용하여 <see cref="T:System.Collections.IList" /> 인터페이스를 구현합니다.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor">
      <summary>비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.ArrayList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
      <summary>지정한 컬렉션에서 복사된 요소가 포함되어 있고 복사된 요소의 수와 같은 초기 용량을 가지는 <see cref="T:System.Collections.ArrayList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="c">요소가 새 목록에 복사되는 <see cref="T:System.Collections.ICollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
      <summary>비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.ArrayList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">새 목록에 처음부터 저장할 수 있는 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Adapter(System.Collections.IList)">
      <summary>특정 <see cref="T:System.Collections.IList" />에 대해 <see cref="T:System.Collections.ArrayList" /> 래퍼를 만듭니다.</summary>
      <param name="list">래핑할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>
        <see cref="T:System.Collections.IList" /> 주변의 <see cref="T:System.Collections.ArrayList" /> 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Add(System.Object)">
      <summary>개체를 <see cref="T:System.Collections.ArrayList" />의 끝 부분에 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />의 끝에 추가할 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <paramref name="value" />가 추가된 <see cref="T:System.Collections.ArrayList" /> 인덱스입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 요소를 <see cref="T:System.Collections.ArrayList" />의 끝에 추가합니다.</summary>
      <param name="c">요소를 <see cref="T:System.Collections.ArrayList" />의 끝에 추가해야 할 <see cref="T:System.Collections.ICollection" />입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <see langword="null" />인 요소를 포함할 수는 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>지정된 비교자를 사용하여 정렬된 <see cref="T:System.Collections.ArrayList" />의 요소 범위에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="index">검색할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 범위의 길이입니다.</param>
      <param name="value">찾을 <see cref="T:System.Object" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.
또는
각 요소의 <see cref="T:System.IComparable" /> 구현인 기본 비교자를 사용하면 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />가 있는 경우 정렬된 <see cref="T:System.Collections.ArrayList" />에 있는 <paramref name="value" />의 0부터 시작하는 인덱스이고, 그렇지 않은 경우 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이고, 더 큰 요소가 없는 경우 <see cref="P:System.Collections.ArrayList.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.ArrayList" />의 올바른 범위를 나타내지 않습니다.
또는
<paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" /> 및 <see cref="T:System.Collections.ArrayList" />의 요소 둘 다 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <see cref="T:System.Collections.ArrayList" />의 요소와 동일한 형식이 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object)">
      <summary>기본 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.ArrayList" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="value">찾을 <see cref="T:System.Object" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <paramref name="value" />가 있는 경우 정렬된 <see cref="T:System.Collections.ArrayList" />에 있는 <paramref name="value" />의 0부터 시작하는 인덱스이고, 그렇지 않은 경우 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이고, 더 큰 요소가 없는 경우 <see cref="P:System.Collections.ArrayList.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />와 <see cref="T:System.Collections.ArrayList" />의 요소 둘 다 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" />가 <see cref="T:System.Collections.ArrayList" />의 요소와 동일한 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)">
      <summary>지정된 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.ArrayList" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="value">찾을 <see cref="T:System.Object" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.
또는
각 요소의 <see cref="T:System.IComparable" /> 구현인 기본 비교자를 사용하면 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />가 있는 경우 정렬된 <see cref="T:System.Collections.ArrayList" />에 있는 <paramref name="value" />의 0부터 시작하는 인덱스이고, 그렇지 않은 경우 <paramref name="value" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이고, 더 큰 요소가 없는 경우 <see cref="P:System.Collections.ArrayList.Count" />의 비트 보수입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" /> 및 <see cref="T:System.Collections.ArrayList" />의 요소 둘 다 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 <paramref name="value" />가 <see cref="T:System.Collections.ArrayList" />의 요소와 동일한 형식이 아닙니다.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Capacity">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에 포함될 수 있는 요소의 수를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" />에 포함될 수 있는 요소의 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.ArrayList.Capacity" />가 <see cref="P:System.Collections.ArrayList.Count" />보다 작은 값으로 설정되어 있습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">시스템에 사용 가능한 메모리가 부족합니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clear">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에서 요소를 모두 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Clone">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 부분 복사본을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" />의 부분 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에 요소가 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.ArrayList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
      <summary>대상 배열의 맨 처음부터 시작하여 전체 <see cref="T:System.Collections.ArrayList" />를 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ArrayList" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우
또는
소스 <see cref="T:System.Collections.ArrayList" /> 요소 수가 대상 <paramref name="array" />를 포함할 수 있는 요소 수보다 큽니다.</exception>
      <exception cref="T:System.InvalidCastException">소스 <see cref="T:System.Collections.ArrayList" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.ArrayList" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ArrayList" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우
또는
소스 <see cref="T:System.Collections.ArrayList" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
      <exception cref="T:System.InvalidCastException">소스 <see cref="T:System.Collections.ArrayList" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>대상 배열의 지정한 인덱스에서 시작하여 <see cref="T:System.Collections.ArrayList" />의 요소 범위를 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="index">소스 <see cref="T:System.Collections.ArrayList" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
      <param name="array">
        <see cref="T:System.Array" /> 에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ArrayList" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count">복사할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="arrayIndex" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우
또는
<paramref name="index" /> 가 소스 <see cref="P:System.Collections.ArrayList.Count" /> 의 <see cref="T:System.Collections.ArrayList" />보다 크거나 같습니다.
또는
소스 <see cref="T:System.Collections.ArrayList" />의 <paramref name="index" />부터 끝까지에 포함된 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지의 사용 가능한 공간보다 큽니다.</exception>
      <exception cref="T:System.InvalidCastException">소스 <see cref="T:System.Collections.ArrayList" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.Count">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에 실제로 포함된 요소의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" />에 실제로 포함된 요소의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)">
      <summary>고정 크기의 <see cref="T:System.Collections.ArrayList" /> 래퍼를 반환합니다.</summary>
      <param name="list">래핑할 <see cref="T:System.Collections.ArrayList" />입니다.</param>
      <returns>고정 크기의 <see cref="T:System.Collections.ArrayList" /> 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.FixedSize(System.Collections.IList)">
      <summary>고정 크기의 <see cref="T:System.Collections.IList" /> 래퍼를 반환합니다.</summary>
      <param name="list">래핑할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>고정 크기의 <see cref="T:System.Collections.IList" /> 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator">
      <summary>전체 <see cref="T:System.Collections.ArrayList" />에 대한 열거자를 반환합니다.</summary>
      <returns>전체 <see cref="T:System.Collections.ArrayList" />의 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 요소 범위에 대한 열거자를 반환합니다.</summary>
      <param name="index">열거자가 참조해야 하는 <see cref="T:System.Collections.ArrayList" /> 섹션의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">열거자가 참조해야 하는 <see cref="T:System.Collections.ArrayList" /> 섹션의 요소 수입니다.</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" />의 지정된 요소 범위에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.ArrayList" />의 올바른 범위를 지정하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)">
      <summary>소스 <see cref="T:System.Collections.ArrayList" />에서 요소의 하위 집합을 나타내는 <see cref="T:System.Collections.ArrayList" />를 반환합니다.</summary>
      <param name="index">범위가 시작되는 <see cref="T:System.Collections.ArrayList" /> 인덱스(0부터 시작)입니다.</param>
      <param name="count">범위의 요소 수입니다.</param>
      <returns>소스 <see cref="T:System.Collections.ArrayList" />에서 요소의 하위 집합을 나타내는 <see cref="T:System.Collections.ArrayList" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.ArrayList" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
      <summary>지정한 <see cref="T:System.Object" />를 검색하고, 전체 <see cref="T:System.Collections.ArrayList" /> 내에서 처음 나오는 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <paramref name="value" />가 있으면 전체 <see cref="T:System.Collections.ArrayList" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
      <summary>지정된 <see cref="T:System.Object" />를 검색하고, 지정된 인덱스부터 마지막 요소까지 포함되는 <see cref="T:System.Collections.ArrayList" />의 요소 범위에서 처음 나오는 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <returns>
        <paramref name="startIndex" />부터 마지막 요소까지 포함하는 <see cref="T:System.Collections.ArrayList" />의 요소 범위에 <paramref name="value" />가 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.ArrayList" />의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
      <summary>지정된 <see cref="T:System.Object" />를 검색하고, 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.ArrayList" />의 요소 범위에서 처음 나오는 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <returns>
        <paramref name="startIndex" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 <see cref="T:System.Collections.ArrayList" />의 요소 범위에 <paramref name="value" />가 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.ArrayList" />의 유효한 인덱스 범위를 벗어납니다.
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.ArrayList" />의 올바른 섹션을 지정하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 지정된 인덱스에 요소를 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">삽입할 <see cref="T:System.Object" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="index" />가 <see cref="P:System.Collections.ArrayList.Count" />보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</summary>
      <param name="index">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</param>
      <param name="c">요소가 <see cref="T:System.Collections.ICollection" />에 삽입되어야 하는 <see cref="T:System.Collections.ArrayList" />입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <see langword="null" />인 요소를 포함할 수는 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="index" />가 <see cref="P:System.Collections.ArrayList.Count" />보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.IsFixedSize">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 의 크기가 고정되어 있으면 <see cref="T:System.Collections.ArrayList" /> 이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.ArrayList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.ArrayList" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ArrayList" /> 이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.ArrayList.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="index" />가 <see cref="P:System.Collections.ArrayList.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object)">
      <summary>지정한 <see cref="T:System.Object" /> 검색하고, 전체 <see cref="T:System.Collections.ArrayList" /> 내에서 마지막으로 검색된 항목의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>전체 <see cref="T:System.Collections.ArrayList" />에서 마지막으로 검색된 <paramref name="value" />의 0부터 시작하는 인덱스이고, 검색되지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)">
      <summary>지정된 <see cref="T:System.Object" />를 검색하고, 첫 번째 요소부터 지정된 인덱스까지 확장되는 <see cref="T:System.Collections.ArrayList" />의 요소 범위에서 마지막으로 검색된 항목의 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <returns>첫 번째 요소부터 <paramref name="startIndex" />까지 확장하는 <see cref="T:System.Collections.ArrayList" />의 요소 범위 내에서 마지막으로 검색된 <paramref name="value" />의 인덱스(0부터 시작)이고, 검색되지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.ArrayList" />의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)">
      <summary>지정된 <see cref="T:System.Object" />를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.ArrayList" />의 요소 범위에서 마지막으로 검색되는 0부터 시작하는 인덱스를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <returns>
        <paramref name="count" />개의 요소를 포함하고 <paramref name="startIndex" />에서 끝나는 <see cref="T:System.Collections.ArrayList" />의 요소 범위에 마지막으로 검색한 <paramref name="value" />의 인덱스(0부터 시작)이고, 검색되지 않으면 -1입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.ArrayList" />의 유효한 인덱스 범위를 벗어납니다.
또는
<paramref name="count" />가 0보다 작은 경우
또는
<paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.ArrayList" />의 올바른 섹션을 지정하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)">
      <summary>읽기 전용 <see cref="T:System.Collections.ArrayList" /> 래퍼를 반환합니다.</summary>
      <param name="list">래핑할 <see cref="T:System.Collections.ArrayList" />입니다.</param>
      <returns>
        <paramref name="list" /> 주변의 읽기 전용 <see cref="T:System.Collections.ArrayList" /> 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)">
      <summary>읽기 전용 <see cref="T:System.Collections.IList" /> 래퍼를 반환합니다.</summary>
      <param name="list">래핑할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>
        <paramref name="list" /> 주변의 읽기 전용 <see cref="T:System.Collections.IList" /> 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="obj">
        <see cref="T:System.Object" />에서 제거할 <see cref="T:System.Collections.ArrayList" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 지정된 인덱스에 있는 요소를 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="index" />가 <see cref="P:System.Collections.ArrayList.Count" />보다 크거나 같은 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에서 요소의 범위를 제거합니다.</summary>
      <param name="index">제거할 요소의 범위에 대한 0부터 시작하는 인덱스입니다.</param>
      <param name="count">제거할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" /> 가 <see cref="T:System.Collections.ArrayList" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)">
      <summary>요소가 지정된 값의 복사본인 <see cref="T:System.Collections.ArrayList" />를 반환합니다.</summary>
      <param name="value">새 <see cref="T:System.Collections.ArrayList" />에서 여러 번 복사할 <see cref="T:System.Object" />입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="count">
        <paramref name="value" />이(가) 복사되어야 하는 횟수입니다.</param>
      <returns>모두 <paramref name="value" />의 복사본에 해당하는 <paramref name="count" />개의 요소가 포함된 <see cref="T:System.Collections.ArrayList" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse">
      <summary>전체 <see cref="T:System.Collections.ArrayList" />에서 요소의 순서를 반대로 바꿉니다.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)">
      <summary>지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" /> 가 <see cref="T:System.Collections.ArrayList" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 요소 범위에 대해 컬렉션의 요소를 복사합니다.</summary>
      <param name="index">
        <paramref name="c" />의 요소 복사를 시작할 0부터 시작하는 <see cref="T:System.Collections.ArrayList" /> 인덱스입니다.</param>
      <param name="c">
        <see cref="T:System.Collections.ArrayList" />에 요소를 복사할 <see cref="T:System.Collections.ICollection" />입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <see langword="null" />인 요소를 포함할 수는 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="index" /> + <paramref name="c" />의 요소 수가 <see cref="P:System.Collections.ArrayList.Count" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort">
      <summary>전체 <see cref="T:System.Collections.ArrayList" />의 요소를 정렬합니다.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Collections.IComparer)">
      <summary>지정된 비교자를 사용하여 전체 <see cref="T:System.Collections.ArrayList" />에 있는 요소를 정렬합니다.</summary>
      <param name="comparer">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.
또는
각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우</exception>
      <exception cref="T:System.InvalidOperationException">두 요소를 비교하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" />에 대해 <see langword="null" />이 전달되었으며, 목록의 요소가 <see cref="T:System.IComparable" />을 구현하지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>지정된 비교자를 사용하여 <see cref="T:System.Collections.ArrayList" />의 요소 범위에 있는 요소를 정렬합니다.</summary>
      <param name="index">정렬할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">정렬할 범위의 길이입니다.</param>
      <param name="comparer">요소를 비교할 때 사용하는 <see cref="T:System.Collections.IComparer" /> 구현입니다.
또는
각 요소의 <see cref="T:System.IComparable" /> 구현을 사용할 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.ArrayList" />의 올바른 범위를 지정하지 않습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우</exception>
      <exception cref="T:System.InvalidOperationException">두 요소를 비교하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)">
      <summary>동기화되어 스레드로부터 안전하게 보호되는 <see cref="T:System.Collections.ArrayList" /> 래퍼를 반환합니다.</summary>
      <param name="list">동기화할 <see cref="T:System.Collections.ArrayList" />입니다.</param>
      <returns>동기화되어 스레드로부터 안전하게 보호되는 <see cref="T:System.Collections.ArrayList" /> 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.Synchronized(System.Collections.IList)">
      <summary>동기화되어 스레드로부터 안전하게 보호되는 <see cref="T:System.Collections.IList" /> 래퍼를 반환합니다.</summary>
      <param name="list">동기화할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>동기화되어 스레드로부터 안전하게 보호되는 <see cref="T:System.Collections.IList" /> 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Collections.ArrayList.SyncRoot">
      <summary>
        <see cref="T:System.Collections.ArrayList" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 요소를 새 <see cref="T:System.Object" /> 배열에 복사합니다.</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" />의 요소 복사본을 포함하는 <see cref="T:System.Object" /> 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
      <summary>
        <see cref="T:System.Collections.ArrayList" />의 요소를 지정된 요소 형식의 새 배열에 복사합니다.</summary>
      <param name="type">요소를 복사해 넣기 위해 새로 만들 대상 배열의 <see cref="T:System.Type" /> 요소입니다.</param>
      <returns>
        <see cref="T:System.Collections.ArrayList" />의 요소 복사본을 포함하는 지정된 요소 형식의 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidCastException">소스 <see cref="T:System.Collections.ArrayList" />의 형식을 지정된 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.ArrayList.TrimToSize">
      <summary>용량을 <see cref="T:System.Collections.ArrayList" />의 실제 요소 수로 설정합니다.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.ArrayList" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.ArrayList" />가 고정 크기입니다.</exception>
    </member>
    <member name="T:System.Collections.Comparer">
      <summary>문자열의 대/소문자를 구분하여 두 개체를 비교합니다.</summary>
    </member>
    <member name="M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)">
      <summary>지정된 <see cref="T:System.Collections.Comparer" />를 사용하여 <see cref="T:System.Globalization.CultureInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="culture">새 <see cref="T:System.Globalization.CultureInfo" />에 사용할 <see cref="T:System.Collections.Comparer" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Comparer.Compare(System.Object,System.Object)">
      <summary>대/소문자를 구분하여 같은 형식의 두 개체를 비교한 다음 한 개체가 다른 개체보다 작은지, 큰지 또는 두 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="a">비교할 첫 번째 개체입니다.</param>
      <param name="b">비교할 두 번째 개체입니다.</param>
      <returns>다음 표와 같이 <paramref name="a" /> 및 <paramref name="b" />의 상대 값을 나타내는 부호 있는 정수입니다.
  값 
  의미 
  0보다 작음 
 <paramref name="a" />가 <paramref name="b" />보다 작은 경우  
  
  0 
 <paramref name="a" />가 <paramref name="b" />와 같습니다.  
  
  0보다 큼 
 <paramref name="a" />가 <paramref name="b" />보다 큰 경우</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 또는 <paramref name="b" /> 모두 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우
또는
<paramref name="a" />와 <paramref name="b" />가 형식이 다르므로 서로 비교할 수 없는 경우</exception>
    </member>
    <member name="F:System.Collections.Comparer.Default">
      <summary>현재 스레드의 <see cref="T:System.Collections.Comparer" />와 관련된 <see cref="P:System.Threading.Thread.CurrentCulture" />의 인스턴스를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Collections.Comparer.DefaultInvariant">
      <summary>
        <see cref="T:System.Collections.Comparer" />와 관련된 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />의 인스턴스를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Collections.Comparer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization에 필요한 데이터로 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 채웁니다.</summary>
      <param name="info">데이터로 채울 개체입니다.</param>
      <param name="context">serialization의 소스 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Collections.Hashtable">
      <summary>키의 해시 코드에 따라 구성된 키/값 쌍의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor">
      <summary>기본 초기 용량, 로드 비율, 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
      <summary>지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다. 새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 기본 로드 비율, 해시 코드 공급자 및 비교자를 사용합니다.</summary>
      <param name="d">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)">
      <summary>지정된 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다. 새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 기본 로드 비율과 지정된 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 사용합니다.</summary>
      <param name="d">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다. 기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다. 새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 기본 로드 비율과 지정된 해시 코드 공급자 및 비교자를 사용합니다. 이 API는 사용되지 않습니다. 다른 방법을 보려면 <see cref="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Collections.IEqualityComparer)" />를 참조하십시오.</summary>
      <param name="d">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</param>
      <param name="comparer">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.
또는
각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single)">
      <summary>지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다. 새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 지정된 로드 비율과 기본 해시 코드 공급자 및 비교자를 사용합니다.</summary>
      <param name="d">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <param name="loadFactor">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다. 결과는 버킷과 요소의 최대 비율입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" />가 0.1보다 작습니다.
또는
<paramref name="loadFactor" />가 1.0보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IEqualityComparer)">
      <summary>지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다. 새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 지정된 로드 비율 및 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 사용합니다.</summary>
      <param name="d">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <param name="loadFactor">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다. 결과는 버킷과 요소의 최대 비율입니다.</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다. 기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" />가 0.1보다 작습니다.
또는
<paramref name="loadFactor" />가 1.0보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>지정한 사전의 요소를 새 <see cref="T:System.Collections.Hashtable" /> 개체에 복사하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 새 인스턴스를 초기화합니다. 새 <see cref="T:System.Collections.Hashtable" /> 개체는 복사된 요소 수와 같은 초기 용량을 갖고 있고 지정된 로드 비율, 해시 코드 공급자 및 비교자를 사용합니다.</summary>
      <param name="d">새 <see cref="T:System.Collections.IDictionary" /> 개체로 복사할 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <param name="loadFactor">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다. 결과는 버킷과 요소의 최대 비율입니다.</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</param>
      <param name="comparer">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.
또는
각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="loadFactor" />가 0.1보다 작습니다.
또는
<paramref name="loadFactor" />가 1.0보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IEqualityComparer)">
      <summary>기본 초기 용량 및 로드 비율과 지정된 <see cref="T:System.Collections.Hashtable" /> 개체를 사용하여 <see cref="T:System.Collections.IEqualityComparer" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 개체와 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다. 기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>기본 초기 용량 및 로드 비율과 지정된 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" /> 개체의 모든 키에 대한 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</param>
      <param name="comparer">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.
또는
각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</param>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
      <summary>지정된 초기 용량과 기본 로드 비율, 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>지정된 초기 용량 및 <see cref="T:System.Collections.Hashtable" />와 기본 로드 비율을 사용하여 <see cref="T:System.Collections.IEqualityComparer" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다. 기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>지정된 초기 용량, 해시 코드 공급자 및 비교자와 기본 로드 비율을 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</param>
      <param name="comparer">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.
또는
각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
      <summary>지정된 초기 용량 및 로드 비율과 기본 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</param>
      <param name="loadFactor">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다. 결과는 버킷과 요소의 최대 비율입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우
또는
<paramref name="loadFactor" />가 0.1보다 작습니다.
또는
<paramref name="loadFactor" />가 1.0보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" />가 오버플로를 일으킬 수 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IEqualityComparer)">
      <summary>지정된 초기 용량, 로드 비율 및 <see cref="T:System.Collections.Hashtable" /> 개체를 사용하여 <see cref="T:System.Collections.IEqualityComparer" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</param>
      <param name="loadFactor">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다. 결과는 버킷과 요소의 최대 비율입니다.</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" />과 함께 사용할 해시 코드 공급자와 비교자를 정의하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
기본 해시 코드 공급자와 기본 비교자를 사용하면 <see langword="null" />입니다. 기본 해시 코드 공급자는 각 키의 <see cref="M:System.Object.GetHashCode" /> 구현이며 기본 비교자는 각 키의 <see cref="M:System.Object.Equals(System.Object)" /> 구현입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우
또는
<paramref name="loadFactor" />가 0.1보다 작습니다.
또는
<paramref name="loadFactor" />가 1.0보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>지정된 초기 용량, 로드 비율, 해시 코드 공급자 및 비교자를 사용하여 <see cref="T:System.Collections.Hashtable" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Hashtable" /> 개체가 처음에 포함할 수 있는 대략적인 요소 수입니다.</param>
      <param name="loadFactor">최고의 성능을 제공하는 기본값으로 곱한 0.1에서 1.0 사이의 수입니다. 결과는 버킷과 요소의 최대 비율입니다.</param>
      <param name="hcp">
        <see cref="T:System.Collections.IHashCodeProvider" />의 모든 키에 해시 코드를 제공하는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.
또는
각 키의 <see cref="M:System.Object.GetHashCode" /> 구현인 기본 해시 코드 공급자를 사용하면 <see langword="null" />입니다.</param>
      <param name="comparer">두 키가 같은지 여부를 확인하는 데 사용할 <see cref="T:System.Collections.IComparer" /> 개체입니다.
또는
각 키로 <see cref="M:System.Object.Equals(System.Object)" />를 구현한 기본 비교자를 사용하면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우
또는
<paramref name="loadFactor" />가 0.1보다 작습니다.
또는
<paramref name="loadFactor" />가 1.0보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 <see cref="T:System.Collections.Hashtable" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 사용하여 serialize할 수 있는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련하여 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Collections.Hashtable" />개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
      <summary>지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.Hashtable" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Hashtable" />에 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.Hashtable" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clear">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에서 요소를 모두 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Clone">
      <summary>
        <see cref="T:System.Collections.Hashtable" />의 부분 복사본을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" />의 부분 복사본입니다.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.comparer">
      <summary>
        <see cref="T:System.Collections.IComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />입니다.</returns>
      <exception cref="T:System.ArgumentException">속성이 값으로 설정되었지만 <see cref="T:System.Collections.IEqualityComparer" />를 사용하여 해시 테이블을 만든 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에 특정 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.Hashtable" />에서 찾을 수 있는 키입니다.</param>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에 특정 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.Hashtable" />에서 찾을 수 있는 키입니다.</param>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Hashtable" />에서 찾을 값입니다. 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>지정된 <see langword="true" />을 가진 요소가 <see cref="T:System.Collections.Hashtable" />에 포함되어 있으면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Hashtable" /> 요소를 지정한 인덱스의 1차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 <see cref="T:System.Collections.DictionaryEntry" /> 개체의 대상인 1차원 <see cref="T:System.Collections.Hashtable" /> 배열입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우
또는
소스 <see cref="T:System.Collections.Hashtable" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
      <exception cref="T:System.InvalidCastException">소스 <see cref="T:System.Collections.Hashtable" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Count">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.EqualityComparer">
      <summary>
        <see cref="T:System.Collections.IEqualityComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEqualityComparer" />에 사용할 <see cref="T:System.Collections.Hashtable" />입니다.</returns>
      <exception cref="T:System.ArgumentException">속성이 값으로 설정되었지만 <see cref="T:System.Collections.IHashCodeProvider" /> 및 <see cref="T:System.Collections.IComparer" />를 사용하여 해시 테이블을 만든 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" />를 반복하는 <see cref="T:System.Collections.Hashtable" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.Hashtable" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
      <summary>지정한 키의 해시 코드를 반환합니다.</summary>
      <param name="key">해시 코드가 반환될 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <paramref name="key" />의 해시 코드입니다.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Hashtable" />을 serialize하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련하여 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Collections.Hashtable" />개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Hashtable.hcp">
      <summary>해시 코드를 분배할 수 있는 개체를 가져오거나 설정합니다.</summary>
      <returns>해시 코드를 분배할 수 있는 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">속성이 값으로 설정되었지만 <see cref="T:System.Collections.IEqualityComparer" />를 사용하여 해시 테이블을 만든 경우</exception>
    </member>
    <member name="P:System.Collections.Hashtable.IsFixedSize">
      <summary>
        <see cref="T:System.Collections.Hashtable" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 의 크기가 고정되어 있으면 <see cref="T:System.Collections.Hashtable" /> 이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Hashtable" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Hashtable" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.IsSynchronized">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.Hashtable" /> 이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Item(System.Object)">
      <summary>지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 값이 있는 키입니다.</param>
      <returns>지정한 키와 연결된 값입니다. 지정한 키가 없는 경우 해당 키를 가져오려고 시도하면 <see langword="null" />이 반환되고 해당 키를 설정하려고 시도하면 지정한 키를 사용하여 새 요소가 만들어집니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">속성이 설정되어 있으며 <see cref="T:System.Collections.Hashtable" />가 읽기 전용인 경우
또는
속성이 설정되어 있고 <paramref name="key" />가 컬렉션에 없으며 <see cref="T:System.Collections.Hashtable" />의 크기가 고정된 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
      <summary>특정 <see cref="T:System.Object" />를 <see cref="T:System.Collections.Hashtable" />의 특정 키와 비교합니다.</summary>
      <param name="item">
        <paramref name="key" />와 비교할 <see cref="T:System.Object" />입니다.</param>
      <param name="key">
        <paramref name="item" />과 비교할 <see cref="T:System.Collections.Hashtable" />의 키입니다.</param>
      <returns>
        <paramref name="item" />과 <paramref name="key" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" />가 <see langword="null" />인 경우
또는
<paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Hashtable.Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.Hashtable" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.Hashtable" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" />과 관련된 <see cref="T:System.Collections.Hashtable" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Hashtable" />이 읽기 전용인 경우
또는
<see cref="T:System.Collections.Hashtable" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼를 반환합니다.</summary>
      <param name="table">동기화할 <see cref="T:System.Collections.Hashtable" />입니다.</param>
      <returns>
        <see cref="T:System.Collections.Hashtable" />에 대해 동기화되어 스레드로부터 안전하게 보호되는 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Hashtable.SyncRoot">
      <summary>
        <see cref="T:System.Collections.Hashtable" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Hashtable" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Hashtable.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Hashtable.Values">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.Hashtable" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.Hashtable" />입니다.</returns>
    </member>
    <member name="T:System.Collections.IHashCodeProvider">
      <summary>사용자 지정 해시 함수를 사용하여 개체에 해시 코드를 제공합니다.</summary>
    </member>
    <member name="M:System.Collections.IHashCodeProvider.GetHashCode(System.Object)">
      <summary>지정한 개체의 해시 코드를 반환합니다.</summary>
      <param name="obj">해시 코드가 반환될 <see cref="T:System.Object" />입니다.</param>
      <returns>지정한 개체의 해시 코드입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 형식이 참조 형식이고 <paramref name="obj" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.ContextBoundObject">
      <summary>모든 컨텍스트 바인딩 클래스에 대한 기본 클래스를 정의합니다.</summary>
    </member>
    <member name="M:System.ContextBoundObject.#ctor">
      <summary>
        <see cref="T:System.ContextBoundObject" /> 클래스의 인스턴스를 인스턴스화합니다.</summary>
    </member>
    <member name="T:System.ContextMarshalException">
      <summary>컨텍스트 경계 전체에 개체를 마샬링하는 데 실패한 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor">
      <summary>기본 속성을 사용하여 <see cref="T:System.ContextMarshalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.ContextMarshalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.ContextMarshalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.ContextMarshalException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.ContextMarshalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>정적 필드의 값이 특정 컨텍스트에 대해 고유함을 나타냅니다.</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>
        <see cref="T:System.ContextStaticAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Convert">
      <summary>기본 데이터 형식을 다른 데이터 형식으로 변환합니다.</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>값이 지정된 개체와 동일한 지정된 형식의 개체를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="conversionType">반환할 개체의 형식입니다.</param>
      <returns>형식이 <paramref name="conversionType" />이고 값이 <paramref name="value" />와 동일한 개체입니다.
또는
<see langword="Nothing" />가 <paramref name="value" />이고 <see langword="null" />이 값 형식이 아닌 경우 null 참조입니다(Visual Basic의 경우 <paramref name="conversionType" />).</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.
또는
<paramref name="value" />가 <see langword="null" />이고 <paramref name="conversionType" />이 값 형식입니다.
또는
<paramref name="value" /> 가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 <paramref name="conversionType" />에서 인식되는 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <paramref name="conversionType" /> 형식의 범위를 벗어나는 숫자를 나타냅니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>지정된 개체와 동일한 값을 갖는 지정된 형식의 개체를 반환합니다. 매개 변수에서 문화권별 서식 지정 정보를 제공합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="conversionType">반환할 개체의 형식입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>형식이 <paramref name="conversionType" />이고 값이 <paramref name="value" />와 동일한 개체입니다.
또는
<paramref name="value" />와 <see cref="T:System.Type" />의 <paramref name="value" />이 같으면 <paramref name="conversionType" />를 반환합니다.
또는
<see langword="Nothing" />가 <paramref name="value" />이고 <see langword="null" />이 값 형식이 아닌 경우 null 참조입니다(Visual Basic의 경우 <paramref name="conversionType" />).</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.
또는
<paramref name="value" />가 <see langword="null" />이고 <paramref name="conversionType" />이 값 형식입니다.
또는
<paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="conversionType" />에서 인식되는 <paramref name="provider" />의 형식이 아닌 경우</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 가 <paramref name="conversionType" />형식의 범위를 벗어나는 숫자를 나타냅니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode)">
      <summary>지정된 개체와 동일한 값을 갖는 지정된 형식의 개체를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="typeCode">반환할 개체의 형식입니다.</param>
      <returns>내부 형식이 <paramref name="typeCode" />이고 값이 <paramref name="value" />와 동일한 개체입니다.
또는
<see langword="Nothing" />가 <paramref name="value" />이고 <see langword="null" />가 <paramref name="typeCode" />, <see cref="F:System.TypeCode.Empty" /> 또는 <see cref="F:System.TypeCode.String" />이면 null 참조(Visual Basic의 경우 <see cref="F:System.TypeCode.Object" />)입니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.
또는
<paramref name="value" />가 <see langword="null" />고 <paramref name="typeCode" />가 값 형식을 지정합니다.
또는
<paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="typeCode" /> 형식에서 인식하는 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <paramref name="typeCode" /> 형식의 범위를 벗어나는 숫자를 나타냅니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>지정된 개체와 동일한 값을 갖는 지정된 형식의 개체를 반환합니다. 매개 변수에서 문화권별 서식 지정 정보를 제공합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="typeCode">반환할 개체의 형식입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>내부 형식이 <paramref name="typeCode" />이고 값이 <paramref name="value" />와 동일한 개체입니다.
또는
<see langword="Nothing" />가 <paramref name="value" />이고 <see langword="null" />가 <paramref name="typeCode" />, <see cref="F:System.TypeCode.Empty" /> 또는 <see cref="F:System.TypeCode.String" />이면 null 참조(Visual Basic의 경우 <see cref="F:System.TypeCode.Object" />)입니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.
또는
<paramref name="value" />가 <see langword="null" />고 <paramref name="typeCode" />가 값 형식을 지정합니다.
또는
<paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="provider" />에서 인식되는 <paramref name="typeCode" /> 형식에 대한 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 가 <paramref name="typeCode" /> 형식의 범위를 벗어나는 숫자를 나타냅니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" />이 잘못되었습니다.</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>데이터가 없는 데이터베이스 열, 즉 null 데이터베이스를 나타내는 상수입니다.</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>base-64 숫자의 이진 데이터를 해당하는 8비트 부호 없는 정수 배열로 인코딩하는 방법으로 유니코드 문자 배열의 하위 집합을 변환합니다. 매개 변수에는 입력 배열의 하위 집합과 변환할 요소 수를 지정합니다.</summary>
      <param name="inArray">유니코드 문자 배열입니다.</param>
      <param name="offset">
        <paramref name="inArray" /> 내의 위치입니다.</param>
      <param name="length">
        <paramref name="inArray" />의 요소 중에서 변환할 요소의 수입니다.</param>
      <returns>
        <paramref name="length" />의 <paramref name="offset" /> 위치에 있는 <paramref name="inArray" /> 요소에 해당하는 8비트 부호 없는 정수를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="length" />가 0 미만입니다.
또는
<paramref name="offset" /> + <paramref name="length" />가 <paramref name="inArray" /> 외부의 위치를 나타냅니다.</exception>
      <exception cref="T:System.FormatException">공백 문자를 무시한 <paramref name="inArray" />의 길이가 0 또는 4의 배수가 아닙니다.
또는
<paramref name="inArray" />의 형식이 잘못되었습니다. <paramref name="inArray" />에 Base-64가 아닌 문자 또는 세 개 이상의 패딩 문자가 있거나 패딩 문자 사이에 공백이 아닌 문자가 있습니다.</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>base-64 숫자의 이진 데이터를 해당하는 8비트 부호 없는 정수 배열로 인코딩하는 방법으로 지정된 문자열을 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>
        <paramref name="s" />에 해당하는 8비트 부호 없는 정수 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">공백 문자를 무시한 <paramref name="s" />의 길이가 0 또는 4의 배수가 아닙니다.
또는
<paramref name="s" />의 형식이 잘못되었습니다. <paramref name="s" />에 Base-64가 아닌 문자 또는 세 개 이상의 패딩 문자가 있거나 패딩 문자 사이에 공백이 아닌 문자가 있습니다.</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>지정된 개체의 <see cref="T:System.TypeCode" />를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <returns>
        <see cref="T:System.TypeCode" />에 대해 <paramref name="value" />를 반환하거나, <see cref="F:System.TypeCode.Empty" />가 <paramref name="value" />이면 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>지정된 개체의 형식이 <see cref="T:System.DBNull" />인지를 나타내는 값을 반환합니다.</summary>
      <param name="value">개체입니다.</param>
      <returns>
        <see langword="true" />의 형식이 <paramref name="value" />이면 <see cref="T:System.DBNull" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>8비트 부호 없는 정수 배열의 하위 집합을 base-64 숫자로 인코딩된 유니코드 문자 배열의 해당하는 하위 집합으로 변환합니다. 매개 변수는 하위 집합을 입력 및 출력 배열의 오프셋으로 지정하고 변환할 입력 배열의 요소 수를 지정합니다.</summary>
      <param name="inArray">8비트 부호 없는 정수로 구성된 입력 배열입니다.</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 내의 위치입니다.</param>
      <param name="length">
        <paramref name="inArray" />의 요소 중에서 변환할 요소의 수입니다.</param>
      <param name="outArray">유니코드 문자로 구성된 출력 배열입니다.</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 내의 위치입니다.</param>
      <returns>
        <paramref name="outArray" />의 바이트 수를 포함하는 32비트 부호 있는 정수를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 또는 <paramref name="outArray" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" /> 또는 <paramref name="length" />가 음수입니다.
또는
<paramref name="offsetIn" /> + <paramref name="length" />가 <paramref name="inArray" />의 길이보다 큽니다.
또는
<paramref name="offsetOut" /> + 반환할 요소 수가 <paramref name="outArray" />의 길이보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
      <summary>8비트 부호 없는 정수 배열의 하위 집합을 base-64 숫자로 인코딩된 유니코드 문자 배열의 해당하는 하위 집합으로 변환합니다. 매개 변수는 하위 집합을 입력 및 출력 배열의 오프셋으로 지정하고, 변환할 입력 배열의 요소 수를 지정하고, 출력 배열에 줄 바꿈을 삽입할지를 지정합니다.</summary>
      <param name="inArray">8비트 부호 없는 정수로 구성된 입력 배열입니다.</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 내의 위치입니다.</param>
      <param name="length">
        <paramref name="inArray" />의 요소 중에서 변환할 요소의 수입니다.</param>
      <param name="outArray">유니코드 문자로 구성된 출력 배열입니다.</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 내의 위치입니다.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />는 76자마다 줄 바꿈을 삽입하며 <see cref="F:System.Base64FormattingOptions.None" />은 줄 바꿈을 삽입하지 않습니다.</param>
      <returns>
        <paramref name="outArray" />의 바이트 수를 포함하는 32비트 부호 있는 정수를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 또는 <paramref name="outArray" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />, <paramref name="offsetOut" /> 또는 <paramref name="length" />가 음수입니다.
또는
<paramref name="offsetIn" /> + <paramref name="length" />가 <paramref name="inArray" />의 길이보다 큽니다.
또는
<paramref name="offsetOut" /> + 반환할 요소 수가 <paramref name="outArray" />의 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" />는 유효한 <see cref="T:System.Base64FormattingOptions" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>8비트 부호 없는 정수로 구성된 배열을 base-64 숫자로 인코딩된 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="inArray">8비트 부호 없는 정수로 구성된 배열입니다.</param>
      <returns>
        <paramref name="inArray" />의 내용에 대한 base 64 숫자의 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
      <summary>8비트 부호 없는 정수로 구성된 배열을 base-64 숫자로 인코딩된 해당하는 문자열 표현으로 변환합니다. 반환 값에 줄 바꿈을 삽입할지 여부를 지정할 수 있습니다.</summary>
      <param name="inArray">8비트 부호 없는 정수로 구성된 배열입니다.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />는 76자마다 줄 바꿈을 삽입하며 <see cref="F:System.Base64FormattingOptions.None" />은 줄 바꿈을 삽입하지 않습니다.</param>
      <returns>
        <paramref name="inArray" />의 요소에 대한 base 64 숫자의 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" />는 유효한 <see cref="T:System.Base64FormattingOptions" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>8비트 부호 없는 정수로 구성된 배열의 하위 집합을 base-64 숫자로 인코딩된 해당하는 문자열 표현으로 변환합니다. 매개 변수는 하위 집합을 입력 배열의 오프셋으로 지정하고 변환할 배열의 요소 수를 지정합니다.</summary>
      <param name="inArray">8비트 부호 없는 정수로 구성된 배열입니다.</param>
      <param name="offset">
        <paramref name="inArray" />에 있는 오프셋입니다.</param>
      <param name="length">
        <paramref name="inArray" />의 요소 중에서 변환할 요소의 수입니다.</param>
      <returns>
        <paramref name="length" /> 위치에서 시작하는 <paramref name="inArray" />의 <paramref name="offset" /> 요소에 대한 base 64 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="length" />가 음수입니다.
또는
<paramref name="offset" /> + <paramref name="length" />가 <paramref name="inArray" />의 길이보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
      <summary>8비트 부호 없는 정수로 구성된 배열의 하위 집합을 base-64 숫자로 인코딩된 해당하는 문자열 표현으로 변환합니다. 매개 변수는 하위 집합을 입력 배열의 오프셋으로 지정하고, 배열에서 변환할 요소의 수를 지정하고, 반환 값에 줄 바꿈을 삽입할지를 지정합니다.</summary>
      <param name="inArray">8비트 부호 없는 정수로 구성된 배열입니다.</param>
      <param name="offset">
        <paramref name="inArray" />에 있는 오프셋입니다.</param>
      <param name="length">
        <paramref name="inArray" />의 요소 중에서 변환할 요소의 수입니다.</param>
      <param name="options">
        <see cref="F:System.Base64FormattingOptions.InsertLineBreaks" />는 76자마다 줄 바꿈을 삽입하며 <see cref="F:System.Base64FormattingOptions.None" />은 줄 바꿈을 삽입하지 않습니다.</param>
      <returns>
        <paramref name="length" /> 위치에서 시작하는 <paramref name="inArray" />의 <paramref name="offset" /> 요소에 대한 base 64 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="length" />가 음수입니다.
또는
<paramref name="offset" /> + <paramref name="length" />가 <paramref name="inArray" />의 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" />는 유효한 <see cref="T:System.Base64FormattingOptions" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.ReadOnlySpan{System.Byte},System.Base64FormattingOptions)">
      <summary>지정된 읽기 전용 범위 내의 8비트 부호 없는 정수를 base-64 숫자로 인코딩된 해당하는 문자열 표현으로 변환합니다. 반환 값에 줄 바꿈을 삽입할지 여부를 선택하여 지정할 수 있습니다.</summary>
      <param name="bytes">8비트 부호 없는 정수의 읽기 전용 범위입니다.</param>
      <param name="options">반환 값에 줄 바꿈을 삽입할지 여부를 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Base64FormattingOptions.None" />입니다.</param>
      <returns>
        <paramref name="inArray" />의 요소에 대한 base 64 숫자의 문자열 표현입니다. <paramref name="bytes" />의 길이가 0이면, 빈 문자열이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" />는 유효한 <see cref="T:System.Base64FormattingOptions" /> 값이 아닙니다.</exception>
      <exception cref="T:System.OutOfMemoryException">출력 길이가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>지정된 부울 값을 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>지정된 개체의 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <see langword="true" /> 또는 <see langword="false" />이며, <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />의 내부 형식에 대해 <paramref name="value" /> 메서드를 호출하여 반환된 값을 반영합니다. <paramref name="value" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="F:System.Boolean.TrueString" /> 또는 <see cref="F:System.Boolean.FalseString" />과 다른 문자열입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
<paramref name="value" />에서 <see cref="T:System.Boolean" />로의 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <see langword="true" /> 또는 <see langword="false" />이며, <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />의 내부 형식에 대해 <paramref name="value" /> 메서드를 호출하여 반환된 값을 반영합니다. <paramref name="value" />가 <see langword="null" />이면 메서드에서 <see langword="false" />을 반환합니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="F:System.Boolean.TrueString" /> 또는 <see cref="F:System.Boolean.FalseString" />과 다른 문자열입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
<paramref name="value" />에서 <see cref="T:System.Boolean" />로의 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>논리 값의 지정된 문자열 표현을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">
        <see cref="F:System.Boolean.TrueString" /> 또는 <see cref="F:System.Boolean.FalseString" /> 값이 포함된 문자열입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="value" />과 같으면 <see cref="F:System.Boolean.TrueString" />를 반환하고, <see langword="false" />가 <paramref name="value" />과 같거나 <see cref="F:System.Boolean.FalseString" />이면 <see langword="null" />를 반환합니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="F:System.Boolean.TrueString" /> 또는 <see cref="F:System.Boolean.FalseString" />과 같지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여 논리 값의 지정된 문자열 표현을 해당하는 부울 값으로 변환합니다.</summary>
      <param name="value">
        <see cref="F:System.Boolean.TrueString" /> 또는 <see cref="F:System.Boolean.FalseString" /> 값이 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다. 이 매개 변수는 무시됩니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="value" />과 같으면 <see cref="F:System.Boolean.TrueString" />를 반환하고, <see langword="false" />가 <paramref name="value" />과 같거나 <see cref="F:System.Boolean.FalseString" />이면 <see langword="null" />를 반환합니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="F:System.Boolean.TrueString" /> 또는 <see cref="F:System.Boolean.FalseString" />과 같지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 부울 값으로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <see langword="true" />가 0이 아니면 <paramref name="value" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>가장 가까운 8비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Byte.MaxValue" />보다 크거나 <see cref="F:System.Byte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 8비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Byte.MaxValue" />보다 크거나 <see cref="F:System.Byte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />이(가) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />이(가) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />이(가) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>지정된 개체의 값을 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Byte" /> 값에 대한 속성 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" />를 구현하지 않습니다.
또는
<paramref name="value" />에서 <see cref="T:System.Byte" /> 형식으로의 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Byte" /> 값에 대한 속성 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" />를 구현하지 않습니다.
또는
<paramref name="value" />에서 <see cref="T:System.Byte" /> 형식으로의 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환될 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Byte.MinValue" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 8비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Byte.MaxValue" />보다 크거나 <see cref="F:System.Byte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자의 문자열 표현을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 8비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑수가 10이 아닌 부호 없는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">기수가 10인 부호 없는 숫자를 나타내는 <paramref name="value" />의 접두사가 음수 기호인 경우
또는
<paramref name="value" />은(는) <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Byte.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Byte.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 8비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Byte.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Boolean)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>지정된 유니코드 문자 값을 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Char.MinValue" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />이(가) <see cref="F:System.Char.MinValue" />보다 작거나 <see cref="F:System.Char.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />이(가) <see cref="F:System.Char.MinValue" />보다 작거나 <see cref="F:System.Char.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>지정된 개체의 값을 유니코드 문자로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <returns>값에 해당하는 유니코드 문자이거나, <see cref="F:System.Char.MinValue" />가 <paramref name="value" />이면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null 문자열입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
<paramref name="value" />에서 <see cref="T:System.Char" />로의 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />이(가) <see cref="F:System.Char.MinValue" />보다 작거나 <see cref="F:System.Char.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자이거나, <see cref="F:System.Char.MinValue" />가 <paramref name="value" />이면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 null 문자열입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
<paramref name="value" />에서 <see cref="T:System.Char" />로의 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />이(가) <see cref="F:System.Char.MinValue" />보다 작거나 <see cref="F:System.Char.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Char.MinValue" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>지정된 문자열의 첫째 문자를 유니코드 문자로 변환합니다.</summary>
      <param name="value">길이가 1인 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 첫째 문자인 동시에 유일한 문자에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />의 길이가 1이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>문화권별 서식 지정 정보를 사용하여, 지정된 문자열의 첫째 문자를 유니코드 문자로 변환합니다.</summary>
      <param name="value">길이가 1이거나 <see langword="null" />인 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다. 이 매개 변수는 무시됩니다.</param>
      <returns>
        <paramref name="value" />의 첫째 문자인 동시에 유일한 문자에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />의 길이가 1이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Char.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 유니코드 문자로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 유니코드 문자입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Char.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Boolean)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Byte)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Char)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.DateTime)">
      <summary>지정된 <see cref="T:System.DateTime" /> 개체를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">날짜 및 시간 값입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Decimal)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 숫자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Double)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int16)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int32)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Int64)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>지정된 개체의 값을 <see cref="T:System.DateTime" /> 개체로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />의 값에 해당하는 날짜와 시간이거나, <see cref="F:System.DateTime.MinValue" />가 <paramref name="value" />이면 <see langword="null" />에 해당하는 날짜와 시간입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 올바른 날짜 및 시간 값이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 <see cref="T:System.DateTime" /> 개체로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 값에 해당하는 날짜와 시간이거나, <see cref="F:System.DateTime.MinValue" />가 <paramref name="value" />이면 <see langword="null" />에 해당하는 날짜와 시간입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 올바른 날짜 및 시간 값이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.SByte)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Single)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>날짜와 시간의 지정된 문자열 표현을 해당하는 날짜와 시간 값으로 변환합니다.</summary>
      <param name="value">날짜 및 시간의 문자열 표현입니다.</param>
      <returns>
        <paramref name="value" />의 값에 해당하는 날짜와 시간이거나, <see cref="F:System.DateTime.MinValue" />가 <paramref name="value" />이면 <see langword="null" />에 해당하는 날짜와 시간입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 올바른 형식의 날짜 및 시간 문자열이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 날짜와 시간으로 변환합니다.</summary>
      <param name="value">변환할 날짜 및 시간이 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 값에 해당하는 날짜와 시간이거나, <see cref="F:System.DateTime.MinValue" />가 <paramref name="value" />이면 <see langword="null" />에 해당하는 날짜와 시간입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 올바른 형식의 날짜 및 시간 문자열이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt16)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt32)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.UInt64)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>지정된 10진수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">10진수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Decimal.MaxValue" />보다 크거나 <see cref="F:System.Decimal.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>지정된 개체 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Decimal" /> 형식에 대한 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Decimal" /> 형식에 대한 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Decimal.MaxValue" />보다 크거나 <see cref="F:System.Decimal.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 10진수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 유효한 형식의 숫자가 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 10진수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 유효한 형식의 숫자가 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수 값을 해당하는 10진수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 10진수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />와 값이 같은 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>지정된 개체의 값을 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Double" /> 형식에 대한 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Double" /> 형식에 대한 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 배정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 유효한 형식의 숫자가 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 배정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 유효한 형식의 숫자가 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수 값을 해당하는 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>가장 가까운 16비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 크거나 <see cref="F:System.Int16.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 16비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 크거나 <see cref="F:System.Int16.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수를 반환합니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 크거나 <see cref="F:System.Int16.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 크거나 <see cref="F:System.Int16.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>지정된 개체의 값을 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Int16" /> 형식에 대한 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <see cref="T:System.Int16" /> 형식에 대한 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 가 <see cref="T:System.IConvertible" />를 구현하지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 16비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 크거나 <see cref="F:System.Int16.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 16비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 16비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자에 대한 문자열 표현을 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 16비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는<paramref name="value" />입니다.
또는
<paramref name="value" />은(는) <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 16비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>가장 가까운 32비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int32.MaxValue" />보다 크거나 <see cref="F:System.Int32.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 32비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int32.MaxValue" />보다 크거나 <see cref="F:System.Int32.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int32.MaxValue" />보다 크거나 <see cref="F:System.Int32.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>지정된 개체의 값을 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" />를 구현하지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 32비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int32.MaxValue" />보다 크거나 <see cref="F:System.Int32.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 32비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 32비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자에 대한 문자열 표현을 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 32비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는<paramref name="value" />입니다.
또는
<paramref name="value" />은(는) <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 32비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>가장 가까운 64비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int64.MaxValue" />보다 크거나 <see cref="F:System.Int64.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 64비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int64.MaxValue" />보다 크거나 <see cref="F:System.Int64.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>지정된 개체의 값을 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 64비트 부호 있는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int64.MaxValue" />보다 크거나 <see cref="F:System.Int64.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 64비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 64비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자에 대한 문자열 표현을 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 64비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는<paramref name="value" />입니다.
또는
<paramref name="value" />은(는) <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 64비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int64.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>가장 가까운 8비트 부호 있는 정수로 반올림되는 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 8비트 부호 있는 정수로 반올림되는 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>지정된 개체의 값을 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 8비트 부호 있는 정수로 반올림되는 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 8비트 부호 있는 정수이거나, value가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자에 대한 문자열 표현을 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 8비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">밑이 10이 아닌 부호 있는 숫자를 나타내고 음수 기호가 앞에 붙는<paramref name="value" />입니다.
또는
<paramref name="value" />은(는) <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 8비트 부호 있는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MaxValue" />보다 크거나 <see cref="F:System.SByte.MinValue" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.
<paramref name="value" />가 가장 가까운 수로 반올림됩니다. 예를 들어, 소수점 두 자리로 반올림하면 2.345는 2.34가 되고 2.355는 2.36이 됩니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.
<paramref name="value" />가 가장 가까운 수로 반올림됩니다. 예를 들어, 소수점 두 자리로 반올림하면 2.345는 2.34가 되고 2.355는 2.36이 됩니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>지정된 개체의 값을 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" />를 구현하지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 8비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 단정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 유효한 형식의 숫자가 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 단정밀도 부동 소수점 숫자이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 유효한 형식의 숫자가 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수 값을 해당하는 단정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>지정된 부울 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <param name="provider">개체의 인스턴스입니다. 이 매개 변수는 무시됩니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 8비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>8비트 부호 없는 정수의 값을 특정 기수의 해당 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <param name="toBase">반환 값의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" /> 기수를 사용한 <paramref name="toBase" />의 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" />가 2, 8, 10 또는 16이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 유니코드 문자의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다. 이 매개 변수는 무시됩니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>지정된 <see cref="T:System.DateTime" />의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 <see cref="T:System.DateTime" />의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>지정된 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 10진수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 16비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>16비트 부호 있는 정수 값을 지정된 기수의 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <param name="toBase">반환 값의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" /> 기수를 사용한 <paramref name="toBase" />의 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" />가 2, 8, 10 또는 16이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 32비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>32비트 부호 있는 정수 값을 지정된 기수의 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <param name="toBase">반환 값의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" /> 기수를 사용한 <paramref name="toBase" />의 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" />가 2, 8, 10 또는 16이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 64비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>64비트 부호 있는 정수 값을 지정된 기수의 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <param name="toBase">반환 값의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" /> 기수를 사용한 <paramref name="toBase" />의 문자열 표현입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" />가 2, 8, 10 또는 16이 아닙니다.</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>지정된 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 값을 제공하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />이 <see langword="null" />인 경우 <paramref name="value" /> 또는 <see cref="F:System.String.Empty" /> 값의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 값을 제공하는 개체나 <see langword="null" />입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />가 값이 <see cref="F:System.String.Empty" />인 개체인 경우 문자열 표시가 <paramref name="value" /> 또는 <see langword="null" />입니다. <paramref name="value" />가 <see langword="null" />이면 메서드에서 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 8비트 부호 있는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 단정밀도 부동 소수점 숫자 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String)">
      <summary>지정된 문자열 인스턴스를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 문자열입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.String,System.IFormatProvider)">
      <summary>지정된 문자열 인스턴스를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다. 이 매개 변수는 무시됩니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 16비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 32비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 64비트 부호 없는 정수 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>가장 가까운 16비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 16비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>지정된 개체의 값을 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 16비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 16비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 16비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자의 문자열 표현을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 16비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑수가 10이 아닌 부호 없는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">밑수가 10이 아닌 부호 없는 숫자를 나타내고 음수 기호가 앞에 붙는<paramref name="value" />입니다.
또는
<paramref name="value" />은(는) <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.UInt16.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 16비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 16비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.UInt16.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>가장 가까운 32비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 32비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>지정된 개체의 값을 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 32비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 32비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 32비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자의 문자열 표현을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 32비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑수가 10이 아닌 부호 없는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">밑수가 10이 아닌 부호 없는 숫자를 나타내고 음수 기호가 앞에 붙는<paramref name="value" />입니다.
또는
<paramref name="value" />은(는) <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수의 값을 해당하는 32비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 32비트 부호 없는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.UInt32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>지정된 부울 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 부울 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see langword="true" />이면 숫자 1을 반환하고, 그렇지 않으면 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>지정된 8비트 부호 없는 정수의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>지정된 유니코드 문자의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 유니코드 문자입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.DateTime)">
      <summary>이 메서드를 호출하면 <see cref="T:System.InvalidCastException" />이 항상 throw됩니다.</summary>
      <param name="value">변환할 날짜 및 시간 값입니다.</param>
      <returns>이 변환은 지원되지 않습니다. 값이 반환되지 않습니다.</returns>
      <exception cref="T:System.InvalidCastException">이 변환은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>지정된 10진수 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 10진수입니다.</param>
      <returns>가장 가까운 64비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 64비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>지정된 16비트 부호 있는 정수의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>지정된 32비트 부호 있는 정수의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>지정된 64비트 부호 있는 정수의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 64비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>지정된 개체의 값을 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체나 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 지정된 개체의 값을 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.IConvertible" /> 인터페이스를 구현하는 개체</param>
      <param name="provider">문화권별 형식 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 적절한 형식이 아닙니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" />가 <see cref="T:System.IConvertible" /> 인터페이스를 구현하지 않습니다.
또는
이 변환은 지원되지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>지정된 8비트 부호 있는 정수의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 8비트 부호 있는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>가장 가까운 64비트 부호 없는 정수로 반올림된 <paramref name="value" />입니다. <paramref name="value" />가 두 정수 사이의 값이면 짝수 값을 반환합니다. 예를 들어 4.5는 4로, 5.5는 6으로 변환됩니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 0보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>숫자의 지정된 문자열 표현을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 64비트 부호 있는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>지정된 문화권별 서식 지정 정보를 사용하여, 숫자의 지정된 문자열 표현을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="provider">문화권별 서식 지정 정보를 제공하는 개체입니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 64비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 선택적 부호와 숫자 시퀀스(0~9)로 구성되어 있지 않습니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />은(는) <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>지정된 기수로 나타낸 숫자의 문자열 표현을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 숫자가 포함된 문자열입니다.</param>
      <param name="fromBase">
        <paramref name="value" />에 지정된 숫자의 기수로서 2, 8, 10 또는 16이어야 합니다.</param>
      <returns>
        <paramref name="value" />의 숫자에 해당하는 64비트 부호 없는 정수이거나, <paramref name="value" />가 <see langword="null" />이면 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" />가 2, 8, 10 또는 16이 아닙니다.
또는
밑수가 10이 아닌 부호 없는 숫자를 나타내고 음수 기호가 앞에 붙는 <paramref name="value" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 <see cref="F:System.String.Empty" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 <paramref name="fromBase" />에 지정된 밑에서 유효한 숫자가 아닌 문자를 포함합니다. 예외 메시지는 <paramref name="value" />의 첫 문자가 유효하지 않은 경우 변환할 숫자가 없음을 나타내고, 유효한 경우 <paramref name="value" />에 잘못된 후행 문자가 있다고 나타냅니다.</exception>
      <exception cref="T:System.OverflowException">밑수가 10이 아닌 부호 없는 숫자를 나타내고 음수 기호가 앞에 붙는<paramref name="value" />입니다.
또는
<paramref name="value" />은(는) <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>지정된 16비트 부호 없는 정수의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 16비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>지정된 32비트 부호 없는 정수의 값을 해당하는 64비트 부호 없는 정수로 변환합니다.</summary>
      <param name="value">변환할 32비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />에 해당하는 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>지정된 64비트 부호 없는 정수를 실제 변환 작업 없이 반환합니다.</summary>
      <param name="value">반환할 64비트 부호 없는 정수입니다.</param>
      <returns>
        <paramref name="value" />를 변경하지 않고 반환합니다.</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64Chars(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@)">
      <summary>Base 64 숫자로 인코딩된 문자열 표현을 포함하는 지정된 범위를 8비트 부호 없는 정수의 범위로 변환하도록 시도합니다.</summary>
      <param name="chars">Base 64 숫자로 인코딩된 문자열 표현을 포함하는 범위입니다.</param>
      <param name="bytes">이 메서드가 <see langword="true" />을 반환할 경우 변환된 8비트 부호 없는 정수입니다. 이 메서드가 <see langword="false" />을 반환할 경우, 범위가 수정되지 않은 상태로 유지되거나 <paramref name="chars" />의 불완전한 변환을 마지막 유효한 문자까지 포함합니다.</param>
      <param name="bytesWritten">이 메서드가 반환할 때 <paramref name="bytes" />에 쓴 바이트 수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 실패했으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Convert.TryFromBase64String(System.String,System.Span{System.Byte},System.Int32@)">
      <summary>Base 64 숫자로 인코딩된 지정된 문자열 표현을 8비트 부호 없는 정수의 범위로 변환하도록 시도합니다.</summary>
      <param name="s">Base 64 숫자로 인코딩된 문자열 표현입니다.</param>
      <param name="bytes">이 메서드가 <see langword="true" />을 반환할 경우 변환된 8비트 부호 없는 정수입니다. 이 메서드가 <see langword="false" />을 반환할 경우, 범위가 수정되지 않은 상태로 유지되거나 <paramref name="s" />의 불완전한 변환을 마지막 유효한 문자까지 포함합니다.</param>
      <param name="bytesWritten">이 메서드가 반환할 때 <paramref name="bytes" />에 쓴 바이트 수입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 실패했으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Convert.TryToBase64Chars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Base64FormattingOptions)">
      <summary>지정된 읽기 전용 범위 내의 8비트 부호 없는 정수를 base 64 숫자로 인코딩된 해당하는 문자열 표현으로 변환하도록 시도합니다. 반환 값에 줄 바꿈을 삽입할지 여부를 선택하여 지정할 수 있습니다.</summary>
      <param name="bytes">8비트 부호 없는 정수의 읽기 전용 범위입니다.</param>
      <param name="chars">이 메서드가 <see langword="true" />로 반환될 경우 <paramref name="bytes" />의 요소의 Base 64 문자열 표현을 포함하는 범위입니다. <paramref name="bytes" />의 길이가 0이거나 이 메서드가 <paramref name="false" />를 반환할 경우, 이 매개 변수에는 아무 것도 기록되지 않습니다.</param>
      <param name="charsWritten">이 메서드가 반환될 경우 <paramref name="chars" />에 기록되는 총 문자 수입니다.</param>
      <param name="options">반환 값에 줄 바꿈을 삽입할지 여부를 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Base64FormattingOptions.None" />입니다.</param>
      <returns>성공적으로 변환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" />는 유효한 <see cref="T:System.Base64FormattingOptions" /> 값이 아닙니다.</exception>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>경과 시간을 정확하게 측정하는 데 사용할 수 있는 일련의 메서드와 속성을 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Stopwatch" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>현재 인스턴스가 측정한 총 경과 시간을 가져옵니다.</summary>
      <returns>현재 인스턴스가 측정한 총 경과 시간을 나타내는 읽기 전용 <see cref="T:System.TimeSpan" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>현재 인스턴스가 측정한 밀리초 단위의 총 경과 시간을 가져옵니다.</summary>
      <returns>현재 인스턴스가 측정한 총 밀리초 수를 나타내는 읽기 전용 정수(Long)입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>현재 인스턴스가 측정한 총 경과 시간(타이머 틱 수)을 가져옵니다.</summary>
      <returns>현재 인스턴스가 측정한 총 타이머 틱 수를 나타내는 읽기 전용 정수(Long)입니다.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>초당 틱 수로 나타낸 타이머 진동수를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>타이머 메커니즘에서 현재 틱 수를 가져옵니다.</summary>
      <returns>내부 타이머 메커니즘의 틱 카운터 값을 나타내는 정수(Long)입니다.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>타이머가 고정밀도 성능 카운터를 기반으로 하는지 여부를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>
        <see cref="T:System.Diagnostics.Stopwatch" /> 타이머가 실행 중인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Diagnostics.Stopwatch" /> 인스턴스가 간격의 경과 시간을 측정하면서 실행되고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>시간 간격 측정을 중지하고 경과 시간을 0으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>시간 간격 측정을 중지하고 경과 시간 값을 0으로 다시 설정한 다음 경과 시간 측정을 시작합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>간격에 대한 경과 시간 측정을 시작하거나 다시 시작합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>새 <see cref="T:System.Diagnostics.Stopwatch" /> 인스턴스를 초기화하고 경과 시간 속성을 0으로 설정한 다음 경과 시간 측정을 시작합니다.</summary>
      <returns>경과 시간 측정을 방금 시작한 <see cref="T:System.Diagnostics.Stopwatch" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>간격에 대한 경과 시간 측정을 중지합니다.</summary>
    </member>
    <member name="T:System.Environment">
      <summary>현재 환경 및 플랫폼에 대한 정보 및 조작 방법을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.Environment.CommandLine">
      <summary>이 프로세스에 대한 명령줄을 가져옵니다.</summary>
      <returns>명령줄 인수가 포함된 문자열입니다.</returns>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>현재 작업 디렉터리의 정규화된 경로를 가져오거나 설정합니다.</summary>
      <returns>디렉터리 경로가 포함된 문자열입니다.</returns>
      <exception cref="T:System.ArgumentException">빈 문자열("")로 설정하려고 했습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null." />로 설정하려고 했습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">찾을 수 없는 로컬 경로를 설정하려고 했습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 해당 권한이 없습니다.</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>현재 관리되는 스레드의 고유 식별자를 가져옵니다.</summary>
      <returns>이 관리되는 스레드의 고유 식별자를 나타내는 정수입니다.</returns>
    </member>
    <member name="M:System.Environment.Exit(System.Int32)">
      <summary>이 프로세스를 종료하고 운영 체제에 종료 코드를 반환합니다.</summary>
      <param name="exitCode">운영 체제에 반환할 종료 코드입니다. 프로세스가 완료되었음을 나타내려면 0을 사용합니다.</param>
      <exception cref="T:System.Security.SecurityException">호출자에게 이 기능을 수행하기 위한 충분한 보안 권한이 없습니다.</exception>
    </member>
    <member name="P:System.Environment.ExitCode">
      <summary>프로세스의 종료 코드를 가져오거나 설정합니다.</summary>
      <returns>종료 코드가 포함된 32비트 부호 있는 정수입니다. 기본값은 프로세스가 완료되었음을 나타내는 0입니다.</returns>
    </member>
    <member name="M:System.Environment.ExpandEnvironmentVariables(System.String)">
      <summary>지정된 문자열에 있는 각 환경 변수 이름을 해당 변수의 값에 해당하는 문자열로 바꾼 다음 결과 문자열을 반환합니다.</summary>
      <param name="name">0개 이상의 환경 변수 이름이 포함된 문자열입니다. 각 환경 변수는 백분율 기호(%)로 묶어야 합니다.</param>
      <returns>각 환경 변수가 해당 값으로 바뀌는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>Windows 애플리케이션 이벤트 로그에 메시지를 쓴 후 프로세스를 즉시 종료한 다음 해당 메시지를 Microsoft로 보내는 오류 보고에 포함시킵니다.</summary>
      <param name="message">프로세스가 종료된 이유를 설명하는 메시지이거나, 설명이 제공되지 않는 경우 <see langword="null" />입니다.</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>Windows 애플리케이션 이벤트 로그에 메시지를 쓴 후 프로세스를 즉시 종료한 다음 해당 메시지와 예외 정보를 Microsoft로 보내는 오류 보고에 포함시킵니다.</summary>
      <param name="message">프로세스가 종료된 이유를 설명하는 메시지이거나, 설명이 제공되지 않는 경우 <see langword="null" />입니다.</param>
      <param name="exception">종료의 원인이 된 오류를 나타내는 예외입니다. 일반적으로 <see langword="catch" /> 블록의 예외입니다.</param>
    </member>
    <member name="M:System.Environment.GetCommandLineArgs">
      <summary>현재 프로세스에 대한 명령줄 인수가 포함된 문자열 배열을 반환합니다.</summary>
      <returns>각 요소에 명령줄 인수가 포함된 문자열의 배열입니다. 첫 번째 요소는 실행 파일 이름이며 다음에 나오는 0개 이상의 요소에는 나머지 명령줄 인수가 들어 있습니다.</returns>
      <exception cref="T:System.NotSupportedException">시스템에서 명령줄 인수를 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String)">
      <summary>현재 프로세스에서 환경 변수의 값을 검색합니다.</summary>
      <param name="variable">환경 변수의 이름입니다.</param>
      <returns>
        <paramref name="variable" />로 지정한 환경 변수의 값이 반환되거나, 환경 변수를 찾을 수 없는 경우 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 이 작업을 수행하는 데 필요한 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
      <summary>현재 프로세스 또는 현재 사용자나 로컬 컴퓨터의 Windows 운영 체제 레지스트리 키에서 환경 변수의 값을 검색합니다.</summary>
      <param name="variable">환경 변수의 이름입니다.</param>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 값 중 하나입니다. Unix 기반 시스템에서 실행되는 .NET Core에서는 <see cref="F:System.EnvironmentVariableTarget.Process" />만 지원됩니다.</param>
      <returns>
        <paramref name="variable" /> 및 <paramref name="target" /> 매개 변수로 지정한 환경 변수의 값이 반환되거나, 환경 변수를 찾을 수 없는 경우 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" />는 유효한 <see cref="T:System.EnvironmentVariableTarget" /> 값이 아닙니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 이 작업을 수행하는 데 필요한 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables">
      <summary>현재 프로세스에서 모든 환경 변수 이름과 해당 값을 검색합니다.</summary>
      <returns>모든 환경 변수 이름과 해당 값을 포함하는 사전이 반환되고, 환경 변수를 찾을 수 없는 경우 빈 사전이 반환됩니다.</returns>
      <exception cref="T:System.Security.SecurityException">호출자에게 이 작업을 수행하는 데 필요한 권한이 없습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">버퍼 메모리가 부족합니다.</exception>
    </member>
    <member name="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
      <summary>현재 프로세스 또는 현재 사용자나 로컬 컴퓨터의 Windows 운영 체제 레지스트리 키에서 모든 환경 변수 이름과 해당 값을 검색합니다.</summary>
      <param name="target">
        <see cref="T:System.EnvironmentVariableTarget" /> 값 중 하나입니다. Unix 기반 시스템에서 실행되는 .NET Core에서는 <see cref="F:System.EnvironmentVariableTarget.Process" />만 지원됩니다.</param>
      <returns>
        <paramref name="target" /> 매개 변수로 지정한 원본의 모든 환경 변수 이름과 해당 값을 포함하는 사전이 반환되거나, 환경 변수를 찾을 수 없는 경우 빈 사전이 반환됩니다.</returns>
      <exception cref="T:System.Security.SecurityException">호출자에게 <paramref name="target" />의 지정된 값에 대해 이 작업을 수행하는 데 필요한 권한이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" />이 잘못된 값을 포함합니다.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>지정된 열거형으로 식별되는 시스템 특수 폴더의 경로를 가져옵니다.</summary>
      <param name="folder">시스템 관련 폴더를 식별하는 열거형 값 중 하나입니다.</param>
      <returns>해당 폴더가 실제로 컴퓨터에 있으면 지정한 시스템 특수 폴더에 대한 경로이고, 그렇지 않으면 빈 문자열("")입니다.
운영 체제에서 폴더를 만들지 않았거나, 기존 폴더가 삭제되었거나, 폴더가 My Computer와 같이 실제 경로에 해당하지 않는 가상 디렉터리인 경우 해당 폴더는 실제로 존재하지 않습니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" />는 <see cref="T:System.Environment.SpecialFolder" />의 멤버가 아닙니다.</exception>
      <exception cref="T:System.PlatformNotSupportedException">현재 플랫폼이 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
      <summary>지정된 열거형으로 식별되는 시스템 특수 폴더에 대한 경로를 가져오고 특수 폴더에 액세스하는 데 지정한 옵션을 사용합니다.</summary>
      <param name="folder">시스템 관련 폴더를 식별하는 열거형 값 중 하나입니다.</param>
      <param name="option">특수 폴더에 액세스하는 데 사용할 옵션을 지정하는 열거형 값 중 하나입니다.</param>
      <returns>해당 폴더가 실제로 컴퓨터에 있으면 지정한 시스템 특수 폴더에 대한 경로이고, 그렇지 않으면 빈 문자열("")입니다.
운영 체제에서 폴더를 만들지 않았거나, 기존 폴더가 삭제되었거나, 폴더가 My Computer와 같이 실제 경로에 해당하지 않는 가상 디렉터리인 경우 해당 폴더는 실제로 존재하지 않습니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" />는 <see cref="T:System.Environment.SpecialFolder" />의 멤버가 아닙니다.
또는
<paramref name="options" />는 <see cref="T:System.Environment.SpecialFolderOption" />의 멤버가 아닙니다.</exception>
      <exception cref="T:System.PlatformNotSupportedException">현재 플랫폼이 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Environment.GetLogicalDrives">
      <summary>현재 컴퓨터의 논리 드라이브 이름이 포함된 문자열의 배열을 반환합니다.</summary>
      <returns>각 요소에 논리 드라이브의 이름이 포함된 문자열의 배열입니다. 예를 들어 컴퓨터의 하드 드라이브가 첫 번째 논리 드라이브일 경우, 반환되는 첫 번째 요소는 "C:\"입니다.</returns>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 사용 권한이 없습니다.</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>현재 애플리케이션 도메인이 언로드되고 있는지 또는 CLR(공용 언어 런타임)이 종료되고 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 응용 프로그램 도메인이 언로드되고 있거나 CLR이 종료 되 고 있으면를 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Environment.Is64BitOperatingSystem">
      <summary>현재 운영 체제가 64비트 운영 체제인지를 확인합니다.</summary>
      <returns>운영 체제가 64비트이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Environment.Is64BitProcess">
      <summary>현재 프로세스가 64비트 프로세스인지를 확인합니다.</summary>
      <returns>프로세스가 64비트이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Environment.MachineName">
      <summary>이 로컬 컴퓨터의 NetBIOS 이름을 가져옵니다.</summary>
      <returns>이 컴퓨터의 이름이 포함된 문자열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 컴퓨터의 이름을 가져올 수 없습니다.</exception>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>이 환경에 대해 정의된 줄 바꿈 문자열을 가져옵니다.</summary>
      <returns>Unix 이외의 플랫폼의 경우 "\r\n"을 포함하는 문자열이거나 Unix 플랫폼의 경우 "\n"을 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>현재 플랫폼 식별자와 버전 번호가 들어 있는 <see cref="T:System.OperatingSystem" /> 개체를 가져옵니다.</summary>
      <returns>플랫폼 식별자와 버전 번호가 포함된 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성은 시스템 버전을 가져올 수 없습니다.
또는
가져온 플랫폼 식별자가 <see cref="T:System.PlatformID" />의 멤버가 아닙니다.</exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>현재 컴퓨터의 프로세서 수를 가져옵니다.</summary>
      <returns>현재 컴퓨터의 프로세서 수를 지정하는 32비트 부호 있는 정수입니다. 기본값은 없습니다. 현재 컴퓨터에 여러 프로세서 그룹이 포함되어 있으면 이 속성을 통해 CLR(공용 언어 런타임)에서 사용할 수 있는 논리 프로세서 수가 반환됩니다.</returns>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
      <summary>현재 프로세스에 저장되어 있는 환경 변수를 생성, 수정 또는 삭제합니다.</summary>
      <param name="variable">환경 변수의 이름입니다.</param>
      <param name="value">
        <paramref name="variable" />에 할당할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 에 빈 문자열, 초기 16진수 0 문자(0x00) 또는 등호("=")가 포함되어 있습니다.
또는
<paramref name="variable" /> 또는 <paramref name="value" />의 길이가 32,767자보다 크거나 같습니다.
또는
이 작업을 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 이 작업을 수행하는 데 필요한 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
      <summary>현재 프로세스 또는 현재 사용자나 로컬 컴퓨터에 예약된 Windows 운영 체제 레지스트리 키에 저장되어 있는 환경 변수를 생성, 수정 또는 삭제합니다.</summary>
      <param name="variable">환경 변수의 이름입니다.</param>
      <param name="value">
        <paramref name="variable" />에 할당할 값입니다.</param>
      <param name="target">환경 변수의 위치를 지정하는 열거형 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variable" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variable" /> 에 빈 문자열, 초기 16진수 0 문자(0x00) 또는 등호("=")가 포함되어 있습니다.
또는
<paramref name="variable" />의 길이가 32,767자보다 크거나 같은 경우
또는
<paramref name="target" /> 이 <see cref="T:System.EnvironmentVariableTarget" /> 열거형의 멤버가 아닙니다.
또는
<paramref name="target" /> 이 <see cref="F:System.EnvironmentVariableTarget.Machine" /> 또는 <see cref="F:System.EnvironmentVariableTarget.User" />이고, <paramref name="variable" /> 의 길이가 255보다 크거나 같습니다.
또는
<paramref name="target" /> 이 <see cref="F:System.EnvironmentVariableTarget.Process" /> 이고 <paramref name="value" /> 의 길이가 32,767자보다 크거나 같습니다.
또는
이 작업을 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 이 작업을 수행하는 데 필요한 권한이 없습니다.</exception>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>시스템 특수 폴더에 대한 디렉터리 경로를 검색하는 데 사용되는 열거 상수를 지정합니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.AdminTools">
      <summary>개별 사용자를 위한 관리 도구를 저장하는 데 사용되는 파일 시스템 디렉터리입니다. MMC(Microsoft Management Console)에서는 사용자 지정 콘솔을 이 디렉터리에 저장하며 사용자와 로밍합니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>현재 로밍 사용자의 애플리케이션 관련 데이터에 대한 공용 리포지토리로 사용되는 디렉터리입니다. 로밍 사용자는 네트워크에 있는 둘 이상의 컴퓨터에서 작업합니다. 로밍 사용자 프로필은 네트워크의 서버에서 유지되고 사용자가 로그온할 때 시스템으로 로드됩니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CDBurning">
      <summary>CD에 기록될 때까지 기다리는 파일을 위한 스테이징 영역으로 사용되는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonAdminTools">
      <summary>컴퓨터의 모든 사용자를 위한 관리 도구가 들어 있는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonApplicationData">
      <summary>모든 사용자가 사용하는 애플리케이션 관련 데이터에 대한 공용 리포지토리로 사용되는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDesktopDirectory">
      <summary>모든 사용자의 바탕 화면에 나타나는 파일 및 폴더가 들어 있는 파일 시스템 디렉터리입니다. 이 특수 폴더는 Windows NT 시스템에서만 사용할 수 있습니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonDocuments">
      <summary>모든 사용자에게 공통된 문서가 들어 있는 파일 시스템 디렉터리입니다. 이 특수 폴더는 Shfolder.dll이 설치된 Windows NT 시스템, Windows 95 및 Windows 98 시스템에서 사용할 수 있습니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonMusic">
      <summary>모든 사용자에게 공통된 음악 파일의 리포지토리로 사용되는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonOemLinks">
      <summary>이 값은 이전 버전과의 호환성을 위해 Windows Vista에서 인식되지만 특수 폴더 자체는 더 이상 사용되지 않습니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPictures">
      <summary>모든 사용자에게 공통된 이미지 파일의 리포지토리로 사용되는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFiles">
      <summary>전체 애플리케이션에서 공유되는 구성 요소에 대한 디렉터리입니다.
비 x86 시스템의 x86 공통 프로그램 파일 디렉터리를 가져오려면 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 멤버를 사용합니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonProgramFilesX86">
      <summary>Program Files 폴더입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonPrograms">
      <summary>애플리케이션 간에 공유되는 구성 요소에 대한 폴더입니다. 이 특수 폴더는 Windows NT, Windows 2000 및 Windows XP 시스템에서만 사용할 수 있습니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartMenu">
      <summary>모든 사용자의 시작 메뉴에 나타나는 프로그램 및 폴더가 들어 있는 파일 시스템 디렉터리입니다. 이 특수 폴더는 Windows NT 시스템에서만 사용할 수 있습니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonStartup">
      <summary>모든 사용자의 시작 폴더에 나타나는 프로그램이 들어 있는 파일 시스템 디렉터리입니다. 이 특수 폴더는 Windows NT 시스템에서만 사용할 수 있습니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonTemplates">
      <summary>모든 사용자가 사용할 수 있는 템플릿이 들어 있는 파일 시스템 디렉터리입니다. 이 특수 폴더는 Windows NT 시스템에서만 사용할 수 있습니다.  .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.CommonVideos">
      <summary>모든 사용자에게 공통된 비디오 파일의 리포지토리로 사용되는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Cookies">
      <summary>인터넷 쿠키에 대한 공용 리포지토리로 사용되는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Desktop">
      <summary>실제 파일 시스템 위치가 아니라 논리 데스크톱입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.DesktopDirectory">
      <summary>데스크톱에서 실제로 파일 개체를 저장하는 데 사용되는 디렉터리입니다. 가상 폴더인 데스크톱 폴더 자체와 이 디렉터리를 혼동하지 마세요.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>사용자가 즐겨찾는 항목에 대한 공용 리포지토리로 사용되는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Fonts">
      <summary>글꼴이 들어 있는 가상 폴더입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.History">
      <summary>인터넷 기록 항목에 대한 공용 리포지토리로 사용되는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.InternetCache">
      <summary>임시 인터넷 파일에 대한 공용 리포지토리로 사용되는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalApplicationData">
      <summary>현재 로밍하지 않은 사용자가 사용하는 애플리케이션 관련 데이터에 대한 공용 리포지토리로 사용되는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.LocalizedResources">
      <summary>지역화된 리소스 데이터가 들어 있는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyComputer">
      <summary>내 컴퓨터 폴더입니다. <see langword="Environment.GetFolderPath" /> 메서드에 전달되면 <see langword="MyComputer" /> 열거형 멤버는 항상 빈 문자열(“”)을 생성합니다. 내 컴퓨터 폴더의 경로가 정의되지 않았기 때문입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyDocuments">
      <summary>내 문서 폴더입니다. 이 멤버는 <see cref="F:System.Environment.SpecialFolder.Personal" />에 해당합니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyMusic">
      <summary>내 음악 폴더입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyPictures">
      <summary>내 그림 폴더입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.MyVideos">
      <summary>사용자에 속한 동영상의 리포지토리로 사용되는 파일 시스템 디렉터리입니다.  .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.NetworkShortcuts">
      <summary>네트워크 환경 가상 폴더에 있을 수 있는 링크 개체가 들어 있는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>문서에 대한 공용 리포지토리로 사용되는 디렉터리입니다.  이 멤버는 <see cref="F:System.Environment.SpecialFolder.MyDocuments" />에 해당합니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.PrinterShortcuts">
      <summary>프린터 가상 폴더에 있을 수 있는 링크 개체가 들어 있는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFiles">
      <summary>프로그램 파일 디렉터리입니다.
x86 이외의 시스템에서 <see cref="F:System.Environment.SpecialFolder.ProgramFiles" />를 <see cref="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" /> 메서드로 전달하면 x86이 아닌 프로그램의 경로가 반환됩니다. 비 x86 시스템의 x86 프로그램 파일 디렉터리를 가져오려면 <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86" /> 멤버를 사용합니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ProgramFilesX86">
      <summary>x86 Program Files 폴더입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>사용자의 프로그램 그룹이 들어 있는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Recent">
      <summary>사용자가 가장 최근에 사용한 문서가 들어 있는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Resources">
      <summary>리소스 데이터가 들어 있는 파일 시스템 디렉터리입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SendTo">
      <summary>보내기 메뉴 항목이 들어 있는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>시작 메뉴 항목이 들어 있는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>사용자의 시작 프로그램 그룹에 해당하는 디렉터리입니다. 사용자가 로그온하거나 Windows를 시작할 때마다 시스템에서 이러한 프로그램이 시작됩니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.System">
      <summary>시스템 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.SystemX86">
      <summary>Windows System 폴더입니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Templates">
      <summary>문서 템플릿에 대한 공용 리포지토리로 사용되는 디렉터리입니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.UserProfile">
      <summary>사용자의 프로필 폴더입니다. 애플리케이션에서는 이 수준에 파일이나 폴더를 만들 수 없으며 <see cref="F:System.Environment.SpecialFolder.ApplicationData" />에서 참조되는 위치 아래에 데이터를 두어야 합니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Windows">
      <summary>Windows 디렉터리 또는 SYSROOT입니다. %windir% 또는 %SYSTEMROOT% 환경 변수에 해당합니다. .NET Framework 4에 추가되었습니다.</summary>
    </member>
    <member name="T:System.Environment.SpecialFolderOption">
      <summary>특수 폴더의 경로를 가져오는 데 사용할 옵션을 지정합니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.Create">
      <summary>폴더가 없으면 폴더의 경로가 만들어집니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.DoNotVerify">
      <summary>폴더 경로는 경로의 존재 여부를 확인하지 않고 반환됩니다. 폴더가 네트워크에 있는 경우 이 옵션을 지정하여 지연 시간을 줄일 수 있습니다.</summary>
    </member>
    <member name="F:System.Environment.SpecialFolderOption.None">
      <summary>폴더의 경로를 확인합니다. 폴더가 있으면 경로가 반환됩니다. 폴더가 없는 경우에는 빈 문자열이 반환됩니다. 이것은 기본적인 동작입니다.</summary>
    </member>
    <member name="P:System.Environment.StackTrace">
      <summary>현재 스택 추적 정보를 가져옵니다.</summary>
      <returns>스택 추적 정보가 포함된 문자열입니다. 이 값은 <see cref="F:System.String.Empty" />일 수 있습니다.</returns>
    </member>
    <member name="P:System.Environment.SystemDirectory">
      <summary>시스템 디렉터리의 정규화된 경로를 가져옵니다.</summary>
      <returns>디렉터리 경로가 포함된 문자열입니다.</returns>
    </member>
    <member name="P:System.Environment.SystemPageSize">
      <summary>운영 체제의 메모리 페이지에서 바이트 수를 가져옵니다.</summary>
      <returns>시스템 메모리 페이지의 바이트 수입니다.</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>시스템 시작 이후 경과 시간(밀리초)을 가져옵니다.</summary>
      <returns>컴퓨터가 마지막으로 시작된 이후 경과된 시간(밀리초)을 포함하는 부호 있는 32비트 정수입니다.</returns>
    </member>
    <member name="P:System.Environment.TickCount64">
      <summary>시스템 시작 이후 경과 시간(밀리초)을 가져옵니다.</summary>
      <returns>시스템이 시작 된 이후 경과 된 시간 (밀리초)입니다.</returns>
    </member>
    <member name="P:System.Environment.UserDomainName">
      <summary>현재 사용자와 관련된 네트워크 도메인 이름을 가져옵니다.</summary>
      <returns>현재 사용자와 연결된 네트워크 도메인 이름입니다.</returns>
      <exception cref="T:System.PlatformNotSupportedException">운영 체제가 네트워크 도메인 이름 검색을 지원하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">네트워크 도메인 이름을 검색할 수 없습니다.</exception>
    </member>
    <member name="P:System.Environment.UserInteractive">
      <summary>현재 프로세스가 사용자 대화형 모드로 실행되고 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 프로세스가 사용자 대화형 모드로 실행되고 있으면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Environment.UserName">
      <summary>운영 체제에 현재 로그온한 사용자의 이름을 가져옵니다.</summary>
      <returns>운영 체제에 로그온 한 사용자의 이름입니다.</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>공용 언어 런타임의 주 번호, 보조 번호, 빌드 번호 및 수정 번호를 설명하는 <see cref="T:System.Version" /> 개체를 가져옵니다.</summary>
      <returns>공용 언어 런타임의 버전을 표시하는 개체입니다.</returns>
    </member>
    <member name="P:System.Environment.WorkingSet">
      <summary>프로세스 컨텍스트에 매핑되는 실제 메모리의 크기를 가져옵니다.</summary>
      <returns>프로세스 컨텍스트에 매핑되는 실제 메모리의 바이트 수가 포함된 부호 있는 64비트 정수입니다.</returns>
    </member>
    <member name="T:System.EnvironmentVariableTarget">
      <summary>set 또는 get 작업에서 환경 변수가 저장되거나 검색되는 위치를 지정합니다.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Machine">
      <summary>환경 변수는 Windows 운영 체제 레지스트리의 <see langword="HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment" /> 키에서 저장되거나 검색됩니다. 이 값은 Windows 시스템에서만 실행되는 .NET 구현에 사용되어야 합니다.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.Process">
      <summary>환경 변수는 현재 프로세스와 연결된 환경 블록에서 저장되거나 검색됩니다.</summary>
    </member>
    <member name="F:System.EnvironmentVariableTarget.User">
      <summary>환경 변수는 Windows 운영 체제 레지스트리의 <see langword="HKEY_CURRENT_USER\Environment" /> 키에서 저장되거나 검색됩니다. 이 값은 Windows 시스템에서만 실행되는 .NET 구현에 사용되어야 합니다.</summary>
    </member>
    <member name="T:System.Globalization.GlobalizationExtensions">
      <summary>세계화 관련 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)">
      <summary>지정한 <see cref="T:System.Globalization.CompareInfo" /> 개체의 문화권 구분 문자열 비교 규칙에 따라 <see cref="T:System.StringComparer" /> 개체를 반환합니다.</summary>
      <param name="compareInfo">문화권 구분 문자열 비교를 지원하는 개체입니다.</param>
      <param name="options">문자열을 비교하는 방법을 정의하는 값입니다. <paramref name="options" />는 열거형 값 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 열거형 값 <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> 또는 <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 및 <see cref="F:System.Globalization.CompareOptions.StringSort" /> 값 중 하나 이상의 비트 조합입니다.</param>
      <returns>문자열 비교를 수행하는 데 사용할 수 있는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compareInfo" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" />이 잘못되었습니다.</exception>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>기본 데이터 형식을 특정 인코딩의 이진 값으로 읽습니다.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>지정된 스트림을 기반으로 UTF-8 인코딩을 사용하여 <see cref="T:System.IO.BinaryReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="input">입력 스트림입니다.</param>
      <exception cref="T:System.ArgumentException">스트림이 읽기를 지원하지 않거나 <see langword="null" />이거나 이미 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>지정된 스트림과 문자 인코딩을 기반으로 <see cref="T:System.IO.BinaryReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="input">입력 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <exception cref="T:System.ArgumentException">스트림이 읽기를 지원하지 않거나 <see langword="null" />이거나 이미 닫힌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>지정된 스트림과 문자 인코딩을 기반으로 하는 <see cref="T:System.IO.BinaryReader" /> 클래스의 새 인스턴스를 초기화하고 스트림을 선택적으로 연 상태로 둡니다.</summary>
      <param name="input">입력 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.BinaryReader" /> 개체를 삭제한 후 스트림을 열어 두려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">스트림이 읽기를 지원하지 않거나 <see langword="null" />이거나 이미 닫힌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="encoding" /> 또는 <paramref name="input" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>
        <see cref="T:System.IO.BinaryReader" />의 내부 스트림에 대한 액세스를 노출합니다.</summary>
      <returns>
        <see langword="BinaryReader" />와 관련된 내부 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>현재 뷰어 및 기본 스트림을 닫습니다.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>
        <see cref="T:System.IO.BinaryReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.BinaryReader" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>스트림에서 읽은 지정된 바이트 수로 내부 버퍼를 채웁니다.</summary>
      <param name="numBytes">읽을 바이트 수입니다.</param>
      <exception cref="T:System.IO.EndOfStreamException">
        <paramref name="numBytes" />를 읽기 전에 스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">요청된 <paramref name="numBytes" />가 내부 버퍼 크기보다 큰 경우</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>사용할 수 있는 다음 문자를 반환하고 바이트 또는 문자 위치를 앞으로 이동하지 않습니다.</summary>
      <returns>사용할 수 있는 다음 문자를 반환하고 사용할 수 있는 문자가 더 이상 없거나 스트림에서 검색을 지원하지 않을 경우 -1을 반환합니다.</returns>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">현재 문자는 스트림에 선택한 <see cref="T:System.Text.Encoding" />을 사용하여 내부 문자 버퍼링으로 디코딩할 수 없습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>내부 스트림에서 문자를 읽고 사용된 <see langword="Encoding" />과 스트림에서 읽어오는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</summary>
      <returns>입력 스트림의 다음 문자를 반환하고 현재 사용할 수 있는 문자가 없을 경우 -1을 반환합니다.</returns>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>바이트 배열의 지정된 지점부터 스트림에서 지정된 바이트 수만큼 읽습니다.</summary>
      <param name="buffer">데이터를 읽어올 버퍼입니다.</param>
      <param name="index">버퍼로 읽어오기를 시작할 버퍼의 시작 위치입니다.</param>
      <param name="count">읽을 바이트 수입니다.</param>
      <returns>
        <paramref name="buffer" />로 읽어 온 바이트 수입니다. 이 바이트 수는 바이트가 충분하지 않은 경우 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.
또는
읽을 수 있도록 디코딩된 문자의 수는 <paramref name="count" />보다 큽니다. 유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>문자 배열의 지정된 지점부터 스트림에서 지정된 문자 수만큼 읽습니다.</summary>
      <param name="buffer">데이터를 읽어올 버퍼입니다.</param>
      <param name="index">버퍼로 읽어오기를 시작할 버퍼의 시작 위치입니다.</param>
      <param name="count">읽을 문자 수입니다.</param>
      <returns>버퍼로 읽어온 총 문자 수입니다. 이 문자 수는 문자가 현재 충분하지 않은 경우 요청된 문자 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.
또는
읽을 수 있도록 디코딩된 문자의 수는 <paramref name="count" />보다 큽니다. 유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Byte})">
      <summary>현재 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 스트림에서 위치를 앞으로 이동합니다.</summary>
      <param name="buffer">메모리 영역입니다. 이 메서드가 반환될 때 이 영역의 내용은 현재 소스에서 읽은 바이트로 대체됩니다.</param>
      <returns>버퍼로 읽어온 총 바이트 수입니다. 많은 바이트가 현재 사용 가능하지 않은 경우 버퍼에 할당된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Span{System.Char})">
      <summary>현재 스트림에서 제공된 버퍼의 길이와 동일한 문자 수만큼 읽어 제공된 버퍼에 쓰고 사용된 <see langword="Encoding" />과 스트림에서 읽어 오는 특정 문자의 길이만큼 현재 위치를 앞으로 이동합니다.</summary>
      <param name="buffer">문자 범위입니다. 이 메서드가 반환될 때 이 영역의 내용은 현재 소스에서 읽은 문자로 대체됩니다.</param>
      <returns>버퍼로 읽어온 총 문자 수입니다. 이 문자 수는 문자가 현재 충분하지 않은 경우 요청된 문자 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>압축 형식의 32비트 정수를 읽습니다.</summary>
      <returns>압축 형식의 32비트 정수입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">스트림이 손상되었습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>현재 스트림에서 <see langword="Boolean" /> 값을 읽고 스트림의 현재 위치를 1바이트 앞으로 이동합니다.</summary>
      <returns>바이트가 0이 아니면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>현재 스트림에서 다음 바이트를 읽고 스트림의 현재 위치를 1바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 다음 바이트입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>현재 스트림에서 지정된 바이트 수만큼 바이트 배열로 읽어 오고 현재 위치를 해당 바이트 수만큼 앞으로 이동합니다.</summary>
      <param name="count">읽을 바이트 수입니다. 이 값은 0 또는 음수가 아닌 숫자여야 합니다. 그렇지 않으면 예외가 발생합니다.</param>
      <returns>내부 스트림에서 읽은 데이터를 포함하는 바이트 배열입니다. 이 바이트 배열은 스트림의 끝에 도달할 경우 요청된 바이트 수보다 작을 수 있습니다.</returns>
      <exception cref="T:System.ArgumentException">읽을 수 있도록 디코딩된 문자의 수는 <paramref name="count" />보다 큽니다. 유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />가 음수입니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>현재 스트림에서 다음 문자를 읽고 사용된 <see langword="Encoding" />과 스트림에서 읽어오는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 문자입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">서로게이트 문자를 읽은 경우</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>현재 스트림에서 지정된 문자 수만큼 읽어 문자 배열로 데이터를 반환하고, 사용된 <see langword="Encoding" />과 스트림에서 읽어 오는 특정 문자의 길이만큼 현재 위치를 앞으로 이동합니다.</summary>
      <param name="count">읽을 문자 수입니다.</param>
      <returns>내부 스트림에서 읽은 데이터를 포함하는 문자 배열입니다. 이 문자 배열은 스트림의 끝에 도달할 경우 요청된 문자 수보다 작을 수 있습니다.</returns>
      <exception cref="T:System.ArgumentException">읽을 수 있도록 디코딩된 문자의 수는 <paramref name="count" />보다 큽니다. 유니코드 디코더가 대체 문자 또는 서로게이트 쌍을 반환하는 경우 이 문제가 발생할 수 있습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />가 음수입니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>현재 스트림에서 10진 값을 읽고 스트림의 현재 위치를 16바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 10진 값입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>현재 스트림에서 8바이트 부동 소수점 값을 읽고 스트림의 현재 위치를 8바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 8바이트 부동 소수점 값입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>현재 스트림에서 부호 있는 2바이트 정수를 읽고 스트림의 현재 위치를 2바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 부호 있는 2바이트 정수입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>현재 스트림에서 부호 있는 4바이트 정수를 읽고 스트림의 현재 위치를 4바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 부호 있는 4바이트 정수입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>현재 스트림에서 부호 있는 8바이트 정수를 읽고 스트림의 현재 위치를 8바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 부호 있는 8바이트 정수입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>현재 스트림에서 부호 있는 바이트를 읽고 스트림의 현재 위치를 1바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 부호 있는 바이트입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>현재 스트림에서 4바이트 부동 소수점 값을 읽고 스트림의 현재 위치를 4바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 4바이트 부동 소수점 값입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>현재 스트림에서 문자열을 읽습니다. 한 번에 7비트 정수로 인코드된 길이는 해당 문자열의 접두사로 붙습니다.</summary>
      <returns>읽어 오는 문자열입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>little-endian 인코딩을 사용하여 현재 스트림에서 부호 없는 2바이트 정수를 읽고 스트림의 위치를 2바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 부호 없는 2바이트 정수입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>현재 스트림에서 부호 없는 4바이트 정수를 읽고 스트림의 위치를 4바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 부호 없는 4바이트 정수입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>현재 스트림에서 부호 없는 8바이트 정수를 읽고 스트림의 위치를 8바이트 앞으로 이동합니다.</summary>
      <returns>현재 스트림에서 읽은 부호 없는 8바이트 정수입니다.</returns>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>기본 이진 형식을 스트림에 쓰고 특정 인코딩으로 된 문자열 쓰기를 지원합니다.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>스트림에 쓰는 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>지정된 스트림을 기반으로 UTF-8 인코딩을 사용하여 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="output">출력 스트림입니다.</param>
      <exception cref="T:System.ArgumentException">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>지정된 스트림과 문자 인코딩을 기반으로 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="output">출력 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <exception cref="T:System.ArgumentException">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>지정된 스트림과 문자 인코딩을 기반으로 하는 <see cref="T:System.IO.BinaryWriter" /> 클래스의 새 인스턴스를 초기화하고 스트림을 선택적으로 연 상태로 둡니다.</summary>
      <param name="output">출력 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.BinaryWriter" /> 개체를 삭제한 후 스트림을 열어 두려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">스트림이 쓰기를 지원하지 않거나 이미 닫힌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>
        <see cref="T:System.IO.BinaryWriter" />의 내부 스트림을 가져옵니다.</summary>
      <returns>
        <see langword="BinaryWriter" />와 관련된 내부 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>현재 <see cref="T:System.IO.BinaryWriter" /> 및 기본 스트림을 닫습니다.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>
        <see cref="T:System.IO.BinaryWriter" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.BinaryWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.DisposeAsync">
      <summary>
        <see cref="T:System.IO.BinaryWriter" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 비동기식으로 해제합니다.</summary>
      <returns>비동기 삭제 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>현재 작성기에 대한 모든 버퍼를 지우면 버퍼링된 모든 데이터를 내부 디바이스에 씁니다.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>백업 저장소가 없는 <see cref="T:System.IO.BinaryWriter" />를 지정합니다.</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>내부 스트림을 보유합니다.</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>현재 스트림 내에서 위치를 설정합니다.</summary>
      <param name="offset">
        <paramref name="origin" />에 상대적인 바이트 오프셋입니다.</param>
      <param name="origin">새 위치를 가져올 참조 위치를 나타내는 <see cref="T:System.IO.SeekOrigin" />의 필드입니다.</param>
      <returns>현재 스트림에서의 위치입니다.</returns>
      <exception cref="T:System.IO.IOException">파일 포인터가 잘못된 위치로 이동한 경우</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 값이 잘못된 경우</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>
        <see langword="Boolean" />를 나타내는 0과 <see langword="false" />를 나타내는 1을 사용하여 1바이트 <see langword="true" /> 값을 현재 스트림에 씁니다.</summary>
      <param name="value">쓸 <see langword="Boolean" /> 값(0 또는 1)입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>부호 없는 바이트를 현재 스트림에 쓰고 스트림 위치를 1바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 부호 없는 바이트입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>내부 스트림에 바이트 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터를 포함하는 바이트 배열입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 가 <see langword="null" />일 수 있습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>현재 스트림에 바이트 배열 영역을 씁니다.</summary>
      <param name="buffer">쓸 데이터를 포함하는 바이트 배열입니다.</param>
      <param name="index">
        <paramref name="buffer" />에서 읽고 스트림에 쓸 첫 번째 바이트의 인덱스입니다.</param>
      <param name="count">
        <paramref name="buffer" />에서 읽고 스트림에 쓸 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>유니코드 문자를 현재 스트림에 쓴 다음 사용된 <see langword="Encoding" />과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</summary>
      <param name="ch">쓰려고 하는 서로게이트가 아닌 유니코드 문자입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" />가 단일 서로게이트 문자인 경우</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>문자 배열을 현재 스트림에 쓴 다음 사용된 <see langword="Encoding" />과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</summary>
      <param name="chars">쓸 데이터를 포함하는 문자 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>문자 배열 섹션을 현재 스트림에 쓴 다음 사용된 <see langword="Encoding" />과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</summary>
      <param name="chars">쓸 데이터를 포함하는 문자 배열입니다.</param>
      <param name="index">
        <paramref name="chars" />에서 읽고 스트림에 쓸 첫 번째 문자의 인덱스입니다.</param>
      <param name="count">
        <paramref name="chars" />에서 읽고 스트림에 쓸 문자의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>10진 값을 현재 스트림에 쓰고 스트림 위치를 16바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 10진수 값입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>8바이트 부동 소수점 값을 현재 스트림에 쓰고 스트림 위치를 8바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 8바이트 부동 소수점 값입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>2바이트 부호 있는 정수를 현재 스트림에 쓰고 스트림 위치를 2바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 2바이트 부호 있는 정수입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>4바이트 부호 있는 정수를 현재 스트림에 쓰고 스트림 위치를 4바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 4바이트 부호 있는 정수입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>8바이트 부호 있는 정수를 현재 스트림에 쓰고 스트림 위치를 8바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 8바이트 부호 있는 정수입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Byte})">
      <summary>현재 스트림에 바이트 범위를 씁니다.</summary>
      <param name="buffer">쓸 바이트 범위입니다.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>문자 범위를 현재 스트림에 쓴 다음 사용된 <see langword="Encoding" />과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</summary>
      <param name="chars">쓸 문자 범위입니다.</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>부호 있는 바이트를 현재 스트림에 쓰고 스트림 위치를 1바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 부호 있는 바이트입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>4바이트 부동 소수점 값을 현재 스트림에 쓰고 스트림 위치를 4바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 4바이트 부동 소수점 값입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>
        <see cref="T:System.IO.BinaryWriter" />의 현재 인코딩으로 된 이 스트림에 문자열의 길이가 맨 앞에 나오는 문자열을 쓴 다음 사용된 인코딩과 스트림에 쓰여지는 특정 문자의 길이만큼 스트림의 현재 위치를 앞으로 이동합니다.</summary>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>2바이트 부호 없는 정수를 현재 스트림에 쓰고 스트림 위치를 2바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 2바이트 부호 없는 정수입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>4바이트 부호 없는 정수를 현재 스트림에 쓰고 스트림 위치를 4바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 4바이트 부호 없는 정수입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>8바이트 부호 없는 정수를 현재 스트림에 쓰고 스트림 위치를 8바이트씩 앞으로 이동합니다.</summary>
      <param name="value">쓸 8바이트 부호 없는 정수입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>압축 형식의 32비트 정수를 씁니다.</summary>
      <param name="value">쓸 32비트 정수입니다.</param>
      <exception cref="T:System.IO.EndOfStreamException">스트림의 끝에 도달한 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="T:System.IO.BufferedStream">
      <summary>다른 스트림에서 작업을 읽고 쓰기 위한 버퍼링 레이어를 추가합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
      <summary>기본 버퍼 크기인 4096바이트를 사용하여 <see cref="T:System.IO.BufferedStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">현재 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
      <summary>지정된 버퍼 크기를 사용하여 <see cref="T:System.IO.BufferedStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">현재 스트림입니다.</param>
      <param name="bufferSize">버퍼 크기(바이트)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" />가 음수입니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>비동기 읽기 작업을 시작합니다. 대신 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="buffer">데이터를 읽을 버퍼입니다.</param>
      <param name="offset">스트림에서 읽은 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="callback">읽기가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
      <param name="state">다른 요청에서 특정 비동기 읽기 요청을 구별하는 사용자 제공 개체입니다.</param>
      <returns>보류 중인 비동기 읽기를 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">스트림 끝을 지나 비동기 읽기를 시도한 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="offset" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.NotSupportedException">현재 스트림이 읽기 작업을 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>비동기 쓰기 작업을 시작합니다. 대신 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="buffer">현재 스트림에 쓸 데이터를 포함하는 버퍼입니다.</param>
      <param name="offset">현재 스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="callback">비동기 쓰기 작업이 완료되면 호출될 메서드입니다.</param>
      <param name="state">다른 요청에서 특정 비동기 쓰기 요청을 구별하는 사용자 제공 개체입니다.</param>
      <returns>보류 중인 비동기 쓰기를 참조하는 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 길이에서 <paramref name="offset" />을 뺀 값이 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.BufferSize">
      <summary>이 버퍼링된 스트림의 버퍼 크기(바이트)를 가져옵니다.</summary>
      <returns>버퍼 크기 (바이트)를 나타내는 정수입니다.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanRead">
      <summary>현재 스트림이 읽기를 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 읽기를 지원하면 <see langword="true" />이고, 스트림이 닫혀 있거나 쓰기 전용 권한으로 열렸으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanSeek">
      <summary>현재 스트림이 검색을 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 검색을 지원하면 <see langword="true" />이고, 스트림이 닫혔거나 스트림이 콘솔에 대한 출력 또는 파이프와 같은 운영 체제 핸들로부터 생성된 경우에는 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.BufferedStream.CanWrite">
      <summary>현재 스트림이 쓰기를 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 쓰기를 지원하면 <see langword="true" />이고, 스트림이 닫혀 있거나 읽기 전용 권한으로 열렸으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>현재 버퍼링된 스트림에서 바이트를 읽어서 다른 스트림에 해당 바이트를 씁니다.</summary>
      <param name="destination">현재 버퍼링된 스트림의 내용을 복사할 스트림입니다.</param>
      <param name="bufferSize">버퍼의 크기입니다. 이 값은 0보다 커야 합니다. 기본 크기는 81920입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" />가 음수이거나 0인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 스트림이 읽기를 지원하지 않습니다.
또는
<paramref name="destination" />이 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 메서드가 호출되기 전에 현재 스트림 또는 <paramref name="destination" />이 닫힌 경우.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>현재 버퍼링된 스트림에서 바이트를 비동기적으로 읽어 지정된 버퍼 크기 및 취소 토큰을 사용하여 다른 스트림에 씁니다.</summary>
      <param name="destination">현재 버퍼링된 스트림의 내용을 복사할 스트림입니다.</param>
      <param name="bufferSize">버퍼의 크기(바이트)입니다. 이 값은 0보다 커야 합니다. 기본 크기는 81920입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 복사 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.DisposeAsync">
      <summary>버퍼링된 스트림에서 사용하는 비관리형 리소스를 비동기적으로 해제합니다.</summary>
      <returns>비동기 삭제 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
      <summary>보류 중인 비동기 읽기 작업이 완료되기를 기다립니다. 대신 <see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="asyncResult">대기할 보류 중인 비동기 요청에 대한 참조입니다.</param>
      <returns>0과 요청한 바이트 수 사이의 스트림에서 읽은 바이트 수입니다. 스트림은 스트림의 끝에서 0만을 반환하며 그렇지 않으면 최소한 1바이트를 사용할 수 있을 때까지 차단됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">이 클래스에 대해 <see cref="T:System.IAsyncResult" />를 호출하여 이 <see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 개체가 만들어지지 않은 경우</exception>
    </member>
    <member name="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
      <summary>비동기 쓰기 작업을 종료하고 I/O 작업이 완료될 때까지 차단시킵니다. 대신 <see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="asyncResult">보류 중인 비동기 요청입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">이 클래스에 대해 <see cref="T:System.IAsyncResult" />를 호출하여 이 <see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 개체가 만들어지지 않은 경우</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Flush">
      <summary>이 스트림에 대한 모든 버퍼를 지우고 버퍼링된 모든 데이터가 내부 디바이스에 쓰여지도록 합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.IO.IOException">데이터 소스 또는 리포지토리가 열려 있지 않은 경우</exception>
    </member>
    <member name="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>이 스트림에 대해 모든 버퍼를 비동기적으로 지우고 버퍼링된 데이터가 내부 디바이스에 쓰여지도록 하고 취소 요청을 모니터링합니다.</summary>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.</param>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Length">
      <summary>스트림 길이(바이트)를 가져옵니다.</summary>
      <returns>스트림 길이(바이트)입니다.</returns>
      <exception cref="T:System.IO.IOException">내부 스트림이 <see langword="null" />이거나 닫혀 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 검색을 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.Position">
      <summary>현재 스트림 내에서의 위치를 가져옵니다.</summary>
      <returns>현재 스트림 내에서의 위치입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" />에 음수 값이 전달된 경우</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫히는 등 I/O 오류가 발생하는 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 검색을 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>현재 버퍼링된 스트림의 바이트를 배열에 복사합니다.</summary>
      <param name="array">바이트를 복사해 넣을 버퍼입니다.</param>
      <param name="offset">바이트를 읽기 시작하는 버퍼의 바이트 오프셋입니다.</param>
      <param name="count">읽을 바이트 수입니다.</param>
      <returns>
        <paramref name="array" />로 읽어온 총 바이트 수입니다. 총 바이트 수는 요청된 바이트 수를 현재 사용할 수 없는 경우 이 바이트 수보다 작을 수 있으며 데이터를 읽기 전에 스트림의 끝에 도달한 경우에는 0이 됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 길이에서 <paramref name="offset" />을 뺀 값이 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 열리지 않았거나 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Read(System.Span{System.Byte})">
      <summary>현재 버퍼링된 스트림에서 바이트 범위로 바이트를 복사하고 버퍼링된 스트림 내에서의 위치를 쓴 바이트 수만큼 이동합니다.</summary>
      <param name="destination">메모리 영역입니다. 이 메서드가 반환될 때 이 영역의 내용은 현재 소스에서 읽은 바이트로 대체됩니다.</param>
      <returns>버퍼로 읽어온 총 바이트 수입니다. 많은 바이트가 현재 사용 가능하지 않은 경우 버퍼에 할당된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고 읽은 바이트 수만큼 스트림 내에서 앞으로 이동하며 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림의 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>현재 버퍼링된 스트림에서 바이트 시퀀스를 읽고 읽은 바이트 수만큼 버퍼링된 스트림에서 위치를 비동기적으로 앞으로 이동합니다.</summary>
      <param name="buffer">데이터를 기록할 메모리의 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. 해당 <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 속성의 값에는 버퍼 안으로 읽어들인 총 바이트 수가 포함됩니다. 결과 값은 많은 바이트가 현재 사용 가능하지 않은 경우 버퍼에 할당된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 될 수 있습니다.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.ReadByte">
      <summary>원본 스트림에서 바이트를 읽고 <see langword="int" />로 캐스팅된 바이트를 반환하거나 스트림의 끝에서 읽는 경우 -1을 반환합니다.</summary>
      <returns>
        <see langword="int" />로 캐스팅된 바이트이거나 스트림의 끝에서 읽는 경우 바이트 수는 -1입니다.</returns>
      <exception cref="T:System.IO.IOException">스트림이 닫히는 등 I/O 오류가 발생하는 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>버퍼링된 현재 스트림 내에서의 위치를 설정합니다.</summary>
      <param name="offset">
        <paramref name="origin" />에 상대적인 바이트 오프셋입니다.</param>
      <param name="origin">새 위치를 가져오는 데 사용되는 참조 위치를 나타내는 <see cref="T:System.IO.SeekOrigin" /> 형식의 값입니다.</param>
      <returns>버퍼링된 현재 스트림 내에서의 새 위치입니다.</returns>
      <exception cref="T:System.IO.IOException">스트림이 열리지 않았거나 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 검색을 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.SetLength(System.Int64)">
      <summary>버퍼링된 스트림의 길이를 설정합니다.</summary>
      <param name="value">현재 버퍼링된 스트림의 원하는 길이(바이트)를 나타내는 정수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 열리지 않았거나 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기 및 검색을 모두 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="P:System.IO.BufferedStream.UnderlyingStream">
      <summary>이 버퍼링된 스트림의 내부 <see cref="T:System.IO.Stream" /> 인스턴스를 가져옵니다.</summary>
      <returns>내부 스트림 인스턴스입니다.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>버퍼링된 스트림에 바이트를 복사하고 버퍼링된 스트림 내에서의 현재 위치를 쓴 바이트 수만큼 이동합니다.</summary>
      <param name="array">
        <paramref name="count" /> 바이트를 현재 버퍼링된 스트림에 복사할 바이트 배열입니다.</param>
      <param name="offset">버퍼링된 현재 스트림으로 바이트를 복사하기 시작할 버퍼의 오프셋입니다.</param>
      <param name="count">현재 버퍼링된 스트림에 쓸 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 길이에서 <paramref name="offset" />을 뺀 값이 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫혀 있거나 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>현재 버퍼링된 스트림에 바이트 시퀀스를 쓰고 쓴 바이트 수만큼 이 버퍼링된 스트림에서 현재 위치를 앞으로 이동합니다.</summary>
      <param name="buffer">메모리 영역입니다. 이 메서드는 이 영역의 내용을 현재의 버퍼링된 스트림에 복사합니다.</param>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.BufferedStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>바이트의 시퀀스를 현재 버퍼링된 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 버퍼링된 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 기록할 메모리의 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.BufferedStream.WriteByte(System.Byte)">
      <summary>버퍼링된 스트림의 현재 위치에 바이트를 씁니다.</summary>
      <param name="value">스트림에 쓸 바이트입니다.</param>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫힌 후에 메서드가 호출되었습니다.</exception>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>읽을 때 throw되는 예외가 스트림의 끝을 지나 시도됩니다.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>시스템에서 제공되는 메시지로 설정된 메시지 문자열과 COR_E_ENDOFSTREAM으로 설정된 HRESULT를 사용하여 <see cref="T:System.IO.EndOfStreamException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정한 serialization와 컨텍스트 정보를 사용하여 <see cref="T:System.IO.EndOfStreamException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>
        <paramref name="message" />로 설정된 메시지 문자열과 COR_E_ENDOFSTREAM으로 설정된 HRESULT를 사용하여 <see cref="T:System.IO.EndOfStreamException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 문자열입니다. <paramref name="message" /> 내용은 사용자의 이해를 돕기 위한 것입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.IO.EndOfStreamException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 문자열입니다. <paramref name="message" /> 내용은 사용자의 이해를 돕기 위한 것입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>데이터 스트림의 형식이 잘못된 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>
        <see cref="T:System.IO.InvalidDataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.IO.InvalidDataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>이 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.IO.InvalidDataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>백업 저장소가 메모리인 스트림을 만듭니다.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>0으로 초기화된 확장 가능한 용량을 사용하여 <see cref="T:System.IO.MemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>지정된 바이트 배열을 기반으로 하는 <see cref="T:System.IO.MemoryStream" /> 클래스의 크기 조정이 불가능한 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">현재 스트림을 만드는 데 사용되는 부호 없는 바이트의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>지정된 대로 설정된 <see cref="T:System.IO.MemoryStream" /> 속성을 사용하여 지정된 바이트 배열을 기반으로 하는 <see cref="P:System.IO.MemoryStream.CanWrite" /> 클래스의 크기 조정이 불가능한 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">이 스트림을 만드는 데 사용되는 부호 없는 바이트의 배열입니다.</param>
      <param name="writable">스트림이 쓰기를 지원하는지 여부를 결정하는 <see cref="P:System.IO.MemoryStream.CanWrite" /> 속성의 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>바이트 배열의 지정된 영역(인덱스)을 기반으로 하는 <see cref="T:System.IO.MemoryStream" /> 클래스의 크기 조정이 불가능한 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">이 스트림을 만드는 데 사용되는 부호 없는 바이트의 배열입니다.</param>
      <param name="index">스트림이 시작될 <paramref name="buffer" />의 인덱스입니다.</param>
      <param name="count">스트림의 길이(바이트)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>지정된 대로 설정된 <see cref="T:System.IO.MemoryStream" /> 속성을 사용하여 지정된 바이트 배열의 영역을 기반으로 하는 <see cref="P:System.IO.MemoryStream.CanWrite" /> 클래스의 크기 조정이 불가능한 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">이 스트림을 만드는 데 사용되는 부호 없는 바이트의 배열입니다.</param>
      <param name="index">스트림이 시작될 <paramref name="buffer" />의 인덱스입니다.</param>
      <param name="count">스트림의 길이(바이트)입니다.</param>
      <param name="writable">스트림이 쓰기를 지원하는지 여부를 결정하는 <see cref="P:System.IO.MemoryStream.CanWrite" /> 속성의 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수인 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>지정된 대로 설정된 <see cref="T:System.IO.MemoryStream" /> 속성과 지정된 대로 설정된 <see cref="P:System.IO.MemoryStream.CanWrite" /> 호출 기능을 사용하여 지정된 바이트 배열의 영역을 기반으로 하는 <see cref="M:System.IO.MemoryStream.GetBuffer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">이 스트림을 만드는 데 사용되는 부호 없는 바이트의 배열입니다.</param>
      <param name="index">스트림이 시작될 <paramref name="buffer" />의 인덱스입니다.</param>
      <param name="count">스트림의 길이(바이트)입니다.</param>
      <param name="writable">스트림이 쓰기를 지원하는지 여부를 결정하는 <see cref="P:System.IO.MemoryStream.CanWrite" /> 속성의 설정입니다.</param>
      <param name="publiclyVisible">스트림을 만들 때 사용된 부호 없는 바이트 배열을 반환하는 <see cref="M:System.IO.MemoryStream.GetBuffer" />를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>지정된 대로 초기화된 확장 가능한 용량을 사용하여 <see cref="T:System.IO.MemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">내부 배열의 처음 크기(바이트)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 음수입니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>비동기 읽기 작업을 시작합니다. 대신 <see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="buffer">데이터를 읽을 버퍼입니다.</param>
      <param name="offset">메모리 스트림에서 읽은 데이터 쓰기를 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="callback">읽기가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
      <param name="state">다른 요청에서 특정 비동기 읽기 요청을 구별하는 사용자 제공 개체입니다.</param>
      <returns>보류 중인 비동기 읽기를 나타내는 <see cref="T:System.IAsyncResult" />입니다.</returns>
      <exception cref="T:System.IO.IOException">과거 메모리 스트림의 끝에 비동기 읽기를 시도했거나 디스크 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
      <exception cref="T:System.ObjectDisposedException">메모리 스트림이 닫힌 후 메서드가 호출되었습니다.</exception>
      <exception cref="T:System.NotSupportedException">현재의 메모리 스트림 구현이 읽기 작업을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>비동기 쓰기 작업을 시작합니다. 대신 <see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">쓰기를 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="callback">쓰기가 완료되면 호출되는 선택적 비동기 콜백입니다.</param>
      <param name="state">다른 요청에서 특정 비동기 쓰기 요청을 구별하는 사용자 제공 개체입니다.</param>
      <returns>보류 중인 비동기 쓰기를 나타내는 <see langword="IAsyncResult" />입니다.</returns>
      <exception cref="T:System.IO.IOException">과거 메모리 스트림의 끝에 비동기 쓰기를 시도했거나 디스크 오류가 발생한 경우</exception>
      <exception cref="T:System.ArgumentException">하나 이상의 인수가 잘못된 경우</exception>
      <exception cref="T:System.ObjectDisposedException">메모리 스트림이 닫힌 후 메서드가 호출되었습니다.</exception>
      <exception cref="T:System.NotSupportedException">현재의 메모리 스트림 구현이 쓰기 작업을 지원하지 않습니다.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>현재 스트림이 읽기를 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 열려 있으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>현재 스트림이 검색을 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 열려 있으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>현재 스트림이 쓰기를 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 쓰기를 지원하면 <see langword="true" />이고, 지원하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>이 스트림에 할당된 바이트 수를 가져오거나 설정합니다.</summary>
      <returns>버퍼에서 스트림에 대해 사용할 수 있는 부분의 길이입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">음수 또는 스트림의 현재 길이보다 작은 용량이 설정되어 있는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">현재 스트림이 닫혀 있습니다.</exception>
      <exception cref="T:System.NotSupportedException">용량을 수정할 수 없는 스트림에 <see langword="set" />이 호출되는 경우</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>현재의 메모리 스트림에서 바이트를 읽고, 지정된 버퍼 크기를 활용하여 다른 스트림에 씁니다.</summary>
      <param name="destination">현재의 메모리 스트림의 콘텐츠를 복사할 스트림입니다.</param>
      <param name="bufferSize">버퍼의 크기입니다. 이 값은 0보다 커야 합니다. 기본 크기는 81920입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" />이(가) 양수가 아닙니다.</exception>
      <exception cref="T:System.ObjectDisposedException">기본 메모리 스트림 또는 <paramref name="destination" /> 스트림이 닫혀 있습니다.</exception>
      <exception cref="T:System.NotSupportedException">기본 메모리 스트림을 읽을 수 없습니다.
또는
<paramref name="destination" /> 스트림에 쓸 수 없습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>현재 스트림에서 모든 바이트를 비동기적으로 읽어 지정된 버퍼 크기 및 취소 토큰을 사용하여 다른 스트림에 씁니다.</summary>
      <param name="destination">현재 스트림의 내용을 복사할 스트림입니다.</param>
      <param name="bufferSize">버퍼의 크기(바이트)입니다. 이 값은 0보다 커야 합니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.</param>
      <returns>비동기 복사 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" />가 음수이거나 0인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">현재 스트림이나 대상 스트림이 삭제됩니다.</exception>
      <exception cref="T:System.NotSupportedException">현재 스트림이 읽기를 지원하지 않거나 대상 스트림이 쓰기를 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.MemoryStream" /> 클래스에 사용되는 관리되지 않는 리소스를 해제하고, 필요에 따라 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.MemoryStream.EndRead(System.IAsyncResult)">
      <summary>보류 중인 비동기 읽기가 완료되기를 기다립니다. 대신 <see cref="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="asyncResult">완료할 보류 중인 비동기 요청에 대한 참조입니다.</param>
      <returns>0과 요청한 바이트 수 사이에 해당하는, 메모리 스트림에서 읽은 바이트 수입니다. 메모리 스트림의 끝에서만 0을 반환하며, 그렇지 않을 경우 최소한 1 바이트를 사용할 수 있을 때까지 차단합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">보류 중인 읽기 작업에 대한 핸들을 사용할 수 없는 경우
또는
보류 중인 작업이 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" />이(가) 현재의 메모리 스트림 상의 <see cref="M:System.IO.MemoryStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 메서드에서 시작되지 않았습니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫혔거나 내부 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.EndWrite(System.IAsyncResult)">
      <summary>비동기 쓰기 작업을 끝냅니다. 대신 <see cref="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />를 사용하세요.</summary>
      <param name="asyncResult">처리 중인 비동기 I/O 요청에 대한 참조입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">보류 중인 쓰기 작업에 대한 핸들을 사용할 수 없는 경우
또는
보류 중인 작업이 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" />가 현재 스트림의 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 메서드에서 시작되지 않았습니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫혔거나 내부 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>
        <see cref="M:System.IO.Stream.Flush" /> 메서드를 재정의하여 아무런 작업도 수행되지 않도록 합니다.</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>이 스트림에 대한 모든 버퍼를 비동기적으로 지우고 취소 요청을 모니터링합니다.</summary>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다.</param>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>이 스트림을 만드는 데 사용된 부호 없는 바이트의 배열을 반환합니다.</summary>
      <returns>이 스트림을 만든 바이트 배열이거나 현재 인스턴스의 생성 도중 <see cref="T:System.IO.MemoryStream" /> 생성자에 바이트 배열이 제공되지 않은 경우 내부 배열입니다.</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <see langword="MemoryStream" /> 인스턴스가 공개적으로 표시되는 버퍼로 만들어지지 않은 경우</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>스트림의 길이(바이트)를 가져옵니다.</summary>
      <returns>스트림의 길이(바이트)입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>스트림 내의 현재 위치를 가져오거나 설정합니다.</summary>
      <returns>스트림 내의 현재 위치입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">위치가 음수 값이나 <see cref="F:System.Int32.MaxValue" />보다 큰 값으로 설정된 경우</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>현재 스트림에서 바이트 블록을 읽어서 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 바이트 배열의 값이 <paramref name="offset" />과 (<paramref name="offset" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 바이트로 교체된 상태로 반환됩니다.</param>
      <param name="offset">현재 스트림에서 데이터를 저장하기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <returns>버퍼로 쓴 총 바이트 수입니다. 해당 바이트 수를 현재 사용할 수 없는 경우 이 수는 요청된 바이트 수보다 작을 수 있으며 바이트를 읽기 전에 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="offset" />을 빼면 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ObjectDisposedException">현재 스트림 인스턴스가 닫혀 있는 경우</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Span{System.Byte})">
      <summary>현재의 메모리 스트림에서 바이트 시퀀스를 읽고, 읽은 바이트 수만큼 메모리 스트림 내의 위치를 앞으로 이동합니다.</summary>
      <param name="destination">메모리 영역입니다. 이 메서드가 반환될 경우, 이 범위의 콘텐츠는 현재의 메모리 스트림 소스에서 읽은 바이트로 대체됩니다.</param>
      <returns>버퍼로 읽어온 총 바이트 수입니다. 현재 많은 바이트를 쓸 수 없는 경우 버퍼에 할당된 바이트 수보다 작을 수 있으며, 메모리 스트림의 끝에 도달하면 0이 될 수도 있습니다.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>현재 스트림에서 바이트의 시퀀스를 비동기적으로 읽고 읽은 바이트 수만큼 스트림 내에서 앞으로 이동하며 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림의 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">스트림을 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>현재의 메모리 스트림에서 바이트 시퀀스를 비동기적으로 읽어 <paramref name="destination" />에 쓰고, 이 메모리 스트림 내에서 기록한 바이트 수만큼 현재 위치를 앞으로 이동한 후, 취소 요청을 모니터링합니다.</summary>
      <param name="destination">데이터를 기록할 메모리의 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 속성의 값은 <paramref name="destination" />로 읽어들인 총 바이트 수를 포함합니다. 현재 많은 바이트를 쓸 수 없는 경우 결과 값이 <paramref name="destination" />에 할당된 바이트 수보다 적을 수 있으며, 메모리 스트림의 끝에 도달하면 0이 될 수도 있습니다.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>현재 스트림에서 바이트를 읽습니다.</summary>
      <returns>
        <see cref="T:System.Int32" />로 캐스팅된 바이트이거나 스트림의 끝에 도달한 경우 -1입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">현재 스트림 인스턴스가 닫혀 있는 경우</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>현재 스트림 내의 위치를 지정된 값으로 설정합니다.</summary>
      <param name="offset">스트림 내의 새 위치입니다. 이 위치는 <paramref name="loc" /> 매개 변수와 관련되며 양수와 음수 모두 가능합니다.</param>
      <param name="loc">검색 참조 지점 역할을 하는 <see cref="T:System.IO.SeekOrigin" /> 형식의 값입니다.</param>
      <returns>초기 참조 지점과 오프셋을 조합해서 계산한, 스트림 내의 새 위치입니다.</returns>
      <exception cref="T:System.IO.IOException">스트림의 시작 전에 검색하려고 한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <exception cref="T:System.ArgumentException">잘못된 <see cref="T:System.IO.SeekOrigin" />이 있는 경우
또는
<paramref name="offset" />이 산술 연산 오버플로를 발생시킨 경우</exception>
      <exception cref="T:System.ObjectDisposedException">현재 스트림 인스턴스가 닫혀 있는 경우</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>현재 스트림의 길이를 지정된 값으로 설정합니다.</summary>
      <param name="value">길이를 설정할 값입니다.</param>
      <exception cref="T:System.NotSupportedException">현재 스트림의 크기를 조정할 수 없으며 <paramref name="value" />가 현재 용량보다 큰 경우
또는
현재 스트림이 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />가 음수이거나 <see cref="T:System.IO.MemoryStream" />의 최대 길이보다 큰 경우. 여기서 최대 길이는 <see cref="F:System.Int32.MaxValue" /> - origin입니다. origin은 스트림이 시작되는 내부 버퍼의 인덱스입니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>
        <see cref="P:System.IO.MemoryStream.Position" /> 속성에 관계없이 바이트 배열에 스트림 내용을 씁니다.</summary>
      <returns>새 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)">
      <summary>이 스트림을 만드는 데 사용된 부호 없는 바이트의 배열을 반환합니다. 반환 값은 변환의 성공 여부를 나타냅니다.</summary>
      <param name="buffer">이 스트림을 만든 바이트 배열 세그먼트입니다.</param>
      <returns>변환에 성공했으면 <see langword="true" />이고, 실패했으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>버퍼에서 읽은 데이터를 사용하여 현재 스트림에 바이트 블록을 씁니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">현재 스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다. 자세한 내용은 <see cref="P:System.IO.Stream.CanWrite" />를 참조하십시오.
또는
현재 위치가 스트림의 끝에서 <paramref name="count" /> 바이트보다 가까우며 용량을 수정할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="offset" />을 빼면 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수인 경우</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">현재 스트림 인스턴스가 닫혀 있는 경우</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>
        <paramref name="source" />에 포함된 바이트의 시퀀스를 현재의 메모리 스트림에 쓰고, 이 메모리 스트림 내에서 기록한 바이트 수만큼 현재 위치를 앞으로 이동합니다.</summary>
      <param name="source">메모리 영역입니다. 이 메서드는 이 영역의 콘텐츠를 현재의 메모리 스트림에 복사합니다.</param>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 이 스트림을 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>
        <paramref name="source" />에 포함된 바이트의 시퀀스를 현재의 메모리 스트림에 비동기적으로 쓰고, 이 메모리 스트림 내에서 기록한 바이트 수만큼 현재 위치를 앞으로 이동한 후, 취소 요청을 모니터링합니다.</summary>
      <param name="source">데이터를 기록할 메모리의 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>현재 위치에서 현재 스트림에 바이트를 씁니다.</summary>
      <param name="value">쓸 바이트입니다.</param>
      <exception cref="T:System.NotSupportedException">스트림이 쓰기를 지원하지 않습니다. 자세한 내용은 <see cref="P:System.IO.Stream.CanWrite" />를 참조하십시오.
또는
현재 위치가 스트림의 끝에 있으며 용량을 수정할 수 없는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">현재 스트림이 닫혀 있습니다.</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>다른 스트림에 이 메모리 스트림의 전체 내용을 씁니다.</summary>
      <param name="stream">이 메모리 스트림을 쓸 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">현재 스트림이나 대상 스트림이 닫혀 있는 경우</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>파일이나 디렉터리 경로 정보를 포함하는 <see cref="T:System.String" /> 인스턴스에 대한 작업을 수행합니다. 이러한 작업은 플랫폼 간에 호환되는 방식으로 수행됩니다.</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>계층적 파일 시스템 구조를 반영하는 경로 문자열에서 디렉터리 수준을 구분하는 데 사용되는 플랫폼 특정 대체 문자를 제공합니다.</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>경로 문자열의 확장명을 변경합니다.</summary>
      <param name="path">수정할 경로 정보입니다. 경로에는 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 문자가 포함될 수 없습니다.</param>
      <param name="extension">앞에 마침표가 있거나 없는 새 확장명입니다. <paramref name="path" />에서 기존 확장명을 제거하려면 <see langword="null" />을(를) 지정하세요.</param>
      <returns>수정된 경로 정보입니다.
Windows 기반 데스크톱 플랫폼에서 <paramref name="path" />이(가) <see langword="null" />이거나 빈 문자열("")이면 경로 정보가 수정되지 않고 반환됩니다. <paramref name="extension" />이(가) <see langword="null" />이면 반환된 문자열에 확장명이 제거된 지정된 경로가 포함되어 있습니다. <paramref name="path" />에 확장명이 없고 <paramref name="extension" />이(가) <see langword="null" />이 아니면 반환된 경로 문자열에는 <paramref name="path" /> 끝에 추가된 <paramref name="extension" />이(가) 포함되어 있습니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>두 문자열을 한 경로로 결합합니다.</summary>
      <param name="path1">결합할 첫 번째 경로입니다.</param>
      <param name="path2">결합할 두 번째 경로입니다.</param>
      <returns>결합된 경로입니다. 지정된 경로 중 하나가 0 길이의 문자열이면 이 메서드는 다른 경로를 반환합니다. <paramref name="path2" />에 절대 경로가 포함되어 있으면 이 메서드는 <paramref name="path2" />을(를) 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> 또는 <paramref name="path2" />에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함되어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> 또는 <paramref name="path2" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String)">
      <summary>세 문자열을 한 경로로 결합합니다.</summary>
      <param name="path1">결합할 첫 번째 경로입니다.</param>
      <param name="path2">결합할 두 번째 경로입니다.</param>
      <param name="path3">결합할 세 번째 경로입니다.</param>
      <returns>결합된 경로입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" /> 또는 <paramref name="path3" />이 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자 중 하나 이상을 포함합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" /> 또는 <paramref name="path3" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String,System.String,System.String)">
      <summary>네 문자열을 한 경로로 결합합니다.</summary>
      <param name="path1">결합할 첫 번째 경로입니다.</param>
      <param name="path2">결합할 두 번째 경로입니다.</param>
      <param name="path3">결합할 세 번째 경로입니다.</param>
      <param name="path4">결합할 네 번째 경로입니다.</param>
      <returns>결합된 경로입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" /> 또는 <paramref name="path4" />가 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자 중 하나 이상을 포함합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" /> 또는 <paramref name="path4" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>문자열 배열을 한 경로로 결합합니다.</summary>
      <param name="paths">경로 각 부분의 배열입니다.</param>
      <returns>결합된 경로입니다.</returns>
      <exception cref="T:System.ArgumentException">배열의 문자열 중 하나에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함된 경우</exception>
      <exception cref="T:System.ArgumentNullException">배열의 문자열 중 하나가 <see langword="null" />인 경우</exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>계층적 파일 시스템 구조를 반영하는 경로 문자열에서 디렉터리 수준을 구분하는 데 사용되는 플랫폼 특정 문자를 제공합니다.</summary>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 범위로 지정된 경로가 디렉터리 구분 기호에서 끝나는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path">분석할 경로입니다.</param>
      <returns>경로가 디렉터리 구분 기호로 끝나면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.EndsInDirectorySeparator(System.String)">
      <summary>지정된 경로가 디렉터리 구분 기호로 끝나는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path">분석할 경로입니다.</param>
      <returns>경로가 디렉터리 구분 기호로 끝나면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.ReadOnlySpan{System.Char})">
      <summary>문자 범위로 표시되는 지정된 경로의 디렉터리 정보를 반환합니다.</summary>
      <param name="path">디렉터리 정보를 검색할 경로입니다.</param>
      <returns>
        <paramref name="path" />의 디렉터리 정보 또는 <paramref name="path" />가 <see langword="null" />인 경우 빈 범위, 빈 범위 또는 루트(예: ,C: 또는 \server\share)입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>지정된 경로 문자열에 대한 디렉터리 정보를 반환합니다.</summary>
      <param name="path">파일 또는 디렉터리의 경로입니다.</param>
      <returns>
        <paramref name="path" />에 대한 디렉터리 정보이며, <paramref name="path" />이(가) 루트 디렉터리를 나타내거나 null인 경우 <see langword="null" />입니다. <see cref="F:System.String.Empty" />에 디렉터리 정보가 포함되어 있지 않으면 <paramref name="path" />이(가) 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 매개 변수가 잘못된 문자를 포함하거나, 비어 있거나, 공백만 포함하는 경우</exception>
      <exception cref="T:System.IO.PathTooLongException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.IO.IOException" />을 catch합니다.  
  

            
  
 <paramref name="path" /> 매개변수가 시스템에 정의된 최대 길이보다 깁니다.</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위로 표시되는 파일 경로의 확장명을 반환합니다.</summary>
      <param name="path">확장명을 가져올 파일 경로입니다.</param>
      <returns>지정된 경로(마침표 “.” 포함)의 확장명 또는 <paramref name="path" />에 확장명 정보가 없는 경우 <see cref="P:System.ReadOnlySpan`1.Empty" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>지정된 경로 문자열의 확장명(마침표 "." 포함)을 반환합니다.</summary>
      <param name="path">확장명을 가져올 경로 문자열입니다.</param>
      <returns>"."(마침표)를 포함한 지정된 경로의 확장명, <see langword="null" /> 또는 <see cref="F:System.String.Empty" />입니다. <paramref name="path" />이(가) <see langword="null" />이면, <see cref="M:System.IO.Path.GetExtension(System.String)" />은(는) <see langword="null" />을(를) 반환합니다. <paramref name="path" />에 확장명 정보가 없는 경우 <see cref="M:System.IO.Path.GetExtension(System.String)" />은(는) <see cref="F:System.String.Empty" />을(를) 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위로 표시되는 파일 경로의 파일 이름 및 확장명을 반환합니다.</summary>
      <param name="path">파일 이름과 확장명을 가져올 경로를 포함하는 읽기 전용 범위입니다.</param>
      <returns>
        <paramref name="path" />에서 마지막 디렉터리 구분 문자 뒤의 문자입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>지정된 경로 문자열에서 파일 이름과 확장명을 반환합니다.</summary>
      <param name="path">파일 이름과 확장명을 가져올 경로 문자열입니다.</param>
      <returns>
        <paramref name="path" />에서 마지막 디렉터리 구분 문자 뒤의 문자입니다. <paramref name="path" />의 마지막 문자가 디렉터리나 볼륨 구분 문자이면 이 메서드는 <see cref="F:System.String.Empty" />을(를) 반환합니다. <paramref name="path" />이(가) <see langword="null" />이면 이 메서드는 <see langword="null" />을(를) 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
      <summary>읽기 전용 문자 범위로 표시되는 파일 경로의 확장명 없는 파일 이름을 반환합니다.</summary>
      <param name="path">확장명 없이 파일 이름을 가져올 경로를 포함하는 읽기 전용 범위입니다.</param>
      <returns>마지막 마침표(.)와 그다음에 나오는 모든 문자를 제외한 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />에서 반환된 읽기 전용 범위의 문자입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>확장명 없이 지정된 경로 문자열의 파일 이름을 반환합니다.</summary>
      <param name="path">파일의 경로입니다.</param>
      <returns>마지막 마침표(.)와 그 다음에 나오는 모든 문자인 <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />에서 반환한 문자열입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>지정된 경로 문자열에 대한 절대 경로를 반환합니다.</summary>
      <param name="path">절대 경로 정보를 가져올 파일 또는 디렉터리입니다.</param>
      <returns>"C:\MyFile.txt"처럼 <paramref name="path" />의 정규화된 위치입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 길이가 0인 문자열이거나 공백만 포함하거나 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 하나 이상의 잘못된 문자를 포함하는 경우
또는
절대 경로를 검색할 수 없는 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 사용 권한이 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" />에 볼륨 식별자(예: "c:\")의 일부가 아닌 콜론(":")이 포함됩니다.</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String,System.String)">
      <summary>정규화된 기본 경로의 절대 경로와 상대 경로를 반환합니다.</summary>
      <param name="path">
        <paramref name="basePath" />에 연결할 상대 경로입니다.</param>
      <param name="basePath">정규화된 경로의 시작입니다.</param>
      <returns>절대 경로입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 또는 <paramref name="basePath" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="basePath" />는 정규화된 경로가 아닙니다.
또는
<paramref name="path" /> 또는 <paramref name="basePath" />에 U+0000과 같은 잘못된 경로 문자가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>파일 이름에 사용할 수 없는 문자가 포함된 배열을 가져옵니다.</summary>
      <returns>파일 이름에 사용할 수 없는 문자가 포함된 배열입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>경로 이름에 사용할 수 없는 문자가 포함된 배열을 가져옵니다.</summary>
      <returns>파일 이름에 사용할 수 없는 문자가 포함된 배열입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.ReadOnlySpan{System.Char})">
      <summary>지정된 문자 범위에 포함된 경로에서 루트 디렉터리 정보를 가져옵니다.</summary>
      <param name="path">루트 디렉터리 정보를 가져올 경로를 포함하는 읽기 전용 문자 범위입니다.</param>
      <returns>
        <paramref name="path" />의 루트 디렉터리를 포함하는 읽기 전용 문자 범위입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>지정된 문자열에 포함된 경로로부터 루트 디렉터리 정보를 가져옵니다.</summary>
      <param name="path">루트 디렉터리 정보를 가져올 경로를 포함하는 문자열입니다.</param>
      <returns>루팅된 경우, <paramref name="path" />의 루트 디렉터리입니다.
또는
<paramref name="path" />이(가) 루트 디렉터리 정보를 포함하지 않은 경우 <see cref="F:System.String.Empty" />입니다.
또는
<paramref name="path" />이(가) <see langword="null" />이거나 실질적으로 비어있으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">.NET Framework에만 해당: <paramref name="path" />이(가) <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자 중 하나 이상을 포함합니다.
또는
.NET Framework에만 해당: <see cref="F:System.String.Empty" />이(가) <paramref name="path" />에 전달되었습니다.</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>임의의 폴더 이름 또는 파일 이름을 반환합니다.</summary>
      <returns>임의의 폴더 이름 또는 파일 이름입니다.</returns>
    </member>
    <member name="M:System.IO.Path.GetRelativePath(System.String,System.String)">
      <summary>한 경로에서 다른 경로까지 상대 경로를 반환합니다.</summary>
      <param name="relativeTo">결과 경로의 기준이 되는 소스 경로입니다. 이 경로는 항상 디렉터리로 간주합니다.</param>
      <param name="path">대상 경로입니다.</param>
      <returns>상대 경로 또는 경로가 동일한 루트를 공유하지 않는 경우 <paramref name="path" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relativeTo" /> 또는 <paramref name="path" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>디스크에 크기가 0바이트인 고유한 이름의 임시 파일을 만들고 해당 파일의 전체 경로를 반환합니다.</summary>
      <returns>임시 파일의 전체 경로입니다.</returns>
      <exception cref="T:System.IO.IOException">사용할 수 있는 고유한 임시 파일 이름이 없는 경우와 같은 I/O 오류가 발생한 경우
또는
이 메서드로 임시 파일을 만들지 못한 경우</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>현재 사용자의 임시 폴더 경로를 반환합니다.</summary>
      <returns>백슬래시로 끝나는 임시 폴더 경로입니다.</returns>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 사용 권한이 없습니다.</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.ReadOnlySpan{System.Char})">
      <summary>지정된 문자 범위로 표시되는 경로에 파일 이름 확장명이 포함되는지 확인합니다.</summary>
      <param name="path">확장명을 검색할 경로입니다.</param>
      <returns>경로의 마지막 디렉터리 구분 문자 또는 볼륨 구분 기호 다음에 나오는 문자에 마침표(“.”)와 하나 이상의 문자가 차례로 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>경로에 파일 확장명이 포함된지를 확인합니다.</summary>
      <param name="path">확장명을 검색할 경로입니다.</param>
      <returns>경로의 마지막 디렉터리 구분 문자(\\ 또는 /) 또는 볼륨 구분 기호 문자(:) 다음에 나오는 문자에 마침표(.)와 하나 이상의 문자가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함되어 있는 경우</exception>
    </member>
    <member name="F:System.IO.Path.InvalidPathChars">
      <summary>
        <see cref="T:System.IO.Path" /> 클래스의 멤버에 전달되는 경로 문자열 인수에 사용할 수 없는 플랫폼 특정 문자 배열을 제공합니다.</summary>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
      <summary>지정된 문자 범위로 표시되는 파일 경로가 특정 드라이브 또는 UNC 경로에 고정되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path">파일 경로입니다.</param>
      <returns>경로가 특정 드라이브 또는 UNC 경로에 고정된 경우 <see langword="true" />이고, 경로가 현재 드라이브 또는 작업 디렉터리에 상대적인 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.IsPathFullyQualified(System.String)">
      <summary>지정된 파일 경로가 특정 드라이브 또는 UNC 경로에 고정되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path">파일 경로입니다.</param>
      <returns>경로가 특정 드라이브 또는 UNC 경로에 고정된 경우 <see langword="true" />이고, 경로가 현재 드라이브 또는 작업 디렉터리에 상대적인 경우 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.ReadOnlySpan{System.Char})">
      <summary>파일 경로를 나타내는 지정된 문자 범위가 루트를 포함하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path">테스트할 경로입니다.</param>
      <returns>
        <paramref name="path" />에 루트가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>지정된 경로 문자열에 루트가 포함되는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path">테스트할 경로입니다.</param>
      <returns>
        <paramref name="path" />에 루트가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />에 <see cref="M:System.IO.Path.GetInvalidPathChars" />에 정의된 잘못된 문자가 하나 이상 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>두 경로 구성 요소를 단일 경로로 연결합니다.</summary>
      <param name="path1">조인할 첫 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path2">조인할 두 번째 경로를 포함하는 문자 범위입니다.</param>
      <returns>결합된 경로입니다.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>세 개의 경로 구성 요소를 단일 경로로 연결합니다.</summary>
      <param name="path1">조인할 첫 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path2">조인할 두 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path3">조인할 세 번째 경로를 포함하는 문자 범위입니다.</param>
      <returns>연결된 경로입니다.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>네 경로 구성 요소를 단일 경로로 연결합니다.</summary>
      <param name="path1">조인할 첫 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path2">조인할 두 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path3">조인할 세 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path4">조인할 네 번째 경로를 포함하는 문자 범위입니다.</param>
      <returns>연결된 경로입니다.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String)">
      <summary>두 경로를 단일 경로에 연결합니다.</summary>
      <param name="path1">조인할 첫 번째 경로입니다.</param>
      <param name="path2">조인할 두 번째 경로입니다.</param>
      <returns>연결된 경로입니다.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String)">
      <summary>세 개의 경로를 단일 경로에 연결합니다.</summary>
      <param name="path1">조인할 첫 번째 경로입니다.</param>
      <param name="path2">조인할 두 번째 경로입니다.</param>
      <param name="path3">조인할 세 번째 경로입니다.</param>
      <returns>연결된 경로입니다.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String,System.String,System.String,System.String)">
      <summary>네 경로를 단일 경로에 연결합니다.</summary>
      <param name="path1">조인할 첫 번째 경로입니다.</param>
      <param name="path2">조인할 두 번째 경로입니다.</param>
      <param name="path3">조인할 세 번째 경로입니다.</param>
      <param name="path4">조인할 네 번째 경로입니다.</param>
      <returns>연결된 경로입니다.</returns>
    </member>
    <member name="M:System.IO.Path.Join(System.String[])">
      <summary>경로 배열을 단일 경로로 연결합니다.</summary>
      <param name="paths">경로 배열입니다.</param>
      <returns>연결된 경로입니다.</returns>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>환경 변수에서 경로 문자열을 구분하는 데 사용되는 플랫폼 특정 구분 문자입니다.</summary>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
      <summary>지정된 경로의 루트를 벗어나는 후행 디렉터리 구분 기호를 하나 잘라냅니다.</summary>
      <param name="path">자를 경로입니다.</param>
      <returns>후행 디렉터리 구분 기호를 사용하지 않는 <paramref name="path" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.TrimEndingDirectorySeparator(System.String)">
      <summary>지정된 경로의 루트를 벗어나는 후행 디렉터리 구분 기호를 하나 잘라냅니다.</summary>
      <param name="path">자를 경로입니다.</param>
      <returns>후행 디렉터리 구분 기호를 사용하지 않는 <paramref name="path" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>두 개의 경로 구성 요소를 미리 할당된 단일 문자 범위로 연결하려고 시도하고 작업이 성공했는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path1">조인할 첫 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path2">조인할 두 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path3">조인할 세 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="destination">연결된 경로를 포함할 문자 범위입니다.</param>
      <param name="charsWritten">메서드가 반환하는 경우 <paramref name="destination" />에 기록된 문자 수를 나타내는 값입니다.</param>
      <returns>연결 작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Path.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
      <summary>두 개의 경로 구성 요소를 미리 할당된 단일 문자 범위로 연결하려고 시도하고 작업이 성공했는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="path1">조인할 첫 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="path2">조인할 두 번째 경로를 포함하는 문자 범위입니다.</param>
      <param name="destination">연결된 경로를 포함할 문자 범위입니다.</param>
      <param name="charsWritten">메서드가 반환하는 경우 <paramref name="destination" />에 기록된 문자 수를 나타내는 값입니다.</param>
      <returns>연결 작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>플랫폼 특정 볼륨 구분 기호 문자를 제공합니다.</summary>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>특정 인코딩의 바이트 스트림에서 문자를 읽는 <see cref="T:System.IO.TextReader" />를 구현합니다.</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>지정된 스트림에 대한 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">읽을 스트림입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />이 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>지정한 바이트 순서 표시 검색 옵션을 사용하여 지정된 스트림으로 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">읽을 스트림입니다.</param>
      <param name="detectEncodingFromByteOrderMarks">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />이 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>지정된 문자 인코딩을 사용하여 지정된 스트림으로 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">읽을 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />이 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>지정된 문자 인코딩과 바이트 순서 표시 검색 옵션을 사용하여 특정 스트림에 대해 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">읽을 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="detectEncodingFromByteOrderMarks">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />이 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>지정된 문자 인코딩과 바이트 순서 표시 검색 옵션을 사용하여 특정 스트림에 대해 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">읽을 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="detectEncodingFromByteOrderMarks">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</param>
      <param name="bufferSize">최소 버퍼 크기입니다.</param>
      <exception cref="T:System.ArgumentException">스트림이 읽기를 지원하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" />가 0보다 작거나 같습니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>지정된 문자 인코딩, 바이트 순서 표시 검색 옵션 및 버퍼 크기를 사용하여 특정 스트림에 대해 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화하며, 선택적으로 스트림을 연 상태로 둘 수 있습니다.</summary>
      <param name="stream">읽을 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="detectEncodingFromByteOrderMarks">파일의 시작 부분에서 바이트 순서 표시를 찾으려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="bufferSize">최소 버퍼 크기입니다.</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.StreamReader" /> 개체를 삭제한 후 스트림을 열어 두려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>지정된 파일 이름에 대한 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="path">읽을 전체 파일 경로입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">파일을 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블이 있는 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>지정한 바이트 순서 표시 검색 옵션을 사용하여 지정한 파일 이름에 대해 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="path">읽을 전체 파일 경로입니다.</param>
      <param name="detectEncodingFromByteOrderMarks">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">파일을 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블이 있는 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>지정된 문자 인코딩을 사용하여 지정된 파일 이름에 대한 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="path">읽을 전체 파일 경로입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">파일을 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블이 있는 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>지정한 문자 인코딩과 바이트 순서 표시 검색 옵션을 사용하여 특정 파일 이름에 대해 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="path">읽을 전체 파일 경로입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="detectEncodingFromByteOrderMarks">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">파일을 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블이 있는 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>지정된 문자 인코딩과 바이트 순서 표시 검색 옵션을 사용하여 특정 파일 이름에 대해 <see cref="T:System.IO.StreamReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="path">읽을 전체 파일 경로입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="detectEncodingFromByteOrderMarks">파일의 시작 부분에서 바이트 순서 표시를 찾을지 여부를 나타냅니다.</param>
      <param name="bufferSize">최소 버퍼 크기(16비트 문자 수)입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">파일을 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블이 있는 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" />가 0보다 작거나 같습니다.</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>내부 스트림을 반환합니다.</summary>
      <returns>내부 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>
        <see cref="T:System.IO.StreamReader" /> 개체와 내부 스트림을 닫고 판독기와 관련된 모든 시스템 리소스를 해제합니다.</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>현재 <see cref="T:System.IO.StreamReader" /> 개체에서 사용 중인 현재 문자 인코딩을 가져옵니다.</summary>
      <returns>현재 판독기에서 사용하는 문자 인코딩입니다. <see cref="Overload:System.IO.StreamReader.Read" /> 메서드를 처음으로 호출할 때 인코딩이 자동으로 검색되므로 <see cref="T:System.IO.StreamReader" />의 <see cref="Overload:System.IO.StreamReader.Read" /> 메서드를 처음으로 호출하면 값이 달라질 수 있습니다.</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>내부 버퍼를 지웁니다.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>내부 스트림을 닫고 <see cref="T:System.IO.StreamReader" />에서 사용하는 관리되지 않는 리소스를 해제하고 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>현재 스트림 위치가 스트림의 끝에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 스트림 위치가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">내부 스트림이 삭제된 경우</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>빈 스트림 주위의 <see cref="T:System.IO.StreamReader" /> 개체입니다.</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>사용할 수 있는 다음 문자를 반환하지만 사용하지는 않습니다.</summary>
      <returns>읽을 다음 문자를 나타내는 정수이거나, 읽을 문자가 없거나 스트림에서 검색을 지원하지 않을 경우 -1입니다.</returns>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>입력 스트림에서 다음 문자를 읽고 문자 위치를 한 문자씩 앞으로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Int32" /> 개체로 표시되는 입력 스트림의 다음 문자입니다. 사용할 수 있는 문자가 더 이상 없는 경우에는 -1입니다.</returns>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>현재 스트림에서 지정된 최대 문자를 지정된 인덱스부터 버퍼로 읽어 들입니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<c>인덱스 + 카운트 - 1</c>) 사이에서 현재 원본로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 인덱스입니다.</param>
      <param name="count">읽을 최대 문자 수입니다.</param>
      <returns>읽은 문자 수를 반환하거나 스트림의 끝에 있고 읽은 데이터가 없으면 0을 반환합니다. 이 수는 스트림 내에서 데이터를 사용할 수 있는지 여부에 따라 <paramref name="count" /> 매개 변수보다 작거나 같습니다.</returns>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">스트림이 닫히는 등의 I/O 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Span{System.Char})">
      <summary>현재의 스트림에서 범위로 문자를 읽어 들입니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 범위를 포함합니다.</param>
      <returns>읽은 문자 수를 반환하거나 스트림의 끝에 있고 읽은 데이터가 없으면 0을 반환합니다. 데이터가 스트림 내에서 가용한지에 따라 이 수는 <paramref name="buffer" /> 길이보다 작거나 같을 수 있습니다.</returns>
      <exception cref="T:System.IO.IOException">스트림에서 읽은 문자 수가 <paramref name="buffer" /> 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>현재 스트림에서 지정된 최대 수의 문자를 비동기적으로 읽어 이 데이터를 지정된 인덱스에서 시작되는 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다. 지정한 문자 수를 버퍼에 기록하기 전에 스트림의 끝에 도달하면 현재 메서드가 반환됩니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어 들인 총 문자 수를 포함합니다. 현재 사용할 수 있는 문자 수가 요청된 수보다 작을 경우 결과 값이 요청된 문자 수보다 작을 수 있으며, 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>현재의 스트림에서 메모리 블록으로 문자를 비동기적으로 읽어 들입니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 메모리 블록을 포함합니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 값 작업입니다. 값 작업의 형식 매개 변수의 값이 읽은 문자 수를 포함하고, 스트림의 끝이거나 읽은 데이터가 없으면 0을 포함합니다. 데이터가 스트림 내에서 가용한지에 따라 이 수는 <paramref name="buffer" /> 길이보다 작거나 같을 수 있습니다.</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>현재 스트림에서 지정된 최대 수의 문자를 읽어 이 데이터를 지정된 인덱스에서 시작되는 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<c>인덱스 + 카운트 - 1</c>) 사이에서 현재 원본로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다.</param>
      <returns>읽은 문자 수입니다. 이 문자 수는 모든 입력 문자를 읽었는지 여부에 따라 <paramref name="count" />보다 작거나 같습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Span{System.Char})">
      <summary>현재의 스트림에서 문자를 읽고, 버퍼에 데이터를 씁니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 범위를 포함합니다.</param>
      <returns>읽은 문자 수입니다. 모든 입력 문자를 읽었는지에 따라 이 수는 <paramref name="buffer" /> 길이보다 작거나 같을 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>현재 스트림에서 지정된 최대 수의 문자를 비동기적으로 읽어 이 데이터를 지정된 인덱스에서 시작되는 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다. 지정한 문자 수를 버퍼에 기록하기 전에 스트림의 끝에 도달하면 메서드가 반환됩니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어 들인 총 문자 수를 포함합니다. 현재 사용할 수 있는 문자 수가 요청된 수보다 작을 경우 결과 값이 요청된 문자 수보다 작을 수 있으며, 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>현재의 스트림에서 비동기적으로 문자를 읽고, 버퍼에 데이터를 씁니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 메모리 블록을 포함합니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 값 작업입니다. 값 작업의 형식 매개 변수 값은 버퍼에 읽어 들인 총 문자 수를 포함합니다. 현재 사용할 수 있는 문자 수가 요청된 수보다 작을 경우 결과 값이 요청된 문자 수보다 작을 수 있으며, 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>현재 스트림에서 한 줄의 문자를 읽고 데이터를 문자열로 반환합니다.</summary>
      <returns>입력 스트림의 다음 줄을 반환하거나 입력 스트림의 끝에 도달한 경우 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 반환된 문자열의 버퍼를 할당할 수 없습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>현재 스트림에서 한 줄의 문자를 비동기적으로 읽고 데이터를 문자열로 반환합니다.</summary>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 스트림의 다음 줄을 포함하거나 모든 문자가 읽혀진 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">다음 줄의 문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>현재 위치부터 스트림 끝까지의 모든 문자를 읽습니다.</summary>
      <returns>현재 위치에서 끝까지의 스트림은 문자열입니다. 현재 위치가 스트림 끝에 있으면 빈 문자열("")을 반환합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 반환된 문자열의 버퍼를 할당할 수 없습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>현재 위치부터 스트림 끝까지의 모든 문자를 비동기적으로 읽어서 이를 하나의 문자열로 반환합니다.</summary>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 현재 위치에서 스트림 끝까지의 문자로 이루어진 문자열을 포함합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>
        <see cref="T:System.IO.TextWriter" />를 구현하여 특정 인코딩의 스트림에 문자를 씁니다.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>UTF-8 인코딩과 기본 버퍼 크기를 사용하여 지정된 스트림에 대해 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">쓸 스트림입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />에 쓸 수 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>지정된 인코딩과 기본 버퍼 크기를 사용하여 지정된 스트림에 대한 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">쓸 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />에 쓸 수 없습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>지정된 인코딩과 버퍼 크기를 사용하여 지정된 스트림에 대한 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">쓸 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="bufferSize">버퍼 크기(바이트)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />에 쓸 수 없습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>지정된 인코딩과 기본 버퍼 크기를 사용하여 지정된 스트림에 대한 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화하며, 선택적으로 스트림을 연 상태로 둘 수 있습니다.</summary>
      <param name="stream">쓸 스트림입니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="bufferSize">버퍼 크기(바이트)입니다.</param>
      <param name="leaveOpen">
        <see cref="T:System.IO.StreamWriter" /> 개체를 삭제한 후 스트림을 열어 두려면 <see langword="true" />이고, 닫으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" />에 쓸 수 없습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>기본 인코딩 및 버퍼 크기를 사용하여 지정된 파일에 대해 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="path">기록할 전체 파일 경로입니다. <paramref name="path" />는 파일 이름일 수 있습니다.</param>
      <exception cref="T:System.UnauthorizedAccessException">액세스가 거부되었습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")인 경우
또는
<paramref name="path" />에 com1, com2 등의 시스템 디바이스 이름이 포함되어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블 구문이 있는 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>기본 인코딩 및 버퍼 크기를 사용하여 지정된 파일에 대해 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화합니다. 해당 파일이 있으면 덮어쓰거나 추가합니다. 해당 파일이 없으면 이 생성자는 새 파일을 만듭니다.</summary>
      <param name="path">기록할 전체 파일 경로입니다.</param>
      <param name="append">데이터를 파일에 추가하려면 <see langword="true" />이고, 파일을 덮어쓰려면 <see langword="false" />입니다. 지정한 파일이 없으며 이 매개 변수에 영향이 없으면 생성자는 새 파일을 만듭니다.</param>
      <exception cref="T:System.UnauthorizedAccessException">액세스가 거부되었습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 비어 있는 경우
또는
<paramref name="path" />에 com1, com2 등의 시스템 디바이스 이름이 포함되어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블 구문이 있는 경우</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>지정된 인코딩 및 기본 버퍼 크기를 사용하여 지정된 파일에 대해 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화합니다. 해당 파일이 있으면 덮어쓰거나 추가합니다. 해당 파일이 없으면 이 생성자는 새 파일을 만듭니다.</summary>
      <param name="path">기록할 전체 파일 경로입니다.</param>
      <param name="append">데이터를 파일에 추가하려면 <see langword="true" />이고, 파일을 덮어쓰려면 <see langword="false" />입니다. 지정한 파일이 없으며 이 매개 변수에 영향이 없으면 생성자는 새 파일을 만듭니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <exception cref="T:System.UnauthorizedAccessException">액세스가 거부되었습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 비어 있는 경우
또는
<paramref name="path" />에 com1, com2 등의 시스템 디바이스 이름이 포함되어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블 구문이 있는 경우</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>지정된 인코딩과 버퍼 크기를 사용하여 지정 경로의 지정 파일에 대한 <see cref="T:System.IO.StreamWriter" /> 클래스의 새 인스턴스를 초기화합니다. 해당 파일이 있으면 덮어쓰거나 추가합니다. 해당 파일이 없으면 이 생성자는 새 파일을 만듭니다.</summary>
      <param name="path">기록할 전체 파일 경로입니다.</param>
      <param name="append">데이터를 파일에 추가하려면 <see langword="true" />이고, 파일을 덮어쓰려면 <see langword="false" />입니다. 지정한 파일이 없으며 이 매개 변수에 영향이 없으면 생성자는 새 파일을 만듭니다.</param>
      <param name="encoding">사용할 문자 인코딩입니다.</param>
      <param name="bufferSize">버퍼 크기(바이트)입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")인 경우
또는
<paramref name="path" />에 com1, com2 등의 시스템 디바이스 이름이 포함되어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 또는 <paramref name="encoding" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" />에 부정확하거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블 구문이 있는 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">액세스가 거부되었습니다.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>
        <see cref="T:System.IO.StreamWriter" />가 <see cref="M:System.IO.StreamWriter.Write(System.Char)" />를 호출할 때마다 해당 버퍼를 내부 스트림에 플러시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.IO.StreamWriter" />가 해당 버퍼를 플러시하게 하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>백업 저장소의 인터페이스 역할을 하는 내부 스트림을 가져옵니다.</summary>
      <returns>이 <see langword="StreamWriter" />가 쓰고 있는 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>현재 <see langword="StreamWriter" /> 개체 및 내부 스트림을 닫습니다.</summary>
      <exception cref="T:System.Text.EncoderFallbackException">현재 인코딩으로 유니코드 서로게이트 쌍의 한 쪽을 표시할 수 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>버퍼링된 데이터가 기본 스트림에 작성되고, <see cref="T:System.IO.StreamWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
      <exception cref="T:System.Text.EncoderFallbackException">현재 인코딩으로 유니코드 서로게이트 쌍의 한 쪽을 표시할 수 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.DisposeAsync">
      <summary>버퍼링된 모든 데이터를 기본 스트림에 비동기식으로 쓰고 <see cref="T:System.IO.StreamWriter" />에서 사용한 비관리형 리소스를 해제합니다.</summary>
      <returns>비동기 삭제 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>출력이 쓰여질 <see cref="T:System.Text.Encoding" />을 가져옵니다.</summary>
      <returns>현재 인스턴스에 대해 생성자에 지정된 <see cref="T:System.Text.Encoding" />이거나, 인코딩이 지정되지 않은 경우 <see cref="T:System.Text.UTF8Encoding" />입니다.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>현재 writer의 모든 버퍼를 지우면 버퍼링된 모든 데이터가 내부 스트림에 쓰여집니다.</summary>
      <exception cref="T:System.ObjectDisposedException">현재 writer가 닫힌 경우</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">현재 인코딩으로 유니코드 서로게이트 쌍의 한 쪽을 표시할 수 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>이 스트림에 대한 모든 버퍼를 비동기적으로 지우고 버퍼링된 모든 데이터가 내부 디바이스에 비동기적으로 쓰여지도록 합니다.</summary>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 삭제되었습니다.</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>쓸 수는 있지만 읽을 수는 없는 백업 저장소를 <see langword="StreamWriter" />에 제공하지 않습니다.</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>스트림에 문자를 씁니다.</summary>
      <param name="value">스트림에 쓸 문자입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, 현재 작성기가 닫혀 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, <see cref="T:System.IO.StreamWriter" />가 스트림 끝에 있기 때문에 버퍼 내용을 내부 고정 크기 스트림에 쓸 수 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>스트림에 문자 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터를 포함하는 문자 배열입니다. <paramref name="buffer" />가 <see langword="null" />이면 아무 것도 쓰지 않습니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, 현재 작성기가 닫혀 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, <see cref="T:System.IO.StreamWriter" />가 스트림 끝에 있기 때문에 버퍼 내용을 내부 고정 크기 스트림에 쓸 수 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>스트림에 문자의 하위 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터를 포함하는 문자 배열입니다.</param>
      <param name="index">데이터 읽기를 시작하는 버퍼의 문자 위치입니다.</param>
      <param name="count">쓸 최대 문자 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, 현재 작성기가 닫혀 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, <see cref="T:System.IO.StreamWriter" />가 스트림 끝에 있기 때문에 버퍼 내용을 내부 고정 크기 스트림에 쓸 수 없는 경우</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>스트림에 문자 범위를 씁니다.</summary>
      <param name="buffer">쓸 문자 범위입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>스트림에 문자열을 씁니다.</summary>
      <param name="value">스트림에 쓸 문자열입니다. <paramref name="value" />가 null이면 아무 것도 쓰여지지 않습니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, 현재 작성기가 닫혀 있는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" />가 true이거나 <see cref="T:System.IO.StreamWriter" /> 버퍼가 꽉 차 있고, <see cref="T:System.IO.StreamWriter" />가 스트림 끝에 있기 때문에 버퍼 내용을 내부 고정 크기 스트림에 쓸 수 없는 경우</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 개체입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
      <param name="arg2">서식을 지정하고 쓸 세 번째 개체입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object[])" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg">서식을 지정하고 쓸 개체를 0개 이상 포함하는 개체 배열입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>문자를 스트림에 비동기식으로 씁니다.</summary>
      <param name="value">스트림에 쓸 문자입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림 작성기를 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>문자의 하위 배열을 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">쓸 데이터를 포함하는 문자 배열입니다.</param>
      <param name="index">데이터 읽기를 시작할 버퍼의 문자 위치입니다.</param>
      <param name="count">쓸 최대 문자 수입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" />와 <paramref name="count" />의 합이 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림 작성기를 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>문자 메모리 영역을 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">스트림에 쓸 문자 메모리 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>문자열을 스트림에 비동기식으로 씁니다.</summary>
      <param name="value">스트림에 쓸 문자열입니다. <paramref name="value" />가 <see langword="null" />이면 아무 것도 쓰지 않습니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림 작성기를 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>스트림에 줄 종결자가 다음에 오도록 문자 범위의 텍스트 표현을 씁니다.</summary>
      <param name="buffer">스트림에 쓸 문자 범위입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String)">
      <summary>문자열과 줄 종결자를 차례로 스트림에 씁니다.</summary>
      <param name="value">쓸 문자열입니다. <paramref name="value" />가 <see langword="null" />이면 줄 종결자만 씁니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 개체입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" />와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
      <param name="arg2">서식을 지정하고 쓸 세 번째 개체입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLine(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" />와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg">서식을 지정하고 쓸 개체를 0개 이상 포함하는 개체 배열입니다.</param>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>줄 종결자를 스트림에 비동기식으로 씁니다.</summary>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림 작성기를 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>스트림에 줄 종결자가 다음에 오도록 비동기식으로 문자를 씁니다.</summary>
      <param name="value">스트림에 쓸 문자입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림 작성기를 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>문자의 하위 배열과 줄 종결자를 차례로 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">데이터 읽기를 시작하는 버퍼의 문자 위치입니다.</param>
      <param name="count">쓸 최대 문자 수입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" />와 <paramref name="count" />의 합이 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림 작성기를 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>스트림에 줄 종결자가 다음에 오도록 문자 메모리 범위의 텍스트 표현을 비동기식으로 씁니다.</summary>
      <param name="buffer">스트림에 쓸 문자 메모리 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>스트림에 줄 종결자가 다음에 오도록 비동기식으로 문자열을 씁니다.</summary>
      <param name="value">쓸 문자열입니다. 값이 <see langword="null" />이면 줄 종결자만 씁니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 현재 스트림 작성기를 사용하고 있습니다.</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>문자열에서 읽는 <see cref="T:System.IO.TextReader" />을 구현 합니다.</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>지정 된 문자열에서 읽는 <see cref="T:System.IO.StringReader" /> 클래스의 새 인스턴스를 초기화 합니다.</summary>
      <param name="s">
        <see cref="T:System.IO.StringReader" />를 초기화 해야 하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수는 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>
        <see cref="T:System.IO.StringReader" />를 닫습니다.</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.StringReader" />에서 사용한 관리되지 않는 리소스를 해제하고 선택적으로 관리되는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>사용할 수 있는 다음 문자를 반환하지만 사용하지는 않습니다.</summary>
      <returns>다음 문자를 나타내는 정수를 읽을 수 또는 사용할 수 있는 문자가 더 이상 없으면-1 또는 스트림으로 검색 지원 하지 않습니다.</returns>
      <exception cref="T:System.ObjectDisposedException">현재 판독기가 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>입력된 문자열에서 다음 문자를 읽고 문자 위치를 한 글자씩 합니다.</summary>
      <returns>내부 문자열 또는 사용할 수 있는 문자가 더 이상 없으면-1에서 다음 문자입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">현재 판독기가 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>입력 문자열에서 문자 블록을 읽고 <paramref name="count" />하 여 문자 위치를 앞으로 이동 합니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">버퍼의 시작 인덱스입니다.</param>
      <param name="count">읽을 문자 수입니다.</param>
      <returns>버퍼로 읽어온 총 문자 수입니다. 이 문자 수가 경우 요청 된 문자 수를 현재 사용할 수 없는 경우 0 내부 문자열의 끝에 도달한 수보다 작을 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">현재 판독기가 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Span{System.Char})">
      <summary>입력 문자열에서 현재 위치부터 시작 하 여 모든 문자를 읽고 현재 위치를 입력 문자열의 끝으로 이동 합니다.</summary>
      <param name="buffer">이 메서드가 반환 될 때 현재 소스에서 읽은 문자를 포함 합니다. 읽은 총 문자 수가 0 이면 범위는 수정 되지 않은 상태로 유지 됩니다.</param>
      <returns>버퍼로 읽어온 총 문자 수입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">현재 문자열 판독기 인스턴스가 닫혀 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>현재 문자열에서 지정 된 최대 문자 수를 비동기적으로 읽어 지정된 된 인덱스에서 시작 되는 버퍼에 데이터를 쓰고 있습니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다. 메서드를 반환 하는 경우 지정 된 개수의 문자 버퍼에 기록 되기 전에 문자열의 끝에 도달 하면, 합니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 결과 값을 바이트 수가 요청 된 수보다 작을 경우 현재 사용할 수 있는 바이트 수가 요청 된 수보다 작습니다 문자열의 끝에 도달한 경우 0 (영) 수 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">문자열 판독기가 삭제 되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>현재 위치에서 시작 하 여 입력 문자열에서 모든 문자를 비동기적으로 읽어 입력 문자열의 끝으로 현재 위치를 앞으로 이동 합니다.</summary>
      <param name="buffer">이 메서드가 반환 될 때 현재 소스에서 읽은 문자를 포함 합니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어 들인 총 문자 수를 포함합니다.</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadBlock(System.Span{System.Char})">
      <summary>현재 위치에서 시작 하 여 입력 문자열에서 모든 문자를 읽고 입력 문자열의 끝으로 현재 위치를 앞으로 이동 합니다.</summary>
      <param name="buffer">이 메서드가 반환 될 때 현재 소스에서 읽은 문자를 포함 합니다. 읽은 총 문자 수가 0 이면 범위는 수정 되지 않은 상태로 유지 됩니다.</param>
      <returns>버퍼로 읽어온 총 문자 수입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">현재 문자열 판독기 인스턴스가 닫혀 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>현재 문자열에서 지정 된 최대 문자 수를 비동기적으로 읽어 지정된 된 인덱스에서 시작 되는 버퍼에 데이터를 쓰고 있습니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다. 메서드를 반환 하는 경우 지정 된 개수의 문자 버퍼에 기록 되기 전에 문자열의 끝에 도달 하면, 합니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 결과 값을 바이트 수가 요청 된 수보다 작을 경우 현재 사용할 수 있는 바이트 수가 요청 된 수보다 작습니다 문자열의 끝에 도달한 경우 0 (영) 수 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">문자열 판독기가 삭제 되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>현재 위치에서 시작 하 여 입력 문자열의 모든 문자를 비동기적으로 읽어 입력 문자열의 끝 부분으로 이동 합니다.</summary>
      <param name="buffer">이 메서드가 반환 될 때 현재 소스에서 읽은 문자를 포함 합니다. 읽은 총 문자 수가 0 이면 범위는 수정 되지 않은 상태로 유지 됩니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어 들인 총 문자 수를 포함합니다.</returns>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>현재 문자열에서 한 줄의 문자를 읽고 데이터를 문자열로 반환 합니다.</summary>
      <returns>현재 문자열의 다음 줄 또는 문자열의 끝에 도달 하는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">현재 판독기가 닫힌 경우</exception>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 반환된 문자열의 버퍼를 할당할 수 없습니다.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>현재 문자열에서 한 줄의 문자를 비동기적으로 읽어 및 데이터를 문자열로 반환 합니다.</summary>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 문자열 판독기의 다음 줄을 포함 하거나 모든 문자를 읽은 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">다음 줄의 문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">문자열 판독기가 삭제 되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>문자열의 끝에 모든 문자 현재 위치에서 읽어서 단일 문자열로 반환 합니다.</summary>
      <returns>내부 문자열의 끝에 현재 위치에서 콘텐츠입니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 반환된 문자열의 버퍼를 할당할 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">현재 판독기가 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>모든 문자를 현재 위치에서 문자열의 끝에 비동기적으로 읽어서 단일 문자열로 반환 합니다.</summary>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 현재 위치에서 문자열 끝 까지의 문자로 이루어진 문자열을 포함 합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">문자열 판독기가 삭제 되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>정보를 문자열로 쓰기 위한 <see cref="T:System.IO.TextWriter" />를 구현합니다. 정보는 내부 <see cref="T:System.Text.StringBuilder" />에 저장됩니다.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>
        <see cref="T:System.IO.StringWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>지정한 형식 제어를 사용하여 <see cref="T:System.IO.StringWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="formatProvider">서식 지정을 제어하는 <see cref="T:System.IFormatProvider" /> 개체입니다.</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>지정한 <see cref="T:System.IO.StringWriter" />에 쓰는 <see cref="T:System.Text.StringBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sb">쓸 대상 <see cref="T:System.Text.StringBuilder" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>지정한 <see cref="T:System.IO.StringWriter" />에 쓰고 지정한 서식 공급자를 갖는 <see cref="T:System.Text.StringBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sb">쓸 대상 <see cref="T:System.Text.StringBuilder" /> 개체입니다.</param>
      <param name="formatProvider">서식 지정을 제어하는 <see cref="T:System.IFormatProvider" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>현재 <see cref="T:System.IO.StringWriter" /> 및 기본 스트림을 닫습니다.</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.StringWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>출력이 쓰여질 <see cref="T:System.Text.Encoding" />을 가져옵니다.</summary>
      <returns>출력이 쓰여질 <see langword="Encoding" />입니다.</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>현재 작성기에 대한 모든 버퍼를 비동기적으로 지우면 버퍼링된 모든 데이터를 내부 디바이스에 씁니다.</summary>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>내부 <see cref="T:System.Text.StringBuilder" />를 반환합니다.</summary>
      <returns>내부 <see langword="StringBuilder" />입니다.</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>현재 <see langword="StringWriter" />에 지금까지 쓰여진 문자가 포함된 문자열을 반환합니다.</summary>
      <returns>현재 <see langword="StringWriter" />에 쓰여진 문자가 포함된 문자열입니다.</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>문자를 문자열에 씁니다.</summary>
      <param name="value">쓸 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException">작성기가 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>문자의 하위 배열을 문자열에 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">데이터 읽기를 시작하는 버퍼의 위치입니다.</param>
      <param name="count">쓸 최대 문자 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 가 <see langword="null" />일 수 있습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. <see langword="Length" />.</exception>
      <exception cref="T:System.ObjectDisposedException">작성기가 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>현재 문자열에 문자 범위의 문자열 표현을 씁니다.</summary>
      <param name="buffer">문자열에 쓸 문자 범위입니다.</param>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>문자를 현재 문자열에 씁니다.</summary>
      <param name="value">쓸 문자열입니다.</param>
      <exception cref="T:System.ObjectDisposedException">작성기가 닫힌 경우</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Text.StringBuilder)">
      <summary>현재 문자열에 문자열 작성기의 문자열 표현을 씁니다.</summary>
      <param name="value">문자열에 쓸 문자열 작성기입니다.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>문자를 문자열에 비동기적으로 씁니다.</summary>
      <param name="value">문자열에 쓸 문자입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">문자열 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 문자열 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>문자의 하위 배열을 문자열에 비동기적으로 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">데이터 읽기를 시작하는 버퍼의 위치입니다.</param>
      <param name="count">쓸 최대 문자 수입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" />와 <paramref name="count" />의 합이 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">문자열 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 문자열 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>문자열에 문자의 메모리 영역을 비동기식으로 씁니다.</summary>
      <param name="buffer">문자열에 쓸 문자 메모리 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>문자를 현재 문자열에 비동기적으로 씁니다.</summary>
      <param name="value">쓸 문자열입니다. <paramref name="value" />가 <see langword="null" />이면 텍스트 스트림에 아무 것도 쓰지 않습니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">문자열 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 문자열 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>문자열 작성기의 텍스트 표현을 문자열에 비동기식으로 씁니다.</summary>
      <param name="value">문자열에 쓸 문자열 작성기입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>문자열에 문자 범위의 텍스트 표현을 쓴 다음 줄 종결자를 씁니다.</summary>
      <param name="buffer">문자열에 쓸 문자 범위입니다.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLine(System.Text.StringBuilder)">
      <summary>문자열에 문자열 작성기의 텍스트 표현을 쓴 다음 줄 종결자를 씁니다.</summary>
      <param name="value">문자열에 문자열 작성기로 쓸 문자열입니다.</param>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>문자와 줄 종결자를 차례로 문자열에 비동기식으로 씁니다.</summary>
      <param name="value">문자열에 쓸 문자입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">문자열 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 문자열 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>문자의 하위 배열과 줄 종결자를 차례로 문자열에 비동기식으로 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">데이터 읽기를 시작하는 버퍼의 위치입니다.</param>
      <param name="count">쓸 최대 문자 수입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" />와 <paramref name="count" />의 합이 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">문자열 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 문자열 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>문자 메모리 범위의 문자열 표현과 줄 종결자를 차례로 현재 문자열에 비동기식으로 씁니다.</summary>
      <param name="buffer">문자열에 쓸 문자 메모리 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>문자열과 줄 종결자를 차례로 현재 문자열에 비동기식으로 씁니다.</summary>
      <param name="value">쓸 문자열입니다. 값이 <see langword="null" />이면 줄 종결자만 씁니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">문자열 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 문자열 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>문자열 작성기의 문자열 표현과 줄 종결자를 차례로 현재 문자열에 비동기식으로 씁니다.</summary>
      <param name="value">문자열에 쓸 문자열 작성기입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>여러 개의 문자를 순차적으로 읽을 수 있는 판독기를 나타냅니다.</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>
        <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>
        <see cref="T:System.IO.TextReader" />를 닫고 <see langword="TextReader" />와 관련된 시스템 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>해당 <see cref="T:System.IO.TextReader" /> 개체에서 사용하는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.TextReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>
        <see langword="TextReader" />에 읽을 데이터를 제공하지 않습니다.</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>문자 소스나 판독기의 상태를 변경하지 않고 다음 문자를 읽습니다. 판독기에서 실제로 읽지 않고 사용 가능한 다음 문자를 반환합니다.</summary>
      <returns>읽을 다음 문자를 나타내는 정수이거나, 사용할 수 있는 문자가 더 이상 없거나 판독기에서 검색을 지원하지 않을 경우 -1입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>텍스트 판독기에서 다음 문자를 읽고 문자 위치를 한 문자씩 앞으로 이동합니다.</summary>
      <returns>텍스트 판독기의 다음 문자 또는 사용할 수 있는 문자가 더 이상 없는 경우 -1입니다. 기본 구현된 경우에는 -1을 반환합니다.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>현재 판독기에서 지정된 최대 수의 문자를 읽어 이 데이터를 지정된 인덱스에서 시작되는 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다. 지정한 문자 수를 버퍼로 읽어오기 전에 판독기의 끝에 도달하면 메서드가 반환됩니다.</param>
      <returns>읽은 문자 수입니다. 이 문자 수는 판독기 내에서 데이터를 사용할 수 있는지 여부에 따라 <paramref name="count" />보다 작거나 같습니다. 읽을 문자가 더 이상 없는 경우에 이 메서드를 호출하면 0이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Span{System.Char})">
      <summary>현재 판독기에서 문자를 읽고, 지정된 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 범위를 포함합니다.</param>
      <returns>읽은 문자 수입니다. 데이터를 판독기 내에서 사용할 수 있는지에 따라 이 수는 <paramref name="buffer" />의 길이보다 작거나 같을 수 있습니다. 읽을 문자가 더 이상 없는 경우에 이 메서드를 호출하면 0이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.IOException">스트림에서 읽은 문자의 수는 <paramref name="buffer" />의 길이보다 큽니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>현재 텍스트 판독기에서 지정된 최대 문자 수를 비동기적으로 읽어 이 데이터를 지정된 위치에서 시작되는 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다. 지정한 문자 수를 버퍼로 읽어오기 전에 텍스트의 끝에 도달하면 현재 메서드가 반환됩니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 텍스트의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">텍스트 판독기가 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>현재의 스트림에서 메모리 블록으로 문자를 비동기적으로 읽어 들입니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 메모리 블록을 포함합니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 값 작업입니다. 형식 매개 변수의 값은 읽은 문자 수를 포함하거나, 스트림의 끝이나 더 이상 읽을 데이터가 없을 경우에는 0을 포함합니다. 데이터가 스트림 내에서 가용한지에 따라 이 수는 <paramref name="buffer" /> 길이보다 작거나 같을 수 있습니다.</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>현재 텍스트 판독기에서 지정된 최대 수의 문자를 읽어 이 데이터를 지정된 인덱스에서 시작되는 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" /> 및 (<paramref name="index" /> + <paramref name="count" /> -1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다.</param>
      <returns>읽은 문자 수입니다. 이 문자 수는 모든 입력 문자를 읽었는지 여부에 따라 <paramref name="count" />보다 작거나 같습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Span{System.Char})">
      <summary>현재의 스트림에서 문자를 읽고, 버퍼에 데이터를 씁니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 범위를 포함합니다.</param>
      <returns>읽은 문자 수입니다. 모든 입력 문자를 읽었는지에 따라 이 수는 <paramref name="buffer" /> 길이보다 작거나 같을 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>현재 텍스트 판독기에서 지정된 최대 문자 수를 비동기적으로 읽어 이 데이터를 지정된 위치에서 시작되는 버퍼에 씁니다.</summary>
      <param name="buffer">이 메서드는 지정된 문자 배열의 값이 <paramref name="index" />와 (<paramref name="index" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 문자로 교체된 상태로 반환됩니다.</param>
      <param name="index">쓰기를 시작할 <paramref name="buffer" />의 위치입니다.</param>
      <param name="count">읽을 최대 문자 수입니다. 지정한 문자 수를 버퍼로 읽어오기 전에 텍스트의 끝에 도달하면 현재 메서드가 반환됩니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 텍스트의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />의 합계가 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">텍스트 판독기가 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Memory{System.Char},System.Threading.CancellationToken)">
      <summary>현재의 스트림에서 비동기적으로 문자를 읽고, 버퍼에 데이터를 씁니다.</summary>
      <param name="buffer">이 메서드가 반환될 경우, 현재의 소스에서 읽은 문자로 대체된 문자의 지정된 메모리 블록을 포함합니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 값 작업입니다. 형식 매개 변수의 값은 버퍼에서 읽어 들인 총 문자 수를 포함합니다. 현재 사용할 수 있는 문자 수가 요청된 수보다 작을 경우 결과 값이 요청된 문자 수보다 작을 수 있으며, 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>텍스트 판독기에서 한 줄의 문자를 읽고 데이터를 문자열로 반환합니다.</summary>
      <returns>판독기의 다음 줄이거나 모든 문자를 읽은 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 반환된 문자열의 버퍼를 할당할 수 없습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">다음 줄의 문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>한 줄의 문자를 비동기적으로 읽고 데이터를 문자열로 반환합니다.</summary>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 텍스트 판독기의 다음 줄을 포함하거나 모든 문자가 읽혀진 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">다음 줄의 문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">텍스트 판독기가 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>현재 위치에서 텍스트 판독기 끝까지의 모든 문자를 읽어서 단일 문자열로 반환합니다.</summary>
      <returns>현재 위치에서 텍스트 판독기 끝까지의 모든 문자를 포함하는 문자열입니다.</returns>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 반환된 문자열의 버퍼를 할당할 수 없습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">다음 줄의 문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>현재 위치에서 텍스트 판독기 끝까지의 모든 문자를 비동기적으로 읽어서 하나의 문자열로 반환합니다.</summary>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 현재 위치에서 텍스트 판독기 끝까지의 문자로 이루어진 문자열을 포함합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">문자 수가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
      <exception cref="T:System.ObjectDisposedException">텍스트 판독기가 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">판독기가 현재 이전 읽기 작업에서 사용 중입니다.</exception>
    </member>
    <member name="M:System.IO.TextReader.Synchronized(System.IO.TextReader)">
      <summary>지정된 <see langword="TextReader" /> 주위에 스레드로부터 안전한 래퍼를 만듭니다.</summary>
      <param name="reader">동기화할 <see langword="TextReader" />입니다.</param>
      <returns>스레드로부터 안전한 <see cref="T:System.IO.TextReader" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>일련의 문자를 연속하여 쓸 수 있는 작성기를 나타냅니다. 이 클래스는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>
        <see cref="T:System.IO.TextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>지정된 서식 공급자를 사용하여 <see cref="T:System.IO.TextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="formatProvider">서식 지정을 제어하는 <see cref="T:System.IFormatProvider" /> 개체입니다.</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>현재 작성기를 닫고 그 작성기와 관련된 모든 시스템 리소스를 해제합니다.</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>이 <see langword="TextWriter" />에 사용한 줄 바꿈 문자를 저장합니다.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>해당 <see cref="T:System.IO.TextWriter" /> 개체에서 사용하는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.TextWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.TextWriter.DisposeAsync">
      <summary>
        <see cref="T:System.IO.TextWriter" /> 개체에서 사용하는 리소스를 동기식으로 모두 해제합니다.</summary>
      <returns>비동기 삭제 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>파생 클래스에서 재정의된 경우 출력을 쓰는 문자 인코딩을 반환합니다.</summary>
      <returns>출력을 쓰는 문자 인코딩입니다.</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>현재 작성기에 대한 모든 버퍼를 지우면 버퍼링된 모든 데이터를 내부 디바이스에 씁니다.</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>현재 작성기에 대한 모든 버퍼를 비동기적으로 지우면 버퍼링된 모든 데이터를 내부 디바이스에 씁니다.</summary>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>서식 지정을 제어하는 개체를 가져옵니다.</summary>
      <returns>특정 문화권에 대한 <see cref="T:System.IFormatProvider" /> 개체이거나, 다른 문화권을 지정하지 않은 경우 현재 문화권의 서식입니다.</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>현재 <see langword="TextWriter" />에서 사용한 줄 종결자 문자열을 가져오거나 설정합니다.</summary>
      <returns>현재 <see langword="TextWriter" />의 줄 종결자 문자열입니다.</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>쓸 수는 있지만 읽을 수는 없는 백업 저장소를 <see langword="TextWriter" />에 제공하지 않습니다.</summary>
    </member>
    <member name="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)">
      <summary>지정된 <see langword="TextWriter" /> 주위에 스레드로부터 안전한 래퍼를 만듭니다.</summary>
      <param name="writer">동기화할 <see langword="TextWriter" />입니다.</param>
      <returns>스레드로부터 안전한 래퍼입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>
        <see langword="Boolean" /> 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 <see langword="Boolean" /> 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>텍스트 스트림에 문자를 씁니다.</summary>
      <param name="value">텍스트 스트림에 쓸 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>텍스트 스트림에 문자 배열을 씁니다.</summary>
      <param name="buffer">텍스트 스트림에 쓸 문자 배열입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>텍스트 스트림에 문자의 하위 배열을 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">데이터 검색을 시작하는 버퍼의 문자 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>10진수 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 10진수 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>8바이트 부동 소수점 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 8바이트 부동 소수점 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>부호 있는 4바이트 정수의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 있는 4바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>부호 있는 8바이트 정수의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 있는 8바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>개체에 대해 <see langword="ToString" /> 메서드를 호출하여 해당 개체의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 개체입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})">
      <summary>텍스트 스트림에 문자 범위를 씁니다.</summary>
      <param name="buffer">쓸 문자 범위입니다.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>4바이트 부동 소수점 값의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 4바이트 부동 소수점 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>텍스트 스트림에 문자열을 씁니다.</summary>
      <param name="value">쓸 문자열입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
형식 항목의 인덱스가 0보다 작거나, 형식을 지정할 개체의 수보다 크거나 같은 경우입니다. 즉, 이 메서드 오버로드의 경우는 1입니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
형식 항목의 인덱스가 0보다 작거나, 형식을 지정할 개체의 수보다 크거나 같은 경우입니다. 즉, 이 메서드 오버로드의 경우는 2입니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
      <param name="arg2">서식을 지정하고 쓸 세 번째 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
형식 항목의 인덱스가 0보다 작거나, 형식을 지정할 개체의 수보다 크거나 같은 경우입니다. 즉, 이 메서드 오버로드의 경우는 3입니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object[])" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg">서식을 지정하고 쓸 개체를 0개 이상 포함하는 개체 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 또는 <paramref name="arg" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
형식 항목의 인덱스가 0보다 작거나 <paramref name="arg" /> 배열의 길이보다 크거나 같습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Text.StringBuilder)">
      <summary>텍스트 스트림에 문자열 작성기를 씁니다.</summary>
      <param name="value">텍스트 스트림에 문자열 작성기로 쓸 문자열입니다.</param>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>부호 없는 4바이트 정수의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 없는 4바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>부호 없는 8바이트 정수의 텍스트 표현을 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 없는 8바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>문자를 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="value">텍스트 스트림에 쓸 문자입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>문자 배열을 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">텍스트 스트림에 쓸 문자 배열입니다. <paramref name="buffer" />가 <see langword="null" />이면 아무 것도 쓰지 않습니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>문자의 하위 배열을 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">데이터 검색을 시작하는 버퍼의 문자 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" />와 <paramref name="count" />의 합이 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>문자 메모리 영역을 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">텍스트 스트림에 쓸 문자 메모리 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>문자열을 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="value">쓸 문자열입니다. <paramref name="value" />가 <see langword="null" />이면 텍스트 스트림에 아무 것도 쓰지 않습니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>텍스트 스트림에 문자열 작성기를 비동기식으로 씁니다.</summary>
      <param name="value">텍스트 스트림에 문자열 작성기로 쓸 문자열입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>줄 종결자를 텍스트 스트림에 씁니다.</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 <see langword="Boolean" /> 값의 텍스트 표현을 씁니다.</summary>
      <param name="value">쓸 <see langword="Boolean" /> 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 문자를 씁니다.</summary>
      <param name="value">텍스트 스트림에 쓸 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>문자의 배열과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="buffer">데이터를 읽을 문자 배열입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 문자의 하위 배열을 씁니다.</summary>
      <param name="buffer">데이터를 읽을 문자 배열입니다.</param>
      <param name="index">데이터 읽기를 시작하는 <paramref name="buffer" />의 문자 위치입니다.</param>
      <param name="count">쓸 최대 문자 수입니다.</param>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>10진수 값의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 10진수 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>8바이트 부동 소수점 값의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 8바이트 부동 소수점 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>부호 있는 4바이트 정수의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 있는 4바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>부호 있는 8바이트 정수의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 있는 8바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>개체에 대해 <see langword="ToString" /> 메서드를 호출하여 해당 개체의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 개체입니다. <paramref name="value" />가 <see langword="null" />이면 줄 종결자만 씁니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 문자 범위의 텍스트 표현을 씁니다.</summary>
      <param name="buffer">텍스트 스트림에 쓸 문자 범위 값입니다.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>4바이트 부동 소수점 값의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 4바이트 부동 소수점 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>문자열과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 문자열입니다. <paramref name="value" />가 <see langword="null" />이면 줄 종결자만 씁니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
형식 항목의 인덱스가 0보다 작거나, 형식을 지정할 개체의 수보다 크거나 같은 경우입니다. 즉, 이 메서드 오버로드의 경우는 1입니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> 메서드와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
서식 항목의 인덱스가 0보다 작거나, 형식을 지정할 개체의 수보다 크거나 같은 경우입니다. 즉, 이 메서드 오버로드의 경우는 2입니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" />와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg0">서식을 지정하고 쓸 첫 번째 개체입니다.</param>
      <param name="arg1">서식을 지정하고 쓸 두 번째 개체입니다.</param>
      <param name="arg2">서식을 지정하고 쓸 세 번째 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
형식 항목의 인덱스가 0보다 작거나, 형식을 지정할 개체의 수보다 크거나 같은 경우입니다. 즉, 이 메서드 오버로드의 경우는 3입니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>
        <see cref="M:System.String.Format(System.String,System.Object)" />와 동일한 의미 체계를 사용하여 서식이 지정된 문자열과 새 줄을 텍스트 스트림에 씁니다.</summary>
      <param name="format">복합 형식 문자열입니다.</param>
      <param name="arg">서식을 지정하고 쓸 개체를 0개 이상 포함하는 개체 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">문자열이나 개체가 <see langword="null" />로 전달되는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" />이 유효한 합성 서식 문자열이 아닙니다.
또는
형식 항목의 인덱스가 0보다 작거나 <paramref name="arg" /> 배열의 길이보다 크거나 같습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Text.StringBuilder)">
      <summary>문자열 빌더의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">텍스트 스트림에 문자열 작성기로 쓸 문자열입니다.</param>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>부호 없는 4바이트 정수의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 없는 4바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>부호 없는 8바이트 정수의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 씁니다.</summary>
      <param name="value">쓸 부호 없는 8바이트 정수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" />가 닫혔습니다.</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>줄 종결자를 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 비동기식으로 문자를 씁니다.</summary>
      <param name="value">텍스트 스트림에 쓸 문자입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>문자의 배열과 줄 종결자를 차례로 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">텍스트 스트림에 쓸 문자 배열입니다. 문자 배열이 <see langword="null" />이면 줄 종결자만 씁니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>문자의 하위 배열과 줄 종결자를 차례로 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="buffer">쓸 데이터가 있는 문자 배열입니다.</param>
      <param name="index">데이터 검색을 시작하는 버퍼의 문자 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" />와 <paramref name="count" />의 합이 버퍼 길이보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 음수입니다.</exception>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
      <summary>텍스트 스트림에 줄 종결자가 다음에 오도록 문자 메모리 범위의 텍스트 표현을 비동기식으로 씁니다.</summary>
      <param name="buffer">텍스트 스트림에 쓸 문자 메모리 영역입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>문자열과 줄 종결자를 차례로 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="value">쓸 문자열입니다. 값이 <see langword="null" />이면 줄 종결자만 씁니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">텍스트 작성기가 삭제됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 쓰기 작업에서 텍스트 작성기를 현재 사용하고 있습니다.</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Text.StringBuilder,System.Threading.CancellationToken)">
      <summary>문자열 빌더의 텍스트 표현과 줄 종결자를 차례로 텍스트 스트림에 비동기식으로 씁니다.</summary>
      <param name="value">텍스트 스트림에 문자열 작성기로 쓸 문자열입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>실행 파일에 대한 로더 최적화를 지정하도록 <see cref="T:System.LoaderOptimizationAttribute" /> 클래스에서 사용되는 열거형입니다.</summary>
    </member>
    <member name="F:System.LoaderOptimization.DisallowBindings">
      <summary>공용 언어 런타임에서 무시됩니다.</summary>
    </member>
    <member name="F:System.LoaderOptimization.DomainMask">
      <summary>사용하지 마십시오. 이 마스크는 도메인 관련 값을 선택하고 사용하지 않는 <see cref="F:System.LoaderOptimization.DisallowBindings" /> 플래그를 제외시킵니다.</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>애플리케이션에 동일한 코드를 사용하는 여러 도메인이 있고, 로더에서 애플리케이션 도메인 간에 최대 내부 리소스를 공유해야 함을 나타냅니다.</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>애플리케이션에서 여러 도메인에 고유한 코드를 호스트하며, 로더에서 전역 어셈블리 캐시에 추가된 전체적으로 사용 가능한(강력한 이름의) 어셈블리에 대해서만 애플리케이션 도메인 간에 리소스를 공유해야 함을 나타냅니다.</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>내부 리소스를 공유하기 위한 최적화가 지정되지 않았음을 나타냅니다. 기본 도메인 또는 호스팅 인터페이스에서 최적화를 지정한 경우 로더는 지정된 최적화 방식을 따르고, 그렇지 않으면 <see cref="F:System.LoaderOptimization.SingleDomain" />을 사용합니다.</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>애플리케이션에 단일 도메인이 있고, 로더에서 애플리케이션 도메인 간에 내부 리소스를 공유하지 않아야 함을 나타냅니다.</summary>
    </member>
    <member name="T:System.LoaderOptimizationAttribute">
      <summary>실행 가능한 애플리케이션의 Main 메서드에 대한 기본 로더 최적화 정책을 설정하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.Byte)">
      <summary>지정된 값을 사용하여 <see cref="T:System.LoaderOptimizationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.LoaderOptimization" /> 상수에 해당하는 값입니다.</param>
    </member>
    <member name="M:System.LoaderOptimizationAttribute.#ctor(System.LoaderOptimization)">
      <summary>지정된 값을 사용하여 <see cref="T:System.LoaderOptimizationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.LoaderOptimization" /> 상수입니다.</param>
    </member>
    <member name="P:System.LoaderOptimizationAttribute.Value">
      <summary>이 인스턴스에 대한 현재 <see cref="T:System.LoaderOptimization" /> 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.LoaderOptimization" /> 상수입니다.</returns>
    </member>
    <member name="T:System.Math">
      <summary>삼각, 로그 및 기타 일반 수학 함수에 대한 상수 및 정적 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 숫자의 절대값을 반환합니다.</summary>
      <param name="value">
        <see cref="F:System.Decimal.MinValue" />보다 크거나 같지만 <see cref="F:System.Decimal.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" /> 범위의 10진수 x입니다.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>배정밀도 부동 소수점 수의 절대 값을 반환합니다.</summary>
      <param name="value">
        <see cref="F:System.Double.MinValue" />보다 크거나 같지만 <see cref="F:System.Double.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤<see cref="F:System.Double.MaxValue" /> 범위의 배정밀도 부동 소수점 숫자 x입니다.</returns>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>16비트 부호 있는 정수의 절대 값을 반환합니다.</summary>
      <param name="value">
        <see cref="F:System.Int16.MinValue" />보다 크지만 <see cref="F:System.Int16.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤<see cref="F:System.Int16.MaxValue" /> 범위의 16비트 부호 있는 정수 x입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int16.MinValue" />와 같습니다.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>32비트 부호 있는 정수의 절대 값을 반환합니다.</summary>
      <param name="value">
        <see cref="F:System.Int32.MinValue" />보다 크지만 <see cref="F:System.Int32.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤<see cref="F:System.Int32.MaxValue" /> 범위의 32비트 부호 있는 정수 x입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int32.MinValue" />와 같습니다.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>64비트 부호 있는 정수의 절대 값을 반환합니다.</summary>
      <param name="value">
        <see cref="F:System.Int64.MinValue" />보다 크지만 <see cref="F:System.Int64.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤<see cref="F:System.Int64.MaxValue" /> 범위의 64비트 부호 있는 정수 x입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.Int64.MinValue" />와 같습니다.</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>8비트 부호 있는 정수의 절대 값을 반환합니다.</summary>
      <param name="value">
        <see cref="F:System.SByte.MinValue" />보다 크지만 <see cref="F:System.SByte.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤<see cref="F:System.SByte.MaxValue" /> 범위의 8비트 부호 있는 정수 x입니다.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />가 <see cref="F:System.SByte.MinValue" />와 같습니다.</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>단정밀도 부동 소수점 수의 절대 값을 반환합니다.</summary>
      <param name="value">
        <see cref="F:System.Single.MinValue" />보다 크거나 같지만 <see cref="F:System.Single.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤<see cref="F:System.Single.MaxValue" /> 범위의 단정밀도 부동 소수점 숫자 x입니다.</returns>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>코사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="d">코사인을 나타내는 숫자입니다. <paramref name="d" />는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</param>
      <returns>0 ≤θ≤π 범위의 각도 θ(라디안)입니다.
또는
<paramref name="d" /> &lt; -1이거나 <paramref name="d" /> &gt; 1이거나 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Acosh(System.Double)">
      <summary>쌍곡선 코사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="d">쌍곡선 코사인을 나타내는 숫자입니다. <paramref name="d" />는 1보다 크거나 같지만 <see cref="F:System.Double.PositiveInfinity" />보다 작거나 같아야 합니다.</param>
      <returns>0 ≤ θ ≤ ∞ 범위의 각도 θ(라디안)입니다.
또는
<paramref name="d" /> &lt; 1 또는 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="d">사인을 나타내는 숫자입니다. <paramref name="d" />는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</param>
      <returns>-π/2 ≤θ≤π/2 범위의 각도 θ(라디안)입니다.
또는
<paramref name="d" /> &lt; -1이거나 <paramref name="d" /> &gt; 1이거나 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Asinh(System.Double)">
      <summary>쌍곡선 사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="d">쌍곡선 사인을 나타내는 숫자입니다. <paramref name="d" />는 <see cref="F:System.Double.NegativeInfinity" />보다 크거나 같지만 <see cref="F:System.Double.PositiveInfinity" />보다 작거나 같아야 합니다.</param>
      <returns>-∞ &lt; θ ≤-1 또는 1 ≤ θ &lt; ∞ 범위의 각도 θ(라디안)입니다.
또는
<paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>탄젠트를 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="d">접선을 나타내는 숫자입니다.</param>
      <returns>-π/2 ≤θ≤π/2 범위의 각도 θ(라디안)입니다.
또는
<paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />이고, <paramref name="d" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 배정밀도로 반올림된 -π/2(-1.5707963267949)이고, <paramref name="d" />가 <see cref="F:System.Double.PositiveInfinity" />와 같으면 배정밀도로 반올림된 π/2(1.5707963267949)입니다.</returns>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>탄젠트를 적용했을 때 지정된 두 숫자의 몫이 나오는 각도를 반환합니다.</summary>
      <param name="y">점의 y 좌표입니다.</param>
      <param name="x">점의 x 좌표입니다.</param>
      <returns>-π≤θ≤π 범위의 각도 θ(라디안) 및 tan(θ) = <paramref name="y" /> / <paramref name="x" />입니다(여기서 <paramref name="x" />, <paramref name="y" />는 데카르트 평면 상의 지점임). 다음 사항이 적용됩니다.

(<paramref name="x" />, <paramref name="y" />)가 1사분면 안에 있으면 0 &lt; θ &lt; π/2입니다.

(<paramref name="x" />, <paramref name="y" />)가 2사분면 안에 있으면 π/2 &lt; θ≤π입니다.

(<paramref name="x" />, <paramref name="y" />)가 3사분면 안에 있으면 -π &lt; θ &lt; -π/2입니다.

(<paramref name="x" />, <paramref name="y" />)가 4사분면 안에 있으면 -π/2 &lt; θ &lt; 0입니다.


점이 사분면의 경계에 있는 경우 반환 값은 다음과 같습니다.

y가 0이고 x가 음수가 아니면 θ = 0입니다.

y가 0이고 x가 음수이면 θ = π입니다.

y가 양수이고 x가 0이면 θ = π/2입니다.

y가 음수이고 x가 0이면 θ = -π/2입니다.

y가 0이고 x가 0이면 θ = 0입니다.


<paramref name="x" /> 또는 <paramref name="y" />가 <see cref="F:System.Double.NaN" />이거나, <paramref name="x" /> 및 <paramref name="y" />가 <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NegativeInfinity" />이면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Atanh(System.Double)">
      <summary>쌍곡선 탄젠트를 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="d">쌍곡선 탄젠트를 나타내는 숫자입니다. <paramref name="d" />는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</param>
      <returns>-∞ &lt; θ &lt; -1 또는 1 &lt; θ &lt; ∞ 범위의 각도 θ(라디안)입니다.
또는
<paramref name="d" /> &lt; -1이거나 <paramref name="d" /> &gt; 1이거나 <paramref name="d" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.BigMul(System.Int32,System.Int32)">
      <summary>32비트 숫자 두 개를 곱합니다.</summary>
      <param name="a">곱할 첫 번째 숫자입니다.</param>
      <param name="b">곱할 두 번째 숫자입니다.</param>
      <returns>지정된 수의 제품을 포함하는 수입니다.</returns>
    </member>
    <member name="M:System.Math.BitDecrement(System.Double)">
      <summary>
        <paramref name="x" />보다 작은 값을 비교하여 다음으로 작은 값을 반환합니다.</summary>
      <param name="x">감소시킬 값입니다.</param>
      <returns>
        <paramref name="x" />보다 작은 값을 비교하여 다음으로 작은 값입니다.
또는
<paramref name="x" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 <see cref="F:System.Double.NegativeInfinity" />입니다.
또는
<paramref name="x" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.BitIncrement(System.Double)">
      <summary>
        <paramref name="x" />보다 큰 값을 비교하여 다음으로 큰 값을 반환합니다.</summary>
      <param name="x">증가시킬 값입니다.</param>
      <returns>
        <paramref name="x" />보다 큰 값을 비교하여 다음으로 큰 값입니다.
또는
<paramref name="x" />가 <see cref="F:System.Double.PositiveInfinity" />와 같으면 <see cref="F:System.Double.PositiveInfinity" />입니다.
또는
<paramref name="x" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Cbrt(System.Double)">
      <summary>지정된 숫자의 세제곱근을 반환합니다.</summary>
      <param name="d">세제곱근을 구할 숫자입니다.</param>
      <returns>
        <paramref name="d" />의 세제곱근입니다.
또는
<paramref name="x" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>지정된 10진수보다 크거나 같은 최소 정수 값을 반환합니다.</summary>
      <param name="d">10진수입니다.</param>
      <returns>
        <paramref name="d" />보다 크거나 같은 최소 정수 값입니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Decimal" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자보다 크거나 같은 최소 정수 값을 반환합니다.</summary>
      <param name="a">배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="a" />보다 크거나 같은 최소 정수 값입니다. <paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Double" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt;<paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Double,System.Double,System.Double)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.``
또는
<paramref name="value" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.Single,System.Single,System.Single)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.
또는
<paramref name="value" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)">
      <summary>
        <paramref name="min" /> 및 <paramref name="max" />의 포괄적인 범위에 고정되어 있는 <paramref name="value" />를 반환합니다.</summary>
      <param name="value">고정할 값입니다.</param>
      <param name="min">결과의 하한입니다.</param>
      <param name="max">결과의 상한입니다.</param>
      <returns>
        <paramref name="min" /> ≤ <paramref name="value" /> ≤ <paramref name="max" />이면 <paramref name="value" />입니다.
또는
<paramref name="value" /> &lt; <paramref name="min" />이면 <paramref name="min" />입니다.
또는
<paramref name="max" /> &lt; <paramref name="value" />이면 <paramref name="max" />입니다.</returns>
    </member>
    <member name="M:System.Math.CopySign(System.Double,System.Double)">
      <summary>
        <paramref name="x" />의 크기 및 <paramref name="y" />의 부호 값을 반환합니다.</summary>
      <param name="x">결과에 크기에 사용되는 숫자입니다.</param>
      <param name="y">결과에 크기에 사용된 기호가 있는 숫자입니다.</param>
      <returns>
        <paramref name="x" />의 크기 및 <paramref name="y" />의 부호 값입니다.</returns>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>지정된 각도의 코사인을 반환합니다.</summary>
      <param name="d">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="d" />의 코사인입니다. <paramref name="d" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>지정된 각도의 하이퍼볼릭 코사인을 반환합니다.</summary>
      <param name="value">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="value" />의 쌍곡선 코사인입니다. <paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 <see cref="F:System.Double.PositiveInfinity" />가 반환됩니다. <paramref name="value" />가 <see cref="F:System.Double.NaN" />과 같으면 <see cref="F:System.Double.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)">
      <summary>부호 있는 두 32비트 정수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</summary>
      <param name="a">피제수입니다.</param>
      <param name="b">제수입니다.</param>
      <param name="result">나머지입니다.</param>
      <returns>지정된 수의 몫입니다.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" />가 0입니다.</exception>
    </member>
    <member name="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)">
      <summary>부호 있는 두 64비트 정수의 몫을 계산하고 나머지를 출력 매개 변수로 반환합니다.</summary>
      <param name="a">피제수입니다.</param>
      <param name="b">제수입니다.</param>
      <param name="result">나머지입니다.</param>
      <returns>지정된 수의 몫입니다.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="b" />가 0입니다.</exception>
    </member>
    <member name="F:System.Math.E">
      <summary>상수, <see langword="e" />로 지정된 자연 로그의 밑을 나타냅니다.</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>
        <see langword="e" />를 지정된 수만큼 거듭제곱하여 반환합니다.</summary>
      <param name="d">거듭제곱을 지정하는 숫자입니다.</param>
      <returns>
        <see langword="e" />의 <paramref name="d" />승입니다. <paramref name="d" />가 <see cref="F:System.Double.NaN" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다. <paramref name="d" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 0이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>지정된 10진수보다 작거나 같은 최대 정수 값을 반환합니다.</summary>
      <param name="d">10진수입니다.</param>
      <returns>
        <paramref name="d" />보다 작거나 같은 최대 정수 값입니다.  메서드는 형식 <see cref="T:System.Decimal" />의 정수 값을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>지정된 배정밀도 부동 소수점 숫자보다 작거나 같은 최대 정수 값을 반환합니다.</summary>
      <param name="d">배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="d" />보다 작거나 같은 최대 정수 값입니다. <paramref name="d" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.FusedMultiplyAdd(System.Double,System.Double,System.Double)">
      <summary>하나의 삼항 연산으로 반올림한 (x * y) + z를 반환합니다.</summary>
      <param name="x">
        <paramref name="y" />와 곱합 숫자입니다.</param>
      <param name="y">
        <paramref name="x" />와 곱합 숫자입니다.</param>
      <param name="z">
        <paramref name="x" />의 결과에 추가할 숫자와 <paramref name="y" />를 곱합니다.</param>
      <returns>하나의 삼항 연산으로 반올림한 (x * y) + z.</returns>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>지정된 수를 지정된 다른 수로 나눈 나머지를 반환합니다.</summary>
      <param name="x">피제수입니다.</param>
      <param name="y">제수입니다.</param>
      <returns>
        <paramref name="x" /> - (<paramref name="y" /> Q)와 같은 숫자입니다. 여기서 Q는 가장 가까운 정수로 반올림된 <paramref name="x" /> / <paramref name="y" />의 몫입니다. <paramref name="x" /> / <paramref name="y" />가 두 수의 중간이면, 짝수가 반환됩니다.
<paramref name="x" /> - (<paramref name="y" /> Q)가 0인 경우 <paramref name="x" />가 양수이면 값 +0이, <paramref name="x" />가 음수이면 값 -0이 반환됩니다.
<paramref name="y" /> = 0인 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.ILogB(System.Double)">
      <summary>지정된 숫자의 기본 2 정수 로그를 반환합니다.</summary>
      <param name="x">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="x" /> 매개 변수 
  반환 값 
  기본값 
  <paramref name="x" />의 기본 2 정수 로그, 즉 (int)log2(<paramref name="x" />)입니다.  
  
  0 
 <see cref="F:System.Int32.MinValue" /><see cref="F:System.Double.NaN" />이나 <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NegativeInfinity" />와 같습니다.<see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>지정된 숫자의 자연(밑 <see langword="e" />) 로그를 반환합니다.</summary>
      <param name="d">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="d" /> 매개 변수 
  반환 값 
  양수 
  <paramref name="d" />의 자연 로그인 ln <paramref name="d" /> 또는 log e <paramref name="d" /> 0 
 <see cref="F:System.Double.NegativeInfinity" /> 음수 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />과 같습니다.<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" />과 같습니다.<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>지정된 밑을 사용하여 지정된 숫자의 로그를 반환합니다.</summary>
      <param name="a">로그가 있는 숫자입니다.</param>
      <param name="newBase">로그의 밑입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다. +Infinity는 <see cref="F:System.Double.PositiveInfinity" />, -Infinity는 <see cref="F:System.Double.NegativeInfinity" />,NaN은 <see cref="F:System.Double.NaN" />을 의미합니다.
 <paramref name="a" /><paramref name="newBase" /> 반환 값 
 <paramref name="a" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) -또는-(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="a" />&lt; 0 
  (모든 값) 
  NaN 
  (모든 값) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="a" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="a" /> = NaN 
  (모든 값) 
  NaN 
  (모든 값) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (모든 값) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="a" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="a" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="a" /> =  +무한대 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="a" /> =  +무한대 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="a" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>밑을 10으로 사용하여 지정된 숫자의 로그를 반환합니다.</summary>
      <param name="d">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="d" /> 매개 변수 
  반환 값 
  양수 
  밑이 10인 <paramref name="d" />의 로그인 log 10<paramref name="d" />입니다.  
  
  0 
 <see cref="F:System.Double.NegativeInfinity" /> 음수 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />과 같습니다.<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" />과 같습니다.<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Log2(System.Double)">
      <summary>밑을 2로 사용하여 지정된 숫자의 로그를 반환합니다.</summary>
      <param name="x">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="x" /> 매개 변수 
  반환 값 
  양수 
  밑이 2인 <paramref name="x" />의 로그인 log 2<paramref name="x" />입니다.  
  
  0 
 <see cref="F:System.Double.NegativeInfinity" /> 음수 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />과 같습니다.<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" />과 같습니다.<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>두 개의 8비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 8비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 8비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>두 개의 10진수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 10진수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 10진수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>두 개의 배정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다. <paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>두 개의 16비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 16비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 16비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>두 개의 32비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 32비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 32비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>두 개의 64비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 64비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 64비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>두 개의 8비트 부호 있는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 8비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 8비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>두 개의 단정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다. <paramref name="val1" />이나 <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>두 개의 16비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 16비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 16비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>두 개의 32비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 32비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 32비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>두 개의 64비트 부호 없는 정수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 64비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 64비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 중 더 큰 매개 변수입니다.</returns>
    </member>
    <member name="M:System.Math.MaxMagnitude(System.Double,System.Double)">
      <summary>두 개의 배정밀도 부동 소수점 수 중 더 큰 크기를 반환합니다.</summary>
      <param name="x">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="y">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>매개 변수 <paramref name="x" /> 또는 <paramref name="y" /> 중 더 큰 크기입니다. <paramref name="x" />이나 <paramref name="y" /> 또는 <paramref name="x" />과 <paramref name="y" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>두 개의 8비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 8비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 8비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>두 개의 10진수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 10진수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 10진수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>두 개의 배정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다. <paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>두 개의 16비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 16비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 16비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>두 개의 32비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 32비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 32비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>두 개의 64비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 64비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 64비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>두 개의 8비트 부호 있는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 8비트 부호 있는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 8비트 부호 있는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>두 개의 단정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다. <paramref name="val1" />, <paramref name="val2" /> 또는 <paramref name="val1" />과 <paramref name="val2" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>두 개의 16비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 16비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 16비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>두 개의 32비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 32비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 32비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>두 개의 64비트 부호 없는 정수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="val1">비교할 두 개의 64비트 부호 없는 정수 중 첫 번째 숫자입니다.</param>
      <param name="val2">비교할 두 개의 64비트 부호 없는 정수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="val1" /> 또는 <paramref name="val2" /> 매개 변수 중에서 더 작은 수입니다.</returns>
    </member>
    <member name="M:System.Math.MinMagnitude(System.Double,System.Double)">
      <summary>두 개의 배정밀도 부동 소수점 수 중 더 작은 크기를 반환합니다.</summary>
      <param name="x">비교할 두 개의 배정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="y">비교할 두 개의 배정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>매개 변수 <paramref name="x" /> 또는 <paramref name="y" /> 중 더 작은 크기입니다. <paramref name="x" />이나 <paramref name="y" /> 또는 <paramref name="x" />과 <paramref name="y" />가 모두 <see cref="F:System.Double.NaN" />과 같은 경우 <see cref="F:System.Double.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="F:System.Math.PI">
      <summary>상수(π)로 지정된 원주율을 나타냅니다.</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>지정된 숫자의 지정된 거듭제곱을 반환합니다.</summary>
      <param name="x">거듭제곱할 배정밀도 부동 소수점 숫자입니다.</param>
      <param name="y">거듭제곱을 지정하는 배정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="x" />의 <paramref name="y" />승입니다.</returns>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>10진수 값을 가장 가까운 정수로 반올림하고 중간점 값을 가장 가까운 짝수로 반올림합니다.</summary>
      <param name="d">반올림할 10진수입니다.</param>
      <returns>
        <paramref name="d" /> 매개 변수에 가장 가까운 정수입니다. <paramref name="d" />의 소수 부분이 하나는 짝수이고 다른 하나는 홀수인 두 정수의 중간인 경우에는 짝수가 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Decimal" />을 반환합니다.</returns>
      <exception cref="T:System.OverflowException">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>소수 자릿수가 지정된 수의 10진수 값을 반올림하고 중간점 값을 가장 가까운 짝수로 반올림합니다.</summary>
      <param name="d">반올림할 10진수입니다.</param>
      <param name="decimals">반환 값의 소수 자릿수입니다.</param>
      <returns>
        <paramref name="d" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="decimals" />에 가장 가까운 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" />가 0보다 작거나 28보다 큽니다.</exception>
      <exception cref="T:System.OverflowException">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>소수 자릿수가 지정된 수의 10진수 값을 반올림하고 지정된 반올림 규칙을 사용합니다.</summary>
      <param name="d">반올림할 10진수입니다.</param>
      <param name="decimals">반환 값의 소수 자릿수입니다.</param>
      <param name="mode">서로 다른 두 숫자 중간에 있는 <paramref name="d" />의 반올림 방법에 대한 사양입니다.</param>
      <returns>
        <paramref name="d" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="decimals" />에 가장 가까운 수입니다. <paramref name="d" />의 소수 자릿수가 <paramref name="decimals" />보다 작은 경우, <paramref name="d" />가 변경되지 않은 상태로 반환됩니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" />가 0보다 작거나 28보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />는 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>10진수 값을 가장 가까운 정수로 반올림하고 중간점 값에 대한 지정된 반올림 규칙을 사용합니다.</summary>
      <param name="d">반올림할 10진수입니다.</param>
      <param name="mode">서로 다른 두 숫자 중간에 있는 <paramref name="d" />의 반올림 방법에 대한 사양입니다.</param>
      <returns>
        <paramref name="d" />에 가장 가까운 정수입니다. <paramref name="d" />가 두 숫자의 중간이고, 이 숫자 중 하나는 짝수이고 다른 하나는 홀수이면, <paramref name="mode" />에 의해 두 숫자 중 하나가 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Decimal" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />는 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">결과가 <see cref="T:System.Decimal" /> 범위를 벗어나는 경우</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>배정밀도 부동 소수점 값을 가장 가까운 정수 값으로 반올림하고 중간점 값을 가장 가까운 짝수로 반올림합니다.</summary>
      <param name="a">반올림할 배정밀도 부동 소수점 수입니다.</param>
      <returns>
        <paramref name="a" />에 가장 가까운 정수입니다. <paramref name="a" />의 소수 부분이 하나는 짝수이고 다른 하나는 홀수인 두 정수의 중간인 경우에는 짝수가 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Double" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>지정된 수의 소수 자릿수를 배정밀도 부동 소수점 값으로 반올림하고 중간점 값을 가장 가까운 짝수로 반올림합니다.</summary>
      <param name="value">반올림할 배정밀도 부동 소수점 수입니다.</param>
      <param name="digits">반환 값의 소수 자릿수입니다.</param>
      <returns>
        <paramref name="value" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="digits" />에 가장 가까운 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" />가 0보다 작거나 15보다 큽니다.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>지정된 수의 소수 자릿수를 배정밀도 부동 소수점 값으로 반올림하고 중간점 값에 대한 지정된 반올림 규칙을 사용합니다.</summary>
      <param name="value">반올림할 배정밀도 부동 소수점 수입니다.</param>
      <param name="digits">반환 값의 소수 자릿수입니다.</param>
      <param name="mode">서로 다른 두 숫자 중간에 있는 <paramref name="value" />의 반올림 방법에 대한 사양입니다.</param>
      <returns>
        <paramref name="digits" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="value" />에 가장 가까운 수입니다. <paramref name="value" />의 소수 자릿수가 <paramref name="digits" />보다 작은 경우, <paramref name="value" />가 변경되지 않은 상태로 반환됩니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" />가 0보다 작거나 15보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />는 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>가장 가까운 정수로 배정밀도 부동 소수점 값을 반올림하고 중간점 값에 대한 지정된 반올림 규칙을 사용합니다.</summary>
      <param name="value">반올림할 배정밀도 부동 소수점 수입니다.</param>
      <param name="mode">서로 다른 두 숫자 중간에 있는 <paramref name="value" />의 반올림 방법에 대한 사양입니다.</param>
      <returns>
        <paramref name="value" />에 가장 가까운 정수입니다. <paramref name="value" />가 두 정수의 중간이고, 이 숫자 중 하나는 짝수이고 다른 하나는 홀수이면, <paramref name="mode" />에 의해 두 숫자 중 하나가 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Double" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />는 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.Math.ScaleB(System.Double,System.Int32)">
      <summary>효율적으로 계산된 x * 2^n을 반환합니다.</summary>
      <param name="x">기본 값을 지정하는 단정밀도 부동 소수점 숫자입니다.</param>
      <param name="n">전력을 지정하는 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>효율적으로 계산된 x * 2^n입니다.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>10진수의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="value">부호 있는 10진수입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="value" />가 0보다 작은 경우  
  
  0 
 <paramref name="value" />가 0과 같습니다.  
  
  1 
 <paramref name="value" />가 0보다 큽니다.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>배정밀도 부동 소수점 수의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="value">부호 있는 숫자입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="value" />가 0보다 작은 경우  
  
  0 
 <paramref name="value" />가 0과 같습니다.  
  
  1 
 <paramref name="value" />가 0보다 큽니다.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" />가 <see cref="F:System.Double.NaN" />와 같은 경우</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>16비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="value">부호 있는 숫자입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="value" />가 0보다 작은 경우  
  
  0 
 <paramref name="value" />가 0과 같습니다.  
  
  1 
 <paramref name="value" />가 0보다 큽니다.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>32비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="value">부호 있는 숫자입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="value" />가 0보다 작은 경우  
  
  0 
 <paramref name="value" />가 0과 같습니다.  
  
  1 
 <paramref name="value" />가 0보다 큽니다.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>64비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="value">부호 있는 숫자입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="value" />가 0보다 작은 경우  
  
  0 
 <paramref name="value" />가 0과 같습니다.  
  
  1 
 <paramref name="value" />가 0보다 큽니다.</returns>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>8비트 부호 있는 정수의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="value">부호 있는 숫자입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="value" />가 0보다 작은 경우  
  
  0 
 <paramref name="value" />가 0과 같습니다.  
  
  1 
 <paramref name="value" />가 0보다 큽니다.</returns>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>단정밀도 부동 소수점 숫자의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="value">부호 있는 숫자입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="value" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="value" />가 0보다 작은 경우  
  
  0 
 <paramref name="value" />가 0과 같습니다.  
  
  1 
 <paramref name="value" />가 0보다 큽니다.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" />가 <see cref="F:System.Single.NaN" />와 같은 경우</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>지정된 각도의 사인을 반환합니다.</summary>
      <param name="a">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="a" />의 사인입니다. <paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>지정된 각도의 하이퍼볼릭 사인을 반환합니다.</summary>
      <param name="value">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="value" />의 쌍곡선 사인입니다. <paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> 또는 <see cref="F:System.Double.NaN" />과 같으면 이 메서드는 <see cref="T:System.Double" />와 같은 <paramref name="value" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>지정된 숫자의 제곱근을 반환합니다.</summary>
      <param name="d">제곱근을 구할 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="d" /> 매개 변수 
  반환 값 
  0 또는 양수 
  <paramref name="d" />의 양의 제곱근  
  
  음수 
 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />과 같음<see cref="F:System.Double.NaN" /><see cref="F:System.Double.PositiveInfinity" />과 같음<see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>지정된 각도의 탄젠트를 반환합니다.</summary>
      <param name="a">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="a" />의 접선입니다. <paramref name="a" />가 <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> 또는 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>지정된 각도의 하이퍼볼릭 탄젠트를 반환합니다.</summary>
      <param name="value">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="value" />의 쌍곡선 접선입니다. <paramref name="value" />가 <see cref="F:System.Double.NegativeInfinity" />와 같으면 이 메서드는 -1을 반환하고 값이 <see cref="F:System.Double.PositiveInfinity" />와 같으면 이 메서드는 1을 반환합니다. <paramref name="value" />가 <see cref="F:System.Double.NaN" />과 같으면 이 메서드는 <see cref="F:System.Double.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>지정된 10진수에서 정수 부분을 계산합니다.</summary>
      <param name="d">잘라낼 숫자입니다.</param>
      <returns>
        <paramref name="d" />의 정수 부분으로, 소수 자릿수를 삭제한 후 남은 숫자입니다.</returns>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>지정한 배정밀도 부동 소수점 숫자의 정수 부분을 계산합니다.</summary>
      <param name="d">잘라낼 숫자입니다.</param>
      <returns>
        <paramref name="d" />의 정수 부분으로, 소수 자릿수를 삭제한 후 남은 숫자 또는 다음 테이블에 나열된 값 중 하나입니다.
<paramref name="d" /> 반환 값 
<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.MathF">
      <summary>삼각, 로그 및 기타 일반 수학 함수에 대한 상수 및 정적 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.MathF.Abs(System.Single)">
      <summary>단정밀도 부동 소수점 수의 절대 값을 반환합니다.</summary>
      <param name="x">
        <see cref="F:System.Single.MinValue" />보다 크거나 같지만 <see cref="F:System.Single.MaxValue" />보다 작거나 같은 숫자입니다.</param>
      <returns>0 ≤ x ≤ <see cref="F:System.Single.MaxValue" /> 범위의 단정밀도 부동 소수점 숫자 x입니다.</returns>
    </member>
    <member name="M:System.MathF.Acos(System.Single)">
      <summary>코사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="x">코사인을 나타내는 숫자입니다. <paramref name="x" />는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</param>
      <returns>0 ≤ θ ≤ π 범위의 각도 θ(라디안)입니다.
또는
<paramref name="x" /> &lt; -1이거나 <paramref name="x" /> &gt; 1이거나 <paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.Acosh(System.Single)">
      <summary>쌍곡선 코사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="x">쌍곡선 코사인을 나타내는 숫자입니다. <paramref name="x" />는 1보다 크거나 같지만 <see cref="F:System.Single.PositiveInfinity" />보다 작거나 같아야 합니다.</param>
      <returns>0 ≤ θ ≤ ∞ 범위의 각도 θ(라디안)입니다.
또는
<paramref name="x" /> &lt; 1 또는 <paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.Asin(System.Single)">
      <summary>사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="x">사인을 나타내는 숫자입니다. <paramref name="x" />는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</param>
      <returns>-π/2 ≤ θ ≤ π/2 범위의 각도 θ(라디안)입니다.
또는
<paramref name="x" /> &lt; -1이거나 <paramref name="x" /> &gt; 1이거나 <paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.Asinh(System.Single)">
      <summary>쌍곡선 사인을 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="x">쌍곡선 사인을 나타내는 숫자입니다. <paramref name="x" />는 <see cref="F:System.Single.NegativeInfinity" />보다 크거나 같지만 <see cref="F:System.Single.PositiveInfinity" />보다 작거나 같아야 합니다.</param>
      <returns>-∞ &lt; θ ≤ -1 또는 1 ≤ θ &lt; ∞ 범위의 각도 θ(라디안)입니다.
또는
<paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.Atan(System.Single)">
      <summary>탄젠트를 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="x">접선을 나타내는 숫자입니다.</param>
      <returns>-π/2 ≤ θ ≤ π/2 범위의 각도 θ(라디안)입니다.
또는
<paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />이고, <paramref name="x" />가 <see cref="F:System.Single.NegativeInfinity" />와 같으면 배정밀도로 반올림된 -π/2(-1.5707963267949)이고, <paramref name="x" />가 <see cref="F:System.Single.PositiveInfinity" />와 같으면 배정밀도로 반올림된 π/2(1.5707963267949)입니다.</returns>
    </member>
    <member name="M:System.MathF.Atan2(System.Single,System.Single)">
      <summary>탄젠트를 적용했을 때 지정된 두 숫자의 몫이 나오는 각도를 반환합니다.</summary>
      <param name="y">점의 y 좌표입니다.</param>
      <param name="x">점의 x 좌표입니다.</param>
      <returns>-π ≤θ ≤π 범위의 각도 θ(라디안) 및 tan(θ) = <paramref name="y" /> / <paramref name="x" />입니다(여기서 <paramref name="x" />, <paramref name="y" />는 데카르트 평면 상의 지점임). 다음 사항이 적용됩니다.

(<paramref name="x" />, <paramref name="y" />)가 1사분면 안에 있으면 0 &lt; θ &lt; π/2입니다.

(<paramref name="x" />, <paramref name="y" />)가 2사분면 안에 있으면 π/2 &lt; θ ≤ π입니다.

(<paramref name="x" />, <paramref name="y" />)가 3사분면 안에 있으면 -π &lt; θ &lt; -π/2입니다.

(<paramref name="x" />, <paramref name="y" />)가 4사분면 안에 있으면 -π/2 &lt; θ &lt; 0입니다.


점이 사분면의 경계에 있는 경우 반환 값은 다음과 같습니다.

y가 0이고 x가 음수가 아니면 θ = 0입니다.

y가 0이고 x가 음수이면 θ = π입니다.

y가 양수이고 x가 0이면 θ = π/2입니다.

y가 음수이고 x가 0이면 θ = -π/2입니다.

y가 0이고 x가 0이면 θ = 0입니다.


<paramref name="x" /> 또는 <paramref name="y" />가 <see cref="F:System.Single.NaN" />이거나, <paramref name="x" /> 및 <paramref name="y" />가 <see cref="F:System.Single.PositiveInfinity" /> 또는 <see cref="F:System.Single.NegativeInfinity" />이면 이 메서드는 <see cref="F:System.Single.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.Atanh(System.Single)">
      <summary>쌍곡선 탄젠트를 적용했을 때 지정된 숫자가 나오는 각도를 반환합니다.</summary>
      <param name="x">쌍곡선 탄젠트를 나타내는 숫자입니다. <paramref name="x" />는 -1보다 크거나 같지만 1보다 작거나 같아야 합니다.</param>
      <returns>-∞ &lt; θ &lt;-1 또는 1 &lt; θ &lt; ∞ 범위의 각도 θ(라디안)입니다.
또는
<paramref name="x" /> &lt; -1이거나 <paramref name="x" /> &gt; 1이거나 <paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.BitDecrement(System.Single)">
      <summary>
        <paramref name="x" />보다 작은 값을 비교하여 다음으로 작은 값을 반환합니다.</summary>
      <param name="x">감소시킬 값입니다.</param>
      <returns>
        <paramref name="x" />보다 작은 값을 비교하여 다음으로 작은 값입니다.
또는
<paramref name="x" />가 <see cref="F:System.Single.NegativeInfinity" />와 같으면 <see cref="F:System.Single.NegativeInfinity" />입니다.
또는
<paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.BitIncrement(System.Single)">
      <summary>
        <paramref name="x" />보다 큰 값 다음으로 큰 값을 반환합니다.</summary>
      <param name="x">증가시킬 값입니다.</param>
      <returns>
        <paramref name="x" />보다 큰 값 다음으로 큰 값입니다.
또는
<paramref name="x" />가 <see cref="F:System.Single.PositiveInfinity" />와 같으면 <see cref="F:System.Single.PositiveInfinity" />입니다.
또는
<paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.Cbrt(System.Single)">
      <summary>지정된 숫자의 세제곱근을 반환합니다.</summary>
      <param name="x">세제곱근을 구할 숫자입니다.</param>
      <returns>
        <paramref name="x" />의 세제곱근입니다.
또는
<paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />입니다.</returns>
    </member>
    <member name="M:System.MathF.Ceiling(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자보다 크거나 같은 최소 정수 값을 반환합니다.</summary>
      <param name="x">단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="x" />보다 크거나 같은 최소 정수 값입니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> 또는 <see cref="F:System.Single.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Single" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.CopySign(System.Single,System.Single)">
      <summary>
        <paramref name="x" />의 크기 및 <paramref name="y" />의 부호 값을 반환합니다.</summary>
      <param name="x">결과에 크기에 사용되는 숫자입니다.</param>
      <param name="y">결과에 크기에 사용된 기호가 있는 숫자입니다.</param>
      <returns>
        <paramref name="x" />의 크기 및 <paramref name="y" />의 부호 값입니다.</returns>
    </member>
    <member name="M:System.MathF.Cos(System.Single)">
      <summary>지정된 각도의 코사인을 반환합니다.</summary>
      <param name="x">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="x" />의 코사인입니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> 또는 <see cref="F:System.Single.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Single.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.Cosh(System.Single)">
      <summary>지정된 각도의 하이퍼볼릭 코사인을 반환합니다.</summary>
      <param name="x">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="x" />의 쌍곡선 코사인입니다. <paramref name="x" />가 <see cref="F:System.Single.NegativeInfinity" /> 또는 <see cref="F:System.Single.PositiveInfinity" />와 같으면 <see cref="F:System.Single.PositiveInfinity" />가 반환됩니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="F:System.MathF.E">
      <summary>상수, <see langword="e" />로 지정된 자연 로그의 밑을 나타냅니다.</summary>
    </member>
    <member name="M:System.MathF.Exp(System.Single)">
      <summary>
        <see langword="e" />를 지정된 수만큼 거듭제곱하여 반환합니다.</summary>
      <param name="x">거듭제곱을 지정하는 숫자입니다.</param>
      <returns>
        <see langword="e" />의 <paramref name="x" />승입니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" /> 또는 <see cref="F:System.Single.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다. <paramref name="x" />가 <see cref="F:System.Single.NegativeInfinity" />와 같으면 0이 반환됩니다.</returns>
    </member>
    <member name="M:System.MathF.Floor(System.Single)">
      <summary>지정된 단정밀도 부동 소수점 숫자보다 작거나 같은 최대 정수 값을 반환합니다.</summary>
      <param name="x">단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="x" />보다 작거나 같은 최대 정수 값입니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> 또는 <see cref="F:System.Single.PositiveInfinity" />와 같으면, 해당 값이 반환됩니다.</returns>
    </member>
    <member name="M:System.MathF.FusedMultiplyAdd(System.Single,System.Single,System.Single)">
      <summary>하나의 삼항 연산으로 반올림한 (x * y) + z를 반환합니다.</summary>
      <param name="x">
        <paramref name="y" />와 곱합 숫자입니다.</param>
      <param name="y">
        <paramref name="x" />와 곱합 숫자입니다.</param>
      <param name="z">
        <paramref name="x" />의 결과에 추가할 숫자와 <paramref name="y" />를 곱합니다.</param>
      <returns>하나의 삼항 연산으로 반올림한 (x * y) + z.</returns>
    </member>
    <member name="M:System.MathF.IEEERemainder(System.Single,System.Single)">
      <summary>지정된 수를 지정된 다른 수로 나눈 나머지를 반환합니다.</summary>
      <param name="x">피제수입니다.</param>
      <param name="y">제수입니다.</param>
      <returns>
        <paramref name="x" /> - (<paramref name="y" /> Q)와 같은 숫자입니다. 여기서 Q는 가장 가까운 정수로 반올림된 <paramref name="x" /> / <paramref name="y" />의 몫입니다. <paramref name="x" /> / <paramref name="y" />가 두 수의 중간이면, 짝수가 반환됩니다.
<paramref name="x" /> - (<paramref name="y" /> Q)가 0인 경우 <paramref name="x" />가 양수이면 값 +0이, <paramref name="x" />가 음수이면 값 -0이 반환됩니다.
<paramref name="y" /> = 0인 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.MathF.ILogB(System.Single)">
      <summary>지정된 숫자의 기본 2 정수 로그를 반환합니다.</summary>
      <param name="x">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="x" /> 매개 변수 
  반환 값 
  기본값 
  <paramref name="x" />의 기본 2 정수 로그, 즉 (int)log2(<paramref name="x" />)입니다.  
  
  0 
 <see cref="F:System.Int32.MinValue" /><see cref="F:System.Single.NaN" />이나 <see cref="F:System.Single.PositiveInfinity" /> 또는 <see cref="F:System.Single.NegativeInfinity" />와 같습니다.<see cref="F:System.Int32.MaxValue" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single)">
      <summary>지정된 숫자의 자연(밑 <see langword="e" />) 로그를 반환합니다.</summary>
      <param name="x">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="x" /> 매개 변수 
  반환 값 
  양수 
  <paramref name="x" />의 자연 로그인 ln <paramref name="x" /> 또는 log e <paramref name="x" /> 0 
 <see cref="F:System.Single.NegativeInfinity" /> 음수 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" />과 같습니다.<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" />과 같습니다.<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log(System.Single,System.Single)">
      <summary>지정된 밑을 사용하여 지정된 숫자의 로그를 반환합니다.</summary>
      <param name="x">로그가 있는 숫자입니다.</param>
      <param name="y">밑입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다. +Infinity는 <see cref="F:System.Single.PositiveInfinity" />, -Infinity는 <see cref="F:System.Single.NegativeInfinity" />,NaN은 <see cref="F:System.Single.NaN" />을 의미합니다.
 <paramref name="x" /><paramref name="newBase" /> 반환 값 
 <paramref name="x" />&gt; 0 
  (0 &lt;<paramref name="newBase" />&lt; 1) -또는-(<paramref name="newBase" />&gt; 1) 
  lognewBase(a) 
 <paramref name="x" />&lt; 0 
  (모든 값) 
  NaN 
  (모든 값) 
 <paramref name="newBase" />&lt; 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = 0 
  NaN 
 <paramref name="x" /> != 1 
 <paramref name="newBase" /> = +Infinity 
  NaN 
 <paramref name="x" /> = NaN 
  (모든 값) 
  NaN 
  (모든 값) 
 <paramref name="newBase" /> = NaN 
  NaN 
  (모든 값) 
 <paramref name="newBase" /> = 1 
  NaN 
 <paramref name="x" /> = 0 
  0 &lt;<paramref name="newBase" />&lt; 1 
  +Infinity 
 <paramref name="x" /> = 0 
 <paramref name="newBase" />&gt; 1 
  -Infinity 
 <paramref name="x" /> =  +무한대 
  0 &lt;<paramref name="newBase" />&lt; 1 
  -Infinity 
 <paramref name="x" /> =  +무한대 
 <paramref name="newBase" />&gt; 1 
  +Infinity 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = 0 
  0 
 <paramref name="x" /> = 1 
 <paramref name="newBase" /> = +Infinity 
  0</returns>
    </member>
    <member name="M:System.MathF.Log10(System.Single)">
      <summary>밑을 10으로 사용하여 지정된 숫자의 로그를 반환합니다.</summary>
      <param name="x">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="x" /> 매개 변수 
  반환 값 
  양수 
  밑이 10인 <paramref name="x" />의 로그인 log 10<paramref name="x" />입니다.  
  
  0 
 <see cref="F:System.Single.NegativeInfinity" /> 음수 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" />과 같습니다.<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" />과 같습니다.<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Log2(System.Single)">
      <summary>밑을 2로 사용하여 지정된 숫자의 로그를 반환합니다.</summary>
      <param name="x">로그가 있는 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="x" /> 매개 변수 
  반환 값 
  양수 
  밑이 2인 <paramref name="x" />의 로그인 log 2<paramref name="x" />입니다.  
  
  0 
 <see cref="F:System.Single.NegativeInfinity" /> 음수 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" />과 같습니다.<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" />과 같습니다.<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Max(System.Single,System.Single)">
      <summary>두 개의 단정밀도 부동 소수점 수 중 더 큰 숫자를 반환합니다.</summary>
      <param name="x">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="y">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="x" /> 또는 <paramref name="y" /> 중 더 큰 매개 변수입니다. <paramref name="x" />이나 <paramref name="y" /> 또는 <paramref name="x" />과 <paramref name="y" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.MathF.MaxMagnitude(System.Single,System.Single)">
      <summary>두 개의 단정밀도 부동 소수점 수 중 더 큰 크기를 반환합니다.</summary>
      <param name="x">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="y">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>매개 변수 <paramref name="x" /> 또는 <paramref name="y" /> 중 더 큰 크기입니다. <paramref name="x" />이나 <paramref name="y" /> 또는 <paramref name="x" />과 <paramref name="y" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.MathF.Min(System.Single,System.Single)">
      <summary>두 개의 단정밀도 부동 소수점 수 중 더 작은 숫자를 반환합니다.</summary>
      <param name="x">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="y">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>
        <paramref name="x" /> 또는 <paramref name="y" /> 매개 변수 중에서 더 작은 수입니다. <paramref name="x" />, <paramref name="y" /> 또는 <paramref name="x" />과 <paramref name="y" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.MathF.MinMagnitude(System.Single,System.Single)">
      <summary>두 개의 단정밀도 부동 소수점 수 중 더 작은 크기를 반환합니다.</summary>
      <param name="x">비교할 두 개의 단정밀도 부동 소수점 수 중 첫 번째 숫자입니다.</param>
      <param name="y">비교할 두 개의 단정밀도 부동 소수점 수 중 두 번째 숫자입니다.</param>
      <returns>매개 변수 <paramref name="x" /> 또는 <paramref name="y" /> 중 더 작은 크기입니다. <paramref name="x" />이나 <paramref name="y" /> 또는 <paramref name="x" />과 <paramref name="y" />가 모두 <see cref="F:System.Single.NaN" />과 같은 경우 <see cref="F:System.Single.NaN" />이 반환됩니다.</returns>
    </member>
    <member name="F:System.MathF.PI">
      <summary>상수(π)로 지정된 원주율을 나타냅니다.</summary>
    </member>
    <member name="M:System.MathF.Pow(System.Single,System.Single)">
      <summary>지정된 숫자의 지정된 거듭제곱을 반환합니다.</summary>
      <param name="x">거듭제곱할 단정밀도 부동 소수점 숫자입니다.</param>
      <param name="y">거듭제곱을 지정하는 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>
        <paramref name="x" />의 <paramref name="y" />승입니다.</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single)">
      <summary>단정밀도 부동 소수점 값을 가장 가까운 정수 값으로 반올림하고 중간점 값을 가장 가까운 짝수로 반올림합니다.</summary>
      <param name="x">반올림할 단정밀도 부동 소수점 수입니다.</param>
      <returns>
        <paramref name="x" />에 가장 가까운 정수입니다. <paramref name="x" />의 소수 부분이 하나는 짝수이고 다른 하나는 홀수인 두 정수의 중간인 경우에는 짝수가 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Single" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32)">
      <summary>지정된 수의 소수 자릿수를 단정밀도 부동 소수점 값으로 반올림하고 중간점 값을 가장 가까운 짝수로 반올림합니다.</summary>
      <param name="x">반올림할 단정밀도 부동 소수점 수입니다.</param>
      <param name="digits">반환 값의 소수 자릿수입니다.</param>
      <returns>
        <paramref name="x" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="digits" />에 가장 가까운 수입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" />가 0보다 작거나 6보다 큽니다.</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.Int32,System.MidpointRounding)">
      <summary>지정된 수의 소수 자릿수를 단정밀도 부동 소수점 값으로 반올림하고 중간점 값에 대한 지정된 반올림 규칙을 사용합니다.</summary>
      <param name="x">반올림할 단정밀도 부동 소수점 수입니다.</param>
      <param name="digits">반환 값의 소수 자릿수입니다.</param>
      <param name="mode">서로 다른 두 숫자 중간에 있는 <paramref name="x" />의 반올림 방법에 대한 사양입니다.</param>
      <returns>
        <paramref name="digits" />와(과) 일치하는 소수 자릿수가 포함된 <paramref name="x" />에 가장 가까운 수입니다. <paramref name="x" />의 소수 자릿수가 <paramref name="digits" />보다 작은 경우, <paramref name="x" />가 변경되지 않은 상태로 반환됩니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" />가 0보다 작거나 6보다 큽니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />는 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.MathF.Round(System.Single,System.MidpointRounding)">
      <summary>가장 가까운 정수로 단정밀도 부동 소수점 값을 반올림하고 중간점 값에 대한 지정된 반올림 규칙을 사용합니다.</summary>
      <param name="x">반올림할 단정밀도 부동 소수점 수입니다.</param>
      <param name="mode">서로 다른 두 숫자 중간에 있는 <paramref name="x" />의 반올림 방법에 대한 사양입니다.</param>
      <returns>
        <paramref name="x" />에 가장 가까운 정수입니다. <paramref name="x" />가 두 정수의 중간이고, 이 숫자 중 하나는 짝수이고 다른 하나는 홀수이면, <paramref name="mode" />에 의해 두 숫자 중 하나가 반환됩니다. 이 메서드는 정수 계열 형식이 아니라 <see cref="T:System.Single" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" />는 유효한 <see cref="T:System.MidpointRounding" /> 값이 아닙니다.</exception>
    </member>
    <member name="M:System.MathF.ScaleB(System.Single,System.Int32)">
      <summary>효율적으로 계산된 x * 2^n을 반환합니다.</summary>
      <param name="x">기본 값을 지정하는 단정밀도 부동 소수점 숫자입니다.</param>
      <param name="n">전력을 지정하는 단정밀도 부동 소수점 숫자입니다.</param>
      <returns>효율적으로 계산된 x * 2^n입니다.</returns>
    </member>
    <member name="M:System.MathF.Sign(System.Single)">
      <summary>단정밀도 부동 소수점 숫자의 부호를 나타내는 정수를 반환합니다.</summary>
      <param name="x">부호 있는 숫자입니다.</param>
      <returns>다음 테이블과 같이 <paramref name="x" />의 부호를 나타내는 숫자입니다.
  반환 값 
  의미 
  -1 
 <paramref name="x" />가 0보다 작은 경우  
  
  0 
 <paramref name="x" />가 0과 같습니다.  
  
  1 
 <paramref name="x" />가 0보다 큽니다.</returns>
      <exception cref="T:System.ArithmeticException">
        <paramref name="x" />가 <see cref="F:System.Single.NaN" />와 같은 경우</exception>
    </member>
    <member name="M:System.MathF.Sin(System.Single)">
      <summary>지정된 각도의 사인을 반환합니다.</summary>
      <param name="x">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="x" />의 사인입니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> 또는 <see cref="F:System.Single.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Single.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.Sinh(System.Single)">
      <summary>지정된 각도의 하이퍼볼릭 사인을 반환합니다.</summary>
      <param name="x">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="x" />의 쌍곡선 사인입니다. <paramref name="x" />가 <see cref="F:System.Single.NegativeInfinity" />, <see cref="F:System.Single.PositiveInfinity" /> 또는 <see cref="F:System.Single.NaN" />과 같으면 이 메서드는 <see cref="T:System.Single" />와 같은 <paramref name="x" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.Sqrt(System.Single)">
      <summary>지정된 숫자의 제곱근을 반환합니다.</summary>
      <param name="x">제곱근을 구할 숫자입니다.</param>
      <returns>다음 표에 나와 있는 값 중 하나입니다.
 <paramref name="x" /> 매개 변수 
  반환 값 
  0 또는 양수 
  <paramref name="x" />의 양의 제곱근  
  
  음수 
 <see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" />과 같음<see cref="F:System.Single.NaN" /><see cref="F:System.Single.PositiveInfinity" />과 같음<see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="M:System.MathF.Tan(System.Single)">
      <summary>지정된 각도의 탄젠트를 반환합니다.</summary>
      <param name="x">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="x" />의 접선입니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> 또는 <see cref="F:System.Single.PositiveInfinity" />와 같으면 이 메서드는 <see cref="F:System.Single.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.Tanh(System.Single)">
      <summary>지정된 각도의 하이퍼볼릭 탄젠트를 반환합니다.</summary>
      <param name="x">라디안 단위의 각도입니다.</param>
      <returns>
        <paramref name="x" />의 쌍곡선 접선입니다. <paramref name="x" />가 <see cref="F:System.Single.NegativeInfinity" />와 같으면 이 메서드는 -1을 반환하고 값이 <see cref="F:System.Single.PositiveInfinity" />와 같으면 이 메서드는 1을 반환합니다. <paramref name="x" />가 <see cref="F:System.Single.NaN" />과 같으면 이 메서드는 <see cref="F:System.Single.NaN" />을 반환합니다.</returns>
    </member>
    <member name="M:System.MathF.Truncate(System.Single)">
      <summary>지정한 단정밀도 부동 소수점 숫자의 정수 부분을 계산합니다.</summary>
      <param name="x">잘라낼 숫자입니다.</param>
      <returns>
        <paramref name="x" />의 정수 부분으로, 소수 자릿수를 삭제한 후 남은 숫자 또는 다음 테이블에 나열된 값 중 하나입니다.
<paramref name="x" /> 반환 값 
<see cref="F:System.Single.NaN" /><see cref="F:System.Single.NaN" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.NegativeInfinity" /><see cref="F:System.Single.PositiveInfinity" /><see cref="F:System.Single.PositiveInfinity" /></returns>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>웹 요청을 처리할 때 URL 인코딩 및 디코딩을 위한 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>HTTP 전송을 위해 HTML로 인코딩된 문자열을 디코딩된 문자열로 변환합니다.</summary>
      <param name="value">디코딩할 문자열입니다.</param>
      <returns>디코딩된 문자열입니다.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>HTML 인코딩된 문자열을 디코딩된 문자열로 변환하여 디코딩된 문자열을 <see cref="T:System.IO.TextWriter" /> 출력 스트림에 보냅니다.</summary>
      <param name="value">디코딩할 문자열입니다.</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 출력 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 매개 변수가 <see langword="null" />이 아니면 <paramref name="value" /> 매개 변수가 <see langword="null" />이 될 수 없습니다.</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>문자열을 HTML 인코딩된 문자열로 변환합니다.</summary>
      <param name="value">인코딩할 문자열입니다.</param>
      <returns>인코딩된 문자열입니다.</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>문자열을 HTML 인코딩된 문자열로 변환하고 출력 스트림 <see cref="T:System.IO.TextWriter" />로 출력을 반환합니다.</summary>
      <param name="value">인코딩할 문자열입니다.</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 출력 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 매개 변수가 <see langword="null" />이 아니면 <paramref name="value" /> 매개 변수가 <see langword="null" />이 될 수 없습니다.</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>URL 전송을 위해 인코딩된 문자열을 디코딩된 문자열로 변환합니다.</summary>
      <param name="encodedValue">디코딩할 URL 인코딩된 문자열입니다.</param>
      <returns>디코딩된 문자열입니다.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>URL에서 전송을 위해 인코딩된 바이트 문자열을 디코딩된 바이트 배열로 변환합니다.</summary>
      <param name="encodedValue">디코딩할 URL 인코딩된 <see cref="T:System.Byte" /> 배열입니다.</param>
      <param name="offset">디코딩할 <see cref="T:System.Byte" /> 배열의 시작 부분부터의 오프셋(바이트)입니다.</param>
      <param name="count">
        <see cref="T:System.Byte" /> 배열에서 디코딩할 개수입니다(바이트 단위).</param>
      <returns>디코딩된 <see cref="T:System.Byte" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>텍스트 문자열을 URL 인코딩된 문자열로 변환합니다.</summary>
      <param name="value">URL로 인코딩할 텍스트입니다.</param>
      <returns>URL 인코딩된 문자열입니다.</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>바이트 배열을 URL 인코딩된 바이트 배열로 변환합니다.</summary>
      <param name="value">URL 인코딩할 <see cref="T:System.Byte" /> 배열입니다.</param>
      <param name="offset">인코딩할 <see cref="T:System.Byte" /> 배열의 시작 부분부터의 오프셋(바이트)입니다.</param>
      <param name="count">
        <see cref="T:System.Byte" /> 배열에서 인코딩할 개수입니다(바이트 단위).</param>
      <returns>인코딩된 <see cref="T:System.Byte" /> 배열입니다.</returns>
    </member>
    <member name="T:System.Numerics.BitOperations">
      <summary>내장 비트 twiddling 작업을 위한 유틸리티 메서드를 제공합니다. 메서드는 기본 플랫폼에서 사용 가능한 경우 하드웨어 내장 함수를 사용하고, 그렇지 않으면 최적화된 소프트웨어 대체를 사용합니다.</summary>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt32)">
      <summary>부호 없는 32비트 정수 마스크에서 선행 0비트의 수를 계산합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>마스크의 앞에 오는 0비트의 수입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.LeadingZeroCount(System.UInt64)">
      <summary>부호 없는 64비트 정수 마스크에서 선행 0비트의 수를 계산합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>마스크의 앞에 오는 0비트의 수입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt32)">
      <summary>지정된 값 밑수 2의 정수 (floor) 로그를 반환합니다.</summary>
      <param name="value">로그를 가져올 수 있는 수입니다.</param>
      <returns>지정된 값 밑수 2의 로그입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.Log2(System.UInt64)">
      <summary>지정된 값 밑수 2의 정수 (floor) 로그를 반환합니다.</summary>
      <param name="value">로그를 가져올 수 있는 수입니다.</param>
      <returns>지정된 값 밑수 2의 로그입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt32)">
      <summary>마스크의 모집단 수(비트 집합 수)를 반환합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>마스크의 모집단 수입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.PopCount(System.UInt64)">
      <summary>부호 없는 64비트 정수 마스크의 모집단 수(비트 집합 수)를 반환합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>마스크의 모집단 수입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt32,System.Int32)">
      <summary>지정된 값을 지정된 비트 수만큼 왼쪽으로 회전합니다.</summary>
      <param name="value">회전할 값입니다.</param>
      <param name="offset">회전할 비트 수입니다. [0..31] 범위 밖의 모든 값은 합동 mod 32로 처리됩니다.</param>
      <returns>순환된 값입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateLeft(System.UInt64,System.Int32)">
      <summary>지정된 값을 지정된 비트 수만큼 왼쪽으로 회전합니다.</summary>
      <param name="value">회전할 값입니다.</param>
      <param name="offset">회전할 비트 수입니다. [0..63] 범위 밖의 모든 값은 합동 mod 64로 처리됩니다.</param>
      <returns>순환된 값입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt32,System.Int32)">
      <summary>지정된 값을 지정된 비트 수만큼 오른쪽으로 회전합니다.</summary>
      <param name="value">회전할 값입니다.</param>
      <param name="offset">회전할 비트 수입니다. [0..31] 범위 밖의 모든 값은 합동 mod 32로 처리됩니다.</param>
      <returns>순환된 값입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.RotateRight(System.UInt64,System.Int32)">
      <summary>지정된 값을 지정된 비트 수만큼 오른쪽으로 회전합니다.</summary>
      <param name="value">회전할 값입니다.</param>
      <param name="offset">회전할 비트 수입니다. [0..63] 범위 밖의 모든 값은 합동 mod 64로 처리됩니다.</param>
      <returns>순환된 값입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int32)">
      <summary>32비트 정수 값 마스크에서 후행 0비트의 수를 계산합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>정수 값의 후행 0 비트 수입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.Int64)">
      <summary>64비트 정수 값 마스크에서 후행 0비트의 수를 계산합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>마스크의 후행 0비트 수입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt32)">
      <summary>부호 없는 32비트 정수 값 마스크에서 후행 0비트의 수를 계산합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>마스크의 후행 0비트 수입니다.</returns>
    </member>
    <member name="M:System.Numerics.BitOperations.TrailingZeroCount(System.UInt64)">
      <summary>부호 없는 64비트 정수 값 마스크에서 후행 0비트의 수를 계산합니다.</summary>
      <param name="value">마스크입니다.</param>
      <returns>마스크의 후행 0비트 수입니다.</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>버전 및 플랫폼 식별자 등의 운영 체제에 대한 정보를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>지정된 플랫폼 식별자 값 및 버전 개체를 사용하여 <see cref="T:System.OperatingSystem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="platform">운영 체제 플랫폼을 나타내는 <see cref="T:System.PlatformID" /> 값 중 하나입니다.</param>
      <param name="version">운영 체제의 버전을 나타내는 <see cref="T:System.Version" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" />이 <see cref="T:System.PlatformID" /> 열거형 값이 아닌 경우</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>이 인스턴스와 동일한 <see cref="T:System.OperatingSystem" /> 개체를 만듭니다.</summary>
      <returns>이 인스턴스의 복사본인 <see cref="T:System.OperatingSystem" /> 개체입니다.</returns>
    </member>
    <member name="M:System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>이 인스턴스를 deserialize하는 데 필요한 모든 데이터로 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 채웁니다.</summary>
      <param name="info">serialization 정보로 채울 개체입니다.</param>
      <param name="context">serialize된 데이터를 저장 및 검색할 위치입니다. 나중에 사용하기 위해 예약되어 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>운영 체제 플랫폼을 식별하는 <see cref="T:System.PlatformID" /> 열거형 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.PlatformID" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.OperatingSystem.ServicePack">
      <summary>이 <see cref="T:System.OperatingSystem" /> 개체가 표현하는 서비스 팩 버전을 가져옵니다.</summary>
      <returns>서비스 팩이 지원되며 서비스 팩 중 하나 이상의 설치된 경우는 서비스 팩 버전, 그렇지 않은 경우에는 빈 문자열("")입니다.</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>이 <see cref="T:System.OperatingSystem" /> 개체의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />, <see cref="P:System.OperatingSystem.Version" /> 및 <see cref="P:System.OperatingSystem.ServicePack" /> 속성이 반환하는 값의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>운영 체제를 식별하는 <see cref="T:System.Version" /> 개체를 가져옵니다.</summary>
      <returns>운영 체제의 주 버전, 부 버전, 빌드 버전 및 수정 버전을 나타내는 <see cref="T:System.Version" /> 개체입니다.</returns>
    </member>
    <member name="P:System.OperatingSystem.VersionString">
      <summary>운영 체제에 현재 설치된 플랫폼 식별자, 버전 및 서비스 팩의 연결된 문자열 표현을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" />, <see cref="P:System.OperatingSystem.Version" /> 및 <see cref="P:System.OperatingSystem.ServicePack" /> 속성이 반환하는 값의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.PlatformID">
      <summary>어셈블리에서 지원하는 운영 체제 또는 플랫폼을 식별합니다.</summary>
    </member>
    <member name="F:System.PlatformID.MacOSX">
      <summary>운영 체제가 Macintosh입니다. 이 값은 Silverlight에서 반환되었습니다. .NET Core에서 대체 항목은 Unix입니다.</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>운영 체제가 Unix입니다.</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>운영 체제가 Windows NT 이상입니다.</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>운영 체제가 Win32입니다. 이 값은 더 이상 사용되지 않습니다.</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>운영 체제가 Windows 95 또는 Windows 98입니다. 이 값은 더 이상 사용되지 않습니다.</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>운영 체제가 Windows CE입니다. 이 값은 더 이상 사용되지 않습니다.</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>개발 플랫폼이 Xbox 360입니다. 이 값은 더 이상 사용되지 않습니다.</summary>
    </member>
    <member name="T:System.Progress`1">
      <summary>보고된 각 진행률 값에 대한 콜백을 호출하는 <see cref="T:System.IProgress`1" />을 제공합니다.</summary>
      <typeparam name="T">진행 보고서 값의 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>초기화는 <see cref="T:System.Progress`1" /> 개체입니다.</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>지정된 콜백을 사용하여 <see cref="T:System.Progress`1" /> 개체를 초기화합니다.</summary>
      <param name="handler">보고된 각 진행률 값에 대해 호출할 처리기입니다. 이 처리기는 <see cref="E:System.Progress`1.ProgressChanged" /> 이벤트에 등록된 대리자에 대해서도 호출됩니다. 생성 시 <see cref="T:System.Threading.SynchronizationContext" />가 캡처하는 <see cref="T:System.Progress`1" /> 인스턴스에 따라 이 처리기 인스턴스가 자신과 동시에 호출될 수도 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이 <see langword="null" />(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>진행률 변경을 보고합니다.</summary>
      <param name="value">업데이트된 진행률 값입니다.</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>보고된 각 진행률 값에 대해 발생시킵니다.</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>진행률 변경을 보고합니다.</summary>
      <param name="value">업데이트된 진행률 값입니다.</param>
    </member>
    <member name="T:System.Random">
      <summary>의사(pseudo) 난수 생성기를 나타냅니다. 이 디바이스는 무작위성에 대한 통계적인 특정 요구 사항과 일치하는 숫자 시퀀스를 생성합니다.</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>시간에 따라 달라지는 시드 값을 사용하여 <see cref="T:System.Random" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>지정된 시드 값을 사용하여 <see cref="T:System.Random" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="Seed">의사(pseudo) 난수 시퀀스의 시작 값을 계산하는 데 사용되는 숫자입니다. 음수를 지정하면 이 숫자의 절대 값이 사용됩니다.</param>
    </member>
    <member name="M:System.Random.Next">
      <summary>음수가 아닌 임의의 정수를 반환합니다.</summary>
      <returns>0보다 크거나 같고 <see cref="F:System.Int32.MaxValue" />보다 작은 부호 있는 32비트 정수입니다.</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>지정된 최댓값보다 작은 음수가 아닌 임의의 정수를 반환합니다.</summary>
      <param name="maxValue">생성될 난수의 상한(제외)입니다. <paramref name="maxValue" />는 0보다 크거나 같아야 합니다.</param>
      <returns>0보다 크거나 같고 <paramref name="maxValue" />보다 작은 부호 있는 32비트 정수이므로 반환 값의 범위에는 대개 0이 포함되지만 <paramref name="maxValue" />는 포함되지 않습니다. 하지만 <paramref name="maxValue" />가 0과 같으면 <paramref name="maxValue" />가 반환됩니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>지정된 범위 내의 임의의 정수를 반환합니다.</summary>
      <param name="minValue">반환되는 난수의 하한(포함)입니다.</param>
      <param name="maxValue">반환되는 난수의 상한(제외)입니다. <paramref name="maxValue" />는 <paramref name="minValue" />보다 크거나 같아야 합니다.</param>
      <returns>
        <paramref name="minValue" />보다 크거나 같고 <paramref name="maxValue" />보다 작은 부호 있는 32비트 정수이므로 반환 값의 범위에는 <paramref name="minValue" />가 포함되지만 <paramref name="maxValue" />는 포함되지 않습니다. <paramref name="minValue" />가 <paramref name="maxValue" />와 같은 경우에는 <paramref name="minValue" />가 반환됩니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" />가 <paramref name="maxValue" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>지정된 바이트 배열의 요소를 난수로 채웁니다.</summary>
      <param name="buffer">난수를 포함하는 바이트 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Span{System.Byte})">
      <param name="buffer" />
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>0.0보다 크거나 같고 1.0보다 작은 부동 소수점 난수입니다.</summary>
      <returns>0.0보다 크거나 같고 1.0보다 작은 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>0.0과 1.0 사이의 임의의 부동 소수점 숫자를 반환합니다.</summary>
      <returns>0.0보다 크거나 같고 1.0보다 작은 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameProxy">
      <summary>
        <see langword="AssemblyName" />의 원격 가능한 버전을 제공합니다.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.#ctor">
      <summary>
        <see cref="T:System.Reflection.AssemblyNameProxy" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Reflection.AssemblyNameProxy.GetAssemblyName(System.String)">
      <summary>지정된 파일의 <see langword="AssemblyName" />을 가져옵니다.</summary>
      <param name="assemblyFile">
        <see langword="AssemblyName" />을 가져올 어셈블리 파일입니다.</param>
      <returns>지정된 파일을 나타내는 <see langword="AssemblyName" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" />가 비어 있는 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" />가 없는 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" />는 유효한 어셈블리가 아닙니다.</exception>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>
        <see cref="E:System.AppDomain.TypeResolve" />의 <see cref="E:System.AppDomain.ResourceResolve" />, <see cref="E:System.AppDomain.AssemblyResolve" /> 또는 <see cref="T:System.AppDomain" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="args">이벤트 데이터입니다.</param>
      <returns>형식, 어셈블리 또는 리소스를 확인하는 어셈블리이거나, 어셈블리를 확인할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SwitchExpressionException">
      <summary>전체가 아니었던 Switch 식이 런타임에 해당 입력과 일치하지 못했음을 나타냅니다. 예외는 일치하지 않는 값을 나타내는 개체를 선택적으로 포함합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.Object)">
      <summary>일치하지 않는 전환 값을 사용하여 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="unmatchedValue">전환 사례와 일치하지 않는 전환 값입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">최종 사용자에게 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.Runtime.CompilerServices.SwitchExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">최종 사용자에게 표시할 메시지입니다.</param>
      <param name="innerException">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.SwitchExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>매개 변수 이름과 추가 예외 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 설정합니다.</summary>
      <param name="info">
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />가 serialize하거나 deserialize한 개체를 serialize하거나 deserialize하는 데 사용되는 데이터를 저장합니다.</param>
      <param name="context">예외를 생성한 스트림의 소스 및 대상을 설명하고, serialization이 해당 컨텍스트 및 호출자가 정의한 추가 컨텍스트를 보유하도록 하는 방법을 설명합니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.Message">
      <summary>예외 메시지를 가져옵니다.</summary>
      <returns>전체 메시지 문자열입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.SwitchExpressionException.UnmatchedValue">
      <summary>예외와 연결된 일치하지 않는 값을 가져옵니다.</summary>
      <returns>예외를 발생 시킨 일치 하지 않는 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.ProfileOptimization">
      <summary>이전 컴파일 중 생성된 프로필을 기반으로, 실행될 가능성이 높은 메서드에 대해 백그라운드 컴파일을 수행함으로써 JIT(just-in-time) 컴파일러를 필요로 하는 애플리케이션에서 애플리케이션 도메인의 시작 성능을 향상시킵니다.</summary>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.SetProfileRoot(System.String)">
      <summary>현재 애플리케이션 도메인에 대한 최적화 프로파일링을 사용하도록 설정하고 최적화 프로파일 파일이 저장되는 폴더를 설정합니다. 단일 코어 컴퓨터에서 메서드는 무시됩니다.</summary>
      <param name="directoryPath">현재 애플리케이션 도메인에 대한 프로필 파일이 저장되는 폴더의 전체 경로입니다.</param>
    </member>
    <member name="M:System.Runtime.ProfileOptimization.StartProfile(System.String)">
      <summary>백그라운드 스레드에서 지정한 프로필 파일에 이전에 기록되었던 메서드의 JIT(just-in-time) 컴파일을 시작합니다. 현재 메서드 사용을 기록하는 프로세스를 시작합니다. 이 프로세스에서는 나중에 지정된 프로필 파일을 덮어씁니다.</summary>
      <param name="profile">사용할 프로필의 파일 이름입니다.</param>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesAttribute">
      <summary>여러 버전으로 확장될 수 있는 구성 요소, 형식 또는 형식 멤버의 호환성 보장을 정의합니다.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ComponentGuaranteesAttribute.#ctor(System.Runtime.Versioning.ComponentGuaranteesOptions)">
      <summary>라이브러리, 형식 또는 여러 버전에서 보장되는 멤버의 호환성 수준을 나타내는 값을 사용하여 <see cref="T:System.Runtime.Versioning.ComponentGuaranteesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="guarantees">여러 버전에서 보장되는 호환성 수준을 지정하는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ComponentGuaranteesAttribute.Guarantees">
      <summary>여러 버전으로 확장되는 라이브러리, 형식 또는 형식 멤버의 보장된 호환성 수준을 나타내는 값을 가져옵니다.</summary>
      <returns>여러 버전에서 보장되는 호환성 수준을 지정하는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ComponentGuaranteesOptions">
      <summary>여러 버전으로 확장될 수 있는 구성 요소, 형식 또는 형식 멤버의 호환성 보장을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Exchange">
      <summary>개발자가 해당 형식의 여러 버전 교환 호환성을 보장하므로 해당 형식의 소비자는 이후 버전에서 호환될 것을 예상하고 자신의 모든 인터페이스에 해당 형식을 사용할 수 있습니다. 버전 관리 문제는 Side-by-Side 실행으로 해결할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.None">
      <summary>개발자가 여러 버전에서 호환성을 보장하지 않으므로 해당 구성 요소, 형식 또는 멤버의 소비자는 이후 버전에서 기존 클라이언트가 중단될 것을 예상할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.SideBySide">
      <summary>같은 애플리케이션 도메인에 두 개 이상의 어셈블리 버전이 로드될 경우 구성 요소가 제대로 작동하는지 테스트되었습니다. 이후 버전에서 호환성이 유지되지 않을 수 있습니다. 그러나 이러한 주요 변경 사항이 발생할 경우 이전 버전이 수정되지 않고 새 버전과 함께 계속 존재합니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ComponentGuaranteesOptions.Stable">
      <summary>개발자가 여러 버전에서 안정적인 호환성을 보장하므로 해당 형식의 소비자는 이후 버전에서 기존 클라이언트가 중단되지 않을 것을 예상할 수 있습니다. 그러나 중단되더라도 클라이언트가 인터페이스에서 해당 형식을 사용하지 않았을 경우에는 Side-by-Side 실행으로 문제를 해결할 수 있습니다.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>.NET Framework 버전의 이름을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>.NET Framework 버전에 대한 정보가 포함된 문자열에서 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="frameworkName">.NET Framework 버전 정보가 포함된 문자열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" />가 <see cref="F:System.String.Empty" />인 경우
또는
<paramref name="frameworkName" />에 두 개 미만 또는 세 개 이상의 구성 요소가 들어 있는 경우
또는
<paramref name="frameworkName" />에 주 버전 번호와 부 버전 번호가 포함되어 있지 않습니다.
또는
<paramref name="frameworkName" />에 유효한 버전 번호가 포함되어 있지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>문자열과 .NET Framework 버전을 식별하는 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체에서 <see cref="T:System.Version" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="identifier">.NET Framework 버전을 식별하는 문자열입니다.</param>
      <param name="version">.NET Framework 버전 정보가 포함된 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" />가 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" />가 <see langword="null" />인 경우
또는
<paramref name="version" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>문자열, .NET Framework 버전을 식별하는 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체 및 프로필 이름에서 <see cref="T:System.Version" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="identifier">.NET Framework 버전을 식별하는 문자열입니다.</param>
      <param name="version">.NET Framework 버전 정보가 포함된 개체입니다.</param>
      <param name="profile">프로필 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" />가 <see cref="F:System.String.Empty" />입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" />가 <see langword="null" />인 경우
또는
<paramref name="version" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 인스턴스가 지정된 개체와 같은 .NET Framework 버전을 표시하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 모든 구성 요소가 <paramref name="obj" />의 해당 구성 요소와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 인스턴스가 지정된 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 인스턴스와 같은 .NET Framework 버전을 표시하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>현재 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 모든 구성 요소가 <paramref name="other" />의 해당 구성 요소와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 전체 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 전체 이름입니다.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>
        <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드를 나타내는 32비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 식별자를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 식별자입니다.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>두 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체가 같은 .NET Framework 버전을 표시하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" /> 매개 변수가 같은 .NET Framework 버전을 표시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>두 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체가 다른 .NET Framework 버전을 표시하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <paramref name="left" /> 및 <paramref name="right" /> 매개 변수가 다른 .NET Framework 버전을 표시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 프로필 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 프로필 이름입니다.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체의 문자열 표현을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>이 <see cref="T:System.Runtime.Versioning.FrameworkName" />의 버전을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 개체에 대한 버전 정보가 포함된 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceConsumptionAttribute">
      <summary>클래스의 멤버가 사용하는 리소스를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>사용되는 리소스 범위를 지정하여 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="resourceScope">사용되는 리소스의 <see cref="T:System.Runtime.Versioning.ResourceScope" />입니다.</param>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceConsumptionAttribute.#ctor(System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>사용되는 리소스의 범위와 리소스가 사용되는 방법의 범위를 지정하여 <see cref="T:System.Runtime.Versioning.ResourceConsumptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="resourceScope">사용되는 리소스의 <see cref="T:System.Runtime.Versioning.ResourceScope" />입니다.</param>
      <param name="consumptionScope">이 멤버에서 사용하는 <see cref="T:System.Runtime.Versioning.ResourceScope" />입니다.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ConsumptionScope">
      <summary>이 멤버의 사용 범위를 가져옵니다.</summary>
      <returns>이 멤버가 사용하는 리소스 범위를 지정하는 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceConsumptionAttribute.ResourceScope">
      <summary>사용되는 리소스의 리소스 범위를 가져옵니다.</summary>
      <returns>사용되는 멤버의 리소스 범위를 지정하는 <see cref="T:System.Runtime.Versioning.ResourceScope" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceExposureAttribute">
      <summary>클래스 멤버가 노출하는 리소스를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.ResourceExposureAttribute.#ctor(System.Runtime.Versioning.ResourceScope)">
      <summary>지정된 노출 수준을 사용하여 <see cref="T:System.Runtime.Versioning.ResourceExposureAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exposureLevel">리소스의 범위입니다.</param>
    </member>
    <member name="P:System.Runtime.Versioning.ResourceExposureAttribute.ResourceExposureLevel">
      <summary>리소스 노출 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Runtime.Versioning.ResourceScope" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.Versioning.ResourceScope">
      <summary>공유할 수 있는 리소스의 범위를 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.AppDomain">
      <summary>
        <see cref="T:System.AppDomain" /> 내의 개체에서 상태를 공유합니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Assembly">
      <summary>리소스가 어셈블리 범위에 표시됩니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Library">
      <summary>라이브러리 내의 개체에서 상태를 공유합니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Machine">
      <summary>컴퓨터 내의 개체에서 상태를 공유합니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.None">
      <summary>상태가 공유되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Private">
      <summary>리소스가 해당 형식에만 표시됩니다.</summary>
    </member>
    <member name="F:System.Runtime.Versioning.ResourceScope.Process">
      <summary>프로세스 내에서 상태를 공유합니다.</summary>
    </member>
    <member name="T:System.Runtime.Versioning.VersioningHelper">
      <summary>개발자가 버전 세이프 코드를 작성할 수 있도록 도와주는 메서드를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope)">
      <summary>지정된 리소스 이름과 원하는 리소스 사용 범위를 기반으로 버전 세이프 이름을 반환합니다.</summary>
      <param name="name">리소스의 이름입니다.</param>
      <param name="from">리소스의 범위입니다.</param>
      <param name="to">원하는 리소스 사용 범위입니다.</param>
      <returns>버전 세이프 이름입니다.</returns>
    </member>
    <member name="M:System.Runtime.Versioning.VersioningHelper.MakeVersionSafeName(System.String,System.Runtime.Versioning.ResourceScope,System.Runtime.Versioning.ResourceScope,System.Type)">
      <summary>지정된 리소스 이름, 원하는 리소스 사용 범위 및 리소스를 사용하는 형식을 기반으로 버전 세이프 이름을 반환합니다.</summary>
      <param name="name">리소스의 이름입니다.</param>
      <param name="from">리소스 범위의 시작 부분입니다.</param>
      <param name="to">리소스 범위의 끝 부분입니다.</param>
      <param name="type">리소스의 <see cref="T:System.Type" />입니다.</param>
      <returns>버전 세이프 이름입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 및 <paramref name="to" /> 값이 올바르지 않은 경우. <see cref="T:System.Runtime.Versioning.ResourceScope" /> 열거형의 리소스 형식이 보다 제한적인 리소스 형식에서 보다 일반적인 리소스 형식으로 전환됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Security.IPermission">
      <summary>권한 형식에 의해 구현된 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Security.IPermission.Copy">
      <summary>현재 사용 권한의 동일한 복사본을 만들고 반환합니다.</summary>
      <returns>현재 사용 권한의 복사본입니다.</returns>
    </member>
    <member name="M:System.Security.IPermission.Demand">
      <summary>보안 요구 사항이 충족되지 않으면 런타임에 <see cref="T:System.Security.SecurityException" />을 throw합니다.</summary>
    </member>
    <member name="M:System.Security.IPermission.Intersect(System.Security.IPermission)">
      <summary>현재 사용 권한과 지정된 사용 권한의 교집합에 해당하는 사용 권한을 만들어 반환합니다.</summary>
      <param name="target">현재 사용 권한과 공통되는 사용 권한입니다. 현재 사용 권한과 동일한 형식이어야 합니다.</param>
      <returns>현재 사용 권한과 지정된 사용 권한의 교집합에 해당하는 권한을 나타내는 새 사용 권한입니다. 교집합이 비어 있으면 새 사용 권한은 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 매개 변수가 <see langword="null" />이 아니고 현재 사용 권한과 동일한 클래스의 인스턴스가 아닌 경우</exception>
    </member>
    <member name="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>현재 사용 권한이 지정된 사용 권한의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="target">하위 집합 관계를 테스트할 사용 권한입니다. 이 사용 권한은 현재 사용 권한과 형식이 같아야 합니다.</param>
      <returns>현재 사용 권한이 지정된 사용 권한의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 매개 변수가 <see langword="null" />이 아니고 현재 사용 권한과 형식이 다른 경우</exception>
    </member>
    <member name="M:System.Security.IPermission.Union(System.Security.IPermission)">
      <summary>현재 사용 권한 및 지정한 사용 권한을 합한 사용 권한을 만듭니다.</summary>
      <param name="target">현재 사용 권한과 결합할 사용 권한입니다. 현재 사용 권한과 동일한 형식이어야 합니다.</param>
      <returns>현재 사용 권한 및 지정한 사용 권한의 합을 나타내는 새 사용 권한입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 매개 변수가 <see langword="null" />이 아니고 현재 사용 권한과 형식이 다른 경우</exception>
    </member>
    <member name="T:System.Security.ISecurityEncodable">
      <summary>권한 개체와 XLM 요소 간의 표현을 변환하는 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)">
      <summary>XML 인코딩의 지정된 상태를 사용하여 보안 개체를 다시 만듭니다.</summary>
      <param name="e">보안 개체를 다시 만드는 데 사용할 XML 인코딩입니다.</param>
    </member>
    <member name="M:System.Security.ISecurityEncodable.ToXml">
      <summary>보안 개체 및 현재 상태의 XML 인코딩을 만듭니다.</summary>
      <returns>모든 상태 정보를 포함하는 보안 개체의 XML 인코딩입니다.</returns>
    </member>
    <member name="T:System.Security.IStackWalk">
      <summary>호출 스택의 모든 호출자가 보호된 리소스에 액세스하는 데 필요한 권한이 있는지 여부를 결정하는 스택 워크를 관리합니다.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.Assert">
      <summary>스택의 상위 호출자에게 리소스에 액세스할 수 있는 권한이 부여되지 않더라도 호출 코드에서 현재 사용 권한 개체로 식별되는 리소스에 액세스할 수 있음을 어설션합니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출 코드에 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />이 없습니다.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Demand">
      <summary>호출 스택의 모든 호출자에게 현재 사용 권한 개체가 지정한 사용 권한이 부여되어 있는지를 런타임에 확인합니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출 스택의 상위에 있는 호출자에게 현재 사용 권한 개체가 지정한 사용 권한이 없습니다.
또는
호출 스택의 호출자가 현재 사용 권한 개체에 대해 <see cref="M:System.Security.IStackWalk.Deny" />를 호출했습니다.</exception>
    </member>
    <member name="M:System.Security.IStackWalk.Deny">
      <summary>호출 코드를 통과하는 현재 개체에 대한 모든 <see cref="M:System.Security.IStackWalk.Demand" />가 실패합니다.</summary>
    </member>
    <member name="M:System.Security.IStackWalk.PermitOnly">
      <summary>호출 스택의 상위 코드에 다른 리소스에 대한 액세스 권한이 부여된 경우에도, 호출 코드를 통과하는 현재 개체를 제외하고 모든 개체에 대한 모든 <see cref="M:System.Security.IStackWalk.Demand" />가 실패하는 원인이 됩니다.</summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>코드 액세스 보안을 위한 기본 특성 클래스를 지정합니다.</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>지정된 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" />을 사용하여 <see cref="T:System.Security.Permissions.SecurityAction" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 값 중 하나입니다.</param>
    </member>
    <member name="T:System.Security.Permissions.PermissionState">
      <summary>사용 권한을 만들 때 리소스에 대해 모든 액세스 권한이 있는지 아니면 어떤 액세스 권한도 없는지를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.None">
      <summary>사용 권한으로 보호된 리소스에 대해 액세스 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.PermissionState.Unrestricted">
      <summary>사용 권한으로 보호된 리소스에 대해 모든 액세스 권한이 있습니다.</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>선언적 보안을 사용하여 수행할 수 있는 보안 작업을 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Assert">
      <summary>스택의 상위 호출자에게 리소스에 액세스할 수 있는 권한이 부여되지 않더라도 호출 코드에서 현재 사용 권한 개체로 식별되는 리소스에 액세스할 수 있습니다(Assert 메서드 사용 참조).</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Demand">
      <summary>호출 스택의 상위에 있는 모든 호출자에게 현재 사용 권한 개체가 지정한 사용 권한이 부여되었어야 합니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.Deny">
      <summary>스택의 상위 호출자에게 리소스에 액세스할 수 있는 권한이 부여되더라도 현재 사용 권한 개체로 식별되는 리소스에 액세스할 수 있습니다(Deny 메서드 사용 참조).</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <summary>클래스를 상속하거나 메서드를 재정의하는 파생 클래스에는 지정된 사용 권한을 부여해야 합니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>직접 실행 호출자에게 지정된 사용 권한이 부여되었어야 합니다. .NET Framework 4에서 사용하지 않습니다. 완전 신뢰의 경우 <see cref="T:System.Security.SecurityCriticalAttribute" />를 사용하고, 부분 신뢰의 경우 <see cref="F:System.Security.Permissions.SecurityAction.Demand" />를 사용합니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.PermitOnly">
      <summary>코드에 다른 리소스에 액세스할 수 있는 권한이 부여되더라도 이 권한 개체가 지정한 리소스에만 액세스할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>코드를 실행하는 데 필요한 최소 사용 권한에 대한 요청입니다. 이 작업은 어셈블리 범위 내에서만 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestOptional">
      <summary>선택적인 추가 사용 권한에 대한 요청입니다(실행하는 데 필수는 아님). 이 요청은 특별히 요청되지 않은 다른 모든 사용 권한을 암시적으로 거부합니다. 이 작업은 어셈블리 범위 내에서만 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestRefuse">
      <summary>잘못 사용될 수 있는 사용 권한을 호출 코드에 부여하지 않도록 하는 요청입니다. 이 작업은 어셈블리 범위 내에서만 사용할 수 있습니다.</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>
        <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" />가 파생된 선언적 보안에 대한 기본 특성 클래스를 지정합니다.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>지정된 <see cref="T:System.Security.Permissions.SecurityAttribute" />을 사용하여 <see cref="T:System.Security.Permissions.SecurityAction" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>보안 동작을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Security.Permissions.SecurityAction" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.CreatePermission">
      <summary>파생 클래스에서 재정의된 경우 권한 개체를 만듭니다. 이 개체는 생성된 후 이진 형식으로 직렬화되고 어셈블리 메타데이터의 <see cref="T:System.Security.Permissions.SecurityAction" />과 함께 영구적으로 저장될 수 있습니다.</summary>
      <returns>직렬화할 수 있는 권한 개체입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>해당 특성에 의해 보호되는 리소스에 대해 전체(무제한) 권한이 선언되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>보호되는 리소스에 대한 전체 권한이 선언된 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>
        <see cref="T:System.Security.Permissions.SecurityPermission" />에 대한 보안 동작이 선언적 보안을 사용하여 코드에 적용될 수 있습니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>지정된 <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" />를 사용하여 <see cref="T:System.Security.Permissions.SecurityAction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Assertion">
      <summary>이 코드의 모든 호출자에게 작업에 필요한 권한이 있음을 어설션하기 위한 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>어설션하기 위한 권한이 선언되었으면<see langword="true" /> 이고, 선언되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.BindingRedirects">
      <summary>코드가 애플리케이션 구성 파일에서 바인딩 리디렉션을 수행할 수 있는 권한이 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>코드가 바인딩 리디렉션을 수행할 수 있으면 <see langword="true" />이고, 수행할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>
        <see cref="T:System.AppDomain" />을 조작하기 위한 사용 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.AppDomain" />을 조작하기 위한 사용 권한이 선언된 경우 <see langword="true" />이고, 선언되지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlDomainPolicy">
      <summary>도메인 보안 정책을 변경하거나 조작할 수 있는 사용 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>애플리케이션 도메인에서 보안 정책을 변경하거나 조작할 수 있는 사용 권한이 선언되었으면 <see langword="true" />이고, 선언되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>증거를 변경하거나 조작할 수 있는 사용 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>증거를 변경하거나 조작할 수 있는 사용 권한이 선언되면<see langword="true" /> 이고, 그렇지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>보안 정책을 보거나 조작할 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>보안 정책을 조작할 권한이 선언되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPrincipal">
      <summary>현재 보안 주체를 조작하기 위한 사용 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>현재 보안 주체를 조작하기 위한 사용 권한이 선언되었으면 <see langword="true" />이고, 선언되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>스레드를 조작하기 위한 사용 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>스레드를 조작하기 위한 사용 권한이 선언되었으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.CreatePermission">
      <summary>새 <see cref="T:System.Security.Permissions.SecurityPermission" />을 만들어 반환합니다.</summary>
      <returns>이 특성에 해당하는 <see cref="T:System.Security.Permissions.SecurityPermission" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Execution">
      <summary>코드를 실행할 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>코드를 실행할 권한이 선언되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>
        <see cref="T:System.Security.Permissions.SecurityPermission" /> 권한을 구성하는 모든 권한 플래그를 가져오거나 설정합니다.</summary>
      <returns>비트 OR을 사용하여 결합된 하나 이상의 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentException">이 속성을 잘못된 값으로 설정하려고 시도한 경우. 올바른 값을 보려면 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />를 참조하십시오.</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Infrastructure">
      <summary>코드가 공용 언어 런타임 인프라에 연결할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다(예: 원격 컨텍스트 싱크, 엔보이 싱크 및 동적 싱크 추가).</summary>
      <returns>코드가 공용 언어 런타임 인프라에 연결할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.RemotingConfiguration">
      <summary>코드가 원격 형식 및 채널을 구성할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>코드가 원격 형식 및 채널을 구성할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SerializationFormatter">
      <summary>코드가 serialization 포맷터를 사용하여 개체를 serialize 또는 deserialize할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>코드가 serialization 포맷터를 사용하여 개체를 serialize 또는 deserialize할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>코드 확인을 건너뛸 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>코드 확인을 건너뛸 권한이 선언되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>비관리 코드를 호출할 권한이 선언되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>비관리 코드를 호출할 권한이 선언되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>보안 권한 개체에 대한 액세스 플래그를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>무제한 사용 권한 상태입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>이 코드의 모든 호출자에게 작업에 대한 필수 권한이 있다고 어설션하는 기능입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>애플리케이션 구성 파일에서 명시적인 바인딩 리디렉션을 수행할 수 있는 권한입니다. 여기에는 통합된 .NET Framework 어셈블리와 .NET Framework 외부에 있는 다른 어셈블리의 리디렉션도 포함됩니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>
        <see cref="T:System.AppDomain" />을 만들고 조작하는 기능입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>도메인 정책을 지정하는 기능입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>공용 언어 런타임에서 제공한 증명 정보를 변경하는 기능을 포함하여 증명 정보를 제공하는 기능입니다.
이것은 완전히 신뢰할 수 있는 코드에만 부여해야 하는 강력한 권한입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>정책을 확인 및 수정하는 기능입니다.
이것은 완전히 신뢰할 수 있는 코드에만 부여해야 하는 강력한 권한입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>보안 주체 개체를 조작하는 기능입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>스레드에 특정 고급 작업을 사용하는 기능입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>코드를 실행하는 권한입니다. 이 권한이 없으면 관리 코드를 실행할 수 없습니다.
이 플래그는 <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />와 같은 스택 한정자와 함께 동적으로 사용하는 경우 아무런 효과가 없습니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>원격 컨텍스트 싱크, 엔보이 싱크 및 동적 싱크를 추가하는 등공용 언어 런타임 인프라에 코드를 연결하기 위한 사용 권한입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>보안 액세스 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>원격 형식 및 채널을 구성하기 위한 사용 권한입니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>serialization 서비스를 제공하는 기능입니다. serialization 포맷터에서 사용합니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>이 어셈블리에서 코드 확인을 건너뛰는 기능입니다. 이 권한이 부여되면 비안정형 코드를 실행할 수 있습니다.
이것이 완전히 신뢰할 수 있는 코드에만 부여해야 하는 강력한 사용 권한입니다.
이 플래그는 <see cref="M:System.Security.CodeAccessPermission.Deny" />, <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />와 같은 스택 한정자와 함께 동적으로 사용하는 경우 아무런 효과가 없습니다.</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>비관리 코드를 호출하는 기능입니다.
 비관리 코드는 다른 권한을 무시할 수 있으므로 완전히 신뢰할 수 있는 코드에만 부여해야 하는 위험 부담이 있는 권한입니다. PInvoke를 사용 하 여 또는 COM interop를 사용 하 여 호출 네이티브 코드로 이러한 애플리케이션에 사용 됩니다.</summary>
    </member>
    <member name="T:System.Security.PermissionSet">
      <summary>다양한 형식의 사용 권한을 포함할 수 있는 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)">
      <summary>지정된 <see cref="T:System.Security.PermissionSet" />를 사용하여 <see cref="T:System.Security.Permissions.PermissionState" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="state">리소스에 대한 권한 집합의 액세스를 지정하는 열거형 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 매개 변수가 유효한 <see cref="T:System.Security.Permissions.PermissionState" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Security.PermissionSet.#ctor(System.Security.PermissionSet)">
      <summary>
        <paramref name="permSet" /> 매개 변수에서 가져온 초기값을 사용하여 <see cref="T:System.Security.PermissionSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="permSet">새 <see cref="T:System.Security.PermissionSet" />의 값을 가져올 집합이거나 빈 <see cref="T:System.Security.PermissionSet" />를 만들 <see langword="null" />입니다.</param>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermission(System.Security.IPermission)">
      <summary>지정된 사용 권한을 <see cref="T:System.Security.PermissionSet" />에 추가합니다.</summary>
      <param name="perm">추가할 사용 권한입니다.</param>
      <returns>추가된 사용 권한과 <see cref="T:System.Security.PermissionSet" />에 이미 있는 동일한 형식의 사용 권한의 합한 것입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Security.ReadOnlyPermissionSet" />에서 메서드가 호출됩니다.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)">
      <summary>지정된 사용 권한을 <see cref="T:System.Security.PermissionSet" />에 추가합니다.</summary>
      <param name="perm">추가할 사용 권한입니다.</param>
      <returns>추가된 사용 권한과 <see cref="T:System.Security.PermissionSet" />에 이미 있는 동일한 형식의 사용 권한의 합집합이거나, 아니면 <paramref name="perm" />이 <see langword="null" />인 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Security.ReadOnlyPermissionSet" />에서 메서드가 호출됩니다.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Assert">
      <summary>스택의 상위 호출자에게 리소스에 액세스할 수 있는 권한이 부여되지 않더라도 호출 코드가 이 메서드를 호출하는 코드를 통해 사용 권한 요구로 보호되는 리소스에 액세스할 수 있음을 선언합니다. <see cref="M:System.Security.PermissionSet.Assert" />를 사용하면 보안 취약점이 발생할 수 있습니다.</summary>
      <exception cref="T:System.Security.SecurityException">어설션된 <see cref="T:System.Security.PermissionSet" /> 인스턴스에 어설션 코드가 부여되지 않았습니다.
또는
현재 프레임에 대해 활성 <see cref="M:System.Security.PermissionSet.Assert" />가 이미 있습니다.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.ContainsNonCodeAccessPermissions">
      <summary>
        <see cref="T:System.Security.PermissionSet" />에 <see cref="T:System.Security.CodeAccessPermission" />에서 파생되지 않은 사용 권한이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" />에 <see cref="T:System.Security.CodeAccessPermission" />에서 파생되지 않은 사용 권한이 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)">
      <summary>인코딩된 <see cref="T:System.Security.PermissionSet" />을 한 XML 인코딩 형식에서 다른 XML 인코딩 형식으로 변환합니다.</summary>
      <param name="inFormat">다음 인코딩 형식 중 하나를 나타내는 문자열입니다. ASCII, 유니코드 또는 이진 파일. 가능한 값은 "XMLASCII" 또는 "XML", "XMLUNICODE" 및 "BINARY"입니다.</param>
      <param name="inData">XML로 인코딩된 사용 권한 집합입니다.</param>
      <param name="outFormat">다음 인코딩 형식 중 하나를 나타내는 문자열입니다. ASCII, 유니코드 또는 이진 파일. 가능한 값은 "XMLASCII" 또는 "XML", "XMLUNICODE" 및 "BINARY"입니다.</param>
      <returns>지정된 출력 형식을 갖는 암호화된 사용 권한 집합입니다.</returns>
      <exception cref="T:System.NotImplementedException">모든 경우</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Copy">
      <summary>
        <see cref="T:System.Security.PermissionSet" />의 복사본을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" />의 복사본입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.CopyTo(System.Array,System.Int32)">
      <summary>집합의 사용 권한 개체를 <see cref="T:System.Array" />의 지정된 위치에 복사합니다.</summary>
      <param name="array">복사할 대상 배열입니다.</param>
      <param name="index">복사를 시작할 배열의 시작 위치(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 매개 변수가 둘 이상의 차원을 포함합니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 매개 변수가 <paramref name="array" /> 매개 변수의 범위를 벗어납니다.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.Count">
      <summary>사용 권한 집합에 포함된 사용 권한 개체의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" />에 포함된 사용 권한 개체의 수입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Demand">
      <summary>호출 스택의 모든 상위 호출자가 현재 인스턴스에서 지정한 사용 권한이 없으면 런타임에 <see cref="T:System.Security.SecurityException" />을 throw합니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 필요한 사용 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Deny">
      <summary>현재 <see cref="M:System.Security.PermissionSet.Demand" />에 포함된 형식의 사용 권한과 공통되는 교집합 부분이 있는 사용 권한에 대한 호출 코드를 통해 전달하는 모든 <see cref="T:System.Security.PermissionSet" />는 성공적으로 수행되지 않습니다.</summary>
      <exception cref="T:System.Security.SecurityException">이전에 <see cref="M:System.Security.PermissionSet.Deny" />를 호출했기 때문에 현재 스택 프레임에 대한 사용 권한이 이미 제한된 경우</exception>
    </member>
    <member name="M:System.Security.PermissionSet.Equals(System.Object)">
      <summary>지정한 <see cref="T:System.Security.PermissionSet" /> 또는 <see cref="T:System.Security.NamedPermissionSet" /> 개체가 현재 <see cref="T:System.Security.PermissionSet" />과 같은지 여부를 확인합니다.</summary>
      <param name="o">현재 <see cref="T:System.Security.PermissionSet" />와 비교할 개체입니다.</param>
      <returns>지정한 개체가 현재 <see langword="true" /> 개체와 같으면 <see cref="T:System.Security.PermissionSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>XML 인코딩의 지정된 상태를 사용하여 보안 개체를 다시 만듭니다.</summary>
      <param name="et">보안 개체를 다시 만드는 데 사용할 XML 인코딩입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="et" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="et" /> 매개 변수가 올바른 사용 권한 요소가 아닌 경우
또는
<paramref name="et" /> 매개 변수의 버전 번호가 지원되지 않는 경우</exception>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumerator">
      <summary>사용 권한 집합의 권한 개체에 대한 열거자를 반환합니다.</summary>
      <returns>사용 권한 집합의 권한 개체에 대한 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetEnumeratorImpl">
      <summary>사용 권한 집합의 권한 개체에 대한 열거자를 반환합니다.</summary>
      <returns>사용 권한 집합의 권한 개체에 대한 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetHashCode">
      <summary>해시 알고리즘과 해시 테이블 같은 데이터 구조에 사용하기 적합한 <see cref="T:System.Security.PermissionSet" /> 개체에 대한 해시 코드를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Security.PermissionSet" /> 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermission(System.Type)">
      <summary>지정된 형식의 권한 개체가 사용 권한 집합에 있으면 해당 권한 개체를 가져옵니다.</summary>
      <param name="permClass">원하는 권한 개체의 형식입니다.</param>
      <returns>
        <see cref="T:System.Security.PermissionSet" />에 포함된 <paramref name="permClass" /> 매개 변수로 지정한 형식의 사용 권한 개체 복사본이거나, 해당 복사본이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.GetPermissionImpl(System.Type)">
      <summary>지정된 형식의 권한 개체가 사용 권한 집합에 있으면 해당 권한 개체를 가져옵니다.</summary>
      <param name="permClass">권한 개체의 형식입니다.</param>
      <returns>
        <see cref="T:System.Security.PermissionSet" />에 포함된 <paramref name="permClass" /> 매개 변수로 지정한 형식의 사용 권한 개체 복사본이거나, 해당 복사본이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Intersect(System.Security.PermissionSet)">
      <summary>현재 <see cref="T:System.Security.PermissionSet" />과 지정된 <see cref="T:System.Security.PermissionSet" />의 교집합에 해당하는 사용 권한 집합을 만들어 반환합니다.</summary>
      <param name="other">현재 <see cref="T:System.Security.PermissionSet" />와 공통되는 사용 권한입니다.</param>
      <returns>현재 <see cref="T:System.Security.PermissionSet" />와 지정된 대상의 교집합을 나타내는 새 사용 권한 집합입니다. 교집합이 비어 있으면 이 개체는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsEmpty">
      <summary>
        <see cref="T:System.Security.PermissionSet" />가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 비어 있으면 <see cref="T:System.Security.PermissionSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)">
      <summary>현재 <see cref="T:System.Security.PermissionSet" />가 지정된 <see cref="T:System.Security.PermissionSet" />의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="target">하위 집합 관계를 테스트할 사용 권한 집합입니다. <see cref="T:System.Security.PermissionSet" /> 또는 <see cref="T:System.Security.NamedPermissionSet" /> 중 하나이어야 합니다.</param>
      <returns>현재 <see cref="T:System.Security.PermissionSet" />이 <paramref name="target" /> 매개 변수의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.PermissionSet.IsSynchronized">
      <summary>컬렉션이 스레드로부터 안전한지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.IsUnrestricted">
      <summary>
        <see cref="T:System.Security.PermissionSet" />가 <see langword="Unrestricted" />인지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" />가 <see langword="Unrestricted" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.PermitOnly">
      <summary>현재 <see cref="M:System.Security.PermissionSet.Demand" />의 하위 집합이 아닌 모든 <see cref="T:System.Security.PermissionSet" />에 대한 호출 코드를 통해 전달하는 모든 <see cref="T:System.Security.PermissionSet" />는 성공적으로 수행되지 않습니다.</summary>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermission(System.Type)">
      <summary>사용 권한 집합에서 특정 형식의 사용 권한을 제거합니다.</summary>
      <param name="permClass">삭제할 사용 권한의 형식입니다.</param>
      <returns>사용 권한 집합에서 제거된 사용 권한입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Security.ReadOnlyPermissionSet" />에서 메서드가 호출됩니다.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RemovePermissionImpl(System.Type)">
      <summary>사용 권한 집합에서 특정 형식의 사용 권한을 제거합니다.</summary>
      <param name="permClass">제거할 사용 권한의 형식입니다.</param>
      <returns>사용 권한 집합에서 제거된 사용 권한입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Security.ReadOnlyPermissionSet" />에서 메서드가 호출됩니다.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.RevertAssert">
      <summary>현재 프레임에 대한 이전의 모든 <see cref="M:System.Security.CodeAccessPermission.Assert" />를 제거하여 더 이상 적용되지 않도록 합니다.</summary>
      <exception cref="T:System.InvalidOperationException">현재 프레임에 대한 이전 <see cref="M:System.Security.CodeAccessPermission.Assert" />가 없는 경우</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermission(System.Security.IPermission)">
      <summary>사용 권한을 <see cref="T:System.Security.PermissionSet" />로 설정하고 동일한 형식의 기존 사용 권한을 바꿉니다.</summary>
      <param name="perm">설정할 사용 권한입니다.</param>
      <returns>사용 권한 집합입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Security.ReadOnlyPermissionSet" />에서 메서드가 호출됩니다.</exception>
    </member>
    <member name="M:System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)">
      <summary>사용 권한을 <see cref="T:System.Security.PermissionSet" />로 설정하고 동일한 형식의 기존 사용 권한을 바꿉니다.</summary>
      <param name="perm">설정할 사용 권한입니다.</param>
      <returns>사용 권한 집합입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Security.ReadOnlyPermissionSet" />에서 메서드가 호출됩니다.</exception>
    </member>
    <member name="P:System.Security.PermissionSet.SyncRoot">
      <summary>현재 컬렉션의 루트 개체를 가져옵니다.</summary>
      <returns>현재 컬렉션의 루트 개체입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>전체 개체 그래프가 deserialize될 때 실행됩니다.</summary>
      <param name="sender">콜백을 시작한 개체입니다. 이 매개 변수의 기능은 현재 구현되지 않았습니다.</param>
    </member>
    <member name="M:System.Security.PermissionSet.ToString">
      <summary>
        <see cref="T:System.Security.PermissionSet" />의 문자열 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Security.PermissionSet" />의 표현입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.ToXml">
      <summary>보안 개체 및 현재 상태의 XML 인코딩을 만듭니다.</summary>
      <returns>모든 상태 정보를 포함하는 보안 개체의 XML 인코딩입니다.</returns>
    </member>
    <member name="M:System.Security.PermissionSet.Union(System.Security.PermissionSet)">
      <summary>현재 <see cref="T:System.Security.PermissionSet" />와 지정된 <see cref="T:System.Security.PermissionSet" />의 합집합 부분인 <see cref="T:System.Security.PermissionSet" />를 만듭니다.</summary>
      <param name="other">현재 <see cref="T:System.Security.PermissionSet" />와 함께 합집합 부분을 구성하는 사용 권한 집합입니다.</param>
      <returns>현재 <see cref="T:System.Security.PermissionSet" />와 지정된 <see cref="T:System.Security.PermissionSet" />의 합집합을 나타내는 새 사용 권한 집합입니다.</returns>
    </member>
    <member name="T:System.Security.SecurityElement">
      <summary>보안 개체를 인코딩하기 위한 XML 개체 모델을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String)">
      <summary>지정된 태그를 사용하여 <see cref="T:System.Security.SecurityElement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tag">XML 요소의 태그 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 매개 변수가 XML에 적합하지 않은 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.#ctor(System.String,System.String)">
      <summary>지정된 태그 및 텍스트를 사용하여 <see cref="T:System.Security.SecurityElement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tag">XML 요소의 태그 이름입니다.</param>
      <param name="text">요소 안에 있는 텍스트 내용입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" /> 매개 변수 또는 <paramref name="text" /> 매개 변수가 XML에 적합하지 않은 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)">
      <summary>이름/값 특성을 XML 요소에 추가합니다.</summary>
      <param name="name">특성 이름입니다.</param>
      <param name="value">특성 값</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수 또는 <paramref name="value" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 매개 변수 또는 <paramref name="value" /> 매개 변수가 XML에 적합하지 않은 경우
또는
<paramref name="name" /> 매개 변수에서 지정한 이름을 가진 특성이 이미 존재하는 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)">
      <summary>자식 요소를 XML 요소에 추가합니다.</summary>
      <param name="child">추가할 자식 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Attribute(System.String)">
      <summary>XML 요소에서 특성을 이름으로 찾습니다.</summary>
      <param name="name">검색할 특성 이름입니다.</param>
      <returns>이름이 지정된 특성과 연결된 값입니다. <paramref name="name" />이 포함된 특성이 존재하지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Attributes">
      <summary>XML 요소의 특성을 이름/값 쌍으로 가져오거나 설정합니다.</summary>
      <returns>XML 요소의 특성 값에 대한 <see cref="T:System.Collections.Hashtable" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Collections.Hashtable" /> 개체의 이름 또는 값이 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">이름이 유효한 XML 특성 이름이 아닙니다.</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Children">
      <summary>XML 요소의 자식 요소 배열을 가져오거나 설정합니다.</summary>
      <returns>보안 요소로서 순서가 있는 XML 요소의 자식 요소입니다.</returns>
      <exception cref="T:System.ArgumentException">XML 부모 노드의 자식이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.Copy">
      <summary>현재 <see cref="T:System.Security.SecurityElement" /> 개체의 동일한 복사본을 만들어 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Security.SecurityElement" /> 개체의 복사본입니다.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)">
      <summary>두 개의 XML 요소 개체가 일치하는지 비교합니다.</summary>
      <param name="other">현재 XML 요소 개체와 비교할 XML 요소 개체입니다.</param>
      <returns>현재 XML 요소의 태그, 특성 이름과 값, 자식 요소 및 텍스트 필드가 <paramref name="other" /> 매개 변수의 상대 요소와 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.Escape(System.String)">
      <summary>문자열에 있는 잘못된 XML 문자를 해당하는 올바른 XML로 바꿉니다.</summary>
      <param name="str">이스케이프할 잘못된 문자가 포함된 문자열입니다.</param>
      <returns>잘못된 문자가 있었으나 바뀐 입력 문자열입니다.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.FromString(System.String)">
      <summary>XML로 인코딩된 문자열에서 보안 요소를 만듭니다.</summary>
      <param name="xml">보안 요소를 만드는 데 사용할 XML로 인코딩된 문자열입니다.</param>
      <returns>XML에서 만든 <see cref="T:System.Security.SecurityElement" />입니다.</returns>
      <exception cref="T:System.Security.XmlSyntaxException">
        <paramref name="xml" />에 하나 이상의 작은따옴표 문자가 포함된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeName(System.String)">
      <summary>문자열이 유효한 특성 이름인지 여부를 확인합니다.</summary>
      <param name="name">유효성을 테스트할 특성 이름입니다.</param>
      <returns>
        <paramref name="name" /> 매개 변수가 유효한 XML 특성 이름이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)">
      <summary>문자열이 유효한 특성 값인지 여부를 확인합니다.</summary>
      <param name="value">유효성을 테스트할 특성 값입니다.</param>
      <returns>
        <paramref name="value" /> 매개 변수가 유효한 XML 특성 값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidTag(System.String)">
      <summary>문자열이 유효한 태그인지 여부를 확인합니다.</summary>
      <param name="tag">유효성을 테스트할 태그입니다.</param>
      <returns>
        <paramref name="tag" /> 매개 변수가 유효한 XML 태그이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.IsValidText(System.String)">
      <summary>문자열이 XML 요소 내의 텍스트로 유효한지 여부를 확인합니다.</summary>
      <param name="text">유효성을 테스트할 텍스트입니다.</param>
      <returns>
        <paramref name="text" /> 매개 변수가 유효한 XML 텍스트 요소이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForChildByTag(System.String)">
      <summary>태그 이름으로 자식을 찾습니다.</summary>
      <param name="tag">자식 요소에서 검색할 태그입니다.</param>
      <returns>지정된 태그 값을 가지는 첫째 자식 XML 요소입니다. <paramref name="tag" />를 가지는 자식 요소가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)">
      <summary>태그 이름으로 자식을 찾고 포함된 텍스트를 반환합니다.</summary>
      <param name="tag">자식 요소에서 검색할 태그입니다.</param>
      <returns>지정된 태그 값을 가지는 첫째 자식 요소의 텍스트 내용입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tag" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Tag">
      <summary>XML 요소의 태그 이름을 가져오거나 설정합니다.</summary>
      <returns>XML 요소의 태그 이름입니다.</returns>
      <exception cref="T:System.ArgumentNullException">태그가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">태그가 XML에 적합하지 않은 경우</exception>
    </member>
    <member name="P:System.Security.SecurityElement.Text">
      <summary>XML 요소 안에 있는 텍스트를 가져오거나 설정합니다.</summary>
      <returns>XML 요소 안에 있는 텍스트 값입니다.</returns>
      <exception cref="T:System.ArgumentException">태그가 XML에 적합하지 않은 경우</exception>
    </member>
    <member name="M:System.Security.SecurityElement.ToString">
      <summary>XML 요소의 문자열 표현과 구성 요소 특성, 자식 요소 및 텍스트를 만듭니다.</summary>
      <returns>XML 요소 및 해당 내용입니다.</returns>
    </member>
    <member name="T:System.StringComparer">
      <summary>특정 대/소문자 및 문화권 기반 또는 서수 비교 규칙을 사용하는 문자열 비교 연산을 나타냅니다.</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>
        <see cref="T:System.StringComparer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>파생 클래스에서 재정의된 경우 두 개체를 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</summary>
      <param name="x">
        <paramref name="y" />와 비교할 개체입니다.</param>
      <param name="y">
        <paramref name="x" />와 비교할 개체입니다.</param>
      <returns>다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.
  값 
  의미 
  0보다 작음 
 <paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 앞에 오는 경우  
  
또는 
 <paramref name="x" />가 <see langword="null" />이고 <paramref name="y" />가 <see langword="null" />이 아닌 경우  
  
  0 
 <paramref name="x" />가 <paramref name="y" />와 같은 경우  
  
또는 
 <paramref name="x" />와 <paramref name="y" />가 둘 다 <see langword="null" />인 경우  
  
  0보다 큼 
 <paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 뒤에 오는 경우  
  
또는 
 <paramref name="y" />가 <see langword="null" />이고 <paramref name="x" />가 <see langword="null" />이 아닌 경우</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 또는 <paramref name="y" />가 <see cref="T:System.String" /> 개체가 아니고 <paramref name="x" /> 또는 <paramref name="y" />가 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>파생 클래스에서 재정의된 경우 두 문자열을 비교하고 상대적 정렬 순서를 나타내는 값을 반환합니다.</summary>
      <param name="x">
        <paramref name="y" />와 비교할 문자열입니다.</param>
      <param name="y">
        <paramref name="x" />와 비교할 문자열입니다.</param>
      <returns>다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.
  값 
  의미 
  0보다 작음 
 <paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 앞에 오는 경우  
  
또는 
 <paramref name="x" />가 <see langword="null" />이고 <paramref name="y" />가 <see langword="null" />이 아닌 경우  
  
  0 
 <paramref name="x" />가 <paramref name="y" />와 같은 경우  
  
또는 
 <paramref name="x" />와 <paramref name="y" />가 둘 다 <see langword="null" />인 경우  
  
  0보다 큼 
 <paramref name="x" />가 정렬 순서에서 <paramref name="y" /> 뒤에 오는 경우  
  
또는 
 <paramref name="y" />가 <see langword="null" />이고 <paramref name="x" />가 <see langword="null" />이 아닌 경우</returns>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>지정된 문화권의 규칙에 따라 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 만듭니다.</summary>
      <param name="culture">문자열 비교를 수행하는 데 사용되는 언어적 규칙의 문화권입니다.</param>
      <param name="ignoreCase">비교 연산이 대/소문자를 구분하지 않도록 지정하면 <see langword="true" />이고, 비교 연산이 대/소문자를 구분하도록 지정하면 <see langword="false" />입니다.</param>
      <returns>
        <see cref="T:System.StringComparer" /> 매개 변수에서 사용하는 비교 규칙과 <paramref name="culture" /> 매개 변수에서 지정하는 대/소문자 규칙에 따라 문자열 비교를 수행하는 새 <paramref name="ignoreCase" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <param name="culture" />
      <param name="options" />
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>현재 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하는 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</summary>
      <returns>새 <see cref="T:System.StringComparer" /> 개체입니다.</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>현재 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하지 않는 문자열을 비교하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</summary>
      <returns>문자열 비교를 위한 새 개체입니다.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>파생 클래스에서 재정의된 경우 두 개체가 같음을 나타냅니다.</summary>
      <param name="x">
        <paramref name="y" />와 비교할 개체입니다.</param>
      <param name="y">
        <paramref name="x" />와 비교할 개체입니다.</param>
      <returns>
        <see langword="true" />와 <paramref name="x" />가 같은 개체를 참조하거나, <paramref name="y" />와 <paramref name="x" />가 모두 같은 형식의 개체이고 두 개체가 같거나, <paramref name="y" />와 <paramref name="x" />가 모두 <paramref name="y" />이면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>파생 클래스에서 재정의된 경우 두 문자열이 같음을 나타냅니다.</summary>
      <param name="x">
        <paramref name="y" />와 비교할 문자열입니다.</param>
      <param name="y">
        <paramref name="x" />와 비교할 문자열입니다.</param>
      <returns>
        <see langword="true" />와 <paramref name="x" />가 같은 개체를 참조하거나, <paramref name="y" />와 <paramref name="x" />가 같거나, <paramref name="y" />와 <paramref name="x" />가 <paramref name="y" />이면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.StringComparer.FromComparison(System.StringComparison)">
      <param name="comparisonType" />
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>파생 클래스에서 재정의된 경우 지정된 개체의 해시 코드를 가져옵니다.</summary>
      <param name="obj">개체입니다.</param>
      <returns>
        <paramref name="obj" /> 매개 변수의 값에서 계산된 32비트 부호 있는 해시 코드입니다.</returns>
      <exception cref="T:System.ArgumentException">메모리가 부족하여 해시 코드를 컴퓨팅하는 데 필요한 버퍼를 할당할 수 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>파생 클래스에서 재정의된 경우 지정된 문자열의 해시 코드를 가져옵니다.</summary>
      <param name="obj">문자열</param>
      <returns>
        <paramref name="obj" /> 매개 변수의 값에서 계산된 32비트 부호 있는 해시 코드입니다.</returns>
      <exception cref="T:System.ArgumentException">메모리가 부족하여 해시 코드를 컴퓨팅하는 데 필요한 버퍼를 할당할 수 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>고정 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하는 문자열 비교를 수행하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</summary>
      <returns>새 <see cref="T:System.StringComparer" /> 개체입니다.</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>고정 문화권의 단어 비교 규칙을 사용하여 대/소문자를 구분하지 않는 문자열 비교를 수행하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</summary>
      <returns>새 <see cref="T:System.StringComparer" /> 개체입니다.</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>대/소문자를 구분하는 서수 문자열 비교를 수행하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 개체입니다.</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>대/소문자를 구분하지 않는 서수 문자열 비교를 수행하는 <see cref="T:System.StringComparer" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 개체입니다.</returns>
    </member>
    <member name="T:System.StringNormalizationExtensions">
      <summary>정규화된 문자열을 사용하는 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String)">
      <summary>지정한 문자열이 유니코드 정규화 형식 C인지를 나타냅니다.</summary>
      <param name="value">문자열</param>
      <returns>
        <paramref name="value" />의 형식이 정규화 형식 C이면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />에 잘못된 유니코드 문자가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.IsNormalized(System.String,System.Text.NormalizationForm)">
      <summary>문자열의 형식이 지정한 유니코드 정규화 형식인지를 나타냅니다.</summary>
      <param name="value">문자열</param>
      <param name="normalizationForm">유니코드 정규화 형식입니다.</param>
      <returns>
        <paramref name="value" />의 형식이 정규화 형식 <paramref name="normalizationForm" />이면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />에 잘못된 유니코드 문자가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String)">
      <summary>유니코드 정규화 형식 C에 대한 문자열을 정규화합니다.</summary>
      <param name="value">정규화할 문자열입니다.</param>
      <returns>텍스트 값이 <paramref name="value" />와 같지만 이진 표현의 형식이 유니코드 정규화 형식 C인 새 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />에 잘못된 유니코드 문자가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.StringNormalizationExtensions.Normalize(System.String,System.Text.NormalizationForm)">
      <summary>지정한 유니코드 정규화 형식에 대한 문자열을 정규화합니다.</summary>
      <param name="value">정규화할 문자열입니다.</param>
      <param name="normalizationForm">유니코드 정규화 형식입니다.</param>
      <returns>텍스트 값이 <paramref name="value" />와 같지만 이진 표현의 형식이 <paramref name="normalizationForm" /> 정규화 형식인 새 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />에 잘못된 유니코드 문자가 포함되어 있습니다.</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>URI(Uniform Resource Indentifier)에 대한 사용자 지정 생성자를 제공하고 <see cref="T:System.Uri" /> 클래스의 URI를 수정합니다.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>
        <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>URI가 지정된 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="uri">URI 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.UriFormatException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.FormatException" />을 catch합니다.  
  

          
          <paramref name="uri" />는 길이가 0인 문자열이거나 공백만 포함합니다.  
  
또는 
구문 분석 루틴이 잘못된 형식의 체계를 발견한 경우  
  
또는 
파서가 "file" 체계를 사용하지 않는 URI에서 두 개 이상의 연속 슬래시를 발견한 경우  
  
또는 
 <paramref name="uri" /> 경로는 유효한 URI가 아닙니다.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>지정된 체계 및 호스트를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemeName">인터넷 액세스 프로토콜입니다.</param>
      <param name="hostName">DNS 스타일의 도메인 이름 또는 IP 주소입니다.</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>지정된 체계, 호스트 및 포트를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scheme">인터넷 액세스 프로토콜입니다.</param>
      <param name="host">DNS 스타일의 도메인 이름 또는 IP 주소입니다.</param>
      <param name="portNumber">서비스의 IP 포트 번호입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" />가 -1보다 작거나 65,535보다 큽니다.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>지정된 체계, 호스트, 포트 번호 및 경로를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scheme">인터넷 액세스 프로토콜입니다.</param>
      <param name="host">DNS 스타일의 도메인 이름 또는 IP 주소입니다.</param>
      <param name="port">서비스의 IP 포트 번호입니다.</param>
      <param name="pathValue">인터넷 리소스의 경로입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" />가 -1보다 작거나 65,535보다 큽니다.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>지정된 체계, 호스트, 포트 번호, 경로 및 쿼리 문자열이나 단편 식별자를 사용하여 <see cref="T:System.UriBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="scheme">인터넷 액세스 프로토콜입니다.</param>
      <param name="host">DNS 스타일의 도메인 이름 또는 IP 주소입니다.</param>
      <param name="port">서비스의 IP 포트 번호입니다.</param>
      <param name="path">인터넷 리소스의 경로입니다.</param>
      <param name="extraValue">쿼리 문자열 또는 단편 식별자입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" />가 <see langword="null" />, <see cref="F:System.String.Empty" />, 번호 기호(#)로 시작하는 유효한 단편 식별자 또는 물음표(?)로 시작하는 유효한 쿼리 문자열이 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" />가 -1보다 작거나 65,535보다 큽니다.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>지정된 <see cref="T:System.UriBuilder" /> 인스턴스를 사용하여 <see cref="T:System.Uri" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 클래스의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>기존 <see cref="T:System.Uri" /> 인스턴스와 <see cref="T:System.UriBuilder" />의 콘텐츠가 같은지 비교합니다.</summary>
      <param name="rparam">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>
        <see langword="true" />이 이 <paramref name="rparam" /> 인스턴스에서 생성된 <see cref="T:System.Uri" />와 같은 <see cref="T:System.Uri" />를 나타내면 <see cref="T:System.UriBuilder" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>URI의 단편 부분을 가져오거나 설정합니다.</summary>
      <returns>URI의 단편 부분입니다. 단편 시작 부분에 단편 식별자("#")가 추가됩니다.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>URI의 해시 코드를 반환합니다.</summary>
      <returns>URI용으로 생성된 해시 코드입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>서버의 DNS(Domain Name System) 호스트 이름이나 IP 주소를 가져오거나 설정합니다.</summary>
      <returns>서버의 DNS 호스트 이름 또는 IP 주소입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>URI에 액세스하는 사용자와 관련된 암호를 가져오거나 설정합니다.</summary>
      <returns>URI에 액세스하는 사용자의 암호입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>URI가 참조하는 리소스에 대한 경로를 가져오거나 설정합니다.</summary>
      <returns>URI가 참조하는 리소스에 대한 경로입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>URI의 포트 번호를 가져오거나 설정합니다.</summary>
      <returns>URI의 포트 번호입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">포트는 -1보다 작거나 65,535보다 큰 값으로 설정할 수 없습니다.</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>URI에 포함된 쿼리 정보를 가져오거나 설정합니다.</summary>
      <returns>URI에 포함된 쿼리 정보입니다.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>URI의 체계 이름을 가져오거나 설정합니다.</summary>
      <returns>URI의 체계입니다.</returns>
      <exception cref="T:System.ArgumentException">구성표는 잘못된 구성표 이름으로 설정할 수 없습니다.</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>지정된 <see cref="T:System.UriBuilder" /> 인스턴스에 대한 표시 문자열을 반환합니다.</summary>
      <returns>
        <see cref="T:System.UriBuilder" />의 이스케이프 해제된 표시 문자열을 포함하는 문자열입니다.</returns>
      <exception cref="T:System.UriFormatException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.FormatException" />을 catch합니다.  
  

            
  
 <see cref="T:System.UriBuilder" /> 인스턴스에 잘못된 암호가 있습니다.</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>지정된 <see cref="T:System.Uri" /> 인스턴스에 의해 생성된 <see cref="T:System.UriBuilder" /> 인스턴스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Uri" />에 의해 생성된 URI를 포함하는 <see cref="T:System.UriBuilder" />입니다.</returns>
      <exception cref="T:System.UriFormatException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.FormatException" />을 catch합니다.  
  

            
  
 <see cref="T:System.UriBuilder" /> 속성에 의해 생성된 URI는 올바르지 않습니다.</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>URI에 액세스하는 사용자와 관련된 사용자 이름입니다.</summary>
      <returns>URI에 액세스하는 사용자의 사용자 이름입니다.</returns>
    </member>
  </members>
</doc>
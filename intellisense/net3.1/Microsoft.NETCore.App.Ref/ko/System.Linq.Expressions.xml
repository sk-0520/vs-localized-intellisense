<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>호출 사이트에서의 동적 이항 연산을 나타내며, 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="operation">이항 연산 종류입니다.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="target">동적 이항 연산의 대상입니다.</param>
      <param name="arg">동적 이항 연산의 오른쪽 피연산자입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="target">동적 이항 연산의 대상입니다.</param>
      <param name="arg">동적 이항 연산의 오른쪽 피연산자입니다.</param>
      <param name="errorSuggestion">바인딩이 실패한 경우 바인딩 결과 또는 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>이항 연산 종류입니다.</summary>
      <returns>이항 연산 종류를 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식입니다.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>동적 바인딩이 유효한 <see cref="T:System.Dynamic.DynamicMetaObject" />의 바인딩 제한 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 목록의 바인딩 제한을 하나의 제한 집합으로 결합합니다.</summary>
      <param name="contributingObjects">제한을 결합할 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 목록입니다.</param>
      <returns>새 바인딩 제한 집합입니다.</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>빈 바인딩 제한 집합을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>식에서 임의의 변경할 수 없는 속성을 확인하는 바인딩 제한을 만듭니다.</summary>
      <param name="expression">제한을 나타내는 식입니다.</param>
      <returns>새 바인딩 제한입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>식에서 개체 인스턴스 ID를 확인하는 바인딩 제한을 만듭니다.</summary>
      <param name="expression">테스트할 식입니다.</param>
      <param name="instance">테스트할 정확한 개체 인스턴스입니다.</param>
      <returns>새 바인딩 제한입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>식에서 런타임 형식 ID를 확인하는 바인딩 제한을 만듭니다.</summary>
      <param name="expression">테스트할 식입니다.</param>
      <param name="type">테스트할 정확한 형식입니다.</param>
      <returns>새 바인딩 제한입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>바인딩 제한 집합을 현재 바인딩 제한과 병합합니다.</summary>
      <param name="restrictions">현재 바인딩 제한과 병합할 제한 집합입니다.</param>
      <returns>새 바인딩 제한 집합입니다.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>바인딩 제한을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</summary>
      <returns>제한을 나타내는 식 트리입니다.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>동적 바인딩 프로세스의 인수에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>동적 바인딩 프로세스의 인수를 나타내는 새 CallInfo를 만듭니다.</summary>
      <param name="argCount">인수의 수입니다.</param>
      <param name="argNames">인수 이름입니다.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>새 <c>PositionalArgumentInfo</c>를 만듭니다.</summary>
      <param name="argCount">인수의 수입니다.</param>
      <param name="argNames">인수 이름입니다.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>인수의 수입니다.</summary>
      <returns>인수의 수입니다.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>인수 이름입니다.</summary>
      <returns>인수 이름의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>지정된 CallInfo 인스턴스와 현재 인스턴스가 같다고 간주할지 여부를 확인합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 <see cref="T:System.Dynamic.CallInfo" />의 인스턴스입니다.</param>
      <returns>지정된 인스턴스가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>현재 <see cref="T:System.Dynamic.CallInfo" />의 해시 함수로 사용됩니다.</summary>
      <returns>현재 <see cref="T:System.Dynamic.CallInfo" />의 해시 코드입니다.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>호출 사이트에서의 동적 변환 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.ConvertBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변환할 대상 형식입니다.</param>
      <param name="explicit">변환 시 명시적 변환을 고려해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 변환 작업의 대상입니다.</param>
      <param name="args">동적 변환 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>변환 시 명시적 변환을 고려해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />명시적 변환이 있는 경우입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 변환 작업의 대상입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 변환 작업의 대상입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>변환할 대상 형식입니다.</summary>
      <returns>변환할 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>호출 사이트에서의 동적 만들기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.CreateInstanceBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 만들기 작업의 대상입니다.</param>
      <param name="args">동적 만들기 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns>호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 만들기 작업의 대상입니다.</param>
      <param name="args">동적 만들기 작업의 인수입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 만들기 작업의 대상입니다.</param>
      <param name="args">동적 만들기 작업의 인수입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>호출 사이트의 동적 인덱스 삭제 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.DeleteIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 삭제 작업의 대상입니다.</param>
      <param name="args">동적 인덱스 삭제 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns>호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 삭제 작업의 대상입니다.</param>
      <param name="indexes">동적 인덱스 삭제 작업의 인수입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 삭제 작업의 대상입니다.</param>
      <param name="indexes">동적 인덱스 삭제 작업의 인수입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>호출 사이트의 동적 멤버 삭제 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.DeleteIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">삭제할 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 삭제 작업의 대상입니다.</param>
      <param name="args">동적 멤버 삭제 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 삭제 작업의 대상입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 삭제 작업의 대상입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />문자열 비교 시 대/소문자를 무시 해야 하는 경우 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>삭제할 멤버의 이름을 가져옵니다.</summary>
      <returns>삭제할 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>동적 바인딩에 참가하는 개체의 바인딩 논리와 동적 바인딩을 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">동적 바인딩을 수행하는 동안 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <param name="restrictions">바인딩이 유효한 바인딩 제한 집합입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">동적 바인딩을 수행하는 동안 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <param name="restrictions">바인딩이 유효한 바인딩 제한 집합입니다.</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" />가 나타내는 런타임 값입니다.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>동적 이항 연산의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.BinaryOperationBinder" />의 인스턴스입니다.</param>
      <param name="arg">이항 연산의 오른쪽을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />의 인스턴스입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>동적 변환 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.ConvertBinder" />의 인스턴스입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인스턴스 만들기 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.CreateInstanceBinder" />의 인스턴스입니다.</param>
      <param name="args">인스턴스 만들기 작업에 대한 인수로서 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.DeleteIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes">인덱스 삭제 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>동적 멤버 삭제 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.DeleteMemberBinder" />의 인스턴스입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.GetIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes">인덱스 가져오기 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.GetMemberBinder" />의 인스턴스입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 호출 작업 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.InvokeBinder" />의 인스턴스입니다.</param>
      <param name="args">호출 작업에 대한 인수로서 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.InvokeMemberBinder" />의 인스턴스입니다.</param>
      <param name="args">멤버 호출 작업에 대한 인수로서 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스의 배열입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.SetIndexBinder" />의 인스턴스입니다.</param>
      <param name="indexes">인덱스 설정 작업에 대한 <see cref="T:System.Dynamic.DynamicMetaObject" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <param name="value">인덱스 설정 작업의 값을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.SetMemberBinder" />의 인스턴스입니다.</param>
      <param name="value">멤버 설정 작업의 값을 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="binder">동적 작업의 세부 정보를 나타내는 <see cref="T:System.Dynamic.UnaryOperationBinder" />의 인스턴스입니다.</param>
      <returns>바인딩 결과를 나타내는 새 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>지정한 개체에 대한 메타 개체를 만듭니다.</summary>
      <param name="value">메타 개체를 가져올 개체입니다.</param>
      <param name="expression">동적 바인딩을 수행하는 동안 이 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <returns>지정된 개체가 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />를 구현하고 현재 AppDomain 외부의 원격 개체가 아니면 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />에서 반환된 개체의 특정 메타 개체를 반환합니다. 그렇지 않으면 아무 제한도 없는 일반 메타 개체가 새로 만들어져 반환됩니다.</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 빈 배열을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>동적 바인딩을 수행하는 동안 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</summary>
      <returns>동적 바인딩을 수행하는 동안 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>모든 동적 멤버 이름의 열거형을 반환합니다.</summary>
      <returns>동적 멤버 이름의 목록입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" />에 런타임 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 <see cref="T:System.Dynamic.DynamicMetaObject" /> 런타임 값이 있으면이 고, <see langword="false" />그렇지 않으면입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" />의 제한 형식을 가져옵니다.</summary>
      <returns>런타임 값을 사용할 수 있으면 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />이고, 그렇지 않으면 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />의 형식입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>바인딩이 유효한 바인딩 제한 집합입니다.</summary>
      <returns>바인딩 제한 집합입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>런타임 값의 <see cref="T:System.Type" /> 또는 <see cref="T:System.Dynamic.DynamicMetaObject" />에 연결된 값이 없는 경우 null을 가져옵니다.</summary>
      <returns>런타임 값의 <see cref="T:System.Type" /> 또는 null입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>이 <see cref="T:System.Dynamic.DynamicMetaObject" />가 나타내는 런타임 값입니다.</summary>
      <returns>이 <see cref="T:System.Dynamic.DynamicMetaObject" />가 나타내는 런타임 값입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 바인딩 프로토콜에 참가하는 동적 호출 사이트 바인더입니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>
        <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>파생 클래스에서 재정의된 경우 동적 연산의 바인딩을 수행합니다.</summary>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>인수 집합에서 동적 연산의 런타임 바인딩을 수행합니다.</summary>
      <param name="args">동적 연산에 대한 인수 배열입니다.</param>
      <param name="parameters">바인딩 프로세스에서 호출 사이트의 매개 변수를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 인스턴스의 배열입니다.</param>
      <param name="returnLabel">동적 바인딩의 결과를 반환하는 데 사용되는 LabelTarget입니다.</param>
      <returns>동적 연산의 인수에서 테스트를 수행하고 테스트에 성공하는 경우 동적 연산을 수행하는 식입니다. 이후의 동적 연산에서 테스트에 실패하는 경우 새 인수 형식에 대한 새 <see cref="T:System.Linq.Expressions.Expression" />을 생성하기 위해 Bind가 다시 호출됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>나중에 모든 동적 연산 인수의 런타임 값이 계산될 때까지 작업의 바인딩을 지연합니다.</summary>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>나중에 모든 동적 연산 인수의 런타임 값이 계산될 때까지 작업의 바인딩을 지연합니다.</summary>
      <param name="args">동적 연산의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>바인딩이 업데이트되도록 할 식을 가져옵니다. 식의 바인딩이 더 이상 유효하지 않음을 나타냅니다. 일반적으로 동적 개체의 "버전"이 변경될 때 사용됩니다.</summary>
      <param name="type">결과 식의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성입니다. 모든 형식을 사용할 수 있습니다.</param>
      <returns>업데이트 식입니다.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>런타임에 동적 동작을 지정하기 위한 기본 클래스를 제공합니다. 이 클래스는 상속되어야 하며 직접 인스턴스화할 수 없습니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>파생 형식이 <see cref="T:System.Dynamic.DynamicObject" /> 형식의 새 인스턴스를 초기화할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>모든 동적 멤버 이름의 열거형을 반환합니다.</summary>
      <returns>동적 멤버 이름이 들어 있는 시퀀스입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>동적 가상 메서드에 디스패치할 <see cref="T:System.Dynamic.DynamicMetaObject" />를 제공합니다. 개체를 다른 <see cref="T:System.Dynamic.DynamicMetaObject" /> 내에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다. 이 메서드는 언어 구현자에 대한 동적 언어 런타임 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="parameter">동적 가상 메서드에 디스패치할 <see cref="T:System.Dynamic.DynamicMetaObject" />를 나타내는 식입니다.</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 개체입니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>이항 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 더하기와 곱하기 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">이항 연산에 대한 정보를 제공합니다. <c>binder.Operation</c> 속성에서 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다. 예를 들어, <c>합계 = 첫 번째 + 두 번째</c> 문의 경우 여기서 <c>첫 번째</c> 및 <c>두 번째</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>binder.Operation</c>은 <c>ExpressionType.Add</c>를 반환합니다.</param>
      <param name="arg">이항 연산의 오른쪽 피연산자입니다. 예를 들어, <c>합계 = 첫 번째 + 두 번째</c> 문의 경우 여기서 <c>첫 번째</c> 및 <c>두 번째</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <paramref name="arg" />는 <c>두 번째</c>와 동일합니다.</param>
      <param name="result">이항 연산의 결과입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>형식 변환 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체를 한 형식에서 다른 형식으로 변환하는 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">변환 연산에 대한 정보를 제공합니다. <c>binder.Type</c> 속성은 개체가 변환되어야 하는 형식을 제공합니다. 예를 들어 C#에서 <c>(String)sampleObject</c>(Visual Basic에서 <c>CType(sampleObject, Type)</c>) 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Type</c>은 <see cref="T:System.String" /> 형식을 반환합니다. <c>binder.Explicit</c> 속성은 발생하는 변환의 종류에 대한 정보를 제공합니다. 명시적 변환의 경우 <see langword="true" />를 반환하고, 암시적 변환의 경우 <see langword="false" />를 반환합니다.</param>
      <param name="result">형식 변환 연산의 결과입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>동적 개체의 새 인스턴스를 초기화하는 연산에 대한 구현을 제공합니다. 이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <param name="binder">초기화 연산에 대한 정보를 제공합니다.</param>
      <param name="args">초기화하는 동안 개체에 전달되는 인수입니다. 예를 들어 <c>새 SampleType(100)</c> 작업의 경우 여기서 <c>SampleType</c>은 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생되는 형식입니다. <c>args[0]</c>는 100과 같습니다.</param>
      <param name="result">초기화의 결과입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>인덱스별로 개체를 삭제하는 연산에 대한 구현을 제공합니다. 이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <param name="binder">삭제에 대한 정보를 제공합니다.</param>
      <param name="indexes">삭제할 인덱스입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>개체 멤버를 삭제하는 연산에 대한 구현을 제공합니다. 이 메서드는 C# 또는 Visual Basic에서 사용할 수 없습니다.</summary>
      <param name="binder">삭제에 대한 정보를 제공합니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>인덱스별로 값을 가져오는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 인덱싱 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">연산에 대한 정보를 제공합니다.</param>
      <param name="indexes">연산에 사용되는 인덱스입니다. 예를 들어 C#에서 <c>sampleObject[3]</c>(Visual Basic에서 <c>sampleObject(3)</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>indexes[0]</c>은 3과 같습니다.</param>
      <param name="result">인덱스 연산의 결과입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>멤버 값을 가져오는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 가져오기와 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">동적 연산을 호출한 개체에 대한 정보를 제공합니다. <c>binder.Name</c> 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다. 예를 들어 <c>Console.WriteLine(sampleObject.SampleProperty)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleProperty"를 반환합니다. <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="result">가져오기 연산의 결과입니다. 예를 들어 속성에 대한 메서드가 호출되면 <paramref name="result" />에 속성 값을 할당할 수 있습니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>개체를 호출하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 개체 또는 대리자 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">호출 연산에 대한 정보를 제공합니다.</param>
      <param name="args">호출 연산을 수행하는 동안 개체에 전달되는 인수입니다. 예를 들어 <c>sampleObject(100)</c> 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>args[0]</c>은 100과 같습니다.</param>
      <param name="result">개체 호출의 결과입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>멤버를 호출하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 메서드 호출과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">동적 연산에 대한 정보를 제공합니다. <c>binder.Name</c> 속성은 동적 연산이 수행된 멤버의 이름을 제공합니다. 예를 들어 <c>sampleObject.SampleMethod(100)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleMethod"를 반환합니다. <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="args">호출 연산을 수행하는 동안 개체 멤버에 전달되는 인수입니다. 예를 들어 <c>sampleObject.SampleMethod(100)</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>args[0]</c>은 100과 같습니다.</param>
      <param name="result">멤버 호출의 결과입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>인덱스별로 값을 설정하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 지정된 인덱스별로 개체에 액세스하는 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">연산에 대한 정보를 제공합니다.</param>
      <param name="indexes">연산에 사용되는 인덱스입니다. 예를 들어 C#에서 <c>sampleObject[3] = 10</c>(Visual Basic에서 <c>sampleObject(3) = 10</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <c>indexes[0]</c>은 3과 같습니다.</param>
      <param name="value">지정된 인덱스를 가진 개체로 설정할 값입니다. 예를 들어 C#에서 <c>sampleObject[3] = 10</c>(Visual Basic에서 <c>sampleObject(3) = 10</c>) 작업의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생됩니다. <paramref name="value" />는 10과 같습니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>멤버 값을 설정하는 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 속성 값 설정과 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">동적 연산을 호출한 개체에 대한 정보를 제공합니다. <c>binder.Name</c> 속성은 값이 할당될 멤버의 이름을 제공합니다. 예를 들어 <c>sampleObject.SampleProperty = "Test"</c> 문의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <c>binder.Name</c>은 "SampleProperty"를 반환합니다. <c>binder.IgnoreCase</c> 속성은 멤버 이름이 대/소문자를 구분하는지 여부를 지정합니다.</param>
      <param name="value">멤버에 설정할 값입니다. 예를 들어 <c>sampleObject.SampleProperty = "Test"</c>의 경우 여기서 <c>sampleObject</c>는 <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스의 인스턴스입니다. <paramref name="value" />는 "Test"를 반환합니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>단항 연산에 대한 구현을 제공합니다. <see cref="T:System.Dynamic.DynamicObject" /> 클래스에서 파생된 클래스로 이 메서드를 재정의하여 부정, 증가 또는 감소와 같은 연산의 동적 동작을 지정할 수 있습니다.</summary>
      <param name="binder">단항 연산에 대한 정보를 제공합니다. <c>binder.Operation</c> 속성에서 <see cref="T:System.Linq.Expressions.ExpressionType" /> 개체를 반환합니다. 예를 들어 <c>negativeNumber = -number</c> 문의 경우 여기서 <c>번호</c>는 <see langword="DynamicObject" /> 클래스에서 파생됩니다. <c>binder.Operation</c>은 "Negate"를 반환합니다.</param>
      <param name="result">단항 연산의 결과입니다.</param>
      <returns>작업에 성공하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드가 <see langword="false" />를 반환하는 경우 언어의 런타임 바인더에 따라 동작이 결정됩니다. 대부분의 경우 언어별 런타임 예외가 throw됩니다.</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>런타임에 동적으로 추가 및 제거할 수 있는 멤버가 있는 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>멤버가 없는 새 <see langword="ExpandoObject" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>속성 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>제공된 MetaObject가 동적 가상 메서드에 디스패치됩니다. 개체를 다른 MetaObject에 캡슐화하여 개별 작업에 대해 사용자 지정 동작을 제공할 수 있습니다.</summary>
      <param name="parameter">동적 가상 메서드에 디스패치할 MetaObject를 나타내는 식입니다.</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 형식의 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>호출 사이트의 동적 인덱스 가져오기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.GetIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 가져오기 작업의 대상입니다.</param>
      <param name="args">동적 인덱스 가져오기 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns>호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 가져오기 작업의 대상입니다.</param>
      <param name="indexes">동적 인덱스 가져오기 작업의 인수입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 가져오기 작업의 대상입니다.</param>
      <param name="indexes">동적 인덱스 가져오기 작업의 인수입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>호출 사이트의 동적 멤버 가져오기 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.GetMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">가져올 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 가져오기 작업의 대상입니다.</param>
      <param name="args">동적 멤버 가져오기 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 가져오기 작업의 대상입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 가져오기 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 가져오기 작업의 대상입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>case가 무시 되 면 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>가져올 멤버의 이름을 가져옵니다.</summary>
      <returns>가져올 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>런타임에 작업이 바인딩될 수 있는 동적 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>이 개체에 대해 바인딩 작업을 수행하는 <see cref="T:System.Dynamic.DynamicMetaObject" />를 반환합니다.</summary>
      <param name="parameter">런타임 값의 식 트리 표현입니다.</param>
      <returns>이 개체를 바인딩할 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>get 작업을 수행할 때 get 멤버가 속성을 호출할지 여부를 알려 주는 동적 get 멤버 작업에 대한 정보를 나타냅니다.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>get 작업을 수행할 때 이 get 멤버 작업이 속성을 호출할지 여부를 알려 주는 값을 가져옵니다. 이 인터페이스가 없으면 기본값은 true입니다.</summary>
      <returns>
        <see langword="true" />get 작업을 수행할 때이 get member 작업에서 속성을 호출 해야 하면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>호출 사이트에서의 동적 호출 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.InvokeBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 호출 작업 바인딩을 수행합니다.</summary>
      <param name="target">동적 호출 작업의 대상입니다.</param>
      <param name="args">동적 호출 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns>호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체를 바인드할 수 없는 경우 동적 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 호출 작업의 대상입니다.</param>
      <param name="args">동적 호출 작업의 인수입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체를 바인드할 수 없는 경우 동적 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 호출 작업의 대상입니다.</param>
      <param name="args">동적 호출 작업의 인수입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>호출 사이트의 동적 멤버 호출 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.InvokeMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">호출할 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="callInfo">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 호출 작업의 대상입니다.</param>
      <param name="args">동적 멤버 호출 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns>호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 호출 작업의 대상입니다.</param>
      <param name="args">동적 호출 작업의 인수입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 호출 작업의 대상입니다.</param>
      <param name="args">동적 멤버 호출 작업의 인수입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 멤버 호출 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 호출 작업의 대상입니다.</param>
      <param name="args">동적 멤버 호출 작업의 인수입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />case가 무시 되 면이 고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>호출할 멤버의 이름을 가져옵니다.</summary>
      <returns>호출할 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>호출 사이트의 동적 인덱스 설정 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>
        <see cref="T:System.Dynamic.SetIndexBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="callInfo">호출 사이트에 있는 인수의 서명입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 설정 작업의 대상입니다.</param>
      <param name="args">동적 인덱스 설정 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>호출 사이트에서 인수의 서명을 가져옵니다.</summary>
      <returns>호출 사이트에 있는 인수의 서명입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 설정 작업의 대상입니다.</param>
      <param name="indexes">동적 인덱스 설정 작업의 인수입니다.</param>
      <param name="value">컬렉션에 설정할 값입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>파생 클래스에서 재정의된 경우 대상 동적 개체가 바인딩할 수 없으면 동적 인덱스 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 인덱스 설정 작업의 대상입니다.</param>
      <param name="indexes">동적 인덱스 설정 작업의 인수입니다.</param>
      <param name="value">컬렉션에 설정할 값입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>호출 사이트에서의 동적 멤버 설정 작업을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Dynamic.SetMemberBinder" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">가져올 멤버의 이름입니다.</param>
      <param name="ignoreCase">대/소문자를 무시하고 이름이 일치해야 하면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 설정 작업의 대상입니다.</param>
      <param name="args">동적 멤버 설정 작업의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 설정 작업의 대상입니다.</param>
      <param name="value">멤버에 설정할 값입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 멤버 설정 작업의 바인딩을 수행합니다.</summary>
      <param name="target">동적 멤버 설정 작업의 대상입니다.</param>
      <param name="value">멤버에 설정할 값입니다.</param>
      <param name="errorSuggestion">바인딩에 실패하는 경우에는 사용할 바인딩 결과이며, 그러지 않으면 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>문자열 비교 시 멤버 이름의 대/소문자를 무시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />case가 무시 되 면이 고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>가져올 멤버의 이름을 가져옵니다.</summary>
      <returns>가져올 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>호출 사이트의 동적 단항 연산을 나타내며 바인딩 의미 체계와 작업에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="operation">단항 연산 종류입니다.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="target">동적 연산의 대상입니다.</param>
      <param name="args">동적 연산의 인수 배열입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="target">동적 단항 연산의 대상입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>대상 동적 개체가 바인딩할 수 없는 경우 동적 단항 연산의 바인딩을 수행합니다.</summary>
      <param name="target">동적 단항 연산의 대상입니다.</param>
      <param name="errorSuggestion">바인딩이 실패한 경우 바인딩 결과 또는 null입니다.</param>
      <returns>바인딩의 결과를 나타내는 <see cref="T:System.Dynamic.DynamicMetaObject" />입니다.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>단항 연산 종류입니다.</summary>
      <returns>단항 연산 종류를 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />의 개체입니다.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>작업의 결과 형식입니다.</summary>
      <returns>작업의 결과 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>이항 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />식 트리 노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>결합 또는 복합 할당 연산에 사용되는 형식 변환 함수를 가져옵니다.</summary>
      <returns>형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>식 트리 노드가 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>노드가 리프트된 호출을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>식 트리 노드가 해당 반환 형식이 nullable 형식으로 리프트된 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>연산자의 반환 형식이 nullable 형식으로 리프트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>이항 연산의 왼쪽 피연산자를 가져옵니다.</summary>
      <returns>이항 연산의 왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>이항 연산에 대한 구현 메서드를 가져옵니다.</summary>
      <returns>구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>이항 식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns>축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>이항 연산의 오른쪽 피연산자를 가져옵니다.</summary>
      <returns>이항 연산의 오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="left">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성입니다.</param>
      <param name="conversion">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 속성입니다.</param>
      <param name="right">결과의 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>변수를 정의할 수 있는 식의 시퀀스가 포함된 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>이 블록의 식을 가져옵니다.</summary>
      <returns>이 블록의 모든 식이 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>이 블록의 마지막 식을 가져옵니다.</summary>
      <returns>이 블록의 마지막 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="variables">결과의 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 속성입니다.</param>
      <param name="expressions">결과의 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 속성입니다.</param>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>이 블록에 정의된 변수를 가져옵니다.</summary>
      <returns>이 블록에 정의된 모든 변수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>try 블록의 catch 문을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>catch 블록의 본문을 가져옵니다.</summary>
      <returns>catch 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터의 본문을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 필터의 본문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>이 처리기가 catch하는 <see cref="T:System.Exception" />의 형식을 가져옵니다.</summary>
      <returns>이 처리기가 catch하는 <see cref="T:System.Type" />의 형식을 나타내는 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Object" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="variable">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 속성입니다.</param>
      <param name="filter">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 속성입니다.</param>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>이 처리기가 catch한 <see cref="T:System.Exception" /> 개체에 대한 참조를 가져옵니다.</summary>
      <returns>이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>조건부 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>테스트 결과가 <see langword="false" />인 경우 실행할 식을 가져옵니다.</summary>
      <returns>테스트가 <see langword="false" />인 경우 실행할 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>테스트 결과가 <see langword="true" />인 경우 실행할 식을 가져옵니다.</summary>
      <returns>테스트가 <see langword="true" />인 경우 실행할 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>조건 연산의 테스트를 가져옵니다.</summary>
      <returns>조건 연산의 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="test">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성입니다.</param>
      <param name="ifTrue">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성입니다.</param>
      <param name="ifFalse">결과의 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성입니다.</param>
      <returns>변경된 자식이 없으면 이 식이고, 그렇지 않으면 업데이트된 자식을 사용한 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>상수 값이 있는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>상수 식의 값을 가져옵니다.</summary>
      <returns>표현된 식의 값과 같은 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>디버그 정보에 대한 시퀀스 위치를 내보내거나 지워 디버깅할 때 디버거가 올바른 소스 코드를 강조 표시할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />를 가져옵니다.</summary>
      <returns>소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 끝 열 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 끝 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />이 시퀀스 점을 지우는 데 사용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 시퀀스 위치를 지우기 위한 이면이 고, <see langword="false" />그렇지 않으면입니다. <see cref="T:System.Linq.Expressions.DebugInfoExpression" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 시작 열 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄을 가져옵니다.</summary>
      <returns>래핑된 식을 생성하는 데 사용된 코드의 시작 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>형식 또는 빈 식의 기본값을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>동적 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>동적 작업의 인수를 가져옵니다.</summary>
      <returns>동적 작업에 대한 인수를 포함하는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>동적 사이트의 런타임 동작을 결정하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />를 가져옵니다.</summary>
      <returns>동적 사이트의 런타임 동작을 결정하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용하는 대리자의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Type" />에서 사용하는 대리자의 형식을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3">동적 작업의 네 번째 인수입니다.</param>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />이고, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />가 지정한 값으로 설정된 <see cref="T:System.Linq.Expressions.DynamicExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 1개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 2개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 3개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 4개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3">동적 작업의 네 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>인수 수를 식 트리 노드에 반환합니다. 이 멤버를 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns>
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다. 이 멤버를 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index">인수의 인덱스입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>선택적으로 호출 사이트를 만들고 DynamicExpression의 다형 형식 인라인 캐시용 호출 사이트를 반환합니다. 이 멤버를 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns>
        <see cref="T:System.Object" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>제공된 값으로 동적 식의 인수를 바꾸어 이 노드를 다시 씁니다. <paramref name="args" />의 숫자가 현재 식의 숫자와 일치해야 합니다. 이 형식은 사용하지 않아야 합니다. 어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다. 이 도우미 메서드를 사용하면 호출 사이트에서 사용되는 DynamicExpression에서 파생된 특정 구현 클래스와 독립적으로 노드를 다시 작성할 수 있습니다.</summary>
      <param name="args">인수입니다.</param>
      <returns>다시 쓴 식인 <see cref="T:System.Linq.Expressions.Expression" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>매개 변수 <paramref name="arguments" />로 보낸 값을 <see langword="Arguments" />의 현재 인스턴스의 <see langword="DynamicExpression" /> 속성과 비교합니다. 매개 변수 및 속성의 값이 같으면 현재 인스턴스가 반환됩니다. 인스턴스가 일치하지 않으면 <see langword="DynamicExpression" />  속성이 매개 변수 <paramref name="arguments" />의 값으로 설정되는 경우를 제외하고 현재 인스턴스와 동일한 새 <see langword="Arguments" /> 인스턴스가 반환됩니다.</summary>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>동적 식 트리에 대한 방문자 또는 재작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식인 <see cref="T:System.Linq.Expressions.Expression" />을 반환하고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션의 단일 요소에 대한 이니셜라이저를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션에 요소를 추가하는 데 사용하는 인스턴스 메서드를 가져옵니다.</summary>
      <returns>컬렉션에 요소를 추가하는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 컬렉션에 요소를 추가하는 메서드에 전달된 인수의 컬렉션을 가져옵니다.</summary>
      <returns>컬렉션에 요소를 추가하는 메서드의 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns>
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index">인수의 인덱스입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 텍스트 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 개체의 텍스트 표현입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>식 트리 노드를 나타내는 클래스가 파생되는 기본 클래스를 제공합니다. 또한 다양한 노드 형식을 만드는 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 팩터리 메서드가 들어 있습니다. 이 클래스는 <see langword="abstract" /> 클래스입니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" />의 새 인스턴스를 생성합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nodeType">노드 형식으로 설정할 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="type">이 <see cref="P:System.Linq.Expressions.Expression.Type" />의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하는 더하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 가 <see langword="null" /> 이고 더하기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.And" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="AND" /> 연산을 나타내는 <see langword="true" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="AND" /> 연산자가 정의되지 않은 경우
또는
<paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>첫 번째 피연산자가 true로 확인되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="AND" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="AND" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우
또는
<paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 AND 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>다차원 배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="array">다차원 배열을 나타내는 식입니다.</param>
      <param name="indexes">배열을 인덱싱하는 데 사용되는 식이 포함된 <see cref="T:System.Collections.Generic.IEnumerable`1" />입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>배열에 액세스할 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="array">인덱싱할 배열을 나타내는 식입니다.</param>
      <param name="indexes">배열을 인덱싱하는 데 사용되는 식이 포함된 배열입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>차수가 1보다 큰 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다.</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우
또는
<paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우
또는
<paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>차수가 1인 배열에 대한 배열 인덱스 연산자 적용을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="index">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 또는 <paramref name="index" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우
또는
<paramref name="array" />.Type이 나타내는 배열 형식의 차수가 1이 아닌 경우
또는
<paramref name="index" />.Type이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>다차원 배열에 대한 배열 인덱스 연산자를 적용하는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="array">배열 인덱스 작업에 대한 <see cref="T:System.Linq.Expressions.Expression" /> 인스턴스 - 인덱스의 배열입니다.</param>
      <param name="indexes">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 또는 <paramref name="indexes" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우
또는
<paramref name="array" />.Type의 차수가 <paramref name="indexes" />의 요소 수와 일치하지 않는 경우
또는
<paramref name="indexes" />의 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 <see cref="T:System.Int32" /> 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>1차원 배열 길이를 가져오는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> 속성이 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />인 <paramref name="array" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type이 배열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>필드 또는 속성 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" />이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우
또는
<paramref name="member" />가 나타내는 속성에 <see langword="set" /> 접근자가 없는 경우
또는
<paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>속성 접근자 메서드를 사용한 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberAssignment" />를 만듭니다.</summary>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />으로 설정된 <paramref name="expression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 또는 <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우
또는
<paramref name="propertyAccessor" />에서 액세스되는 속성에 <see langword="set" /> 접근자가 없는 경우
또는
<paramref name="expression" />.Type을 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="variables">블록의 변수입니다.</param>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="variables">블록의 변수입니다.</param>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0">블록의 첫 번째 식입니다.</param>
      <param name="arg1">블록의 두 번째 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0">블록의 첫 번째 식입니다.</param>
      <param name="arg1">블록의 두 번째 식입니다.</param>
      <param name="arg2">블록의 세 번째 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0">블록의 첫 번째 식입니다.</param>
      <param name="arg1">블록의 두 번째 식입니다.</param>
      <param name="arg2">블록의 세 번째 식입니다.</param>
      <param name="arg3">블록의 네 번째 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5개 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="arg0">블록의 첫 번째 식입니다.</param>
      <param name="arg1">블록의 두 번째 식입니다.</param>
      <param name="arg2">블록의 세 번째 식입니다.</param>
      <param name="arg3">블록의 네 번째 식입니다.</param>
      <param name="arg4">블록의 다섯 번째 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>지정된 식을 포함하고 변수가 없는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="variables">블록의 변수입니다.</param>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>지정된 변수와 식이 포함된 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="variables">블록의 변수입니다.</param>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>지정된 식을 포함하고 변수가 없으며 특정 결과 형식이 있는 <see cref="T:System.Linq.Expressions.BlockExpression" />을 만듭니다.</summary>
      <param name="type">블록의 결과 형식입니다.</param>
      <param name="expressions">블록의 식입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.BlockExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Break이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정된 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>인수를 받지 않는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 <see langword="null" />입니다.
또는
<paramref name="instance" /> 가 <see langword="null" /> 이고 <paramref name="method" /> 가 인스턴스 메서드를 나타내는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />입니다. <see langword="null" />(Visual Basic에서는 <see langword="static" />) 메서드의 경우 <see langword="Shared" />을 전달합니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 <see langword="null" />인 경우
또는
<paramref name="instance" /> 가 <see langword="null" /> 이고 <paramref name="method" /> 가 인스턴스 메서드를 나타내는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우
또는
<paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우
또는
<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다. static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3개 인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance">인스턴스 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />입니다. static(Visual Basic에서는 Shared) 메서드의 경우 null을 전달합니다.</param>
      <param name="method">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>인수를 받는 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance">인스턴스 메서드 호출에 대한 인스턴스를 지정하는 <see cref="T:System.Linq.Expressions.Expression" />이며 <see langword="null" /> (Visual Basic의 경우 <see langword="static" />) 메서드에 대해 <see langword="Shared" />를 전달합니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 <see langword="null" />인 경우
또는
<paramref name="instance" />가 <see langword="null" />이고 <paramref name="method" />가 인스턴스 메서드를 나타내는 경우
또는
<paramref name="arguments" />가 <see langword="null" />이 아니고 하나 이상의 해당 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type을 <paramref name="method" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우
또는
<paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우
또는
<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>적합한 팩터리 메서드를 호출하여 메서드를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="instance">특정 메서드에 대해 <see cref="T:System.Linq.Expressions.Expression" /> 속성 값을 검색할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="methodName">메서드의 이름입니다.</param>
      <param name="typeArguments">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다. methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</param>
      <param name="arguments">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고, <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />이고, <paramref name="instance" />가 지정된 인스턴스 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />로 설정되고 <see cref="T:System.Reflection.MethodInfo" />가 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 없는 경우
또는
<paramref name="methodName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="instance" />와 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>static(Visual Basic에서는 Shared) 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method">대상 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="arguments">호출 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />의 컬렉션입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>1개 인수를 받는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>2개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>3개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>4개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg3">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>5개 인수를 받는 static 메서드에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />을 만듭니다.</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arg0">첫 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg1">두 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg2">세 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg3">네 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arg4">다섯 번째 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 null입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>인수가 있는 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드에 대한 호출을 나타내는 <see langword="Shared" />을 만듭니다.</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 및 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 요소 수가 <paramref name="method" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우
또는
<paramref name="arguments" />의 요소 중 하나 이상을 <paramref name="method" />로 나타내는 메서드의 해당 매개 변수에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.MethodCallExpression" />(Visual Basic에서는 <see langword="static" />) 메서드를 호출하는 동작을 나타내는 <see langword="Shared" />을 만듭니다.</summary>
      <param name="type">지정된 <see langword="static" />(Visual Basic에서는 <see langword="Shared" />) 메서드를 포함하는 형식입니다.</param>
      <param name="methodName">메서드의 이름입니다.</param>
      <param name="typeArguments">제네릭 메서드의 형식 매개 변수를 지정하는 <see cref="T:System.Type" /> 개체 배열입니다. methodName에서 제네릭이 아닌 메서드를 지정하는 경우 이 인수는 null입니다.</param>
      <param name="arguments">메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> 속성이 지정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />(Visual Basic에서는 <see cref="T:System.Reflection.MethodInfo" />) 메서드를 나타내는 <see langword="static" />로 설정되고 <see langword="Shared" /> 속성이 지정된 인수로 설정된 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="methodName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 없는 경우
또는
<paramref name="methodName" /> 또는 해당 기본 형식에 이름이 <paramref name="typeArguments" />이고 형식 매개 변수가 <paramref name="arguments" />와 일치하고 매개 변수 형식이 <paramref name="type" />와 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>노드를 더 단순한 노드로 줄일 수 있는지 나타냅니다. true를 반환하면 Reduce()를 호출하여 축소된 형식을 만들 수 있습니다.</summary>
      <returns>노드를 줄일 수 있는지 여부를 <see langword="true" /> 합니다. 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>처리기 본문에 사용하기 위해 catch된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</summary>
      <param name="variable">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터와 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조가 포함된 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</summary>
      <param name="variable">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <param name="type">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 필터는 있지만 catch된 <see cref="T:System.Exception" /> 개체에 대한 참조는 없는 catch 문을 나타내는 <see cref="T:System.Exception" />을 만듭니다.</summary>
      <param name="type">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</summary>
      <param name="document">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</param>
      <returns>시퀀스 위치를 지우기 위한 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>결합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>지정된 변환 함수를 사용한 병합 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type과 <paramref name="right" />.Type을 상호 변환할 수 없는 경우
또는
<paramref name="conversion" />이 <see langword="null" />이 아니고 <paramref name="conversion" />.Type이 정확히 하나의 인수를 받지 않는 대리자 형식인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 참조 형식 또는 nullable 값 형식을 나타내지 않는 경우
또는
<paramref name="left" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 대리자 형식 <paramref name="conversion" />.Type의 매개 변수 형식에 할당할 수 없는 경우
또는
<paramref name="right" />의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 대리자 형식 <paramref name="conversion" />.Type의 반환 형식과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" />, <paramref name="ifTrue" /> 또는 <paramref name="ifFalse" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type이 <see cref="T:System.Boolean" />이 아닌 경우
또는
<paramref name="ifTrue" />.Type이 <paramref name="ifFalse" />.Type과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>조건문을 나타내는 <see cref="T:System.Linq.Expressions.ConditionalExpression" />을 만듭니다.</summary>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />을 만듭니다.</summary>
      <param name="value">
        <see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</summary>
      <param name="value">
        <see cref="T:System.Object" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> 및 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 <see langword="null" />이 아니고 <paramref name="type" />의 동적 형식에서 <paramref name="value" />을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>형식 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>구현 메서드가 지정된 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우
또는
<paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우
또는
<paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우
또는
<paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>구현 메서드가 지정된 대상 형식에서 오버플로가 발생할 때 예외가 throw되는 변환 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type과 <paramref name="type" /> 사이에 변환 연산자가 정의되지 않은 경우
또는
<paramref name="expression" />.Type을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우
또는
<paramref name="method" />가 나타내는 메서드의 반환 형식을 <paramref name="type" />에 할당할 수 없는 경우
또는
<paramref name="expression" />.Type 또는 <paramref name="type" />이 nullable 값 형식이고 nullable이 아닌 해당 값 형식이 <paramref name="method" />가 나타내는 메서드의 인수 형식 또는 반환 형식과 각각 일치하지 않는 경우</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="method" /> 설명과 일치하는 메서드가 둘 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>지정된 범위를 사용하여 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 만듭니다.</summary>
      <param name="document">소스 파일을 나타내는 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />입니다.</param>
      <param name="startLine">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 줄입니다. 0보다 커야 합니다.</param>
      <param name="startColumn">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 시작 열입니다. 0보다 커야 합니다.</param>
      <param name="endLine">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 줄입니다. 시작 줄보다 크거나 같아야 합니다.</param>
      <param name="endColumn">이 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 끝 열입니다. 끝 줄이 시작 줄과 같을 경우 끝 열은 시작 열보다 크거나 같아야 합니다. 어떤 경우에도 0보다 커야 합니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1씩 감소하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">감소시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>감소되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />을 만듭니다.</summary>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 지정된 형식으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나누기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>산술 나누기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 가 <see langword="null" /> 이고 나누기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 나누기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3">동적 작업의 네 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="returnType">동적 식의 결과 형식입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 <see cref="T:System.Linq.Expressions.ElementInit" />을 두 번째 인수로 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" />를 만듭니다.</summary>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" />를 나타내는 메서드 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우
또는
<paramref name="addMethod" />를 나타내는 메서드가 인스턴스 메서드가 아닌 경우
또는
<paramref name="arguments" />의 요소 수가 <paramref name="addMethod" />로 나타내는 메서드의 매개 변수 수와 같지 않은 경우
또는
<paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>지정된 값 배열을 두 번째 인수로 사용하여 <see cref="T:System.Linq.Expressions.ElementInit" />를 만듭니다.</summary>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 및 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 또는 <paramref name="arguments" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">addMethod가 나타내는 메서드의 이름이 "Add"(대/소문자 구분 안 함)가 아닌 경우
또는
addMethod가 나타내는 메서드가 인스턴스 메서드가 아닌 경우
또는
인수에 들어 있는 요소 수가 addMethod가 나타내는 메서드의 매개 변수 개수와 다른 경우
또는
<paramref name="arguments" />의 하나 이상의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="addMethod" />가 나타내는 메서드의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>
        <see cref="T:System.Void" /> 형식을 가진 빈 식을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />로 설정된 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 같음 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 <see langword="XOR" /> 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 <see langword="XOR" /> 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <see langword="XOR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>사용자 정의 형식에 대해 <c>op_ExclusiveOr</c>을 사용하여 비트 XOR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다. <see langword="static" />(Visual Basic에서는 <see langword="Shared" />)의 경우 <paramref name="expression" />이 <see langword="null" />입니다.</param>
      <param name="field">
        <see cref="T:System.Reflection.FieldInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" />가 <see langword="null" />인 경우
또는
<paramref name="field" />가 나타내는 필드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type을 <paramref name="field" />가 나타내는 필드의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>필드 이름을 통한 필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 필드가 포함된 <paramref name="fieldName" />입니다. 이 값은 정적 필드의 경우 null일 수 있습니다.</param>
      <param name="fieldName">액세스할 필드의 이름입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 필드를 나타내는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="fieldName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="fieldName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 필드가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>필드 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">필드의 포함 개체입니다. 이 값은 정적 필드의 경우 null일 수 있습니다.</param>
      <param name="type">필드를 포함하는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="fieldName">액세스할 필드입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>특정 형식 인수가 있는 제네릭 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="T:System.Type" /> 개체를 만듭니다.</summary>
      <param name="typeArgs">
        <see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 16개의 <see langword="System.Action" /> 개체가 들어있는 배열입니다.</param>
      <returns>지정된 형식 인수가 있는 <c>System.Action</c> 대리자의 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" />에 17개 이상의 요소가 포함된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>특정 형식 인수가 있는 제네릭 <c>System.Func</c> 또는 <c>System.Action</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 가져옵니다.</summary>
      <param name="typeArgs">대리자의 형식 인수입니다.</param>
      <returns>대리자 형식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>특정 형식 인수가 있는 제네릭 <c>System.Func</c> 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다. 마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</summary>
      <param name="typeArgs">
        <see cref="T:System.Type" /> 대리자 형식의 형식 인수를 지정하는 1개에서 17개의 <see langword="System.Func" /> 개체가 포함된 배열입니다.</param>
      <returns>지정된 형식 인수가 있는 <c>System.Func</c> 대리자의 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" />에 1개 미만 또는 17개보다 많은 요소가 들어 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>"go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 "go to" 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Goto이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 지정된 값으로 설정되며, <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 큼" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 큼" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 크거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 크거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 가 <see langword="null" /> 이고 “크거나 같음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="if" />을 만듭니다.</summary>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다. <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 속성은 기본 식으로 설정되고 이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 및 <see langword="if" /> 문을 사용하여 조건부 블록을 나타내는 <see langword="else" />을 만듭니다.</summary>
      <param name="test">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />입니다.</param>
      <param name="ifTrue">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />입니다.</param>
      <param name="ifFalse">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 및 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />입니다. 이 메서드에서 반환되는 결과 <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 형식은 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>값이 1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1씩 증가하는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">증가시킬 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>증가되는 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</summary>
      <param name="expression">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체가 포함된 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우
또는
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>인수 식 목록에 대리자 또는 람다 식을 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />을 만듭니다.</summary>
      <param name="expression">적용되는 대리자 또는 람다 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments">대리자 또는 람다 식이 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <returns>지정된 대리자 또는 람다 식을 제공된 인수에 적용하는 <see cref="T:System.Linq.Expressions.InvocationExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type이 대리자 형식이나 <see cref="T:System.Linq.Expressions.Expression`1" />을 나타내지 않는 경우
또는
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="expression" />이 나타내는 대리자의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" />에 들어 있는 요소 수가 <paramref name="expression" />이 나타내는 대리자의 매개 변수 목록과 다른 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>식이 false로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식이 false로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>식이 true로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식이 true로 계산되는지 여부를 반환합니다.</summary>
      <param name="expression">계산할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>이름이 없는 void 형식의 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <returns>새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>기본값이 없는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</summary>
      <param name="target">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</param>
      <returns>기본값이 없는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>지정된 기본값을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelExpression" />을 만듭니다.</summary>
      <param name="target">이 <see cref="T:System.Linq.Expressions.LabelTarget" />과 연결될 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</param>
      <param name="defaultValue">일반 제어 흐름을 통해 레이블에 접근하는 경우 이 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</param>
      <returns>지정된 기본값이 있는 <see cref="T:System.Linq.Expressions.LabelExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>void 형식과 지정된 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <param name="name">레이블의 이름입니다.</param>
      <returns>새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>지정된 유형을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <param name="type">레이블로 이동할 때 전달되는 값의 형식입니다.</param>
      <returns>새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>지정된 형식과 이름을 사용하여 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 만듭니다.</summary>
      <param name="type">레이블로 이동할 때 전달되는 값의 형식입니다.</param>
      <param name="name">레이블의 이름입니다.</param>
      <returns>새 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 식 본문에서 대리자 형식을 생성하고 마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>먼저 식 본문에서 대리자 형식을 생성하고 마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 배열을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 식 본문에서 대리자 형식을 생성하고 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>먼저 식 본문에서 대리자 형식을 생성하고 매개 변수 식의 배열을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" />가 <see langword="null" />인 경우
또는
<paramref name="parameters" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" />에 17개 이상의 요소가 포함된 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 식 본문에서 대리자 형식을 생성하고 람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>먼저 식 본문에서 대리자 형식을 생성하고 람다 이름과 매개 변수 식의 열거 가능한 컬렉션을 생성하여 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다. 컴파일 시간에 대리자 형식을 알 수 없을 때 사용할 수 있습니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우
또는
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우
또는
<paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우
또는
<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우
또는
<paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType">람다에 대한 대리자 시그니처를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성이 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />이고 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성이 지정된 값으로 설정된 람다 식을 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 또는 <paramref name="body" />가 <see langword="null" />인 경우
또는
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" />이 대리자 형식을 나타내지 않는 경우
또는
<paramref name="body" />.Type이 나타내는 형식을 <paramref name="delegateType" />이 나타내는 대리자 형식의 반환 형식에 할당할 수 없는 경우
또는
<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="delegateType" />이 나타내는 대리자 형식의 매개 변수 목록과 다른 경우
또는
<paramref name="parameters" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="delegateType" />이 나타내는 대리자 형식의 해당 매개 변수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>람다 이름과 매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.LambdaExpression" />을 만듭니다.</summary>
      <param name="delegateType">람다에 대한 대리자 시그니처를 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name">람다의 이름입니다. 디버그 정보를 내보내는 데 사용됩니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성이 Lambda이고 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>마무리 호출 최적화 적용 여부를 나타내는 매개 변수와 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체가 포함된 배열입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" />가 <see langword="null" />인 경우
또는
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" />가 대리자 형식이 아닌 경우
또는
<paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우
또는
<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우
또는
<paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>매개 변수 식의 배열을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 개체의 배열입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" />가 <see langword="null" />인 경우
또는
<paramref name="parameters" />에서 하나 이상의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" />가 대리자 형식이 아닌 경우
또는
<paramref name="body" />.Type이 나타내는 형식을 <paramref name="TDelegate" />의 반환 형식에 할당할 수 없는 경우
또는
<paramref name="parameters" />에 들어 있는 요소 수가 <paramref name="TDelegate" />의 매개 변수 목록과 다른 경우
또는
<paramref name="parameters" />의 해당 매개 변수 형식에서 <paramref name="TDelegate" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>람다 이름, 마무리 호출 최적화 적용 여부를 나타내는 매개 변수 및 매개 변수 식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name">람다의 이름입니다. 디버깅 정보를 생성하는 데 사용됩니다.</param>
      <param name="tailCall">만들어진 식을 컴파일할 때 마무리 호출 최적화가 적용될지를 나타내는 <see cref="T:System.Boolean" />입니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>람다 이름과 매개 변수식의 열거 가능한 컬렉션을 사용하여 컴파일 시간에 대리자 형식이 알려지는 <see cref="T:System.Linq.Expressions.Expression`1" />을 만듭니다.</summary>
      <param name="body">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />입니다.</param>
      <param name="name">람다의 이름입니다. 디버깅 정보를 생성하는 데 사용됩니다.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</param>
      <typeparam name="TDelegate">대리자 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> 및 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 왼쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 왼쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 왼쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 작음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 "보다 작음" 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>"보다 작거나 같음" 숫자 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 "보다 작거나 같음" 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우
또는
<paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>멤버가 필드 또는 속성인 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 필드 또는 속성을 나타내는 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" />가 <see langword="null" />입니다.
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우
또는
<paramref name="member" />가 나타내는 필드 또는 속성의 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 또는 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" />을 만듭니다.</summary>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" />가 <see langword="null" />입니다.
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우
또는
<paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>지정된 속성 접근자 메서드에 따라 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 개체를 만듭니다.</summary>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />로 설정되고 <paramref name="propertyAccessor" />가 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />의 요소로 채워진 <paramref name="initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" />가 <see langword="null" />입니다.
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우
또는
<paramref name="propertyAccessor" />가 나타내는 메서드가 액세스하는 속성의 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />에서 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.ElementInit" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우
또는
<paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우
또는
<paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우
또는
"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>지정된 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 개체를 사용하여 컬렉션을 초기화하는 <see cref="T:System.Linq.Expressions.ElementInit" />을 만듭니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.ElementInit" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 및 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>이름이 "Add"인 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newExpression" />.Type 또는 해당 기본 형식에 선언된 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드가 없는 경우
또는
<paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드가 정확히 하나의 인수만 사용하지 않는 경우
또는
<paramref name="initializers" />의 첫 번째 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성으로 표시되는 형식을 <paramref name="newExpression" />.Type 또는 해당 기본 형식의 add 메서드에 대한 인수 형식에 할당할 수 없는 경우
또는
"Add"(대/소문자 구분 안 함)라는 둘 이상의 인수 호환 메서드가 <paramref name="newExpression" />.Type 및/또는 해당 기본 형식에 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="addMethod">컬렉션에 요소를 추가하는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우
또는
<paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우
또는
<paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>지정된 메서드를 사용하여 컬렉션에 요소를 추가하는 <see cref="T:System.Linq.Expressions.ListInitExpression" />을 만듭니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</param>
      <param name="addMethod">하나의 인수를 받으며 컬렉션에 요소를 추가하는 인스턴스 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 하나 이상의 요소가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type이 <see cref="T:System.Collections.IEnumerable" />을 구현하지 않는 경우
또는
<paramref name="addMethod" />가 <see langword="null" />이 아니고 정확히 하나의 인수를 받는 "Add"(대/소문자 구분 안 함)라는 인스턴스 메서드를 나타내지 않는 경우
또는
<paramref name="addMethod" />가 <see langword="null" />이 아니고 <paramref name="initializers" />에 있는 요소 중 하나 이상의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="addMethod" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" />가 <see langword="null" />이고 <paramref name="newExpression" />.Type 또는 해당 기본 형식에 하나의 형식 호환 인수를 받는 "Add"라는 인스턴스 메서드가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <param name="body">루프의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>지정된 본문과 break 대상을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <param name="body">루프의 본문입니다.</param>
      <param name="break">루프 본문에서 사용하는 break 대상입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>지정된 본문을 사용하여 <see cref="T:System.Linq.Expressions.LoopExpression" />을 만듭니다.</summary>
      <param name="body">루프의 본문입니다.</param>
      <param name="break">루프 본문에서 사용하는 break 대상입니다.</param>
      <param name="continue">루프 본문에서 사용하는 continue 대상입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.LoopExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>지정된 왼쪽 및 오른쪽 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="binaryType">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>지정된 왼쪽 피연산자, 오른쪽 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="binaryType">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>지정된 왼쪽 피연산자, 오른쪽 피연산자, 구현 메서드 및 형식 변환 함수를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="binaryType">이진 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="left">왼쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="right">오른쪽 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">구현 메서드를 지정하는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="conversion">형식 변환 함수를 나타내는 <see cref="T:System.Linq.Expressions.LambdaExpression" />입니다. 이 매개 변수는 <paramref name="binaryType" />이 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 또는 복합 할당으로 설정되어 있는 경우에만 사용됩니다.</param>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.BinaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" />이 이항 식 노드에 해당하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>지정된 요소를 사용하여 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />을 만듭니다.</summary>
      <param name="type">이 <see cref="P:System.Linq.Expressions.Expression.Type" />이 처리할 <see cref="T:System.Exception" />의 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</param>
      <param name="variable">이 처리기가 catch한 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 개체에 대한 참조를 나타내는 <see cref="T:System.Exception" />입니다.</param>
      <param name="body">catch 문의 본문입니다.</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 필터의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.CatchBlock" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 1개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 2개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 3개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 및 4개 인수에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arg0">동적 작업의 첫 번째 인수입니다.</param>
      <param name="arg1">동적 작업의 두 번째 인수입니다.</param>
      <param name="arg2">동적 작업의 세 번째 인수입니다.</param>
      <param name="arg3">동적 작업의 네 번째 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>제공된 <see cref="T:System.Linq.Expressions.DynamicExpression" />에 의해 바인딩된 동적 작업을 나타내는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />을 만듭니다.</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" />에서 사용되는 대리자의 형식입니다.</param>
      <param name="binder">동적 작업의 런타임 바인더입니다.</param>
      <param name="arguments">동적 작업의 인수입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" /> 및 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />가 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 <see cref="T:System.Linq.Expressions.GotoExpression" />의 이동을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />을 만듭니다. 이동 시 레이블에 전달되는 값도 지정할 수 있습니다.</summary>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" />의 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />이고, <paramref name="kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>개체의 인덱싱된 속성에 액세스하는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance">속성이 속해 있는 개체입니다. 속성이 <see langword="static" />(Visual Basic에서는 <see langword="shared" />)인 경우 null입니다.</param>
      <param name="indexer">인덱싱할 속성을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용할 인수가 포함된 <c>IEnumerable&lt;Expression&gt;</c>(Visual Basic에서는 <c>IEnumerable (Of Expression)</c>)입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>필드 또는 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">멤버가 속하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다. 이 값은 정적 멤버의 경우 null일 수 있습니다.</param>
      <param name="member">액세스할 필드 또는 속성을 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</param>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>지정된 요소를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="type">try 식의 결과 형식입니다. null일 경우 본문 및 모든 처리기에 같은 형식이 있어야 합니다.</param>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="finally">finally 블록의 본문입니다. try 블록에 연결된 finally 블록이 없을 경우 null을 전달합니다.</param>
      <param name="fault">fault 블록의 본문입니다. try 블록에 연결된 fault 블록이 없을 경우 null을 전달합니다.</param>
      <param name="handlers">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" />의 컬렉션입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 피연산자를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="unaryType">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="operand">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</param>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>지정된 피연산자 및 구현 메서드를 사용하고 적합한 팩터리 메서드를 호출하여 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="unaryType">단항 연산의 형식을 지정하는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</param>
      <param name="operand">피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">변환할 형식을 지정하는 <see cref="T:System.Type" />입니다. 해당 사항이 없는 경우 <see langword="null" />을 전달합니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>적절한 팩터리 메서드를 호출한 결과인 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" />이 단항 식 노드에 해당하지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우
또는
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>필드 또는 속성의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />입니다.</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 및 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 필드나 속성을 나타내지 않는 경우
또는
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="member" />가 나타내는 필드 또는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우
또는
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>속성 접근자 메서드를 사용한 멤버의 재귀적 멤버 초기화를 나타내는 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />을 만듭니다.</summary>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />이고 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> 속성이 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정되고 <paramref name="propertyAccessor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" />가 속성 접근자 메서드를 나타내지 않는 경우
또는
<paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="propertyAccessor" />가 나타내는 메서드로 액세스되는 속성의 형식에 속하는 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>새 개체를 만들고 개체의 속성을 초기화하는 식을 나타냅니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.MemberBinding" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />을 만듭니다.</summary>
      <param name="newExpression">
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />입니다.</param>
      <param name="bindings">
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> 및 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 또는 <paramref name="bindings" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" />에 있는 요소의 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 속성이 <paramref name="newExpression" />.Type이 나타내는 형식의 멤버를 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 나머지 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>산술 나머지 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 나머지 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>나머지 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하는 곱하기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 곱하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 곱하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우
또는
<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 부정 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 빼기 연산자가 정의되지 않은 경우
또는
<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>인수를 받지 않는 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructor" />가 나타내는 생성자에 매개 변수가 하나 이상 있는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />가 <see langword="null" />입니다.
또는
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우
또는
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다. 생성자에서 초기화되는 필드에 액세스하는 멤버가 지정됩니다.</summary>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</param>
      <param name="members">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Reflection.MemberInfo" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />가 <see langword="null" />인 경우
또는
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.
또는
<paramref name="members" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우
또는
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우
또는
<paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우
또는
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다. 생성자에서 초기화되는 필드에 액세스하는 멤버가 배열로 지정됩니다.</summary>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</param>
      <param name="members">
        <see cref="T:System.Reflection.MemberInfo" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" />, <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Members" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />가 <see langword="null" />인 경우
또는
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.
또는
<paramref name="members" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 매개 변수에 들어 있는 요소 수가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 다른 경우
또는
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우
또는
<paramref name="members" /> 매개 변수의 요소 수가 <paramref name="arguments" />와 다른 경우
또는
<paramref name="arguments" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="members" />의 해당 속성이 나타내는 멤버 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>지정된 인수를 사용하여 지정된 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="constructor">
        <see cref="T:System.Reflection.ConstructorInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />입니다.</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 및 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" />가 <see langword="null" />입니다.
또는
<paramref name="arguments" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" />의 길이가 <paramref name="constructor" />가 나타내는 생성자의 매개 변수 수와 일치하는 경우
또는
<paramref name="arguments" />의 요소에 대한 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성을 <paramref name="constructor" />가 나타내는 생성자의 해당 매개 변수 형식에 적용할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>지정된 형식의 매개 변수가 없는 생성자를 호출하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />을 만듭니다.</summary>
      <param name="type">인수를 받지 않는 생성자가 있는 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.New" /> 속성이 지정된 형식에 대한 매개 변수 없이 생성자를 나타내는 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />로 설정된 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 나타내는 형식에 매개 변수가 없는 생성자가 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="bounds">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우
또는
<paramref name="bounds" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>지정된 차수의 배열을 만드는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="bounds">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="bounds" />가 <see langword="null" />인 경우
또는
<paramref name="bounds" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 정수 계열 형식을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 컬렉션을 채우는 데 사용할 <see cref="T:System.Linq.Expressions.Expression" /> 개체가 포함된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" />이 나타내는 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>1차원 배열을 만들고 요소 목록으로 초기화하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.NewArrayExpression" />을 만듭니다.</summary>
      <param name="type">배열의 요소 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="initializers">
        <see cref="T:System.Linq.Expressions.Expression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="initializers" />가 <see langword="null" />인 경우
또는
<paramref name="initializers" />의 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" />에 있는 요소의 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 나타내는 형식을 <paramref name="type" /> 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 보수 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다. 구현 메서드를 지정할 수 있습니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 Not 연산자가 정의되지 않은 경우
또는
<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="liftToNull">
        <see langword="true" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="true" />이고, <see langword="false" />를 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />로 설정하려면 <see langword="false" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 다름 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>1의 보수를 나타내는 식을 반환합니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>1의 보수를 나타내는 식을 반환합니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 연산을 나타내는 <see langword="OR" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 OR 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 비트 <see langword="OR" /> 연산자가 정의되지 않은 경우
또는
<paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>첫 번째 피연산자가 <see cref="T:System.Linq.Expressions.BinaryExpression" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="OR" /> 연산을 나타내는 <see langword="false" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 비트 <see langword="OR" /> 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우
또는
<paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type과 <paramref name="right" />.Type이 동일한 부울 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
      <returns>지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
      <param name="name">디버깅 또는 인쇄용으로만 사용되는 매개 변수 또는 변수의 이름입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> 및 <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>원래 식에서 뒤이어 1씩 감소하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>원래 식에서 뒤이어 1씩 증가하는 식의 할당을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 지수 연산자가 정의되지 않은 경우
또는
<paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>숫자의 제곱을 구하는 동작을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 지수 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우
또는
<paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및/또는 <paramref name="right" />.Type이 <see cref="T:System.Double" />이 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>식을 거듭제곱하고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식을 1씩 감소시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>식을 1씩 증가시키고 결과를 다시 식에 할당하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">작업을 적용할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="method">구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>결과 식을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>속성 접근자 메서드를 통한 속성 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다. 이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="propertyAccessor">속성 접근자 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />로 액세스되는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyAccessor" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" />가 <see langword="null" />인 경우
또는
<paramref name="propertyAccessor" />가 나타내는 메서드가 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type을 <paramref name="propertyAccessor" />로 나타내는 메서드의 선언 형식에 할당할 수 없는 경우
또는
<paramref name="propertyAccessor" />가 나타내는 메서드가 속성 접근자 메서드가 아닌 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />입니다. 이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="property">
        <see cref="T:System.Reflection.PropertyInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 및 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" />가 <see langword="null" />인 경우
또는
<paramref name="property" />가 나타내는 속성이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니고 <paramref name="expression" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type을 <paramref name="property" />가 나타내는 속성의 선언 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance">속성이 속해 있는 개체입니다. 이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="indexer">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance">속성이 속해 있는 개체입니다. 이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="indexer">인덱싱할 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성이 포함된 <paramref name="propertyName" />입니다. 정적 속성의 경우 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="propertyName">액세스할 속성의 이름입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성을 나타내는 <see cref="T:System.Reflection.PropertyInfo" />로 설정된 <paramref name="propertyName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="propertyName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성이 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>인덱싱된 속성에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.IndexExpression" />을 만듭니다.</summary>
      <param name="instance">속성이 속해 있는 개체입니다. 이 속성이 정적/공유 속성이면 null이어야 합니다.</param>
      <param name="propertyName">인덱서의 이름입니다.</param>
      <param name="arguments">속성을 인덱싱하는 데 사용되는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 배열입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.IndexExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>속성에 액세스하는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">속성의 포함 개체입니다. 이 값은 정적 속성의 경우 null일 수 있습니다.</param>
      <param name="type">속성이 포함된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <param name="propertyName">액세스할 속성입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.MemberExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>속성 또는 필드에 대한 액세스를 나타내는 <see cref="T:System.Linq.Expressions.MemberExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />에 이름이 <see cref="P:System.Linq.Expressions.Expression.Type" />인 속성 또는 필드가 포함된 <paramref name="propertyOrFieldName" />입니다. 이 값은 정적 멤버의 경우 null일 수 있습니다.</param>
      <param name="propertyOrFieldName">액세스할 속성 또는 필드의 이름입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />으로 설정되고 <paramref name="expression" /> 속성이 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />이 가리키는 속성 또는 필드를 나타내는 <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.FieldInfo" />로 설정된 <paramref name="propertyOrFieldName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="propertyOrFieldName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyOrFieldName" />.Type 또는 해당 기본 형식에 이름이 <paramref name="expression" />인 속성 또는 필드가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 형식의 상수 값이 있는 식을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>이 노드를 더 단순한 식으로 줄입니다. CanReduce가 true를 반환하면 유효한 식을 반환합니다. 이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</summary>
      <returns>축소된 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>이 노드를 더 단순한 식으로 줄입니다. CanReduce가 true를 반환하면 유효한 식을 반환합니다. 이 메서드는 자체를 줄여야 하는 다른 노드를 반환할 수 있습니다.</summary>
      <returns>축소된 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>알려진 노드 형식(확장 노드가 아님)으로 식을 줄이거나 이미 알려진 형식인 경우 식을 반환합니다.</summary>
      <returns>축소된 식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>참조 같음 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>참조 다름 비교를 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <returns>예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>지정된 형식을 사용하여 예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="type">식의 새 <see cref="T:System.Type" />입니다.</param>
      <returns>예외를 다시 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="target" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, 이동 시 대상 레이블에 <paramref name="target" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다. 이동 시 레이블에 전달되는 값을 지정할 수 있습니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="value">이동 시 연결된 레이블에 전달될 값입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Continue이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 <paramref name="type" />가 전달되는 <paramref name="value" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>지정된 형식을 사용하여 return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />을 만듭니다.</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" />이 이동할 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />가 Return이고, <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 속성이 <see cref="P:System.Linq.Expressions.GotoExpression.Target" />으로 설정되며, <paramref name="target" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.Type" />으로 설정되고, 이동 시 대상 레이블에 null 값이 전달되는 <paramref name="type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 오른쪽 시프트 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 <see langword="Shared" />)이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 오른쪽 시프트 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>비트 오른쪽 시프트 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</summary>
      <param name="variables">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 컬렉션입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 인스턴스를 만듭니다.</summary>
      <param name="variables">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 컬렉션을 채우는 데 사용할 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 개체의 배열입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 가 <see langword="null" /> 이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" /> (Visual Basic의<see langword="Shared" /> )이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하지 않는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>오버플로를 검사하는 빼기 할당 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" />.Type 및 <paramref name="right" />.Type에 빼기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>오버플로를 검사하는 산술 빼기 연산을 나타내는 <see cref="T:System.Linq.Expressions.BinaryExpression" />을 만듭니다.</summary>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />입니다.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 및 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 또는 <paramref name="right" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 가 <see langword="null" /> 이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" /> (Visual Basic의<see langword="Shared" /> )이 아니거나, 정확히 두 개의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 빼기 연산자가 <paramref name="left" />.Type 및 <paramref name="right" />.Type에 대해 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 없는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="type">switch의 결과 형식입니다.</param>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>기본 사례가 있는 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 문을 나타내는 <see langword="switch" />을 만듭니다.</summary>
      <param name="type">switch의 결과 형식입니다.</param>
      <param name="switchValue">각 사례에 대해 테스트할 값입니다.</param>
      <param name="defaultBody">
        <paramref name="switchValue" />로 일치하는 사례가 없는 경우 switch의 결과입니다.</param>
      <param name="comparison">사용할 같음 비교 메서드입니다.</param>
      <param name="cases">이 switch 식의 사례 집합입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 개체를 만듭니다.</summary>
      <param name="body">case의 본문입니다.</param>
      <param name="testValues">case의 테스트 값입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" />에 사용할 <see cref="T:System.Linq.Expressions.SwitchExpression" />를 만듭니다.</summary>
      <param name="body">case의 본문입니다.</param>
      <param name="testValues">case의 테스트 값입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.SwitchCase" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <param name="language">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <param name="language">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</param>
      <param name="languageVendor">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />의 인스턴스를 만듭니다.</summary>
      <param name="fileName">
        <see cref="T:System.String" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />입니다.</param>
      <param name="language">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />입니다.</param>
      <param name="languageVendor">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />입니다.</param>
      <param name="documentType">
        <see cref="T:System.Guid" />에 설정할 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 및 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>예외의 throw를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <returns>예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>지정된 형식을 사용하여 예외를 throw하는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">식의 새 <see cref="T:System.Type" />입니다.</param>
      <returns>예외를 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />의 텍스트 표현입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>원하는 수의 catch 문을 사용하고 fault 또는 finally 블록은 사용하지 않고 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="handlers">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>원하는 수의 catch 문과 finally 블록 하나를 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="finally">finally 블록의 본문입니다.</param>
      <param name="handlers">try 블록과 연결되는 catch 문을 나타내는 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식을 0개 이상 포함하는 배열입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>catch 문은 사용하지 않고 fault 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="fault">fault 블록의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>catch 문은 사용하지 않고 finally 블록을 하나 사용하여 try 블록을 나타내는 <see cref="T:System.Linq.Expressions.TryExpression" />을 만듭니다.</summary>
      <param name="body">try 블록의 본문입니다.</param>
      <param name="finally">finally 블록의 본문입니다.</param>
      <returns>만든 <see cref="T:System.Linq.Expressions.TryExpression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>특정 형식 인수가 있는 제네릭 System.Action 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다.</summary>
      <param name="typeArgs">System.Action 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</param>
      <param name="actionType">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Action 대리자 형식이 포함됩니다. <paramref name="typeArgs" />와 일치하는 제네릭 System.Action 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</param>
      <returns>제네릭 System.Action 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>특정 형식 인수가 있는 제네릭 System.Func 대리자 형식을 나타내는 <see cref="P:System.Linq.Expressions.Expression.Type" /> 개체를 만듭니다. 마지막 형식 인수는 생성된 대리자의 반환 형식을 지정합니다.</summary>
      <param name="typeArgs">System.Func 대리자 형식의 형식 인수를 지정하는 Type 개체의 배열입니다.</param>
      <param name="funcType">이 메서드가 반환될 경우 특정 형식 인수가 있는 제네릭 System.Func 대리자 형식이 포함됩니다. <paramref name="typeArgs" />와 일치하는 제네릭 System.Func 대리자가 없을 경우 null이 포함됩니다. 이 매개 변수는 초기화되지 않고 전달됩니다.</param>
      <returns>제네릭 System.Func 대리자 형식이 특정 <paramref name="typeArgs" />에 대해 만들어졌을 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>변환에 실패하면 <see cref="T:System.Linq.Expressions.UnaryExpression" />이 제공되는 boxing 변환이나 명시적 참조를 나타내는 <see langword="null" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.Expression.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>런타임 형식 ID를 비교하는 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 및 <see cref="T:System.Linq.Expressions.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />입니다.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 및 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>단항 더하기 연산을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />입니다.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 속성에 설정할 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 속성이 <see cref="P:System.Linq.Expressions.Expression.NodeType" />이고 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> 및 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성이 지정된 값으로 설정된 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" />가 <see langword="null" />이 아니고 이것이 나타내는 메서드가 <see langword="void" />를 반환하거나, <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />)이 아니거나, 정확하게 하나의 인수를 사용하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" />가 <see langword="null" />이고 <paramref name="expression" />.Type에 단항 더하기 연산자가 정의되지 않은 경우
또는
<paramref name="expression" />.Type 또는 이 형식이 nullable 값 형식인 경우 nullable이 아닌 해당 형식을 <paramref name="method" />가 나타내는 메서드의 인수 형식에 할당할 수 없는 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>명시적 unboxing을 나타내는 <see cref="T:System.Linq.Expressions.UnaryExpression" />을 만듭니다.</summary>
      <param name="expression">unboxing할 <see cref="T:System.Linq.Expressions.Expression" />입니다.</param>
      <param name="type">식의 새 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
      <returns>지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>식 트리에서 매개 변수나 변수를 식별하는 데 사용할 수 있는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드를 만듭니다.</summary>
      <param name="type">매개 변수 또는 변수의 형식입니다.</param>
      <param name="name">매개 변수나 변수의 이름입니다. 이 이름은 디버깅 또는 인쇄용으로만 사용됩니다.</param>
      <returns>지정된 이름과 형식의 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>노드를 줄인 다음 줄인 식에서 방문자 대리자를 호출합니다. 이 메서드는 노드를 줄일 수 없으면 예외를 throw합니다.</summary>
      <param name="visitor">
        <see cref="T:System.Func`2" />의 인스턴스입니다.</param>
      <returns>방문하는 식 또는 트리에서 해당 식을 바꿀 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>강력한 형식의 람다 식을 식 트리 형태의 데이터 구조로 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" />에서 나타내는 대리자의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>식 트리로 기술된 람다 식을 실행 코드로 컴파일하고 람다 식을 나타내는 대리자를 생성합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />로 기술된 컴파일된 람다 식을 나타내는 <paramref name="TDelegate" /> 형식의 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary>식 트리로 설명되는 람다 식을 해석되거나 컴파일된 코드로 컴파일하고 람다 식을 나타내는 대리자를 생성합니다.</summary>
      <param name="preferInterpretation">식이 해석된 형식으로 컴파일되어야 함을 나타내려면 <see langword="true" />이고(사용 가능 시), 그러지 않은 경우 <see langword="false" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />에서 설명하는 컴파일된 람다 식을 나타내는 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>람다 식을 나타내는 대리자를 생성합니다.</summary>
      <param name="debugInfoGenerator">컴파일러에서 시퀀스 위치를 표시하고 지역 변수에 주석을 추가하는 데 사용하는 디버깅 정보 생성기입니다.</param>
      <returns>컴파일된 람다 버전을 포함하는 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 속성입니다.</param>
      <param name="parameters">결과의 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>식 트리에 있는 노드의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>
        <c>a + b</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 더하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>
        <c>(a += b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 더하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>
        <c>(a += b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 더하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>
        <c>(a + b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 더하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>C#의 <c>(a &amp; b)</c> 및 Visual Basic의 <c>(a And b)</c>와 같은 비트 또는 논리 <see langword="AND" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>첫 번째 피연산자가 <see langword="AND" />로 계산되는 경우에만 두 번째 피연산자를 계산하는 조건부 <see langword="true" /> 연산입니다. C#의 <c>(a &amp;&amp; b)</c> 및 Visual Basic의 <c>(a AndAlso b)</c>에 해당합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>C#의 <c>(a &amp;= b)</c>와 같은 비트 또는 논리 <see langword="AND" /> 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>C#의 <c>array[index]</c> 또는 Visual Basic의 <c>array(index)</c>와 같은 1차원 배열의 인덱싱 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>
        <c>array.Length</c>와 같은 1차원 배열의 길이를 가져오는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>
        <c>(a = b)</c>와 같은 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>식 블록입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>
        <c>obj.sampleMethod()</c> 에서와 같은 메서드 호출입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>C#의 <c>(a ?? b)</c> 또는 Visual Basic의 <c>If(a, b)</c>와 같은 null 결합 연산을 나타내는 노드입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>C#의 <c>a &gt; b ? a : b</c> 또는 Visual Basic의 <c>If(a &gt; b, a, b)</c>와 같은 조건부 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>상수 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>C#의 <c>(SampleType) obj</c> 또는 Visual Basic의 <c>CType(obj, SampleType)</c>과 같은 캐스트 또는 변환 연산입니다. 숫자 변환의 경우 변환된 값이 대상 형식에 비해 너무 크면 예외가 throw되지 않습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>C#의 <c>(SampleType) obj</c> 또는 Visual Basic의 <c>CType(obj, SampleType)</c>과 같은 캐스트 또는 변환 연산입니다. 숫자 변환의 경우 변환된 값이 대상 형식에 맞지 않으면 예외가 throw됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>디버깅 정보.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>C# 및 Visual Basic의 <c>(a - 1)</c>과 같은 단항 감소 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>기본값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>
        <c>(a / b)</c>와 같이 숫자 피연산자에 대한 나누기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>
        <c>(a /= b)</c>와 같이 숫자 피연산자에 대한 나누기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>동적 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>C#의 <c>(a == b)</c> 또는 Visual Basic의 <c>(a = b)</c>와 같은 같음 비교를 나타내는 노드입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>C#의 <c>(a ^ b)</c> 및 Visual Basic의 <c>(a Xor b)</c>와 같은 비트 또는 논리 <see langword="XOR" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>C#의 <c>(a ^= b)</c>와 같은 비트 또는 논리 <see langword="XOR" /> 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>확장 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>C#의 <c>goto 레이블</c> 또는 Visual Basic의 <c>GoTo 레이블</c>과 같은 "이동" 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>
        <c>(a &gt; b)</c>와 같은 "보다 큼" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>
        <c>(a &gt;= b)</c>와 같은 "보다 크거나 같음" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>C# 및 Visual Basic의 <c>(a + 1)</c>과 같은 단항 증가 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>인덱스 연산이거나 인수를 받는 속성에 액세스하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>
        <c>sampleDelegate.Invoke()</c>와 같은 대리자 또는 람다 식을 호출하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>
        <see langword="false" /> 조건 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>
        <see langword="true" /> 조건 값입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>레이블입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>C#의 <c>a =&gt; a + a</c> 또는 Visual Basic의 <c>Function(a) a + a</c>와 같은 람다 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>
        <c>(a &lt;&lt; b)</c>와 같은 비트 왼쪽 시프트 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>
        <c>(a &lt;&lt;= b)</c>와 같은 비트 왼쪽 시프트 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>
        <c>(a &lt; b)</c>와 같은 "보다 큼" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>
        <c>(a &lt;= b)</c>와 같은 "보다 작거나 같음" 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>C#의 <c>new List&lt;SampleType&gt;(){ a, b, c }</c> 또는 Visual Basic의 <c>Dim sampleList = { a, b, c }</c>와 같이 새 <see cref="T:System.Collections.IEnumerable" /> 개체를 만들고 요소 목록에서 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>
        <c>for</c> 또는 <c>while</c>과 같은 루프입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>
        <c>obj.SampleProperty</c>와 같이 필드 또는 속성에서 읽는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>C#의 <c>new Point { X = 1, Y = 2 }</c> 또는 Visual Basic의 <c>New Point With {.X = 1, .Y = 2}</c>와 같이 새 개체를 만들고 하나 이상의 멤버를 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>C#의 <c>(a % b)</c> 또는 Visual Basic의 <c>(a Mod b)</c>와 같은 산술 나머지 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>C#의 <c>(a %= b)</c>와 같은 산술 나머지 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>
        <c>(a * b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 곱하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>
        <c>(a *= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 곱하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>
        <c>(a *= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 곱하기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>
        <c>(a * b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 곱하기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>
        <c>(-a)</c>와 같은 산술 부정 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>
        <c>(-a)</c>와 같이 오버플로를 검사하는 산술 부정 연산입니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>
        <c>new SampleType()</c>과 같이 생성자를 호출하여 새 개체를 만드는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>C#의 <c>new SampleType[dim1, dim2]</c> 또는 Visual Basic의 <c>New SampleType(dim1, dim2)</c>과 같이 각 차원의 경계가 지정된 새 배열을 만드는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>C#의 <c>new SampleType[]{a, b, c}</c> 또는 Visual Basic의 <c>New SampleType(){a, b, c}</c>와 같이 새 1차원 배열을 만들고 요소 목록을 사용하여 초기화하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>비트 보수 또는 논리 부정 연산입니다. C#에서는 정수 형식의 <c>(~a)</c> 및 부울 값의 <c>(!a)</c>와 동일하고, Visual Basic에서는 <c>(Not a)</c>와 동일합니다. 현재 위치에서 <c>a</c> 개체가 수정되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>C#의 <c>(a != b)</c> 또는 Visual Basic의 <c>(a &lt;&gt; b)</c>와 같은 다름 비교입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>C#의 <c>(~a)</c>와 같은 1의 보수 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>C#의 <c>(a | b)</c> 및 Visual Basic의 <c>(a Or b)</c>와 같은 비트 또는 논리 <see langword="OR" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>C#의 <c>(a |= b)</c>와 같은 비트 또는 논리 <see langword="OR" /> 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>C#의 <c>(a || b)</c> 또는 Visual Basic의 <c>(a OrElse b)</c>와 같은 단락(short circuit) 조건부 <see langword="OR" /> 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>식의 컨텍스트에 정의된 매개 변수 또는 변수에 대한 참조입니다. 자세한 내용은 <see cref="T:System.Linq.Expressions.ParameterExpression" />을 참조하세요.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>
        <c>(a--)</c>와 같은 단항 후위 감소입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>
        <c>(a++)</c>와 같은 단항 후위 증가입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Visual Basic의 <c>(a ^ b)</c>와 같은 숫자 거듭제곱의 수학 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Visual Basic의 <c>(a ^= b)</c>와 같은 숫자 거듭제곱 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>
        <c>(--a)</c>와 같은 단항 전위 감소입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>
        <c>(++a)</c>와 같은 단항 전위 증가입니다. 현재 위치에서 <c>a</c> 개체가 수정되어야 합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression" /> 형식의 상수 값이 있는 식입니다. <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 노드에는 표현된 식의 컨텍스트에 정의된 매개 변수에 대한 참조가 포함될 수 있습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>
        <c>(a &gt;&gt; b)</c>와 같은 비트 오른쪽 시프트 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>
        <c>(a &gt;&gt;= b)</c>와 같은 비트 오른쪽 시프트 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>런타임 변수 목록입니다. 자세한 내용은 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />을 참조하세요.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>
        <c>(a - b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 빼기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>
        <c>(a -= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하지 않는 빼기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>
        <c>(a -= b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 빼기 복합 할당 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>
        <c>(a - b)</c>와 같이 숫자 피연산자에 대해 오버플로를 검사하는 산술 빼기 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>C#의 <see langword="switch" /> 또는 Visual Basic의 <see langword="Select Case" /> 같은 switch 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>
        <c>throw new Exception()</c>과 같이 예외를 throw하는 연산입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>
        <see langword="try-catch" /> 식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>C#의 <c>(obj as SampleType)</c> 또는 Visual Basic의 <c>TryCast(obj, SampleType)</c>과 같이 변환에 실패하면 <see langword="null" />이 제공되는 boxing 변환이나 명시적 참조입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>정확한 형식 테스트입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>C#의 <c>obj is SampleType</c> 및 Visual Basic의 <c>TypeOf obj is SampleType</c>과 같은 테스트 형식입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>
        <c>(+a)</c>와 같은 단항 더하기 연산입니다. 미리 정의된 단항 더하기 연산의 결과는 피연산자의 값과 일치하지만, 구현을 사용자 정의하여 예외적인 결과를 생성할 수도 있습니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>MSIL 명령 <see langword="unbox" /> 및 <see langword="unbox.any" /> 같은 unbox 값 형식 연산입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>식 트리에 대한 방문자 또는 재작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Linq.Expressions.ExpressionVisitor" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>이 클래스의 보다 특수한 visit 메서드 중 하나에 식의 목록을 디스패치합니다.</summary>
      <param name="nodes">열어 볼 식입니다.</param>
      <returns>요소 중 하나가 수정되었으면 수정된 식 목록이고, 그렇지 않으면 원래 식 목록을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>이 클래스의 보다 특수한 visit 메서드 중 하나에 식을 디스패치합니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>지정된 요소 방문자를 사용하여 컬렉션의 모든 노드를 열어 봅니다.</summary>
      <param name="nodes">열어 볼 노드입니다.</param>
      <param name="elementVisitor">단일 요소를 열어 보는 대리자이며 선택적으로 해당 요소를 새 요소로 바꿉니다.</param>
      <typeparam name="T">노드의 형식입니다.</typeparam>
      <returns>요소가 하나라도 수정되었으면 수정된 노드 목록이고, 그렇지 않으면 원래 노드 목록을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>식을 열어 보고 결과를 원래 식 형식으로 다시 캐스팅합니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <param name="callerName">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</param>
      <typeparam name="T">식의 형식입니다.</typeparam>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드에 대한 방문 메서드가 다른 형식을 반환한 경우</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>컬렉션에서 모든 식을 열어 보고 결과를 원래 식 형식으로 다시 캐스팅합니다.</summary>
      <param name="nodes">열어 볼 식입니다.</param>
      <param name="callerName">호출 메서드의 이름으로, 더 나은 오류 메시지를 보고하는 데 사용됩니다.</param>
      <typeparam name="T">식의 형식입니다.</typeparam>
      <returns>식이 수정되었으면 수정된 식 컬렉션이고, 그렇지 않으면 원래 식 컬렉션을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">다른 형식을 반환한 식 중 하나에 대한 방문 메서드입니다.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.BlockExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>
        <see cref="T:System.Linq.Expressions.CatchBlock" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ConstantExpression" />을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" />을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DefaultExpression" />을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>
        <see cref="T:System.Linq.Expressions.ElementInit" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>확장 식의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.IndexExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.InvocationExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>
        <see cref="T:System.Linq.Expressions.LabelTarget" />을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>
        <see cref="T:System.Linq.Expressions.Expression`1" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <typeparam name="T">대리자의 형식입니다.</typeparam>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.LoopExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberAssignment" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.ParameterExpression" />을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchCase" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />의 자식 항목을 열어 봅니다.</summary>
      <param name="node">열어 볼 식입니다.</param>
      <returns>식 또는 하위 식이 수정되었으면 수정된 식이고, 그렇지 않으면 원래 식을 반환합니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>무조건 점프를 나타냅니다. 여기에는 return 문, break 및 continue 문, 기타 점프가 포함됩니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>"go to" 식의 종류입니다. 정보 제공 목적으로만 사용됩니다.</summary>
      <returns>"go to" 식의 종류를 나타내는 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>이 노드가 점프하는 대상 레이블입니다.</summary>
      <returns>이 노드의 대상 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="target">결과의 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 속성입니다.</param>
      <param name="value">결과의 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>대상에 전달된 값 또는 대상이 System.Void 형식인 경우 null입니다.</summary>
      <returns>대상에 전달된 값을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체 또는 null입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>이 <see cref="T:System.Linq.Expressions.GotoExpression" />이 나타내는 점프 종류를 지정합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>break 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>continue 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>일정 위치로의 점프를 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>return 문을 나타내는 <see cref="T:System.Linq.Expressions.GotoExpression" />입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>여러 트리 노드(DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression 및 IndexExpression)의 인수에 액세스하기 위한 내부 인터페이스를 제공합니다.  이 API는 내부 전용입니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>인수 수를 식 트리 노드에 반환합니다. 이 API는 내부 전용입니다.</summary>
      <returns>식 트리 노드에 <see cref="T:System.Int32" />로 반환되는 인수 수입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>
        <paramref name="index" />에서 인수를 반환하며, <paramref name="index" />가 범위를 벗어나는 경우 throw합니다. 이 API는 내부 전용입니다.</summary>
      <param name="index">인수의 인덱스입니다.</param>
      <returns>인덱스의 인수입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>CallSite 및 Rewriting 기능뿐만 아니라 DynamicExpression 트리 노드의 인수에 액세스하기 위한 내부 인터페이스를 제공합니다.  이 API를 사용하면 안됩니다.  DLL 리팩터링으로 인해 공용으로만 사용되며 내부 성능 최적화용으로만 존재합니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>선택적으로 호출 사이트를 만들고 DynamicExpression의 다형 형식 인라인 캐시용 호출 사이트를 반환합니다.  이 형식은 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns>DynamicExpression의 다형 형식 인라인 캐시용 호출 사이트입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>동적 식의 다형 형식 인라인 캐시에 사용되는 규칙 형식인 CallSite에서 사용하는 대리자 형식을 가져옵니다.</summary>
      <returns>CallSite에서 사용 하는 대리자 형식입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>제공된 값으로 동적 식의 인수를 바꾸어 이 노드를 다시 씁니다.  <paramref name="args" />의 숫자가 현재 식의 숫자와 일치해야 합니다.  이 형식은 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.  이 도우미 메서드를 사용하면 호출 사이트에서 사용되는 DynamicExpression에서 파생된 특정 구현 클래스와 독립적으로 노드를 다시 작성할 수 있습니다.</summary>
      <param name="args">이 노드를 바꾸는 데 사용되는 인수입니다.</param>
      <returns>다시 작성된 노드를 변경하지 않은 경우 동일한 노드를 반환합니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>속성 또는 배열의 인덱싱을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>속성 또는 배열을 인덱싱하는 데 사용할 인수를 가져옵니다.</summary>
      <returns>속성 또는 배열을 인덱싱하는 데 사용할 인수를 포함하는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>식이 인덱싱된 속성을 나타내는 경우 속성의 <see cref="T:System.Reflection.PropertyInfo" />를 가져오고, 그러지 않으면 null을 반환합니다.</summary>
      <returns>식이 인덱싱된 속성을 나타내는 경우 속성의 <see cref="T:System.Reflection.PropertyInfo" />이고, 그러지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>인덱스에 대한 개체입니다.</summary>
      <returns>인덱싱할 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns>
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index">인수의 인덱스입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="object">결과의 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 속성입니다.</param>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>인수 식 목록에 대리자 또는 람다 식을 적용하는 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>대리자 또는 람다 식이 적용되는 인수를 가져옵니다.</summary>
      <returns>대리자가 적용되는 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>적용할 대리자 또는 람다 식을 가져옵니다.</summary>
      <returns>적용할 대리자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns>식 트리 노드에 <see cref="T:System.Int32" />로 반환되는 인수 수입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index">인수의 인덱스입니다.</param>
      <returns>인덱스에서 인수를 반환하며, 인덱스가 <see cref="T:System.Linq.Expressions.Expression" />으로 범위를 벗어나는 경우 발생합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>이 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 속성입니다.</param>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>모든 <see cref="T:System.Linq.Expressions.Expression" /> 컨텍스트에 배치할 수 있는 레이블을 나타냅니다. 레이블로 점프하면 해당 <see cref="T:System.Linq.Expressions.GotoExpression" />이 제공하는 값을 가져옵니다. 그렇지 않으면 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />의 값을 받습니다. <see cref="T:System.Type" />이 System.Void와 같으면 아무 값도 제공되지 않습니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>레이블로 점프하지 않고 일반 제어 흐름을 통해 레이블에 접근하는 경우 <see cref="T:System.Linq.Expressions.LabelExpression" />의 값입니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" />의 값을 나타내는 Expression 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>이 레이블이 연결된 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</summary>
      <returns>이 레이블이 연결된 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="target">결과의 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 속성입니다.</param>
      <param name="defaultValue">결과의 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" />의 대상을 나타내는 데 사용됩니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>레이블의 이름을 가져옵니다.</summary>
      <returns>레이블의 이름입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Object" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>레이블로 점프할 때 전달되는 값의 형식 또는 값이 전달되지 않아야 하는 경우 <see cref="T:System.Void" />입니다.</summary>
      <returns>레이블로 점프할 때 전달되는 값의 형식을 나타내는 <see cref="T:System.Type" /> 개체 또는 값이 전달되지 않아야 하는 경우 <see cref="T:System.Void" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>람다 식을 설명합니다. .NET 메서드 본문과 유사한 코드 블록을 캡처합니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>람다 식의 본문을 가져옵니다.</summary>
      <returns>람다 식의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>람다 식을 나타내는 대리자를 생성합니다.</summary>
      <returns>람다 식의 컴파일된 버전을 포함하는 <see cref="T:System.Delegate" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary>람다 식을 나타내는 해석되거나 컴파일된 대리자를 생성합니다.</summary>
      <param name="preferInterpretation">식이 해석된 형식으로 컴파일되어야 함을 나타내려면 <see langword="true" />이고(사용 가능 시), 그러지 않은 경우 <see langword="false" />입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" /> 개체에서 설명하는 컴파일된 람다 식을 나타내는 대리자입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>람다 식을 나타내는 대리자를 생성합니다.</summary>
      <param name="debugInfoGenerator">컴파일러에서 시퀀스 위치를 표시하고 지역 변수에 주석을 추가하는 데 사용하는 디버깅 정보 생성기입니다.</param>
      <returns>컴파일된 람다 버전을 포함하는 대리자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>람다 식의 이름을 가져옵니다.</summary>
      <returns>람다 식의 이름입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>람다 식의 매개 변수를 가져옵니다.</summary>
      <returns>람다 식의 매개 변수를 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.ParameterExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>람다 식의 반환 형식을 가져옵니다.</summary>
      <returns>람다 식의 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>마무리 호출 최적화를 사용하여 람다 식을 컴파일할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />마무리 호출 최적화를 사용 하 여 람다 식을 컴파일하는 경우 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>컬렉션 이니셜라이저가 있는 생성자 호출을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>컬렉션을 초기화하는 데 사용되는 요소 이니셜라이저를 가져옵니다.</summary>
      <returns>컬렉션을 초기화하는 데 사용되는 요소를 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.ElementInit" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>컬렉션 형식의 생성자에 대한 호출이 들어 있는 식을 가져옵니다.</summary>
      <returns>컬렉션 형식의 생성자에 대한 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>이항 식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns>축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="newExpression">결과의 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 속성입니다.</param>
      <param name="initializers">결과의 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>무한 루프를 나타냅니다. "break"를 사용하여 종료할 수 있습니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>루프의 본문인 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>루프의 본문인 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>루프 본문에서 break 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</summary>
      <returns>루프 본문에서 break 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>루프 본문에서 continue 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />을 가져옵니다.</summary>
      <returns>루프 본문에서 continue 문 대상으로 사용하는 <see cref="T:System.Linq.Expressions.LabelTarget" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="breakLabel">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 속성입니다.</param>
      <param name="continueLabel">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 속성입니다.</param>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>필드 또는 개체의 속성에 대한 할당 작업을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>필드 또는 속성에 할당할 식을 가져옵니다.</summary>
      <returns>필드 또는 속성에 할당할 값을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>새로 만든 개체의 멤버를 초기화하는 데 사용되는 바인딩을 나타내는 클래스가 파생되는 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">표현된 바인딩의 형식을 식별하는 <see cref="T:System.Linq.Expressions.MemberBindingType" />입니다.</param>
      <param name="member">초기화할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />를 만듭니다.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>표현된 바인딩의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBindingType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>초기화할 필드 또는 속성을 가져옵니다.</summary>
      <returns>초기화할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />를 만듭니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 텍스트 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" />의 텍스트 표현입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 개체에 사용된 바인딩 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>멤버를 식의 값으로 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>요소 목록을 사용하여 <see cref="T:System.Collections.IList" /> 또는 <see cref="T:System.Collections.Generic.ICollection`1" /> 형식의 멤버를 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>멤버의 멤버를 재귀적으로 초기화하는 동작을 나타내는 바인딩입니다.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>필드 또는 속성에 대한 액세스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>필드 또는 속성을 포함하는 개체를 가져옵니다.</summary>
      <returns>필드 또는 속성을 포함하는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>액세스할 필드 또는 속성을 가져옵니다.</summary>
      <returns>액세스할 필드 또는 속성을 나타내는 <see cref="T:System.Reflection.MemberInfo" />를 만듭니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>이 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>생성자를 호출하고 새 개체의 멤버를 하나 이상 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>새로 만든 개체의 멤버를 초기화하는 방법을 설명하는 바인딩을 가져옵니다.</summary>
      <returns>멤버를 초기화하는 방법을 설명하는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.MemberBinding" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>생성자 호출을 나타내는 식을 가져옵니다.</summary>
      <returns>생성자 호출을 나타내는 <see cref="T:System.Linq.Expressions.NewExpression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />을 더 단순한 식으로 줄입니다.</summary>
      <returns>축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="newExpression">결과의 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 속성입니다.</param>
      <param name="bindings">결과의 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>새로 만든 개체의 컬렉션 멤버 요소에 대한 초기화를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>새로 만든 개체의 컬렉션 멤버 요소를 초기화하기 위한 요소 이니셜라이저를 가져옵니다.</summary>
      <returns>컬렉션 멤버를 초기화하는 데 사용할 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.ElementInit" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="initializers">결과의 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>새로 만든 개체의 멤버의 멤버를 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>멤버의 멤버를 초기화하는 방법을 설명하는 바인딩을 가져옵니다.</summary>
      <returns>멤버의 멤버를 초기화하는 방법을 설명하는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.MemberBinding" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="bindings">결과의 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>정적 메서드 또는 인스턴스 메서드에 대한 호출을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>호출된 메서드의 인수를 나타내는 식 컬렉션을 가져옵니다.</summary>
      <returns>호출된 메서드에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>호출되는 메서드에 대한 <see cref="T:System.Reflection.MethodInfo" />를 가져옵니다.</summary>
      <returns>호출된 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>인스턴스 메서드 호출의 인스턴스 또는 정적 메서드 호출의 null을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>메서드를 받는 개체를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>인수 수를 식 트리 노드에 반환합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <returns>식 트리 노드에 <see cref="T:System.Int32" />대 한 인수 개수입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.  이 멤버를 사용하지 않아야 합니다.  어셈블리 리팩터링으로 인해 공용으로만 사용되며 성능 최적화를 위해 내부적으로 사용됩니다.</summary>
      <param name="index">인수의 인덱스입니다.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="object">결과의 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 속성입니다.</param>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>새 배열을 만들고 선택적으로 새 배열의 요소를 초기화하는 동작을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>
        <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성의 값이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />이면 배열의 경계를 가져오고, <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 속성의 값이 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />이면 새 배열의 요소를 초기화할 값을 가져옵니다.</summary>
      <returns>배열의 경계 또는 초기화 값을 나타내는 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 개체의 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expressions">결과의 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>생성자 호출을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>생성자에 대한 인수를 가져옵니다.</summary>
      <returns>생성자에 대한 인수를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>호출된 생성자를 가져옵니다.</summary>
      <returns>호출된 생성자를 나타내는 <see cref="T:System.Reflection.ConstructorInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>생성자 인수를 사용하여 초기화된 필드의 값을 검색할 수 있는 멤버를 가져옵니다.</summary>
      <returns>생성자 인수를 사용하여 초기화된 필드의 값을 검색할 수 있는 멤버를 나타내는 <see cref="T:System.Reflection.MemberInfo" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>식 트리 노드에 대한 인수 개수를 가져옵니다.</summary>
      <returns>식 트리 노드에 대한 인수 개수입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>인덱스에서 인수를 반환하며 인덱스가 범위를 벗어나는 경우 throw합니다.</summary>
      <param name="index">인수의 인덱스입니다.</param>
      <returns>인덱스에서 인수를 반환하며, 인덱스가 범위를 벗어나는 경우 발생합니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.NewExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="arguments">결과의 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>명명된 매개 변수 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>이 노드 형식에 대한 특정 Visit 메서드로 디스패치합니다. 예를 들어 <see cref="T:System.Linq.Expressions.MethodCallExpression" />은 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />을 호출합니다.</summary>
      <param name="visitor">이 노드를 열어 볼 방문자입니다.</param>
      <returns>이 노드를 열어 본 결과입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>이 <c>ParameterExpression</c>이 <see langword="ByRef" /> 매개 변수로 처리됨을 나타냅니다.</summary>
      <returns>
        <see langword="true" />이 <c>system.linq.expressions.parameterexpression&gt;</c> 가 <see langword="ByRef" /> 매개 변수 이면이 고, <see langword="false" />그렇지 않으면입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>매개 변수 또는 변수의 이름을 가져옵니다.</summary>
      <returns>매개 변수의 이름이 들어 있는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>변수에 대한 런타임 읽기/쓰기 권한을 제공하는 식입니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="variables">결과의 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>런타임 액세스를 제공할 변수 또는 매개 변수입니다.</summary>
      <returns>런타임 액세스를 제공할 매개 변수가 들어 있는 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>
        <see cref="T:System.Linq.Expressions.SwitchExpression" />의 case 하나를 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>이 case의 본문을 가져옵니다.</summary>
      <returns>case 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>이 case의 값을 가져옵니다. 이 case는 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />가 이러한 값과 일치할 때 실행되도록 선택됩니다.</summary>
      <returns>이 case 블록에 대한 값의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Object" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="testValues">결과의 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 속성입니다.</param>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>제어를 <see cref="T:System.Linq.Expressions.SwitchCase" />로 전달하여 다중 선택을 처리하는 제어 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>switch에 대한 <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>같음 비교 메서드를 가져옵니다(있는 경우).</summary>
      <returns>같음 비교 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>switch에 대한 테스트를 가져옵니다.</summary>
      <returns>switch에 대한 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>switch에 대한 테스트를 가져옵니다.</summary>
      <returns>switch에 대한 테스트를 나타내는 <see cref="T:System.Linq.Expressions.Expression" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="switchValue">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 속성입니다.</param>
      <param name="cases">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 속성입니다.</param>
      <param name="defaultBody">결과의 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>소스 파일에 대한 디버깅 기호 정보를 내보내는 데 필요한 정보, 특히 파일 이름과 고유한 언어 식별자를 저장합니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>문서 형식의 고유 식별자를 반환합니다(있는 경우). 기본값으로 텍스트 파일의 GUID로 설정됩니다.</summary>
      <returns>문서 형식의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>소스 파일 이름입니다.</summary>
      <returns>소스 파일 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>언어의 고유 식별자를 반환합니다(있는 경우).</summary>
      <returns>언어의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>언어 공급업체의 고유 식별자를 반환합니다(있는 경우).</summary>
      <returns>언어 공급업체의 고유 식별자입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>try/catch/finally/fault 블록을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>try 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>try 블록의 본문을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>fault 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>fault 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>finally 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />을 가져옵니다.</summary>
      <returns>finally 블록을 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>try 블록에 연결된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식의 컬렉션을 가져옵니다.</summary>
      <returns>try 블록에 연결된 <see cref="T:System.Linq.Expressions.CatchBlock" /> 식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.TryExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="body">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 속성입니다.</param>
      <param name="handlers">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 속성입니다.</param>
      <param name="finally">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 속성입니다.</param>
      <param name="fault">결과의 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>식과 형식 간의 연산을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>형식 테스트 연산의 식 피연산자를 가져옵니다.</summary>
      <returns>형식 테스트 연산의 식 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>이 식의 노드 형식을 반환합니다. 확장 노드는 이 메서드를 재정의할 때 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />을 반환해야 합니다.</summary>
      <returns>식의 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>이 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>형식 테스트 연산의 형식 피연산자를 가져옵니다.</summary>
      <returns>형식 테스트 연산의 형식 피연산자를 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="expression">결과의 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>단항 연산자가 있는 식을 나타냅니다.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>식 트리 노드를 줄일 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />노드를 줄일 수 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>식 트리 노드가 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>노드가 리프트된 호출을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>식 트리 노드가 해당 반환 형식이 nullable 형식으로 리프트된 연산자에 대한 리프트된 호출을 나타내는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>연산자의 반환 형식이 nullable 형식으로 리프트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>단항 연산에 대한 구현 메서드를 가져옵니다.</summary>
      <returns>구현 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />의 노드 유형을 반환합니다.</summary>
      <returns>이 식을 나타내는 <see cref="T:System.Linq.Expressions.ExpressionType" />입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>단항 연산의 피연산자를 가져옵니다.</summary>
      <returns>단항 연산의 피연산자를 나타내는 <see cref="T:System.Linq.Expressions.Expression" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>식 노드를 더 단순한 식으로 줄입니다.</summary>
      <returns>축소된 식입니다.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>이 <see cref="T:System.Linq.Expressions.Expression" />이 나타내는 식의 정적 형식을 가져옵니다.</summary>
      <returns>식의 정적 형식을 나타내는 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />입니다.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>제공된 자식을 사용하여 이 식과 같은 새 식을 만듭니다. 모든 자식이 같으면 이 식을 반환합니다.</summary>
      <param name="operand">결과의 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 속성입니다.</param>
      <returns>자식이 변경되지 않은 경우 이 식이고, 그러지 않은 경우 자식이 업데이트된 식입니다.</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>정렬 작업의 결과를 나타냅니다.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>정렬 작업의 결과를 나타냅니다.</summary>
      <typeparam name="T">데이터 소스 콘텐츠의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>데이터 형식이 지정되지 않은 특정 데이터 소스에 대한 쿼리를 실행하는 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>
        <see cref="T:System.Linq.IQueryable" />의 이 인스턴스에 연결된 식 트리가 실행될 때 반환되는 요소의 형식을 가져옵니다.</summary>
      <returns>이 개체에 연결된 식 트리가 실행될 때 반환되는 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>
        <see cref="T:System.Linq.IQueryable" />의 인스턴스에 연결된 식 트리를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />의 이 인스턴스에 연결된 <see cref="T:System.Linq.IQueryable" />입니다.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>이 데이터 소스에 연결된 쿼리 공급자를 가져옵니다.</summary>
      <returns>이 데이터 소스에 연결된 <see cref="T:System.Linq.IQueryProvider" />입니다.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>데이터 형식이 알려진 특정 데이터 소스에 대한 쿼리를 실행하는 기능을 제공합니다.</summary>
      <typeparam name="T">데이터 소스의 데이터 형식입니다.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> 개체가 설명하는 쿼리를 만들고 실행하는 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable" /> 개체를 생성합니다.</summary>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <returns>지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable" />입니다.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable`1" /> 개체를 생성합니다.</summary>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <typeparam name="TElement">반환되는 <see cref="T:System.Linq.IQueryable`1" />의 요소 형식입니다.</typeparam>
      <returns>지정된 식 트리로 나타낸 쿼리를 실행할 수 있는 <see cref="T:System.Linq.IQueryable`1" />입니다.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리가 나타내는 쿼리를 실행합니다.</summary>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <returns>지정된 쿼리를 실행한 결과 값입니다.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>지정된 식 트리가 나타내는 강력한 형식의 쿼리를 실행합니다.</summary>
      <param name="expression">LINQ 쿼리를 나타내는 식 트리입니다.</param>
      <typeparam name="TResult">쿼리를 실행한 결과 값의 형식입니다.</typeparam>
      <returns>지정된 쿼리를 실행한 결과 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>동적 호출 사이트의 기본 클래스입니다. 이 형식은 동적 사이트 대상에 대한 매개 변수 형식으로 사용됩니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>동적 사이트에서 동적 연산을 바인딩하는 클래스입니다.</summary>
      <returns>동적 연산을 바인딩하는 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>지정된 대리자 형식 및 바인더를 사용하여 호출 사이트를 만듭니다.</summary>
      <param name="delegateType">호출 사이트의 대리자 형식입니다.</param>
      <param name="binder">호출 사이트의 바인더입니다.</param>
      <returns>새 호출 사이트입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>동적 사이트 형식입니다.</summary>
      <typeparam name="T">대리자 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>이 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 바인더를 사용하여 초기화되는 동적 호출 사이트의 인스턴스를 만듭니다.</summary>
      <param name="binder">이 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 바인더입니다.</param>
      <returns>동적 호출 사이트의 새 인스턴스입니다.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>수준 0 캐시 - 사이트 기록을 기준으로 특수화된 대리자입니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>업데이트 대리자입니다. 동적 사이트에서 캐시가 누락되는 경우 호출됩니다.</summary>
      <returns>업데이트 대리자입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>동적 호출 사이트에서 동적 연산의 런타임 바인딩을 수행하는 클래스입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>인수 집합에서 동적 연산의 런타임 바인딩을 수행합니다.</summary>
      <param name="args">동적 연산에 대한 인수 배열입니다.</param>
      <param name="parameters">바인딩 프로세스에서 호출 사이트의 매개 변수를 나타내는 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 인스턴스의 배열입니다.</param>
      <param name="returnLabel">동적 바인딩의 결과를 반환하는 데 사용되는 LabelTarget입니다.</param>
      <returns>동적 연산의 인수에서 테스트를 수행하고 테스트에 성공하는 경우 동적 연산을 수행하는 식입니다. 이후의 동적 연산에서 테스트에 실패하는 경우 새 인수 형식에 대한 새 <see cref="T:System.Linq.Expressions.Expression" />을 생성하기 위해 Bind가 다시 호출됩니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>하위 수준 런타임 바인딩 지원을 제공합니다. 클래스를 사용하여 이를 재정의하고 규칙 구현을 위한 대리자를 직접 제공할 수 있습니다. 이를 통해 디스크에 규칙을 저장하거나 런타임에서 특수화된 규칙을 사용할 수 있게 하거나 다른 캐싱 정책을 제공할 수 있습니다.</summary>
      <param name="site">바인드가 수행되는 CallSite입니다.</param>
      <param name="args">바인더의 인수입니다.</param>
      <typeparam name="T">CallSite의 대상 형식입니다.</typeparam>
      <returns>CallSite 대상을 대체하는 새 대리자입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>알려진 대상의 캐시에 대상을 추가합니다. 캐시된 대상은 새 규칙을 생성하기 위해 BindDelegate를 호출하기 전에 검색됩니다.</summary>
      <param name="target">캐시에 추가될 대상 대리자입니다.</param>
      <typeparam name="T">추가되는 대상의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>바인딩이 업데이트되도록 하는 데 사용할 수 있는 레이블을 가져옵니다. 식의 바인딩이 더 이상 유효하지 않음을 나타냅니다. 일반적으로 동적 개체의 "버전"이 변경될 때 사용됩니다.</summary>
      <returns>바인딩 업데이트를 트리거하는 데 사용할 수 있는 레이블을 나타내는 <see cref="T:System.Linq.Expressions.LabelTarget" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>DLR CallSite에 대한 도우미 메서드가 들어 있는 클래스입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>
        <see cref="T:System.Reflection.MethodBase" />를 DLR에서 내부적으로 사용하고 언어 코드의 스택에 표시하면 안 되는지 확인합니다.</summary>
      <param name="mb">입력 <see cref="T:System.Reflection.MethodBase" />입니다.</param>
      <returns>입력 <see cref="T:System.Reflection.MethodBase" />를 DLR에서 내부적으로 사용하고 언어 코드의 스택에 표시하면 안 되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>식 트리에 있는 람다 식의 디버그 정보를 생성합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>PDB(프로그램 데이터베이스) 기호 생성기를 만듭니다.</summary>
      <returns>PDB 기호 생성기입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>MSIL(Microsoft Intermediate Language) 코드에 시퀀스 위치를 표시합니다.</summary>
      <param name="method">생성되는 람다 식입니다.</param>
      <param name="ilOffset">MSIL 코드 내에서 시퀀스 위치를 표시할 오프셋입니다.</param>
      <param name="sequencePoint">시퀀스 위치에 해당하는 디버그 정보입니다.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>멤버에서 <see cref="T:System.Object" />를 사용하면 동적으로 디스패치되는 형식으로 처리된다는 것을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="transformFlags">형식의 접두사 순회 생성 시 동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" /> 를 지정합니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>형식의 접두사 순회 생성 시 동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" /> 를 지정합니다.</summary>
      <returns>동적으로 디스패치되는 형식으로 처리될 <see cref="T:System.Object" />의 목록입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>런타임 변수의 값을 나타냅니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>런타임 변수의 수를 가져옵니다.</summary>
      <returns>런타임 변수의 수입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>지정된 인덱스 위치에서 런타임 변수의 값을 가져옵니다.</summary>
      <param name="index">값을 반환할 런타임 변수의 인덱스(0부터 시작)입니다.</param>
      <returns>런타임 변수의 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>읽기 전용 컬렉션의 작성기입니다.</summary>
      <typeparam name="T">컬렉션 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />를 생성합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션의 콘텐츠를 복사하여 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />를 생성합니다.</summary>
      <param name="collection">요소를 복사할 원본 컬렉션입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>지정된 초기 용량으로 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />를 생성합니다. 콘텐츠는 비어 있지만 작성기에서는 재할당을 요구하기 전에 지정된 수의 요소에 대한 공간을 예약해 둡니다.</summary>
      <param name="capacity">초기 용량입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 추가할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>이 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 용량을 가져오거나 설정합니다.</summary>
      <returns>이 ReadOnlyCollectionBuilder의 용량 <c>입니다.</c></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 항목을 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 찾을 개체입니다.</param>
      <returns>항목이 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>특정 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" /> 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />입니다.</param>
      <param name="arrayIndex">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소 수입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>작성기에서 맨 처음 발견되는 특정 값의 인덱스를 반환합니다.</summary>
      <param name="item">검색할 항목입니다.</param>
      <returns>맨 처음 나타나는 항목의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>항목을 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">항목을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에 삽입할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item">
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 제거할 개체입니다.</param>
      <returns>항목이 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 제거되면 <see langword="true" />이고, 그렇지 않으면 false입니다. 이 메서드는 원래 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 항목을 찾지 못한 경우에도 false를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>지정한 인덱스에서 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>전체 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</param>
      <returns>목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">
        <see cref="T:System.Collections.IList" />에 삽입할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소를 새 배열에 복사합니다.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />의 요소 복사본을 포함하는 배열입니다.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>가능하면 요소를 새 배열로 복사하지 않고 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />의 모든 요소를 포함하는 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />을 만듭니다. <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />을 만든 후에 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />을 다시 설정합니다.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>런타임 바인딩 규칙의 캐시를 나타냅니다.</summary>
      <typeparam name="T">대리자 형식입니다.</typeparam>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary>데이터 크기의 배수가 아닌 주소에서 데이터 단위를 읽거나 쓰면 이 예외가 throw됩니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>
        <see cref="T:System.DataMisalignedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.DataMisalignedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 <see cref="T:System.String" /> 개체입니다. <paramref name="message" /> 내용은 사용자의 이해를 돕기 위한 것입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 내부 예외를 사용하여 <see cref="T:System.DataMisalignedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 <see cref="T:System.String" /> 개체입니다. <paramref name="message" /> 내용은 사용자의 이해를 돕기 위한 것입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 <see cref="T:System.DataMisalignedException" />의 원인이 되는 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>DLL 가져오기에 지정된 DLL을 찾을 수 없을 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>기본 속성을 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.DllNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>관리 코드에서 관리되지 않는 메모리 블록에 임의로 액세스할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>지정된 버퍼, 오프셋 및 용량을 사용하여 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">접근자가 포함될 버퍼입니다.</param>
      <param name="offset">접근자를 시작할 바이트입니다.</param>
      <param name="capacity">할당할 메모리 크기(바이트)입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />와 <paramref name="capacity" />를 더한 값이 <paramref name="buffer" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="capacity" />가 0보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" />와 <paramref name="capacity" />을 더한 값이 주소 공간의 위쪽 끝에서 래핑됩니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>지정된 버퍼, 오프셋, 용량 및 액세스 권한을 사용하여 <see cref="T:System.IO.UnmanagedMemoryAccessor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">접근자가 포함될 버퍼입니다.</param>
      <param name="offset">접근자를 시작할 바이트입니다.</param>
      <param name="capacity">할당할 메모리 크기(바이트)입니다.</param>
      <param name="access">메모리에 허용되는 액세스 형식입니다. 기본값은 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />와 <paramref name="capacity" />를 더한 값이 <paramref name="buffer" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="capacity" />가 0보다 작습니다.
또는
<paramref name="access" />가 유효한 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 열거형 값이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" />와 <paramref name="capacity" />을 더한 값이 주소 공간의 위쪽 끝에서 래핑됩니다.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>접근자가 읽을 수 있는지 여부를 확인합니다.</summary>
      <returns>접근자가 읽을 수 있으면 <see langword="true" />이고, 읽을 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>접근자가 쓸 수 있는지 여부를 확인합니다.</summary>
      <returns>접근자가 쓸 수 있으면 <see langword="true" />이고, 쓸 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>접근자의 용량을 가져옵니다.</summary>
      <returns>접근자의 용량입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryAccessor" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryAccessor" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>접근자의 초기 값을 설정합니다.</summary>
      <param name="buffer">접근자가 포함될 버퍼입니다.</param>
      <param name="offset">접근자를 시작할 바이트입니다.</param>
      <param name="capacity">할당할 메모리 크기(바이트)입니다.</param>
      <param name="access">메모리에 허용되는 액세스 형식입니다. 기본값은 <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />와 <paramref name="capacity" />를 더한 값이 <paramref name="buffer" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="capacity" />가 0보다 작습니다.
또는
<paramref name="access" />가 유효한 <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 열거형 값이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" />와 <paramref name="capacity" />을 더한 값이 주소 공간의 위쪽 끝에서 래핑됩니다.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>프로세스에서 현재 접근자가 열려 있는지 여부를 확인합니다.</summary>
      <returns>접근자가 열려 있으면 <see langword="true" />이고,  닫혀 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>접근자의 <paramref name="T" /> 형식 구조체를 제공된 참조로 읽어옵니다.</summary>
      <param name="position">읽기를 시작할 접근자의 위치입니다.</param>
      <param name="structure">읽은 데이터가 포함될 구조체입니다.</param>
      <typeparam name="T">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 형식 <paramref name="T" />의 구조를 읽은 후 바이트 수가 충분하지 않습니다.
또는
<see langword="T" />는 하나 이상의 참조 형식을 포함하는 값 형식입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>접근자의 <paramref name="T" /> 형식 구조체를 <paramref name="T" /> 형식의 배열로 읽어옵니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="array">접근자에서 읽은 구조체가 포함될 배열입니다.</param>
      <param name="offset">복사한 첫 번째 구조체를 배치할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="count">접근자에서 읽을 <c>T</c> 형식의 구조체 수입니다.</param>
      <typeparam name="T">구조체의 형식입니다.</typeparam>
      <returns>
        <paramref name="array" />로 읽어온 구조체 수입니다. 이 값은 사용 가능한 구조체 수가 적은 경우 <paramref name="count" />보다 작을 수 있으며 접근자의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />은 구조(<paramref name="count" />에서 시작)의 <paramref name="position" />을 포함할 만큼 충분히 크지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>접근자에서 부울 값을 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>
        <see langword="true" /> 또는 <see langword="false" /></returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>접근자에서 바이트 값을 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>접근자에서 문자를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>접근자에서 10진수 값을 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.
또는
읽을 십진수가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>접근자에서 배정밀도 부동 소수점 값을 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>접근자에서 16비트 정수를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>접근자에서 32비트 정수를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>접근자에서 64비트 정수를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>접근자에서 부호 있는 8비트 정수를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>접근자에서 단정밀도 부동 소수점 값을 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>접근자에서 부호 없는 16비트 정수를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>접근자에서 부호 없는 32비트 정수를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>접근자에서 부호 없는 64비트 정수를 읽습니다.</summary>
      <param name="position">읽기를 시작할 접근자의 바이트 수입니다.</param>
      <returns>읽은 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />이 값을 읽은 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 읽기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>접근자에 부울 값을 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>접근자에 바이트 값을 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>접근자에 문자를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>접근자에 10진수 값을 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.
또는
십진수가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>접근자에 <see langword="Double" /> 값을 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>접근자에 16비트 정수를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>접근자에 32비트 정수를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>접근자에 64비트 정수를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">값을 쓸 수 있는 위치 다음에 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>접근자에 8비트 정수를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>접근자에 <see langword="Single" />을(를) 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>접근자에 부호 없는 16비트 정수를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>접근자에 부호 없는 32비트 정수를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>접근자에 부호 없는 64비트 정수를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 값을 쓴 다음 바이트가 부족합니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>접근자에 구조체를 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="structure">기록할 구조체입니다.</param>
      <typeparam name="T">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 형식 <paramref name="T" />의 구조를 쓴 후 상위 노드에 바이트 수가 충분하지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>
        <paramref name="T" /> 형식 배열의 구조체를 접근자에 씁니다.</summary>
      <param name="position">쓰기를 시작할 접근자의 바이트 수입니다.</param>
      <param name="array">접근자에 쓸 배열입니다.</param>
      <param name="offset">쓰기를 시작할 <paramref name="array" />의 인덱스입니다.</param>
      <param name="count">
        <paramref name="array" />에서 쓸 구조체 수입니다.</param>
      <typeparam name="T">구조체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" />가 <paramref name="count" />에서 지정한 구조의 수를 쓴 후 상위 노드에 바이트 수가 충분하지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" />가 0보다 작거나 접근자의 용량보다 큰 경우
또는
<paramref name="offset" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">접근자가 쓰기를 지원하지 않는 경우</exception>
      <exception cref="T:System.ObjectDisposedException">접근자가 삭제되었습니다.</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>관리 코드에서 관리되지 않는 메모리 블록에 액세스할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>지정된 위치와 메모리 길이를 사용하여 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pointer">관리되지 않는 메모리 위치에 대한 포인터입니다.</param>
      <param name="length">사용할 메모리의 길이입니다.</param>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 값이 0보다 작은 경우
또는
<paramref name="length" />가 오버플로를 발생시킬 만큼 큰 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>지정된 위치, 메모리 길이, 총 메모리 양 및 파일 액세스 값을 사용하여 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pointer">관리되지 않는 메모리 위치에 대한 포인터입니다.</param>
      <param name="length">사용할 메모리의 길이입니다.</param>
      <param name="capacity">시스템에 할당된 총 메모리 양입니다.</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 값 중 하나입니다.</param>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 값이 0보다 작은 경우
또는
<paramref name="capacity" /> 값이 0보다 작은 경우
또는
<paramref name="length" /> 값이 <paramref name="capacity" /> 값보다 큰 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>지정된 오프셋과 길이를 사용하여 안전한 버퍼에서 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</param>
      <param name="offset">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</param>
      <param name="length">관리되지 않는 메모리 스트림의 길이입니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>지정된 오프셋, 길이 및 파일 액세스를 사용하여 안전한 버퍼에서 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</param>
      <param name="offset">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</param>
      <param name="length">관리되지 않는 메모리 스트림의 길이입니다.</param>
      <param name="access">관리되지 않는 메모리 스트림에 대한 파일 액세스 모드입니다.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>스트림이 읽기를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>생성자가 스트림 읽기를 포함하지 않는 <paramref name="access" /> 매개 변수를 사용하여 개체를 만들었고 스트림이 닫혔으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>스트림이 검색을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>스트림이 닫혔으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>스트림이 쓰기를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>생성자가 쓰기를 지원하는 <paramref name="access" /> 매개 변수 값을 사용하여 개체를 만들었거나 매개 변수가 없는 생성자가 개체를 만들었거나 스트림이 닫혔으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>스트림에 할당된 스트림 길이(크기) 또는 총 메모리 양(용량)을 가져옵니다.</summary>
      <returns>스트림의 크기 또는 용량입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryStream" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>
        <see cref="M:System.IO.Stream.Flush" /> 메서드를 재정의하여 아무런 작업도 수행되지 않도록 합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> 메서드를 재정의하여 지정된 경우 작업을 취소하지만 다른 작업이 수행되지 않도록 합니다.</summary>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 플러시 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>관리되지 않는 메모리 위치에 대한 포인터를 사용하여 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pointer">관리되지 않는 메모리 위치에 대한 포인터입니다.</param>
      <param name="length">사용할 메모리의 길이입니다.</param>
      <param name="capacity">시스템에 할당된 총 메모리 양입니다.</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 값 중 하나입니다.</param>
      <exception cref="T:System.Security.SecurityException">사용자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 값이 0보다 작은 경우
또는
<paramref name="capacity" /> 값이 0보다 작은 경우
또는
<paramref name="length" /> 값이 오버플로를 발생시킬 만큼 큰 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>지정된 오프셋, 길이 및 파일 액세스를 사용하여 안전한 버퍼에서 <see cref="T:System.IO.UnmanagedMemoryStream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">관리되지 않는 메모리 스트림이 포함될 버퍼입니다.</param>
      <param name="offset">관리되지 않는 메모리 스트림을 시작할 버퍼의 바이트 위치입니다.</param>
      <param name="length">관리되지 않는 메모리 스트림의 길이입니다.</param>
      <param name="access">관리되지 않는 메모리 스트림에 대한 파일 액세스 모드입니다.</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>스트림의 데이터 길이를 가져옵니다.</summary>
      <returns>스트림의 데이터 길이입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>스트림 내의 현재 위치를 가져오거나 설정합니다.</summary>
      <returns>스트림 내의 현재 위치입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">위치가 0보다 작은 값으로 설정된 경우 또는 위치가 <see cref="F:System.Int32.MaxValue" />보다 크거나 현재 포인터에 추가될 때 오버플로가 발생할 경우</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>스트림 내의 현재 위치를 기준으로 스트림에 대한 바이트 포인터를 가져오거나 설정합니다.</summary>
      <returns>바이트 포인터입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">현재 위치가 스트림의 용량보다 큰 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">설정할 위치가 현재 스트림에서 올바르지 않은 경우</exception>
      <exception cref="T:System.IO.IOException">포인터가 스트림의 시작 위치 값보다 낮은 값으로 설정되는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" />에 사용할 수 있도록 스트림이 초기화되었습니다. <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> 속성은 <see cref="T:System.Byte" /> 포인터를 사용하여 초기화된 스트림에만 사용할 수 있습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이트 수를 지정된 배열로 읽어 들입니다.</summary>
      <param name="buffer">이 메서드는 지정된 바이트 배열의 값이 <paramref name="offset" />과 (<paramref name="offset" /> + <paramref name="count" /> - 1) 사이에서 현재 원본으로부터 읽어온 바이트로 교체된 상태로 반환됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="offset">현재 스트림에서 읽은 데이터를 저장하기 시작하는 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">현재 스트림에서 읽을 최대 바이트 수입니다.</param>
      <returns>버퍼로 읽어온 총 바이트 수입니다. 이 바이트 수는 현재 바이트가 충분하지 않은 경우 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달하면 0이 됩니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 읽기를 지원하지 않는 경우
또는
<see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> 속성은 <see langword="false" />로 설정됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 매개 변수가 <see langword="null" />로 설정된 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 매개 변수가 0보다 작습니다.
또는
<paramref name="count" /> 매개 변수가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">버퍼 배열 길이에서 <paramref name="offset" /> 매개 변수를 뺀 값이 <paramref name="count" /> 매개 변수보다 작은 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Span{System.Byte})">
      <summary>이 비관리형 메모리 스트림의 모든 바이트를 지정된 바이트 범위로 읽어들입니다.</summary>
      <param name="destination">이 메서드가 반환될 때 이 범위에는 비관리형 메모리 스트림의 모든 바이트가 포함됩니다.</param>
      <returns>대상으로 읽어들인 총 바이트 수입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>지정된 바이트 수를 지정된 배열로 비동기 방식으로 읽어 들입니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림의 데이터를 쓰기 시작할 <paramref name="buffer" />의 바이트 오프셋입니다.</param>
      <param name="count">읽을 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내는 작업입니다. <paramref name="TResult" /> 매개 변수의 값은 버퍼 안으로 읽어들인 총 바이트 수를 포함합니다. 현재 사용할 수 있는 바이트 수가 요청된 수보다 작을 경우 결과 값이 요청된 바이트 수보다 작을 수 있으며 스트림의 끝에 도달한 경우에는 0이 될 수도 있습니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>비관리형 메모리 스트림 바이트를 비동기적으로 메모리 영역으로 읽어들입니다.</summary>
      <param name="buffer">비동기 메서드가 완료되면 이 메모리 영역에는 비관리형 메모리 스트림에서 읽은 모든 바이트가 포함됩니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 읽기 작업을 나타내며 버퍼로 읽어들인 총 바이트 수를 래핑하는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>스트림에서 바이트를 읽고 스트림 내 위치를 한 바이트씩 앞으로 이동하거나 스트림 끝일 경우 -1을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Int32" /> 개체로 캐스팅된 부호 없는 바이트이거나, 스트림의 끝에 있는 경우 -1입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 읽기를 지원하지 않는 경우
또는
현재 위치가 스트림의 끝에 있는 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>현재 스트림의 현재 위치를 주어진 값으로 설정합니다.</summary>
      <param name="offset">검색을 시작할 <c>원점</c>에 상대적인 위치입니다.</param>
      <param name="loc">
        <see cref="T:System.IO.SeekOrigin" /> 형식의 값을 사용하여 시작, 끝 또는 현재 위치를 <c>원점</c>에 대한 참조 지점으로 지정합니다.</param>
      <returns>스트림 내의 새 위치입니다.</returns>
      <exception cref="T:System.IO.IOException">스트림의 시작 위치 앞에서 검색하려고 한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 값이 스트림의 최대 크기보다 큰 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" />이 잘못되었습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>스트림의 길이를 지정된 값으로 설정합니다.</summary>
      <param name="value">스트림의 길이입니다.</param>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 쓰기를 지원하지 않는 경우
또는
스트림에 쓰려고 하는데 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 속성이 <see langword="false" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 <paramref name="value" />가 스트림의 용량을 초과한 경우
또는
지정된 <paramref name="value" />가 음수인 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>버퍼의 데이터를 사용하여 현재 스트림에 바이트 블록을 씁니다.</summary>
      <param name="buffer">현재 스트림으로 복사할 바이트가 들어 있는 바이트 배열입니다.</param>
      <param name="offset">현재 스트림으로 바이트를 복사하기 시작할 버퍼의 오프셋입니다.</param>
      <param name="count">현재 스트림에 쓸 바이트 수입니다.</param>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 쓰기를 지원하지 않는 경우
또는
스트림에 쓰려고 하는데 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 속성이 <see langword="false" />인 경우
또는
<paramref name="count" /> 값이 스트림의 용량보다 큰 경우
또는
위치가 스트림 용량의 끝에 있는 경우</exception>
      <exception cref="T:System.IO.IOException">I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 매개 변수 중 하나가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 매개 변수에서 <paramref name="buffer" /> 매개 변수의 길이를 뺀 값이 <paramref name="count" /> 매개 변수보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>제공된 바이트 범위에서 데이터를 사용하여 현재 비관리형 메모리 스트림에 바이트 블록을 씁니다.</summary>
      <param name="source">현재 비관리형 메모리 스트림에 바이트를 복사할 바이트 범위입니다.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>바이트의 시퀀스를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="offset">스트림으로 바이트를 복사하기 시작할 <paramref name="buffer" />의 바이트 오프셋(0부터 시작)입니다.</param>
      <param name="count">쓸 최대 바이트 수입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>바이트 범위를 현재 스트림에 비동기적으로 쓰고 쓰여진 바이트 수만큼 이 스트림 내의 현재 위치를 앞으로 이동한 후 취소 요청을 모니터링합니다.</summary>
      <param name="buffer">데이터를 쓸 버퍼입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링할 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 쓰기 작업을 나타내는 작업입니다.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>파일 스트림의 현재 위치에 바이트를 씁니다.</summary>
      <param name="value">스트림에 쓰여지는 바이트 값입니다.</param>
      <exception cref="T:System.ObjectDisposedException">스트림이 닫혔습니다.</exception>
      <exception cref="T:System.NotSupportedException">내부 메모리가 쓰기를 지원하지 않는 경우
또는
스트림에 쓰려고 하는데 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 속성이 <see langword="false" />인 경우
또는
현재 위치가 스트림 용량의 끝에 있는 경우</exception>
      <exception cref="T:System.IO.IOException">제공된 <paramref name="value" />로 인해 스트림이 최대 용량을 초과하는 경우</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>특성 사용 필드나 매개 변수의 기본값이 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />의 인스턴스임을 나타냅니다. 여기서 <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" />는 <see langword="null" />입니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>이 특성에 저장된 <see langword="IDispatch" /> 상수를 가져옵니다.</summary>
      <returns>이 특성에 저장된 <see langword="IDispatch" /> 상수입니다. <see langword="null" /> 상수 값에는 <see langword="IDispatch" />만 허용됩니다.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>특성 사용 필드나 매개 변수의 기본값이 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />의 인스턴스임을 나타냅니다. 여기서 <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" />는 <see langword="null" />입니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>이 특성에 저장된 <see langword="IUnknown" /> 상수를 가져옵니다.</summary>
      <returns>이 특성에 저장된 <see langword="IUnknown" /> 상수입니다. <see langword="null" /> 상수 값에는 <see langword="IUnknown" />만 허용됩니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>관리되지 않는 메서드는 관리되는 메서드를 호출할 수 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>지정된 배열 내에서 배열 및 오프셋을 캡슐화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="array">관리되는 배열입니다.</param>
      <param name="offset">플랫폼 호출을 통해 전달될 요소의 오프셋(바이트)입니다.</param>
      <exception cref="T:System.ArgumentException">배열이 2GB(기가바이트)보다 큰 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>지정된 개체가 현재 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체와 일치하는지 여부를 나타냅니다.</summary>
      <param name="obj">이 인스턴스와 비교할 개체입니다.</param>
      <returns>개체가 이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체가 현재 인스턴스와 일치하는지 여부를 나타냅니다.</summary>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <returns>지정된 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체가 현재 인스턴스와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />에서 참조한 관리되는 배열을 반환합니다.</summary>
      <returns>이 인스턴스가 참조하는 관리되는 배열입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>이 값 형식에 대한 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />이 생성될 때 제공된 오프셋을 반환합니다.</summary>
      <returns>이 인스턴스의 오프셋입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>지정된 두 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="a">
        <paramref name="b" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <param name="b">
        <paramref name="a" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <returns>
        <see langword="true" />의 값이 <paramref name="a" />의 값과 같으면 <paramref name="b" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>지정된 두 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체의 값이 같은지 여부를 확인합니다.</summary>
      <param name="a">
        <paramref name="b" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <param name="b">
        <paramref name="a" /> 매개 변수와 비교할 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체입니다.</param>
      <returns>
        <paramref name="a" />의 값이 <paramref name="b" />의 값과 같지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>자동화 마샬러 또는 사용자 지정 프록시 및 스텁을 사용하여 형식의 마샬링 여부를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="val">자동화 마샬러를 사용하여 클래스를 마샬링해야 하면 <see langword="true" />이고, 프록시 스텁 마샬러를 사용해야 하면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>사용할 마샬러 형식을 나타내는 값을 가져옵니다.</summary>
      <returns>자동화 마샬러를 사용하여 클래스를 마샬링해야 하면 <see langword="true" />이고, 프록시 스텁 마샬러를 사용해야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>유니코드 문자가 가장 일치하는 ANSI 문자로 변환되는지 여부를 제어합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> 속성 값으로 설정된 <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="BestFitMapping">
        <see langword="true" />는 가장 적합한 매핑 기능이 활성화된다는 것을 나타내고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 가져옵니다.</summary>
      <returns>가장 적합한 매핑이 활성화된 경우에는 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>
        <see langword="VT_BSTR" /> 형식의 데이터를 관리 코드에서 비관리 코드로 마샬링합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 개체를 사용하여 <see cref="T:System.Object" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">래핑하여 <see langword="VT_BSTR" />로 마샬링할 개체합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> 개체를 사용하여 <see cref="T:System.String" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">래핑하여 <see langword="VT_BSTR" />로 마샬링할 개체합니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>
        <see langword="VT_BSTR" /> 형식으로 마샬링할 래핑된 <see cref="T:System.String" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" />로 래핑되는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>비관리 코드에서 구현된 메서드를 호출하는 데 필요한 호출 규칙을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>호출자가 스택을 정리합니다. <see langword="varargs" />를 사용하여 함수를 호출할 수 있으므로 <see langword="Printf" />와 같은 가변 개수의 매개 변수를 허용하는 메서드에 사용하기에 적합합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>이 호출 규칙이 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>호출 수신자가 스택을 정리합니다. 이는 플랫폼 호출을 사용하여 관리되지 않는 함수를 호출하는 기본 규칙입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>첫 번째 매개 변수는 <see langword="this" /> 포인터이며 레지스터 ECX에 저장됩니다. 다른 매개 변수는 스택에 푸시됩니다. 이 호출 규칙은 관리되지 않는 DLL에서 내보낸 클래스의 메서드를 호출하는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>이 멤버는 실제로는 호출 규칙이 아니라 기본 플랫폼 호출 규칙을 사용합니다. 예를 들어, Windows에서는 기본값이 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />이고 Windows CE .NET에서는 기본값이 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>인터페이스가 생성될 경우 COM에 노출된 클래스에 대해 생성될 클래스 인터페이스의 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 열거형 값을 사용하여 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="classInterfaceType">클래스에 대해 생성되는 인터페이스의 형식을 설명합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="classInterfaceType">클래스에 대해 생성된 인터페이스의 형식을 설명하는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>클래스에 대해 어떤 형식의 인터페이스가 생성되어야 하는지를 설명하는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 값을 가져옵니다.</summary>
      <returns>클래스에 대해 어떤 형식의 인스턴스가 생성되어야 하는지를 설명하는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>클래스에 대해 생성되는 클래스 인터페이스의 형식을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>클래스가 COM 클라이언트에 대해 런타임에 바인딩만 지원함을 나타냅니다. 클래스의 <see langword="dispinterface" />는 요청 시 COM 클라이언트에 자동으로 노출됩니다. Tlbexp.exe(Type Library Exporter)에서 생성된 형식 라이브러리는 클라이언트가 인터페이스의 DISPID를 캐시하지 못하게 하기 위해 <see langword="dispinterface" />에 대한 형식 정보를 포함하지 않습니다. 클라이언트는 런타임에만 인터페이스에 바인딩할 수 있으므로 <see langword="dispinterface" />에는 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />에서 설명한 버전 관리 문제가 나타내지 않습니다.
이것은 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />의 기본 설정입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>이중 클래스 인터페이스가 클래스에 대해 자동으로 생성되고 COM에 노출됨을 나타냅니다. 클래스 인터페이스에 대해 형식 정보가 생성되어 형식 라이브러리에 게시됩니다. <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />에서 설명하는 것처럼 버전 관리 제한 때문에 <see langword="AutoDual" />은 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>해당 클래스에 대해 클래스 인터페이스가 생성되지 않음을 나타냅니다. 명시적으로 구현되는 인터페이스가 없으면 런타임에 바인딩될 때 <see langword="IDispatch" /> 인터페이스를 통해서만 클래스에 액세스할 수 있습니다. 이것이 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />에 대해 권장되는 설정입니다. 클래스에서 명시적으로 구현한 인터페이스를 통해 기능을 노출시키는 유일한 방법은 <see langword="ClassInterfaceType.None" />을 사용하는 것입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>형식 라이브러리에서 가져온 coclass의 클래스 식별자를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>원본 coclass의 클래스 식별자를 사용하여 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="coClass">원본 coclass의 클래스 식별자를 포함하는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>원본 coclass의 클래스 식별자를 가져옵니다.</summary>
      <returns>원본 coclass의 클래스 식별자를 포함하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>매개 변수 또는 필드 형식의 COM 별칭을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>특성 사용 필드 또는 매개 변수에 대한 별칭을 사용하여 <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="alias">필드 또는 매개 변수를 가져올 때 형식 라이브러리에서 찾은 필드 또는 매개 변수에 대한 별칭입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>필드 또는 매개 변수를 가져올 때 형식 라이브러리에서 찾은 필드 또는 매개 변수에 대한 별칭을 가져옵니다.</summary>
      <returns>필드 또는 매개 변수를 가져올 때 형식 라이브러리에서 찾은 필드 또는 매개 변수에 대한 별칭입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>이벤트 처리기의 런타임에 바인딩된 등록을 허용합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>지정된 형식과 해당 형식의 이벤트 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">개체의 형식입니다.</param>
      <param name="eventName">
        <paramref name="type" />의 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>이벤트 처리기를 COM 개체에 연결합니다.</summary>
      <param name="target">이벤트 대리자가 바인딩될 대상 개체입니다.</param>
      <param name="handler">이벤트 대리자입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>이 이벤트에 대한 특성을 가져옵니다.</summary>
      <returns>이 이벤트에 대한 읽기 전용 특성입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>이 멤버를 선언하는 클래스를 가져옵니다.</summary>
      <returns>이 멤버를 선언하는 클래스에 대한 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>이벤트 처리기 대리자를 이벤트 소스에 추가하는 데 사용된 메서드를 가져옵니다.</summary>
      <param name="nonPublic">public이 아닌 메서드를 반환하려면 <see langword="true" />를 설정하고, 그렇지 않으면 <see langword="false" />를 설정합니다.</param>
      <returns>이벤트 처리기 대리자를 이벤트 소스에 추가하는 데 사용된 메서드입니다.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" />이 <see langword="true" />이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>파생 클래스에서 재정의된 경우 이 멤버에 적용된 사용자 지정 특성을 모두 포함하는 배열을 가져옵니다.</summary>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>모든 사용자 지정 특성을 포함하는 배열이거나, 정의된 특성이 없는 경우 요소가 없는 배열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우. 방법: 리플렉션 전용 컨텍스트에 어셈블리 로드를 참조하세요.</exception>
      <exception cref="T:System.TypeLoadException">사용자 지정 특성 형식을 로드할 수 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>파생 클래스에서 재정의된 경우 이 멤버에 적용된, 지정된 형식의 사용자 지정 특성을 모두 포함하는 배열을 가져옵니다.</summary>
      <param name="attributeType">검색할 특성 형식입니다. 이 형식에 할당할 수 있는 특성만 반환할 수 있습니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 형식의 모든 사용자 지정 특성을 포함하는 배열이거나, 정의된 특성이 없는 경우 요소가 없는 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">이 멤버가 리플렉션 전용 컨텍스트에 로드된 형식에 속하는 경우. 방법: 리플렉션 전용 컨텍스트에 어셈블리 로드</exception>
      <exception cref="T:System.TypeLoadException">사용자 지정 특성 형식을 로드할 수 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary>현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />의 <see cref="T:System.Reflection.CustomAttributeData" /> 개체 목록을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />에 적용된 특성에 대한 데이터를 나타내는 <see cref="T:System.Reflection.CustomAttributeData" /> 개체의 제네릭 목록입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary>메타데이터의 이벤트에 연결된 public 또는 public이 아닌 메서드를 반환합니다.</summary>
      <param name="nonPublic">public이 아닌 메서드를 포함하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>메타데이터의 이벤트에 연결된 메서드를 나타내는 배열입니다. 해당되는 메서드가 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>파생 클래스에서 재정의된 경우 이벤트가 발생했을 때 호출된 메서드를 반환합니다.</summary>
      <param name="nonPublic">public이 아닌 메서드를 반환하려면 <see langword="true" />를 설정하고, 그렇지 않으면 <see langword="false" />를 설정합니다.</param>
      <returns>이벤트가 발생했을 때 호출된 개체입니다.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" />이 <see langword="true" />이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>파생 클래스에서 재정의된 경우 해당 이벤트의 메서드를 제거하기 위해 <see cref="T:System.Reflection.MethodInfo" /> 개체를 검색합니다.</summary>
      <param name="nonPublic">public이 아닌 메서드를 반환하려면 <see langword="true" />를 설정하고, 그렇지 않으면 <see langword="false" />를 설정합니다.</param>
      <returns>이벤트 처리기 대리자를 이벤트 소스에서 제거하는 데 사용된 메서드입니다.</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" />이 <see langword="true" />이고 이벤트 처리기 대리자를 추가하는 데 사용된 메서드가 public이 아니지만 호출자가 public이 아닌 메서드를 리플렉션할 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>지정된 특성을 가진 하나 이상의 인스턴스가 이 멤버에 적용되었는지 여부를 나타냅니다.</summary>
      <param name="attributeType">검색할 특성 형식입니다.</param>
      <param name="inherit">이 멤버의 상속 체인을 검색하여 특성을 찾으려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 특성이 이 멤버에 적용되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary>현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 개체와 연결된 메타데이터 토큰을 가져옵니다.</summary>
      <returns>메타 데이터 토큰을 나타내는 32 비트 정수입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary>현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 개체와 연결된 모듈을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> 개체와 연결 된 모듈입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>현재 멤버의 이름을 가져옵니다.</summary>
      <returns>이 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>이 인스턴스를 초기화하는 데 사용된 클래스 개체를 가져옵니다.</summary>
      <returns>현재 개체를 초기화하는 데 사용된 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>COM 개체에서 이벤트 처리기를 분리합니다.</summary>
      <param name="target">이벤트 대리자가 바인딩되는 대상 개체입니다.</param>
      <param name="handler">이벤트 대리자입니다.</param>
      <exception cref="T:System.InvalidOperationException">이 이벤트에 public <see langword="remove" /> 접근자가 없는 경우</exception>
      <exception cref="T:System.ArgumentException">전달된 처리기를 사용할 수 없는 경우</exception>
      <exception cref="T:System.Reflection.TargetException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 <see cref="T:System.Exception" />을 catch합니다.  
  

            
  
 <paramref name="target" /> 매개 변수가 <see langword="null" />이고 이벤트가 static이 아닌 경우  
  
또는 
<see cref="T:System.Reflection.EventInfo" /> 가 대상에서 선언되지 않은 경우</exception>
      <exception cref="T:System.MethodAccessException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.MemberAccessException" />을 catch합니다.  
  

            
  
 호출자에게 멤버에 대한 액세스 권한이 없는 경우</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>현재 어셈블리 버전의 모든 클래스가 이전 어셈블리 버전의 클래스와 호환된다는 것을 COM 클라이언트에 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>주 버전, 부 버전, 빌드 번호 및 수정 번호를 사용하여 <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="major">어셈블리의 주 버전 번호입니다.</param>
      <param name="minor">어셈블리의 부 버전 번호입니다.</param>
      <param name="build">어셈블리의 빌드 번호입니다.</param>
      <param name="revision">어셈블리의 수정 번호입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>어셈블리의 빌드 번호를 가져옵니다.</summary>
      <returns>어셈블리의 빌드 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>어셈블리의 주 버전 번호를 가져옵니다.</summary>
      <returns>어셈블리의 주 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>어셈블리의 부 버전 번호를 가져옵니다.</summary>
      <returns>어셈블리의 부 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>어셈블리의 수정 번호를 가져옵니다.</summary>
      <returns>어셈블리의 수정 번호입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>형식 라이브러리에서 어셈블리로 클래스 또는 인터페이스를 가져올 때 클래스 또는 인터페이스에 대한 정보가 손실되었음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>
        <see langword="ComConversionLossAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>COM에 노출할 기본 인터페이스를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 개체를 COM에 노출되는 기본 인터페이스로 설정하여 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="defaultInterface">COM에 노출할 기본 인터페이스를 나타내는 <see cref="T:System.Type" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>COM에 노출할 기본 인터페이스를 지정하는 <see cref="T:System.Type" /> 개체를 가져옵니다.</summary>
      <returns>COM에 노출할 기본 인터페이스를 지정하는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>COM 형식 라이브러리에서 coclass를 가져올 때 생성되는 이벤트 인터페이스의 메서드를 구현하는 원본 인터페이스 및 클래스를 식별합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>소스 인터페이스와 이벤트 공급자 클래스를 사용하여 <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="SourceInterface">형식 라이브러리의 원본 소스 인터페이스를 포함하는 <see cref="T:System.Type" />입니다. COM에서는 이 인터페이스를 사용하여 관리되는 클래스를 다시 호출합니다.</param>
      <param name="EventProvider">이벤트 인터페이스의 메서드를 구현하는 클래스를 포함하는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>이벤트 인터페이스의 메서드를 구현하는 클래스를 가져옵니다.</summary>
      <returns>이벤트 인터페이스의 메서드를 구현하는 클래스를 포함하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>형식 라이브러리에서 원본 소스 인터페이스를 가져옵니다.</summary>
      <returns>소스 인터페이스를 포함하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>이벤트를 처리하는 .NET Framework 대리자를 COM 개체에 추가 및 제거할 수 있는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>COM 개체에서 발생된 이벤트의 호출 목록에 대리자를 추가합니다.</summary>
      <param name="rcw">호출자가 응답하려고 하는 이벤트를 트리거하는 COM 개체입니다.</param>
      <param name="iid">COM 개체에서 이벤트를 트리거하기 위해 사용하는 소스 인터페이스의 식별자입니다.</param>
      <param name="dispid">소스 인터페이스의 메서드에 대한 디스패치 식별자입니다.</param>
      <param name="d">COM 이벤트가 발생될 때 호출할 대리자입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>COM 개체에서 발생된 이벤트의 호출 목록에서 대리자를 제거합니다.</summary>
      <param name="rcw">대리자가 연결될 COM 개체입니다.</param>
      <param name="iid">COM 개체에서 이벤트를 트리거하기 위해 사용하는 소스 인터페이스의 식별자입니다.</param>
      <param name="dispid">소스 인터페이스의 메서드에 대한 디스패치 식별자입니다.</param>
      <param name="d">호출 목록에서 제거할 대리자입니다.</param>
      <returns>호출 목록에서 제거된 대리자입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>COM 메서드 호출에서 인식할 수 없는 HRESULT가 반환되는 경우에 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 데이터로부터 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 유지하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 제공하는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>지정된 메시지와 오류 코드를 사용하여 <see cref="T:System.Runtime.InteropServices.COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외가 발생한 이유를 나타내는 메시지입니다.</param>
      <param name="errorCode">이 예외와 관련된 오류 코드(HRESULT) 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>예외의 내용을 문자열로 변환합니다.</summary>
      <returns>예외의 <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" /> 및 <see cref="P:System.Exception.StackTrace" /> 속성을 포함하는 문자열입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>특성 사용 형식이 COM에서 미리 정의되었다는 것을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>COM에 인터페이스를 노출하는 방법을 확인합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>인터페이스가 초기 바인딩 및 런타임에 바인딩을 둘 다 가능하게 하는 이중 인터페이스로 COM에 노출됨을 나타냅니다. 기본값은 <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" />입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>인터페이스가 런타임에 바인딩만 가능하게 하는 dispinterface로 COM에 노출됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>인터페이스가 COM에 Windows 런타임 인터페이스로 노출됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>인터페이스에서 초기 바인딩만 가능하게 하는 IUnknown에서 파생된 인터페이스로 COM에 노출됨을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>COM 멤버의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>멤버는 일반 메서드입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>멤버는 속성을 가져옵니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>멤버는 속성을 설정합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>COM에서 사용할 어셈블리를 등록할 때 호출할 메서드를 지정합니다. 이렇게 하면 등록 중에 사용자가 작성한 코드를 실행할 수 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>특성 사용 클래스에 대한 COM 이벤트 원본으로 노출된 인터페이스의 목록을 확인합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>이벤트 소스 인터페이스의 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterfaces">정규화된 이벤트 소스 인터페이스 이름의 null 구분 목록입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>소스 인터페이스로 사용할 형식을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>소스 인터페이스로 사용할 형식을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface1">기본 소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface2">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>소스 인터페이스로 사용할 형식을 사용하여 <see langword="ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface1">기본 소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface2">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface3">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>소스 인터페이스로 사용할 형식을 사용하여 <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceInterface1">기본 소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface2">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface3">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
      <param name="sourceInterface4">소스 인터페이스의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>이벤트 소스 인터페이스의 정규화된 이름을 가져옵니다.</summary>
      <returns>이벤트 소스 인터페이스의 정규화된 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>advise 싱크나 개체와의 캐시 연결을 설정할 때 요청되는 동작을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>데이터 advise 연결의 경우, 데이터에 대한 액세스 가능성을 보장합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>데이터 advise 연결(<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 또는 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />)의 경우, 이 플래그는 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />를 호출할 때 데이터 개체에서 데이터를 보내지 않도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>연결을 삭제하기 전에 개체에서 하나의 변경 알림만 만들거나 캐시를 업데이트하도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>데이터가 변경될 때까지 기다리지 않고 개체에서 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />에 대한 초기 호출(데이터 또는 뷰 advise 연결의 경우) 또는 캐시 업데이트(캐시 연결의 경우)를 수행하도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>이 값은 DLL 개체 애플리케이션과 해당 개체의 그리기를 수행하는 개체 처리기에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>보다 일반적으로 사용되는 <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />의 동의어입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>캐시 연결의 경우, 이 플래그는 캐시가 들어 있는 개체가 저장될 때만 캐시된 표현을 업데이트합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>모니커 바인딩 작업 중에 사용되는 매개 변수를 저장합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>
        <see langword="BIND_OPTS" /> 구조체의 크기를 바이트 단위로 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>호출자가 바인딩 작업을 완료하도록 지정한 시간(<see langword="GetTickCount" /> 함수가 반환하는 밀리초 단위의 시간)을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>모니커 바인딩 작업의 여러 측면을 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>모니커가 식별한 개체가 들어 있는 파일을 열 때 사용해야 하는 플래그를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>바인딩 대상 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체, <see cref="T:System.Runtime.InteropServices.VARDESC" /> 구조체 또는 <see langword="ITypeComp" /> 인터페이스에 대한 포인터를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> 인터페이스에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>
        <see cref="T:System.Runtime.InteropServices.VARDESC" /> 구조체에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>METHODDATA 구조체에서 설명한 메서드에서 사용하는 호출 규칙을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>메서드에 대해 C 선언(CDECL) 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>메서드에 대해 Macintosh Pascal(MACPASCAL) 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 열거형의 끝을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>메서드에 대해 Macintosh Programmers' Workbench(MPW) CDECL 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>메서드에 대해 Macintosh Programmers' Workbench(MPW) PASCAL 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>메서드에 대해 MSC Pascal(MSCPASCAL) 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>메서드에 대해 Pascal 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>이 값은 나중에 사용할 수 있도록 예약되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>메서드에 대해 표준 호출 규칙(STDCALL)이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>메서드에 대해 표준 SYSCALL 호출 규칙이 사용됨을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>지정된 연결점에 대해 존재하는 연결을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />에 대한 호출에서 반환되는 연결 토큰을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>연결된 advise 싱크의 <see langword="IUnknown" /> 인터페이스에 대한 포인터를 나타냅니다. <see langword="IUnknown::Release" /> 구조체가 더 이상 필요하지 않으면 호출자는 이 포인터에서 <see langword="CONNECTDATA" />를 호출해야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 메서드의 <paramref name="dwDirection" /> 매개 변수에서 설정되는 데이터 흐름의 방향을 지정합니다. 이 메서드는 결과 열거자가 열거할 수 있는 형식을 결정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />가 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />에 지정할 수 있는 형식에 대한 열거자를 제공하도록 요청합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />가 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />에 지정할 수 있는 형식에 대한 열거자를 제공하도록 요청합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>바인딩되는 형식 설명을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>
        <see langword="IMPLICITAPPOBJ" />가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>열거형 마커의 끝을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>일치하는 항목을 찾을 수 없음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>
        <see langword="TYPECOMP" />가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>
        <see langword="VARDESC" />가 반환되었음을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>
        <see langword="IDispatch::Invoke" />를 통해 메서드 또는 속성에 전달된 인수를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>인수의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>명명된 인수의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>명명된 인수의 디스패치 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>인수 배열에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>데이터를 그리거나 가져올 때 개체의 원하는 데이터 또는 뷰 모양을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>개체를 컨테이너 내에 포함 개체로 표시하는 데 사용할 수 있는 개체 표현입니다. 일반적으로 복합 문서 개체에 대해 이 값을 지정합니다. 이 표시 방식은 화면 또는 프린터에 대해 제공될 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>파일 메뉴에서 인쇄 명령을 사용하여 프린터로 인쇄할 때와 같은 방식으로 화면에 개체를 표현합니다. 설명된 데이터가 페이지 순서를 나타낼 수도 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>개체의 아이콘 표현입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>해당 개체를 검색 도구에 표시할 때 사용할 수 있는 개체의 축소판 표현입니다. 축소판은 메타파일에 래핑될 수 있는 약 120x120픽셀 크기의, 16색(권장) 디바이스 독립적 비트맵입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>변수, 함수 또는 함수 매개 변수에 대한 형식 설명과 프로세스 전달 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>요소에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>요소에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>요소 원격화 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>매개 변수에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>요소의 형식을 식별합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>
        <see langword="IDispatch::Invoke" />에서 발생하는 예외를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>고객을 위한 오류를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>오류에 대한 자세한 정보를 포함하는 도움말 파일의 정규화된 드라이브, 경로 및 파일 이름을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>예외 소스의 이름을 나타냅니다. 일반적으로 이 이름은 애플리케이션 이름입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>도움말 파일 내에서 해당 항목의 도움말 컨텍스트 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>
        <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> 구조체를 인수로 사용하고 HRESULT 값을 반환하는 함수에 대한 포인터를 나타냅니다. 지연된 채우기가 적절하지 않으면 이 필드는 <see langword="null" />로 설정됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>이 필드는 예약되어 있으므로 <see langword="null" />로 설정해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>오류를 설명하는 반환 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>오류를 식별하는 오류 코드를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>이 필드는 예약되어 있으므로 0으로 설정해야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>1601년 1월 1일 이후 경과한 100나노초 간격의 수를 나타냅니다. 이 구조체는 64비트 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>
        <see langword="FILETIME" />의 상위 32비트를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>
        <see langword="FILETIME" />의 하위 32비트를 지정합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>일반화된 클립보드 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>원하는 특정 클립보드 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>렌더링 상세 수준을 나타내는 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 열거형 상수 중 하나를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>데이터를 여러 페이지로 분할해야 할 때의 모양을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>데이터가 작성되는 대상 디바이스에 대한 정보가 들어 있는 <see langword="DVTARGETDEVICE" /> 구조체에 대한 포인터를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>개체의 데이터를 전송하는 데 사용되는 스토리지 미디어 형식을 나타내는 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 열거형 상수 중 하나를 지정합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>함수 설명을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>함수의 호출 규칙을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>총 매개 변수 수를 계산합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>선택적인 매개 변수를 계산합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>허용된 반환 값을 계산합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>함수의 반환 형식을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>함수가 가상 함수인지 정적 함수인지 또는 디스패치 전용인지 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>속성 함수의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>
        <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />의 크기를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>16비트 시스템에서 함수가 반환할 수 있는 오류 수를 저장합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>함수 멤버 ID를 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>
        <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />의 VTBL에 있는 오프셋을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>함수의 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>함수의 속성을 정의하는 상수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>데이터 바인딩을 지원하는 함수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>개체를 가장 잘 표현하는 함수입니다. 형식에 있는 한 함수만 이 특성을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>컴파일러가 “abc” 형식에서 이름이 “xyz”인 멤버를 찾는 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로 플래그하면, 호출은 해당 멤버 함수로 생성됩니다. 모듈에서 허용되지 않고 dispinterface와 인터페이스의 멤버에서 허용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>사용자에게 바인딩할 수 있는 것으로 표시되는 함수입니다. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>함수가 존재하고 바인딩 가능하더라도 사용자에게 표시되면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>별개의 바인딩 가능한 속성으로 매핑되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>이 속성은 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>설정된 경우, 속성을 설정하는 메서드를 호출하면 먼저 <see langword="IPropertyNotifySink::OnRequestEdit" />가 호출됩니다. <see langword="OnRequestEdit" />를 구현하면 호출이 속성을 설정하도록 허용될지 결정됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>매크로 언어에서 함수에 액세스해서는 안 됩니다. 이 플래그는 시스템 수준 함수 또는 형식 브라우저가 표시하지 않는 함수를 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>이 함수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>형식 정보 멤버는 사용자 인터페이스에 표시하는 기본 멤버입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>이 함수는 <see langword="GetLastError" />를 지원합니다. 함수에서 오류가 발생하면 호출자가 <see langword="GetLastError" />를 호출하여 오류 코드를 검색할 수 있습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>함수에 액세스하는 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>함수는 <see langword="IDispatch" />를 통해서만 액세스됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>함수는 <see langword="static" /> 주소로 액세스되고 암시적인 <see langword="this" /> 포인터를 사용합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>함수는 VTBL(가상 함수 테이블)을 통해 액세스되고 암시적인 <see langword="this" /> 포인터를 사용합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>함수는 <see langword="static" /> 주소로 액세스되고 암시적인 <see langword="this" /> 포인터를 사용하지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>이 함수는 구현된다는 점을 제외하고는 <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" />과 동일한 방식으로 액세스됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>
        <see langword="IAdviseSink" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>등록된 모든 advise 싱크에 개체가 실행 상태에서 로드된 상태로 변경되었음을 알립니다.  이 메서드는 서버에서 호출됩니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>모든 데이터 개체의 현재 등록된 advise 싱크에 개체의 데이터가 변경되었음을 알립니다.</summary>
      <param name="format">호출 데이터 개체의 형식, 대상 디바이스, 렌더링 및 스토리지 정보를 설명하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />로, 참조로 전달됩니다.</param>
      <param name="stgmedium">호출 데이터 개체의 스토리지 미디어(글로벌 메모리, 디스크 파일, 스토리지 개체, 스트림 개체, GDI(Graphics Device Interface) 개체 또는 정의되지 않은 미디어)와 해당 미디어의 소유권을 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />로, 참조로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>등록된 모든 advise 싱크에 개체 이름이 바뀌었음을 알립니다. 이 메서드는 서버에서 호출됩니다.</summary>
      <param name="moniker">개체의 새로운 전체 모니커에 있는 <see langword="IMoniker" /> 인터페이스에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>등록된 모든 advise 싱크에 개체가 저장되었음을 알립니다. 이 메서드는 서버에서 호출됩니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>개체의 등록된 advise 싱크에 개체 뷰가 변경되었음을 알립니다. 이 메서드는 서버에서 호출됩니다.</summary>
      <param name="aspect">개체의 모양 또는 뷰입니다. <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 열거형에서 가져온 값이 포함되어 있습니다.</param>
      <param name="index">변경된 뷰 부분입니다. 현재 -1만 유효합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>
        <see langword="IBindCtx" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>내부적으로 유지되는 컨텍스트 개체 매개 변수 테이블의 키인 문자열을 열거합니다.</summary>
      <param name="ppenum">이 메서드는 반환될 때 개체 매개 변수 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>현재 바인드 컨텍스트에 저장되어 있는 현재 바인딩 옵션을 반환합니다.</summary>
      <param name="pbindopts">바인딩 옵션을 받는 구조체에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>내부적으로 유지되는 컨텍스트 개체 매개 변수 테이블에서 지정한 키를 조회한 다음 해당하는 개체가 있으면 이를 반환합니다.</summary>
      <param name="pszKey">검색할 개체의 이름입니다.</param>
      <param name="ppunk">이 메서드는 반환될 때 개체 인터페이스 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>이 바인딩 프로세스와 관련된 ROT(실행 개체 테이블)에 대한 액세스를 반환합니다.</summary>
      <param name="pprot">이 메서드는 반환될 때 ROT(실행 개체 테이블)에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>전달된 개체를 모니커 작업을 하는 동안 바인딩되고 작업이 완료되면 해제되어야 하는 개체 중 하나로 등록합니다.</summary>
      <param name="punk">해제하기 위해 등록할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>지정된 개체 포인터를 내부적으로 유지되는 개체 포인터 테이블에 지정된 이름으로 등록합니다.</summary>
      <param name="pszKey">
        <paramref name="punk" />를 등록할 이름입니다.</param>
      <param name="punk">등록할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> 메서드를 사용하여 바인드 컨텍스트에 현재 등록되어 있는 모든 개체를 해제합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>등록된 개체의 집합에서 해제해야 하는 개체를 제거합니다.</summary>
      <param name="punk">해제하기 위해 등록 취소할 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>내부적으로 유지되는 컨텍스트 개체 매개 변수 테이블의 지정된 키가 현재 등록되어 있으면 해당 키 아래에 있는 개체의 등록을 취소합니다.</summary>
      <param name="pszKey">등록 취소할 키입니다.</param>
      <returns>지정된 키가 테이블에서 성공적으로 제거되었으면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>매개 변수 블록을 바인드 컨텍스트에 저장합니다. 이러한 매개 변수는 이 바인드 컨텍스트를 사용하는 나중 <see langword="UCOMIMoniker" /> 작업에 적용됩니다.</summary>
      <param name="pbindopts">설정할 바인딩 옵션이 들어 있는 구조체입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>
        <see langword="IConnectionPoint" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>연결점과 호출자의 싱크 개체 사이에 권장되는 연결을 설치합니다.</summary>
      <param name="pUnkSink">이 연결점이 관리하는 송신 인터페이스의 호출을 받는 싱크에 대한 참조입니다.</param>
      <param name="pdwCookie">이 메서드는 반환될 때 연결 쿠키를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>이 연결점에 있는 접속을 통해 반복적으로 열거자 개체를 만듭니다.</summary>
      <param name="ppEnum">이 메서드는 반환될 때 새로 만든 열거자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>이 연결점이 관리하는 송신 인터페이스의 IID를 반환합니다.</summary>
      <param name="pIID">이 매개 변수는 반환될 때, 이 연결점이 관리하는 송신 인터페이스의 IID를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>이 연결점을 개념적으로 소유하는 연결 가능한 개체에 대한 <see langword="IConnectionPointContainer" /> 인터페이스 포인터를 검색합니다.</summary>
      <param name="ppCPC">이 매개 변수는 반환될 때, 연결 가능한 개체의 <see langword="IConnectionPointContainer" /> 인터페이스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 메서드를 통해 이전에 설치된 권장된 연결을 종료합니다</summary>
      <param name="dwCookie">이전에 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> 메서드에서 반환된 연결 쿠키입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>
        <see langword="IConnectionPointContainer" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>IID마다 하나의 연결점이 있는 연결 가능한 개체에서 지원되는 모든 연결점의 열거자를 만듭니다.</summary>
      <param name="ppEnum">이 메서드는 반환될 때 열거자의 인터페이스 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>연결 가능한 개체가 특수한 하나의 IID에 대해 하나의 연결점을 가지는지 여부를 묻습니다. 연결점을 가지는 경우 해당 연결점에 대한 <see langword="IConnectionPoint" /> 인터페이스 포인터를 반환합니다.</summary>
      <param name="riid">연결점이 요구되고 있는 송신 인터페이스 IID에 대한 참조입니다.</param>
      <param name="ppCP">이 메서드는 반환될 때. 송신 인터페이스 <paramref name="riid" />를 관리하는 연결 지점을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>
        <see langword="IDataObject" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>데이터 개체와 advise 싱크 간의 연결을 만듭니다. 이 메서드는 advise 싱크를 지원하는 개체에 의해 호출되며, advise 싱크가 개체의 데이터 변경 내용에 대한 알림을 받을 수 있도록 합니다.</summary>
      <param name="pFormatetc">이후의 알림에 사용될 형식, 대상 디바이스, 모양 및 미디어를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체로, 참조로 전달됩니다.</param>
      <param name="advf">advise 연결을 제어하기 위한 플래그 그룹을 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 값 중 하나입니다.</param>
      <param name="adviseSink">변경 알림을 받을 advise 싱크의 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 인터페이스에 대한 포인터입니다.</param>
      <param name="connection">이 메서드가 반환될 때 이 연결을 식별하는 DWORD 토큰에 대한 포인터를 포함합니다. 나중에 이 토큰을 사용하여 advise 연결을 삭제할 수 있습니다. 이 토큰을 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />에 전달하면 됩니다. 연결이 설정되지 않은 경우에는 이 값이 0입니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>이 메서드는 표준 반환 값 E_INVALIDARG, E_UNEXPECTED 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  advise 연결을 만든 경우  
  
  E_NOTIMPL 
  이 메서드가 데이터 개체에 구현되지 않은 경우  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />의 값이 잘못된 경우(현재 -1만 지원됨)  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 매개 변수의 값이 잘못된 경우  
  
  OLE_E_ADVISENOTSUPPORTED 
  데이터 개체에서 변경 알림을 지원하지 않는 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>이전에 설정된 알림 연결을 제거합니다.</summary>
      <param name="connection">제거할 연결을 지정하는 DWORD 토큰입니다. 연결이 처음부터 설정되어 있었으면 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" />에서 반환된 값을 사용합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>현재 advise 연결을 열거하는 데 사용할 수 있는 개체를 만듭니다.</summary>
      <param name="enumAdvise">이 메서드가 반환될 때 새 열거자 개체에 대한 인터페이스 포인터를 받는 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" />를 포함합니다. 구현에서 <paramref name="enumAdvise" />를 <see langword="null" />로 설정한 경우 이 시점에서는 advise 싱크에 대한 연결이 없습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>이 메서드는 표준 반환 값 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값  
  
  설명  
  
  S_OK  
  
  이 열거자 개체가 성공적으로 인스턴스화되었거나 연결이 없는 경우  
  
  OLE_E_ADVISENOTSUPPORTED  
  
  이 개체에서 advise 알림을 지원하지 않는 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>데이터 개체의 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체를 열거하기 위한 개체를 만듭니다. 이러한 구조체는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 또는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />를 호출할 때 사용됩니다.</summary>
      <param name="direction">데이터의 방향을 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 값 중 하나입니다.</param>
      <returns>이 메서드는 표준 반환 값 E_INVALIDARG 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  열거자 개체를 성공적으로 만든 경우  
  
  E_NOTIMPL 
  <paramref name="direction" /> 매개 변수로 지정된 방향이 지원되지 않는 경우  
  
  OLE_S_USEREG 
  OLE에서 레지스트리의 형식을 열거하도록 요청할 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>보다 복잡한 구조체와 논리적으로 일치하는 표준 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체를 제공합니다. 이 메서드를 사용하면 서로 다른 두 개의 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에서 동일한 데이터를 반환하는지 여부를 확인하여 중복 렌더링이 필요하지 않게 할 수 있습니다.</summary>
      <param name="formatIn">호출자가 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />와 같은 후속 호출에서 데이터를 검색하는 데 사용하려는 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 구조체에 대한 포인터로, 참조로 전달됩니다. 이 경우 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 멤버는 중요하지 않으므로 무시됩니다.</param>
      <param name="formatOut">이 메서드가 반환될 때 특정 렌더링에 사용할 수 있는 가장 일반적인 정보가 포함된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터를 <c>formatetcIn</c>과 같은 형식으로 포함합니다. 호출자는 이 구조체를 할당하고 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 메서드가 데이터를 채워야 합니다. <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />와 같은 후속 호출에서 데이터를 검색하려는 경우 호출자는 제공된 <paramref name="formatOut" /> 값을 사용합니다. 단, 제공된 값이 <see langword="null" />이 아니어야 합니다. 메서드가 <see langword="null" />를 반환할 경우 이 값은 <see langword="DATA_S_SAMEFORMATETC" />입니다. 이 경우 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 멤버는 중요하지 않으므로 무시됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>이 메서드는 표준 반환 값 E_INVALIDARG, E_UNEXPECTED 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  반환된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체가 전달된 구조체와 다른 경우  
  
  DATA_S_SAMEFORMATETC 
  <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체가 같고 <paramref name="formatOut" /> 매개 변수에서 <see langword="null" />이 반환된 경우  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />의 값이 잘못된 경우(현재 -1만 지원됨)  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 매개 변수의 값이 잘못된 경우  
  
  OLE_E_NOTRUNNING 
  애플리케이션이 실행되고 있지 않은 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>소스 데이터 개체에서 데이터를 가져옵니다. 데이터 소비자에 의해 호출되는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 메서드는 지정된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 설명된 데이터를 렌더링하고, 지정된 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 구조체를 통해 이 데이터를 전송합니다. 그러면 호출자는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 구조체를 해제하는 역할을 맡습니다.</summary>
      <param name="format">데이터를 전달할 때 사용할 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터로, 참조로 전달됩니다. 메서드에서 지정된 미디어 중 가장 적합한 미디어를 선택할 수 있도록 부울 OR 연산자를 사용하여 둘 이상의 미디어를 지정할 수도 있습니다.</param>
      <param name="medium">이 메서드가 반환될 때 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 멤버를 통해 반환된 데이터가 들어 있는 스토리지 미디어와 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 멤버의 값을 통해 해당 미디어를 해제하는 역할을 하는 항목을 나타내는 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 구조체에 대한 포인터를 포함합니다. <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />가 <see langword="null" />이면 미디어의 수신기에서 미디어를 해제해야 하고, 그렇지 않으면 ,<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />는 <see langword="IUnknown" /> 메서드를 호출할 수 있도록 적절한 개체의 <see langword="Release" /> 인터페이스를 가리킵니다. 이 미디어는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />로 할당되고 채워져야 합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>소스 데이터 개체에서 데이터를 가져옵니다. 데이터 소비자가 호출하는 이 메서드는 지정된 스토리지 미디어를 호출자가 할당하고 해제해야 한다는 점에서 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 메서드와 차이가 있습니다.</summary>
      <param name="format">데이터를 전달할 때 사용할 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터로, 참조로 전달됩니다. <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />에서는 미디어를 하나만 지정할 수 있으며 유효한 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 값은 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> 또는 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />뿐입니다.</param>
      <param name="medium">전송될 데이터가 들어 있는 스토리지 미디어를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />으로, 참조로 전달됩니다. 이 미디어는 호출자에 의해 할당되고 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />에 의해 채워져야 합니다. 또는 호출자가 미디어를 해제해야 합니다. 이 메서드의 구현에서는 이 매개 변수가 가리키는 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 구조체의 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 멤버에 대해 항상 <see langword="null" /> 값을 제공해야 합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>데이터 개체가 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 설명된 데이터를 렌더링할 수 있는지 여부를 확인합니다. 붙여넣기 또는 놓기 작업을 시도하는 개체에서는 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />를 호출하기 전에 이 메서드를 호출하여 해당 작업을 수행할 수 있는지 여부를 나타내는 값을 가져올 수 있습니다.</summary>
      <param name="format">쿼리에 사용할 형식, 미디어 및 대상 디바이스를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 대한 포인터로, 참조로 전달됩니다.</param>
      <returns>이 메서드는 표준 반환 값 E_INVALIDARG, E_UNEXPECTED 및 E_OUTOFMEMORY와 함께 다음 값을 지원합니다.
  값 
  설명 
  S_OK 
  이후의 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 호출에 성공할 수 있는 경우  
  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />의 값이 잘못된 경우(현재 -1만 지원됨)  
  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> 매개 변수의 값이 잘못된 경우  
  
  DV_E_TYMED 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 값이 잘못되었습니다.  
  
  DV_E_DVASPECT 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 값이 잘못되었습니다.  
  
  OLE_E_NOTRUNNING 
  애플리케이션이 실행되고 있지 않은 경우</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>이 메서드를 구현하는 개체에 데이터를 전송합니다. 이 메서드는 데이터 소스가 들어 있는 개체에서 호출됩니다.</summary>
      <param name="formatIn">스토리지 미디어에 들어 있는 데이터를 해석할 때 데이터 개체에서 사용하는 형식을 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체로, 참조로 전달됩니다.</param>
      <param name="medium">전달될 데이터가 들어 있는 스토리지 미디어를 정의하는 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 구조체로, 참조로 전달됩니다.</param>
      <param name="release">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />를 구현하는 호출된 데이터 개체가 호출이 반환된 후에 스토리지 미디어를 소유하도록 지정하려면 <see langword="true" />를 지정합니다. 이렇게 하면 데이터 개체에서는 미디어를 사용한 후 <see langword="ReleaseStgMedium" /> 함수를 호출하여 미디어를 해제해야 합니다. 호출자가 스토리지 미디어의 소유권을 갖고 호출된 데이터 개체에서는 호출하는 동안에만 스토리지 미디어를 사용하도록 지정하려면 <see langword="false" />를 지정합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>구조체 요소, 매개 변수, 프로세스간 함수 반환 값을 전달하는데 필요한 정보가 들어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>
        <see langword="null" />로 설정되어 예약되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>형식을 설명하는 <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 값을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>구조체 요소, 매개 변수 또는 함수 반환 값을 한 프로세스에서 다른 프로세스로 전송하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>매개 변수는 호출자에서 호출 수신자로 정보를 전달합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>매개 변수가 클라이언트 애플리케이션의 로컬 식별자입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>매개 변수가 호출 수신자에게서 호출자에게로 정보를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>매개 변수가 멤버의 반환 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>매개 변수가 정보를 전달하는지 아니면 정보를 받는지 지정하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>
        <see langword="IEnumConnectionPoints" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt">
        <paramref name="rgelt" />에서 반환할 <see langword="IConnectionPoint" /> 참조의 수입니다.</param>
      <param name="rgelt">이 메서드는 반환될 때 열거된 연결에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched">이 메서드는 반환될 때 <paramref name="rgelt" />에 열거된 연결의 실제 수에 대한 참조를 포함합니다.</param>
      <returns>
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt">열거형에서 건너뛸 요소 수입니다.</param>
      <returns>건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>
        <see langword="IEnumConnections" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt">
        <paramref name="rgelt" />에서 반환할 <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 구조체의 수입니다.</param>
      <param name="rgelt">이 메서드는 반환될 때 열거된 연결에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched">이 메서드는 반환될 때 <paramref name="rgelt" />에 열거된 연결의 실제 수에 대한 참조를 포함합니다.</param>
      <returns>
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt">열거형에서 건너뛸 요소 수입니다.</param>
      <returns>건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>
        <see langword="IEnumFORMATETC" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="newEnum">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt">
        <paramref name="rgelt" />에서 반환할 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 참조의 수입니다.</param>
      <param name="rgelt">이 메서드가 반환될 때 열거된 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 참조에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched">이 메서드가 반환될 때 <paramref name="rgelt" />에 열거된 실제 참조 수에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
      <returns>값이 <see langword="S_OK" />인 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt">열거형에서 건너뛸 요소 수입니다.</param>
      <returns>건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>
        <see langword="IEnumMoniker" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt">
        <paramref name="rgelt" />에서 반환할 모니커의 수입니다.</param>
      <param name="rgelt">이 메서드는 반환될 때 열거된 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched">이 메서드는 반환될 때 <paramref name="rgelt" />에 열거된 모니커의 실제 수에 대한 참조를 포함합니다.</param>
      <returns>
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt">열거형에서 건너뛸 요소 수입니다.</param>
      <returns>건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>
        <see langword="IEnumSTATDATA" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="newEnum">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt">
        <paramref name="rgelt" />에서 반환할 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 참조의 수입니다.</param>
      <param name="rgelt">이 메서드가 반환될 때 열거된 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 참조에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched">이 매개 변수가 반환될 때 <paramref name="rgelt" />에 열거된 실제 참조 수에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
      <returns>값이 <see langword="S_OK" />인 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt">열거형에서 건너뛸 요소 수입니다.</param>
      <returns>건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>
        <see langword="IEnumString" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <param name="ppenum">이 메서드가 반환될 때 새로 만들어진 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt">
        <paramref name="rgelt" />에서 반환할 문자열의 수입니다.</param>
      <param name="rgelt">이 메서드는 반환될 때 열거형 문자열에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched">이 메서드는 반환될 때, <paramref name="rgelt" />에 열거된 문자열의 실제 수에 대한 참조를 포함합니다.</param>
      <returns>
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt">열거형에서 건너뛸 요소 수입니다.</param>
      <returns>건너뛴 항목 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>
        <see langword="IEnumVARIANT" /> 인터페이스의 정의를 관리합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>현재 열거자와 열거 상태가 같은 새 열거자를 만듭니다.</summary>
      <returns>새로 만든 열거자에 대한 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 참조입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 검색합니다.</summary>
      <param name="celt">
        <c>rgelt</c>에서 반환할 요소 수입니다.</param>
      <param name="rgVar">이 메서드는 반환될 때 열거된 요소에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pceltFetched">이 메서드는 반환될 때 <c>rgelt</c>에 열거된 요소의 실제 수에 대한 참조를 포함합니다.</param>
      <returns>
        <paramref name="pceltFetched" /> 매개 변수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>열거형 시퀀스를 시작 부분으로 다시 설정합니다.</summary>
      <returns>값이 <see langword="S_OK" />인 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>열거형 시퀀스에서 지정된 수의 항목을 건너뜁니다.</summary>
      <param name="celt">열거형에서 건너뛸 요소 수입니다.</param>
      <returns>건너뛴 요소 수가 <paramref name="celt" /> 매개 변수와 같으면 <see langword="S_OK" />이고, 그렇지 않으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>
        <see langword="IMoniker" />와 <see langword="IPersist" />의 COM 기능이 있는 <see langword="IPersistStream" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>모니커를 사용하여 모니커가 식별하는 개체에 바인딩합니다.</summary>
      <param name="pbc">이 바인딩 작업에서 사용되는 바인딩 컨텍스트 개체의 <see langword="IBindCtx" /> 인터페이스에 대한 참조입니다.</param>
      <param name="pmkToLeft">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="riidResult">모니커가 식별하는 개체와 통신하기 위해 클라이언트에서 사용할 인터페이스의 IID(인터페이스 식별자)입니다.</param>
      <param name="ppvResult">이 메서드는 반환될 때 <paramref name="riidResult" />에서 요청한 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>모니커로 식별된 개체가 들어 있는 스토리지에 대한 인터페이스 포인터를 검색합니다.</summary>
      <param name="pbc">이 바인딩 작업을 수행하는 동안 사용되는 바인드 컨텍스트 개체의 <see langword="IBindCtx" /> 인터페이스에 대한 참조입니다.</param>
      <param name="pmkToLeft">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="riid">요청된 스토리지 인터페이스의 IID(인터페이스 식별자)입니다.</param>
      <param name="ppvObj">이 메서드는 반환될 때 <paramref name="riid" />에서 요청한 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>이 모니커와 다른 모니커가 공유하는 공통 접두사를 사용하여 새 모니커를 만듭니다.</summary>
      <param name="pmkOther">현재 모니커와 공통 접두사를 비교할 다른 모니커의 <see langword="IMoniker" /> 인터페이스에 대한 참조입니다.</param>
      <param name="ppmkPrefix">이 메서드는 반환될 때 현재 모니커와 <paramref name="pmkOther" />의 공통 접두사인 모니커를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>이 모니커와 다른 모니커를 조합하여 새로운 구성 모니커를 만듭니다.</summary>
      <param name="pmkRight">현재 모니커의 끝에 추가할 모니커의 <see langword="IMoniker" /> 인터페이스에 대한 참조입니다.</param>
      <param name="fOnlyIfNotGeneric">호출자가 제네릭이 아닌 구성을 요구한다는 것을 나타내려면 <see langword="true" />입니다. <paramref name="pmkRight" />가 현재 모니커가 제네릭 구성을 만드는 것과 다른 방법으로 결합할 수 있는 모니커 클래스인 경우에만 작업이 진행됩니다. 이 메서드가 필요한 경우 제네릭 구성을 만들 수 있음을 나타내려면 <see langword="false" />입니다.</param>
      <param name="ppmkComposite">이 메서드는 반환될 때 만들어지는 구성 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>구성 모니커의 구성 요소를 열거할 수 있는 열거자에 대한 포인터를 제공합니다.</summary>
      <param name="fForward">모니커를 왼쪽에서 오른쪽으로 열거하려면 <see langword="true" />이고, 오른쪽에서 왼쪽으로 열거하려면 <see langword="false" />입니다.</param>
      <param name="ppenumMoniker">이 메서드는 반환될 때 모니커의 열거자 개체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>개체의 CLSID(클래스 식별자)를 검색합니다.</summary>
      <param name="pClassID">이 메서드는 반환될 때 CLSID를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>사용자가 현재 모니커를 읽을 수 있도록 표현하는 표시 이름을 가져옵니다.</summary>
      <param name="pbc">이 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="ppszDisplayName">이 메서드는 반환될 때 표시 이름 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>개체를 저장하는 데 필요한 스트림의 크기를 바이트 단위로 반환합니다.</summary>
      <param name="pcbSize">이 메서드는 반환될 때 이 개체를 저장하는 데 필요한 스트림의 크기를 바이트 단위로 나타내는 <see langword="long" /> 값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>현재 모니커에서 식별한 개체가 마지막으로 변경된 시간을 나타내는 숫자를 제공합니다.</summary>
      <param name="pbc">이 바인딩 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft">현재 모니커가 구성 모니커의 일부인 경우 해당 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="pFileTime">이 메서드는 반환될 때 마지막으로 변경한 시간을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>모니커의 내부 상태를 사용하여 32비트 정수를 계산합니다.</summary>
      <param name="pdwHash">이 메서드는 반환될 때 이 모니커에 대한 해시 값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>현재 모니커 또는 구조가 비슷한 모니커의 오른쪽에 구성되면 구성이 이루어지지 않는 모니커를 제공합니다.</summary>
      <param name="ppmk">이 메서드는 반환될 때 현재 모니커와 반대되는 모니커를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>마지막으로 저장된 이후 개체의 변경 사항을 검사합니다.</summary>
      <returns>개체가 변경되었으면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>현재 모니커를 지정된 모니커와 비교하여 두 모니커가 같은지 여부를 나타냅니다.</summary>
      <param name="pmkOtherMoniker">비교할 모니커에 대한 참조입니다.</param>
      <returns>모니커가 동일하면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>현재 모니커에서 식별한 개체가 현재 로드되고 실행되는지 여부를 확인합니다.</summary>
      <param name="pbc">이 바인딩 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft">현재 모니커가 구성 모니커의 일부인 경우 현재 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="pmkNewlyRunning">가장 최근에 ROT(실행 개체 테이블)에 추가된 모니커에 대한 참조입니다.</param>
      <returns>
        <see langword="S_OK" />
        <see langword="HRESULT" /> 값(모니커가 실행 중인 경우), <see langword="S_FALSE" /><see langword="HRESULT" /> 값(모니커가 실행 중이 아닌 경우) 또는 <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>모니커가 시스템에 제공된 모니커 클래스 중의 하나인지 여부를 나타냅니다.</summary>
      <param name="pdwMksys">이 메서드는 반환될 때 <see langword="MKSYS" /> 열거형의 값 중 하나이며 COM 모니커 클래스 중 하나를 참조하는 정수에 대한 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>모니커가 시스템 모니커이면 <see langword="S_OK" /><see langword="HRESULT" /> 값이고, 그렇지 않으면 <see langword="S_FALSE" /><see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>이전에 개체가 저장된 스트림에서 해당 개체를 초기화합니다.</summary>
      <param name="pStm">개체가 로드되는 스트림입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" />에서 이해할 수 있을 만큼 지정된 표시 이름의 문자를 읽고, 읽은 부분에 해당하는 모니커를 빌드합니다.</summary>
      <param name="pbc">이 바인딩 작업에서 사용할 바인드 컨텍스트에 대한 참조입니다.</param>
      <param name="pmkToLeft">표시 이름에서 이 지점까지 빌드된 모니커에 대한 참조입니다.</param>
      <param name="pszDisplayName">구문 분석할 나머지 표시 이름이 들어 있는 문자열에 대한 참조입니다.</param>
      <param name="pchEaten">이 메서드는 반환될 때 <paramref name="pszDisplayName" />을 구문 분석할 때 사용한 문자 수를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="ppmkOut">이 메서드는 반환될 때 <paramref name="pszDisplayName" />에서 빌드된 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>현재 모니커와 같은 개체를 참조하지만 더 크거나 같은 효율로 바인딩될 수 있는 다른 모니커인 축소된 모니커를 반환합니다.</summary>
      <param name="pbc">이 바인딩 작업에 사용할 바인드 컨텍스트의 <see langword="IBindCtx" /> 인터페이스에 대한 참조입니다.</param>
      <param name="dwReduceHowFar">현재 모니커를 얼마나 축소할지 지정하는 값입니다.</param>
      <param name="ppmkToLeft">현재 모니커의 왼쪽에 있는 모니커에 대한 참조입니다.</param>
      <param name="ppmkReduced">이 메서드는 반환될 때 현재 모니커의 축소된 형식에 대한 참조를 포함합니다. 이 참조는 오류가 발생하거나 현재 모니커가 축소되지 않을 경우 <see langword="null" />이 될 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>현재 모니커나 구조가 비슷한 모니커에 추가될 때 지정된 모니커를 생성하는 모니커를 제공합니다.</summary>
      <param name="pmkOther">상대 경로를 사용할 모니커에 대한 참조입니다.</param>
      <param name="ppmkRelPath">이 메서드는 반환될 때 상대 모니커에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>개체를 지정된 스트림에 저장합니다.</summary>
      <param name="pStm">개체를 저장할 스트림입니다.</param>
      <param name="fClearDirty">저장이 완료된 후 수정된 플래그를 지우려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>구현되거나 상속된 인터페이스 형식의 특성을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>인터페이스나 dispinterface는 소스나 싱크의 기본값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>싱크는 VTBL(가상 함수 테이블)을 통해 이벤트를 받습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>사용자가 멤버를 표시하거나 프로그래밍할 수 없어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>coclass의 이 멤버는 구현되는 것이 아니라 호출됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>
        <see langword="IDispatch::Invoke" />를 사용하여 함수를 호출하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>일반 함수 호출 구문을 통해 멤버가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>일반 속성 액세스 구문을 통해 함수가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>속성 값 할당 구문을 통해 함수가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>속성 참조 할당 구문을 통해 함수가 호출됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>
        <see langword="IPersistFile" />의 기능이 있는 <see langword="IPersist" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>개체의 CLSID(클래스 식별자)를 검색합니다.</summary>
      <param name="pClassID">이 메서드는 반환될 때 CLSID에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>개체의 현재 작업 파일의 절대 경로를 검색하거나 현재 작업 파일이 없는 경우에는 개체의 기본 파일 이름 프롬프트를 검색합니다.</summary>
      <param name="ppszFileName">이 메서드는 반환될 때 현재 파일의 경로가 들어 있는 0으로 끝나는 문자열에 대한 포인터의 주소 또는 기본 파일 이름 프롬프트(예: *.txt)를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>현재 파일에 마지막으로 저장된 이후 개체의 변경 사항을 검사합니다.</summary>
      <returns>마지막으로 저장된 이후 파일이 변경되었으면 <see langword="S_OK" />이고, 변경되지 않았으면 <see langword="S_FALSE" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>지정된 파일을 열고 파일 내용에서 개체를 초기화합니다.</summary>
      <param name="pszFileName">열려는 파일의 절대 경로가 들어 있는 0으로 끝나는 문자열입니다.</param>
      <param name="dwMode">
        <paramref name="pszFileName" />을 열 액세스 모드를 표시할 <see langword="STGM" /> 열거형에 있는 값의 조합입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>지정된 파일에 개체의 복사본을 저장합니다.</summary>
      <param name="pszFileName">개체가 저장되는 파일의 절대 경로가 들어 있는 0으로 끝나는 문자열입니다.</param>
      <param name="fRemember">
        <paramref name="pszFileName" /> 매개 변수를 현재 작업 파일로 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>개체가 해당 파일에 쓸 수 있다는 것을 개체에 알립니다.</summary>
      <param name="pszFileName">개체가 이미 저장되어 있는 파일의 절대 경로입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>
        <see langword="IRunningObjectTable" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>실행 중 등록된 개체를 열거합니다.</summary>
      <param name="ppenumMoniker">이 메서드는 반환될 때 ROT(실행 개체 테이블)에 대한 새 열거자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>제공된 개체 이름이 실행 중에 등록되면 등록된 개체를 반환합니다.</summary>
      <param name="pmkObjectName">ROT(실행 개체 테이블)에서 검색할 모니커에 대한 참조입니다.</param>
      <param name="ppunkObject">이 메서드는 반환될 때 요청한 실행 개체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>작업의 성공이나 실패를 나타내는 <see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>ROT(실행 개체 테이블)에서 이 모니커를 검색하고 기록된 변경 시간이 있으면 이를 보고합니다.</summary>
      <param name="pmkObjectName">ROT(실행 개체 테이블)에서 검색할 모니커에 대한 참조입니다.</param>
      <param name="pfiletime">이 개체는 반환될 때 개체가 마지막으로 변경된 시간을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>작업의 성공이나 실패를 나타내는 <see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>지정한 모니커가 ROT(실행 개체 테이블)에 현재 등록되어 있는지 여부를 확인합니다.</summary>
      <param name="pmkObjectName">ROT(실행 개체 테이블)에서 검색할 모니커에 대한 참조입니다.</param>
      <returns>작업의 성공이나 실패를 나타내는 <see langword="HRESULT" /> 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>특정 개체가 변경된 시간을 기록하여 <see langword="IMoniker::GetTimeOfLastChange" />가 해당 변경 시간을 보고할 수 있도록 합니다.</summary>
      <param name="dwRegister">변경된 개체의 ROT(실행 개체 테이블) 항목입니다.</param>
      <param name="pfiletime">개체가 마지막으로 변경된 시간에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>제공된 개체가 실행 상태로 들어갔음을 등록합니다.</summary>
      <param name="grfFlags">
        <paramref name="punkObject" />에 대한 ROT(실행 개체 테이블)의 참조가 약한지 강한지 여부를 지정하여 ROT에 있는 항목을 통해 개체에 액세스하는 것을 제어합니다.</param>
      <param name="punkObject">실행 중 등록되는 개체에 대한 참조입니다.</param>
      <param name="pmkObjectName">
        <paramref name="punkObject" />를 식별하는 모니커에 대한 참조입니다.</param>
      <returns>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> 또는 <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />에 대한 이후 호출에서 이 ROT 항목을 식별하는 데 사용할 수 있는 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>ROT(실행 개체 테이블)에서 지정한 개체의 등록을 취소합니다.</summary>
      <param name="dwRegister">취소할 ROT(실행 개체 테이블) 항목입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>
        <see langword="IStream" /> 기능이 있는 <see langword="ISequentialStream" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>동일한 바이트를 원래의 스트림으로 참조하는 자체 검색 포인터를 사용하여 새 스트림 개체를 만듭니다.</summary>
      <param name="ppstm">이 메서드는 반환될 때 새 스트림 개체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>트랜잭트 모드에서 열려 있는 스트림 개체에 대한 변경 사항이 모두 부모 스토리지에 반영되도록 합니다.</summary>
      <param name="grfCommitFlags">스트림 개체에 대한 변경 사항이 커밋되는 방법을 제어하는 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>스트림에 있는 현재 검색 포인터에서 다른 스트림에 있는 현재 검색 포인터로 지정된 바이트 수를 복사합니다.</summary>
      <param name="pstm">대상 스트림에 대한 참조입니다.</param>
      <param name="cb">소스 스트림에서 복사할 바이트 수입니다.</param>
      <param name="pcbRead">반환이 성공적이면, 소스에서 읽은 실제 바이트 수를 포함합니다.</param>
      <param name="pcbWritten">반환이 성공적이면, 대상에 쓰여진 실제 바이트 수를 포함합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>스트림에서 지정된 바이트 범위로 액세스하는 것을 제한합니다.</summary>
      <param name="libOffset">시작 범위에 대한 바이트 오프셋입니다.</param>
      <param name="cb">제한할 범위의 길이(바이트)입니다.</param>
      <param name="dwLockType">범위에 액세스할 때 필요한 제한입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>현재 검색 포인터에서 스트림 개체에서 메모리 시작까지 지정된 바이트 수를 읽습니다.</summary>
      <param name="pv">이 메서드는 반환될 때 해당 스트림에서 읽은 데이터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="cb">스트림 개체에서 읽을 바이트 수입니다.</param>
      <param name="pcbRead">스트림 개체에서 읽은 실제 바이트 수를 받는 <see langword="ULONG" /> 변수에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>마지막 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 호출 이후 트랜잭트 스트림에서 일어난 모든 변경 내용을 삭제합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>검색 포인터를 스트림의 시작 부분, 스트림의 끝 부분 또는 현재 검색 포인터와 관련된 새 위치로 변경합니다.</summary>
      <param name="dlibMove">
        <paramref name="dwOrigin" />에 추가할 변위입니다.</param>
      <param name="dwOrigin">검색할 원점입니다. 원점은 파일의 시작, 현재 검색 포인터 또는 파일의 끝일 수 있습니다.</param>
      <param name="plibNewPosition">반환이 성공적이면, 스트림의 시작 부분에서 검색 포인터의 오프셋을 포함합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>스트림 개체의 크기를 변경합니다.</summary>
      <param name="libNewSize">바이트 단위로 표현된 스트림의 새 크기입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>이 스트림에 대한 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 구조를 검색합니다.</summary>
      <param name="pstatstg">이 메서드는 반환될 때 이 스트림 개체를 설명하는 <see langword="STATSTG" /> 구조체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="grfStatFlag">이 메서드가 반환되지 않으므로 메모리 할당 작업이 없는 <see langword="STATSTG" /> 구조체의 멤버입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>이전에 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 메서드를 통해 제한한 바이트의 범위에 대한 액세스 제한을 제거합니다.</summary>
      <param name="libOffset">시작 범위에 대한 바이트 오프셋입니다.</param>
      <param name="cb">제한할 범위의 길이(바이트)입니다.</param>
      <param name="dwLockType">이전에 범위에 배치된 액세스 제한입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>현재 검색 포인터에서 스트림 개체 시작에 지정된 바이트 수를 씁니다.</summary>
      <param name="pv">이 스트림을 쓸 버퍼입니다.</param>
      <param name="cb">스트림에 쓸 바이트 수입니다.</param>
      <param name="pcbWritten">반환이 성공적이면, 스트림 개체에 쓰여진 실제 바이트 수를 포함합니다. 호출자가 이 포인터를 <see cref="F:System.IntPtr.Zero" />로 설정하면 이 메서드는 쓰여진 실제 바이트 수를 제공하지 않습니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>
        <see langword="ITypeComp" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>이름을 형식 멤버에 매핑하거나 형식 라이브러리에 있는 전역 변수와 함수를 바인딩합니다.</summary>
      <param name="szName">바인딩할 이름입니다.</param>
      <param name="lHashVal">
        <see langword="LHashValOfNameSys" />를 사용하여 계산되는 <paramref name="szName" />의 해시 값입니다.</param>
      <param name="wFlags">여기에 사용된 단어 flags는 <see langword="INVOKEKIND" /> 열거형에 정의된 하나 이상의 호출 플래그를 나타냅니다.</param>
      <param name="ppTInfo">이 메서드는 반환될 때 <see langword="FUNCDESC" /> 또는 <see langword="VARDESC" />가 반환된 경우 바인딩 대상 항목이 들어 있는 형식 설명에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pDescKind">이 메서드는 반환될 때 바인딩되는 이름이 <see langword="DESCKIND" />, <see langword="VARDESC" />인지 또는 <see langword="FUNCDESC" />인지 표시하는 <see langword="TYPECOMP" /> 열거자에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pBindPtr">이 메서드는 반환될 때 바인딩 대상 <see langword="VARDESC" />, <see langword="FUNCDESC" /> 및 <see langword="ITypeComp" /> 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>형식 라이브러리에 있는 형식 설명에 바인딩합니다.</summary>
      <param name="szName">바인딩할 이름입니다.</param>
      <param name="lHashVal">
        <see langword="LHashValOfNameSys" />를 사용하여 확인되는 <paramref name="szName" />의 해시 값입니다.</param>
      <param name="ppTInfo">이 메서드는 반환될 때 <paramref name="szName" />이 바인딩된 대상 형식의 <see langword="ITypeInfo" />에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="ppTComp">이 메서드는 반환될 때 <see langword="ITypeComp" /> 변수에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>구성 요소 자동화 ITypeInfo 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>DLL에 정의된 것과 같은 정적 함수나 변수의 주소를 검색합니다.</summary>
      <param name="memid">검색할 <see langword="static" /> 멤버 주소의 멤버 ID입니다.</param>
      <param name="invKind">멤버가 속성인지 여부와 속성일 경우 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="ppv">이 메서드는 반환될 때 <see langword="static" /> 멤버에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>구성 요소 클래스(coclass)를 설명하는 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="pUnkOuter">제어용 <see langword="IUnknown" />으로 작용하는 개체입니다.</param>
      <param name="riid">호출자가 결과 개체와 통신하기 위해 사용하는 인터페이스의 IID입니다.</param>
      <param name="ppvObj">이 메서드는 반환될 때 만들어진 개체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>이 형식 설명과 해당 형식 라이브러리에 있는 인덱스를 포함하는 형식 라이브러리를 검색합니다.</summary>
      <param name="ppTLB">이 메서드는 반환될 때 포함하는 형식 라이브러리에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pIndex">이 메서드는 반환될 때 포함하는 형식 라이브러리에 있는 형식 설명의 인덱스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>DLL에 있는 함수에 대한 진입점의 설명 또는 사양을 검색합니다.</summary>
      <param name="memid">DLL 항목 설명이 반환되는 멤버 함수의 ID입니다.</param>
      <param name="invKind">
        <paramref name="memid" />로 식별되는 멤버 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="pBstrDllName">
        <see langword="null" />이 아니면 함수는 DLL의 이름을 포함하는 <see langword="BSTR" />에 <paramref name="pBstrDllName" />을 설정합니다.</param>
      <param name="pBstrName">
        <see langword="null" />이 아니면 함수는 진입점의 이름을 포함하는 <see langword="BSTR" />에 <c>lpbstrName</c>을 설정합니다.</param>
      <param name="pwOrdinal">
        <see langword="null" />이 아니고 함수가 서수에 의해 정의되면 <c>lpwOrdinal</c>이 서수를 가리키도록 설정됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>설명서 문자열, 전체 도움말 파일 이름과 경로, 지정된 형식 설명에 대한 도움말 항목의 컨텍스트 ID를 검색합니다.</summary>
      <param name="index">설명서가 반환되는 멤버의 ID입니다.</param>
      <param name="strName">이 메서드는 반환될 때 항목 메서드의 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString">이 메서드가 반환될 때 지정된 항목에 대한 설명서 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile">이 메서드는 반환될 때 도움말 파일의 정규화된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>지정된 함수에 대한 정보가 들어 있는 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체를 검색합니다.</summary>
      <param name="index">반환할 함수 설명의 인덱스입니다.</param>
      <param name="ppFuncDesc">이 메서드는 반환될 때 지정한 함수를 설명하는 <see langword="FUNCDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>멤버 이름과 멤버 ID, 매개 변수 이름과 매개 변수 ID를 매핑합니다.</summary>
      <param name="rgszNames">매핑할 이름 배열입니다.</param>
      <param name="cNames">매핑할 이름의 수입니다.</param>
      <param name="pMemId">이 메서드는 반환될 때 이름 매핑이 저장될 배열에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>형식 설명의 구현된 인터페이스나 기본 인터페이스에 대한 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 값을 검색합니다.</summary>
      <param name="index">구현된 인터페이스나 기본 인터페이스의 인덱스입니다.</param>
      <param name="pImplTypeFlags">이 메서드는 반환될 때 <see langword="IMPLTYPEFLAGS" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>마샬링 정보를 검색합니다.</summary>
      <param name="memid">마샬링 정보가 필요함을 나타내는 멤버 ID입니다.</param>
      <param name="pBstrMops">이 메서드는 반환될 때 참조된 형식 설명에 설명된 구조체의 필드를 마샬링하는 데 사용한 <see langword="opcode" /> 문자열에 대한 참조를 포함합니다. 반환할 정보가 없으면 <see langword="null" />을 반환합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>지정한 함수 ID에 해당하는 지정한 멤버 ID를 가진 변수(속성, 메서드 및 해당 매개 변수의 이름)를 검색합니다.</summary>
      <param name="memid">이름 또는 이름들을 반환할 멤버의 ID입니다.</param>
      <param name="rgBstrNames">이 메서드는 반환되면, 멤버와 연관된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 배열의 길이입니다.</param>
      <param name="pcNames">이 메서드는 반환될 때 <paramref name="rgBstrNames" /> 배열에 이름 수를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>형식 설명에서 다른 형식 설명을 참조할 경우 참조된 형식 설명을 검색합니다.</summary>
      <param name="hRef">반환할 참조된 형식 설명에 대한 핸들입니다.</param>
      <param name="ppTI">이 메서드는 반환될 때 참조된 형식 설명을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>형식 설명이 COM 클래스를 설명할 경우 구현된 인터페이스 형식에 대한 형식 설명을 검색합니다.</summary>
      <param name="index">핸들이 반환되는 구현된 형식의 인덱스입니다.</param>
      <param name="href">이 메서드는 반환될 때 구현된 인터페이스의 핸들에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>형식 설명의 특성이 들어 있는 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 구조체를 검색합니다.</summary>
      <param name="ppTypeAttr">이 메서드는 반환될 때 이 형식 설명의 특성을 포함하는 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>클라이언트 컴파일러가 형식 설명의 멤버를 바인딩할 수 있도록 하는 형식 설명에 대한 <see langword="ITypeComp" /> 인터페이스를 검색합니다.</summary>
      <param name="ppTComp">이 메서드는 반환될 때 포함하는 형식 라이브러리의 <see langword="ITypeComp" /> 인터페이스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>지정된 변수를 설명하는 <see langword="VARDESC" /> 구조를 검색합니다.</summary>
      <param name="index">반환할 변수 설명의 인덱스입니다.</param>
      <param name="ppVarDesc">이 메서드는 반환될 때 지정한 변수를 설명하는 <see langword="VARDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>메서드를 호출하거나 개체의 속성에 액세스하여 형식 설명에서 설명한 인터페이스를 구현합니다.</summary>
      <param name="pvInstance">이 형식 설명에 설명된 인터페이스에 대한 참조입니다.</param>
      <param name="memid">인터페이스 멤버를 식별하는 값입니다.</param>
      <param name="wFlags">Invoke 호출의 컨텍스트를 설명하는 플래그입니다.</param>
      <param name="pDispParams">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 들어 있는 구조체에 대한 참조입니다.</param>
      <param name="pVarResult">결과를 저장할 위치에 대한 참조입니다. <paramref name="wFlags" />가 <see langword="DISPATCH_PROPERTYPUT" /> 또는 <see langword="DISPATCH_PROPERTYPUTREF" />를 지정하는 경우에는 <paramref name="pVarResult" />가 무시됩니다. 결과가 필요하지 않으면 <see langword="null" />로 설정합니다.</param>
      <param name="pExcepInfo">예외 정보 구조체에 대한 포인터로, <see langword="DISP_E_EXCEPTION" />이 반환되는 경우에만 채워집니다.</param>
      <param name="puArgErr">
        <see langword="Invoke" />가 <see langword="DISP_E_TYPEMISMATCH" />를 반환하는 경우 <paramref name="puArgErr" />는 형식이 잘못된 인수의 <c>rgvarg</c> 내에 있는 인덱스를 나타냅니다. 둘 이상의 인수가 오류를 반환하면 <paramref name="puArgErr" />는 오류를 포함하는 첫 번째 인수만 나타냅니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>이전에 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pFuncDesc">해제할 <see langword="FUNCDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>이전에 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTypeAttr">해제할 <see langword="TYPEATTR" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>이전에 <see langword="VARDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pVarDesc">해제할 <see langword="VARDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>
        <see langword="ITypeInfo2" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>DLL에 정의된 것과 같은 정적 함수나 변수의 주소를 검색합니다.</summary>
      <param name="memid">검색할 <see langword="static" /> 멤버 주소의 멤버 ID입니다.</param>
      <param name="invKind">멤버가 속성인지 여부와 속성일 경우 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="ppv">이 메서드는 반환될 때 <see langword="static" /> 멤버에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>구성 요소 클래스(coclass)를 설명하는 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="pUnkOuter">제어용 <see langword="IUnknown" />으로 작용하는 개체입니다.</param>
      <param name="riid">호출자가 결과 개체와 통신하기 위해 사용하는 인터페이스의 IID입니다.</param>
      <param name="ppvObj">이 메서드는 반환될 때 만들어진 개체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>라이브러리에 대한 모든 사용자 지정 데이터 항목을 가져옵니다.</summary>
      <param name="pCustData">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>지정한 함수에서 모든 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="index">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="pCustData">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>지정된 구현 형식에 대한 모든 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="index">사용자 지정 데이터에 대한 구현 형식의 인덱스입니다.</param>
      <param name="pCustData">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>지정된 함수 매개 변수에 대한 모든 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="indexFunc">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="indexParam">사용자 지정 데이터를 가져올 이 함수의 매개 변수 인덱스입니다.</param>
      <param name="pCustData">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>사용자 지정 데이터에 대한 변수를 가져옵니다.</summary>
      <param name="index">사용자 지정 데이터를 가져올 변수의 인덱스입니다.</param>
      <param name="pCustData">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>이 형식 설명과 해당 형식 라이브러리에 있는 인덱스를 포함하는 형식 라이브러리를 검색합니다.</summary>
      <param name="ppTLB">이 메서드는 반환될 때 포함하는 형식 라이브러리에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pIndex">이 메서드는 반환될 때 포함하는 형식 라이브러리에 있는 형식 설명의 인덱스에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>사용자 지정 데이터를 가져옵니다.</summary>
      <param name="guid">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>DLL에 있는 함수에 대한 진입점의 설명 또는 사양을 검색합니다.</summary>
      <param name="memid">DLL 항목 설명이 반환되는 멤버 함수의 ID입니다.</param>
      <param name="invKind">
        <paramref name="memid" />로 식별되는 멤버 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="pBstrDllName">
        <see langword="null" />이 아니면 함수는 DLL의 이름을 포함하는 <see langword="BSTR" />에 <paramref name="pBstrDllName" />을 설정합니다.</param>
      <param name="pBstrName">
        <see langword="null" />이 아니면 함수는 진입점의 이름을 포함하는 <see langword="BSTR" />에 <c>lpbstrName</c>을 설정합니다.</param>
      <param name="pwOrdinal">
        <see langword="null" />이 아니고 함수가 서수에 의해 정의되면 <c>lpwOrdinal</c>이 서수를 가리키도록 설정됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>설명서 문자열, 전체 도움말 파일 이름과 경로, 지정된 형식 설명에 대한 도움말 항목의 컨텍스트 ID를 검색합니다.</summary>
      <param name="index">설명서가 반환되는 멤버의 ID입니다.</param>
      <param name="strName">이 메서드는 반환될 때 항목 메서드의 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString">이 메서드가 반환될 때 지정된 항목에 대한 설명서 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile">이 메서드는 반환될 때 도움말 파일의 정규화된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>설명서 문자열, 전체 도움말 파일 이름 및 경로, 사용할 지역화 컨텍스트, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 ID를 검색합니다.</summary>
      <param name="memid">형식 설명에 대한 멤버 식별자입니다.</param>
      <param name="pbstrHelpString">이 메서드는 반환될 때 지정된 항목의 이름이 포함된 <see langword="BSTR" />을 포함합니다. 호출자에게 항목 이름이 필요 없는 경우 <paramref name="pbstrHelpString" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pdwHelpStringContext">이 메서드의 반환 값에 도움말 지역화 컨텍스트가 포함됩니다. 호출자에게 도움말 컨텍스트가 필요 없는 경우 <paramref name="pdwHelpStringContext" />는 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pbstrHelpStringDll">이 메서드의 반환 값에 도움말 파일에 사용되는 DLL이 들어 있는 파일의 정규화된 이름이 포함된 <see langword="BSTR" />이 포함됩니다. 호출자에게 파일 이름이 필요 없는 경우 <paramref name="pbstrHelpStringDll" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>지정된 함수에서 사용자 지정 데이터를 가져옵니다.</summary>
      <param name="index">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="guid">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal">이 메서드가 반환될 때 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>지정된 함수에 대한 정보가 들어 있는 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 구조체를 검색합니다.</summary>
      <param name="index">반환할 함수 설명의 인덱스입니다.</param>
      <param name="ppFuncDesc">이 메서드는 반환될 때 지정한 함수를 설명하는 <see langword="FUNCDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>알려진 DISPID를 기준으로 특정 멤버에 바인딩합니다. 여기서는 멤버 이름이 알려져 있지 않습니다(예: 기본 멤버에 바인딩할 경우).</summary>
      <param name="memid">멤버 식별자입니다.</param>
      <param name="invKind">memid로 식별되는 멤버의 종류를 지정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 값 중 하나입니다.</param>
      <param name="pFuncIndex">이 메서드의 반환 값에는 함수에 대한 인덱스가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>멤버 이름과 멤버 ID, 매개 변수 이름과 매개 변수 ID를 매핑합니다.</summary>
      <param name="rgszNames">매핑할 이름 배열입니다.</param>
      <param name="cNames">매핑할 이름의 수입니다.</param>
      <param name="pMemId">이 메서드는 반환될 때 이름 매핑이 저장될 배열에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>사용자 지정 데이터의 구현 형식을 가져옵니다.</summary>
      <param name="index">사용자 지정 데이터에 대한 구현 형식의 인덱스입니다.</param>
      <param name="guid">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>형식 설명의 구현된 인터페이스나 기본 인터페이스에 대한 <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 값을 검색합니다.</summary>
      <param name="index">구현된 인터페이스나 기본 인터페이스의 인덱스입니다.</param>
      <param name="pImplTypeFlags">이 메서드는 반환될 때 <see langword="IMPLTYPEFLAGS" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>마샬링 정보를 검색합니다.</summary>
      <param name="memid">마샬링 정보가 필요함을 나타내는 멤버 ID입니다.</param>
      <param name="pBstrMops">이 메서드는 반환될 때 참조된 형식 설명에 설명된 구조체의 필드를 마샬링하는 데 사용한 <see langword="opcode" /> 문자열에 대한 참조를 포함합니다. 반환할 정보가 없으면 <see langword="null" />을 반환합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>지정한 함수 ID에 해당하는 지정한 멤버 ID를 가진 변수(속성, 메서드 및 해당 매개 변수의 이름)를 검색합니다.</summary>
      <param name="memid">이름 또는 이름들을 반환할 멤버의 ID입니다.</param>
      <param name="rgBstrNames">이 메서드는 반환되면, 멤버와 연관된 이름을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 배열의 길이입니다.</param>
      <param name="pcNames">이 메서드는 반환될 때 <paramref name="rgBstrNames" /> 배열에 이름 수를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>지정된 사용자 지정 데이터 매개 변수를 가져옵니다.</summary>
      <param name="indexFunc">사용자 지정 데이터를 가져올 함수의 인덱스입니다.</param>
      <param name="indexParam">사용자 지정 데이터를 가져올 이 함수의 매개 변수 인덱스입니다.</param>
      <param name="guid">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>형식 설명에서 다른 형식 설명을 참조할 경우 참조된 형식 설명을 검색합니다.</summary>
      <param name="hRef">반환할 참조된 형식 설명에 대한 핸들입니다.</param>
      <param name="ppTI">이 메서드는 반환될 때 참조된 형식 설명을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>형식 설명이 COM 클래스를 설명할 경우 구현된 인터페이스 형식에 대한 형식 설명을 검색합니다.</summary>
      <param name="index">핸들이 반환되는 구현된 형식의 인덱스입니다.</param>
      <param name="href">이 메서드는 반환될 때 구현된 인터페이스의 핸들에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>형식 설명의 특성이 들어 있는 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 구조체를 검색합니다.</summary>
      <param name="ppTypeAttr">이 메서드는 반환될 때 이 형식 설명의 특성을 포함하는 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>클라이언트 컴파일러가 형식 설명의 멤버를 바인딩할 수 있도록 하는 형식 설명에 대한 <see langword="ITypeComp" /> 인터페이스를 검색합니다.</summary>
      <param name="ppTComp">이 메서드는 반환될 때 포함하는 형식 라이브러리의 <see langword="ITypeComp" />에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>할당 없이 형식 플래그를 반환합니다. 이 메서드는 <see langword="TYPEATTR" />(형식 특성)을 늘리지 않으면서 형식 플래그를 확장하는 <see langword="DWORD" /> 형식 플래그를 확장합니다.</summary>
      <param name="pTypeFlags">이 메서드는 반환될 때 <see langword="TYPEFLAG" />에 대한 <see langword="DWORD" /> 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>할당을 수행하지 않고 <see langword="TYPEKIND" /> 열거형을 빠르게 반환합니다.</summary>
      <param name="pTypeKind">이 메서드는 반환될 때 <see langword="TYPEKIND" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>사용자 지정 데이터에 대한 변수를 가져옵니다.</summary>
      <param name="index">사용자 지정 데이터를 가져올 변수의 인덱스입니다.</param>
      <param name="guid">데이터을 식별하는 데 사용되는 GUID입니다.</param>
      <param name="pVarVal">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 <see langword="Object" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>지정된 변수를 설명하는 <see langword="VARDESC" /> 구조를 검색합니다.</summary>
      <param name="index">반환할 변수 설명의 인덱스입니다.</param>
      <param name="ppVarDesc">이 메서드는 반환될 때 지정한 변수를 설명하는 <see langword="VARDESC" /> 구조체에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>알려진 <see langword="DISPID" />를 기준으로 특정 멤버에 바인딩합니다. 여기서는 멤버 이름이 알려져 있지 않습니다(예: 기본 멤버에 바인딩할 경우).</summary>
      <param name="memid">멤버 식별자입니다.</param>
      <param name="pVarIndex">이 메서드의 반환 값에는 <paramref name="memid" />의 인덱스가 포함됩니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>메서드를 호출하거나 개체의 속성에 액세스하여 형식 설명에서 설명한 인터페이스를 구현합니다.</summary>
      <param name="pvInstance">이 형식 설명에 설명된 인터페이스에 대한 참조입니다.</param>
      <param name="memid">인터페이스 멤버의 식별자입니다.</param>
      <param name="wFlags">Invoke 호출의 컨텍스트를 설명하는 플래그입니다.</param>
      <param name="pDispParams">인수의 배열, 명명된 인수에 대한 인수 DISPID의 배열 및 배열에 있는 요소의 개수가 들어 있는 구조체에 대한 참조입니다.</param>
      <param name="pVarResult">결과를 저장할 위치에 대한 참조입니다. <paramref name="wFlags" />가 <see langword="DISPATCH_PROPERTYPUT" /> 또는 <see langword="DISPATCH_PROPERTYPUTREF" />를 지정하는 경우에는 <paramref name="pVarResult" />가 무시됩니다. 결과가 필요하지 않으면 <see langword="null" />로 설정합니다.</param>
      <param name="pExcepInfo">예외 정보 구조체에 대한 포인터로, <see langword="DISP_E_EXCEPTION" />이 반환되는 경우에만 채워집니다.</param>
      <param name="puArgErr">
        <see langword="Invoke" />가 <see langword="DISP_E_TYPEMISMATCH" />를 반환하는 경우 <paramref name="puArgErr" />는 형식이 잘못된 인수의 인덱스를 나타냅니다. 둘 이상의 인수가 오류를 반환하면 <paramref name="puArgErr" />는 오류를 포함하는 첫 번째 인수만 나타냅니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>이전에 <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pFuncDesc">해제할 <see langword="FUNCDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>이전에 <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTypeAttr">해제할 <see langword="TYPEATTR" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>이전에 <see langword="VARDESC" /> 메서드에서 반환한 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pVarDesc">해제할 <see langword="VARDESC" /> 구조체에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>
        <see langword="ITypeLib" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>형식 라이브러리에 들어 있는 형식 설명의 항목을 찾습니다.</summary>
      <param name="szNameBuf">검색할 이름입니다. 이는 in/out 매개 변수입니다.</param>
      <param name="lHashVal">검색 속도를 높이기 위한 해시 값이며 <see langword="LHashValOfNameSys" /> 함수에서 계산됩니다. <paramref name="lHashVal" />이 0이면 값이 계산됩니다.</param>
      <param name="ppTInfo">이 메서드는 반환될 때 <paramref name="szNameBuf" />에 지정된 이름을 포함하는 형식 설명에 대한 포인터의 배열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="rgMemId">발견된 항목에 대한 <see langword="MEMBERID" />의 배열 <paramref name="rgMemId" />[i]는 <paramref name="ppTInfo" />[i]에서 지정한 형식 설명으로 인덱스를 만드는 <see langword="MEMBERID" />이며 <see langword="null" />일 수 없습니다.</param>
      <param name="pcFound">항목에서 찾을 인스턴스의 수를 나타냅니다. 예를 들어, 첫 번째 항목을 찾기 위해 <paramref name="pcFound" /> = 1을 호출할 수 있습니다. 이때 인스턴스를 하나 발견하면 검색을 중지합니다.
종료할 때 발견한 인스턴스의 수를 알려 줍니다. <paramref name="pcFound" />의 <see langword="in" />과 <see langword="out" />의 값이 동일하면 이름을 포함하는 형식 설명이 더 많을 수 있습니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>라이브러리의 설명서 문자열, 전체 도움말 파일 이름과 경로, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 식별자를 검색합니다.</summary>
      <param name="index">반환될 설명서가 있는 형식 설명의 인덱스입니다.</param>
      <param name="strName">이 메서드는 반환될 때 지정한 항목의 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString">이 메서드는 반환될 때 지정한 항목의 설명서 문자열을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트 식별자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile">이 메서드는 반환될 때 도움말 파일의 정규화된 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>라이브러리의 특성이 들어 있는 구조를 검색합니다.</summary>
      <param name="ppTLibAttr">이 메서드는 반환될 때 라이브러리의 특성을 포함하는 구조체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>클라이언트 컴파일러가 라이브러리의 형식, 변수, 상수 및 전역 함수를 바인딩할 수 있도록 합니다.</summary>
      <param name="ppTComp">이 메서드는 반환될 때 이 <see langword="ITypeComp" />에 대한 <see langword="ITypeLib" /> 인스턴스의 인스턴스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>라이브러리에서 지정된 형식 설명을 검색합니다.</summary>
      <param name="index">반환할 <see langword="ITypeInfo" /> 인터페이스의 인덱스입니다.</param>
      <param name="ppTI">이 메서드는 반환될 때 <paramref name="index" />가 참조하는 형식을 설명하는 <see langword="ITypeInfo" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>형식 라이브러리에 있는 형식 설명의 수를 반환합니다.</summary>
      <returns>형식 라이브러리에 있는 형식 설명의 수입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>지정된 GUID에 해당하는 형식 설명을 검색합니다.</summary>
      <param name="guid">형식 정보가 필요한 클래스 CLSID 또는 인터페이스 IID입니다.</param>
      <param name="ppTInfo">이 메서드는 반환될 때 요청한 <see langword="ITypeInfo" /> 인터페이스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>형식 설명의 형식을 검색합니다.</summary>
      <param name="index">형식 라이브러리에 있는 형식 설명의 인덱스입니다.</param>
      <param name="pTKind">이 메서드는 반환될 때 형식 설명의 <see langword="TYPEKIND" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>라이브러리에 설명되어 있는 형식이나 멤버의 이름이 전달된 문자열에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="szNameBuf">테스트할 문자열입니다. 이는 in/out 매개 변수입니다.</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" />의 해시 값입니다.</param>
      <returns>
        <paramref name="szNameBuf" />가 형식 라이브러리에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 메서드에서 처음 가져온 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTLibAttr">해제할 <see langword="TLIBATTR" /> 구조체입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>
        <see langword="ITypeLib2" /> 인터페이스의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>형식 라이브러리에 들어 있는 형식 설명의 항목을 찾습니다.</summary>
      <param name="szNameBuf">검색할 이름입니다.</param>
      <param name="lHashVal">검색 속도를 높이기 위한 해시 값이며 <see langword="LHashValOfNameSys" /> 함수에서 계산됩니다. <paramref name="lHashVal" />이 0이면 값이 계산됩니다.</param>
      <param name="ppTInfo">이 메서드는 반환될 때 <paramref name="szNameBuf" />에 지정된 이름을 포함하는 형식 설명에 대한 포인터의 배열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="rgMemId">이 메서드가 반환될 때 찾은 항목에 대한 <see langword="MEMBERID" />의 배열을 포함합니다. <paramref name="rgMemId" />[i]는 <paramref name="ppTInfo" />[i]에서 지정한 형식 설명으로 인덱싱하는 <see langword="MEMBERID" />입니다. 이 매개 변수는 <see langword="null" />일 수 없습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pcFound">메서드가 시작될 때 참조로 전달되는 값으로, 찾을 인스턴스의 수를 나타냅니다. 예를 들어, 첫 번째 항목을 찾기 위해 <paramref name="pcFound" /> = 1을 호출할 수 있습니다. 이때 인스턴스를 하나 발견하면 검색을 중지합니다.
종료할 때 발견한 인스턴스의 수를 알려 줍니다. <paramref name="pcFound" />의 <see langword="in" />과 <see langword="out" />의 값이 동일하면 이름을 포함하는 형식 설명이 더 많을 수 있습니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>라이브러리에 대한 모든 사용자 지정 데이터 항목을 가져옵니다.</summary>
      <param name="pCustData">모든 사용자 지정 데이터 항목을 보유하는 <see langword="CUSTDATA" />에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>사용자 지정 데이터를 가져옵니다.</summary>
      <param name="guid">데이터를 식별하는 데 사용되고 참조로 전달되는 <see cref="T:System.Guid" />입니다.</param>
      <param name="pVarVal">이 메서드가 반환될 때 검색된 데이터를 넣을 위치를 지정하는 개체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>라이브러리의 설명서 문자열, 전체 도움말 파일 이름과 경로, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 식별자를 검색합니다.</summary>
      <param name="index">설명서를 반환할 형식 설명의 인덱스입니다.</param>
      <param name="strName">이 메서드가 반환될 때 지정된 항목의 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strDocString">이 메서드가 반환될 때 지정된 항목에 대한 설명서 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="dwHelpContext">이 메서드는 반환될 때 지정한 항목과 연관된 도움말 컨텍스트 식별자를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="strHelpFile">이 메서드가 반환될 때 도움말 파일의 정규화된 이름을 나타내는 문자열을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>라이브러리의 설명서 문자열, 전체 도움말 파일 이름 및 경로, 사용할 지역화 컨텍스트, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 ID를 검색합니다.</summary>
      <param name="index">설명서가 반환될 형식 설명의 인덱스이거나, <paramref name="index" />가 -1이면 라이브러리의 설명서가 반환됩니다.</param>
      <param name="pbstrHelpString">이 메서드의 반환 값에는 지정된 항목의 이름을 지정하는 BSTR이 포함됩니다. 호출자에게 항목 이름이 필요 없는 경우 <paramref name="pbstrHelpString" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pdwHelpStringContext">이 메서드의 반환 값에 도움말 지역화 컨텍스트가 포함됩니다. 호출자에게 도움말 컨텍스트가 필요 없는 경우 <paramref name="pdwHelpStringContext" />는 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <param name="pbstrHelpStringDll">이 메서드의 반환 값에 도움말 파일에 사용되는 DLL이 들어 있는 파일의 정규화된 이름을 지정하는 BSTR이 포함됩니다. 호출자에게 파일 이름이 필요 없는 경우 <paramref name="pbstrHelpStringDll" />은 <see langword="null" />일 수 있습니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>라이브러리의 특성이 들어 있는 구조를 검색합니다.</summary>
      <param name="ppTLibAttr">이 메서드는 반환될 때 라이브러리의 특성을 포함하는 구조체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>해시 테이블의 크기를 효율적으로 조정하는 데 필요한 형식 라이브러리에 대한 통계를 반환합니다.</summary>
      <param name="pcUniqueNames">고유 이름의 개수에 대한 포인터입니다. 호출자가 이 정보를 필요로 하지 않으면 <see langword="null" />로 설정합니다.</param>
      <param name="pcchUniqueNames">이 메서드가 반환될 때 고유 이름 개수의 변경 내용에 대한 포인터를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>클라이언트 컴파일러가 라이브러리의 형식, 변수, 상수 및 전역 함수를 바인딩할 수 있도록 합니다.</summary>
      <param name="ppTComp">이 메서드가 반환될 때 이 <see langword="ITypeComp" />에 대한 <see langword="ITypeLib" /> 인스턴스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>라이브러리에서 지정된 형식 설명을 검색합니다.</summary>
      <param name="index">반환할 <see langword="ITypeInfo" /> 인터페이스의 인덱스입니다.</param>
      <param name="ppTI">이 메서드는 반환될 때 <paramref name="index" />가 참조하는 형식을 설명하는 <see langword="ITypeInfo" />를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>형식 라이브러리에 있는 형식 설명의 수를 반환합니다.</summary>
      <returns>형식 라이브러리에 있는 형식 설명의 수입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>지정된 GUID에 해당하는 형식 설명을 검색합니다.</summary>
      <param name="guid">형식 정보가 필요한 클래스에 대한 <see langword="CLSID" />의 인터페이스 IID를 나타내는 <see cref="T:System.Guid" />로, 참조로 전달됩니다.</param>
      <param name="ppTInfo">이 메서드는 반환될 때 요청한 <see langword="ITypeInfo" /> 인터페이스를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>형식 설명의 형식을 검색합니다.</summary>
      <param name="index">형식 라이브러리에 있는 형식 설명의 인덱스입니다.</param>
      <param name="pTKind">이 메서드는 반환될 때 형식 설명의 <see langword="TYPEKIND" /> 열거형에 대한 참조를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>라이브러리에 설명되어 있는 형식이나 멤버의 이름이 전달된 문자열에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="szNameBuf">테스트할 문자열입니다.</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" />의 해시 값입니다.</param>
      <returns>
        <paramref name="szNameBuf" />가 형식 라이브러리에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> 메서드에서 처음 가져온 <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 구조체를 해제합니다.</summary>
      <param name="pTLibAttr">해제할 <see langword="TLIBATTR" /> 구조체입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>형식 라이브러리에 해당하는 플래그를 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>형식 라이브러리는 컨트롤을 설명하고 보이지 않는 개체용 형식 브라우저에 표시되지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>형식 라이브러리는 디스크에서 지속된 형식으로 존재합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>형식 라이브러리는 용도가 제한되어 있지 않지만 사용자에게 표시되어서는 안 됩니다. 형식 라이브러리는 컨트롤에 의해 사용되어야 합니다. 호스트는 확장된 속성을 사용하여 컨트롤을 래핑하는 새 형식 라이브러리를 만들어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>형식 라이브러리는 제한되어 있으며, 사용자에게 표시되어서는 안 됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>구조체 요소, 매개 변수, 프로세스 간 함수 반환 값을 전달하는 방법에 대한 필요한 정보가 들어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>프로세스 간에 전달되는 값에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>구조체 요소, 매개 변수 또는 반환 값을 설명하는 비트 마스크 값을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>구조체 요소, 매개 변수 또는 함수 반환 값을 한 프로세스에서 다른 프로세스로 전송하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>매개 변수에 사용자 지정 데이터가 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>매개 변수에 정의된 기본 동작이 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>매개 변수는 호출자에서 호출 수신자로 정보를 전달합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>매개 변수가 클라이언트 애플리케이션의 로컬 식별자입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>매개 변수는 선택 사항입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>매개 변수가 호출 수신자에게서 호출자에게로 정보를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>매개 변수가 멤버의 반환 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>매개 변수가 정보를 전달하는지 아니면 정보를 받는지 지정하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>
        <see langword="STATDATA" /> 구조체의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>advise 싱크에서 데이터의 변경 내용에 대한 알림을 받을 시기를 결정하는 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 열거형 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>변경 알림을 받을 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 인터페이스를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>advise 연결을 고유하게 식별하는 토큰을 나타냅니다. 이 토큰은 advise 연결을 설정하는 메서드에 의해 반환됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>advise 싱크에 대한 대상 데이터의 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체를 나타냅니다. advise 싱크는 이 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 구조체에 지정된 데이터에 대한 변경 알림을 받습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>열려 있는 스토리지, 스트림 또는 바이트 배열 개체에 대한 통계 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>이 스토리지, 스트림 또는 바이트 배열에 대한 마지막 액세스 시간을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>스트림 또는 바이트 배열의 크기를 바이트 단위로 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>스토리지 개체에 대한 클래스 식별자를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>이 스토리지, 스트림 또는 바이트 배열을 만든 시간을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>이 스트림 또는 바이트 배열이 지원하는 영역 잠금 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>개체가 열렸을때 명시된 액세스 모드를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>
        <see langword="IStorage::SetStateBits" /> 메서드가 설정한 가장 최근 값인 스토리지 개체의 현재 상태를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>이 스토리지, 스트림 또는 바이트 배열에 대한 최종 수정 시간을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>이 구조체가 설명하는 개체의 이름이 들어 있으며 null로 끝나는 문자열에 대한 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>나중에 사용하기 위해 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>
        <see langword="STGTY" /> 열거형의 값 중 하나인 스토리지 개체의 형식을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>
        <see langword="STGMEDIUM" /> 구조체의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>받는 프로세스가 <see langword="ReleaseStgMedium" /> 함수를 호출할 때 보내는 프로세스에서 스토리지를 해제하는 방법을 제어할 수 있도록 하는 인터페이스 인스턴스에 대한 포인터를 나타냅니다. <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />가 <see langword="null" />이면 <see langword="ReleaseStgMedium" />에서는 기본 프로시저를 사용하여 스토리지를 해제하고, 그렇지 않으면 <see langword="ReleaseStgMedium" />에서는 지정된 <see langword="IUnknown" /> 인터페이스를 사용합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>스토리지 미디어 형식을 지정합니다. 마샬링 및 역마샬링 루틴에서는 이 값을 사용하여 공용 구조체 멤버가 사용되었는지를 확인합니다. 이 값은 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 열거형의 요소 중 하나여야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>받는 프로세스에서 전송 중인 데이터에 액세스하는 데 사용할 수 있는 핸들, 문자열 또는 인터페이스 포인터를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>대상 운영 체제 플랫폼을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>형식 라이브러리에 대한 대상 운영 체제는 Apple Macintosh입니다. 기본적으로 모든 데이터 필드는 짝수 바이트 경계로 맞추어집니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>형식 라이브러리에 대한 대상 운영 체제는 16비트 Windows 시스템입니다. 기본적으로 데이터 필드는 패킹됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>형식 라이브러리에 대한 대상 운영 체제는 32비트 Windows 시스템입니다. 기본적으로 데이터 필드는 저절로 맞추어지는데 예를 들면 2바이트 정수는 짝수 바이트 경계로, 4바이트 정수는 네 단어 경계 등으로 맞추어집니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>형식 라이브러리에 대한 대상 운영 체제는 64비트 Windows 시스템입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>
        <see langword="TYMED" /> 구조체의 관리되는 정의를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>스토리지 미디어가 확장 메타파일입니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="DeleteEnhMetaFile" />을 사용하여 비트맵을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>스토리지 미디어가 경로로 식별되는 디스크 파일입니다. <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="OpenFile" />을 사용하여 파일을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>스토리지 미디어가 GDI(그래픽 디바이스 인터페이스) 구성 요소(HBITMAP)입니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="DeleteObject" />을 사용하여 비트맵을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>스토리지 미디어가 글로벌 메모리 핸들(HGLOBAL)입니다. 이 전역 핸들은 GMEM_SHARE 플래그를 사용하여 할당합니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="GlobalFree" />를 사용하여 메모리를 해제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>스토리지 미디어가 <see langword="IStorage" /> 포인터로 식별되는 스토리지 구성 요소입니다. 데이터는 이 <see langword="IStorage" /> 인스턴스에 포함된 스트림 및 스토리지에 있습니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이 아니면 대상 프로세스에서 <see langword="IStorage::Release" />를 사용하여 스토리지 구성 요소를 해제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>스토리지 미디어가 <see langword="IStream" /> 포인터로 식별되는 스트림 개체입니다. 이 데이터를 읽으려면 <see langword="ISequentialStream::Read" />를 사용합니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이 아니면 대상 프로세스에서 <see langword="IStream::Release" />를 사용하여 스트림 구성 요소를 해제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>스토리지 미디어가 메타파일(HMETAFILE)입니다. 이 메타파일의 데이터에 액세스하려면 Windows 또는 WIN32 함수를 사용합니다. <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 멤버가 <see langword="null" />이면 대상 프로세스에서 <see langword="DeleteMetaFile" />을 사용하여 비트맵을 삭제해야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>전달 중인 데이터가 없습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>
        <see langword="UCOMITypeInfo" />의 특성을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>이 형식의 인스턴스에 대해 바이트 맞춤을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>이 형식의 인스턴스 크기입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>이 형식의 VTBL(가상 메서드 테이블)의 크기입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>이 구조에서 설명하는 인터페이스에 관한 함수의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>이 구조에서 설명하는 인터페이스에 대해 구현된 인터페이스의 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>이 구조체에서 기술하는 인터페이스의 변수 및 데이터 필드 수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>나중에 사용하기 위해 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>형식 정보의 GUID입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>설명된 형식의 IDL 특성입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>멤버 이름과 설명서 문자열의 로캘입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>나중에 사용하기 위해 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> 및 <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> 필드에 사용된 상수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>생성자의 ID이거나, 없으면 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> 입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>소멸자의 ID이거나, 없으면 <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> 입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />이면 이 형식이 별칭인 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>이 정보가 설명하는 형식을 설명하는 <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 값입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>주 버전 번호입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>부 버전 번호입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>이 정보를 설명하는 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 값입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>변수의 형식, 함수의 반환 형식 또는 함수 매개 변수의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>변수가 <see langword="VT_SAFEARRAY" />나 <see langword="VT_PTR" />이면, <see langword="lpValue" /> 필드에 요소 형식을 지정하는 <see langword="TYPEDESC" />에 대한 포인터가 들어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>이 <see langword="TYPEDESC" />가 설명한 항목에 대한 변형 형식을 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>형식 설명의 속성과 특성을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>이 클래스는 집계를 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>
        <see langword="Application" /> 개체를 설명하는 형식 설명입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>이 형식의 인스턴스는 <see langword="ITypeInfo::CreateInstance" />가 만들 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>이 형식은 다른 형식을 파생시킨 컨트롤이며, 사용자에게 표시되지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>이 인터페이스가 <see langword="IDispatch" />에서 직접적이든 간접적이든 파생됨을 나타냅니다. 이 플래그는 계산되므로 해당 플래그에 대한 ODL(Object Description Language)이 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>이 인터페이스는 <see langword="IDispatch" />와 VTBL 바인딩을 모두 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>이 형식이 브라우저에 나타나면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>이 형식은 허가되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>이 인터페이스는 런타임에서 멤버를 추가할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>인터페이스에서 사용된 형식은 VTBL바인딩 지원을 포함하여 Automation과 완벽하게 호환됩니다. 인터페이스에서 dual을 설정하면 이 플래그와 <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" />이 모두 설정됩니다. dispinterface에서는 이 플래그를 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>이 형식은 미리 정의됩니다. 클라이언트 애플리케이션은 이 특성을 가진 개체의 단일 인스턴스를 자동으로 만들어야 합니다. 개체를 가리키는 변수의 이름은 개체의 클래스 이름과 동일합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>인터페이스가 프록시/스텁 동적 연결 라이브러리를 사용할 것임을 나타냅니다. 이 플래그는 형식 라이브러리가 등록 취소될 때에도 형식 라이브러리 프록시의 등록이 취소되지 않음을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>이 개체는 <see langword="IConnectionPointWithDefault" />를 지원하며 기본 동작을 수행합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>매크로 언어에서 액세스해서는 안 됩니다. 이 플래그는 시스템 수준 형식 또는 형식 브라우저가 표시하지 않는 형식을 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>자식을 확인하기 전에 기본 인터페이스의 이름을 확인을 했는지를 나타냅니다. 이것은 기본 동작과 반대입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>데이터와 함수의 여러 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>다른 형식의 별칭인 형식입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>구현되는 구성 요소 인터페이스 집합입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>
        <see langword="IDispatch::Invoke" />를 통해 액세스할 수 있는 메서드와 속성 집합입니다. 기본적으로 이중 인터페이스는 <see langword="TKIND_DISPATCH" />를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>열거자 집합입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>가상 함수가 있는 형식입니다. 이때 모든 가상 함수는 순수 가상 함수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>열거형 마커의 끝입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>정적 함수와 데이터(예: DLL)만 포함할 수 있는 모듈입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>메서드가 없는 구조체입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>오프셋 0이 있는 모든 멤버의 공용 구조체입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>특정 형식 라이브러리를 식별하고 멤버 이름에 대한 지역화 지원을 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>형식 라이브러리의 전역 고유 라이브러리 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>형식 라이브러리의 로캘 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>형식 라이브러리의 대상 하드웨어 플랫폼을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>라이브러리 플래그를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>형식 라이브러리의 주 버전 번호를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>형식 라이브러리의 부 버전 번호를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>변수, 상수 또는 데이터 멤버를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>변수에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>변수에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>기호화된 상수를 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>인스턴스에 있는 이 변수의 오프셋을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>변수 형식을 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>이 필드는 나중에 사용되도록 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>변수의 멤버 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>변수를 마샬링하는 방법을 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>변수의 속성을 정의합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>변수의 속성을 정의하는 상수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>이 변수는 데이터 바인딩을 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>변수는 개체를 가장 잘 표현하는 단일 속성입니다. 형식 정보에 있는 유일한 변수가 이러한 특성을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>컴파일러가 “abc” 형식에서 이름이 “xyz”인 멤버를 찾는 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로써 플래그하면, 호출은 해당 멤버 함수로 생성됩니다. 모듈에서 허용되지 않고 dispinterface와 인터페이스의 멤버에서 허용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>해당 변수는 사용자에게 바인딩할 수 있는 것으로 표시됩니다. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>이 변수가 존재하고 있고 바인딩할 수 있지만 사용자의 브라우저에 표시되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>변수는 별개의 바인딩 가능한 속성으로 매핑됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>이 변수는 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>변수로의 할당은 허용되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>설정 시 속성을 직접 변경하려고 하면 <see langword="IPropertyNotifySink::OnRequestEdit" />이 호출됩니다. <see langword="OnRequestEdit" />가 구현되면 변경 사항이 적용될지 결정됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>매크로 언어에서 변수에 액세스해서는 안 됩니다. 이 플래그는 시스템 수준 변수 또는 형식 브라우저가 표시되지 않는 변수를 위한 플래그입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>변수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>변수가 사용자 인터페이스에 기본적으로 표시됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>변수의 종류를 정의합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>
        <see langword="VARDESC" /> 구조체는 기호화된 상수를 설명합니다. 이 상수와 연결된 메모리는 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>
        <see langword="IDispatch::Invoke" />를 통해서만 변수에 액세스할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>변수가 형식의 필드 또는 멤버입니다. 이 변수는 형식의 각 인스턴스 내에서 고정 오프셋 위치에 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>변수의 인스턴스가 하나만 있습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>COM에서 사용할 어셈블리의 등록을 취소할 때 호출할 메서드를 지정합니다. 이렇게 하면 등록 취소 중에 사용자가 작성한 코드를 실행할 수 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>마샬러가 <see langword="VT_CY" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>래핑하여 <see langword="Decimal" /> 형식으로 마샬링할 <see langword="VT_CY" />을 사용하여 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj">래핑하여 <see langword="Decimal" />로 마샬링할 <see langword="VT_CY" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>래핑하여 <see langword="Decimal" /> 형식으로 마샬링할 <see langword="VT_CY" />을 포함하는 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj">래핑하여 <see langword="Decimal" />로 마샬링할 <see langword="VT_CY" />을 포함하는 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 매개 변수가 <see cref="T:System.Decimal" /> 형식이 아닌 경우</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>
        <see langword="VT_CY" /> 형식으로 마샬링할 래핑된 개체를 가져옵니다.</summary>
      <returns>
        <see langword="VT_CY" /> 형식으로 마샬링할 래핑된 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 메서드의 IUnknown::QueryInterface 호출에서 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 인터페이스를 사용할 수 있는지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface 메서드 호출은 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 인터페이스를 사용할 수 있습니다. 이 값을 사용하면 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 메서드 오버로드는 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 오버로드와 비슷하게 동작합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface 메서드 호출은 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 인터페이스를 무시해야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 메서드의 반환 값을 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>특정 인터페이스 ID에 대한 인터페이스는 사용할 수 없습니다. 이 경우 반환되는 인터페이스는 <see langword="null" />입니다. E_NOINTERFACE가 IUnknown::QueryInterface의 호출자로 반환됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 메서드에서 반환된 인터페이스 포인터를 IUnknown::QueryInterface의 결과로 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>사용자 지정 <see langword="QueryInterface" />는 사용되지 않습니다. 대신 IUnknown::QueryInterface의 기본 구현이 사용되어야 합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 열거형의 값을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.CharSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="charSet">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>모든 <see cref="T:System.Runtime.InteropServices.CharSet" /> 호출에 사용되는 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />의 기본값을 가져옵니다.</summary>
      <returns>모든 <see cref="T:System.Runtime.InteropServices.CharSet" /> 호출에 사용되는 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />의 기본값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>플랫폼 호출 기능을 제공하는 DLL을 검색하는 데 사용되는 경로를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>플랫폼 대상의 검색을 호출할 때 사용할 경로를 지정하여 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="paths">
        <c>LoadLibraryEx</c> 함수가 플랫폼 호출 중에 검색하는 경로를 지정하는 열거형 값의 비트 조합입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>
        <c>LoadLibraryEx</c> 함수가 플랫폼 호출 중에 검색하는 경로를 지정하는 열거형 값의 비트 조합을 가져옵니다.</summary>
      <returns>플랫폼을 호출의 검색 경로를 지정하는 열거형 값의 비트 조합입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>기본 매개 변수를 지원하는 언어에서 호출할 경우 매개 변수의 기본값을 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>매개 변수 기본값을 사용하여 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">매개 변수의 기본값을 나타내는 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>매개 변수의 기본값을 가져옵니다.</summary>
      <returns>매개 변수의 기본값을 나타내는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>마샬러가 <see langword="VT_DISPATCH" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>래핑할 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj">래핑되고 <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />로 변환될 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" />가 클래스 또는 배열이 아닌 경우
또는
<paramref name="obj" />는 <see langword="IDispatch" />를 지원하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="obj" /> 매개 변수가 <see langword="false" /> 값으로 전달된 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성으로 표시되었습니다.
또는
<paramref name="obj" /> 매개 변수가 <see langword="false" /> 값으로 전달된 <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 특성으로 표시된 형식에서 상속합니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />로 래핑될 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />에서 래핑한 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>메서드, 필드 또는 속성의 COM DISPID(디스패치 식별자)를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>지정된 DISPID를 사용하여 <see langword="DispIdAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dispId">멤버의 DISPID입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>멤버의 DISPID를 가져옵니다.</summary>
      <returns>멤버의 DISPID입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>관리되지 않는 DLL(동적 연결 라이브러리)에서 특성 사용 해당 메서드를 정적 진입점으로 노출함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>가져올 메서드가 포함된 DLL의 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dllName">관리되지 않는 메서드를 포함하는 DLL의 이름입니다. DLL이 어셈블리에 포함되어 있는 경우 이 이름에는 어셈블리 표시 이름이 포함될 수 있습니다.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 활성화 또는 비활성화합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>진입점의 호출 규칙을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>문자열 매개 변수를 메서드로 마샬링하는 방법을 지정하고 이름 관리를 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>호출할 DLL 진입점의 이름 또는 서수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 필드로 인해 공용 언어 런타임이 지정된 이름 이외의 진입점 이름을 관리되지 않는 DLL에서 검색할지 여부를 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>
        <see langword="HRESULT" /> 또는 <see langword="retval" /> 반환 값이 있는 관리되지 않는 메서드가 직접 변환되는지 아니면 <see langword="HRESULT" /> 또는 <see langword="retval" /> 반환 값이 자동으로 예외로 변환되는지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>특성 사용 메서드에서 반환하기 전에 호출 수신자가 <see langword="SetLastError" /> Windows API 함수를 호출할지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>진입점을 포함하는 DLL 파일의 이름을 가져옵니다.</summary>
      <returns>진입점을 포함하는 DLL 파일의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary>콜백을 통해 네이티브 라이브러리를 확인하는 데 사용되는 대리자를 제공합니다.</summary>
      <param name="libraryName">확인할 네이티브 라이브러리입니다.</param>
      <param name="assembly">확인을 요청하는 어셈블리입니다.</param>
      <param name="searchPath">PInvoke의 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />입니다(있는 경우). 그렇지 않으면 어셈블리에 있는 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />입니다(있는 경우). 그렇지 않은 경우에는 <see langword="null" />입니다.</param>
      <returns>성공 시에는 로드된 네이티브 라이브러리의 핸들이며, 실패 시에는 <see cref="F:System.IntPtr.Zero" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>플랫폼 호출 기능을 제공하는 DLL을 검색하는 데 사용되는 경로를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>DLL 검색 경로에 애플리케이션 디렉터리를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>어셈블리 종속성을 검색할 때 어셈블리 자체를 포함하는 디렉터리와 함께 해당 디렉터리 목록을 검색합니다. 이 값은 경로가 Win32 LoadLibraryEx 함수에 전달되기 전에 .NET Framework에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>애플리케이션 디렉터리를 검색하고 <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> 플래그가 있는 Win32 LoadLibraryEx 함수를 호출합니다. 이 값은 다른 값이 지정되는 경우 무시됩니다. <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 특성을 지원하지 않는 운영 체제는 이 값을 사용하고 다른 값은 무시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>애플리케이션 디렉터리인 <see langword="%WinDir%\System32" /> 디렉터리를 포함하고 DLL 검색 경로에 사용자 디렉터리를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>DLL 검색 경로에 <see langword="%WinDir%\System32" /> 디렉터리를 포함합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>다른 폴더를 검색하기 전에 DLL이 위치한 폴더에서 DLL의 종속성을 검색합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>Win32 <c>AddDllDirectory</c> 함수를 사용하여 프로세스 전체 검색 경로에 명시적으로 추가되었던 모든 경로를 포함합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>마샬러가 <see langword="VT_ERROR" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>제공된 예외에 해당하는 HRESULT를 사용하여 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e">오류 코드로 변환될 예외입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>오류의 HRESULT를 사용하여 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="errorCode">오류의 HRESULT입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>오류의 HRESULT가 들어 있는 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="errorCode">오류의 HRESULT가 들어 있는 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="errorCode" /> 매개 변수가 <see cref="T:System.Int32" /> 형식이 아닙니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>래퍼의 오류 코드를 가져옵니다.</summary>
      <returns>오류의 HRESULT입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>자동 GUID가 부적당할 경우 명시적 <see cref="T:System.Guid" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>지정된 GUID를 사용하는 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="guid">할당할 <see cref="T:System.Guid" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>클래스의 <see cref="T:System.Guid" />를 가져옵니다.</summary>
      <returns>클래스의 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>지정된 임계값에 도달하는 경우 미처리 핸들을 추적하고 가비지 수집을 수행합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>핸들 수집을 시작할 임계값과 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">수집기의 이름입니다. 이 매개 변수를 사용하면 핸들 형식을 개별적으로 추적하는 수집기의 이름을 지정할 수 있습니다.</param>
      <param name="initialThreshold">수집을 시작할 시점을 지정하는 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 매개 변수가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>이름, 핸들 수집을 시작할 임계값 및 핸들 수집을 반드시 시작해야 하는 임계값을 사용하여 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">수집기의 이름입니다.  이 매개 변수를 사용하면 핸들 형식을 개별적으로 추적하는 수집기의 이름을 지정할 수 있습니다.</param>
      <param name="initialThreshold">수집을 시작할 시점을 지정하는 값입니다.</param>
      <param name="maximumThreshold">수집을 반드시 시작해야 하는 시점을 지정하는 값입니다. 이 매개 변수에는 사용할 수 있는 최대 핸들 수를 설정해야 합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 매개 변수가 0보다 작은 경우
또는
<paramref name="maximumThreshold" /> 매개 변수가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maximumThreshold" /> 매개 변수가 <paramref name="initialThreshold" /> 매개 변수보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>현재 핸들 수를 늘립니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 속성이 0보다 작은 경우</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>수집된 핸들의 수를 가져옵니다.</summary>
      <returns>수집된 핸들의 수입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>수집을 시작할 시점을 지정하는 값을 가져옵니다.</summary>
      <returns>수집을 시작할 시점을 지정하는 값입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>수집을 반드시 시작해야 하는 시점을 지정하는 값을 가져옵니다.</summary>
      <returns>수집을 반드시 시작해야 하는 시점을 지정하는 값입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>
        <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 개체의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 속성을 사용하면 핸들 형식을 개별적으로 추적하는 수집기의 이름을 지정할 수 있습니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>현재 핸들 수를 줄입니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 속성이 0보다 작은 경우</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>플랫폼 호출을 사용하여 관리되지 않는 코드에 전달되는 리소스에 대한 핸들을 보유하는 관리되는 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>래핑할 개체와 비관리 코드가 사용하는 리소스 핸들을 사용하여 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="wrapper">플랫폼 호출이 반환할 때까지 종료해서는 안 될 관리되는 개체입니다.</param>
      <param name="handle">리소스 핸들을 나타내는 <see cref="T:System.IntPtr" />입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>리소스 핸들을 가져옵니다.</summary>
      <returns>리소스 핸들입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체의 리소스 핸들을 반환합니다.</summary>
      <param name="value">핸들이 필요한 개체입니다.</param>
      <returns>지정된 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체의 리소스 핸들입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체의 내부 정수 표현을 반환합니다.</summary>
      <param name="value">내부 정수 표현을 검색할 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.IntPtr" /> 개체를 나타내는 <see cref="T:System.Runtime.InteropServices.HandleRef" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>리소스 핸들을 보유하고 있는 개체를 가져옵니다.</summary>
      <returns>리소스 핸들을 보유하고 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>클라이언트에서 사용자 지정 마샬러가 제공한 어댑터 개체가 아니라 실제 개체에 액세스할 수 있는 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>사용자 지정 마샬러에서 래핑한 내부 개체에 액세스할 수 있습니다.</summary>
      <returns>어댑터 개체에 포함된 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>사용자가 <see cref="T:System.MarshalByRefObject" />를 확장하는 관리되는 개체에 활성화 코드를 쓸 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>지정한 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="serverType">활성화할 형식입니다.</param>
      <returns>지정한 형식과 연결된 <see cref="T:System.MarshalByRefObject" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>메서드 호출 처리를 위한 사용자 지정 래퍼를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>관리되는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</summary>
      <param name="ManagedObj">소멸될 관리되는 개체입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>관리되지 않는 데이터가 필요 없는 경우 이 데이터의 필요한 정리 작업을 수행합니다.</summary>
      <param name="pNativeData">소멸될 관리되지 않는 데이터에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>마샬링될 네이티브 데이터의 크기를 반환합니다.</summary>
      <returns>네이티브 데이터의 크기(바이트)입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>관리되는 데이터를 관리되지 않는 데이터로 변환합니다.</summary>
      <param name="ManagedObj">변환될 관리되는 개체입니다.</param>
      <returns>관리되는 개체의 COM 뷰에 대한 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>관리되지 않는 데이터를 관리되는 데이터로 변환합니다.</summary>
      <param name="pNativeData">래핑될 관리되지 않는 형식에 대한 포인터입니다.</param>
      <returns>COM 데이터의 관리되는 뷰를 나타내는 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>개발자가 IUnknown::QueryInterface(REFIID riid, void **ppvObject) 메서드의 관리되는 사용자 지정 구현을 제공할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>지정된 인터페이스 ID에 따라 인터페이스를 반환합니다.</summary>
      <param name="iid">요청된 인터페이스의 GUID입니다.</param>
      <param name="ppv">이 메서드에서 반환할 때 요청된 인터페이스에 대한 참조입니다.</param>
      <returns>IUnknown::QueryInterface의 사용자 지정 구현이 사용되었는지 여부를 나타내는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>어셈블리 내부에서 정의된 형식이 처음에 형식 라이브러리에서 정의되었음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>원본 형식 라이브러리 파일의 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tlbFile">원본 형식 라이브러리 파일의 위치입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>원본 형식 라이브러리 파일의 이름을 가져옵니다.</summary>
      <returns>원본 형식 라이브러리 파일의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>관리되는 인터페이스를 COM에 노출할 경우 이중 인터페이스인지, 디스패치 전용 인터페이스인지 또는 <see langword="IUnknown" /> 전용 인터페이스인지 여부를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="interfaceType">인터페이스를 COM 클라이언트에 노출하는 방법을 설명합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="interfaceType">인터페이스를 COM에 노출시키는 방법을 설명하는 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>인터페이스를 COM에 노출하는 방법을 설명하는 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 값을 가져옵니다.</summary>
      <returns>인터페이스를 COM에 노출하는 방법을 설명하는 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>잘못된 COM 개체가 사용된 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>기본 속성을 사용하여 <see langword="InvalidComObjectException" />의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 데이터로부터 <see langword="COMException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>메시지를 사용하여 <see langword="InvalidComObjectException" />의 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>관리 코드에 마샬링 할 수 없는 변형 형식의 인수를 만날 때 마샬러가 발생시키는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>기본값을 사용하여 <see langword="InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 데이터로부터 <see langword="InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see langword="InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>메서드의 관리되지 않는 시그니처에 LCID(로캘 식별자) 매개 변수가 필요함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>관리되지 않는 시그니처의 해당 LCID 위치로 <see langword="LCIDConversionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="lcid">관리되지 않는 시그니처의 해당 LCID 인수 위치를 나타냅니다. 여기서 0은 첫 번째 인수입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>관리되지 않는 시그니처에서 LCID 인수의 위치를 가져옵니다.</summary>
      <returns>관리되지 않는 시그니처에서 LCID 인수의 위치입니다. 여기서 0은 첫 번째 인수입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>관리-COM interop 시나리오에서 interop 스텁의 사용자 지정에 대한 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>지정된 클래스 형식과 메서드 이름을 사용하여 <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="classType">필요한 스텁 메서드가 포함된 클래스입니다.</param>
      <param name="methodName">스텁 메서드의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodName" />을 찾을 수 없습니다.
또는
메서드가 정적 또는 제네릭 메서드가 아닙니다.
또는
메서드의 매개 변수 목록이 스텁에 예상되는 매개 변수 목록과 일치하지 않습니다.</exception>
      <exception cref="T:System.MethodAccessException">관리되는 interop 메서드를 포함하는 인터페이스는 스텁 메서드가 프라이빗 또는 보호된 접근성을 갖거나 보안 문제 때문에 스텁 메서드에 액세스하지 못합니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>필요한 스텁 메서드가 포함된 클래스를 가져옵니다.</summary>
      <returns>사용자 지정된 interop 스텁이 포함된 클래스입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>스텁 메서드의 이름을 가져옵니다.</summary>
      <returns>사용자 지정된 interop 스텁의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>관리되지 않는 메모리를 할당하고, 관리되지 않는 메모리 블록을 복사하고, 관리되는 형식을 관리되지 않는 형식으로 변환하는 메서드의 컬렉션 및 비관리 코드와 상호 작용할 때 사용되는 기타 메서드의 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>지정된 인터페이스의 참조 횟수를 증가시킵니다.</summary>
      <param name="pUnk">증가시킬 인터페이스 참조 횟수입니다.</param>
      <returns>
        <paramref name="pUnk" /> 매개 변수에 대한 참조 횟수의 새 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>COM 작업 메모리 할당자에서 지정된 크기의 메모리 블록을 할당합니다.</summary>
      <param name="cb">할당될 메모리 블록 크기입니다.</param>
      <returns>할당된 메모리 블록 주소를 나타내는 정수입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />을 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>지정된 바이트 수를 사용하여 프로세스의 관리되지 않는 메모리에서 메모리를 할당합니다.</summary>
      <param name="cb">메모리에서 필요한 바이트 수 입니다.</param>
      <returns>새로 할당된 메모리에 대한 포인터입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 메서드를 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>지정된 바이트 수에 대한 포인터를 사용하여 프로세스의 관리되지 않는 메모리에서 메모리를 할당합니다.</summary>
      <param name="cb">메모리에서 필요한 바이트 수 입니다.</param>
      <returns>새로 할당된 메모리에 대한 포인터입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 메서드를 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>어떤 컨텍스트에서 RCW(런타임 호출 가능 래퍼)를 정리에 사용할 수 있는지 여부를 나타냅니다.</summary>
      <returns>정리에 사용할 수 있는 RCW가 하나라도 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>지정된 모니커로 식별되는 인터페이스 포인터를 가져옵니다.</summary>
      <param name="monikerName">원하는 인터페이스 포인터에 해당하는 모니커입니다.</param>
      <returns>
        <paramref name="monikerName" /> 매개 변수로 식별되는 인터페이스 포인터에 대한 참조가 있는 개체입니다. 모니커는 이름이며 이 경우에는 인터페이스로 정의됩니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">인식할 수 없는 HRESULT가 관리되지 않는 <see langword="BindToMoniker" /> 메서드에서 반환되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>개체의 CCW(COM Callable Wrapper) 핸들 강도를 변경합니다.</summary>
      <param name="otp">CCW에 참조 횟수가 계산된 핸들이 있는 개체입니다. CCW의 참조 횟수가 0보다 크면 핸들이 강하고, 그렇지 않으면 핸들이 약합니다.</param>
      <param name="fIsWeak">참조 횟수에 관계없이 <paramref name="otp" /> 매개 변수에 대한 핸들 강도를 약하게 변경하려면 <see langword="true" />이고, 참조 횟수가 계산될 <paramref name="otp" />에 대한 핸들 강도를 다시 설정하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>현재의 컨텍스트에서 할당된 모든 RCW(런타임 호출 가능 래퍼)를 정리하도록 런타임에 알립니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 8비트 부호 없는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 1차원 문자 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 1차원 배정밀도 부동 소수점 수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 16비트 부호 있는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 32비트 부호 있는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 64비트 부호 있는 1차원 정수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 8비트 부호 없는 정수 배열로 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 문자 배열로 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 배정밀도 부동 소수점 수 배열로 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 16비트 부호 있는 정수 배열로 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 32비트 부호 있는 정수 배열로 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 64비트 부호 있는 정수 배열로 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 <see cref="T:System.IntPtr" /> 배열에 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리 포인터의 데이터를 관리되는 단정밀도 부동 소수점 수 배열로 복사합니다.</summary>
      <param name="source">복사할 메모리 포인터입니다.</param>
      <param name="destination">복사할 대상 배열입니다.</param>
      <param name="startIndex">대상 배열에서 복사를 시작해야 할 0부터 시작하는 인덱스입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 <see cref="T:System.IntPtr" /> 배열의 데이터를 관리되지 않는 메모리 포인터에 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>관리되는 1차원 단정밀도 부동 소수점 수 배열의 데이터를 관리되지 않는 메모리 포인터로 복사합니다.</summary>
      <param name="source">복사할 1차원 배열입니다.</param>
      <param name="startIndex">소스 배열에서 복사를 시작해야 할 인덱스(0부터 시작)입니다.</param>
      <param name="destination">복사할 대상 메모리 포인터입니다.</param>
      <param name="length">복사할 배열 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 및 <paramref name="length" />가 잘못되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> 또는 <paramref name="length" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>지정된 COM 개체를 사용하여 관리되는 개체를 집계합니다.</summary>
      <param name="pOuter">외부 <see langword="IUnknown" /> 포인터입니다.</param>
      <param name="o">집계할 개체입니다.</param>
      <returns>관리되는 개체의 내부 <see langword="IUnknown" /> 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 COM 개체를 사용하여 지정된 형식의 관리되는 개체를 집계합니다.</summary>
      <param name="pOuter">외부 IUnknown 포인터입니다.</param>
      <param name="o">집계할 관리되는 개체입니다.</param>
      <typeparam name="T">집계할 관리되는 개체의 형식입니다.</typeparam>
      <returns>관리되는 개체의 내부 IUnknown 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>지정된 형식의 개체에 지정된 COM 개체를 래핑합니다.</summary>
      <param name="o">래핑될 개체입니다.</param>
      <param name="t">만들 래퍼의 형식입니다.</param>
      <returns>원하는 형식의 인스턴스인 새로 래핑된 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" />는 <see langword="__ComObject" />에서 파생되어야 합니다.
또는
<paramref name="t" />가 Windows 런타임 형식인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" />는 필요한 모든 인터페이스를 지원하지는 않으므로 대상 개체로 변환될 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체에 지정된 COM 개체를 래핑합니다.</summary>
      <param name="o">래핑될 개체입니다.</param>
      <typeparam name="T">래핑할 개체의 형식입니다.</typeparam>
      <typeparam name="TWrapper">반환할 개체의 형식입니다.</typeparam>
      <returns>새로 래핑된 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" />는 <see langword="__ComObject" />에서 파생되어야 합니다.
또는
<typeparamref name="T" />가 Windows 런타임 형식인 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" />가 원하는 모든 인터페이스를 지원하지 않으므로 <paramref name="TWrapper" />으로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>지정된 관리되지 않는 메모리 블록이 가리키는 모든 하위 구조체를 해제합니다.</summary>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structuretype">형식이 지정된 클래스의 형식으로, <paramref name="ptr" /> 매개 변수에 있는 버퍼를 삭제하는 데 필요한 레이아웃 정보를 제공합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" />에 Auto 레이아웃이 지정된 경우. 대신 Sequential 또는 Explicit 레이아웃을 사용합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 관리되지 않는 메모리 블록이 가리키는 지정된 형식의 모든 하위 구조체를 해제합니다.</summary>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <typeparam name="T">형식이 지정된 구조체의 형식입니다. <paramref name="ptr" /> 매개 변수에 있는 버퍼를 삭제하는 데 필요한 레이아웃 정보를 제공합니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" />에 Auto 레이아웃이 지정된 경우. 대신 Sequential 또는 Explicit 레이아웃을 사용합니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>참조 횟수를 0으로 설정하여, RCW(런타임 호출 가능 래퍼)에 대한 모든 참조를 해제합니다.</summary>
      <param name="o">해제할 RCW입니다.</param>
      <returns>
        <paramref name="o" /> 매개 변수에 연결된 RCW의 새 참조 횟수 값입니다. 해제 작업을 성공적으로 마치면 값이 0입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" />가 올바른 개체 범위가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>COM SysFreeString 함수를 사용하여 <see langword="BSTR" />을 해제합니다.</summary>
      <param name="ptr">해제할 BSTR의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>관리되지 않는 COM 작업 메모리 할당자에서 할당한 메모리 블록을 해제합니다.</summary>
      <param name="ptr">해제할 메모리의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>프로세스의 관리되지 않는 메모리에서 이전에 할당한 메모리를 해제합니다.</summary>
      <param name="hglobal">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 호출과 일치하는 원본 호출에서 반환되는 핸들입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>지정된 형식에 대한 GUID(Globally Unique Identifier)를 반환하거나 형식 라이브러리 내보내기(TlbExp.exe)에 사용되는 알고리즘을 사용하여 GUID를 생성합니다.</summary>
      <param name="type">GUID를 생성할 형식입니다.</param>
      <returns>지정된 형식의 식별자입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>지정된 형식에 대한 ProgID(프로그래밍 식별자)를 반환합니다.</summary>
      <param name="type">ProgID를 가져올 형식입니다.</param>
      <returns>지정된 형식의 ProgID입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 매개 변수가 COM에서 만들 수 없는 클래스인 경우. 이 클래스는 공용이며, 공용 매개 변수가 없는 생성자를 가지며, COM에 표시됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>지정된 개체의 지정된 인터페이스를 나타내는 IUnknown 인터페이스에 대한 포인터를 반환합니다. 사용자 지정 쿼리 인터페이스 액세스가 기본적으로 사용됩니다.</summary>
      <param name="o">인터페이스를 제공하는 개체입니다.</param>
      <param name="T">요청된 인터페이스의 형식입니다.</param>
      <returns>개체에 대해 지정된 인터페이스를 나타내는 인터페이스 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 매개 변수가 인터페이스가 아닌 경우
또는
COM에 해당 형식이 표시되지 않는 경우
또는
<typeparamref name="T" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 매개 변수가 요청된 인터페이스를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 매개 변수가 <see langword="null" />인 경우
또는
<typeparamref name="T" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>지정된 개체의 지정된 인터페이스를 나타내는 IUnknown 인터페이스에 대한 포인터를 반환합니다. 사용자 지정 쿼리 인터페이스 액세스는 지정된 사용자 지정 모드에 의해 제어됩니다.</summary>
      <param name="o">인터페이스를 제공하는 개체입니다.</param>
      <param name="T">요청된 인터페이스의 형식입니다.</param>
      <param name="mode">
        <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />에서 제공하는 <see langword="IUnknown::QueryInterface" /> 사용자 지정을 적용하는지 여부를 나타내는 열거형 값 중 하나입니다.</param>
      <returns>개체에 대한 인터페이스를 나타내는 인터페이스 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 매개 변수가 인터페이스가 아닌 경우
또는
COM에 해당 형식이 표시되지 않는 경우
또는
<typeparamref name="T" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 개체가 요청된 인터페이스를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 매개 변수가 <see langword="null" />인 경우
또는
<typeparamref name="T" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체에 지정된 인터페이스를 나타내는 IUnknown 인터페이스에 대한 포인터를 반환합니다. 사용자 지정 쿼리 인터페이스 액세스가 기본적으로 사용됩니다.</summary>
      <param name="o">인터페이스를 제공하는 개체입니다.</param>
      <typeparam name="T">
        <paramref name="o" />의 형식입니다.</typeparam>
      <typeparam name="TInterface">반환할 인터페이스의 형식입니다.</typeparam>
      <returns>
        <paramref name="TInterface" /> 인터페이스를 나타내는 인터페이스 포인터입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TInterface" /> 매개 변수가 인터페이스가 아닌 경우
또는
COM에 해당 형식이 표시되지 않는 경우
또는
<typeparamref name="T" /> 매개 변수는 개방형 제네릭 형식입니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> 매개 변수가 <paramref name="TInterface" /> 인터페이스를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>지정된 COM 개체에서 지정된 키를 사용하여 참조되는 데이터를 검색합니다.</summary>
      <param name="obj">필요한 데이터가 들어 있는 COM 개체입니다.</param>
      <param name="key">데이터를 검색할 <paramref name="obj" />의 내부 해시 테이블에 있는 키입니다.</param>
      <returns>
        <paramref name="obj" /> 매개 변수의 내부 해시 테이블에서 <paramref name="key" /> 매개 변수가 나타내는 데이터입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" />가 <see langword="null" />인 경우
또는
<paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" />가 COM 개체가 아닌 경우
또는
<paramref name="obj" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>관리되지 않는 함수 포인터를 대리자로 변환합니다.</summary>
      <param name="ptr">변환할 관리되지 않는 함수 포인터입니다.</param>
      <param name="t">반환될 대리자의 형식입니다.</param>
      <returns>적절한 대리자 형식으로 캐스팅될 수 있는 대리자 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 매개 변수가 대리자가 아니거나 제네릭인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 매개 변수가 <see langword="null" />인 경우
또는
<paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 함수 포인터를 지정된 형식의 대리자로 변환합니다.</summary>
      <param name="ptr">변환할 관리되지 않는 함수 포인터입니다.</param>
      <typeparam name="TDelegate">반환할 대리자의 형식입니다.</typeparam>
      <returns>지정된 대리자 형식의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 제네릭 매개 변수가 대리자가 아니거나 개방형 제네릭 형식입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>COM에 노출될 때 형식의 가상 함수 테이블(v-table 또는 VTBL)에서 마지막 슬롯을 검색합니다.</summary>
      <param name="t">인터페이스나 클래스를 나타내는 형식입니다.</param>
      <returns>COM에 노출될 때 인터페이스의 마지막 VTBL 슬롯입니다. <paramref name="t" /> 매개 변수가 클래스인 경우 반환된 VTBL 슬롯은 클래스에서 생성되는 인터페이스에 있는 마지막 슬롯입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>발생한 예외의 형식을 식별하는 코드를 검색합니다.</summary>
      <returns>예외의 형식입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>지정된 HRESULT 오류 코드를 해당하는 <see cref="T:System.Exception" /> 개체로 변환합니다.</summary>
      <param name="errorCode">변환할 HRESULT입니다.</param>
      <returns>변환된 HRESULT를 나타내는 개체 또는 HRESULT 값이 오류 코드(예: <see langword="S_OK" /> 또는 <see langword="S_FALSE" />)를 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>예외 개체에 대한 IErrorInfo 인터페이스에 전달된 추가 오류 정보를 사용하여 지정된 HRESULT 오류 코드를 해당하는 <see cref="T:System.Exception" /> 개체로 변환합니다.</summary>
      <param name="errorCode">변환할 HRESULT입니다.</param>
      <param name="errorInfo">오류에 대한 추가 정보를 제공하는 <see langword="IErrorInfo" /> 인터페이스에 대한 포인터입니다. 현재 <see langword="IErrorInfo" /> 인터페이스를 사용하려면 <c>IntPtr(0)</c>을 지정하고, 현재 <see langword="IErrorInfo" /> 인터페이스를 무시하고 오류 코드에서만 예외를 생성하려면 <c>IntPtr(-1)</c>을 지정합니다.</param>
      <returns>변환된 HRESULT를 나타내는 개체 및 <paramref name="errorInfo" />에서 얻은 정보 또는 HRESULT 값이 오류 코드(예: <see langword="S_OK" /> 또는 <see langword="S_FALSE" />)를 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>예외에 대한 컴퓨터 독립적 설명과 예외가 발생할 때 스레드에 대해 존재하는 컴퓨터 상태에 대한 정보를 검색합니다.</summary>
      <returns>EXCEPTION_POINTERS 구조체에 대한 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>대리자를 비관리 코드에서 호출할 수 있는 함수 포인터로 변환합니다.</summary>
      <param name="d">비관리 코드에 전달할 대리자입니다.</param>
      <returns>비관리 코드에 전달할 수 있는 값입니다. 비관리 코드에서는 이 값을 사용하여 관리되는 내부 대리자를 호출할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 대리자를 관리되지 않는 코드에서 호출할 수 있는 함수 포인터로 변환합니다.</summary>
      <param name="d">비관리 코드에 전달할 대리자입니다.</param>
      <typeparam name="TDelegate">변환할 대리자의 형식입니다.</typeparam>
      <returns>비관리 코드에 전달할 수 있는 값입니다. 비관리 코드에서는 이 값을 사용하여 관리되는 내부 대리자를 호출할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>지정된 모듈의 인스턴스 핸들(HINSTANCE)을 반환합니다.</summary>
      <param name="m">HINSTANCE가 필요한 모듈입니다.</param>
      <returns>
        <paramref name="m" />에 대한 HINSTANCE이거나 모듈에 HINSTANCE가 없을 경우는 -1입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>지정된 예외를 HRESULT로 변환합니다.</summary>
      <param name="e">HRESULT로 변환할 예외입니다.</param>
      <returns>해당 예외로 매핑되는 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>
        <see cref="T:System.Runtime.InteropServices.Marshal" />을 사용하여 실행된 Win32 코드에서 발생한 마지막 오류에 해당하는 HRESULT를 반환합니다.</summary>
      <returns>마지막 Win32 오류 코드에 해당하는 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>관리되는 개체에서 IDispatch 인터페이스를 반환합니다.</summary>
      <param name="o">
        <see langword="IDispatch" /> 인터페이스가 요청되는 개체입니다.</param>
      <returns>
        <paramref name="o" /> 매개 변수에 대한 <see langword="IDispatch" /> 포인터입니다.</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" />가 요청된 인터페이스를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>관리되는 개체에서 IUnknown 인터페이스를 반환합니다.</summary>
      <param name="o">
        <see langword="IUnknown" /> 인터페이스가 요청되는 개체입니다.</param>
      <returns>
        <paramref name="o" /> 매개 변수에 대한 <see langword="IUnknown" /> 포인터입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 플래그가 설정된 플랫폼 호출을 사용하여 호출된 관리되지 않는 마지막 함수에서 반환하는 오류 코드를 반환합니다.</summary>
      <returns>Win32 SetLastError 함수에 대한 호출로 설정된 마지막 오류 코드입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>개체를 COM VARIANT로 변환합니다.</summary>
      <param name="obj">COM VARIANT를 가져올 개체입니다.</param>
      <param name="pDstNativeVariant">
        <paramref name="obj" /> 매개 변수에 해당하는 VARIANT를 받을 포인터입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 매개 변수는 제네릭 형식의 인스턴스입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체를 COM VARIANT로 변환합니다.</summary>
      <param name="obj">COM VARIANT를 가져올 개체입니다.</param>
      <param name="pDstNativeVariant">
        <paramref name="obj" /> 매개 변수에 해당하는 VARIANT를 받을 포인터입니다.</param>
      <typeparam name="T">변환할 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>IUnknown 인터페이스에 대한 포인터를 사용하여 COM 개체를 나타내는 형식의 인스턴스를 반환합니다.</summary>
      <param name="pUnk">
        <see langword="IUnknown" /> 인터페이스에 대한 포인터입니다.</param>
      <returns>지정된 관리되지 않는 COM 개체를 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pUnk" />가 <see cref="F:System.IntPtr.Zero" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>COM VARIANT를 개체로 변환합니다.</summary>
      <param name="pSrcNativeVariant">COM VARIANT에 대한 포인터입니다.</param>
      <returns>
        <paramref name="pSrcNativeVariant" /> 매개 변수에 해당하는 개체입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" />가 유효한 VARIANT 형식이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" />가 지원되지 않는 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
COM VARIANT를 지정된 형식의 개체로 변환합니다.</summary>
      <param name="pSrcNativeVariant">COM VARIANT에 대한 포인터입니다.</param>
      <typeparam name="T">COM VARIANT를 변환할 형식입니다.</typeparam>
      <returns>
        <paramref name="pSrcNativeVariant" /> 매개 변수에 해당하는 지정된 형식의 개체입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" />가 유효한 VARIANT 형식이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" />가 지원되지 않는 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>COM VARIANT의 배열을 개체 배열로 변환합니다.</summary>
      <param name="aSrcNativeVariant">COM VARIANT 배열의 첫 번째 요소에 대한 포인터입니다.</param>
      <param name="cVars">
        <paramref name="aSrcNativeVariant" />에서 COM VARIANT의 수입니다.</param>
      <returns>
        <paramref name="aSrcNativeVariant" />에 해당하는 개체 배열입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" />가 음수입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
COM VARIANT의 배열을 지정된 형식의 배열로 변환합니다.</summary>
      <param name="aSrcNativeVariant">COM VARIANT 배열의 첫 번째 요소에 대한 포인터입니다.</param>
      <param name="cVars">
        <paramref name="aSrcNativeVariant" />에서 COM VARIANT의 수입니다.</param>
      <typeparam name="T">반환할 배열의 형식입니다.</typeparam>
      <returns>
        <typeparamref name="T" />에 해당하는 <paramref name="aSrcNativeVariant" /> 개체 배열입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" />가 음수입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>사용자 정의 메서드가 포함된 가상 함수 테이블(v-table 또는 VTBL)의 첫 번째 슬롯을 가져옵니다.</summary>
      <param name="t">인터페이스나 클래스를 나타내는 형식입니다.</param>
      <returns>사용자 정의 메서드가 포함된 첫 번째 VTBL 슬롯입니다. IUnknown을 기준으로 하는 인터페이스의 경우 첫 번째 슬롯은 3이고, IDispatch를 기준으로 하는 인터페이스의 경우 7입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" />가 COM에 표시되지 않는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>COM 개체를 나타내는 지정된 형식의 관리되는 개체를 반환합니다.</summary>
      <param name="pUnk">관리되지 않는 개체의 <see langword="IUnknown" /> 인터페이스에 대한 포인터입니다.</param>
      <param name="t">요청된 관리되는 클래스의 형식입니다.</param>
      <returns>요청된 관리되지 않는 COM 개체를 나타내는 <see cref="T:System.Type" /> 개체에 해당하는 클래스의 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 특성이 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />가 아닌 경우
또는
<paramref name="t" />가 Windows 런타임 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>지정된 CLSID(클래스 식별자)와 연관된 형식을 반환합니다.</summary>
      <param name="clsid">반환할 형식의 CLSID입니다.</param>
      <returns>
        <see langword="System.__ComObject" /> CLSID가 유효한지 여부에 관계 없습니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>ITypeInfo 개체가 나타내는 형식의 이름을 검색합니다.</summary>
      <param name="typeInfo">
        <see langword="ITypeInfo" /> 포인터를 나타내는 개체입니다.</param>
      <returns>
        <paramref name="typeInfo" /> 매개 변수가 가리키는 형식의 이름입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>주어진 IUnknown 인터페이스에 고유한 RCW(런타임 호출 가능 래퍼)를 만듭니다.</summary>
      <param name="unknown">
        <see langword="IUnknown" /> 인터페이스에 대한 관리되는 포인터입니다.</param>
      <returns>지정된 <see langword="IUnknown" /> 인터페이스에 대한 고유한 RCW입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>지정된 개체가 COM 개체를 나타낼지 여부를 나타냅니다.</summary>
      <param name="o">검사할 개체입니다.</param>
      <returns>
        <paramref name="o" /> 매개 변수가 COM 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>형식이 COM 클라이언트에 표시되는지 여부를 나타냅니다.</summary>
      <param name="t">COM 표시 여부를 확인할 형식입니다.</param>
      <returns>형식이 COM에 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>관리되는 클래스의 관리되지 않는 형식의 필드 오프셋을 반환합니다.</summary>
      <param name="t">관리되는 클래스를 지정하는 값 형식이나 서식이 지정된 참조 형식입니다. 클래스에 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />를 적용해야 합니다.</param>
      <param name="fieldName">
        <paramref name="t" /> 매개 변수에 있는 필드입니다.</param>
      <returns>플랫폼 호출로 선언된 지정된 클래스 내의 <paramref name="fieldName" /> 매개 변수에 대한 오프셋(바이트)입니다.</returns>
      <exception cref="T:System.ArgumentException">클래스를 구조체로 내보낼 수 없거나 필드가 공용이 아닌 경우 .NET Framework 버전 2.0 이상에서는 이 필드가 private 필드일 수 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 관리되는 클래스의 관리되지 않는 형식의 필드 오프셋을 반환합니다.</summary>
      <param name="fieldName">
        <paramref name="T" /> 형식의 필드 이름입니다.</param>
      <typeparam name="T">관리되는 값 또는 formatted 참조 형식입니다. 클래스에 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 특성을 적용해야 합니다.</typeparam>
      <returns>플랫폼 호출로 선언된 지정된 클래스 내의 <paramref name="fieldName" /> 매개 변수에 대한 오프셋(바이트)입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>메서드를 호출하지 않고 메서드 설정 작업을 한 번에 실행합니다.</summary>
      <param name="m">검사할 메서드입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="m" /> 매개 변수가 <see cref="T:System.Reflection.MethodInfo" /> 개체가 아닌 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>클래스의 모든 메서드에 대해 링크 전 검사를 수행합니다.</summary>
      <param name="c">메서드를 검사할 클래스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>관리되지 않는 ANSI 문자열에서 첫 번째 null 문자가 나올 때까지의 모든 문자를 관리되는 <see cref="T:System.String" />으로 복사하고 각 ANSI 문자를 유니코드로 확장합니다.</summary>
      <param name="ptr">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <returns>관리되지 않는 ANSI 문자열의 복사본을 보유하는 관리되는 문자열입니다. <paramref name="ptr" />이 <see langword="null" />이면 메서드가 null 문자열을 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>관리되는 <see cref="T:System.String" />을 할당하고, 관리되지 않는 ANSI 문자열에서 지정된 수의 문자를 해당 개체로 복사한 다음 각 ANSI 문자를 유니코드로 확장합니다.</summary>
      <param name="ptr">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <param name="len">복사할 입력 문자열의 바이트 수입니다.</param>
      <returns>
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />이 아니면 네이티브 ANSI 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 메모리에 저장된 문자열에서 첫 번째 null이 나올 때까지의 모든 문자를 해당 개체로 복사합니다.</summary>
      <param name="ptr">유니코드 플랫폼의 경우 첫째 유니코드 문자의 주소입니다.
또는
ANSI 플랫폼의 경우 첫 번째 ANSI 문자의 주소입니다.</param>
      <returns>
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />가 아니면 관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 메모리에 저장된 문자열에서 지정된 수의 문자를 그 안에 복사합니다.</summary>
      <param name="ptr">유니코드 플랫폼의 경우 첫째 유니코드 문자의 주소입니다.
또는
ANSI 플랫폼의 경우 첫 번째 ANSI 문자의 주소입니다.</param>
      <param name="len">복사할 문자 수입니다.</param>
      <returns>
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />이 아니면 네이티브 문자열의 복사본이 들어 있는 관리되는 문자열이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 메모리에 저장된 BSTR(이진 문자열)을 그 안에 복사합니다.</summary>
      <param name="ptr">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <returns>관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" />가 <see cref="F:System.IntPtr.Zero" />와 같습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 유니코드 문자열에서 첫 번째 null이 나올 때까지의 모든 문자를 해당 개체로 복사합니다.</summary>
      <param name="ptr">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <returns>
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />가 아니면 관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>관리되는 <see cref="T:System.String" />을 할당하고 관리되지 않는 유니코드 문자열의 지정된 문자 수를 그 안에 복사합니다.</summary>
      <param name="ptr">관리되지 않는 문자열의 첫 문자 주소입니다.</param>
      <param name="len">복사할 유니코드 문자 수입니다.</param>
      <returns>
        <paramref name="ptr" /> 매개 변수의 값이 <see langword="null" />가 아니면 관리되지 않는 문자열의 복사본을 보유하는 관리되는 문자열이고, 그렇지 않으면 이 메서드에서 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr" />
      <param name="byteLen" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>관리되지 않는 메모리 블록의 데이터를 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structure">데이터가 복사될 대상 개체입니다. 이 개체는 형식이 지정된 클래스의 인스턴스여야 합니다.</param>
      <exception cref="T:System.ArgumentException">구조체 레이아웃이 Sequential 또는 Explicit이 아닌 경우
또는
구조체가 boxed 값 형식인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>관리되지 않는 메모리 블록의 데이터를 지정된 형식의 새로 할당된 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structureType">만들 개체의 형식입니다. 이 개체는 서식이 지정된 클래스나 구조체를 나타내야 합니다.</param>
      <returns>
        <paramref name="ptr" /> 매개 변수가 가리키는 데이터가 있는 관리되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> 매개 변수 레이아웃이 Sequential 또는 Explicit이 아닌 경우
또는
<paramref name="structureType" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.MissingMethodException">
        <paramref name="structureType" />에서 지정한 클래스에는 액세스할 수 있는 매개 변수가 없는 생성자가 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 메모리 블록의 데이터를 제네릭 형식 매개 변수에 의해 지정된 형식의 새로 할당된 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <typeparam name="T">데이터가 복사될 개체의 형식입니다. 이 개체는 서식이 지정된 클래스나 구조체여야 합니다.</typeparam>
      <returns>
        <paramref name="ptr" /> 매개 변수가 가리키는 데이터가 있는 관리되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> 레이아웃이 Sequential 또는 Explicit이 아닌 경우</exception>
      <exception cref="T:System.MissingMethodException">
        <typeparamref name="T" />에서 지정한 클래스에는 액세스할 수 있는 매개 변수가 없는 생성자가 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 메모리 블록의 데이터를 지정된 형식의 관리되는 개체로 마샬링합니다.</summary>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터입니다.</param>
      <param name="structure">데이터가 복사될 대상 개체입니다.</param>
      <typeparam name="T">
        <paramref name="structure" />의 형식입니다. 형식이 지정된 클래스여야 합니다.</typeparam>
      <exception cref="T:System.ArgumentException">구조체 레이아웃이 Sequential 또는 Explicit이 아닌 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>COM 개체에서 지정된 인터페이스에 대한 포인터를 요청합니다.</summary>
      <param name="pUnk">쿼리될 인터페이스입니다.</param>
      <param name="iid">요청된 인터페이스의 IID(인터페이스 식별자)입니다.</param>
      <param name="ppv">이 메서드는 반환될 때 반환된 인터페이스에 대한 참조를 포함합니다.</param>
      <returns>호출의 성공이나 실패를 나타내는 HRESULT입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>관리되지 않는 메모리에서 싱글바이트를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns>관리되지 않는 메모리에서 읽은 바이트입니다.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋(또는 인덱스) 위치에서 싱글바이트를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 바이트입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋(또는 인덱스) 위치에서 싱글바이트를 읽습니다.</summary>
      <param name="ptr">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 바이트입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>관리되지 않는 메모리에서 16비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns>관리되지 않는 메모리에서 읽은 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에서 16비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에서 16비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 16비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>관리되지 않는 메모리에서 32비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns>관리되지 않는 메모리에서 읽은 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에서 32비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리에서 읽은 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에서 32비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 32비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>관리되지 않는 메모리에서 64비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns>관리되지 않는 메모리에서 읽은 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에서 64비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에서 64비트 부호 있는 정수를 읽습니다.</summary>
      <param name="ptr">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 64비트 부호 있는 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>관리되지 않는 메모리에서 프로세서의 기본 크기로 지정된 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 주소입니다.</param>
      <returns>관리되지 않는 메모리에서 읽은 정수입니다. 32비트 컴퓨터에서는 32비트 정수가 반환되고 64비트 컴퓨터에서는 64비트 정수가 반환됩니다.</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에서 프로세서의 기본 크기로 지정된 정수를 읽습니다.</summary>
      <param name="ptr">읽을 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>관리되지 않는 메모리에서 프로세서의 기본 크기로 지정된 정수를 읽습니다.</summary>
      <param name="ptr">소스 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">읽기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <returns>관리되지 않는 메모리의 지정된 오프셋 위치에서 읽은 정수입니다.</returns>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />을 사용하여 이전에 할당된 메모리 블록 크기를 조정합니다.</summary>
      <param name="pv">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />을 사용하여 할당된 메모리에 대한 포인터입니다.</param>
      <param name="cb">할당된 블록의 새 크기입니다.</param>
      <returns>다시 할당된 메모리 블록 주소를 나타내는 정수입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />을 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />을 사용하여 이전에 할당된 메모리 블록 크기를 조정합니다.</summary>
      <param name="pv">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />을 사용하여 할당된 메모리에 대한 포인터입니다.</param>
      <param name="cb">할당된 블록의 새 크기입니다. 이것은 포인터가 아니라 요청하는 바이트 수로, 형식 <see cref="T:System.IntPtr" />로 캐스팅합니다. 포인터를 전달하면 크기로 처리됩니다.</param>
      <returns>다시 할당된 메모리에 대한 포인터입니다. 이 메모리는 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />을 사용하여 해제되어야 합니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메모리가 부족하여 요청을 만족시킬 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>지정된 인터페이스의 참조 횟수를 감소시킵니다.</summary>
      <param name="pUnk">해제할 인터페이스입니다.</param>
      <returns>
        <paramref name="pUnk" /> 매개 변수에서 지정하는 인터페이스에 대한 참조 횟수의 새 값입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>지정된 COM 개체와 연결된 지정된 RCW(런타임 호출 가능 래퍼)의 참조 횟수를 감소시킵니다.</summary>
      <param name="o">해제할 COM 개체입니다.</param>
      <returns>
        <paramref name="o" />와 연결된 RCW 참조 횟수의 새 값입니다. RCW는 참조를 호출하는 관리되는 클라이언트의 수에 관계없이 래핑된 COM 개체에 대한 참조를 하나만 유지하므로 일반적으로 이 값은 0이 됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" />가 올바른 개체 범위가 아닌 경우</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>관리되지 않는 이진 문자열(BSTR)을 할당하고 관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>복사할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.Security.SecureString" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소이거나 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>관리되는 <see cref="T:System.Security.SecureString" /> 개체의 콘텐츠를 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 길이가 0인 <see cref="T:System.Security.SecureString" /> 개체인 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>지정된 COM 개체에서 지정된 키가 참조하는 데이터를 설정합니다.</summary>
      <param name="obj">데이터를 저장할 COM 개체입니다.</param>
      <param name="key">데이터를 저장할 COM 개체의 내부 해시 테이블에 있는 키입니다.</param>
      <param name="data">설정할 데이터입니다.</param>
      <returns>데이터가 성공적으로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" />가 <see langword="null" />인 경우
또는
<paramref name="key" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" />가 COM 개체가 아닌 경우
또는
<paramref name="obj" />가 Windows 런타임 개체입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>개체의 관리되지 않는 크기(바이트)를 반환합니다.</summary>
      <param name="structure">크기가 반환되는 개체입니다.</param>
      <returns>비관리 코드에서 지정된 개체의 크기입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>관리되지 않는 형식의 크기(바이트)를 반환합니다.</summary>
      <param name="t">크기가 반환되는 형식입니다.</param>
      <returns>비관리 코드에서 지정된 형식의 크기입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> 매개 변수는 제네릭 형식 정의입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
관리되지 않는 형식의 크기(바이트)를 반환합니다.</summary>
      <typeparam name="T">크기가 반환되는 형식입니다.</typeparam>
      <returns>
        <typeparamref name="T" /> 제네릭 형식 매개 변수로 지정된 형식의 크기(바이트 단위)입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 개체의 관리되지 않은 크기를 반환합니다(바이트 단위).</summary>
      <param name="structure">크기가 반환되는 개체입니다.</param>
      <typeparam name="T">
        <paramref name="structure" /> 매개 변수의 형식입니다.</typeparam>
      <returns>비관리 코드에서 지정된 개체의 크기(바이트)입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>BSTR을 할당하고 관리되는 <see cref="T:System.String" />의 내용을 그 안에 복사합니다.</summary>
      <param name="s">복사할 관리되는 문자열입니다.</param>
      <returns>
        <see langword="BSTR" />에 대한 관리되지 않는 포인터 또는 <paramref name="s" />가 null인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" />의 길이가 범위를 벗어난 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s">복사할 관리되는 문자열입니다.</param>
      <returns>문자열에 할당된 메모리 블록에 대한 포인터를 나타내는 정수이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s">복사할 관리되는 문자열입니다.</param>
      <returns>할당된 메모리 블록이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" />의 길이가 범위를 벗어난 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s">복사할 관리되는 문자열입니다.</param>
      <returns>문자열에 할당된 메모리 블록에 대한 포인터를 나타내는 정수이거나 s가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>복사할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s">복사할 관리되는 문자열입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>필요할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s">복사할 관리되는 문자열입니다.</param>
      <returns>관리되지 않는 메모리에서 문자열이 복사된 주소이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>관리되는 <see cref="T:System.String" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s">복사할 관리되는 문자열입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 <see langword="null" />인 경우 0입니다.</returns>
      <exception cref="T:System.OutOfMemoryException">메서드가 충분한 네이티브 힙 메모리를 할당할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> 매개 변수가 운영 체제에서 허용되는 최대 길이를 초과하는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>관리되는 개체의 데이터를 관리되지 않는 메모리 블록으로 마샬링합니다.</summary>
      <param name="structure">마샬링될 데이터가 있는 관리되는 개체입니다. 이 개체는 구조체이거나 형식이 지정된 클래스의 인스턴스여야 합니다.</param>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터로서 이 메서드가 호출되기 전에 할당되어야 합니다.</param>
      <param name="fDeleteOld">이 메서드가 데이터를 복사하기 전에 <paramref name="ptr" /> 매개 변수에 대해 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> 메서드를 호출하려면 <see langword="true" />입니다. 블록에는 유효한 데이터가 있어야 합니다. 메모리 블록에 이미 데이터가 포함되어 있을 때 <see langword="false" />를 전달하면 메모리 누수가 발생할 수 있습니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" />가 형식이 지정된 클래스가 아닌 참조 형식인 경우
또는
<paramref name="structure" />은 제네릭 형식(.NET Framework 4.5 및 이전 버전에만 해당)의 인스턴스입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 관리되는 개체의 데이터를 관리되지 않는 메모리 블록으로 마샬링합니다.</summary>
      <param name="structure">마샬링될 데이터가 있는 관리되는 개체입니다. 이 개체는 구조체이거나 형식이 지정된 클래스의 인스턴스여야 합니다.</param>
      <param name="ptr">관리되지 않는 메모리 블록에 대한 포인터로서 이 메서드가 호출되기 전에 할당되어야 합니다.</param>
      <param name="fDeleteOld">이 메서드가 데이터를 복사하기 전에 <paramref name="ptr" /> 매개 변수에 대해 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> 메서드를 호출하려면 <see langword="true" />입니다. 블록에는 유효한 데이터가 있어야 합니다. 메모리 블록에 이미 데이터가 포함되어 있을 때 <see langword="false" />를 전달하면 메모리 누수가 발생할 수 있습니다.</param>
      <typeparam name="T">관리되는 개체의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" />가 형식이 지정된 클래스가 아닌 참조 형식인 경우</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>시스템의 기본 문자 크기를 나타냅니다. 유니코드 시스템의 경우 기본값이 2이고, ANSI 시스템의 경우 1입니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>현재 운영 체제에서 DBCS(더블바이트 문자 집합)의 최대 크기(바이트)를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>오류가 있는 특정 HRESULT 값을 사용하여 예외를 throw합니다.</summary>
      <param name="errorCode">해당 예외에 해당하는 HRESULT입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>지정된 IErrorInfo 인터페이스에 따라 특정 오류 HRESULT가 포함된 예외를 발생시킵니다.</summary>
      <param name="errorCode">해당 예외에 해당하는 HRESULT입니다.</param>
      <param name="errorInfo">오류에 대한 추가 정보를 제공하는 IErrorInfo 인터페이스에 대한 포인터입니다. 현재 IErrorInfo 인터페이스를 사용하려면 <c>IntPtr(0)</c>을 지정하고, 현재 IErrorInfo 인터페이스를 무시하고 오류 코드에서만 예외를 생성하려면 <c>IntPtr(-1)</c>을 지정합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>지정된 배열의 지정된 인덱스에 있는 요소의 주소를 가져옵니다.</summary>
      <param name="arr">필요한 요소가 포함된 배열입니다.</param>
      <param name="index">원하는 요소의 <paramref name="arr" /> 매개 변수에 있는 인덱스입니다.</param>
      <returns>
        <paramref name="index" />에 있는 <paramref name="arr" /> 주소입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>[.NET Framework 4.5.1 이상 버전에서 지원됨]
지정된 형식의 배열에 지정된 인덱스에 있는 요소의 주소를 가져옵니다.</summary>
      <param name="arr">필요한 요소가 포함된 배열입니다.</param>
      <param name="index">
        <paramref name="arr" /> 배열에서 원하는 요소의 인덱스입니다.</param>
      <typeparam name="T">배열의 형식입니다.</typeparam>
      <returns>
        <paramref name="index" />에 있는 <paramref name="arr" /> 주소입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>관리되지 않는 메모리에 싱글바이트 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 싱글바이트 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 싱글바이트 값을 씁니다.</summary>
      <param name="ptr">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>관리되지 않는 메모리에 16비트 정수 값으로 문자를 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>관리되지 않는 메모리에 16비트 정수 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">네이티브 힙에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 16비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>관리되지 않는 메모리에 부호 있는 32비트 정수 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 32비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 32비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 64비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">데이터를 쓸 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>관리되지 않는 메모리에 부호 있는 64비트 정수 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 64비트 부호 있는 정수 값을 씁니다.</summary>
      <param name="ptr">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>관리되지 않는 메모리의 지정된 오프셋 위치에 프로세서의 기본 크기로 지정된 정수 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>관리되지 않는 메모리에 프로세서의 기본 크기로 지정된 정수 값을 씁니다.</summary>
      <param name="ptr">관리되지 않는 메모리에서 값을 쓸 주소입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" />의 형식을 인식할 수 없는 경우
또는
<paramref name="ptr" />이(가) <see langword="null" />인 경우.
또는
<paramref name="ptr" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>관리되지 않는 메모리에 프로세서의 기본 크기로 지정된 정수 값을 씁니다.</summary>
      <param name="ptr">대상 개체에 대한 관리되지 않는 메모리의 기본 주소입니다.</param>
      <param name="ofs">쓰기 전에 <paramref name="ptr" /> 매개 변수에 추가되는 추가 바이트 오프셋입니다.</param>
      <param name="val">작성할 값입니다.</param>
      <exception cref="T:System.AccessViolationException">기준 주소(<paramref name="ptr" />)에 오프셋 바이트(<paramref name="ofs" />)를 더하면 null 또는 잘못된 주소가 생성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" />이 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 개체인 경우. 이 메서드에는 <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 매개 변수를 사용할 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> 메서드를 사용하여 할당된 BSTR 포인터를 해제합니다.</summary>
      <param name="s">해제할 <see langword="BSTR" />의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> 메서드를 사용하여 할당한 관리되지 않는 문자열 포인터를 해제합니다.</summary>
      <param name="s">해제할 관리되지 않는 문자열의 주소입니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>관리 코드와 비관리 코드 간에 데이터를 마샬링하는 방법을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="unmanagedType">데이터를 마샬링할 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 열거형 멤버를 사용하여 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="unmanagedType">데이터를 마샬링할 값입니다.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>관리되지 않는 <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 또는 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" />의 요소 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>COM에서 사용하는 관리되지 않는 <see langword="iid_is" /> 특성의 매개 변수 인덱스를 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>사용자 지정 마샬러에 추가 정보를 제공합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>사용자 지정 마샬러의 정규화된 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" />을 형식으로 구현합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />의 요소 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />의 사용자 정의 요소 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>가져올 고정 길이 배열의 요소 개수 또는 문자열의 문자 수(바이트 수가 아님)를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>COM에 있는 <see langword="size_is" />와 같이 배열 요소의 수가 들어 있고 0부터 시작하는 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>데이터를 마샬링할 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 값을 가져옵니다.</summary>
      <returns>데이터를 마샬링할 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>지원되지 않는 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />가 나타날 때 마샬러에서 throw하는 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>기본 속성을 사용하여 <see langword="MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 데이터로부터 <see langword="MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see langword="MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외의 원인을 지정하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary>네이티브 라이브러리를 관리하기 위한 API를 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary>지정된 OS 핸들을 사용하여 로드된 라이브러리를 해제하거나 입력 핸들이 <see cref="F:System.IntPtr.Zero" />인 경우 아무런 작업도 수행하지 않습니다.</summary>
      <param name="handle">해제될 네이티브 라이브러리 OS 핸들입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary>내보낸 기호의 주소를 가져옵니다.</summary>
      <param name="handle">네이티브 라이브러리 OS 핸들입니다.</param>
      <param name="name">내보낸 기호의 이름입니다.</param>
      <returns>기호의 주소입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.EntryPointNotFoundException">기호를 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary>OS 로더를 래핑하고 기본 플래그를 사용하는 네이티브 라이브러리를 로드하기 위한 간단한 API를 제공합니다.</summary>
      <param name="libraryPath">로드할 네이티브 라이브러리의 이름입니다.</param>
      <returns>로드된 네이티브 라이브러리의 OS 핸들입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.DllNotFoundException">라이브러리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">라이브러리가 올바르지 않습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary>네이티브 라이브러리를 로드하기 위한 상위 수준 API를 제공합니다.</summary>
      <param name="libraryName">로드할 네이티브 라이브러리의 이름입니다.</param>
      <param name="assembly">네이티브 라이브러리를 로드하는 어셈블리입니다.</param>
      <param name="searchPath">검색 경로입니다.</param>
      <returns>로드된 라이브러리의 OS 핸들입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryName" /> 또는 <paramref name="assembly" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" />가 <see langword="RuntimeAssembly" />가 아닌 경우</exception>
      <exception cref="T:System.DllNotFoundException">라이브러리를 찾을 수 없습니다.</exception>
      <exception cref="T:System.BadImageFormatException">라이브러리가 올바르지 않습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary>어셈블리에서 네이티브 라이브러리 가져오기를 확인하기 위한 콜백을 설정합니다.</summary>
      <param name="assembly">해결 프로그램이 등록된 어셈블리입니다.</param>
      <param name="resolver">등록할 확인자 콜백입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 또는 paramref name="resolver" /&gt;는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">이 어셈블리에 대한 해결 프로그램이 이미 설정되어 있습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary>내보낸 기호의 주소를 가져오고 메서드 호출이 성공했는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="handle">네이티브 라이브러리 OS 핸들입니다.</param>
      <param name="name">내보낸 기호의 이름입니다.</param>
      <param name="address">메서드가 반환될 때 기호 주소(있는 경우)를 포함합니다.</param>
      <returns>메서드가 성공적으로 반환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary>네이티브 라이브러리를 로드하기 위한 간단한 API를 제공하고 작업이 성공했는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="libraryPath">로드할 네이티브 라이브러리의 이름입니다.</param>
      <param name="handle">메서드가 반환될 때 로드된 네이티브 라이브러리의 OS 핸들입니다.</param>
      <returns>네이티브 라이브러리가 성공적으로 로드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary>네이티브 라이브러리를 로드하고 작업이 성공했는지 여부를 나타내는 값을 반환하는 상위 수준 API를 제공합니다.</summary>
      <param name="libraryName">로드할 네이티브 라이브러리의 이름입니다.</param>
      <param name="assembly">네이티브 라이브러리를 로드하는 어셈블리입니다.</param>
      <param name="searchPath">검색 경로입니다.</param>
      <param name="handle">메서드가 반환될 때 로드된 네이티브 라이브러리의 OS 핸들입니다.</param>
      <returns>로드 작업이 성공적으로 수행되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> 또는 <paramref name="assembly" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" />가 <see langword="RuntimeAssembly" />가 아닌 경우</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>매개 변수가 옵션임을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>기본값을 사용하여 <see langword="OptionalAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>COM interop 호출 중에 발생하는 HRESULT 또는 <see langword="retval" /> 시그니처 변환을 생략해야 함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>특성 사용 어셈블리가 주 interop 어셈블리임을 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 및 부 버전 번호로 <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="major">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 버전입니다.</param>
      <param name="minor">이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 부 버전입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 버전 번호를 가져옵니다.</summary>
      <returns>이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 주 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 부 버전 번호를 가져옵니다.</summary>
      <returns>이 어셈블리가 주 interop 어셈블리인 형식 라이브러리의 부 버전 번호입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>사용자가 클래스의 ProgID를 지정할 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>지정된 ProgId를 사용하여 <see langword="ProgIdAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="progId">클래스에 할당할 ProgID입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>클래스의 ProgID를 가져옵니다.</summary>
      <returns>클래스의 ProgID입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>공용 언어 런타임 환경에 대한 정보를 반환하는 <see langword="static" /> 메서드 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>지정된 어셈블리가 전역 어셈블리 캐시에 로드되는지 테스트합니다.</summary>
      <param name="a">테스트할 어셈블리입니다.</param>
      <returns>어셈블리가 전역 어셈블리 캐시에 로드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>공용 언어 런타임이 설치된 디렉터리를 반환합니다.</summary>
      <returns>공용 언어 런타임이 설치된 디렉터리 경로를 포함하는 문자열입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>지정된 클래스의 지정된 인터페이스를 반환합니다.</summary>
      <param name="clsid">원하는 클래스의 식별자입니다.</param>
      <param name="riid">원하는 인터페이스의 식별자입니다.</param>
      <returns>요청된 인터페이스에 대한 관리되지 않는 포인터입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface 실패.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>
        <see langword="IUnknown" /> 인터페이스에 대한 포인터를 사용하여 COM 개체를 나타내는 형식의 인스턴스를 반환합니다.</summary>
      <param name="clsid">원하는 클래스의 식별자입니다.</param>
      <param name="riid">원하는 인터페이스의 식별자입니다.</param>
      <returns>지정된 관리되지 않는 COM 개체를 나타내는 개체입니다.</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface 실패.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>현재 프로세스에서 실행되는 공용 언어 런타임의 버전 번호를 가져옵니다.</summary>
      <returns>공용 언어 런타임의 버전 번호를 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>시스템 구성 파일 경로를 가져옵니다.</summary>
      <returns>시스템 구성 파일 경로입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>들어오는 <see langword="SAFEARRAY" />의 순위가 관리되는 시그니처에서 지정된 순위와 일치하지 않을 경우 발생한 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>기본값을 사용하여 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 데이터로부터 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see langword="SafeArrayRankMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>들어오는 <see langword="SAFEARRAY" />의 형식이 관리되는 시그니처에서 지정된 형식과 일치하지 않을 경우 발생한 예외입니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>기본값을 사용하여 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 데이터로부터 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see langword="SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>읽기 및 쓰기에 사용할 수 있는 제어되는 메모리 버퍼를 제공합니다. 제어되는 버퍼 외부의 메모리에 액세스(언더런 및 오버런)하려고 하면 예외가 발생됩니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 클래스의 새 인스턴스를 만들고 버퍼 핸들이 안정적으로 해제될지 여부를 지정합니다.</summary>
      <param name="ownsHandle">종료 단계에서 핸들을 안정적으로 해제하려면 <see langword="true" />이고, 안정적으로 해제할 수 없게 하려면 <see langword="false" />(권장되지 않음)입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 개체에서 메모리 블록에 대한 포인터를 가져옵니다.</summary>
      <param name="pointer">
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 개체 내부에서 포인터를 받기 위해 참조에서 전달하는 바이트 포인터입니다. 이 메서드를 호출하기 전에 이 포인터를 <see langword="null" />로 설정해야 합니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>버퍼의 크기(바이트)를 가져옵니다.</summary>
      <returns>메모리 버퍼의 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>지정된 요소 수 및 요소 크기를 사용하여 메모리 버퍼의 할당 크기를 지정합니다. <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</summary>
      <param name="numElements">버퍼의 요소 수입니다.</param>
      <param name="sizeOfEachElement">버퍼의 각 요소 크기입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" />가 0보다 작은 경우
또는
<paramref name="sizeOfEachElement" />가 0보다 작은 경우
또는
<paramref name="numElements" />에 <paramref name="sizeOfEachElement" />를 곱한 크기가 사용 가능한 주소 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>메모리 영역의 할당 크기(바이트)를 정의합니다. <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</summary>
      <param name="numBytes">버퍼의 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" />가 0보다 작은 경우
또는
<paramref name="numBytes" />가 사용 가능한 주소 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>값 형식의 수를 지정하여 메모리 영역의 할당 크기를 정의합니다. <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> 인스턴스를 사용하려면 먼저 이 메서드를 호출해야 합니다.</summary>
      <param name="numElements">메모리를 할당할 값 형식의 요소 수입니다.</param>
      <typeparam name="T">메모리를 할당할 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" />가 0보다 작은 경우
또는
<paramref name="numElements" />는 각 요소의 크기를 곱한 것으로 사용 가능한 주소 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>메모리의 지정된 오프셋 위치에서 값 형식을 읽습니다.</summary>
      <param name="byteOffset">값 형식을 읽어올 위치입니다. 정렬 문제를 고려해야 할 수 있습니다.</param>
      <typeparam name="T">읽을 값 형식입니다.</typeparam>
      <returns>메모리에서 읽어온 값 형식입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>메모리의 오프셋 시작 위치에서 지정된 수의 값 형식을 읽어서 이를 배열의 인덱스 시작 위치에 씁니다.</summary>
      <param name="byteOffset">읽기를 시작할 위치입니다.</param>
      <param name="array">쓸 출력 배열입니다.</param>
      <param name="index">출력 배열에서 쓰기를 시작할 위치입니다.</param>
      <param name="count">입력 배열에서 읽어서 출력 배열에 쓸 값 형식의 수입니다.</param>
      <typeparam name="T">읽을 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="count" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">배열에서 인덱스를 뺀 길이가 <paramref name="count" />보다 작은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>
        <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /> 메서드에서 가져온 포인터를 해제합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>메모리의 지정된 위치에 값 형식을 씁니다.</summary>
      <param name="byteOffset">쓰기를 시작할 위치입니다. 정렬 문제를 고려해야 할 수 있습니다.</param>
      <param name="value">작성할 값입니다.</param>
      <typeparam name="T">쓸 값 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>입력 배열의 지정된 위치에서 시작하여 바이트를 읽어 메모리 위치에 지정된 수의 값 형식을 씁니다.</summary>
      <param name="byteOffset">메모리에서 쓸 위치입니다.</param>
      <param name="array">입력 배열입니다.</param>
      <param name="index">배열에서 읽기를 시작할 오프셋입니다.</param>
      <param name="count">쓸 값 형식의 수입니다.</param>
      <typeparam name="T">쓸 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">입력 배열에서 <paramref name="index" />를 뺀 길이가 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> 메서드가 호출되지 않았습니다.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>SEH(구조적 예외 처리기) 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 데이터로부터 <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 나타내는 메시지입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Runtime.InteropServices.SEHException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외의 원인인 예외입니다. <paramref name="inner" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>예외를 복구할 수 있는지 여부와 예외가 throw된 위치부터 코드를 계속 진행할 수 있는지 여부를 나타냅니다.</summary>
      <returns>다시 시작할 수 있는 예외가 아직 구현되지 않았으므로 항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>표준 CLR(공용 언어 런타임) 자유 스레드된 마샬러를 표준 OLE STA 마샬러로 바꿉니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>동일 형식에 대한 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>지정된 범위와 식별자를 사용하여 <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> 클래스의 새 인스턴스를 만듭니다.</summary>
      <param name="scope">첫 번째 동일 형식 문자열입니다.</param>
      <param name="identifier">두 번째 동일 형식 문자열입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 생성자에 전달된 <paramref name="identifier" /> 매개 변수의 값을 가져옵니다.</summary>
      <returns>생성자의 <paramref name="identifier" /> 매개 변수 값입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> 생성자에 전달된 <paramref name="scope" /> 매개 변수의 값을 가져옵니다.</summary>
      <returns>생성자의 <paramref name="scope" /> 매개 변수 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>처음에 COM 형식 라이브러리에서 이 메서드로 가져온 <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>지정된 <see langword="TypeLibFuncAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">가져온 형식 라이브러리에 있는 특성 사용 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>지정된 <see langword="TypeLibFuncAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">가져온 형식 라이브러리에 있는 특성 사용 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>이 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값을 가져옵니다.</summary>
      <returns>이 메서드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>이 메서드를 가져온 COM 형식 라이브러리에 있는 <see langword="FUNCFLAGS" />의 처음 설정을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>데이터 바인딩을 지원하는 함수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>개체를 가장 잘 표현하는 함수입니다. 형식 정보에 있는 한 함수만 이 특성을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>컴파일러가 "abc" 형식의 "xyz"로 명명된 멤버를 찾는 경우 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로써 플래그하면, 호출은 해당 멤버 함수로 생성됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>사용자에게 바인딩할 수 있는 것으로 표시되는 함수입니다. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>함수가 존재하고 바인딩 가능하더라도 사용자에게 표시되면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>함수는 별개의 바인딩 가능한 속성으로 매핑됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>이 속성은 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>설정된 경우, 속성을 설정하는 메서드를 호출하면 먼저 <see langword="IPropertyNotifySink::OnRequestEdit" />가 호출됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>이 플래그는 시스템 수준 함수 또는 형식 브라우저가 표시하지 않는 함수를 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>이 함수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>형식 정보 멤버는 사용자 인터페이스에 표시하는 기본 멤버입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>이 함수는 <see langword="GetLastError" />를 지원합니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>인터페이스를 단독으로 사용하는 <see cref="T:System.Type" />을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>인터페이스를 단독으로 사용하는 <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" />을 지정하여 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="importClass">인터페이스를 단독으로 사용하는 <see cref="T:System.Type" /> 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>인터페이스를 단독으로 사용하는 <see cref="T:System.Type" /> 개체의 이름을 가져옵니다.</summary>
      <returns>인터페이스를 단독으로 사용하는 <see cref="T:System.Type" /> 개체의 이름입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>처음에 COM 형식 라이브러리에서 이 형식으로 가져온 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>지정된 <see langword="TypeLibTypeAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">가져온 형식 라이브러리에 있는 특성 사용 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>지정된 <see langword="TypeLibTypeAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">가져온 형식 라이브러리에 있는 특성 사용 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>이 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값을 가져옵니다.</summary>
      <returns>이 형식에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>이 형식을 가져온 COM 형식 라이브러리에 있는 <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />의 처음 설정을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>이 클래스는 집계를 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>
        <see langword="Application" /> 개체를 설명하는 형식 설명입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>이 형식의 인스턴스는 <see langword="ITypeInfo::CreateInstance" />가 만들 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>이 형식은 다른 형식을 파생시킨 컨트롤이며, 사용자에게 보이면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>이 인터페이스가 <see langword="IDispatch" />에서 직접적이든 간접적이든 파생됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>이 인터페이스는 <see langword="IDispatch" />와 vtable 테이블 바인딩을 모두 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>이 형식이 브라우저에 나타나면 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>이 형식은 허가되었습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>이 인터페이스는 런타임에서 멤버를 추가할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>인터페이스에서 사용된 형식은 vtable 바인딩 지원을 포함하여 Automation과 완벽하게 호환됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>이 형식은 미리 정의됩니다. 클라이언트 애플리케이션은 이 특성을 가진 개체의 단일 인스턴스를 자동으로 만들어야 합니다. 개체를 가리키는 변수의 이름은 개체의 클래스 이름과 동일합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>이 개체는 <see langword="IConnectionPointWithDefault" />를 지원하며 기본 동작을 수행합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>이 플래그는 시스템 수준 형식 또는 형식 브라우저가 표시하지 않는 형식을 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>자식 인터페이스를 확인하기 전에 기본 인터페이에 대해 이름 확인을 수행해야 함을 나타냅니다. 이는 기본 동작과는 반대입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>처음에 COM 형식 라이브러리에서 이 필드로 가져온 <see cref="T:System.Runtime.InteropServices.VARFLAGS" />가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">가져온 형식 라이브러리에 있는 특성 사용 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> 값을 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">가져온 형식 라이브러리에 있는 특성 사용 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>이 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값을 가져옵니다.</summary>
      <returns>이 필드에 대한 <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 값입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>이 변수를 가져온 COM 형식 라이브러리에 있는 <see cref="T:System.Runtime.InteropServices.VARFLAGS" />의 처음 설정을 설명합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>이 변수는 데이터 바인딩을 지원합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>변수는 개체를 가장 잘 표현하는 단일 속성입니다. 형식 정보에 있는 단 하나의 변수만 이 값을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>컴파일러가 "abc" 형식의 "xyz"로 명명된 멤버를 찾는 경우 최적화를 허용합니다. 이러한 멤버를 발견하여 기본 컬렉션의 요소에 대한 접근자 함수로써 플래그하면, 호출은 해당 멤버 함수로 생성됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>변수는 바인딩할 수 있는 것으로 표시되며, <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" />도 설정되어야 합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>이 변수가 존재하고 있고 바인딩할 수 있지만 브라우저에 표시되어서는 안 됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>변수는 별개의 바인딩 가능한 속성으로 매핑됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>이 변수는 속성 브라우저가 아니라 개체 브라우저에 나타납니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>변수로의 할당은 허용되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>인터페이스가 기본 동작을 사용하는 것으로 표시합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>속성이 COM의 <see langword="OnRequestEdit" /> 알림을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>이 플래그는 시스템 수준 함수 또는 형식 브라우저가 표시하지 않는 함수를 위한 것입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>변수는 이벤트의 소스인 개체를 반환합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>사용자 인터페이스에 있는 기본 표시입니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>내보낸 형식 라이브러리의 버전 번호를 지정합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>형식 라이브러리의 주 및 부 버전 번호를 사용하여 <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="major">형식 라이브러리의 주 버전 번호입니다.</param>
      <param name="minor">형식 라이브러리의 부 버전 번호입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>형식 라이브러리의 주 버전 번호를 가져옵니다.</summary>
      <returns>형식 라이브러리의 주 버전 번호입니다.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>형식 라이브러리의 부 버전 번호를 가져옵니다.</summary>
      <returns>형식 라이브러리의 부 버전 번호입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>마샬러가 <see langword="VT_UNKNOWN" />으로 마샬링할 개체를 래핑합니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>래핑할 개체를 사용하여 <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj">래핑 중인 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>이 래퍼에 포함된 개체를 가져옵니다.</summary>
      <returns>래핑된 개체입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>관리되지 않는 함수 포인터로 비관리 코드에 전달하거나 비관리 코드로부터 전달된 대리자 시그니처의 마샬링 동작을 제어합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>지정된 호출 규칙을 사용하여 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callingConvention">지정된 호출 규칙입니다.</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>유니코드 문자를 ANSI 문자로 변환할 때 가장 적합한 매핑 동작을 활성화 또는 비활성화합니다.</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>호출 규칙의 값을 가져옵니다.</summary>
      <returns>
        <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 생성자에 지정된 호출 규칙의 값입니다.</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>문자열 매개 변수를 메서드로 마샬링하는 방법을 지정하고 이름 변환을 제어합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>특성 사용 메서드에서 반환하기 전에 호출 수신자가 <see langword="SetLastError" /> Windows API 함수를 호출할지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>ANSI "?" 문자로 변환되는 매핑할 수 없는 유니코드 문자가 나오면 예외를 throw하거나 throw하지 않습니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>매개 변수나 필드를 비관리 코드로 마샬링하는 방법을 식별합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>싱글 바이트 길이 접두사가 있는 ANSI 문자열입니다. <see cref="T:System.String" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>런타임에서 개체의 형식을 결정하고 해당 형식으로 개체를 마샬링하는 동적 형식입니다. 이 메서드는 플랫폼 호출 메서드에만 유효합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4바이트 부울 값(<see langword="true" /> != 0, <see langword="false" /> = 0)입니다. Win32 BOOL 형식입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>더블바이트 길이 접두사가 있는 유니코드 문자열입니다. COM의 기본 문자열인 이 멤버는 <see cref="T:System.String" /> 데이터 형식에 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>
        <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 속성이 <see langword="ByValArray" />로 설정된 경우, <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 필드는 배열에 있는 요소의 수를 나타내도록 설정되어야 합니다. <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 필드는 문자열 형식 간을 구분해야 하는 경우 배열 요소의 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />을 포함할 수도 있습니다. 이 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />은 구조체에서 필드로 나타나는 요소가 있는 배열에만 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>구조체 내에 나타나는 인라인 고정 길이 문자 배열에 사용됩니다. <see langword="ByValTStr" /> 형식은 구조체 내에서 C 스타일의 고정 크기 문자열 (예: <c>char s[5]</c>)처럼 동작합니다. <see langword="ByValTStr" />과 함께 사용되는 문자 형식은 포함하는 구조체에 적용된 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 특성의 <see cref="T:System.Runtime.InteropServices.CharSet" /> 인수에 의해 결정됩니다. 항상 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 필드를 사용하여 배열의 크기를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>통화 형식입니다. <see langword="Decimal" /> 대신 COM 통화 형식으로 10진 값을 마샬링하기 위해 <see cref="T:System.Decimal" />에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 또는 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 필드와 함께 사용될 때 사용자 지정 마샬러 클래스를 지정합니다. <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 필드는 사용자 지정 마샬러에 추가 정보를 전달하는 데 사용할 수 있습니다. 이 멤버는 모든 참조 형식에 사용할 수 있습니다. 이 멤버는 매개 변수 및 반환 값에만 사용할 수 있습니다. 필드에는 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 또는 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" />에 연결되어 있으며, 내보낸 형식 라이브러리에서 매개 변수를 HRESULT로 내보내도록 하는 네이티브 형식입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>C 스타일 함수 포인터로 사용할 수 있는 정수입니다. 이 멤버는 <see cref="T:System.Delegate" /> 데이터 형식 또는 <see cref="T:System.Delegate" />에서 상속된 형식에 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Windows 런타임 문자열입니다. <see cref="T:System.String" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>부호 있는 1바이트 정수입니다. 이 멤버를 사용하여 부울 값을 1바이트 C 스타일 <see langword="bool" />(<see langword="true" /> = 1, <see langword="false" /> = 0)로 변환할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>부호 있는 2바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>부호 있는 4바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>부호 있는 8바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM <see langword="IDispatch" /> 포인터(Microsoft Visual Basic 6.0의<see langword="Object" /> )입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Windows 런타임 인터페이스 포인터입니다. <see cref="T:System.Object" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM 인터페이스 포인터. 인터페이스의 <see cref="T:System.Guid" />는 클래스 메타데이터에서 얻을 수 있습니다. 정확한 인터페이스 형식 또는 클래스에 적용할 경우 기본 인터페이스 형식을 지정하려면 이 멤버를 사용하세요. 이 멤버를 <see cref="T:System.Object" /> 데이터 형식에 적용하면 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />과 같은 동작이 생성됩니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM <see langword="IUnknown" /> 포인터입니다. <see cref="T:System.Object" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>C 스타일 배열의 첫 번째 요소에 대한 포인터입니다. 관리되는 코드에서 관리되지 않는 코드로 마샬링하면 배열의 길이는 관리되는 배열의 길이에 의해 결정됩니다. 비관리 코드에서 관리 코드로 마샬링할 때 배열의 길이는 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 및 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 필드에서 결정되며, 문자열 형식 간을 구분해야 하는 경우 필요에 따라 배열 내 요소의 관리되지 않는 형식이 뒤에 옵니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>싱글 바이트 null로 끝나는 ANSI 문자열입니다. <see cref="T:System.String" /> 및 <see cref="T:System.Text.StringBuilder" /> 데이터 형식에 이 멤버를 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>관리되는 서식이 지정된 클래스를 마샬링할 때 사용하는 C 스타일 구조체에 대한 포인터입니다. 이 메서드는 플랫폼 호출 메서드에만 유효합니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>플랫폼 종속 문자열: Windows 98에서는 ANSI, Windows NT 및 Windows XP에서는 유니코드를 지원합니다. <see langword="LPTStr" /> 형식의 문자열은 내보낼 수 없으므로 이 값은 플랫폼 호출에 대해서만 지원되고 COM interop에 대해서는 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>UTF-8로 인코딩된 문자열에 대한 포인터입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>2바이트 null로 끝나는 유니코드 문자열입니다. 관리되지 않는 <see langword="CoTaskMemAlloc" /> 함수를 사용하여 문자열을 작성한 경우가 아니면 관리되지 않는 문자열과 함께 <see langword="LPWStr" /> 값을 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4바이트 부동 소수점 수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8바이트 부동 소수점 수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>형식, 차수, 관련된 배열 데이터의 범위를 전달하는 자동 기술 배열인 <see langword="SafeArray" />입니다. 이 멤버를 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> 필드와 함께 사용하여 기본 요소 형식을 재정의할 수 있습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>형식이 지정된 관리되는 클래스와 값 형식을 마샬링하는 데 사용되는 VARIANT입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>플랫폼 종속의 부호 있는 정수: 32비트 Windows에서는 4바이트, 64비트 Windows에서는 8바이트입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>플랫폼 종속의 부호 없는 정수: 32비트 Windows에서는 4바이트, 64비트 Windows에서는 8바이트입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>길이 접두사가 있는 플랫폼 종속 <see langword="char" /> 문자열: Windows 98의 ANSI, Windows NT의 유니코드. BSTR과와 비슷한 이 멤버는 거의 사용하지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>부호 없는 1바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>부호 없는 2바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>부호 없는 4바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>부호 없는 8바이트 정수입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2바이트 OLE 정의 VARIANT_BOOL 형식(<see langword="true" /> = -1, <see langword="false" /> = 0)입니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Visual Basic에서 비관리 코드의 문자열을 변경하고 결과를 관리 코드에 반영되도록 하는 데 사용할 수 있는 값입니다. 이 값은 플랫폼 호출에만 지원됩니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>배열이 관리 코드에서 비관리 코드로 <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />로 마샬링될 때 배열 요소가 마샬링될 방법을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>
        <see langword="SAFEARRAY" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>길이 접두사가 있는 바이트를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>blob이 개체를 포함하고 있다는 것을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>부울 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>BSTR 문자열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>값이 참조임을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>C 스타일 배열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>클립보드 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>클래스 ID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>통화 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>DATE 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>
        <see langword="decimal" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>
        <see langword="IDispatch" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>값이 지정되지 않았음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>SCODE를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>FILETIME 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>HRESULT를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>
        <see langword="char" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>
        <see langword="short" /> 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>
        <see langword="long" /> 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>64비트 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>정수 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>null로 끝나는 문자열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>
        <see langword="null" />로 끝나는 와이드 문자열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>SQL의 null 값과 비슷한 null 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>포인터 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>
        <see langword="float" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>
        <see langword="double" /> 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>사용자 정의된 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>SAFEARRAY를 나타냅니다. VARIANT에서는 유효하지 않습니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>그 뒤에 스토리지 이름이 나온다는 것을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>스토리지가 개체를 포함하고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>그 뒤에 스트림 이름이 나온다는 것을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>스트림이 개체를 포함하고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>
        <see langword="byte" />를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>
        <see langword="unsigned" />
        <see langword="short" />를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>
        <see langword="unsigned" />
        <see langword="long" />를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>부호 없는 64비트 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>
        <see langword="unsigned" /> 정수 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>
        <see langword="IUnknown" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>사용자 정의된 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>VARIANT <see langword="far" /> 포인터를 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>셀 수 있는 단순한 배열을 나타냅니다.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>C 스타일 <see langword="void" />를 나타냅니다.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>
        <see langword="VT_VARIANT | VT_BYREF" /> 형식의 데이터를 관리 코드에서 비관리 코드로 마샬링합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>지정된 <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 매개 변수에 대해 <see cref="T:System.Object" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="obj">마샬링할 개체입니다.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 개체로 래핑된 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> 개체로 래핑된 개체입니다.</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>더 이상 필요 없게 되면 컴퓨터 메모리에서 삭제되는 텍스트처럼 기밀을 유지해야 하는 텍스트를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>
        <see cref="T:System.Security.SecureString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 인스턴스의 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.NotSupportedException">이 작업이 이 플랫폼에서 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>
        <see cref="T:System.Char" /> 개체의 하위 배열에서 <see cref="T:System.Security.SecureString" /> 클래스의 새 인스턴스를 초기화합니다.
이 생성자는 CLS 규격이 아닙니다. CLS 규격 대체 항목은 <see cref="M:System.Security.SecureString.#ctor" />입니다.</summary>
      <param name="value">
        <see cref="T:System.Char" /> 개체의 배열에 대한 포인터입니다.</param>
      <param name="length">새 인스턴스에 포함할 <paramref name="value" />의 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" />가 0보다 작거나 65,536보다 큽니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.NotSupportedException">이 작업이 이 플랫폼에서 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>현재 보안 문자열의 끝에 문자를 추가합니다.</summary>
      <param name="c">이 보안 문자열에 추가할 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>현재 보안 문자열의 값을 삭제합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 보안 문자열이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>현재 보안 문자열의 복사본을 만듭니다.</summary>
      <returns>이 보안 문자열의 복제본입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>현재 <see cref="T:System.Security.SecureString" /> 개체에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>이 보안 문자열의 지정한 인덱스 위치에 문자를 삽입합니다.</summary>
      <param name="index">
        <paramref name="c" /> 매개 변수가 삽입될 인덱스 위치입니다.</param>
      <param name="c">삽입할 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 큰 경우
또는
이 작업을 수행하면 이 보안 문자열의 길이가 65536문자보다 커집니다.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>이 보안 문자열이 읽기 전용으로 표시되었는지를 나타냅니다.</summary>
      <returns>이 보안 문자열이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>현재 보안 문자열의 문자 수를 가져옵니다.</summary>
      <returns>이 보안 문자열에 있는 <see cref="T:System.Char" /> 개체의 수입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>이 보안 문자열의 텍스트 값을 읽기 전용으로 만듭니다.</summary>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>이 보안 문자열에서 지정한 인덱스 위치의 문자를 제거합니다.</summary>
      <param name="index">이 보안 문자열에서 문자의 인덱스 위치입니다.</param>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>지정한 인덱스 위치의 기존 문자를 다른 문자로 바꿉니다.</summary>
      <param name="index">이 보안 문자열에서 기존 문자의 인덱스 위치입니다.</param>
      <param name="c">기존 문자를 바꾸는 문자입니다.</param>
      <exception cref="T:System.ObjectDisposedException">이 보안 문자열이 이미 삭제된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 보안 문자열이 읽기 전용인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 이 보안 문자열의 길이보다 크거나 같은 경우</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">이 보안 문자열 값을 보호하거나 보호 해제하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary>관리되지 않는 메모리를 할당하고 관리되지 않는 메모리 블록을 복사하는 메서드의 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>관리되는 <see cref="T:System.Security.SecureString" /> 개체의 내용을 관리되지 않는 COM 작업 할당자에서 할당된 메모리 블록으로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소 또는 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>복사할 때 ANSI 형식으로 변환하여 관리되는 <see cref="T:System.Security.SecureString" />의 내용을 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" /> 매개 변수가 복사된 주소이거나 null 개체가 제공된 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>관리되는 <see cref="T:System.Security.SecureString" /> 개체의 콘텐츠를 관리되지 않는 메모리로 복사합니다.</summary>
      <param name="s">복사할 관리되는 개체입니다.</param>
      <returns>관리되지 않는 메모리에서 <paramref name="s" />가 복사된 주소이거나 <paramref name="s" />가 길이가 0인 <see cref="T:System.Security.SecureString" /> 개체인 경우 0입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">현재 컴퓨터에서 Windows 2000 서비스 팩 3 이상을 실행하지 않는 경우</exception>
      <exception cref="T:System.OutOfMemoryException">사용 가능한 메모리가 부족한 경우</exception>
    </member>
  </members>
</doc>
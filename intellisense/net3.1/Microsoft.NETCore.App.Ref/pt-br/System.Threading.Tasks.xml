<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>A exceção que é gerada em um thread com o cancelamento de uma operação que o thread estava sendo executado.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.OperationCanceledException" /> com uma mensagem de erro fornecida pelo sistema.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.OperationCanceledException" /> com dados serializados.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.OperationCanceledException" /> com uma mensagem de erro especificada.</summary>
      <param name="message">Um <see cref="T:System.String" /> que descreve o erro.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.OperationCanceledException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="innerException">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="innerException" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.OperationCanceledException" /> com uma mensagem de erro, uma referência à exceção interna que é a causa da exceção e um token de cancelamento especificados.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="innerException">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="innerException" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
      <param name="token">Um token de cancelamento associado à operação que foi cancelada.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.OperationCanceledException" /> com uma mensagem de erro e um token de cancelamento.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="token">Um token de cancelamento associado à operação que foi cancelada.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.OperationCanceledException" /> com um token de cancelamento.</summary>
      <param name="token">Um token de cancelamento associado à operação que foi cancelada.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>Obtém um token associado com a operação que foi cancelada.</summary>
      <returns>Um token associado com a operação que foi cancelada ou um token padrão.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>Representa um construtor para iteradores assíncronos.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>Marca a iteração como sendo concluída, com êxito ou não.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>Cria uma instância do struct <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" />.</summary>
      <returns>A instância inicializada.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>Invoca <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" /> na máquina de estado enquanto protege o <see cref="T:System.Threading.ExecutionContext" />.</summary>
      <param name="stateMachine">A instância de máquina de estado, passada por referência.</param>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>Representa um construtor para métodos assíncronos que retornam uma tarefa.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído. Esse método pode ser chamado de código parcialmente confiável.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>Cria uma instância de <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" /> classe.</summary>
      <returns>Uma nova instância do construtor.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>Marca a tarefa como com falha e associa a exceção especificada à tarefa.</summary>
      <param name="exception">A exceção para associar à tarefa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A tarefa já foi concluída.
-ou-
O construtor não foi inicializado.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>Marca a tarefa como concluída com êxito.</summary>
      <exception cref="T:System.InvalidOperationException">A tarefa já foi concluída.
-ou-
O construtor não foi inicializado.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associa o construtor com a máquina de estado especificada.</summary>
      <param name="stateMachine">A instância de máquina de estado a ser associada com o construtor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A máquina de estado foi definida anteriormente.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>Começa a execução do construtor com a máquina de estado associada.</summary>
      <param name="stateMachine">A instância de máquina de estado, passada por referência.</param>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>Obtém a tarefa para esse construtor.</summary>
      <returns>A tarefa para este construtor.</returns>
      <exception cref="T:System.InvalidOperationException">O construtor não foi inicializado.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>Representa um construtor para métodos assíncronos, que retorna uma tarefa e fornece um parâmetro para o resultado.</summary>
      <typeparam name="TResult">O resultado a ser usado para concluir a tarefa.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído. Esse método pode ser chamado de código parcialmente confiável.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>Cria uma instância de <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" /> classe.</summary>
      <returns>Uma nova instância do construtor.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Marca a tarefa como com falha e associa a exceção especificada à tarefa.</summary>
      <param name="exception">A exceção para associar à tarefa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A tarefa já foi concluída.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>Marca a tarefa como concluída com êxito.</summary>
      <param name="result">O resultado a ser usado para concluir a tarefa.</param>
      <exception cref="T:System.InvalidOperationException">A tarefa já foi concluída.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associa o construtor com a máquina de estado especificada.</summary>
      <param name="stateMachine">A instância de máquina de estado a ser associada com o construtor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A máquina de estado foi definida anteriormente.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Começa a execução do construtor com a máquina de estado associada.</summary>
      <param name="stateMachine">A instância de máquina de estado, passada por referência.</param>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>Obtém a tarefa para esse construtor.</summary>
      <returns>A tarefa para este construtor.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>Representa um construtor para métodos assíncronos que não retornam um valor.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa para que a máquina de estado prossiga para a próxima ação quando o awaiter especificado for concluído. Esse método pode ser chamado de código parcialmente confiável.</summary>
      <param name="awaiter">O awaiter.</param>
      <param name="stateMachine">A máquina de estado.</param>
      <typeparam name="TAwaiter">O tipo do aguardador.</typeparam>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>Cria uma instância de <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" /> classe.</summary>
      <returns>Uma nova instância do construtor.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>Associa uma exceção ao construtor de método.</summary>
      <param name="exception">A exceção a ser associada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O construtor não foi inicializado.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>Marca o construtor de método como concluído com êxito.</summary>
      <exception cref="T:System.InvalidOperationException">O construtor não foi inicializado.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Associa o construtor com a máquina de estado especificada.</summary>
      <param name="stateMachine">A instância de máquina de estado a ser associada com o construtor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A máquina de estado foi definida anteriormente.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>Começa a execução do construtor com a máquina de estado associada.</summary>
      <param name="stateMachine">A instância de máquina de estado, passada por referência.</param>
      <typeparam name="TStateMachine">O tipo da máquina de estado.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>Fornece um tipo que pode ser usado para configurar as esperas em um <see cref="T:System.IAsyncDisposable" /> são realizadas.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>Libera de forma assíncrona os recursos não gerenciados usados pelo <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" />.</summary>
      <returns>Uma tarefa que representa a operação de descarte assíncrona.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>Fornece um enumerável assíncrono aguardável que permite uma iteração cancelável e esperas configuradas.</summary>
      <typeparam name="T">O tipo de valores a serem enumerados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>Configura como as esperas nas tarefas retornadas da iteração assíncrona serão realizadas.</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> para capturar e realizar marshaling de volta para o contexto atual; caso contrário, <see langword="false" />.</param>
      <returns>O enumerável configurado.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>Fornece um enumerador assíncrono aguardável que permite uma iteração cancelável e esperas configuradas.</summary>
      <typeparam name="T">O tipo de valores a serem enumerados.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>Realiza tarefas definidas pelo aplicativo associadas à liberação ou à redefinição de recursos não gerenciados de forma assíncrona.</summary>
      <returns>Uma tarefa que representa a operação de descarte assíncrona.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>Avança o enumerador de maneira assíncrona para o próximo elemento da coleção.</summary>
      <returns>Um <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> que será concluído com um resultado de <see langword="true" /> se o enumerador tiver avançado com êxito para o próximo elemento ou <see langword="false" /> se o enumerador tiver passado do final da coleção.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Retorna um enumerador que itera de forma assíncrona por meio de coleções que habilitam a iteração cancelável e awaits configurados.</summary>
      <returns>Um enumerador para a classe <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>Define o <see cref="T:System.Threading.CancellationToken" /> a ser passado para o <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> ao iterar.</summary>
      <param name="cancellationToken">O token de cancelamento a ser usado.</param>
      <returns>O enumerável configurado.</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Sinaliza para um <see cref="T:System.Threading.CancellationToken" /> que ele deve ser cancelado.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.CancellationTokenSource" /> que será cancelada depois do atraso especificado em milissegundos.</summary>
      <param name="millisecondsDelay">O intervalo de tempo em milissegundos para aguardar antes de cancelar essa <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> é menor que -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.CancellationTokenSource" /> que será cancelada depois do intervalo de tempo especificado.</summary>
      <param name="delay">O intervalo de tempo de espera antes de cancelar essa <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> é menor que -1 ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Comunica uma solicitação de cancelamento.</summary>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> foi descartado.</exception>
      <exception cref="T:System.AggregateException">Uma exceção de agregação que contém todas as exceções geradas pelos retornos de chamada registrados no <see cref="T:System.Threading.CancellationToken" /> associado.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Comunica uma solicitação de cancelamento e especifica se as operações canceláveis e os retornos de chamada restantes deverão ser processados se ocorrer uma exceção.</summary>
      <param name="throwOnFirstException">
        <see langword="true" /> se exceções devem propagar imediatamente; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> foi descartado.</exception>
      <exception cref="T:System.AggregateException">Uma exceção de agregação que contém todas as exceções geradas pelos retornos de chamada registrados no <see cref="T:System.Threading.CancellationToken" /> associado.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>Agenda uma operação de cancelamento neste <see cref="T:System.Threading.CancellationTokenSource" /> após o número especificado de milissegundos.</summary>
      <param name="millisecondsDelay">O período de tempo de espera antes de cancelar este <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">A exceção lançada quando este <see cref="T:System.Threading.CancellationTokenSource" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A exceção lançada quando <paramref name="millisecondsDelay" /> é menor que -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>Agenda uma operação de cancelamento neste <see cref="T:System.Threading.CancellationTokenSource" /> após o período de tempo especificado.</summary>
      <param name="delay">O período de tempo de espera antes de cancelar este <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">A exceção lançada quando este <see cref="T:System.Threading.CancellationTokenSource" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A exceção que é lançada quando <paramref name="delay" /> é menor que -1 ou maior que Int32.MaxValue.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Cria um <see cref="T:System.Threading.CancellationTokenSource" /> que estará em estado cancelado quando qualquer um dos tokens de origem estiverem no estado cancelado.</summary>
      <param name="token1">O primeiro token de cancelamento a ser observado.</param>
      <param name="token2">O segundo token de cancelamento a ser observado.</param>
      <returns>Um <see cref="T:System.Threading.CancellationTokenSource" /> vinculado aos tokens de origem.</returns>
      <exception cref="T:System.ObjectDisposedException">Um <see cref="T:System.Threading.CancellationTokenSource" /> associado a um dos tokens de origem foi descartado.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Cria uma <see cref="T:System.Threading.CancellationTokenSource" /> que estará em estado cancelado quando qualquer um dos tokens de origem na matriz especificada estiverem no estado cancelado.</summary>
      <param name="tokens">Uma matriz que contém as instâncias de token de cancelamento a serem observadas.</param>
      <returns>Um <see cref="T:System.Threading.CancellationTokenSource" /> vinculado aos tokens de origem.</returns>
      <exception cref="T:System.ObjectDisposedException">Um <see cref="T:System.Threading.CancellationTokenSource" /> associado a um dos tokens de origem foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> está vazio.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pela classe <see cref="T:System.Threading.CancellationTokenSource" /> e, opcionalmente, libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Especifica se foi solicitado cancelamento para essa <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>
        <see langword="true" /> se foi solicitado cancelamento para essa <see cref="T:System.Threading.CancellationTokenSource" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Obtém o <see cref="T:System.Threading.CancellationToken" /> associado a este <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>O <see cref="T:System.Threading.CancellationToken" /> associado a este <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
      <exception cref="T:System.ObjectDisposedException">A fonte de token foi descartada.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>Fornece agendadores de tarefa que se coordenam para executar tarefas, enquanto garantem que as tarefas simultâneas possam ser executadas simultaneamente e as tarefas exclusivas nunca.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> que tem visa o agendador especificado.</summary>
      <param name="taskScheduler">O agendador de destino no qual esse par deve ser executado.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> que tem visa o agendador especificado com um nível de simultaneidade máximo.</summary>
      <param name="taskScheduler">O agendador de destino no qual esse par deve ser executado.</param>
      <param name="maxConcurrencyLevel">O número máximo de tarefas a serem executadas simultaneamente.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> que visa o agendador especificado com um nível de simultaneidade máximo e um número máximo de tarefas agendadas que podem ser processadas como uma unidade.</summary>
      <param name="taskScheduler">O agendador de destino no qual esse par deve ser executado.</param>
      <param name="maxConcurrencyLevel">O número máximo de tarefas a serem executadas simultaneamente.</param>
      <param name="maxItemsPerTask">O número máximo de tarefas a serem processadas para cada tarefa agendada subjacente usada pelo par.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>Informa o par de agendador que ele não deve aceitar mais nenhuma tarefa.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que será concluído quando o agendador concluir o processamento.</summary>
      <returns>A operação assíncrona que será concluída quando o Agendador concluir o processamento.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.TaskScheduler" /> que pode ser usado para agendar tarefas para esse par que devem ser executadas simultaneamente com outras tarefas nesse par.</summary>
      <returns>Um objeto que pode ser usado para agendar tarefas simultaneamente.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.TaskScheduler" /> que pode ser usado para agendar tarefas para esse par que devem ser executadas exclusivamente com relação a outras tarefas nesse par.</summary>
      <returns>Um objeto que pode ser usado para agendar tarefas que não são executadas simultaneamente com outras tarefas.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>Fornece um conjunto de métodos estáticos para configurar comportamentos relacionados à tarefa em enumeráveis e descartáveis assíncronos.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>Configura como as esperas nas tarefas retornadas de um descartável assíncrono são realizadas.</summary>
      <param name="source">O descartável assíncrono de origem.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> para capturar e realizar marshaling de volta para o contexto atual; caso contrário, <see langword="false" />.</param>
      <returns>O descartável assíncrono configurado.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>Configura como as esperas nas tarefas retornadas de uma iteração assíncrona são realizadas.</summary>
      <param name="source">A origem enumerável a ser iterada.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> para capturar e realizar marshaling de volta para o contexto atual; caso contrário, <see langword="false" />.</param>
      <typeparam name="T">O tipo dos objetos a iterar.</typeparam>
      <returns>O enumerável configurado.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>Define o <see cref="T:System.Threading.CancellationToken" /> a ser passado para o <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> ao iterar.</summary>
      <param name="source">A origem enumerável a ser iterada.</param>
      <param name="cancellationToken">O token de cancelamento a ser usado.</param>
      <typeparam name="T">O tipo dos objetos a iterar.</typeparam>
      <returns>O enumerável configurado.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Representa uma exceção usada para comunicar o cancelamento da tarefa.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> com uma mensagem fornecida pelo sistema que descreve o erro.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> com dados serializados.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> com uma mensagem especificada que descreve o erro.</summary>
      <param name="message">A mensagem que descreve a exceção. O chamador desse construtor é necessário para garantir que essa cadeia de caracteres tenha sido localizada para a cultura do sistema atual.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem que descreve a exceção. O chamador desse construtor é necessário para garantir que essa cadeia de caracteres tenha sido localizada para a cultura do sistema atual.</param>
      <param name="innerException">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="innerException" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> com uma mensagem de erro especificada, uma referência à exceção interna que é a causa dessa exceção e o <see cref="T:System.Threading.CancellationToken" /> que disparou o cancelamento.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="innerException">A exceção que é a causa da exceção atual.</param>
      <param name="token">O token de cancelamento que disparou o cancelamento.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskCanceledException" /> com uma referência para o <see cref="T:System.Threading.Tasks.Task" /> que foi cancelado.</summary>
      <param name="task">Uma tarefa que foi cancelada.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Obtém a tarefa associada a essa exceção.</summary>
      <returns>Uma referência ao que <see cref="T:System.Threading.Tasks.Task" /> está associada a essa exceção.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Representa o lado do produtor de um <see cref="T:System.Threading.Tasks.Task`1" /> não associado a um delegado, fornecendo acesso ao lado do consumidor por meio da propriedade <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />.</summary>
      <typeparam name="TResult">O tipo do valor de resultado associado a este <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Cria um <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Cria uma <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> com o estado especificado.</summary>
      <param name="state">O estado a ser usado como o AsyncState subjacente da <see cref="T:System.Threading.Tasks.Task`1" />.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Cria uma <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> com o estado e as opções especificados.</summary>
      <param name="state">O estado a ser usado como o AsyncState subjacente da <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="creationOptions">As opções a serem usadas ao criar o <see cref="T:System.Threading.Tasks.Task`1" /> subjacente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="creationOptions" /> representa opções inválidas para uso com um <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Cria um <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> com as opções especificadas.</summary>
      <param name="creationOptions">As opções a serem usadas ao criar o <see cref="T:System.Threading.Tasks.Task`1" /> subjacente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="creationOptions" /> representa opções inválidas para uso com um <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Faz a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Threading.Tasks.Task`1" /> subjacente já está em um dos três estados finais: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, ou se o <see cref="T:System.Threading.Tasks.Task`1" /> subjacente já tiver sido descartado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Faz a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e associa uma coleção de objetos de exceção a ele.</summary>
      <param name="exceptions">A coleção de exceções para associar a este <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="exceptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Há um ou mais elementos nulos em <paramref name="exceptions" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Threading.Tasks.Task`1" /> subjacente já está em um dos três estados finais: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Faz a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e associa-o a uma exceção especificada.</summary>
      <param name="exception">A exceção para associar a este <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="exception" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Threading.Tasks.Task`1" /> subjacente já está em um dos três estados finais: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Faz a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">O valor do resultado a se associar a esse <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Threading.Tasks.Task`1" /> subjacente já está em um dos três estados finais: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> ou <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Obtém o <see cref="T:System.Threading.Tasks.Task`1" /> criado por esse <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <returns>Retorna o <see cref="T:System.Threading.Tasks.Task`1" /> criado por esse <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Tenta fazer a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <returns>
        <see langword="true" /> se a operação for bem-sucedida; false se a operação for malsucedida ou o objeto já tiver sido descartado.</returns>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>Tenta fazer a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> e permite que um token de cancelamento seja armazenado na tarefa cancelada.</summary>
      <param name="cancellationToken">Um token de cancelamento.</param>
      <returns>
        <see langword="true" /> se a operação for bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Tenta fazer a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e associa uma coleção de objetos de exceção a ele.</summary>
      <param name="exceptions">A coleção de exceções para associar a este <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>
        <see langword="true" /> se a operação tiver sido bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="exceptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Há um ou mais elementos nulos em <paramref name="exceptions" />.
- ou -
A coleção <paramref name="exceptions" /> está vazia.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Tenta fazer a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e o associa a uma exceção especificada.</summary>
      <param name="exception">A exceção para associar a este <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>
        <see langword="true" /> se a operação tiver sido bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Tenta fazer a transição do <see cref="T:System.Threading.Tasks.Task`1" /> subjacente para o estado <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">O valor do resultado a se associar a esse <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>
        <see langword="true" /> se a operação tiver sido bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">O <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> foi descartado.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Fornece um conjunto de métodos estáticos (compartilhado no Visual Basic) para trabalhar com tipos específicos de instâncias <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>cria um proxy <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona de um <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</summary>
      <param name="task">O <see langword="Task&lt;Task&gt;" /> (C#) ou <see langword="Task (Of Task)" /> (Visual Basic) a ser descompactado.</param>
      <returns>Uma tarefa que representa a operação assíncrona do <see langword="System.Threading.Tasks.Task(Of Task)" /> fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">A exceção lançada se o argumento <paramref name="task" /> for nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Cria um proxy <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona de um <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic).</summary>
      <param name="task">O <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (c#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic) a ser descompactado.</param>
      <typeparam name="TResult">O tipo de resultado da tarefa.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona do <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) ou <see langword="Task (Of Task(Of T))" /> (Visual Basic) fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">A exceção lançada se o argumento <paramref name="task" /> for nulo.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Representa uma exceção usada para comunicar uma operação inválida por um <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> com uma mensagem fornecida pelo sistema que descreve o erro.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> usando a mensagem de erro padrão e uma referência à exceção interna que é a causa dessa exceção.</summary>
      <param name="innerException">A exceção que é a causa da exceção atual.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> com dados serializados.</summary>
      <param name="info">O objeto que mantém os dados de objeto serializados.</param>
      <param name="context">As informações contextuais sobre a origem ou o destino.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> com uma mensagem especificada que descreve o erro.</summary>
      <param name="message">A mensagem que descreve a exceção. O chamador desse construtor é necessário para garantir que essa cadeia de caracteres tenha sido localizada para a cultura do sistema atual.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem que descreve a exceção. O chamador desse construtor é necessário para garantir que essa cadeia de caracteres tenha sido localizada para a cultura do sistema atual.</param>
      <param name="innerException">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="innerException" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
  </members>
</doc>
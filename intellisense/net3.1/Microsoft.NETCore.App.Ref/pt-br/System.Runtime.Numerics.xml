<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>Representa um inteiro com sinal arbitrariamente grande.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando os valores de uma matriz de bytes.</summary>
      <param name="value">Uma matriz de valores de bytes em ordem little endian.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor <see cref="T:System.Decimal" />.</summary>
      <param name="value">Um número decimal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>Inicializa uma nova instância de estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor de ponto flutuante de precisão dupla.</summary>
      <param name="value">Um valor de ponto flutuante de precisão dupla.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> ou <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor inteiro com sinal de 32 bits.</summary>
      <param name="value">Um inteiro com sinal de 32 bits.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor inteiro com sinal de 64 bits.</summary>
      <param name="value">Um inteiro com sinal de 64 bits.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando os valores em um intervalo de bytes somente leitura e, opcionalmente, indicando a codificação de assinatura e a ordem de byte com endian.</summary>
      <param name="value">Um intervalo de bytes somente leitura que representa o inteiro grande.</param>
      <param name="isUnsigned">
        <see langword="true" /> para indicar que <paramref name="value" /> usa codificação sem sinal; caso contrário, <see langword="false" /> (o valor padrão).</param>
      <param name="isBigEndian">
        <see langword="true" /> para indicar que <paramref name="value" /> está em uma ordem de byte big-endian; caso contrário, <see langword="false" /> (o valor padrão).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor de ponto flutuante de precisão simples.</summary>
      <param name="value">Um valor de ponto flutuante de precisão simples.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> ou <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> usando um valor inteiro de 32 bits sem sinal.</summary>
      <param name="value">Um valor inteiro de 32 bits sem sinal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.BigInteger" /> com um valor inteiro de 64 bits sem sinal.</summary>
      <param name="value">Um inteiro de 64 bits sem sinal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>Obtém o valor absoluto de um objeto <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Um número.</param>
      <returns>O valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adiciona dois valores de <see cref="T:System.Numerics.BigInteger" /> e retorna o resultado.</summary>
      <param name="left">O primeiro valor a ser adicionado.</param>
      <param name="right">O segundo valor a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compara dois valores <see cref="T:System.Numerics.BigInteger" /> e retorna um inteiro que indica se o primeiro valor é menor que, igual a ou maior que o segundo valor.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>Um inteiro assinado que indica os valores relativos de <paramref name="left" /> e <paramref name="right" />, conforme mostrado na tabela a seguir.
  Valor 
  Condição 
  Menor que zero 
 <paramref name="left" /> é menor que <paramref name="right" />.  
  
  Zero 
 <paramref name="left" /> é igual a <paramref name="right" />.  
  
  Maior que zero 
 <paramref name="left" /> é maior que <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>Compara essa instância a um inteiro com sinal de 64 bits e retorna um inteiro que indica se o valor dessa instância é menor, igual ou maior que o valor do inteiro com sinal de 64 bits.</summary>
      <param name="other">O inteiro com sinal de 64 bits para comparar.</param>
      <returns>Um valor de inteiro com sinal que indica a relação desta instância com <paramref name="other" />, conforme mostrado na tabela a seguir.
  Valor retornado 
  Descrição 
  Menor que zero 
  A instância atual é menor que <paramref name="other" />.  
  
  Zero 
  A instância atual é igual a <paramref name="other" />.  
  
  Maior que zero 
  A instância atual é maior que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>Compara esta instância a um segundo <see cref="T:System.Numerics.BigInteger" /> e retorna um inteiro que indica se o valor desta instância é menor, igual ou maior que o valor do objeto especificado.</summary>
      <param name="other">O objeto a ser comparado.</param>
      <returns>Um valor de inteiro com sinal que indica a relação desta instância com <paramref name="other" />, conforme mostrado na tabela a seguir.
  Valor retornado 
  Descrição 
  Menor que zero 
  A instância atual é menor que <paramref name="other" />.  
  
  Zero 
  A instância atual é igual a <paramref name="other" />.  
  
  Maior que zero 
  A instância atual é maior que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>Compara esta instância a um objeto especificado e retorna um inteiro que indica se o valor desta instância é menor, igual ou maior que o valor do objeto especificado.</summary>
      <param name="obj">O objeto a ser comparado.</param>
      <returns>Um inteiro com sinal que indica a relação da instância atual com o parâmetro <paramref name="obj" />, conforme mostrado na tabela a seguir.
  Valor retornado 
  Descrição 
  Menor que zero 
  A instância atual é menor que <paramref name="obj" />.  
  
  Zero 
  A instância atual é igual a <paramref name="obj" />.  
  
  Maior que zero 
  A instância atual é maior do que <paramref name="obj" /> ou o parâmetro <paramref name="obj" /> é <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> não é um <see cref="T:System.Numerics.BigInteger" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>Compara essa instância a um inteiro sem sinal de 64 bits e retorna um inteiro que indica se o valor dessa instância é menor, igual ou maior que o valor do inteiro sem sinal de 64 bits.</summary>
      <param name="other">O inteiro sem sinal de 64 bits para comparar.</param>
      <returns>Um inteiro com sinal que indica o valor relativo dessa instância e <paramref name="other" />, conforme mostrado na tabela a seguir.
Valor retornadoDescriçãoMenor que zeroA instância atual é menor que <paramref name="other" />.ZeroA instância atual é igual a <paramref name="other" />.Maior que zeroA instância atual é maior que <paramref name="other" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divide um valor <see cref="T:System.Numerics.BigInteger" /> em outro e retorna o resultado.</summary>
      <param name="dividend">O valor a ser dividido.</param>
      <param name="divisor">O valor pelo qual dividir.</param>
      <returns>O quociente da divisão.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>Divide um valor <see cref="T:System.Numerics.BigInteger" /> por outro, retorna o resultado e retorna o restante em um parâmetro de saída.</summary>
      <param name="dividend">O valor a ser dividido.</param>
      <param name="divisor">O valor pelo qual dividir.</param>
      <param name="remainder">Quando este método retorna, contém um valor <see cref="T:System.Numerics.BigInteger" /> que representa o restante da divisão. Este parâmetro é passado não inicializado.</param>
      <returns>O quociente da divisão.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>Retorna um valor que indica se a instância atual e um inteiro com sinal de 64 bits têm o mesmo valor.</summary>
      <param name="other">O valor inteiro com sinal de 64 bits para comparar.</param>
      <returns>
        <see langword="true" /> se o inteiro com sinal de 64 bits e a instância atual tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se a instância atual e um objeto <see cref="T:System.Numerics.BigInteger" /> especificado têm o mesmo valor.</summary>
      <param name="other">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se este objeto <see cref="T:System.Numerics.BigInteger" /> e <paramref name="other" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>Retorna um valor que indica se a instância atual e um objeto especificado têm o mesmo valor.</summary>
      <param name="obj">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se o <paramref name="obj" /> argumento for um objeto <see cref="T:System.Numerics.BigInteger" /> e seu valor for igual ao valor da instância <see cref="T:System.Numerics.BigInteger" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>Retorna um valor que indica se a instância atual e um inteiro sem sinal de 64 bits têm o mesmo valor.</summary>
      <param name="other">O inteiro sem sinal de 64 bits para comparar.</param>
      <returns>
        <see langword="true" /> se a instância atual e o inteiro sem sinal de 64 bits tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary>Obtém o número de bytes que serão gerados por <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> e <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" />.</summary>
      <param name="isUnsigned">
        <see langword="true" /> para usar a codificação sem sinal; caso contrário, <see langword="false" />.</param>
      <returns>O número de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>Retorna o código hash para o objeto <see cref="T:System.Numerics.BigInteger" /> atual.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Localiza o maior divisor comum de dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor.</param>
      <param name="right">O segundo valor.</param>
      <returns>O maior divisor comum de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é um número par.</summary>
      <returns>
        <see langword="true" /> se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> é um número par; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns>
        <see langword="true" /> se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> é <see cref="P:System.Numerics.BigInteger.One" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é uma potência de dois.</summary>
      <returns>
        <see langword="true" /> se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> é uma potência de dois; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>Indica se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual é <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns>
        <see langword="true" /> se o valor do objeto <see cref="T:System.Numerics.BigInteger" /> é <see cref="P:System.Numerics.BigInteger.Zero" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>Retorna o logaritmo natural (de base <see langword="e" />) de um número especificado.</summary>
      <param name="value">O número cujo logaritmo deve ser encontrado.</param>
      <returns>O logaritmo natural (base <see langword="e" />) de <paramref name="value" />, conforme mostrado na tabela na seção Comentários.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O log natural de <paramref name="value" /> está fora do intervalo do tipo de dados <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>Retorna o logaritmo de um número especificado em uma base especificada.</summary>
      <param name="value">Um número cujo logaritmo deve ser localizado.</param>
      <param name="baseValue">A base do logaritmo.</param>
      <returns>O logaritmo de base <paramref name="baseValue" /> de <paramref name="value" />, conforme mostrado na tabela na seção Comentários.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O log de <paramref name="value" /> está fora do intervalo do tipo de dados <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>Retorna o logaritmo de base 10 de um número especificado.</summary>
      <param name="value">Um número cujo logaritmo deve ser localizado.</param>
      <returns>O logaritmo de base 10 de <paramref name="value" />, conforme mostrado na tabela na seção Comentários.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O log de base 10 de <paramref name="value" /> está fora do intervalo do tipo de dados <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna o maior dos dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>O parâmetro <paramref name="left" /> ou <paramref name="right" />, o que for maior.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna o menor de dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>O parâmetro <paramref name="left" /> ou <paramref name="right" />, o que for menor.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>Obtém um valor que representa o número um negativo (-1).</summary>
      <returns>Um inteiro cujo valor é negativo (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Executa a divisão de módulo em um número elevado à potência de outro número.</summary>
      <param name="value">O número a ser elevado à potência <paramref name="exponent" />.</param>
      <param name="exponent">O expoente pelo qual <paramref name="value" /> será elevado.</param>
      <param name="modulus">O número pelo qual dividir o <paramref name="value" /> elevado à potência <paramref name="exponent" />.</param>
      <returns>O resto após dividir o <paramref name="value" />exponente por <paramref name="modulus" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> é zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> é negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna o produto de dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro número a multiplicar.</param>
      <param name="right">O segundo número a multiplicar.</param>
      <returns>O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>Nega um valor <see cref="T:System.Numerics.BigInteger" /> especificado.</summary>
      <param name="value">O valor a ser negado.</param>
      <returns>O resultado do parâmetro <paramref name="value" /> multiplicado por um negativo (-1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>Obtém um valor que representa o número um (1).</summary>
      <returns>Um objeto cujo valor é um (1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Adiciona os valores dos dois objetos <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left">O primeiro valor a ser adicionado.</param>
      <param name="right">O segundo valor a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Executa uma operação <see langword="And" /> bit a bit em dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor.</param>
      <param name="right">O segundo valor.</param>
      <returns>O resultado da operação <see langword="And" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Executa uma operação <see langword="Or" /> bit a bit em dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor.</param>
      <param name="right">O segundo valor.</param>
      <returns>O resultado da operação <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>Diminui um valor <see cref="T:System.Numerics.BigInteger" /> em 1.</summary>
      <param name="value">O valor a ser diminuído.</param>
      <returns>O valor do parâmetro <paramref name="value" /> diminuído em 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divide um valor <see cref="T:System.Numerics.BigInteger" /> especificado por outro valor <see cref="T:System.Numerics.BigInteger" /> especificado usando a divisão de inteiros.</summary>
      <param name="dividend">O valor a ser dividido.</param>
      <param name="divisor">O valor pelo qual dividir.</param>
      <returns>O resultado integral da divisão.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um valor inteiro longo com sinal e um valor <see cref="T:System.Numerics.BigInteger" /> são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um valor inteiro longo com sinal são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se os valores de dois objetos <see cref="T:System.Numerics.BigInteger" /> são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um valor inteiro longo sem sinal são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um valor inteiro longo sem sinal e um valor <see cref="T:System.Numerics.BigInteger" /> são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Executa uma operação exclusiva <see langword="Or" /> bit a bit (<see langword="XOr" />) em dois valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor.</param>
      <param name="right">O segundo valor.</param>
      <returns>O resultado da operação <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Decimal" /> em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>Define uma conversão explícita de um valor <see cref="T:System.Double" /> para um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor de byte sem sinal.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Byte" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.Byte.MinValue" /> ou maior que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor <see cref="T:System.Decimal" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Decimal" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.Decimal.MinValue" /> ou maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor <see cref="T:System.Double" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Double" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro com sinal de 16 bits.</summary>
      <param name="value">O valor a ser convertido em um inteiro com sinal de 16 bits.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.Int16.MinValue" /> ou maior que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> para um valor inteiro com sinal de 32 bits.</summary>
      <param name="value">O valor a ser convertido em um inteiro com sinal de 32 bits.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.Int32.MinValue" /> ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> para um valor inteiro com sinal de 64 bits.</summary>
      <param name="value">O valor a ser convertido em um inteiro com sinal de 64 bits.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.Int64.MinValue" /> ou maior que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor de 8 bits com sinal.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Int16" />.</summary>
      <param name="value">O valor a ser convertido em um valor de 8 bits com sinal.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.SByte.MinValue" /> ou maior que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor de ponto flutuante de precisão simples.</summary>
      <param name="value">O valor a ser convertido em um ponto flutuante de precisão simples.</param>
      <returns>Um objeto que contém a representação mais próxima possível do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro sem sinal de 16 bits.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Int32" />.</summary>
      <param name="value">O valor a ser convertido em um inteiro sem sinal de 16 bits.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.UInt16.MinValue" /> ou maior que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro sem sinal de 32 bits.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Int64" />.</summary>
      <param name="value">O valor a ser convertido em um inteiro sem sinal de 32 bits.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.UInt32.MinValue" /> ou maior que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>Define uma conversão explícita de um objeto <see cref="T:System.Numerics.BigInteger" /> em um valor inteiro sem sinal de 64 bits.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Double" />.</summary>
      <param name="value">O valor a ser convertido em um inteiro sem sinal de 64 bits.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é menor que <see cref="F:System.UInt64.MinValue" /> ou maior que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>Define uma conversão explícita de um valor <see cref="T:System.Single" /> para um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> é <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" /> ou <see cref="F:System.Single.NegativeInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro com sinal de 64 bits é maior que um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Retorna um valor que indica se um <see cref="T:System.Numerics.BigInteger" /> é maior que um valor inteiro com sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior que outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior que um inteiro sem sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior que um inteiro sem sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro com sinal de 64 bits é maior ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Retorna um valor que indica se um valor de <see cref="T:System.Numerics.BigInteger" /> é maior ou igual a um valor inteiro com sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior ou igual a outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é maior ou igual a um valor inteiro sem sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro sem sinal de 64 bits é maior ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja maior que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um byte sem sinal em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um inteiro com sinal de 16 bits em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um inteiro com sinal de 32 bits em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um inteiro com sinal de 64 bits em um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um inteiro com sinal de 8 bits em um valor <see cref="T:System.Numerics.BigInteger" />.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um inteiro sem sinal de 16 bits em um valor <see cref="T:System.Numerics.BigInteger" />.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um inteiro sem sinal de 32 bits em um valor <see cref="T:System.Numerics.BigInteger" />.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>Define uma conversão implícita de um inteiro sem sinal de 64 bits em um valor <see cref="T:System.Numerics.BigInteger" />.
Esta API não compatível com CLS. A alternativa em conformidade é <see cref="T:System.Double" />.</summary>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>Incrementa um valor <see cref="T:System.Numerics.BigInteger" /> em 1.</summary>
      <param name="value">O valor a ser incrementado.</param>
      <returns>O valor do parâmetro <paramref name="value" /> incrementado em 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro com sinal de 64 bits e um valor <see cref="T:System.Numerics.BigInteger" /> não são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um inteiro com sinal de 64 bits não são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se dois objetos <see cref="T:System.Numerics.BigInteger" /> têm valores diferentes.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> e um inteiro sem sinal de 64 bits não são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro sem sinal de 64 bits e um valor <see cref="T:System.Numerics.BigInteger" /> não são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Desloca um valor <see cref="T:System.Numerics.BigInteger" /> um número especificado de bits para a esquerda.</summary>
      <param name="value">O valor cujos bits devem ser deslocados.</param>
      <param name="shift">O número de bits a deslocar <paramref name="value" /> para a esquerda.</param>
      <returns>Um valor que foi sido deslocado para a esquerda pelo número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro com sinal de 64 bits é menor que um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor que um inteiro com sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor que outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor que um inteiro sem sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro sem sinal de 64 bits é menor que um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="left" /> seja menor que <paramref name="right" />; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro com sinal de 64 bits é menor ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor ou igual a um inteiro com sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor ou igual a outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Retorna um valor que indica se um valor <see cref="T:System.Numerics.BigInteger" /> é menor ou igual a um inteiro sem sinal de 64 bits.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Retorna um valor que indica se um inteiro sem sinal de 64 bits é menor ou igual a um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> for menor ou igual a <paramref name="right" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Retorna o resto que resulta da divisão com dois valores especificados <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="dividend">O valor a ser dividido.</param>
      <param name="divisor">O valor pelo qual dividir.</param>
      <returns>O resto que resulta da divisão.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Multiplica dois valores <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left">O primeiro valor a ser multiplicado.</param>
      <param name="right">O segundo valor a ser multiplicado.</param>
      <returns>O produto de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>Retorna o complemento bit a bit de um valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Um valor inteiro.</param>
      <returns>O complemento bit a bit de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Desloca um valor <see cref="T:System.Numerics.BigInteger" /> um número especificado de bits para a direita.</summary>
      <param name="value">O valor cujos bits devem ser deslocados.</param>
      <param name="shift">O número de bits a deslocar <paramref name="value" /> para a direita.</param>
      <returns>Um valor que foi sido deslocado para a direita pelo número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtrai um valor <see cref="T:System.Numerics.BigInteger" /> de outro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right">O valor a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>Nega um valor BigInteger especificado.</summary>
      <param name="value">O valor a ser negado.</param>
      <returns>O resultado do parâmetro <paramref name="value" /> multiplicado por um negativo (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>Retorna o valor do operando <see cref="T:System.Numerics.BigInteger" />. (O sinal do operando permanece inalterado).</summary>
      <param name="value">Um valor inteiro.</param>
      <returns>O valor do operando <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converte a representação de um número, contida no intervalo de caracteres somente leitura, em um estilo especificado para seu <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value">Um intervalo de caracteres somente leitura que contém o número a ser convertido.</param>
      <param name="style">Um combinação bit a bit de valores de enumeração que especificam o formato permitido de <paramref name="value" />.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas à cultura sobre <paramref name="value" />.</param>
      <returns>Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.
- ou -
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é compatível com o padrão de entrada especificado por <paramref name="style" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary>Converte a representação da cadeia de caracteres de um número no <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value">Uma cadeia de caracteres que contém o número a ser convertido.</param>
      <returns>Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não está no formato correto.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Converte a representação de cadeia de caracteres de um número em um estilo especificado em seu <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value">Uma cadeia de caracteres que contém um número a ser convertido.</param>
      <param name="style">Um combinação bit a bit de valores de enumeração que especificam o formato permitido de <paramref name="value" />.</param>
      <returns>Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.
- ou -
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é compatível com o padrão de entrada especificado por <see cref="T:System.Globalization.NumberStyles" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Converte a representação de cadeia de caracteres de um número com um estilo especificado e um formato específico à cultura para seu <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value">Uma cadeia de caracteres que contém um número a ser convertido.</param>
      <param name="style">Um combinação bit a bit de valores de enumeração que especificam o formato permitido de <paramref name="value" />.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas à cultura sobre <paramref name="value" />.</param>
      <returns>Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.
- ou -
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é compatível com o padrão de entrada especificado por <paramref name="style" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary>Converte a representação de cadeia de caracteres de um número em um formato específico da cultura especificado em seu equivalente de <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Uma cadeia de caracteres que contém um número a ser convertido.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas à cultura sobre <paramref name="value" />.</param>
      <returns>Um valor equivalente ao número especificado no parâmetro <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não está no formato correto.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>Gera um valor <see cref="T:System.Numerics.BigInteger" /> à potência de um valor especificado.</summary>
      <param name="value">O número a ser elevado à potência <paramref name="exponent" />.</param>
      <param name="exponent">O expoente pelo qual <paramref name="value" /> será elevado.</param>
      <returns>O resultado da elevação <paramref name="value" /> para a potência <paramref name="exponent" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> é negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Executa a divisão do inteiro em dois valores <see cref="T:System.Numerics.BigInteger" /> e retorna o restante.</summary>
      <param name="dividend">O valor a ser dividido.</param>
      <param name="divisor">O valor pelo qual dividir.</param>
      <returns>O resto após dividir <paramref name="dividend" /> por <paramref name="divisor" />.</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="divisor" /> é 0 (zero).</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>Obtém um número que indica o sinal (negativo, positivo ou zero) do objeto <see cref="T:System.Numerics.BigInteger" /> atual.</summary>
      <returns>Um número que indica o sinal do objeto <see cref="T:System.Numerics.BigInteger" />, conforme mostrado na tabela a seguir.
  Número 
  Descrição 
  -1 
  O valor desse objeto é negativo.  
  
  0 
  O valor desse objeto é 0 (zero).  
  
  1 
  O valor desse objeto é positivo.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Subtrai um valor <see cref="T:System.Numerics.BigInteger" /> de outro e retorna o resultado.</summary>
      <param name="left">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right">O valor a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>Converte um valor de <see cref="T:System.Numerics.BigInteger" /> em uma matriz de bytes.</summary>
      <returns>O valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual convertido em uma matriz de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary>Retorna o valor deste <see cref="T:System.Numerics.BigInteger" /> como uma matriz de bytes usando o menor número possível de bytes. Se o valor é zero, retorna uma matriz de um byte cujo elemento é 0x00.</summary>
      <param name="isUnsigned">
        <see langword="true" /> para usar a codificação sem sinal; caso contrário, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> para gravar os bytes em uma ordem de byte big endian; caso contrário, <see langword="false" />.</param>
      <returns>O valor do objeto <see cref="T:System.Numerics.BigInteger" /> atual convertido em uma matriz de bytes.</returns>
      <exception cref="T:System.OverflowException">Se <paramref name="isUnsigned" /> é <see langword="true" />, e <see cref="P:System.Numerics.BigInteger.Sign" /> é negativo.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual na representação da cadeia de caracteres equivalente.</summary>
      <returns>Uma representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual em sua representação de cadeia de caracteres equivalente usando as informações especificadas de formatação específicas de cultura.</summary>
      <param name="provider">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns>A representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual no formato especificado pelo parâmetro <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual para sua representação de cadeia de caracteres equivalente usando o formato especificado.</summary>
      <param name="format">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <returns>A representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual no formato especificado pelo parâmetro <paramref name="format" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>Converte o valor numérico do objeto <see cref="T:System.Numerics.BigInteger" /> atual em sua representação de cadeia de caracteres equivalente usando o formato especificado e as informações de formato específicas de cultura.</summary>
      <param name="format">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns>A representação de cadeia de caracteres do valor <see cref="T:System.Numerics.BigInteger" /> atual, conforme especificado pelos parâmetros <paramref name="format" /> e <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Formata essa instância de inteiro grande em um intervalo de caracteres.</summary>
      <param name="destination">O intervalo de caracteres no qual esta instância será gravada.</param>
      <param name="charsWritten">Quando o método é retornado, contém o comprimento do intervalo em número de caracteres.</param>
      <param name="format">Um intervalo de caracteres somente leitura que especifica o formato da operação de formatação.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> se a operação de formatação for bem-sucedida; <see langword="false" />, caso contrário.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Tenta converter a representação de cadeia de caracteres de seu equivalente de <see cref="T:System.Numerics.BigInteger" /> e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
      <param name="value">A representação de um número como um intervalo de caracteres somente leitura.</param>
      <param name="style">Um combinação bit a bit de valores de enumeração que indica os elementos de estilo que podem estar presentes em <paramref name="value" />. Um valor típico a ser especificado é <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="value" />.</param>
      <param name="result">Quando esse método é retornado, contém o equivalente <see cref="T:System.Numerics.BigInteger" /> do número contido em <paramref name="value" /> ou <see cref="P:System.Numerics.BigInteger.Zero" /> se a conversão falhou. A conversão falhará se o parâmetro <paramref name="value" /> for um intervalo de caracteres vazio ou não estiver em um formato em conformidade com <paramref name="style" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.
- ou -
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <summary>Tenta converter a representação de um número contido no intervalo de caracteres somente leitura especificado em seu <see cref="T:System.Numerics.BigInteger" /> equivalente e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
      <param name="value">A representação de um número como um intervalo de caracteres somente leitura.</param>
      <param name="result">Quando este método retorna, ele contém o <see cref="T:System.Numerics.BigInteger" /> equivalente ao número contido em <paramref name="value" /> ou zero (0) quando a conversão falha. A conversão falhará se o parâmetro <paramref name="value" /> for um intervalo de caracteres vazio ou não estiver no formato correto. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Tenta converter a representação de cadeia de caracteres de um número em um estilo e formato específico à cultura especificados no equivalente <see cref="T:System.Numerics.BigInteger" /> e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
      <param name="value">A representação de cadeia de caracteres de um número. A cadeia de caracteres é interpretada usando-se o estilo especificado por <paramref name="style" />.</param>
      <param name="style">Um combinação bit a bit de valores de enumeração que indica os elementos de estilo que podem estar presentes em <paramref name="value" />. Um valor típico a ser especificado é <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas de cultura sobre <paramref name="value" />.</param>
      <param name="result">Quando esse método é retornado, contém o equivalente <see cref="T:System.Numerics.BigInteger" /> do número contido em <paramref name="value" /> ou <see cref="P:System.Numerics.BigInteger.Zero" /> se a conversão falhou. A conversão falhará se o parâmetro <paramref name="value" /> for <see langword="null" /> ou não estiver em um formato em conformidade com <paramref name="style" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> caso o parâmetro <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> não é um valor <see cref="T:System.Globalization.NumberStyles" />.
- ou -
<paramref name="style" /> inclui o sinalizador <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> ou <see cref="F:System.Globalization.NumberStyles.HexNumber" /> em conjunto com outro valor.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary>Tenta converter a representação de cadeia de caracteres de seu equivalente de <see cref="T:System.Numerics.BigInteger" /> e retorna um valor que indica se a conversão foi bem-sucedida.</summary>
      <param name="value">A representação de cadeia de caracteres de um número.</param>
      <param name="result">Quando este método retorna, ele contém o <see cref="T:System.Numerics.BigInteger" /> equivalente ao número contido em <paramref name="value" /> ou zero (0) quando a conversão falha. A conversão falhará se o parâmetro de <paramref name="value" /> for <see langword="null" /> ou não estiver no formato correto. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> caso <paramref name="value" /> tenha sido convertido com êxito; do contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary>Copia o valor deste <see cref="T:System.Numerics.BigInteger" /> como bytes de dois complementos little endian usando o menor número possível de bytes. Se o valor é zero, produz um byte cujo elemento é 0x00.</summary>
      <param name="destination">O intervalo de destino no qual os bytes resultantes devem ser gravados.</param>
      <param name="bytesWritten">O número de bytes gravados em <paramref name="destination" />.</param>
      <param name="isUnsigned">
        <see langword="true" /> para usar a codificação sem sinal; caso contrário, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> para gravar os bytes em uma ordem de byte big endian; caso contrário, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> se os bytes se ajustam em <paramref name="destination" />; <see langword="false" /> se nem todos os bytes podem ser gravados devido à falta de espaço.</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="isUnsigned" /> é <see langword="true" />, e <see cref="P:System.Numerics.BigInteger.Sign" /> é negativo.</exception>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>Obtém um valor que representa o número 0 (zero).</summary>
      <returns>Um inteiro cujo valor é 0 (zero).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>Representa um número complexo.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Numerics.Complex" /> usando os valores reais e imaginários especificados.</summary>
      <param name="real">A parte real do número complexo.</param>
      <param name="imaginary">A parte imaginária do número complexo.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>Obtém o valor absoluto (ou magnitude) de um número complexo.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>Retorna o ângulo que é o arco cosseno do número complexo especificado.</summary>
      <param name="value">Um número complexo que representa um cosseno.</param>
      <returns>O ângulo, medido em radianos, que é o arco cosseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary>Adiciona um número real de precisão dupla a um número complexo e retorna o resultado.</summary>
      <param name="left">O valor real de precisão dupla a ser adicionado.</param>
      <param name="right">O valor complexo a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary>Adiciona um número complexo a um número real de precisão dupla e retorna o resultado.</summary>
      <param name="left">O valor complexo a ser adicionado.</param>
      <param name="right">O valor real de precisão dupla a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adiciona dois números complexos e retorna o resultado.</summary>
      <param name="left">O primeiro número complexo a ser adicionado.</param>
      <param name="right">O segundo número complexo a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>Retorna o ângulo que é o arco seno do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O ângulo que é o arco seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>Retorna o ângulo que é o arco tangente do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O ângulo que é o arco tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>Calcula o conjugado de um número complexo e retorna o resultado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O conjugado de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>Retorna o cosseno do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O cosseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>Retorna o cosseno hiperbólico do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O cosseno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary>Divide um número real de precisão dupla por um número complexo e retorna o resultado.</summary>
      <param name="dividend">O número real de precisão dupla a ser dividido.</param>
      <param name="divisor">O número complexo pelo qual dividir.</param>
      <returns>O quociente da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary>Divide um número complexo por um número real de precisão dupla e retorna o resultado.</summary>
      <param name="dividend">O número complexo a ser dividido.</param>
      <param name="divisor">O número real de precisão dupla pelo qual dividir.</param>
      <returns>O quociente da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divide um número complexo por outro e retorna o resultado.</summary>
      <param name="dividend">O número complexo a ser dividido.</param>
      <param name="divisor">O número complexo pelo qual dividir.</param>
      <returns>O quociente da divisão.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>Retorna um valor que indica se a instância atual e um número complexo especificado têm o mesmo valor.</summary>
      <param name="value">O número complexo a comparar.</param>
      <returns>
        <see langword="true" /> se este número complexo <paramref name="value" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>Retorna um valor que indica se a instância atual e um objeto especificado têm o mesmo valor.</summary>
      <param name="obj">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se o parâmetro <paramref name="obj" /> for um objeto <see cref="T:System.Numerics.Complex" /> ou um tipo capaz de conversão implícita para um objeto <see cref="T:System.Numerics.Complex" /> e seu valor for igual ao objeto <see cref="T:System.Numerics.Complex" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>Retorna <see langword="e" /> elevado à potência especificada por um número complexo.</summary>
      <param name="value">Um número complexo que especifica uma potência.</param>
      <returns>O número <see langword="e" /> elevado à potência <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>Cria um número complexo de coordenadas polares de um ponto.</summary>
      <param name="magnitude">A magnitude, que é a distância da origem (a interseção entre os eixos x e y) para o número.</param>
      <param name="phase">A fase, que é o ângulo da para o eixo horizontal, medido em radianos.</param>
      <returns>Um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>Retorna o código hash para o objeto <see cref="T:System.Numerics.Complex" /> atual.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>Obtém o componente imaginário do objeto <see cref="T:System.Numerics.Complex" /> atual.</summary>
      <returns>O componente imaginário de um número complexo.</returns>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>Retorna uma nova instância do <see cref="T:System.Numerics.Complex" /> com um número real igual a zero e um número imaginário igual a um.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary>Representa infinito como um número complexo.</summary>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary>Determina se o número complexo especificado é finito.</summary>
      <param name="value">Um número complexo.</param>
      <returns>
        <see langword="true" /> se ambas as partes, a real e a imaginária, forem finitas (zero, subnormal ou normal). Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary>Retorna um valor que indica se o número complexo especificado é avaliado como infinito.</summary>
      <param name="value">Um número complexo.</param>
      <returns>
        <see langword="true" /> se qualquer uma das partes, a real ou a imaginária, for <see cref="F:System.Double.PositiveInfinity" /> ou <see cref="F:System.Double.NegativeInfinity" />. Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary>Retorna um valor que indica se a instância complexa especificada é NaN (não é um número).</summary>
      <param name="value">Um número complexo.</param>
      <returns>
        <see langword="true" /> se o valor especificado não for finito nem infinito. Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>Retorna o logaritmo natural (de base <see langword="e" />) de um número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O logaritmo natural (de base <see langword="e" />) de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>Retorna o logaritmo de um número complexo especificado em uma base especificada.</summary>
      <param name="value">Um número complexo.</param>
      <param name="baseValue">A base do logaritmo.</param>
      <returns>O logaritmo de <paramref name="value" /> na base <paramref name="baseValue" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>Retorna o logaritmo de base 10 de um número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O logaritmo de base 10 de <paramref name="value" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>Obtém a magnitude (ou valor absoluto) de um número complexo.</summary>
      <returns>A magnitude da instância atual.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary>Retorna o produto de um número real de precisão dupla e um número complexo.</summary>
      <param name="left">O número real de precisão dupla a multiplicar.</param>
      <param name="right">O número complexo a multiplicar.</param>
      <returns>O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary>Retorna o produto de um número complexo e um número real de precisão dupla.</summary>
      <param name="left">O número complexo a multiplicar.</param>
      <param name="right">O número real de precisão dupla a multiplicar.</param>
      <returns>O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retorna o produto de dois números complexos.</summary>
      <param name="left">O primeiro número complexo a multiplicar.</param>
      <param name="right">O segundo número complexo a multiplicar.</param>
      <returns>O produto dos parâmetros <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary>Representa uma instância complexa que é NaN (não é um número).</summary>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>Retorna o inverso aditivo de um número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O resultado dos componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> do parâmetro <paramref name="value" /> multiplicado por -1.</returns>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>Retorna uma nova instância do <see cref="T:System.Numerics.Complex" /> com um número real igual a um e um número imaginário igual a zero.</summary>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary>Adiciona um número real de precisão dupla a um número complexo.</summary>
      <param name="left">O valor real de precisão dupla a ser adicionado.</param>
      <param name="right">O valor complexo a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" /> como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary>Adiciona um número complexo a um número real de precisão dupla.</summary>
      <param name="left">O valor complexo a ser adicionado.</param>
      <param name="right">O valor real de precisão dupla a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" /> como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Adiciona dois números complexos.</summary>
      <param name="left">O primeiro valor complexo a ser adicionado.</param>
      <param name="right">O segundo valor complexo a ser adicionado.</param>
      <returns>A soma de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary>Divide um número real de precisão dupla especificado por um número complexo especificado.</summary>
      <param name="left">O valor real de precisão dupla a ser dividido.</param>
      <param name="right">O valor complexo pelo qual dividir.</param>
      <returns>O resultado da divisão de <paramref name="left" /> por <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary>Divide um número complexo especificado por um número real de precisão dupla especificado.</summary>
      <param name="left">O valor complexo a ser dividido.</param>
      <param name="right">O valor real de precisão dupla pelo qual dividir.</param>
      <returns>O resultado da divisão de <paramref name="left" /> por <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divide um número complexo especificado por outro número complexo especificado.</summary>
      <param name="left">O valor complexo a ser dividido.</param>
      <param name="right">O valor complexo pelo qual dividir.</param>
      <returns>O resultado da divisão de <paramref name="left" /> por <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retorna um valor que indica se dois números complexos são iguais.</summary>
      <param name="left">O primeiro número complexo a ser comparado.</param>
      <param name="right">O segundo número complexo a ser comparado.</param>
      <returns>
        <see langword="true" /> se os parâmetros <paramref name="left" /> e <paramref name="right" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>Define uma conversão explícita de um valor <see cref="T:System.Decimal" /> para um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um número complexo que tem um componente real igual a <paramref name="value" /> e um componente imaginário igual a zero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>Define uma conversão explícita de um valor <see cref="T:System.Numerics.BigInteger" /> para um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um número complexo que tem um componente real igual a <paramref name="value" /> e um componente imaginário igual a zero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um byte sem sinal em um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>Define uma conversão explícita de um número de ponto flutuante de precisão dupla como um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um inteiro com sinal de 16 bits em um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um inteiro com sinal de 32 bits em um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um inteiro com sinal de 64 bits em um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um byte com sinal em um número complexo.
Esta API não compatível com CLS.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>Define uma conversão explícita de um número de ponto flutuante de precisão simples como um número complexo.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um inteiro sem sinal de 16 bits em um número complexo.
Esta API não compatível com CLS.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um inteiro sem sinal de 32 bits em um número complexo.
Esta API não compatível com CLS.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>Define uma conversão implícita de um inteiro sem sinal de 64 bits em um número complexo.
Esta API não compatível com CLS.</summary>
      <param name="value">O valor a ser convertido em um número complexo.</param>
      <returns>Um objeto que contém o valor do parâmetro <paramref name="value" /> como sua parte real e zero como sua parte imaginária.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retorna um valor que indica se dois números complexos não são iguais.</summary>
      <param name="left">O primeiro valor a ser comparado.</param>
      <param name="right">O segundo valor a ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary>Multiplica um número real de precisão dupla especificado por um número complexo especificado.</summary>
      <param name="left">O valor real de precisão dupla a ser multiplicado.</param>
      <param name="right">O valor complexo a ser multiplicado.</param>
      <returns>O produto de <paramref name="left" /> e <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary>Multiplica o número complexo especificado por um número real de precisão dupla especificado.</summary>
      <param name="left">O valor complexo a ser multiplicado.</param>
      <param name="right">O valor real de precisão dupla a ser multiplicado.</param>
      <returns>O produto de <paramref name="left" /> e <paramref name="right" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Multiplica dois números complexos especificados.</summary>
      <param name="left">O primeiro valor complexo a ser multiplicado.</param>
      <param name="right">O segundo valor complexo a ser multiplicado.</param>
      <returns>O produto de <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary>Subtrai um número complexo de um número real de precisão dupla.</summary>
      <param name="left">O valor real de precisão dupla do qual subtrair (o minuendo).</param>
      <param name="right">O valor complexo a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary>Subtrai um número real de precisão dupla de um número complexo.</summary>
      <param name="left">O valor complexo do qual subtrair (o minuendo).</param>
      <param name="right">O valor real de precisão dupla a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtrai um número complexo de outro número complexo.</summary>
      <param name="left">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right">O valor a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary>Retorna o inverso aditivo de um número complexo especificado.</summary>
      <param name="value">O valor a ser negado.</param>
      <returns>O resultado dos componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> do parâmetro <paramref name="value" /> multiplicado por -1.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary>Obtém a fase de um número complexo.</summary>
      <returns>A fase de um número complexo, em radianos.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary>Retorna um número complexo especificado elevado a uma potência especificada por um número de ponto flutuante de precisão dupla.</summary>
      <param name="value">Um número complexo a ser elevado a uma potência.</param>
      <param name="power">Um número de ponto flutuante de precisão dupla que especifica uma potência.</param>
      <returns>O número complexo <paramref name="value" /> elevado à potência <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Retorna um número complexo especificado elevado a uma potência especificada por um número complexo.</summary>
      <param name="value">Um número complexo a ser elevado a uma potência.</param>
      <param name="power">Um número complexo que especifica uma potência.</param>
      <returns>O número complexo <paramref name="value" /> elevado à potência <paramref name="power" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary>Obtém o componente real do objeto <see cref="T:System.Numerics.Complex" /> atual.</summary>
      <returns>O componente real de um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary>Retorna o inverso multiplicativo de um número complexo.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O recíproco de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary>Retorna o seno do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary>Retorna o seno hiperbólico do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>O seno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary>Retorna a raiz quadrada de um número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>A raiz quadrada de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary>Subtrai um número complexo de um número real de precisão dupla e retorna o resultado.</summary>
      <param name="left">O valor real de precisão dupla do qual subtrair (o minuendo).</param>
      <param name="right">O valor complexo a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary>Subtrai um número real de precisão dupla de um número complexo e retorna o resultado.</summary>
      <param name="left">O valor complexo do qual subtrair (o minuendo).</param>
      <param name="right">O valor real de precisão dupla a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />, como um número complexo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Subtrai um número complexo de outro e retorna o resultado.</summary>
      <param name="left">O valor do qual um valor será subtraído (o minuendo).</param>
      <param name="right">O valor a ser subtraído (o subtraendo).</param>
      <returns>O resultado da subtração de <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary>Retorna a tangente do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>A tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary>Retorna a tangente hiperbólico do número complexo especificado.</summary>
      <param name="value">Um número complexo.</param>
      <returns>A tangente hiperbólica de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary>Converte o valor do número complexo atual em sua representação de cadeia de caracteres equivalente usando o formato cartesiano.</summary>
      <returns>A representação de cadeia de caracteres da instância atual em formato cartesiano.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary>Converte o valor do número complexo atual na representação de cadeia de caracteres equivalente em formato cartesiano usando as informações especificadas de formatação específica à cultura.</summary>
      <param name="provider">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns>A representação de cadeia de caracteres da instância atual em formato cartesiano, conforme especificado por <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary>Converte o valor do número complexo atual na representação de cadeia de caracteres equivalente em formato cartesiano, usando o formato especificado para suas partes reais e imaginárias.</summary>
      <param name="format">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <returns>A representação de cadeia de caracteres da instância atual em formato cartesiano.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>Converte o valor do número complexo atual na representação de cadeia de caracteres equivalente em formato cartesiano, usando o formato especificado e as informações de formato específicas à cultura para suas partes reais e imaginárias.</summary>
      <param name="format">Uma cadeia de caracteres padrão ou de formato numérico personalizado.</param>
      <param name="provider">Um objeto que fornece informações de formatação específicas de cultura.</param>
      <returns>A representação de cadeia de caracteres da instância atual em formato cartesiano, conforme especificado por <paramref name="format" /> e <paramref name="provider" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> não é uma cadeia de caracteres de formato válida.</exception>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary>Retorna uma nova instância do <see cref="T:System.Numerics.Complex" /> com um número real igual a zero e um número imaginário igual a zero.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Parallel</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Parallel">
      <summary>Fornece suporte para regiões e loops paralelos.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa um loop <see langword="for" /> no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})">
      <summary>Executa um loop <see langword="for" /> no qual as iterações podem ser executadas em paralelo.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa um loop <see langword="for" /> no qual as iterações podem ser executadas em paralelo, as opções do loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})">
      <summary>Executa um loop <see langword="for" /> em que as iterações podem ser executadas em paralelo e as opções de loop podem ser configuradas.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa um loop <see langword="for" /> com índices de 64 bits no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})">
      <summary>Executa um loop <see langword="for" /> com índices de 64 bits no qual as iterações podem ser executadas em paralelo.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa um loop <see langword="for" /> com índices de 64 bits no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})">
      <summary>Executa um loop <see langword="for" /> com índices de 64 bits no qual as iterações podem ser executadas em paralelo e opções de loop podem ser configuradas.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executa um loop <see langword="for" /> com os dados locais de thread no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executa um loop <see langword="for" /> com os dados locais do thread nos quais iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executa um loop <see langword="for" /> com índices de 64 bits e dados locais de thread no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})">
      <summary>Executa um loop <see langword="for" /> com índices de 64 bits e dados locais do thread nos quais iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="fromInclusive">O índice inicial, inclusivo.</param>
      <param name="toExclusive">O índice final, exclusivo.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada thread.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada thread.</param>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador solicitável que contém a fonte de dados original.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador solicitável <paramref name="source" /> retorna <see langword="false" />.
- ou -
A propriedade <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> no particionador solicitável de origem retorna <see langword="false" />.
- ou -
Quaisquer métodos no particionador solicitável de origem retorna <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção gerada de um dos representantes especificados.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, em que iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador ordenável que contém a fonte de dados original.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador solicitável <paramref name="source" /> retorna <see langword="false" />.
- ou -
A propriedade <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> no particionador solicitável <paramref name="source" /> retorna <see langword="false" />.
- ou -
A exceção que é gerada quando qualquer método no particionador solicitável <paramref name="source" /> retorna <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que é gerada para conter uma exceção gerada de uma dos delegados especificados.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" />, na qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador que contém a fonte de dados original.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.
- ou -
O método no particionador <paramref name="source" /> retorna <see langword="null" />.
- ou -
O método <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> no particionador <paramref name="source" /> não retorna o número de partições correto.</exception>
      <exception cref="T:System.AggregateException">A exceção que é gerada para conter uma exceção gerada de uma dos delegados especificados.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" /> no qual as iterações podem ser executadas em paralelo.</summary>
      <param name="source">O particionador que contém a fonte de dados original.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.
- ou -
A exceção que é gerada quando qualquer método no particionador <paramref name="source" /> retorna <see langword="null" />.
- ou -
O método <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> no particionador <paramref name="source" /> não retorna o número de partições correto.</exception>
      <exception cref="T:System.AggregateException">A exceção que é gerada para conter uma exceção gerada de uma dos delegados especificados.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" />, em que iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador que contém a fonte de dados original.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.
- ou -
A exceção que é gerada quando qualquer método no particionador <paramref name="source" /> retorna <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que é gerada para conter uma exceção gerada de uma dos delegados especificados.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.Concurrent.Partitioner" /> no qual as iterações podem ser executadas em paralelo e as opções de loop podem ser configuradas.</summary>
      <param name="source">O particionador que contém a fonte de dados original.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no particionador <paramref name="source" /> retorna <see langword="false" />.
- ou -
A exceção que é gerada quando qualquer método no particionador <paramref name="source" /> retorna <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que é gerada para conter uma exceção gerada de uma dos delegados especificados.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com índices de 64 bits em uma <see cref="T:System.Collections.IEnumerable" /> na qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em uma <see cref="T:System.Collections.IEnumerable" /> na qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em índices de 64 bits em um <see cref="T:System.Collections.IEnumerable" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.IEnumerable" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo e as opções de loop podem ser configuradas.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais do thread em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador solicitável que contém a fonte de dados original.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com índices de 64 bits e dados locais do thread em um <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador solicitável que contém a fonte de dados original.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> ou <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais geradas em todos os threads.</exception>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados de local de thread em um <see cref="T:System.Collections.Concurrent.Partitioner" />, no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador que contém a fonte de dados original.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais do thread em um <see cref="T:System.Collections.Concurrent.Partitioner" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">O particionador que contém a fonte de dados original.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo dos elementos em <paramref name="source" />.</typeparam>
      <typeparam name="TLocal">O tipo dos dados locais do thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> no <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> retorna <see langword="false" /> ou o particionador retorna partições <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais geradas em todos os threads.</exception>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com índices de dados de local de thread em um <see cref="T:System.Collections.IEnumerable" />, no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <typeparam name="TLocal">O tipo dos dados do local de thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados de local de thread em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <typeparam name="TLocal">O tipo dos dados do local de thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais do thread em um <see cref="T:System.Collections.IEnumerable" /> no qual as iterações podem ser executadas em paralelo, as opções de loop podem ser configuradas e o estado do loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <typeparam name="TLocal">O tipo dos dados do local de thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})">
      <summary>Executa uma operação <see langword="foreach" /> (<see langword="For Each" /> no Visual Basic) com os dados locais de thread e índices de 64 bits em um <see cref="T:System.Collections.IEnumerable" />, no qual iterações podem ser executadas em paralelo, opções de loop podem ser configuradas e o estado de loop pode ser monitorado e manipulado.</summary>
      <param name="source">Uma fonte de dados enumerável.</param>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="localInit">O delegado da função que retorna o estado inicial dos dados locais para cada tarefa.</param>
      <param name="body">O delegado invocado uma vez por iteração.</param>
      <param name="localFinally">O delegado que executa uma ação final no estado local de cada tarefa.</param>
      <typeparam name="TSource">O tipo de dados na fonte.</typeparam>
      <typeparam name="TLocal">O tipo dos dados do local de thread.</typeparam>
      <returns>Uma estrutura que contém informações sobre qual parte do loop foi concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="source" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="body" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localInit" /> é <see langword="null" />.
- ou -
O argumento <paramref name="localFinally" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no argumento <paramref name="parallelOptions" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
      <exception cref="T:System.AggregateException">A exceção que contém todas as exceções individuais lançadas em todos os threads.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])">
      <summary>Executa cada uma das ações fornecidas, possivelmente em paralelo.</summary>
      <param name="actions">Uma matriz de <see cref="T:System.Action" /> para executar.</param>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="actions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que é gerada quando qualquer ação na matriz <paramref name="actions" /> gerar uma exceção.</exception>
      <exception cref="T:System.ArgumentException">A matriz <paramref name="actions" /> contém um elemento <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])">
      <summary>Executa cada uma das ações fornecidas, possivelmente em paralelo, a menos que a operação seja cancelada pelo usuário.</summary>
      <param name="parallelOptions">Um objeto que configura o comportamento dessa operação.</param>
      <param name="actions">Uma matriz de ações a serem executadas.</param>
      <exception cref="T:System.OperationCanceledException">O <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> está definido.</exception>
      <exception cref="T:System.ArgumentNullException">O argumento <paramref name="actions" /> é <see langword="null" />.
- ou -
O argumento <paramref name="parallelOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.AggregateException">A exceção que é gerada quando qualquer ação na matriz <paramref name="actions" /> gerar uma exceção.</exception>
      <exception cref="T:System.ArgumentException">A matriz <paramref name="actions" /> contém um elemento <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Threading.CancellationTokenSource" /> associado ao <see cref="T:System.Threading.CancellationToken" /> no <paramref name="parallelOptions" /> foi descartado.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopResult">
      <summary>Fornece o status de conclusão da execução de um loop <see cref="T:System.Threading.Tasks.Parallel" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.IsCompleted">
      <summary>Especifica se o loop foi executado até a conclusão, por exemplo, todas as iterações do loop foram executadas e o loop não recebeu uma solicitação para ser encerrado prematuramente.</summary>
      <returns>true se o loop foi executado até a conclusão; caso contrário, false;</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration">
      <summary>Obtém o índice de menor iteração do qual <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado.</summary>
      <returns>Retorna um inteiro que representa a iteração mais baixa da qual a instrução break foi chamada.</returns>
    </member>
    <member name="T:System.Threading.Tasks.ParallelLoopState">
      <summary>Permite que iterações de loops paralelos interajam com outras iterações. Uma instância dessa classe é fornecida pela classe <see cref="T:System.Threading.Tasks.Parallel" /> a cada loop. Você não pode criar instâncias no seu código.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Break">
      <summary>Comunica que o loop de <see cref="T:System.Threading.Tasks.Parallel" /> deve encerrar a execução de iterações além da iteração atual, conforme a necessidade mais recente do sistema.</summary>
      <exception cref="T:System.InvalidOperationException">O método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> foi chamado anteriormente. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> não podem ser usados em combinação por iterações do mesmo loop.</exception>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsExceptional">
      <summary>Obtém se qualquer iteração do loop gerou uma exceção que ficou sem tratamento por aquela iteração.</summary>
      <returns>
        <see langword="true" />se uma exceção sem tratamento foi gerada; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.IsStopped">
      <summary>Obtém se qualquer iteração do loop chamou o método <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
      <returns>
        <see langword="true" />Se qualquer iteração tiver parado o loop chamando o <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> método; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration">
      <summary>Obtém a menor iteração do loop do qual <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado.</summary>
      <returns>A iteração mais baixa <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> da qual foi chamada. No caso de um <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, o valor é baseado em um índice gerado internamente.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration">
      <summary>Obtém se a iteração atual do loop deve sair com base nas solicitações feitas por esta ou outras iterações.</summary>
      <returns>
        <see langword="true" />se a iteração atual deve sair; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Threading.Tasks.ParallelLoopState.Stop">
      <summary>Comunica que o loop <see cref="T:System.Threading.Tasks.Parallel" /> deve cessar a execução assim que for possível para o sistema.</summary>
      <exception cref="T:System.InvalidOperationException">O método <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> foi chamado anteriormente. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> e <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> não podem ser usados em combinação por iterações do mesmo loop.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ParallelOptions">
      <summary>Armazena opções que configuram a operação dos métodos na classe <see cref="T:System.Threading.Tasks.Parallel" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ParallelOptions.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.ParallelOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.CancellationToken">
      <summary>Obtém ou define o <see cref="T:System.Threading.CancellationToken" /> associado a esta instância do <see cref="T:System.Threading.Tasks.ParallelOptions" />.</summary>
      <returns>O token associado a essa instância.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.MaxDegreeOfParallelism">
      <summary>Obtém ou define o número máximo de tarefas simultâneas habilitadas por esta instância <see cref="T:System.Threading.Tasks.ParallelOptions" />.</summary>
      <returns>Um inteiro que representa o grau máximo de paralelismo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A propriedade está sendo definida como zero ou com um valor menor que -1.</exception>
    </member>
    <member name="P:System.Threading.Tasks.ParallelOptions.TaskScheduler">
      <summary>Obtém ou define o <see cref="T:System.Threading.Tasks.TaskScheduler" /> associado a esta instância do <see cref="T:System.Threading.Tasks.ParallelOptions" />. A definição dessa propriedade como nula indica que o agendador atual deve ser usado.</summary>
      <returns>O agendador de tarefas associado a esta instância.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary>Contém métodos estáticos para representação de contratos de programa, como pré-condições, pós-condições e invariáveis de objeto.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary>Verifica uma condição; se a condição for <see langword="false" />, seguirá a política de escalonamento definida para o analisador.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary>Verifica uma condição; se a condição for <see langword="false" />, seguirá a política de escalonamento definida pelo analisador e exibirá a mensagem especificada.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
      <param name="userMessage">Uma mensagem a ser exibida se a condição não for atendida.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary>Instrui as ferramentas de análise de código a assumir que a condição especificada é <see langword="true" />, mesmo que ela não possa ser estaticamente comprovada ser sempre <see langword="true" />.</summary>
      <param name="condition">A expressão condicional que assumirá <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary>Instrui as ferramentas de análise de código a pressupor que a condição é <see langword="true" />, mesmo que ela não possa ser estaticamente comprovada ser sempre <see langword="true" /> e exibe uma mensagem se a pressuposição falhar.</summary>
      <param name="condition">A expressão condicional que assumirá <see langword="true" />.</param>
      <param name="userMessage">A mensagem a ser postada se a pressuposição falhar.</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary>Ocorre quando um contrato falha.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary>Marca o fim da seção do contrato quando os contratos de um método contêm apenas precondições no formato <see langword="if" />-<see langword="then" />-<see langword="throw" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary>Especifica um contrato de pós-condição para o método ou a propriedade delimitadora.</summary>
      <param name="condition">A expressão condicional a ser testada. A expressão pode incluir os valores de <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> e <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary>Especifica um contrato de pós-condição para uma condição de saída fornecida e uma mensagem a ser exibida se a condição for <see langword="false" />.</summary>
      <param name="condition">A expressão condicional a ser testada. A expressão pode incluir os valores de <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> e <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
      <param name="userMessage">Uma mensagem a ser exibida se a expressão não for <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary>Especifica um contrato de pós-condição para o método ou a propriedade delimitadora, com base na exceção e na condição fornecidas.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
      <typeparam name="TException">O tipo de exceção que invoca a verificação de condição.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary>Especifica um contrato de pós-condição e uma mensagem a ser exibida se a condição for <see langword="false" /> para o método ou a propriedade delimitadora, com base na exceção e na condição fornecidas.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
      <param name="userMessage">A mensagem a ser exibida se a expressão for <see langword="false" />.</param>
      <typeparam name="TException">O tipo de exceção que invoca a verificação de condição.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>Determina se um teste especificado é verdadeiro para qualquer inteiro dentro do intervalo de inteiros.</summary>
      <param name="fromInclusive">O primeiro inteiro a passar para <paramref name="predicate" />.</param>
      <param name="toExclusive">Um a mais do que o último inteiro a passar para <paramref name="predicate" />.</param>
      <param name="predicate">A função a ser avaliada para qualquer valor do inteiro no intervalo especificado.</param>
      <returns>
        <see langword="true" /> se <paramref name="predicate" /> retornar <see langword="true" /> para qualquer inteiro a partir de <paramref name="fromInclusive" /> para <paramref name="toExclusive" /> - 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive" /> é menor que <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>Determina se um elemento em uma coleção de elementos existe dentro de uma função.</summary>
      <param name="collection">A coleção da qual os elementos do tipo <c>T</c> serão desenhados para serem passados para <paramref name="predicate" />.</param>
      <param name="predicate">A função a ser avaliada para um elemento na <paramref name="collection" />.</param>
      <typeparam name="T">O tipo que está contido em <paramref name="collection" />.</typeparam>
      <returns>
        <see langword="true" /> se e somente se <paramref name="predicate" /> retornar <see langword="true" /> para qualquer elemento do tipo <paramref name="T" /> em <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>Determina se uma determinada condição é válida para todos os números inteiros em um intervalo especificado.</summary>
      <param name="fromInclusive">O primeiro inteiro a passar para <paramref name="predicate" />.</param>
      <param name="toExclusive">Um a mais do que o último inteiro a passar para <paramref name="predicate" />.</param>
      <param name="predicate">A função para avaliar a existência de inteiros no intervalo especificado.</param>
      <returns>
        <see langword="true" /> se <paramref name="predicate" /> retornar <see langword="true" /> para todos os inteiros a partir de <paramref name="fromInclusive" /> para <paramref name="toExclusive" /> ‑ 1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive" /> é menor que <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>Determina se todos os elementos de uma coleção existem em uma função.</summary>
      <param name="collection">A coleção da qual os elementos do tipo <c>T</c> serão desenhados para serem passados para <paramref name="predicate" />.</param>
      <param name="predicate">A função a ser avaliada quanto à existência de todos os elementos em <paramref name="collection" />.</param>
      <typeparam name="T">O tipo que está contido em <paramref name="collection" />.</typeparam>
      <returns>
        <see langword="true" /> se e somente se <paramref name="predicate" /> retornar <see langword="true" /> para todos os elementos do tipo <paramref name="T" /> em <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary>Especifica um contrato invariável para o método ou a propriedade delimitadora.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary>Especifica um contrato invariável para a propriedade ou o método delimitador e exibe uma mensagem se a condição para o contrato falhar.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
      <param name="userMessage">A mensagem a ser exibida se a condição for <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary>Representa valores como eram no início de um método ou propriedade.</summary>
      <param name="value">O valor a ser representado (campo ou parâmetro).</param>
      <typeparam name="T">O tipo do valor.</typeparam>
      <returns>O valor do parâmetro ou campo no início de um método ou propriedade.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary>Especifica um contrato de pré-condição para o método ou a propriedade delimitadora.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary>Especifica um contrato de precondição para a propriedade ou o método delimitador e exibe uma mensagem se a condição para o contrato falhar.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
      <param name="userMessage">A mensagem a ser exibida se a condição for <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary>Especifica um contrato de precondição para a propriedade ou o método delimitador e lança uma exceção se a condição para o contrato falhar.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
      <typeparam name="TException">A exceção a ser lançada se a condição for <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary>Especifica um contrato de precondição para a propriedade ou o método delimitador e lança uma exceção com a mensagem fornecida se a condição para o contrato falhar.</summary>
      <param name="condition">A expressão condicional a ser testada.</param>
      <param name="userMessage">A mensagem a ser exibida se a condição for <see langword="false" />.</param>
      <typeparam name="TException">A exceção a ser lançada se a condição for <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary>Representa o valor retornado de um método ou uma propriedade.</summary>
      <typeparam name="T">Tipo de valor retornado do método ou da propriedade delimitadora.</typeparam>
      <returns>Valor retornado do método ou da propriedade delimitadora.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary>Representa o valor final (a saída) de um parâmetro <see langword="out" /> ao retornar de um método.</summary>
      <param name="value">O parâmetro <see langword="out" />.</param>
      <typeparam name="T">O tipo do parâmetro <see langword="out" />.</typeparam>
      <returns>O valor de saída do parâmetro <see langword="out" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary>Define as abreviações que podem ser usadas no lugar da sintaxe de contrato completa.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary>Permite a fatoração do código <see langword="if-then-throw" /> herdado em métodos separados para reutilização e fornece controle total sobre as exceções lançadas e os argumentos.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary>Especifica que um tipo separado contém os contratos de código para esse tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" />.</summary>
      <param name="typeContainingContracts">O tipo que contém os contratos de código desse tipo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary>Obtém o tipo que contém os contratos de código desse tipo.</summary>
      <returns>O tipo que contém os contratos de código desse tipo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary>Especifica que uma classe é um contrato para um tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" />, especificando o tipo para o qual a classe atual é um contrato.</summary>
      <param name="typeContractsAreFor">O tipo para o qual a classe atual é um contrato.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary>Obtém o tipo a que esse contrato de código se aplica.</summary>
      <returns>O tipo ao qual este contrato se aplica.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary>Fornece métodos e dados para o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>Fornece dados para o evento de <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> .</summary>
      <param name="failureKind">Um dos valores de enumeração que especificam o contrato que falhou.</param>
      <param name="message">A mensagem para o evento.</param>
      <param name="condition">A condição para o evento.</param>
      <param name="originalException">A exceção que causou o evento.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary>Obtém a condição da falha do contrato.</summary>
      <returns>A condição para a falha.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary>Obtém o tipo de contrato que falhou.</summary>
      <returns>Um dos valores de enumeração que especifica o tipo de contrato que falhou.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary>Indica se o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> foi manipulado.</summary>
      <returns>
        <see langword="true" />Se o evento foi tratado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary>Obtém a mensagem que descreve o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns>A mensagem que descreve o evento.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary>Obtém a exceção original que causou o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns>A exceção que causou o evento.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary>Define a propriedade <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> como <see langword="true" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary>Define a propriedade <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> como <see langword="true" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary>Indica se a política de escalonamento de contrato do código deve ser aplicada.</summary>
      <returns>
        <see langword="true" />para aplicar a política de escalonamento; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary>Especifica o tipo de contrato que falhou.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary>Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary>Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary>Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary>Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary>Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary>Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> com falha.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary>Marca um método como sendo o método invariável de uma classe.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary>Permite definir opções de ferramenta e contrato na granularidade de assembly, tipo ou método.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> usando a categoria, a configuração e o valor habilitar/desabilitar fornecidos.</summary>
      <param name="category">A categoria da opção a ser definida.</param>
      <param name="setting">A configuração da opção.</param>
      <param name="enabled">
        <see langword="true" /> para habilitar a opção; <see langword="false" /> para desabilitá-la.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> usando a categoria, a configuração e o valor fornecidos.</summary>
      <param name="category">A categoria da opção a ser definida.</param>
      <param name="setting">A configuração da opção.</param>
      <param name="value">O valor da configuração.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary>Obtém a categoria da opção.</summary>
      <returns>A categoria da opção.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary>Determina se uma opção está habilitada.</summary>
      <returns>
        <see langword="true" />se a opção estiver habilitada; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary>Obtém a configuração da opção.</summary>
      <returns>A configuração da opção.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary>Obtém o valor da opção.</summary>
      <returns>O valor da opção.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary>Especifica que um campo pode ser usado em contratos de método quando o campo tem menos visibilidade que o método.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" />.</summary>
      <param name="name">O nome da propriedade a se aplicar ao campo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary>Obtém o nome da propriedade a ser aplicada ao campo.</summary>
      <returns>O nome da propriedade a ser aplicada ao campo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary>Especifica que um assembly é um assembly de referência que contém os contratos.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary>Identifica um membro que não tem nenhum comportamento em tempo de execução.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary>Instrui ferramentas de análise a assumir que um assembly, tipo ou membro está correto sem executar verificação estática.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" />.</summary>
      <param name="value">
        <see langword="true" /> para exigir verificação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary>Obtém o valor que indica se é necessário verificar o contrato do destino.</summary>
      <returns>
        <see langword="true" /> se a verificação é necessária; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary>Indica que um tipo ou método é puro, ou seja, não faz qualquer alteração de estado visível.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.PureAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary>Fornece métodos que o regravador binário usa para lidar com falhas de contrato.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>Usado pelo reescritor binário para ativar o comportamento de falha padrão.</summary>
      <param name="failureKind">Um dos valores de enumeração que especifica o tipo de falha.</param>
      <param name="userMessage">Informações de usuário adicionais.</param>
      <param name="conditionText">A descrição da condição que causou a falha.</param>
      <param name="innerException">A exceção interna que causou a exceção atual.</param>
      <returns>Uma referência nula (<see langword="Nothing" /> no Visual Basic) se o evento foi manipulado e não deve disparar uma falha, caso contrário, retorna a mensagem da falha localizada.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="failureKind" /> não é um valor <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> válido.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary>Dispara o comportamento de falha padrão.</summary>
      <param name="kind">Um dos valores de enumeração que especifica o tipo de falha.</param>
      <param name="displayMessage">A mensagem a ser exibida.</param>
      <param name="userMessage">Informações de usuário adicionais.</param>
      <param name="conditionText">A descrição da condição que causou a falha.</param>
      <param name="innerException">A exceção interna que causou a exceção atual.</param>
    </member>
  </members>
</doc>
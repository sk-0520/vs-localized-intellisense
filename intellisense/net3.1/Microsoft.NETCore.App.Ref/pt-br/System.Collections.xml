<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.BitArray">
      <summary>Gerencia uma matriz compacta de valores em bits, que é representada com boolianos, em que <see langword="true" /> indica que o bit está em (1) e <see langword="false" /> indica que o bit está desativado (0).</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.BitArray" /> que contém valores de bit copiados da matriz de boolianos especificada.</summary>
      <param name="values">Uma matriz de boolianos a serem copiados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.BitArray" /> que contém valores de bit copiados da matriz de bytes especificada.</summary>
      <param name="bytes">Uma matriz de bytes que contém os valores a se copiar, em que cada byte representa oito bits consecutivos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O comprimento de <paramref name="bytes" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.BitArray" /> que contém valores de bit copiados do <see cref="T:System.Collections.BitArray" /> especificado.</summary>
      <param name="bits">O <see cref="T:System.Collections.BitArray" /> para cópia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.BitArray" /> que pode conter o número especificado de valores de bits, que são definidos inicialmente como <see langword="false" />.</summary>
      <param name="length">O número de valores de bit no novo <see cref="T:System.Collections.BitArray" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.BitArray" /> que pode conter o número especificado de valores de bits, que são definidos inicialmente com o valor especificado.</summary>
      <param name="length">O número de valores de bit no novo <see cref="T:System.Collections.BitArray" />.</param>
      <param name="defaultValue">O valor booliano a ser atribuído a cada bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.BitArray" /> que contém valores de bit copiados da matriz especificada de inteiros de 32 bits.</summary>
      <param name="values">Uma matriz de inteiros que contém os valores a serem copiados, em que cada inteiro representa 32 bits consecutivos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O tamanho de <paramref name="values" /> é maior que <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>Executa a operação AND bit a bit entre os elementos do objeto <see cref="T:System.Collections.BitArray" /> atual e os elementos correspondentes na matriz especificada. O objeto <see cref="T:System.Collections.BitArray" /> atual será modificado para armazenar o resultado da operação AND bit a bit.</summary>
      <param name="value">A matriz usada para executar a operação AND bit a bit.</param>
      <returns>Uma matriz que contém o resultado da operação AND bit a bit, que é uma referência ao objeto <see cref="T:System.Collections.BitArray" /> atual.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O <paramref name="value" /> e o <see cref="T:System.Collections.BitArray" /> atual não têm o mesmo número de elementos.</exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>Cria uma cópia superficial do <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>Uma cópia superficial do <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>Copia todo o <see cref="T:System.Collections.BitArray" /> em um <see cref="T:System.Array" /> unidimensional compatível, começando no índice especificado da matriz de destino.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.BitArray" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
-ou-
O número de elementos na origem <see cref="T:System.Collections.BitArray" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
      <exception cref="T:System.InvalidCastException">O tipo do <see cref="T:System.Collections.BitArray" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>Obtém o valor do bit em uma posição específica no <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index">O índice baseado em zero do valor a ser obtido.</param>
      <returns>O valor do bit na posição <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é maior ou igual ao número de elementos no <see cref="T:System.Collections.BitArray" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio do <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> para todo o <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.BitArray" /> é somente leitura.</summary>
      <returns>Essa propriedade é sempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.BitArray" /> é sincronizado (thread-safe).</summary>
      <returns>Essa propriedade é sempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>Obtém ou define o valor do bit em uma posição específica no <see cref="T:System.Collections.BitArray" />.</summary>
      <param name="index">O índice baseado em zero do valor a ser obtido ou definido.</param>
      <returns>O valor do bit na posição <paramref name="index" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é igual a ou maior que <see cref="P:System.Collections.BitArray.Count" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <param name="count" />
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>Obtém ou define o número de elementos no <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>O número de elementos em <see cref="T:System.Collections.BitArray" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A propriedade foi definida como um valor menor que zero.</exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>Inverte todos os valores de bit no <see cref="T:System.Collections.BitArray" /> atual, para que os elementos definidos como <see langword="true" /> sejam alterados para <see langword="false" /> e os elementos definidos como <see langword="false" /> sejam alterados para <see langword="true" />.</summary>
      <returns>A instância atual com valores de bit invertidos.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>Executa a operação OR bit a bit entre os elementos do objeto <see cref="T:System.Collections.BitArray" /> atual e os elementos correspondentes na matriz especificada. O objeto <see cref="T:System.Collections.BitArray" /> atual será modificado para armazenar o resultado da operação OR bit a bit.</summary>
      <param name="value">A matriz com a qual a operação OR bit a bit será executada.</param>
      <returns>Uma matriz que contém o resultado da operação OR bit a bit, que é uma referência ao objeto <see cref="T:System.Collections.BitArray" /> atual.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O <paramref name="value" /> e o <see cref="T:System.Collections.BitArray" /> atual não têm o mesmo número de elementos.</exception>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <param name="count" />
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>Obtém o bit em uma posição específica no <see cref="T:System.Collections.BitArray" /> para o valor especificado.</summary>
      <param name="index">O índice baseado em zero do bit a ser definido.</param>
      <param name="value">O valor booliano a ser atribuído a cada bit.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é maior ou igual ao número de elementos no <see cref="T:System.Collections.BitArray" />.</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>Define todos os bits no <see cref="T:System.Collections.BitArray" /> como o valor especificado.</summary>
      <param name="value">O valor booliano a ser atribuído a todos os bits.</param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.BitArray" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.BitArray" />.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>Executa a operação OR exclusiva bit a bit entre os elementos do objeto <see cref="T:System.Collections.BitArray" /> atual em relação aos elementos correspondentes na matriz especificada. O objeto <see cref="T:System.Collections.BitArray" /> atual será modificado para armazenar o resultado da operação OR exclusiva bit a bit.</summary>
      <param name="value">A matriz usada para executar a operação OR exclusiva bit a bit.</param>
      <returns>Uma matriz que contém o resultado da operação OR exclusiva bit a bit, que é uma referência ao objeto <see cref="T:System.Collections.BitArray" /> atual.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O <paramref name="value" /> e o <see cref="T:System.Collections.BitArray" /> atual não têm o mesmo número de elementos.</exception>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions">
      <summary>Fornece métodos de extensão para coleções genéricas.</summary>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <summary>Tenta obter o valor associado ao <paramref name="key" /> especificado no <paramref name="dictionary" />.</summary>
      <param name="dictionary">Um dicionário com chaves do tipo <typeparamref name="TKey" /> e valores do tipo <typeparamref name="TValue" />.</param>
      <param name="key">A chave do valor a ser obtido.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Uma instância de <typeparamref name="TValue" />. Quando o método é bem-sucedido, o objeto retornado é o valor associado ao <paramref name="key" /> especificado. Quando o método falha, ele retorna o valor <see langword="default" /> de <typeparamref name="TValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <summary>Tenta obter o valor associado à chave especificada no <paramref name="dictionary" />.</summary>
      <param name="dictionary">Um dicionário com chaves do tipo <typeparamref name="TKey" /> e valores do tipo <typeparamref name="TValue" />.</param>
      <param name="key">A chave do valor a ser obtido.</param>
      <param name="defaultValue">O valor padrão a ser retornado quando o <paramref name="dictionary" /> não consegue localizar um valor associado ao <paramref name="key" /> especificado.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Uma instância de <typeparamref name="TValue" />. Quando o método é bem-sucedido, o objeto retornado é o valor associado ao <paramref name="key" /> especificado. Quando o método falha, ele retorna o <paramref name="defaultValue" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <summary>Tenta remover o valor com o <paramref name="key" /> especificado do <paramref name="dictionary" />.</summary>
      <param name="dictionary">Um dicionário com chaves do tipo <typeparamref name="TKey" /> e valores do tipo <typeparamref name="TValue" />.</param>
      <param name="key">A chave do valor a ser removido.</param>
      <param name="value">Quando esse método retorna <see langword="true" />, o valor removido; quando esse método retorna <see langword="false" />, o valor <see langword="default" /> de <typeparamref name="TValue" />.</param>
      <typeparam name="TKey">O tipo das chaves no <paramref name="dictionary" />.</typeparam>
      <typeparam name="TValue">O tipo dos valores em <paramref name="dictionary" />.</typeparam>
      <returns>
        <see langword="true" /> quando um valor é encontrado no <paramref name="dictionary" /> com o <paramref name="key" /> especificado; <see langword="false" /> quando o <paramref name="dictionary" /> não pode localizar um valor associado ao <paramref name="key" /> especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>Tenta adicionar o <paramref name="key" /> e o <paramref name="value" /> especificados ao <paramref name="dictionary" />.</summary>
      <param name="dictionary">Um dicionário com chaves do tipo <typeparamref name="TKey" /> e valores do tipo <typeparamref name="TValue" />.</param>
      <param name="key">A chave do valor a ser adicionado.</param>
      <param name="value">O valor a ser adicionado.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>
        <see langword="true" /> quando o <paramref name="key" /> e o <paramref name="value" /> são adicionados com êxito ao <paramref name="dictionary" />; <see langword="false" /> quando o <paramref name="dictionary" /> já contém o <paramref name="key" /> especificado e nada é adicionado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>Fornece uma classe base para implementações da interface genérica <see cref="T:System.Collections.Generic.IComparer`1" />.</summary>
      <typeparam name="T">O tipo de objetos a serem comparados.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Comparer`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>Quando substituído em uma classe derivada, executa uma comparação de dois objetos do mesmo tipo e retorna um valor que indica se um objeto é menor que, igual a ou maior que o outro.</summary>
      <param name="x">O primeiro objeto a ser comparado.</param>
      <param name="y">O segundo objeto a ser comparado.</param>
      <returns>Um inteiro assinado que indica os valores relativos de <paramref name="x" /> e <paramref name="y" />, conforme mostrado na tabela a seguir.
  Valor 
  Significado 
  Menor que zero 
 <paramref name="x" /> é menor que <paramref name="y" />.  
  
  Zero 
 <paramref name="x" /> é igual a <paramref name="y" />.  
  
  Maior que zero 
 <paramref name="x" /> é maior que <paramref name="y" />.</returns>
      <exception cref="T:System.ArgumentException">O tipo de <paramref name="T" /> não implementa a interface genérica <see cref="T:System.IComparable`1" /> ou a interface <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary>Cria um comparador usando a comparação especificada.</summary>
      <param name="comparison">A comparação a se usar.</param>
      <returns>O novo comparador.</returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>Retorna um comparador de ordem de classificação padrão para o tipo especificado pelo argumento genérico.</summary>
      <returns>Um objeto que herda <see cref="T:System.Collections.Generic.Comparer`1" /> e serve como um comparador de ordem de classificação para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>Compara dois objetos e retorna um valor que indica se um é menor, igual ou maior do que o outro.</summary>
      <param name="x">O primeiro objeto a ser comparado.</param>
      <param name="y">O segundo objeto a ser comparado.</param>
      <returns>Um inteiro assinado que indica os valores relativos de <paramref name="x" /> e <paramref name="y" />, conforme mostrado na tabela a seguir.
  Valor 
  Significado 
  Menor que zero 
 <paramref name="x" /> é menor que <paramref name="y" />.  
  
  Zero 
 <paramref name="x" /> é igual a <paramref name="y" />.  
  
  Maior que zero 
 <paramref name="x" /> é maior que <paramref name="y" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> ou <paramref name="y" /> é de um tipo que não pode ser convertido para o tipo <paramref name="T" />.
- ou -
<paramref name="x" /> e <paramref name="y" /> não implementam a interface genérica do <see cref="T:System.IComparable`1" /> nem a interface do <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>{1&amp;gt;Representa uma coleção de chaves e valores.&amp;lt;1}</summary>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vazia, tem a capacidade inicial padrão e usa o comparador de igualdade padrão para o tipo de chave.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2" /> que contém os elementos copiados do <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado e usa o comparador de igualdade padrão para o tipo de chave.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.IDictionary`2" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2" /> que contém elementos copiados da <see cref="T:System.Collections.Generic.IDictionary`2" /> especificada e usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.IDictionary`2" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada na comparação de chaves ou <see langword="null" /> para usar o padrão <see cref="T:System.Collections.Generic.EqualityComparer`1" /> para o tipo de chave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="collection" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <param name="collection" />
      <param name="comparer" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vazia, tem a capacidade inicial padrão e usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada na comparação de chaves ou <see langword="null" /> para usar o padrão <see cref="T:System.Collections.Generic.EqualityComparer`1" /> para o tipo de chave.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vazia, tem a capacidade inicial especificada e usa o comparador de igualdade padrão para o tipo de chave.</summary>
      <param name="capacity">O número inicial de elementos que o <see cref="T:System.Collections.Generic.Dictionary`2" /> pode conter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2" /> que está vazia, tem a capacidade inicial especificada e usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="capacity">O número inicial de elementos que o <see cref="T:System.Collections.Generic.Dictionary`2" /> pode conter.</param>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada na comparação de chaves ou <see langword="null" /> para usar o padrão <see cref="T:System.Collections.Generic.EqualityComparer`1" /> para o tipo de chave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2" /> com os dados serializados.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar o <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context">Uma estrutura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado ao <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>Adiciona a chave e o valor especificados ao dicionário.</summary>
      <param name="key">A chave do elemento a ser adicionado.</param>
      <param name="value">O valor do elemento a ser adicionado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um elemento com a mesma chave no <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>Remove todas as chaves e valores do <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>Obtém o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que é usado para determinar a igualdade de chaves para o dicionário.</summary>
      <returns>A implementação de interface genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que é usada para determinar a igualdade de chaves para o <see cref="T:System.Collections.Generic.Dictionary`2" /> atual e fornecer valores de hash para as chaves.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>Determina se o <see cref="T:System.Collections.Generic.Dictionary`2" /> atual contém a chave especificada.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.Dictionary`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>Determinará se o <see cref="T:System.Collections.Generic.Dictionary`2" /> contiver um valor específico.</summary>
      <param name="value">O valor a ser localizado no <see cref="T:System.Collections.Generic.Dictionary`2" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.Dictionary`2" /> contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>Obtém o número de pares chave-valor contidos no <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>O número de pares chave-valor contidos no <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary>Verifica se o dicionário pode armazenar até um número especificado de entradas sem nenhuma expansão adicional de sua capacidade de armazenamento com backup.</summary>
      <param name="capacity">O número de entradas.</param>
      <returns>A capacidade atual do <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que 0.</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.Dictionary`2" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no dicionário na posição atual do enumerador, como um <see cref="T:System.Collections.DictionaryEntry" />.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Obtém a chave do elemento na posição atual do enumerador.</summary>
      <returns>A chave do elemento no dicionário na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Obtém o valor do elemento na posição atual do enumerador.</summary>
      <returns>O valor do elemento no dicionário na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador, como um <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>Retorna um enumerador que itera pelo <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>A estrutura <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> do <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e retorna os dados necessários para serializar a instância <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar a instância <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="context">Uma estrutura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado à instância <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>Obtém ou define o valor associado à chave especificada.</summary>
      <param name="key">A chave do valor a ser obtido ou definido.</param>
      <returns>O valor associado à chave especificada. Se a chave especificada não for encontrada, uma operação get lançará um <see cref="T:System.Collections.Generic.KeyNotFoundException" /> e uma operação set criará um novo elemento com a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">A propriedade é recuperada e <paramref name="key" /> não existe na coleção.</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>Representa a coleção de chaves em um <see cref="T:System.Collections.Generic.Dictionary`2" />. Esta classe não pode ser herdada.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> que reflete as chaves no <see cref="T:System.Collections.Generic.Dictionary`2" /> especificado.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.Dictionary`2" /> cujas chaves são refletidas no novo <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> em um <see cref="T:System.Array" /> unidimensional existente, começando no índice da matriz especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.
A recuperação do valor dessa propriedade é uma operação O(1).</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>Retorna um enumerador que itera pelo <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> para o <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Adiciona um item ao <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementação sempre gera <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a ser adicionado ao <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Remove todos os itens do <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementação sempre gera <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determinará se o <see cref="T:System.Collections.Generic.ICollection`1" /> contiver um valor específico.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, essa propriedade sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementação sempre gera <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a remover do <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o item não tiver sido encontrado no <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
- ou -
O <paramref name="array" /> não tem indexação baseada em zero.
- ou -
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
- ou -
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>Obtém uma coleção que contém as chaves do <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> que contém as chaves no <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e gera o evento de desserialização quando a desserialização for concluída.</summary>
      <param name="sender">A fonte do evento de desserialização.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associado à instância <see cref="T:System.Collections.Generic.Dictionary`2" /> atual é inválido.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>Remove o valor com a chave especificada do <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for encontrado e removido com êxito; caso contrário, <see langword="false" />.  Esse método retorna <see langword="false" /> se <paramref name="key" /> não foi encontrado no <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adiciona o valor especificado ao <see cref="T:System.Collections.Generic.ICollection`1" /> com a chave especificada.</summary>
      <param name="keyValuePair">A estrutura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que representa a chave e o valor a serem adicionados ao <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">A chave do <paramref name="keyValuePair" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um elemento com a mesma chave no <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se o <see cref="T:System.Collections.Generic.ICollection`1" /> contém uma chave e valor específicos.</summary>
      <param name="keyValuePair">A estrutura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> para localizar no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="keyValuePair" /> for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.Generic.ICollection`1" /> para uma matriz do tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, começando no índice da matriz especificada.</summary>
      <param name="array">A matriz unidimensional do tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que é o destino dos elementos <see cref="T:System.Collections.Generic.KeyValuePair`2" /> copiados da <see cref="T:System.Collections.Generic.ICollection`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.ICollection`1" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtém um valor que indica se o dicionário é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />. Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Remove uma chave e o valor do dicionário.</summary>
      <param name="keyValuePair">A estrutura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que representa a chave e o valor a serem removidos de <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <returns>
        <see langword="true" /> se a chave e o valor representados por <paramref name="keyValuePair" /> forem encontrados e removidos com êxito; caso contrário, <see langword="false" />. Esse método retorna <see langword="false" /> se <paramref name="keyValuePair" /> não foi encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> do tipo <paramref name="TKey" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> do tipo <paramref name="TValue" /> que contém os valores na <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Retorna um enumerador que itera por meio da coleção .</summary>
      <returns>Um enumerador que pode ser usado para iteração na coleção.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Obtém uma coleção que contém as chaves do <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns>Uma coleção que contém as chaves do <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Obtém uma coleção que contém os valores do <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</summary>
      <returns>Uma coleção que contém os valores da <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.Generic.ICollection`1" /> para uma matriz, começando no índice da matriz especificada.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.ICollection`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
- ou -
O <paramref name="array" /> não tem indexação baseada em zero.
- ou -
O número de elementos na origem <see cref="T:System.Collections.Generic.ICollection`1" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
- ou -
O tipo do <see cref="T:System.Collections.Generic.ICollection`1" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona a chave e o valor especificados ao dicionário.</summary>
      <param name="key">O objeto a ser usado como a chave.</param>
      <param name="value">O objeto a ser usado como o valor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.Generic.Dictionary`2" />.
- ou -
O <paramref name="value" /> é de um tipo que não é atribuível ao <paramref name="TValue" />, o tipo de valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.
- ou -
Já existe um valor com a mesma chave no <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o <see cref="T:System.Collections.IDictionary" /> contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> tiver um valor fixo; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o valor com a chave especificada.</summary>
      <param name="key">A chave do valor a ser obtido.</param>
      <returns>O valor associado à chave especificada ou <see langword="null" /> se <paramref name="key" /> não estiver no dicionário ou se <paramref name="key" /> for de um tipo que não é atribuível ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Um valor está sendo atribuído e <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.Generic.Dictionary`2" />.
- ou -
Um valor está sendo atribuído e <paramref name="value" /> é de um tipo que não é atribuível ao tipo de valor <paramref name="TValue" /> do <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém os valores no <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém os valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera por meio da coleção .</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary>Define a capacidade desse dicionário como o que ele seria se tivesse sido inicializado originalmente com todas as suas entradas.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary>Define a capacidade desse dicionário de armazenar até um número especificado de entradas sem nenhuma expansão adicional de sua capacidade de armazenamento com backup.</summary>
      <param name="capacity">A nova capacidade.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary>Tenta adicionar a chave e o valor especificados ao dicionário.</summary>
      <param name="key">A chave do elemento a ser adicionado.</param>
      <param name="value">O valor do elemento a ser adicionado. Pode ser <see langword="null" />.</param>
      <returns>
        <see langword="true" /> se o par chave/valor foi adicionado ao dicionário com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtém o valor associado à chave especificada.</summary>
      <param name="key">A chave do valor a ser obtido.</param>
      <param name="value">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, o valor padrão para o tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.Dictionary`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>Representa a coleção de valores em um <see cref="T:System.Collections.Generic.Dictionary`2" />. Esta classe não pode ser herdada.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> que reflete os valores no <see cref="T:System.Collections.Generic.Dictionary`2" /> especificado.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.Dictionary`2" /> cujos valores são refletidos no novo <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copia os elementos <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> em um <see cref="T:System.Array" /> unidimensional existente, começando no índice da matriz especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>Retorna um enumerador que itera pelo <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> para o <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Adiciona um item ao <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementação sempre gera <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a ser adicionado ao <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Remove todos os itens do <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementação sempre gera <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determinará se o <see cref="T:System.Collections.Generic.ICollection`1" /> contiver um valor específico.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, essa propriedade sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.Generic.ICollection`1" />. Esta implementação sempre gera <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a remover do <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="item" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
- ou -
O <paramref name="array" /> não tem indexação baseada em zero.
- ou -
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
- ou -
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>Obtém uma coleção que contém os valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> que contém os valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>Fornece uma classe base para implementações da interface genérica <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <typeparam name="T">O tipo de objetos a serem comparados.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.EqualityComparer`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>Retorna um comparador de igualdade padrão para o tipo especificado pelo argumento genérico.</summary>
      <returns>A instância padrão da classe <see cref="T:System.Collections.Generic.EqualityComparer`1" /> para o tipo <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>Quando substituído em uma classe derivada, determina se dois objetos do tipo <typeparamref name="T" /> são iguais.</summary>
      <param name="x">O primeiro objeto a ser comparado.</param>
      <param name="y">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se os objetos especificados forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>Quando substituído em uma classe derivada, serve como uma função de hash para o objeto especificado para algoritmos de hash e estruturas de dados, como uma tabela de hash.</summary>
      <param name="obj">O objeto para o qual obter um código hash.</param>
      <returns>Um código hash para o objeto especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O tipo de <paramref name="obj" /> é um tipo de referência e <paramref name="obj" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>Determina se os objetos especificados são iguais.</summary>
      <param name="x">O primeiro objeto a ser comparado.</param>
      <param name="y">O segundo objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se os objetos especificados forem iguais; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> ou <paramref name="y" /> é de um tipo que não pode ser convertido para o tipo <typeparamref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>Retorna um código hash para o objeto especificado.</summary>
      <param name="obj">O <see cref="T:System.Object" /> para o qual um código hash deve ser retornado.</param>
      <returns>Um código hash para o objeto especificado.</returns>
      <exception cref="T:System.ArgumentNullException">O tipo de <paramref name="obj" /> é um tipo de referência e <paramref name="obj" /> é <see langword="null" />.
- ou -
<paramref name="obj" /> é de um tipo que não pode ser convertido no tipo <typeparamref name="T" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Representa um conjunto de valores.</summary>
      <typeparam name="T">O tipo dos elementos no conjunto de hash.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.HashSet`1" /> que está vazia e usa o comparador de igualdade padrão para o tipo de conjunto.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.HashSet`1" /> que usa o comparador de igualdade padrão para o tipo de conjunto, contém os elementos copiados da coleção especificada e tem capacidade suficiente para acomodar o número de elementos copiados.</summary>
      <param name="collection">A coleção cujos elementos são copiados para o novo conjunto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.HashSet`1" /> que usa o comparador de igualdado especificado para o tipo de conjunto, que contém os elementos copiados da coleção especificada e que tem capacidade suficiente para acomodar o número de elementos copiados.</summary>
      <param name="collection">A coleção cujos elementos são copiados para o novo conjunto.</param>
      <param name="comparer">A implementação do <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada ao comparar valores no conjunto ou <see langword="null" /> para usar implementação padrão do <see cref="T:System.Collections.Generic.EqualityComparer`1" /> para o tipo de conjunto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.HashSet`1" /> que está vazia e usa a comparação de igualdade especificada para o tipo de conjunto.</summary>
      <param name="comparer">A implementação do <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada ao comparar valores no conjunto ou <see langword="null" /> para usar implementação padrão do <see cref="T:System.Collections.Generic.EqualityComparer`1" /> para o tipo de conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.HashSet`1" /> que está vazia, mas tem espaço reservado para <paramref name="capacity" /> itens e usa o comparador de igualdade padrão para o tipo de conjunto.</summary>
      <param name="capacity">O tamanho inicial de <see cref="T:System.Collections.Generic.HashSet`1" /></param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.HashSet`1" /> que usa o comparador de igualdade especificado para o tipo de conjunto e tem capacidade suficiente para acomodar elementos <paramref name="capacity" />.</summary>
      <param name="capacity">O tamanho inicial de <see cref="T:System.Collections.Generic.HashSet`1" /></param>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada ao comparar valores no conjunto ou nulo (Nothing no Visual Basic) para usar a implementação padrão <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> no tipo de conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.HashSet`1" /> com dados serializados.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar o objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context">Uma estrutura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado ao objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Adiciona o elemento especificado a um conjunto.</summary>
      <param name="item">O elemento a ser adicionado ao conjunto.</param>
      <returns>
        <see langword="true" /> se o elemento for adicionado ao objeto <see cref="T:System.Collections.Generic.HashSet`1" />, <see langword="false" /> se o elemento já estiver presente.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Remove todos os elementos de um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Obtém o objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que é usado para determinar igualdade para os valores no conjunto.</summary>
      <returns>O objeto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que é usado para determinar igualdade para os valores no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> contém o elemento especificado.</summary>
      <param name="item">O elemento a ser localizado no objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> contiver o elemento especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Copia os elementos de um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> para uma matriz.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do objeto <see cref="T:System.Collections.Generic.HashSet`1" />. A matriz deve ter indexação com base em zero.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos de um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> para uma matriz, começando no índice da matriz especificada.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do objeto <see cref="T:System.Collections.Generic.HashSet`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> é maior que o tamanho da <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copia o número especificado de elementos de um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> para uma matriz, começando no índice especificado da matriz.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do objeto <see cref="T:System.Collections.Generic.HashSet`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <param name="count">O número de elementos a serem copiados para <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que 0.
- ou -
<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> é maior que o tamanho da <paramref name="array" /> de destino.
- ou -
<paramref name="count" /> é maior que o espaço disponível do <paramref name="index" /> até o final da <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Obtém o número de elementos contidos em um conjunto.</summary>
      <returns>O número de elementos contidos no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>Retorna um objeto <see cref="T:System.Collections.IEqualityComparer" /> que pode ser usado para teste de igualdade de um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IEqualityComparer" /> que pode ser usado para teste de igualdade profunda de um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary>Garante que esse conjunto de hash pode conter o número de elementos especificado sem crescer.</summary>
      <param name="capacity">A capacidade mínima para garantia.</param>
      <returns>A nova capacidade desta instância.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que zero.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Enumera os elementos de um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na <see cref="T:System.Collections.Generic.HashSet`1" /> coleção na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Libera todos os recursos usados por um objeto <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento da coleção <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador, como um <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove todos os elementos na coleção especificada do objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</summary>
      <param name="other">A coleção de itens a serem removidos do objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio de um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Um objeto <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> para o objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e retorna os dados necessários para serializar um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar o objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <param name="context">Uma estrutura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado ao objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual para que ele contenha somente elementos presentes no objeto e na coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> é um subconjunto apropriado da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> for um subconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> é um superconjunto apropriado da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> for um superconjunto apropriado de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> é um subconjunto da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> é um superconjunto da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e gera o evento de desserialização quando a desserialização for concluída.</summary>
      <param name="sender">A fonte do evento de desserialização.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associado ao objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual é inválido.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual e uma coleção especificada compartilham elementos comuns.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Remove o elemento especificado de um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="item">O elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for encontrado e removido com êxito; caso contrário, <see langword="false" />.  Esse método retornará <see langword="false" /> se <paramref name="item" /> não for encontrado no objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Remove todos os elementos que correspondem às condições definidas pelo predicado especificado de uma coleção de <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições dos elementos a serem removidos.</param>
      <returns>O número de elementos que foram removidos da coleção de <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> e coleção especificada contêm os mesmos elementos.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> for igual a <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual para que ele contenha somente elementos que estão presentes no objeto ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona um item a um objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">O objeto a ser adicionado ao objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">O <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se uma coleção é somente leitura.</summary>
      <returns>
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Define a capacidade de um objeto <see cref="T:System.Collections.Generic.HashSet`1" /> para o número real de elementos que ele contém, arredondado para cima para um valor próximo específico da implementação.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary>Pesquisa um determinado valor no conjunto e retorna o valor igual que for encontrado, se houver.</summary>
      <param name="equalValue">O valor a ser procurado.</param>
      <param name="actualValue">O valor do conjunto encontrado pela pesquisa ou o valor padrão de T quando a pesquisa não gera correspondência.</param>
      <returns>Um valor que indica se a pesquisa foi bem-sucedida.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual para que ele contenha todos os elementos presentes nele, na coleção especificada ou em ambos.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.HashSet`1" /> atual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>Representa uma lista duplamente vinculada.</summary>
      <typeparam name="T">Especifica o tipo de elemento da lista vinculada.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.LinkedList`1" /> que está vazia.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.LinkedList`1" />, que contém os elementos copiados do <see cref="T:System.Collections.IEnumerable" /> especificado e tem capacidade suficiente para acomodar o número de elementos copiados.</summary>
      <param name="collection">O <see cref="T:System.Collections.IEnumerable" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.LinkedList`1" /> que pode ser serializada com o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> e o <see cref="T:System.Runtime.Serialization.StreamingContext" /> especificados.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar o <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado a <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Adiciona um novo nó que contém o valor especificado após o nó existente especificado no <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">O <see cref="T:System.Collections.Generic.LinkedListNode`1" /> após o qual deve ser inserido um novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contendo <paramref name="value" />.</param>
      <param name="value">O valor a ser adicionado ao <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns>O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contém <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> não está no <see cref="T:System.Collections.Generic.LinkedList`1" /> atual.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adiciona o novo nó especificado após o nó especificado existente no <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">O <see cref="T:System.Collections.Generic.LinkedListNode`1" /> após o qual <paramref name="newNode" /> será inserido.</param>
      <param name="newNode">O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> a ser adicionado ao <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> é <see langword="null" />.
- ou -
<paramref name="newNode" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> não está no <see cref="T:System.Collections.Generic.LinkedList`1" /> atual.
- ou -
<paramref name="newNode" /> pertence a outro <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Adiciona um novo nó que contém o valor especificado antes do nó existente especificado no <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">O <see cref="T:System.Collections.Generic.LinkedListNode`1" /> antes do qual deve ser inserido um novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> contendo <paramref name="value" />.</param>
      <param name="value">O valor a ser adicionado ao <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns>O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contém <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> não está no <see cref="T:System.Collections.Generic.LinkedList`1" /> atual.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adiciona o novo nó especificado antes do nó existente especificado no <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">O <see cref="T:System.Collections.Generic.LinkedListNode`1" /> antes do qual <paramref name="newNode" /> será inserido.</param>
      <param name="newNode">O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> a ser adicionado ao <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> é <see langword="null" />.
- ou -
<paramref name="newNode" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> não está no <see cref="T:System.Collections.Generic.LinkedList`1" /> atual.
- ou -
<paramref name="newNode" /> pertence a outro <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>Adiciona um novo nó que contém o valor especificado no início da <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value">O valor a ser adicionado no início da <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns>O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contém <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adiciona o novo nó especificado ao início do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> a ser adicionado ao início do <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> pertence a outro <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>Adiciona um novo nó que contém o valor especificado no final do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value">O valor a ser adicionado ao final do <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns>O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contém <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Adiciona o novo nó especificado no final de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">O novo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> a adicionar no final de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> pertence a outro <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>Remove todos os nós de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>Determina se um valor está no <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value">O valor a ser localizado na <see cref="T:System.Collections.Generic.LinkedList`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> for encontrado no <see cref="T:System.Collections.Generic.LinkedList`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>Copia todo o <see cref="T:System.Collections.Generic.LinkedList`1" /> em um <see cref="T:System.Array" /> unidimensional compatível, começando no índice especificado da matriz de destino.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.LinkedList`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.LinkedList`1" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>Obtém o número de nós que realmente estão contidos na <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>O número de nós que realmente estão contidos na <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.LinkedList`1" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção. Essa classe não pode ser herdada.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e gera o evento de desserialização quando a desserialização for concluída.</summary>
      <param name="sender">A fonte do evento de desserialização.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associado à instância <see cref="T:System.Collections.Generic.LinkedList`1" /> atual é inválido.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e retorna os dados necessários para serializar a instância <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar a instância <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado à instância <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>Encontra o primeiro nó que contém o valor especificado.</summary>
      <param name="value">O valor a ser localizado na <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns>O primeiro <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contém o valor especificado, se for encontrado; caso contrário, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>Localiza o último nó que contém o valor especificado.</summary>
      <param name="value">O valor a ser localizado na <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns>O último <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contém o valor especificado, caso seja encontrado, caso contrário, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>Obtém o primeiro nó do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>O primeiro <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> para o <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e retorna os dados necessários para serializar a instância <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar a instância <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado à instância <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>Obtém o último nó da <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>O último <see cref="T:System.Collections.Generic.LinkedListNode`1" /> da <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e gera o evento de desserialização quando a desserialização for concluída.</summary>
      <param name="sender">A fonte do evento de desserialização.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associado à instância <see cref="T:System.Collections.Generic.LinkedList`1" /> atual é inválido.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>Remove a primeira ocorrência do valor especificado do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="value">O valor a ser removido de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <returns>
        <see langword="true" /> se o elemento contendo <paramref name="value" /> for removido com êxito; caso contrário, <see langword="false" />.  Esse método também retornará <see langword="false" /> se <paramref name="value" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.LinkedList`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Remove o nó especificado do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">O <see cref="T:System.Collections.Generic.LinkedListNode`1" /> a ser removido de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> não está no <see cref="T:System.Collections.Generic.LinkedList`1" /> atual.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>Remove o nó no início do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.LinkedList`1" /> está vazio.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>Remove o nó no final do <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.LinkedList`1" /> está vazio.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona um item ao final de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="value">O valor a ser adicionado ao final do <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.LinkedList`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
- ou -
O <paramref name="array" /> não tem indexação baseada em zero.
- ou -
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
- ou -
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.LinkedList`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.LinkedList`1" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera através da lista vinculada como uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar através da lista vinculada como uma coleção.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>Representa um nó em um <see cref="T:System.Collections.Generic.LinkedList`1" />. Essa classe não pode ser herdada.</summary>
      <typeparam name="T">Especifica o tipo de elemento da lista vinculada.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.LinkedListNode`1" />, que contém o valor especificado.</summary>
      <param name="value">O valor a ser contido no <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>Obtém o <see cref="T:System.Collections.Generic.LinkedList`1" /> ao qual o <see cref="T:System.Collections.Generic.LinkedListNode`1" /> pertence.</summary>
      <returns>Uma referência ao <see cref="T:System.Collections.Generic.LinkedList`1" /> ao qual o <see cref="T:System.Collections.Generic.LinkedListNode`1" /> pertence ou <see langword="null" /> se o <see cref="T:System.Collections.Generic.LinkedListNode`1" /> não estiver vinculado.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>Obtém o próximo nó em <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Uma referência para o próximo nó no <see cref="T:System.Collections.Generic.LinkedList`1" /> ou <see langword="null" /> se o nó atual é o último elemento (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) da <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>Obtém o nó anterior no <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Uma referência ao nó anterior no <see cref="T:System.Collections.Generic.LinkedList`1" /> ou <see langword="null" />, se o nó atual for o primeiro elemento (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) da <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>Obtém o valor contido no nó.</summary>
      <returns>O valor contido no nó.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>Representa uma lista fortemente tipada de objetos que podem ser acessados por índice. Fornece métodos para pesquisar, classificar e manipular listas.</summary>
      <typeparam name="T">O tipo de elementos na lista.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.List`1" /> que está vazia e tem a capacidade inicial padrão.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.List`1" />, que contém os elementos copiados da coleção especificada e tem capacidade suficiente para acomodar o número de elementos copiados.</summary>
      <param name="collection">A coleção cujos elementos são copiados para a nova lista.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.List`1" /> que está vazia e tem a capacidade inicial especificada.</summary>
      <param name="capacity">O número de elementos que a nova lista pode armazenar inicialmente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>Adiciona um objeto ao final do <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">O objeto a ser adicionado ao final do <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adiciona os elementos da coleção especificada ao final do <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="collection">A coleção cujos elementos devem ser adicionados ao final do <see cref="T:System.Collections.Generic.List`1" />. A coleção em si não pode ser <see langword="null" />, mas pode conter elementos que são <see langword="null" />, se o tipo <paramref name="T" /> é um tipo de referência.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>Retorna um wrapper <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> somente leitura para a coleção atual.</summary>
      <returns>Um objeto que atua como um wrapper somente leitura em torno do <see cref="T:System.Collections.Generic.List`1" /> atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>Pesquisa todo o <see cref="T:System.Collections.Generic.List`1" /> classificado para um elemento usando o comparador padrão e retorna o índice baseado em zero do elemento.</summary>
      <param name="item">O objeto a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>O índice baseado em zero da <paramref name="item" /> no <see cref="T:System.Collections.Generic.List`1" /> classificado, se <paramref name="item" /> for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="item" />, ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">O comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não consegue encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou a interface <see cref="T:System.IComparable" /> para o tipo <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Pesquisa um elemento em todo o <see cref="T:System.Collections.Generic.List`1" /> classificado usando o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="item">O objeto a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="comparer">A implementação de <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada durante a comparação de elementos.
- ou -
<see langword="null" /> para usar o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <returns>O índice baseado em zero da <paramref name="item" /> no <see cref="T:System.Collections.Generic.List`1" /> classificado, se <paramref name="item" /> for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="item" />, ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é <see langword="null" /> e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não consegue encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou a interface <see cref="T:System.IComparable" /> para o tipo <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Pesquisa um intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> classificado para encontrar um elemento que usa o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="index">O índice baseado em zero inicial do intervalo a ser pesquisado.</param>
      <param name="count">O tamanho do intervalo a ser procurado.</param>
      <param name="item">O objeto a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <returns>O índice baseado em zero da <paramref name="item" /> no <see cref="T:System.Collections.Generic.List`1" /> classificado, se <paramref name="item" /> for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="item" />, ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.List`1.Count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="count" /> não denotam um intervalo válido em <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é <see langword="null" /> e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não consegue encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou a interface <see cref="T:System.IComparable" /> para o tipo <paramref name="T" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>Obtém ou define o número total de elementos que a estrutura de dados interna pode manter sem redimensionamento.</summary>
      <returns>O número de elementos que <see cref="T:System.Collections.Generic.List`1" /> pode conter antes que o redimensionamento seja necessário.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> é definido como um valor menor que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente disponível no sistema.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>Remove todos os elementos do <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>Determina se um elemento está no <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Generic.List`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary>Converte os elementos no <see cref="T:System.Collections.Generic.List`1" /> atual para outro tipo e retorna uma lista contendo os elementos convertidos.</summary>
      <param name="converter">Um delegado <see cref="T:System.Converter`2" /> que converte cada elemento de um tipo em outro tipo.</param>
      <typeparam name="TOutput">O tipo dos elementos da matriz de destino.</typeparam>
      <returns>Um <see cref="T:System.Collections.Generic.List`1" /> do tipo de destino que contém os elementos convertidos do <see cref="T:System.Collections.Generic.List`1" /> atual.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="converter" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>Copia todo o <see cref="T:System.Collections.Generic.List`1" /> em uma matriz unidimensional compatível, a partir do início da matriz de destino.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.List`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos no <see cref="T:System.Collections.Generic.List`1" /> de origem é maior que o número de elementos que o <paramref name="array" /> de destino pode conter.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>Copia todo o <see cref="T:System.Collections.Generic.List`1" /> para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.List`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.List`1" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia um intervalo de elementos do <see cref="T:System.Collections.Generic.List`1" /> para uma matriz unidimensional compatível, começando pelo índice especificado da matriz de destino.</summary>
      <param name="index">O índice baseado em zero no <see cref="T:System.Collections.Generic.List`1" /> de origem em que a cópia começa.</param>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.List`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <param name="count">O número de elementos a serem copiados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="arrayIndex" /> é menor que 0.
- ou -
<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> é igual a ou maior que o <see cref="P:System.Collections.Generic.List`1.Count" /> do <see cref="T:System.Collections.Generic.List`1" /> de origem.
- ou -
O número de elementos de <paramref name="index" /> até o final do <see cref="T:System.Collections.Generic.List`1" /> de origem é maior que o espaço disponível do <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.List`1" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.List`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.List`1" /> na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary>Determina se o <see cref="T:System.Collections.Generic.List`1" /> contém elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições dos elementos a serem pesquisados.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.List`1" /> contiver um ou mais elementos que correspondem às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O primeiro elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary>Recupera todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições dos elementos a serem pesquisados.</param>
      <returns>Um <see cref="T:System.Collections.Generic.List`1" /> que contém todos os elementos que correspondem às condições definidas pelo predicado especificado, se encontrados; caso contrário, um <see cref="T:System.Collections.Generic.List`1" /> vazio.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que começa no índice especificado e que contém o número de elementos especificados.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.
- ou -
<paramref name="count" /> é menor que 0.
- ou -
<paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida no <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que se estende do índice especificado ao último elemento.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência em toda a <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O último elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Pesquisa por um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.
- ou -
<paramref name="count" /> é menor que 0.
- ou -
<paramref name="startIndex" /> e <paramref name="count" /> não especificam uma seção válida no <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência em toda a <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>Executa a ação especificada em cada elemento do <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="action">O delegado <see cref="T:System.Action`1" /> a ser executado em cada elemento do <see cref="T:System.Collections.Generic.List`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Um elemento na coleção foi modificado.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>Retorna um enumerador que itera pelo <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.List`1.Enumerator" /> para o <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>Cria uma cópia superficial de um intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> de origem.</summary>
      <param name="index">O índice <see cref="T:System.Collections.Generic.List`1" /> baseado em zero no qual é iniciado o intervalo.</param>
      <param name="count">O número de elementos no intervalo.</param>
      <returns>Uma cópia superficial de um intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> de origem.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="count" /> não denotam um intervalo válido de elementos no <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro de todo o <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>O índice baseado em zero da primeira ocorrência de <paramref name="item" /> em todo o <see cref="T:System.Collections.Generic.List`1" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos em <see cref="T:System.Collections.Generic.List`1" /> que se estende do índice especificado para o último elemento.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <returns>O índice baseado em zero da primeira ocorrência de <paramref name="item" /> dentro do intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que se estende do <paramref name="index" /> ao último elemento, se for encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <returns>O índice baseado em zero da primeira ocorrência de <paramref name="item" /> dentro do intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que começa em <paramref name="index" /> e contém o número de elementos <paramref name="count" />, se encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.
- ou -
<paramref name="count" /> é menor que 0.
- ou -
<paramref name="index" /> e <paramref name="count" /> não especificam uma seção válida no <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>Insere um elemento no <see cref="T:System.Collections.Generic.List`1" />, no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item">O objeto a ser inserido. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="index" /> é maior que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insere os elementos de uma coleção no <see cref="T:System.Collections.Generic.List`1" /> no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que os novos elementos devem ser inseridos.</param>
      <param name="collection">A coleção cujos elementos devem ser inseridos no <see cref="T:System.Collections.Generic.List`1" />. A coleção em si não pode ser <see langword="null" />, mas pode conter elementos que são <see langword="null" />, se o tipo <paramref name="T" /> é um tipo de referência.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="index" /> é maior que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>Obtém ou define o elemento no índice especificado.</summary>
      <param name="index">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns>O elemento no índice especificado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="index" /> é igual a ou maior que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de todo o <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>O índice de base zero da última ocorrência de <paramref name="item" /> em todo o <see cref="T:System.Collections.Generic.List`1" />, se localizado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos em <see cref="T:System.Collections.Generic.List`1" /> que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa inversa.</param>
      <returns>O índice baseado em zero da última ocorrência de <paramref name="item" /> dentro do intervalo de elementos em <see cref="T:System.Collections.Generic.List`1" /> que se estende do primeiro elemento a <paramref name="index" />, se encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na <see cref="T:System.Collections.Generic.List`1" /> que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <returns>O índice baseado em zero da última ocorrência de <paramref name="item" /> dentro do intervalo de elementos no <see cref="T:System.Collections.Generic.List`1" /> que contém o número <paramref name="count" /> de elementos e termina em <paramref name="index" />, se encontrado; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> está fora do intervalo de índices válidos para o <see cref="T:System.Collections.Generic.List`1" />.
- ou -
<paramref name="count" /> é menor que 0.
- ou -
<paramref name="index" /> e <paramref name="count" /> não especificam uma seção válida no <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="item">O objeto a remover do <see cref="T:System.Collections.Generic.List`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for removido com êxito; caso contrário, <see langword="false" />.  Esse método também retornará <see langword="false" /> se <paramref name="item" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary>Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições dos elementos a serem removidos.</param>
      <returns>O número de elementos removidos de <see cref="T:System.Collections.Generic.List`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>Remove o elemento no índice especificado do <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index">O índice baseado em zero do elemento a ser removido.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="index" /> é igual a ou maior que <see cref="P:System.Collections.Generic.List`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Remove um intervalo de elementos do <see cref="T:System.Collections.Generic.List`1" />.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo de elementos a serem removidos.</param>
      <param name="count">O número de elementos a serem removidos.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="count" /> não denotam um intervalo válido de elementos no <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>Inverte a ordem dos elementos em todo o <see cref="T:System.Collections.Generic.List`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>Inverte a ordem dos elementos no intervalo especificado.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo a ser revertido.</param>
      <param name="count">O número de elementos no intervalo a serem revertidos.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="count" /> não denotam um intervalo válido de elementos no <see cref="T:System.Collections.Generic.List`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>Classifica os elementos em todo o <see cref="T:System.Collections.Generic.List`1" /> usando o comparador padrão.</summary>
      <exception cref="T:System.InvalidOperationException">O comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não consegue encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou a interface <see cref="T:System.IComparable" /> para o tipo <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Classifica os elementos em todo o <see cref="T:System.Collections.Generic.List`1" /> usando o comparador especificado.</summary>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é <see langword="null" />, e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não pode encontrar a implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentException">A implementação de <paramref name="comparer" /> causou um erro durante a classificação. Por exemplo, <paramref name="comparer" /> não pode retornar 0 ao comparar um item com ele próprio.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>Classifica os elementos em todo o <see cref="T:System.Collections.Generic.List`1" /> usando o <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison">O <see cref="T:System.Comparison`1" /> a ser usado na comparação de elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A implementação de <paramref name="comparison" /> causou um erro durante a classificação. Por exemplo, <paramref name="comparison" /> não pode retornar 0 ao comparar um item com ele próprio.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Classifica os elementos em um intervalo de elementos em <see cref="T:System.Collections.Generic.List`1" /> usando o comparador especificado.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo a ser classificado.</param>
      <param name="count">O tamanho do intervalo a ser classificado.</param>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="count" /> não especificam um intervalo válido no <see cref="T:System.Collections.Generic.List`1" />.
- ou -
A implementação de <paramref name="comparer" /> causou um erro durante a classificação. Por exemplo, <paramref name="comparer" /> não pode retornar 0 ao comparar um item com ele próprio.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é <see langword="null" />, e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não pode encontrar a implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo <paramref name="T" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.List`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
- ou -
O <paramref name="array" /> não tem indexação baseada em zero.
- ou -
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.
- ou -
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.List`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.List`1" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item ao <see cref="T:System.Collections.IList" />.</summary>
      <param name="item">O <see cref="T:System.Object" /> para adicionar ao <see cref="T:System.Collections.IList" />.</param>
      <returns>A posição na qual o novo elemento foi inserido.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> é de um tipo não atribuível ao <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determinará se o <see cref="T:System.Collections.IList" /> contiver um valor específico.</summary>
      <param name="item">O <see cref="T:System.Object" /> a ser localizado no <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.IList" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item específico em <see cref="T:System.Collections.IList" />.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.IList" />.</param>
      <returns>O índice de <paramref name="item" /> se encontrado na lista; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> é de um tipo não atribuível ao <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item no <see cref="T:System.Collections.IList" /> no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item">O objeto a ser inserido no <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> não é um índice válido no <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> é de um tipo não atribuível ao <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.List`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.List`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o elemento no índice especificado.</summary>
      <param name="index">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns>O elemento no índice especificado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> não é um índice válido no <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.ArgumentException">A propriedade é definida e <paramref name="value" /> é de um tipo que não é atribuível ao <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.IList" />.</summary>
      <param name="item">O objeto a remover do <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> é de um tipo não atribuível ao <see cref="T:System.Collections.IList" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>Copia os elementos do <see cref="T:System.Collections.Generic.List`1" /> em uma nova matriz.</summary>
      <returns>Uma matriz que contém cópias dos elementos do <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>Define a capacidade para o número real de elementos de <see cref="T:System.Collections.Generic.List`1" />, se esse número for menor que um valor limite.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary>Determina se cada elemento do <see cref="T:System.Collections.Generic.List`1" /> corresponde às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado <see cref="T:System.Predicate`1" /> que define as condições a serem verificadas nos elementos.</param>
      <returns>
        <see langword="true" /> se cada elemento do <see cref="T:System.Collections.Generic.List`1" /> corresponder às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />. Se a lista não tiver elementos, o valor retornado será <see langword="true" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>Representa uma coleção primeiro a entrar, primeiro a sair de objetos.</summary>
      <typeparam name="T">Especifica o tipo dos elementos na fila.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Queue`1" /> que está vazia e tem a capacidade inicial padrão.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Queue`1" />, que contém os elementos copiados da coleção especificada e tem capacidade suficiente para acomodar o número de elementos copiados.</summary>
      <param name="collection">A coleção cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Queue`1" /> que está vazia e tem a capacidade inicial especificada.</summary>
      <param name="capacity">O número inicial de elementos que o <see cref="T:System.Collections.Generic.Queue`1" /> pode conter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>Remove todos os objetos da <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>Determina se um elemento está no <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.Queue`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Generic.Queue`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos <see cref="T:System.Collections.Generic.Queue`1" /> em um <see cref="T:System.Array" /> unidimensional existente, começando no índice da matriz especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.Queue`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.Queue`1" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>Remove e retorna o objeto no início do <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>O objeto removido do início do <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.Queue`1" /> está vazio.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>Adiciona um objeto ao final do <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item">O objeto a ser adicionado ao <see cref="T:System.Collections.Generic.Queue`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.Queue`1" /> na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio do <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> para o <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>Retorna o objeto ao início da <see cref="T:System.Collections.Generic.Queue`1" /> sem removê-lo.</summary>
      <returns>O objeto no início da <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.Queue`1" /> está vazio.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
-ou-
O <paramref name="array" /> não tem indexação baseada em zero.
-ou-
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
-ou-
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Queue`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.Queue`1" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>Copia os elementos do <see cref="T:System.Collections.Generic.Queue`1" /> em uma nova matriz.</summary>
      <returns>Uma nova matriz que contém os elementos copiados de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>Definirá a capacidade para o número real de elementos no <see cref="T:System.Collections.Generic.Queue`1" />, se esse número for menor que 90% da capacidade atual.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <param name="result" />
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <param name="result" />
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>Representa uma coleção de pares chave/valor que são classificados na chave.</summary>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que está vazia e usa a implementação <see cref="T:System.Collections.Generic.IComparer`1" /> padrão para o tipo de chave.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que está vazia e usa a implementação <see cref="T:System.Collections.Generic.IComparer`1" /> especificada para comparar as chaves.</summary>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada na comparação de chaves ou <see langword="null" /> para usar o padrão <see cref="T:System.Collections.Generic.Comparer`1" /> para o tipo de chave.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que contém os elementos copiados do <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado e usa a implementação <see cref="T:System.Collections.Generic.IComparer`1" /> padrão para o tipo de chave.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.IDictionary`2" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que contém elementos copiados do <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado e usa a implementação <see cref="T:System.Collections.Generic.IComparer`1" /> especificada para comparar chaves.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.IDictionary`2" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <param name="comparer">A implementação <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada na comparação de chaves ou <see langword="null" /> para usar o padrão <see cref="T:System.Collections.Generic.Comparer`1" /> para o tipo de chave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>Adiciona um elemento com a chave e o valor especificados ao <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um elemento com a mesma chave no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>Remove todos os elementos do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>Obtém o <see cref="T:System.Collections.Generic.IComparer`1" /> usado para ordenar os elementos do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>O <see cref="T:System.Collections.Generic.IComparer`1" /> usado para ordenar os elementos do <see cref="T:System.Collections.Generic.SortedDictionary`2" /></returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>Determina se o <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>Determina se o <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contém um elemento com o valor especificado.</summary>
      <param name="value">O valor a ser localizado na <see cref="T:System.Collections.Generic.SortedDictionary`2" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia os elementos da <see cref="T:System.Collections.Generic.SortedDictionary`2" /> para a matriz especificada de estruturas <see cref="T:System.Collections.Generic.KeyValuePair`2" />, começando no índice especificado.</summary>
      <param name="array">A matriz unidimensional das estruturas <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que é o destino dos elementos copiados da <see cref="T:System.Collections.Generic.SortedDictionary`2" /> atual. A matriz deve ter indexação baseada em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.SortedDictionary`2" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>Obtém o número de pares chave-valor contidos no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>O número de pares chave-valor contidos no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.SortedDictionary`2" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Obtém o elemento na posição atual do enumerador como uma estrutura <see cref="T:System.Collections.DictionaryEntry" />.</summary>
      <returns>O elemento na coleção na posição atual do dicionário, como uma <see cref="T:System.Collections.DictionaryEntry" /> estrutura.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Obtém a chave do elemento na posição atual do enumerador.</summary>
      <returns>A chave do elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Obtém o valor do elemento na posição atual do enumerador.</summary>
      <returns>O valor do elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> para o <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>Obtém ou define o valor associado à chave especificada.</summary>
      <param name="key">A chave do valor a ser obtido ou definido.</param>
      <returns>O valor associado à chave especificada. Se a chave especificada não for encontrada, uma operação get lançará um <see cref="T:System.Collections.Generic.KeyNotFoundException" /> e uma operação set criará um novo elemento com a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">A propriedade é recuperada e <paramref name="key" /> não existe na coleção.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>Representa a coleção de chaves em um <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Essa classe não pode ser herdada.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> que reflete as chaves no <see cref="T:System.Collections.Generic.SortedDictionary`2" /> especificado.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.SortedDictionary`2" /> cujas chaves são refletidas no novo <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> para uma matriz unidimensional existente, começando no índice especificado da matriz.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>A estrutura <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> do <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Adiciona um item ao <see cref="T:System.Collections.Generic.ICollection`1" />.  Essa implementação sempre gera um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a ser adicionado ao <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Sempre gerada; a coleção é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Remove todos os itens do <see cref="T:System.Collections.Generic.ICollection`1" />.  Essa implementação sempre gera um <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Sempre gerada; a coleção é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determina se o <see cref="T:System.Collections.Generic.ICollection`1" /> contém o valor especificado.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se o item for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.Generic.ICollection`1" />.  Essa implementação sempre gera um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a remover do <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se o item for removido com êxito do <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o item não for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Sempre gerada; a coleção é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.ICollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
- ou -
O <paramref name="array" /> não tem indexação baseada em zero.
- ou -
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
- ou -
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>Obtém uma coleção que contém as chaves do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> que contém as chaves no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>Remove o elemento com a chave especificada do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />.  Esse método também retornará <see langword="false" />, se <paramref name="key" /> não tiver sido localizado no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adiciona um item ao <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair">A estrutura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> a ser adicionada ao <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um elemento com a mesma chave no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se o <see cref="T:System.Collections.Generic.ICollection`1" /> contém uma chave e valor específicos.</summary>
      <param name="keyValuePair">A estrutura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> para localizar no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="keyValuePair" /> for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />. Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Remove a primeira ocorrência do elemento especificado do <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair">A estrutura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> a ser removida do <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="keyValuePair" /> tiver sido removido com êxito do <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="keyValuePair" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores de <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Obtém uma coleção que contém as chaves do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Uma coleção que contém as chaves no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Obtém uma coleção que contém os valores no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Uma coleção que contém os valores na <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.Generic.ICollection`1" /> para uma matriz, começando no índice da matriz especificada.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Generic.ICollection`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
-ou-
O <paramref name="array" /> não tem indexação baseada em zero.
-ou-
O número de elementos na origem <see cref="T:System.Collections.Generic.ICollection`1" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
-ou-
O tipo do <see cref="T:System.Collections.Generic.ICollection`1" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona um elemento com a chave fornecida e o valor para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">O objeto a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value">O objeto a ser usado como o valor do elemento a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.IDictionary" />.
-ou-
<paramref name="value" /> é de um tipo que não é atribuível ao tipo de valor <paramref name="TValue" /> do <see cref="T:System.Collections.IDictionary" />.
-ou-
Já existe um elemento com a mesma chave no <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o <see cref="T:System.Collections.IDictionary" /> contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> tiver um valor fixo; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">A chave do elemento a obter.</param>
      <returns>O elemento com a chave especificada ou <see langword="null" /> se <paramref name="key" /> não estiver no dicionário ou <paramref name="key" /> for de um tipo que não pode ser atribuído ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Um valor está sendo atribuído e <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.
-ou-
Um valor está sendo atribuído e <paramref name="value" /> é de um tipo que não é atribuível ao tipo de valor <paramref name="TValue" /> do <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém os valores no <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém os valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtém o valor associado à chave especificada.</summary>
      <param name="key">A chave do valor a ser obtido.</param>
      <param name="value">Quando esse método for retornado, o valor associado à chave especificada, se a chave for encontrada; caso contrário, o valor padrão do tipo do parâmetro <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>Representa a coleção de valores em um <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Essa classe não pode ser herdada.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> que reflete os valores no <see cref="T:System.Collections.Generic.SortedDictionary`2" /> especificado.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.SortedDictionary`2" /> cujos valores são refletidos no novo <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copia os elementos <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> para uma matriz unidimensional existente, começando no índice especificado da matriz.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio do <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>A estrutura <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> do <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Adiciona um item ao <see cref="T:System.Collections.Generic.ICollection`1" />. Essa implementação sempre gera um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a ser adicionado ao <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Sempre gerada; a coleção é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Remove todos os itens do <see cref="T:System.Collections.Generic.ICollection`1" />. Essa implementação sempre gera um <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Sempre gerada; a coleção é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determina se o <see cref="T:System.Collections.Generic.ICollection`1" /> contém um valor especificado.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.Generic.ICollection`1" />. Essa implementação sempre gera um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">O objeto a remover do <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for removido com êxito do <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" />, se <paramref name="item" /> não tiver sido localizado no <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Sempre gerada; a coleção é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.ICollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
-ou-
O <paramref name="array" /> não tem indexação baseada em zero.
-ou-
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.
-ou-
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>Obtém uma coleção que contém os valores no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> que contém os valores no <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary>Representa uma coleção de pares chave/valor que são classificados por chave com base na implementação de <see cref="T:System.Collections.Generic.IComparer`1" /> associada.</summary>
      <typeparam name="TKey">O tipo das chaves da coleção.</typeparam>
      <typeparam name="TValue">O tipo dos valores da coleção.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedList`2" /> que está vazia, tem a capacidade inicial padrão e usa o <see cref="T:System.Collections.Generic.IComparer`1" /> padrão.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedList`2" /> que está vazia, tem a capacidade inicial padrão e usa o <see cref="T:System.Collections.Generic.IComparer`1" /> especificado.</summary>
      <param name="comparer">A implementação de <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada ao comparar chaves.
-ou-
O <see langword="null" /> a se usar o padrão <see cref="T:System.Collections.Generic.Comparer`1" /> para o tipo da chave.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedList`2" /> que contém elementos copiados do <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado, tem capacidade suficiente para acomodar o número de elementos copiados e usa o <see cref="T:System.Collections.Generic.IComparer`1" /> padrão.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.IDictionary`2" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedList`2" />, que contém os elementos copiados do <see cref="T:System.Collections.Generic.IDictionary`2" /> especificado, tem capacidade suficiente para acomodar o número de elementos copiados e usa o <see cref="T:System.Collections.Generic.IComparer`1" /> especificado.</summary>
      <param name="dictionary">O <see cref="T:System.Collections.Generic.IDictionary`2" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <param name="comparer">A implementação de <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada ao comparar chaves.
-ou-
O <see langword="null" /> a se usar o padrão <see cref="T:System.Collections.Generic.Comparer`1" /> para o tipo da chave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedList`2" /> que está vazia, tem a capacidade inicial especificada e usa o <see cref="T:System.Collections.Generic.IComparer`1" /> padrão.</summary>
      <param name="capacity">O número inicial de elementos que o <see cref="T:System.Collections.Generic.SortedList`2" /> pode conter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedList`2" /> que está vazia, tem a capacidade inicial especificada e usa o <see cref="T:System.Collections.Generic.IComparer`1" /> especificado.</summary>
      <param name="capacity">O número inicial de elementos que o <see cref="T:System.Collections.Generic.SortedList`2" /> pode conter.</param>
      <param name="comparer">A implementação de <see cref="T:System.Collections.Generic.IComparer`1" /> a ser usada ao comparar chaves.
-ou-
O <see langword="null" /> a se usar o padrão <see cref="T:System.Collections.Generic.Comparer`1" /> para o tipo da chave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary>Adiciona um elemento com a chave e o valor especificados ao <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um elemento com a mesma chave no <see cref="T:System.Collections.Generic.SortedList`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary>Obtém ou define o número de elementos que o <see cref="T:System.Collections.Generic.SortedList`2" /> pode conter.</summary>
      <returns>O número de elementos que o <see cref="T:System.Collections.Generic.SortedList`2" /> pode conter.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> é definido como um valor menor que <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente disponível no sistema.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary>Remove todos os elementos do <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary>Obtém o <see cref="T:System.Collections.Generic.IComparer`1" /> da lista classificada.</summary>
      <returns>O <see cref="T:System.IComparable`1" /> para o <see cref="T:System.Collections.Generic.SortedList`2" /> atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary>Determina se a <see cref="T:System.Collections.Generic.SortedList`2" /> contém uma chave específica.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.SortedList`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary>Determinará se o <see cref="T:System.Collections.Generic.SortedList`2" /> contiver um valor específico.</summary>
      <param name="value">O valor a ser localizado na <see cref="T:System.Collections.Generic.SortedList`2" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.SortedList`2" /> contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary>Obtém o número de pares chave-valor contidos no <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns>O número de pares chave-valor contidos no <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary>Retorna um enumerador que itera por meio do <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> do tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> para <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary>Procura a chave especificada e retorna o índice baseado em zero em toda a <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.Generic.SortedList`2" />.</param>
      <returns>O índice baseado em zero de <paramref name="key" /> em toda a <see cref="T:System.Collections.Generic.SortedList`2" />, se encontrada; caso contrário, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary>Pesquisa o valor especificado e retorna o índice baseado em zero da primeira ocorrência dentro de todo o <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="value">O valor a ser localizado na <see cref="T:System.Collections.Generic.SortedList`2" />.  O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" /> em todo o <see cref="T:System.Collections.Generic.SortedList`2" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary>Obtém ou define o valor associado à chave especificada.</summary>
      <param name="key">A chave cujo valor será obtido ou definido.</param>
      <returns>O valor associado à chave especificada. Se a chave especificada não for localizada, uma operação get lançará um <see cref="T:System.Collections.Generic.KeyNotFoundException" /> e uma operação de conjuntos criará um novo elemento com a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">A propriedade é recuperada e <paramref name="key" /> não existe na coleção.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary>Obtém uma coleção que contém as chaves no <see cref="T:System.Collections.Generic.SortedList`2" />, na ordem de classificação.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IList`1" /> que contém as chaves no <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary>Remove o elemento com a chave especificada do <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />.  Esse método também retornará <see langword="false" /> se <paramref name="key" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.SortedList`2" /> original.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary>Remove o elemento no índice especificado do <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <param name="index">O índice de base zero do elemento a ser removido.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
-ou-
<paramref name="index" /> é igual a ou maior que <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adiciona um par chave/valor ao <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair">O <see cref="T:System.Collections.Generic.KeyValuePair`2" /> para adicionar ao <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se o <see cref="T:System.Collections.Generic.ICollection`1" /> contém um elemento específico.</summary>
      <param name="keyValuePair">O <see cref="T:System.Collections.Generic.KeyValuePair`2" /> a ser localizado no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="keyValuePair" /> for encontrado no <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.Generic.ICollection`1" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.ICollection`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.ICollection`1" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />. Na implementação padrão de <see cref="T:System.Collections.Generic.SortedList`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Remove a primeira ocorrência de um determinado par de chave/valor do <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair">O <see cref="T:System.Collections.Generic.KeyValuePair`2" /> a ser removido de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="keyValuePair" /> tiver sido removido com êxito do <see cref="T:System.Collections.Generic.ICollection`1" />; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="keyValuePair" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um objeto que contém os valores na <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Obtém uma coleção enumerável que contém as chaves no dicionário somente leitura.</summary>
      <returns>Uma coleção enumerável que contém as chaves no dicionário somente leitura.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Obtém uma coleção enumerável que contém os valores no dicionário somente leitura.</summary>
      <returns>Uma coleção enumerável que contém os valores no dicionário somente leitura.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
-ou-
O <paramref name="array" /> não tem indexação baseada em zero.
-ou-
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.
-ou-
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedList`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.SortedList`2" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona um elemento com a chave fornecida e o valor para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">O <see cref="T:System.Object" /> a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser usado como valor do elemento a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">O <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.IDictionary" />.
-ou-
<paramref name="value" /> é de um tipo que não é atribuível ao tipo de valor <paramref name="TValue" /> do <see cref="T:System.Collections.IDictionary" />.
-ou-
Já existe um elemento com a mesma chave no <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o <see cref="T:System.Collections.IDictionary" /> contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> tiver um valor fixo; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedList`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> for somente leitura; caso contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.SortedList`2" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">A chave do elemento a ser obtida ou adicionada.</param>
      <returns>O elemento com a chave especificada ou <see langword="null" /> se <paramref name="key" /> não estiver no dicionário ou <paramref name="key" /> for de um tipo que não pode ser atribuído ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Um valor está sendo atribuído e <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave <paramref name="TKey" /> do <see cref="T:System.Collections.Generic.SortedList`2" />.
-ou-
Um valor está sendo atribuído e <paramref name="value" /> é de um tipo que não é atribuível ao tipo de valor <paramref name="TValue" /> do <see cref="T:System.Collections.Generic.SortedList`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém os valores no <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém os valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary>Definirá a capacidade para o número real de elementos no <see cref="T:System.Collections.Generic.SortedList`2" />, se esse número for menor que 90% da capacidade atual.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary>Obtém o valor associado à chave especificada.</summary>
      <param name="key">A chave cujo valor será obtido.</param>
      <param name="value">Quando esse método for retornado, o valor associado à chave especificada, se a chave for encontrada; caso contrário, o valor padrão do tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.SortedList`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary>Obtém uma coleção que contém os valores no <see cref="T:System.Collections.Generic.SortedList`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IList`1" /> que contém os valores no <see cref="T:System.Collections.Generic.SortedList`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>{1&amp;gt;Representa uma coleção de objetos que é mantida em ordem classificada.&amp;lt;1}</summary>
      <typeparam name="T">O tipo dos elementos no conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedSet`1" /> que usa um comparador especificado.</summary>
      <param name="comparer">O comparador padrão a ser usado para comparar objetos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedSet`1" /> que contém elementos copiados de uma coleção enumerável especificada.</summary>
      <param name="collection">A coleção enumerável a ser copiada.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedSet`1" /> que contém elementos copiados de uma coleção enumerável especificada e que usa um comparador especificado.</summary>
      <param name="collection">A coleção enumerável a ser copiada.</param>
      <param name="comparer">O comparador padrão a ser usado para comparar objetos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.SortedSet`1" /> que contém dados serializados.</summary>
      <param name="info">O objeto que contém as informações necessárias para serializar o objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context">A estrutura que contém a origem e o destino do fluxo serializado associado ao objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>Adiciona um elemento ao conjunto e retorna um valor que indica se ele foi adicionado com êxito.</summary>
      <param name="item">O elemento a ser adicionado ao conjunto.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> é adicionado ao conjunto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>Remove todos os elementos do conjunto.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>Obtém o objeto <see cref="T:System.Collections.Generic.IComparer`1" /> usado para ordenar os valores no <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>O comparador usado para ordenar os valores no <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>Determina se o conjunto contém um elemento específico.</summary>
      <param name="item">O elemento a ser localizado no conjunto.</param>
      <returns>
        <see langword="true" /> se o conjunto contiver <paramref name="item" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>Copia todo o <see cref="T:System.Collections.Generic.SortedSet`1" /> para uma matriz unidimensional compatível, começando no início da matriz de destino.</summary>
      <param name="array">Uma matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.SortedSet`1" /> excede o número de elementos que a matriz de destino pode conter.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copia todo o <see cref="T:System.Collections.Generic.SortedSet`1" /> para uma matriz unidimensional compatível, começando no índice especificado da matriz.</summary>
      <param name="array">Uma matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Generic.SortedSet`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentException">O número de elementos na matriz de origem é maior que o espaço disponível do <paramref name="index" /> ao final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copia um número especificado de elementos do <see cref="T:System.Collections.Generic.SortedSet`1" /> para uma matriz unidimensional compatível, começando no índice especificado da matriz.</summary>
      <param name="array">Uma matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Generic.SortedSet`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <param name="count">O número de elementos a serem copiados.</param>
      <exception cref="T:System.ArgumentException">O número de elementos na matriz de origem é maior que o espaço disponível do <paramref name="index" /> ao final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.
- ou -
<paramref name="count" /> é menor que zero.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>Obtém o número de elementos no <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>O número de elementos em <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary>Retorna um objeto <see cref="T:System.Collections.IEqualityComparer" /> que pode ser usado para criar uma coleção que contém conjuntos individuais.</summary>
      <returns>Um comparador para criar uma coleção de conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Retorna um objeto <see cref="T:System.Collections.IEqualityComparer" />, de acordo com um comparador especificado, que pode ser usado para criar uma coleção que contém conjuntos individuais.</summary>
      <param name="memberEqualityComparer">O comparador usado para criar o comparador retornado.</param>
      <returns>Um comparador para criar uma coleção de conjuntos.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>Enumera os elementos de um objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento da coleção <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e gera o evento de desserialização quando a desserialização for concluída.</summary>
      <param name="sender">A fonte do evento de desserialização.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associado à instância <see cref="T:System.Collections.Generic.SortedSet`1" /> atual é inválido.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e retorna os dados necessários para serializar a instância <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar a instância <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado à instância <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove todos os elementos que estão em uma coleção especificada do objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</summary>
      <param name="other">A coleção de itens a serem removidos do objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>Retorna um enumerador que itera pelo <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Um enumerador que itera pelo <see cref="T:System.Collections.Generic.SortedSet`1" /> em ordem de classificação.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e retorna dos dados necessários para serializar um objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar o objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context">Uma estrutura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado ao objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>Retorna uma exibição de um subconjunto em um <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="lowerValue">O menor valor desejado no modo de exibição.</param>
      <param name="upperValue">O maior valor desejado no modo de exibição.</param>
      <returns>Uma exibição de subconjunto que contém apenas os valores no intervalo especificado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="lowerValue" /> é mais do que <paramref name="upperValue" /> acordo com o comparador.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Uma tentativa de operação na exibição estava fora do intervalo especificado por <paramref name="lowerValue" /> e <paramref name="upperValue" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual para que ele contenha somente elementos que também estão em uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> é um subconjunto apropriado da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> for um subconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> é um superconjunto apropriado da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> for um superconjunto apropriado de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> é um subconjunto da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se um objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> é um superconjunto da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>Obtém o valor máximo no <see cref="T:System.Collections.Generic.SortedSet`1" />, conforme definido pelo comparador.</summary>
      <returns>O valor máximo no conjunto.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>Obtém o valor mínimo no <see cref="T:System.Collections.Generic.SortedSet`1" />, conforme definido pelo comparador.</summary>
      <returns>O valor mínimo no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e gera o evento de desserialização quando a desserialização é concluída.</summary>
      <param name="sender">A fonte do evento de desserialização.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associado ao objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual é inválido.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual e uma coleção especificada compartilham elementos comuns.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>Remove um item especificado do <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="item">O elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for encontrado e removido com êxito, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Remove todos os elementos que correspondem às condições definidas pelo predicado especificado de um <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns>O número de elementos que foram removidos da coleção de <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>Retorna um <see cref="T:System.Collections.Generic.IEnumerable`1" /> iterado no <see cref="T:System.Collections.Generic.SortedSet`1" /> na ordem inversa.</summary>
      <returns>Um enumerador iterado no <see cref="T:System.Collections.Generic.SortedSet`1" /> na ordem inversa.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual for igual a <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual para que ele contenha somente elementos que estão presentes no objeto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona um item a um objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">O objeto a ser adicionado ao objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">O <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se um <see cref="T:System.Collections.ICollection" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iteração na coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia todo o <see cref="T:System.Collections.Generic.SortedSet`1" /> para uma matriz unidimensional compatível, começando no índice especificado da matriz.</summary>
      <param name="array">Uma matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Generic.SortedSet`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice baseado em zero na <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentException">O número de elementos na matriz de origem é maior que o espaço disponível do <paramref name="index" /> ao final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> se o acesso ao <see cref="T:System.Collections.ICollection" /> for sincronizado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />. Na implementação padrão da <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iteração na coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> e gera o evento de desserialização quando a desserialização é concluída.</summary>
      <param name="sender">A fonte do evento de desserialização.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associado à instância <see cref="T:System.Collections.Generic.SortedSet`1" /> atual é inválido.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implementa a interface <see cref="T:System.Runtime.Serialization.ISerializable" /> e retorna dos dados necessários para serializar a instância <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contém as informações necessárias para serializar a instância <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <param name="context">Uma estrutura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém a origem e o destino do fluxo serializado associado à instância <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary>Pesquisa um determinado valor no conjunto e retorna o valor igual que for encontrado, se houver.</summary>
      <param name="equalValue">O valor a procurar.</param>
      <param name="actualValue">O valor do conjunto encontrado pela pesquisa ou o valor padrão de T quando a pesquisa não gera correspondência.</param>
      <returns>Um valor que indica se a pesquisa foi bem-sucedida.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual para que ele contenha todos os elementos presentes no objeto atual ou na coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> atual.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>Representa uma coleção UEPS (último a entrar, primeiro a sair) de tamanho variável das instâncias do mesmo tipo especificado.</summary>
      <typeparam name="T">Especifica o tipo dos elementos na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Stack`1" /> que está vazia e tem a capacidade inicial padrão.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Stack`1" />, que contém os elementos copiados da coleção especificada e tem capacidade suficiente para acomodar o número de elementos copiados.</summary>
      <param name="collection">A coleção da qual os elementos serão copiados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Collections.Generic.Stack`1" /> que está vazia e tem a capacidade inicial especificada ou a capacidade inicial padrão, a que for maior.</summary>
      <param name="capacity">O número inicial de elementos que o <see cref="T:System.Collections.Generic.Stack`1" /> pode conter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>Remove todos os objetos da <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>Determina se um elemento está no <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Generic.Stack`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Generic.Stack`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>Copia o <see cref="T:System.Collections.Generic.Stack`1" /> para um unidimensional <see cref="T:System.Array" /> existente, começando no índice da matriz especificada.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.Generic.Stack`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">O número de elementos na origem <see cref="T:System.Collections.Generic.Stack`1" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>Enumera os elementos de uma <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no <see cref="T:System.Collections.Generic.Stack`1" /> na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção. Essa classe não pode ser herdada.</summary>
      <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>Retorna um enumerador para o <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> para o <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>Retorna o objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" /> sem removê-lo.</summary>
      <returns>O objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.Stack`1" /> está vazio.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>Remove e retorna o objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>O objeto foi removido da parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Collections.Generic.Stack`1" /> está vazio.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>Insere um objeto na parte superior do <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item">O objeto a ser enviado por push para o <see cref="T:System.Collections.Generic.Stack`1" />. O valor pode ser <see langword="null" /> para tipos de referência.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
-ou-
O <paramref name="array" /> não tem indexação baseada em zero.
-ou-
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="arrayIndex" /> até o final do <paramref name="array" /> de destino.
-ou-
O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser automaticamente convertido para o tipo de <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.  Na implementação padrão de <see cref="T:System.Collections.Generic.Stack`1" />, essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Na implementação padrão da <see cref="T:System.Collections.Generic.Stack`1" />, essa propriedade sempre retorna a instância atual.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>Copia o <see cref="T:System.Collections.Generic.Stack`1" /> em uma nova matriz.</summary>
      <returns>Uma nova matriz que contém cópias dos elementos do <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>Definirá a capacidade para o número real de elementos no <see cref="T:System.Collections.Generic.Stack`1" />, se esse número for menor que 90% da capacidade atual.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <param name="result" />
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <param name="result" />
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary>Fornece objetos para executar uma comparação estrutural de dois objetos de coleção.</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary>Obtém um objeto predefinido que executa uma comparação estrutural de dois objetos.</summary>
      <returns>Um objeto predefinido que é usado para realizar uma comparação estrutural de dois objetos de coleção.</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary>Obtém um objeto predefinido que compara dois objetos em relação à igualdade estrutural.</summary>
      <returns>Um objeto predefinido que é usado para comparar dois objetos de coleção em relação à igualdade estrutural.</returns>
    </member>
  </members>
</doc>
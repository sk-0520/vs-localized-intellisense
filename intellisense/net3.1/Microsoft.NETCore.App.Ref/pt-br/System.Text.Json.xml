<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>Define como o struct <see cref="T:System.Text.Json.Utf8JsonReader" /> manipula comentários.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>Permite comentários dentro da entrada JSON e trata-os como tokens válidos. Durante a leitura, o chamador pode acessar os valores dos comentários.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>Não permite comentários na entrada JSON. Se ele for encontrado, os comentários serão tratados como um JSON inválido e uma <see cref="T:System.Text.Json.JsonException" /> será gerada. Este é o valor padrão.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>Permite comentários dentro do JSON de entrada e ignora-os. O <see cref="T:System.Text.Json.Utf8JsonReader" /> comporta-se como se nenhum comentário estivesse presente.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>Fornece um mecanismo para examinar o conteúdo estrutural de um valor JSON sem criar automaticamente instâncias de valores de dados.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>Libera os recursos usados por esta instância <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analisa uma sequência como texto codificado em UTF-8 que representa um único valor de byte JSON em um JsonDocument.</summary>
      <param name="utf8Json">O texto JSON a ser analisado.</param>
      <param name="options">Opções para controlar o comportamento do leitor durante a análise.</param>
      <returns>Uma representação de JsonDocument do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contém opções sem suporte.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>Analisa um <see cref="T:System.IO.Stream" /> como dados codificados em UTF-8 que representam um único valor JSON em um JsonDocument. O fluxo é lido até a conclusão.</summary>
      <param name="utf8Json">Os dados JSON a serem analisados.</param>
      <param name="options">Opções para controlar o comportamento do leitor durante a análise.</param>
      <returns>Uma representação de JsonDocument do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contém opções sem suporte.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analisa memória como texto codificado em UTF-8 que representa um único valor JSON em um JsonDocument.</summary>
      <param name="utf8Json">O texto JSON a ser analisado.</param>
      <param name="options">Opções para controlar o comportamento do leitor durante a análise.</param>
      <returns>Uma representação de JsonDocument do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contém opções sem suporte.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>Analisa texto que representa um único valor de caractere JSON em um JsonDocument.</summary>
      <param name="json">O texto JSON a ser analisado.</param>
      <param name="options">Opções para controlar o comportamento do leitor durante a análise.</param>
      <returns>Uma representação de JsonDocument do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contém opções sem suporte.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>Analisa texto que representa um único valor de cadeia de caracteres JSON em um JsonDocument.</summary>
      <param name="json">O texto JSON a ser analisado.</param>
      <param name="options">Opções para controlar o comportamento do leitor durante a análise.</param>
      <returns>Uma representação de JsonDocument do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contém opções sem suporte.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>Analisa um <see cref="T:System.IO.Stream" /> como dados codificados em UTF-8 que representam um único valor JSON em um JsonDocument. O fluxo é lido até a conclusão.</summary>
      <param name="utf8Json">Os dados JSON a serem analisados.</param>
      <param name="options">Opções para controlar o comportamento do leitor durante a análise.</param>
      <param name="cancellationToken">O token para monitorar quanto às solicitações de cancelamento.</param>
      <returns>Uma tarefa para produzir uma representação de JsonDocument do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> não representa um único valor JSON válido.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contém opções sem suporte.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>Analisa um valor JSON (incluindo matrizes ou objetos) do leitor fornecido.</summary>
      <param name="reader">O leitor a ser lido.</param>
      <returns>Um JsonDocument que representa o valor (e valores aninhados) lido do leitor.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contém opções sem suporte.
- ou -
O token <paramref name="reader" /> atual não inicia ou representa um valor.</exception>
      <exception cref="T:System.Text.Json.JsonException">Não foi possível ler um valor do leitor.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>Obtém o elemento raiz deste documento JSON.</summary>
      <returns>Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor do documento.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>Tenta analisar um valor JSON (incluindo matrizes ou objetos) do leitor fornecido.</summary>
      <param name="reader">O leitor a ser lido.</param>
      <param name="document">Quando retorna, o método contém o documento analisado.</param>
      <returns>
        <see langword="true" /> se um valor foi lido e analisado em um JsonDocument; <see langword="false" /> se o leitor ficou sem dados durante a análise. Todas as outras situações resultam no lançamento de uma exceção.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contém opções sem suporte.
- ou -
O token <paramref name="reader" /> atual não inicia ou representa um valor.</exception>
      <exception cref="T:System.Text.Json.JsonException">Não foi possível ler um valor do leitor.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Grava o documento no gravador fornecido como um valor JSON.</summary>
      <param name="writer">O gravador no qual gravar o documento.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="writer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> deste <see cref="P:System.Text.Json.JsonDocument.RootElement" /> resultaria em um JSON inválido.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>Fornece ao usuário a capacidade de definir um comportamento personalizado ao analisar o JSON para criar um <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>Obtém ou define um valor que indica se uma vírgula extra é permitida (e ignorada) no final de uma lista de valores JSON em um objeto ou uma matriz no conteúdo JSON que está sendo lido.</summary>
      <returns>
        <see langword="true" /> se uma vírgula extra no final de uma lista de valores JSON em um objeto ou matriz for permitida; caso contrário, <see langword="false" />. O padrão é <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>Obtém ou define um valor que determina como o <see cref="T:System.Text.Json.JsonDocument" /> manipula os comentários ao ler os dados JSON.</summary>
      <returns>Um dos valores de enumeração que indica como os comentários são tratados.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A enumeração de manipulação de comentário é definida como um valor não compatível (ou que não está dentro do intervalo de enumeração <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>Obtém ou define a profundidade máxima permitida ao analisar dados JSON, sendo que o valor padrão (ou seja, 0) indica uma profundidade máxima de 64.</summary>
      <returns>A profundidade máxima permitida ao analisar dados JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A profundidade máxima está definida como um valor negativo.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>Representa um valor JSON específico em um <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>Representa um enumerador para o conteúdo de uma matriz JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>Libera os recursos usados por esta instância <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar na matriz.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento da coleção.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador para uma matriz de <see cref="T:System.Text.Json.JsonElement" /> que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>Obtém um JsonElement que pode ser armazenado com segurança além do tempo de vida do <see cref="T:System.Text.Json.JsonDocument" /> original.</summary>
      <returns>Um JsonElement que pode ser armazenado com segurança além do tempo de vida do <see cref="T:System.Text.Json.JsonDocument" /> original.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>Obtém um enumerador para enumerar os valores na matriz JSON representada por esse JsonElement.</summary>
      <returns>Um enumerador para enumerar os valores na matriz JSON representada por esse JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>Obtém um enumerador para enumerar as propriedades no objeto JSON representado por esse JsonElement.</summary>
      <returns>Um enumerador para enumerar as propriedades no objeto JSON representado por esse JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>Obtém o número de valores contidos no valor de matriz atual.</summary>
      <returns>O número de valores contidos no valor de matriz atual.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>Obtém o valor do elemento como um <see cref="T:System.Boolean" />.</summary>
      <returns>O valor do elemento como um <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.True" /> nem <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>Obtém o número JSON atual como um <see cref="T:System.Byte" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>Obtém o valor do elemento como uma matriz de bytes.</summary>
      <returns>O valor decodificado como uma matriz de bytes.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">O valor não está codificado como texto Base64 e, portanto, não pode ser decodificado para bytes.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>Obtém o valor do elemento como um <see cref="T:System.DateTime" />.</summary>
      <returns>O valor do elemento como um <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser lido como um <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>Obtém o valor do elemento como um <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>O valor do elemento como um <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser lido como um <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>Obtém o número JSON atual como um <see cref="T:System.Decimal" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>Obtém o número JSON atual como um <see cref="T:System.Double" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>Obtém o valor do elemento como um <see cref="T:System.Guid" />.</summary>
      <returns>O valor do elemento como um <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>Obtém o número JSON atual como um <see cref="T:System.Int16" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>Obtém o número JSON atual como um <see cref="T:System.Int32" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>Obtém o número JSON atual como um <see cref="T:System.Int64" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>Obtém um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor de uma propriedade obrigatória identificada por <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName">A representação UTF-8 (sem nenhuma marca de ordem de byte) do nome da propriedade a ser retornada.</param>
      <returns>Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor da propriedade solicitada.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Nenhuma propriedade foi encontrada com o nome solicitado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>Obtém um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor de uma propriedade obrigatória identificada por <paramref name="propertyName" />.</summary>
      <param name="propertyName">O nome da propriedade cujo valor deve ser retornado.</param>
      <returns>Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor da propriedade solicitada.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Nenhuma propriedade foi encontrada com o nome solicitado.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>Obtém um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor de uma propriedade obrigatória identificada por <paramref name="propertyName" />.</summary>
      <param name="propertyName">O nome da propriedade cujo valor deve ser retornado.</param>
      <returns>Um <see cref="T:System.Text.Json.JsonElement" /> que representa o valor da propriedade solicitada.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Nenhuma propriedade foi encontrada com o nome solicitado.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>Obtém uma cadeia de caracteres que representa os dados de entrada originais que dão suporte a esse valor.</summary>
      <returns>Os dados de entrada originais que dão suporte a esse valor.</returns>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>Obtém o número JSON atual como um <see cref="T:System.SByte" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>Obtém o número JSON atual como um <see cref="T:System.Single" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>Obtém o valor do elemento como um <see cref="T:System.String" />.</summary>
      <returns>O valor do elemento como um <see cref="T:System.String" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" /> nem <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>Obtém o número JSON atual como um <see cref="T:System.UInt16" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>Obtém o número JSON atual como um <see cref="T:System.UInt32" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>Obtém o número JSON atual como um <see cref="T:System.UInt64" />.</summary>
      <returns>O número JSON atual como um <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor não pode ser representado como um <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>Obtém o valor no índice especificado se o valor atual é uma <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index">O índice do item.</param>
      <returns>O valor no índice especificado.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> não está no intervalo [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>Representa um enumerador para as propriedades de um objeto JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>Libera os recursos usados por esta instância <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>Retorna um enumerador que itera pelas propriedades de um objeto.</summary>
      <returns>Um enumerador que pode ser usado para iterar pelo objeto.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento da coleção.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador para objetos <see cref="T:System.Text.Json.JsonProperty" /> que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento na coleção na posição atual do enumerador.</summary>
      <returns>O elemento na coleção na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>Obtém uma representação de cadeia de caracteres para o valor atual apropriado para o tipo de valor.</summary>
      <returns>Uma representação de cadeia de caracteres para o valor atual apropriado ao tipo de valor.</returns>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.Byte" />.</summary>
      <param name="value">Quando o método é retornado, contém o equivalente em bytes do número JSON atual se a conversão foi bem-sucedida.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Byte" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Tenta representar a cadeia de caracteres JSON atual como uma matriz de bytes, supondo que esteja codificada em Base64.</summary>
      <param name="value">Quando o método é bem-sucedido, contém a representação binária decodificada do texto Base64.</param>
      <returns>
        <see langword="true" /> se o valor do token inteiro for codificado como um texto Base64 válido e puder ser decodificado para bytes com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>Tenta representar a cadeia de caracteres JSON atual como uma <see cref="T:System.DateTime" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o valor de data e hora equivalente à cadeia de caracteres JSON atual.</param>
      <returns>
        <see langword="true" /> se a cadeia de caracteres puder ser representada como um <see cref="T:System.DateTime" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Tenta representar a cadeia de caracteres JSON atual como uma <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém a data e a hora equivalentes à cadeia de caracteres JSON atual.</param>
      <returns>
        <see langword="true" /> se a cadeia de caracteres puder ser representada como um <see cref="T:System.DateTimeOffset" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.Decimal" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o equivalente decimal do número JSON atual.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Decimal" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.Double" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o valor de ponto flutuante de precisão dupla equivalente ao número JSON atual.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Double" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>Tenta representar a cadeia de caracteres JSON atual como uma <see cref="T:System.Guid" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o GUID equivalente à cadeia de caracteres JSON atual.</param>
      <returns>
        <see langword="true" /> se a cadeia de caracteres puder ser representada como um <see cref="T:System.Guid" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.Int16" />.</summary>
      <param name="value">Quando o método é retornado, contém o equivalente inteiro de 16 bits do número JSON atual se a conversão foi bem-sucedida.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Int16" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.Int32" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o valor do inteiro de 32 bits equivalente ao número JSON atual.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Int32" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.Int64" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o valor do inteiro de 64 bits equivalente ao número JSON atual.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Int64" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>Procura uma propriedade chamada <paramref name="utf8PropertyName" /> no objeto atual, retornando um valor que indica se essa propriedade existe. Quando a propriedade existe, o método atribui seu valor ao argumento <paramref name="value" />.</summary>
      <param name="utf8PropertyName">A representação UTF-8 (sem nenhuma marca de ordem de byte) do nome da propriedade a ser retornada.</param>
      <param name="value">Recebe o valor da propriedade localizada.</param>
      <returns>
        <see langword="true" /> se a propriedade for encontrada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>Procura uma propriedade chamada <paramref name="propertyName" /> no objeto atual, retornando um valor que indica se essa propriedade existe. Quando a propriedade existe, o método atribui seu valor ao argumento <paramref name="value" />.</summary>
      <param name="propertyName">O nome da propriedade a ser localizada.</param>
      <param name="value">Quando esse método é retornado, ele contém o valor da propriedade especificada.</param>
      <returns>
        <see langword="true" /> se a propriedade for encontrada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>Procura uma propriedade chamada <paramref name="propertyName" /> no objeto atual, retornando um valor que indica se essa propriedade existe. Quando a propriedade existe, seu valor é atribuído ao argumento <paramref name="value" />.</summary>
      <param name="propertyName">O nome da propriedade a ser localizada.</param>
      <param name="value">Quando esse método é retornado, ele contém o valor da propriedade especificada.</param>
      <returns>
        <see langword="true" /> se a propriedade for encontrada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.SByte" />.</summary>
      <param name="value">Quando o método é retornado, contém o equivalente em bytes com sinal do número JSON atual se a conversão foi bem-sucedida.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.SByte" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.Single" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o valor de ponto flutuante de precisão simples equivalente ao número JSON atual.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.Single" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.UInt16" />.</summary>
      <param name="value">Quando o método é retornado, contém o equivalente inteiro de 16 bits sem sinal do número JSON atual se a conversão foi bem-sucedida.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.UInt16" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.UInt32" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o valor do inteiro sem sinal de 32 bits equivalente ao número JSON atual.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.UInt32" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>Tenta representar o número JSON atual como um <see cref="T:System.UInt64" />.</summary>
      <param name="value">Quando esse método é retornado, ele contém o valor do inteiro sem sinal de 64 bits equivalente ao número JSON atual.</param>
      <returns>
        <see langword="true" /> se o número puder ser representado como um <see cref="T:System.UInt64" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Compara o texto representado por um intervalo de bytes codificado em UTF8 com o valor da cadeia de caracteres desse elemento.</summary>
      <param name="utf8Text">O texto codificado em UTF-8 a ser comparado.</param>
      <returns>
        <see langword="true" /> se o valor da cadeia de caracteres desse elemento tiver a mesma codificação UTF-8 que <paramref name="utf8Text" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>Compara um intervalo de caracteres somente leitura especificado com o valor da cadeia de caracteres desse elemento.</summary>
      <param name="text">O texto para comparação.</param>
      <returns>
        <see langword="true" /> se o valor desse elemento corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>Compara uma cadeia de caracteres especificada com o valor da cadeia de caracteres desse elemento.</summary>
      <param name="text">O texto para comparação.</param>
      <returns>
        <see langword="true" /> se o valor desse elemento corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor não é <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>Obtém o tipo do valor JSON atual.</summary>
      <returns>O tipo do valor JSON atual.</returns>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Grava o elemento no gravador especificado como um valor JSON.</summary>
      <param name="writer">O gravador no qual gravar o elemento.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="writer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> desse valor é <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>Fornece métodos para transformar texto codificado em UTF-8 ou UTF-16 em um formulário adequado para JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codifica um valor de texto UTF-8 como uma cadeia de caracteres JSON.</summary>
      <param name="utf8Value">O texto codificado em UTF-8 a ser convertido em texto codificado em JSON.</param>
      <param name="encoder">O codificador a ser usado ao escapar cadeias de caracteres, ou <see langword="null" /> para usar o codificador padrão.</param>
      <returns>O texto JSON codificado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" /> é muito grande.
- ou -
<paramref name="utf8Value" /> contém bytes UTF-8 inválidos.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codifica um valor de texto especificado como uma cadeia de caracteres JSON.</summary>
      <param name="value">O valor a ser convertido em texto codificado em JSON.</param>
      <param name="encoder">O codificador a ser usado ao escapar cadeias de caracteres, ou <see langword="null" /> para usar o codificador padrão.</param>
      <returns>O texto JSON codificado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> é muito grande.
- ou -
<paramref name="value" /> contém caracteres UTF-16 inválidos.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codifica o valor de texto da cadeia de caracteres como uma cadeia de caracteres JSON.</summary>
      <param name="value">O valor a ser convertido em texto codificado em JSON.</param>
      <param name="encoder">O codificador a ser usado ao escapar cadeias de caracteres, ou <see langword="null" /> para usar o codificador padrão.</param>
      <returns>O texto JSON codificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> é muito grande.
- ou -
<paramref name="value" /> contém caracteres UTF-16 inválidos.</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>Obtém a representação codificada em UTF-8 do texto JSON pré-codificado.</summary>
      <returns>A representação codificada em UTF-8 do texto JSON previamente codificado.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>Determina se essa instância e um objeto especificado, que também deve ser uma instância de <see cref="T:System.Text.Json.JsonEncodedText" />, têm o mesmo valor.</summary>
      <param name="obj">O objeto a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se a instância atual e <paramref name="obj" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>Determina se essa instância e outra instância de <see cref="T:System.Text.Json.JsonEncodedText" /> especificada têm o mesmo valor.</summary>
      <param name="other">O objeto a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se esta instância e <paramref name="other" /> tiverem o mesmo valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>Retorna o código hash para este <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns>O código hash para essa instância.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>Converte o valor dessa instância em um <see cref="T:System.String" />.</summary>
      <returns>A cadeia de caracteres codificada em UTF-16 subjacente.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>Define um objeto de exceção personalizado que é gerado quando um texto JSON inválido é encontrado, quando a profundidade máxima definida é ultrapassada ou quando o texto JSON não é compatível com o tipo de uma propriedade em um objeto.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Cria um novo objeto de exceção com os dados serializados.</summary>
      <param name="info">Os dados do objeto serializado sobre a exceção sendo gerada.</param>
      <param name="context">Um objeto que contém informações contextuais sobre a fonte ou o destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonException" /> com uma mensagem de erro especificada.</summary>
      <param name="message">A mensagem de erro específica do contexto.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonException" />, com uma mensagem de erro especificada e uma referência à exceção interna que é a causa dessa exceção.</summary>
      <param name="message">A mensagem de erro específica do contexto.</param>
      <param name="innerException">A exceção que causou a exceção atual.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Cria um objeto de exceção para retransmitir as informações de erro ao usuário.</summary>
      <param name="message">A mensagem de erro específica do contexto.</param>
      <param name="path">O caminho em que o JSON inválido foi encontrado.</param>
      <param name="lineNumber">O número de linha (começando em 0) em que o JSON inválido foi encontrado ao desserializar.</param>
      <param name="bytePositionInLine">O número de bytes dentro da linha atual (começando em 0) em que o JSON inválido foi encontrado.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>Cria um objeto de exceção para retransmitir as informações de erro ao usuário, que inclui uma exceção interna especificada.</summary>
      <param name="message">A mensagem de erro específica do contexto.</param>
      <param name="path">O caminho em que o JSON inválido foi encontrado.</param>
      <param name="lineNumber">O número de linha (começando em 0) em que o JSON inválido foi encontrado ao desserializar.</param>
      <param name="bytePositionInLine">O número de bytes (começando em 0) dentro da linha atual em que o JSON inválido foi encontrado.</param>
      <param name="innerException">A exceção que causou a exceção atual.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>Obtém o número baseado em zero de bytes lidos dentro da linha atual antes da exceção.</summary>
      <returns>O número de bytes lidos com base em zero na linha atual antes da exceção.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Define o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com informações sobre a exceção.</summary>
      <param name="info">Os dados do objeto serializado sobre a exceção sendo gerada.</param>
      <param name="context">Um objeto que contém informações contextuais sobre a fonte ou o destino.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>Obtém o número baseado em zero de linhas lidas antes da exceção.</summary>
      <returns>O número de linhas com base em zero lido antes da exceção.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>Obtém uma mensagem que descreve a exceção atual.</summary>
      <returns>A mensagem de erro que descreve a exceção atual.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>Obtém o caminho dentro do JSON em que a exceção foi encontrada.</summary>
      <returns>O caminho dentro do JSON em que a exceção foi encontrada.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>Determina a política de nomenclatura usada para converter um nome baseado em cadeia de caracteres para outro formato, como o formato camel-case, por exemplo.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>Inicializa uma nova instância do <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>Obtém a política de nomenclatura para camel-case.</summary>
      <returns>A política de nomenclatura para camel-case.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>Quando substituído em uma classe derivada, converte o nome especificado de acordo com a política.</summary>
      <param name="name">O nome a ser convertido.</param>
      <returns>O nome convertido.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>Representa uma única propriedade para um objeto JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>Obtém o nome dessa propriedade.</summary>
      <returns>O nome dessa propriedade.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Compara o texto especificado codificado em UTF-8 com o nome dessa propriedade.</summary>
      <param name="utf8Text">O texto codificado em UTF-8 a ser comparado.</param>
      <returns>
        <see langword="true" /> se o nome dessa propriedade tiver a mesma codificação UTF-8 que <paramref name="utf8Text" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Type" /> desse valor não é <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>Compara o texto especificado como um intervalo de caracteres com o nome dessa propriedade.</summary>
      <param name="text">O texto com o qual comparar.</param>
      <returns>
        <see langword="true" /> se o nome dessa propriedade corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Type" /> desse valor não é <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>Compara a cadeia de caracteres especificada com o nome dessa propriedade.</summary>
      <param name="text">O texto com o qual comparar.</param>
      <returns>
        <see langword="true" /> se o nome dessa propriedade corresponder a <paramref name="text" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Type" /> desse valor não é <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>Fornece uma representação de cadeia de caracteres da propriedade para fins de depuração.</summary>
      <returns>Uma cadeia de caracteres que contém o valor não interpretado da propriedade, começando nas aspas de abertura declarativas e terminando no último caractere que faz parte do valor.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>Obtém o valor dessa propriedade.</summary>
      <returns>O valor dessa propriedade.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Grava a propriedade no gravador fornecido como uma propriedade de objeto JSON nomeada.</summary>
      <param name="writer">O gravador no qual gravar a propriedade.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> é grande demais para ser uma propriedade de objeto JSON.</exception>
      <exception cref="T:System.InvalidOperationException">O <see cref="P:System.Text.Json.JsonElement.ValueKind" /> do <see cref="P:System.Text.Json.JsonProperty.Value" /> desta propriedade JSON resultaria em um JSON inválido.</exception>
      <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Text.Json.JsonDocument" /> pai foi descartado.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>Fornece ao usuário a capacidade de definir um comportamento personalizado ao ler um JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>Obtém ou define um valor que define se uma vírgula extra é permitida (e ignorada) no final de uma lista de valores JSON em um objeto ou uma matriz no conteúdo JSON que está sendo lido.</summary>
      <returns>
        <see langword="true" /> se uma vírgula extra for permitida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>Obtém ou define um valor que determina como o <see cref="T:System.Text.Json.Utf8JsonReader" /> manipula os comentários ao ler os dados JSON.</summary>
      <returns>Um dos valores de enumeração que indica como os comentários são tratados.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A propriedade está sendo definida como um valor que não é membro da enumeração <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>Obtém ou define a profundidade máxima permitida durante a leitura de JSON, com o padrão (ou seja, 0) que indica uma profundidade máxima de 64.</summary>
      <returns>A profundidade máxima permitida durante a leitura de JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">A profundidade máxima está sendo definida como um valor negativo.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>Define um tipo opaco que mantém e salva todas as informações de estado relevantes, que precisam ser fornecidas ao <see cref="T:System.Text.Json.Utf8JsonReader" /> para continuar a leitura após o processamento de dados incompletos.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>Constrói uma nova instância de <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonReader" /> que é diferente do RFC do JSON (por exemplo, como manipular comentários ou a profundidade máxima permitida durante a leitura). Por padrão, o <see cref="T:System.Text.Json.Utf8JsonReader" /> segue estritamente o RFC do JSON (os comentários no JSON são inválidos) e lê até uma profundidade máxima de 64.</param>
      <exception cref="T:System.ArgumentException">A profundidade máxima é definida como um valor não positivo (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>Obtém o comportamento personalizado a ser usado ao ler dados JSON usando o struct <see cref="T:System.Text.Json.Utf8JsonReader" />, que pode desviar da especificação de JSON estrita, que é o comportamento padrão.</summary>
      <returns>O comportamento personalizado a ser usado ao ler dados JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>Fornece funcionalidade para serializar objetos ou tipos de valor para JSON e para desserializar JSON em objetos ou tipos de valor.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analisa o texto codificado em UTF-8 que representa um único valor JSON em uma instância de um tipo especificado.</summary>
      <param name="utf8Json">O texto JSON a ser analisado.</param>
      <param name="returnType">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options">Opções para controlar o comportamento durante a análise.</param>
      <returns>Uma representação <paramref name="returnType" /> do valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="returnType" /> não é compatível com o JSON.
- ou -
Há dados restantes no intervalo além de um único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analisa o texto que representa um único valor JSON em uma instância de um tipo especificado.</summary>
      <param name="json">O texto JSON a ser analisado.</param>
      <param name="returnType">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options">Opções para controlar o comportamento durante a análise.</param>
      <returns>Uma representação <paramref name="returnType" /> do valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> ou <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="TValue" /> não é compatível com o JSON.
- ou -
Há dados restantes na cadeia de caracteres além de um único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Lê um valor JSON (incluindo objetos ou matrizes) do leitor fornecido e o converte em uma instância de um tipo especificado.</summary>
      <param name="reader">O leitor do qual o JSON é lido.</param>
      <param name="returnType">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options">Opções para controlar o comportamento do serializador durante a leitura.</param>
      <returns>Uma representação <paramref name="returnType" /> do valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="returnType" /> não é compatível com o JSON.
- ou -
Não foi possível ler um valor do leitor.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> está usando opções incompatíveis.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>Analisa o texto codificado em UTF-8 que representa um único valor JSON em uma instância do tipo especificado por um parâmetro de tipo genérico.</summary>
      <param name="utf8Json">O texto JSON a ser analisado.</param>
      <param name="options">Opções para controlar o comportamento durante a análise.</param>
      <typeparam name="TValue">O tipo de destino do texto codificado UTF-8.</typeparam>
      <returns>Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="TValue" /> não é compatível com o JSON.
- ou -
Há dados restantes no intervalo além de um único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>Analisa o texto que representa um único valor JSON em uma instância do tipo especificado por um parâmetro de tipo genérico.</summary>
      <param name="json">O texto JSON a ser analisado.</param>
      <param name="options">Opções para controlar o comportamento durante a análise.</param>
      <typeparam name="TValue">O tipo de destino do valor JSON.</typeparam>
      <returns>Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="TValue" /> não é compatível com o JSON.
- ou -
Há dados restantes na cadeia de caracteres além de um único valor JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>Lê um valor JSON (incluindo objetos ou matrizes) do leitor fornecido dentro de uma instância do tipo especificado por um parâmetro de tipo genérico.</summary>
      <param name="reader">O leitor do qual o JSON é lido.</param>
      <param name="options">Opções para controlar o comportamento do serializador durante a leitura.</param>
      <typeparam name="TValue">O tipo de destino do valor JSON.</typeparam>
      <returns>Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="TValue" /> não é compatível com o JSON.
- ou -
Não foi possível ler um valor do leitor.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> usa opções não compatíveis.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Lê de forma assíncrona o texto codificado em UTF-8 que representa um único valor JSON em uma instância de um tipo especificado. O fluxo será lido até a conclusão.</summary>
      <param name="utf8Json">Os dados JSON a serem analisados.</param>
      <param name="returnType">O tipo do objeto a ser convertido e retornado.</param>
      <param name="options">Opções para controlar o comportamento durante a leitura.</param>
      <param name="cancellationToken">Um token de cancelamento que pode ser usado para cancelar a operação de leitura.</param>
      <returns>Uma representação <paramref name="returnType" /> do valor JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> ou <paramref name="returnType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="TValue" /> não é compatível com o JSON.
- ou -
Há dados restantes no fluxo.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Lê de forma assíncrona o texto codificado em UTF-8 que representa um único valor JSON em uma instância de um tipo especificado por um parâmetro de tipo genérico. O fluxo será lido até a conclusão.</summary>
      <param name="utf8Json">Os dados JSON a serem analisados.</param>
      <param name="options">Opções para controlar o comportamento durante a leitura.</param>
      <param name="cancellationToken">Um token que pode ser usado para cancelar a operação de leitura.</param>
      <typeparam name="TValue">O tipo de destino do valor JSON.</typeparam>
      <returns>Uma representação <typeparamref name="TValue" /> do valor JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">O JSON é inválido.
- ou -
<typeparamref name="TValue" /> não é compatível com o JSON.
- ou -
Há dados restantes no fluxo.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte o valor de um tipo especificado em uma cadeia de caracteres JSON.</summary>
      <param name="value">O valor a ser convertido.</param>
      <param name="inputType">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options">Opções para controlar o comportamento de conversão.</param>
      <returns>A representação da cadeia de caracteres JSON do valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Grava a representação JSON do tipo especificado para o gravador fornecido.</summary>
      <param name="writer">Um gravador JSON no qual gravar.</param>
      <param name="value">O valor a ser convertido e gravado.</param>
      <param name="inputType">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options">Opções para controlar o comportamento de serialização.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte o valor de um tipo especificado por um parâmetro de tipo genérico em uma cadeia de caracteres JSON.</summary>
      <param name="value">O valor a ser convertido.</param>
      <param name="options">Opções para controlar o comportamento de serialização.</param>
      <typeparam name="TValue">O tipo do valor a ser serializado.</typeparam>
      <returns>Uma representação de cadeia de caracteres JSON do valor.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Grava a representação JSON de um tipo especificado por um parâmetro de tipo genérico no gravador fornecido.</summary>
      <param name="writer">Um gravador JSON no qual gravar.</param>
      <param name="value">O valor a ser convertido e gravado.</param>
      <param name="options">Opções para controlar o comportamento de serialização.</param>
      <typeparam name="TValue">O tipo do valor a ser serializado.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Converte de forma assíncrona o valor de um tipo especificado para texto JSON codificado em UTF-8 e o grava no fluxo especificado.</summary>
      <param name="utf8Json">O fluxo UTF-8 para gravação.</param>
      <param name="value">O valor a ser convertido.</param>
      <param name="inputType">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options">Opções para controlar o comportamento de serialização.</param>
      <param name="cancellationToken">Um token que pode ser usado para cancelar a operação de gravação.</param>
      <returns>Uma tarefa que representa a operação de gravação assíncrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>De maneira assíncrona, converte um valor de um tipo especificado por um parâmetro de tipo genérico para texto JSON codificado em UTF-8 e o grava em um fluxo.</summary>
      <param name="utf8Json">O fluxo UTF-8 para gravação.</param>
      <param name="value">O valor a ser convertido.</param>
      <param name="options">Opções para controlar o comportamento de serialização.</param>
      <param name="cancellationToken">Um token que pode ser usado para cancelar a operação de gravação.</param>
      <typeparam name="TValue">O tipo do valor a ser serializado.</typeparam>
      <returns>Uma tarefa que representa a operação de gravação assíncrona.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte um valor do tipo especificado em uma cadeia de caracteres JSON codificada como UTF-8 bytes.</summary>
      <param name="value">O valor a ser convertido.</param>
      <param name="inputType">O tipo do <paramref name="value" /> a ser convertido.</param>
      <param name="options">Opções para controlar o comportamento de conversão.</param>
      <returns>Uma representação da cadeia de caracteres JSON do valor codificada como bytes UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Converte o valor de um tipo especificado por um parâmetro de tipo genérico em uma cadeia de caracteres JSON codificada em bytes UTF-8.</summary>
      <param name="value">O valor a ser convertido.</param>
      <param name="options">Opções para controlar o comportamento de conversão.</param>
      <typeparam name="TValue">O tipo do valor.</typeparam>
      <returns>Uma representação da cadeia de caracteres JSON do valor codificada como bytes UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>Fornece opções a serem usadas com <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.Json.JsonSerializerOptions" /> .</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>Obtém ou define um valor que indica se uma vírgula extra é permitida (e ignorada) no final de uma lista de valores JSON em um objeto ou uma matriz no conteúdo JSON que está sendo desserializado.</summary>
      <returns>
        <see langword="true" /> se uma vírgula extra no final de uma lista de valores JSON em um objeto ou matriz for permitida (e ignorada); caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propriedade foi definida após a serialização ou desserialização.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>Obtém a lista de conversores definidos pelo usuário que foram registrados.</summary>
      <returns>A lista de conversores personalizados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>Obtém ou define o tamanho do buffer padrão, em bytes, a ser usado ao criar buffers temporários.</summary>
      <returns>O tamanho do buffer padrão em bytes.</returns>
      <exception cref="T:System.ArgumentException">O tamanho do buffer é menor que 1.</exception>
      <exception cref="T:System.InvalidOperationException">Esta propriedade foi definida após a serialização ou desserialização.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>Obtém ou define a política usada para converter o nome de uma chave <see cref="T:System.Collections.IDictionary" /> em outro formato, como minúsculas concatenadas.</summary>
      <returns>A política usada para converter um nome de <see cref="T:System.Collections.IDictionary" /> chave em outro formato.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>Obtém ou define o codificador a ser usado ao escapar cadeias de caracteres ou <see langword="null" /> para usar o codificador padrão.</summary>
      <returns>A codificação de caracteres JavaScript.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>Retorna o conversor para o tipo especificado.</summary>
      <param name="typeToConvert">O tipo para o qual retornar um conversor.</param>
      <returns>O primeiro conversor que dá suporte ao tipo fornecido ou, se não houver um conversor, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>Obtém ou define um valor que determina se os valores de <see langword="null" /> são ignorados durante a serialização e desserialização. O valor padrão é <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> ignorar valores nulos durante a serialização e desserialização; caso contrário, consulte langword = "false"/&gt;.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propriedade foi definida após a serialização ou desserialização.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>Obtém um valor que determina se as propriedades somente leitura são ignoradas durante a serialização. O valor padrão é <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> ignorar propriedades somente leitura durante a serialização; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propriedade foi definida após a serialização ou desserialização.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>Obtém ou define a profundidade máxima permitida ao serializar ou desserializar JSON, com o valor padrão de 0, indicando uma profundidade máxima de 64.</summary>
      <returns>A profundidade máxima permitida ao serializar ou desserializar JSON.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A profundidade máxima está definida como um valor negativo.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>Obtém ou define um valor que determina se o nome de uma propriedade usa uma comparação que não diferencia maiúsculas de minúsculas durante a desserialização. O valor padrão é <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> comparar nomes de propriedade usando a comparação que não diferencia maiúsculas de minúsculas; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>Obtém ou define um valor que especifica a política usada para converter o nome de uma propriedade em um objeto em outro formato, como minúsculas e maiúsculas concatenadas, ou <see langword="null" /> para manter os nomes de propriedade inalterados.</summary>
      <returns>Uma política de nomenclatura de propriedade ou <see langword="null" /> para deixar nomes de propriedade inalterados.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>Obtém ou define um valor que define como os comentários são tratados durante a desserialização.</summary>
      <returns>Um valor que indica se os comentários são permitidos, não permitidos ou ignorados.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propriedade foi definida após a serialização ou desserialização.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A enumeração de manipulação de comentário é definida como um valor não compatível (ou que não está dentro do intervalo de enumeração <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>Obtém ou define um valor que define se JSON deve usar reformatação automática. Por padrão, JSON é serializado sem nenhum espaço em branco extra.</summary>
      <returns>
        <see langword="true" /> se JSON deve ser bastante impresso na serialização; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propriedade foi definida após a serialização ou desserialização.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>Define os vários tokens JSON que compõem um texto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>O tipo de token é uma cadeia de caracteres de comentário.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>O tipo de token é o fim de uma matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>O tipo de token é o fim de um objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>O tipo de token é o literal JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>Não há nenhum valor (diferente de <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>O tipo de token é o literal JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>O tipo de token é um número JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>O tipo de token é um nome de propriedade JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>O tipo de token é o início de uma matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>O tipo de token é o início de um objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>O tipo de token é uma cadeia de caracteres JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>O tipo de token é o literal JSON true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>Especifica o tipo de dados de um valor JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>Uma matriz JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>O valor JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>O valor JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>Um número JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>Um objeto JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>Uma cadeia de caracteres JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>O valor JSON true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>Não há nenhum valor (diferente de <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>Permite que o usuário defina o comportamento personalizado ao gravar JSON usando o <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>Obtém ou define o codificador a ser usado ao escapar cadeias de caracteres ou <see langword="null" /> para usar o codificador padrão.</summary>
      <returns>O codificador de caracteres JavaScript usado para substituir o comportamento de escape.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>Obtém ou define um valor que indica se o <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve formatar a saída JSON, o que inclui o recuo dos tokens JSON aninhados, a adição de novas linhas e a adição de espaço em branco entre os nomes e valores de propriedade.</summary>
      <returns>
        <see langword="true" /> Formatar a saída JSON; <see langword="false" /> escrever sem nenhum espaço em branco extra. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>Obtém ou define um valor que indica se o <see cref="T:System.Text.Json.Utf8JsonWriter" /> deve ignorar a validação estrutural e permitir que o usuário grave um JSON inválido.</summary>
      <returns>
        <see langword="true" /> ignorar a validação estrutural e permitir JSON inválido; <see langword="false" /> gerar um <see cref="T:System.InvalidOperationException" /> em qualquer tentativa de gravar um JSON inválido.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>Fornece a classe base para atributos de serialização.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>Cria uma nova instância do <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>Converte um objeto ou valor de/para JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>Quando substituído em uma classe derivada, determina se a instância do conversor pode converter o tipo de objeto especificado.</summary>
      <param name="typeToConvert">O tipo de objeto a verificar se pode ser convertido por esta instância do conversor.</param>
      <returns>
        <see langword="true" /> se a instância puder converter o tipo de objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>Converte um objeto ou valor de/para JSON.</summary>
      <typeparam name="T">O tipo de objeto ou valor manipulado pelo conversor.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>Inicializa uma nova instância <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>Determina se é possível converter o tipo especificado.</summary>
      <param name="typeToConvert">O tipo com o qual comparar.</param>
      <returns>
        <see langword="true" /> se o tipo puder ser convertido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Lê e converte o JSON para o tipo <typeparamref name="T" />.</summary>
      <param name="reader">O leitor.</param>
      <param name="typeToConvert">O tipo a ser convertido.</param>
      <param name="options">Um objeto que especifica as opções de serialização a serem usadas.</param>
      <returns>O valor convertido.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>Grava um valor especificado como JSON.</summary>
      <param name="writer">O gravador no qual gravar.</param>
      <param name="value">O valor a ser convertido para JSON.</param>
      <param name="options">Um objeto que especifica as opções de serialização a serem usadas.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>Quando colocado em uma propriedade ou tipo, especifica o tipo de conversor a ser usado.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>Inicializa uma nova instância do <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> com o tipo de conversor especificado.</summary>
      <param name="converterType">O tipo do conversor.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>Obtém o tipo do <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, ou <see langword="null" /> se ele foi criado sem um tipo.</summary>
      <returns>O tipo do <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />ou <see langword="null" /> se ele foi criado sem um tipo.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>Quando substituído em uma classe derivada e <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> é <see langword="null" />, permite que a classe derivada crie um <see cref="T:System.Text.Json.Serialization.JsonConverter" /> para passar o estado adicional.</summary>
      <param name="typeToConvert">O tipo do conversor.</param>
      <returns>O conversor personalizado.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>É compatível com a conversão de vários tipos usando um padrão de fábrica.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>Quando substituído em uma classe derivada, inicializa uma nova instância da classe <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Cria um conversor para um tipo especificado.</summary>
      <param name="typeToConvert">O tipo tratado pelo conversor.</param>
      <param name="options">As opções de serialização a serem usadas.</param>
      <returns>Um conversor em que <typeparamref name="T" /> é compatível com <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>Quando colocadas em uma propriedade do tipo <see cref="T:System.Collections.Generic.IDictionary`2" />, todas as propriedades que não têm um membro correspondente são adicionadas a esse dicionário durante a desserialização e gravadas durante a serialização.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>Cria uma nova instância da classe <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>Impede que uma propriedade seja serializada ou desserializada.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>Inicializa uma nova instância do <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>Especifica o nome da propriedade que está presente no JSON ao serializar e desserializar. Isso substitui qualquer política de nomenclatura especificada por <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância de <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> com o nome de propriedade especificado.</summary>
      <param name="name">O nome da propriedade.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>Obtém o nome da propriedade.</summary>
      <returns>O nome da propriedade.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>Converte valores de enumeração de/para cadeias de caracteres.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>Inicializa uma instância da classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> com a política de nomenclatura padrão que permite valores inteiros.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>Inicializa uma instância da classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> com uma política de nomenclatura especificada e um valor que indica se são permitidos valores de enumeração indefinidos.</summary>
      <param name="namingPolicy">A política de nomenclatura opcional para gravar valores de enumeração.</param>
      <param name="allowIntegerValues">
        <see langword="true" /> para permitir valores de enumeração indefinidos; caso contrário, <see langword="false" />. Quando <see langword="true" />, se não for definido um valor de enumeração, será retornado como saída um número em vez de uma cadeia de caracteres.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>Determina se é possível converter o tipo especificado para uma enumeração.</summary>
      <param name="typeToConvert">O tipo a ser verificado.</param>
      <returns>
        <see langword="true" /> se o tipo puder ser convertido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Cria um conversor para o tipo especificado.</summary>
      <param name="typeToConvert">O tipo tratado pelo conversor.</param>
      <param name="options">As opções de serialização a serem usadas.</param>
      <returns>Um conversor em que <typeparamref name="T" /> é compatível com <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>Fornece uma API de alto desempenho para acesso somente leitura e somente de encaminhamento ao texto JSON codificado em UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa uma sequência somente leitura de texto codificado em UTF-8 e indica se a entrada contém todo o texto a ser processado.</summary>
      <param name="jsonData">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="isFinalBlock">
        <see langword="true" /> para indicar que a sequência de entrada contém todos os dados a serem processados; <see langword="false" /> para indicar que a extensão de entrada contém dados parciais com mais dados a serem seguidos.</param>
      <param name="state">Um objeto que contém o estado do leitor. Se esta for a primeira chamada para o construtor, passe o estado padrão; caso contrário, passe o valor da propriedade <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> da instância anterior de <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa uma sequência somente leitura de texto codificado em UTF-8 usando as opções especificadas.</summary>
      <param name="jsonData">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="options">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonReader" /> que é diferente do RFC do JSON (por exemplo, como manipular comentários ou a profundidade máxima permitida durante a leitura). Por padrão, o <see cref="T:System.Text.Json.Utf8JsonReader" /> segue estritamente o RFC do JSON; comentários no JSON são inválidos e a profundidade máxima é 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa um intervalo somente leitura de texto codificado em UTF-8 e indica se a entrada contém todo o texto a ser processado.</summary>
      <param name="jsonData">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="isFinalBlock">
        <see langword="true" /> para indicar que a sequência de entrada contém todos os dados a serem processados; <see langword="false" /> para indicar que a extensão de entrada contém dados parciais com mais dados a serem seguidos.</param>
      <param name="state">Um objeto que contém o estado do leitor. Se esta for a primeira chamada para o construtor, passe o estado padrão; caso contrário, passe o valor da propriedade <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> da instância anterior de <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Inicializa uma nova instância da estrutura <see cref="T:System.Text.Json.Utf8JsonReader" /> que processa um intervalo somente leitura de texto codificado em UTF-8 usando as opções especificadas.</summary>
      <param name="jsonData">O texto JSON codificado em UTF-8 a ser processado.</param>
      <param name="options">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonReader" /> que é diferente do RFC do JSON (por exemplo, como manipular comentários ou a profundidade máxima permitida durante a leitura). Por padrão, o <see cref="T:System.Text.Json.Utf8JsonReader" /> segue estritamente o RFC do JSON; comentários no JSON são inválidos e a profundidade máxima é 64.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>Obtém o número total de bytes consumidos até o momento por esta instância do <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns>O número total de bytes consumidos até agora.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>Obtém a profundidade do token atual.</summary>
      <returns>A profundidade do token atual.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>Obtém o estado de <see cref="T:System.Text.Json.Utf8JsonReader" /> atual para ser passado para um construtor <see cref="T:System.Text.Json.Utf8JsonReader" /> com mais dados.</summary>
      <returns>O estado atual do leitor.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>Lê o próximo valor do token JSON da fonte como um <see cref="T:System.Boolean" />.</summary>
      <returns>
        <see langword="true" /> se o <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> é <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> se o <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> é <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um valor booliano (ou seja, <see cref="F:System.Text.Json.JsonTokenType.True" /> ou <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>Analisa o valor do token JSON atual da fonte como um <see cref="T:System.Byte" />.</summary>
      <returns>O valor do token codificado em UTF-8.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.Byte.MinValue" /> ou maior que <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>Analisa o valor do token JSON atual da origem e decodifica a cadeia de caracteres JSON codificada em Base64 como uma matriz de bytes.</summary>
      <returns>A matriz de bytes que representa o valor do token JSON atual.</returns>
      <exception cref="T:System.InvalidOperationException">O tipo do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">O valor não é codificado como texto Base64; portanto, ele não pode ser decodificado em bytes.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>Analisa o valor do token JSON atual da origem como um comentário, transcodificando-o como um <see cref="T:System.String" />.</summary>
      <returns>O comentário que representa o valor do token JSON atual.</returns>
      <exception cref="T:System.InvalidOperationException">O token JSON não é um comentário.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.DateTime" />.</summary>
      <returns>O valor de data e hora, se o valor inteiro do token codificado em UTF-8 inteiro puder ser analisado com êxito.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON não pode ser lido como um <see cref="T:System.DateTime" />.
- ou -
O valor inteiro do token codificado em UTF-8 não pode ser analisado como um valor <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>O deslocamento de data e hora, se o valor inteiro do token codificado em UTF-8 puder ser analisado com êxito.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON não pode ser lido como um <see cref="T:System.DateTimeOffset" />.
- ou -
O valor inteiro do token codificado em UTF-8 não pode ser analisado como um valor <see cref="T:System.DateTimeOffset" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Decimal" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON representa um número menor que <see cref="F:System.Decimal.MinValue" /> ou maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Double" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON representa um número menor que <see cref="F:System.Double.MinValue" /> ou maior que <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Guid" />.</summary>
      <returns>O valor GUID, se o valor inteiro do token codificado em UTF-8 puder ser analisado com êxito.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON está em um formato sem suporte para um GUID.
- ou -
O valor inteiro do token codificado em UTF-8 não pode ser analisado como um valor <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>Analisa o valor do token JSON atual da fonte como um <see cref="T:System.Int16" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.Int16.MinValue" /> ou maior que <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Int32" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.Int32.MinValue" /> ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Int64" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.Int64.MinValue" /> ou maior que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>Analisa o valor do token JSON atual da fonte como um <see cref="T:System.SByte" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.SByte.MinValue" /> ou maior que <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.Single" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON representa um número menor que <see cref="F:System.Single.MinValue" /> ou maior que <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>Lê o próximo valor do token JSON da fonte, sem escape e transcodificado como uma cadeia de caracteres.</summary>
      <returns>O valor do token analisado como uma cadeia de caracteres ou, se <see langword="null" /> for <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" />, <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é uma cadeia de caracteres (ou seja, não é um <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> nem <see cref="F:System.Text.Json.JsonTokenType.Null" />).
- ou -
A cadeia de caracteres JSON contém bytes de UTF-8 ou alternativas de UTF-16 inválidos.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>Analisa o valor do token JSON atual da fonte como um <see cref="T:System.UInt16" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O formato numérico do valor do token JSON está incorreto (por exemplo, contém um valor fracionário ou está escrito em notação científica).
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.UInt16.MinValue" /> ou maior que <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.UInt32" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.UInt32.MinValue" /> ou maior que <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>Lê o próximo valor de token JSON da fonte e analisa-o para um <see cref="T:System.UInt64" />.</summary>
      <returns>O valor do token codificado em UTF-8 analisado para um <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">O valor do token JSON está no formato numérico incorreto. Por exemplo, ele contém um decimal ou é escrito em notação científica.
- ou -
O valor do token JSON representa um número menor que <see cref="F:System.UInt64.MinValue" /> ou maior que <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>Obtém um valor que indica qual propriedade de <c>Valor</c> deve ser usada para obter o valor do token.</summary>
      <returns>
        <see langword="true" /> se <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> deve ser usado para obter o valor do token; <see langword="false" /> se <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> deve ser usado em seu lugar.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>Obtém o modo dessa instância do <see cref="T:System.Text.Json.Utf8JsonReader" /> que indica se todos os dados JSON foram fornecidos ou se há mais dados a receber.</summary>
      <returns>
        <see langword="true" /> se o leitor foi construído com o span de entrada ou a sequência que contém os dados JSON inteiros a serem processados; <see langword="false" /> se o leitor foi construído com um Span ou uma sequência de entrada que pode conter dados JSON parciais com mais dados a serem seguidos.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>Obtém a <see cref="T:System.SequencePosition" /> atual dentro do ReadOnlySequence&lt;byte&gt; de entrada codificado em UTF-8 fornecido ou uma <see cref="T:System.SequencePosition" /> padrão se o struct <see cref="T:System.Text.Json.Utf8JsonReader" /> foi construído com um ReadOnlySpan&lt;byte&gt;.</summary>
      <returns>O <see cref="T:System.SequencePosition" /> atual no ReadOnlySequence de entrada codificada UTF-8 fornecido&lt;byte&gt; ou um <see cref="T:System.SequencePosition" /> padrão se o struct <see cref="T:System.Text.Json.Utf8JsonReader" /> foi construído com um&lt;de bytes de&gt;de ReadOnlySpan.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>Lê o próximo token JSON da fonte de entrada.</summary>
      <returns>
        <see langword="true" /> se o token foi lido com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException">Um token JSON inválido de acordo com o RFC do JSON foi encontrado.
- ou -
A profundidade atual excede o limite recursivo definido pela profundidade máxima.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>Ignora os filhos do token JSON atual.</summary>
      <exception cref="T:System.InvalidOperationException">O leitor recebeu dados parciais com mais dados a serem seguidos (ou seja, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> é <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException">Foi encontrado um token JSON inválido ao ignorar, de acordo com o RFC do JSON.
- ou -
A profundidade atual excede o limite recursivo definido pela profundidade máxima.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>Obtém o índice em que o último token JSON processado começa (dentro do texto de entrada codificado em UTF-8 fornecido), ignorando qualquer espaço em branco.</summary>
      <returns>O índice inicial do último token JSON processado dentro do texto de entrada codificado em UTF-8 fornecido.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>Obtém o tipo do último token JSON processado em texto JSON codificado em UTF-8.</summary>
      <returns>O tipo do último token JSON processado.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Byte" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Byte" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Tenta analisar o valor do token JSON atual da origem, decodifica a cadeia de caracteres JSON codificada em Base64 como uma matriz de bytes e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando é retornado, esse método contém a representação binária decodificada do texto Base64.</param>
      <returns>
        <see langword="true" /> se o valor do token inteiro for codificado como um texto Base64 válido e puder ser decodificado para bytes com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.DateTime" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.DateTime" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.DateTimeOffset" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.DateTimeOffset" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Decimal" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Decimal" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Double" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Double" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Guid" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Guid" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é uma <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Int16" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Int16" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Int32" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Int32" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Int64" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Int64" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.SByte" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.SByte" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.Single" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.Single" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.UInt16" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.UInt16" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.UInt32" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.UInt32" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>Tenta analisar o valor do token JSON atual da origem como um <see cref="T:System.UInt64" /> e retorna um valor que indica se a operação foi bem-sucedida.</summary>
      <param name="value">Quando este método retorna, ele contém o valor analisado.</param>
      <returns>
        <see langword="true" /> se o valor do token codificado em UTF-8 inteiro puder ser analisado com êxito para um valor <see cref="T:System.UInt64" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O valor do token JSON não é um <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>Tenta ignorar os filhos do token JSON atual.</summary>
      <returns>
        <see langword="true" /> se houver dados suficientes para que os filhos sejam ignorados com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException">Foi encontrado um token JSON inválido ao ignorar, de acordo com o RFC do JSON.
-ou-
A profundidade atual excede o limite recursivo definido pela profundidade máxima.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>Obtém o valor bruto do último token processado como uma fatia de ReadOnlySequence&lt;byte&gt; do conteúdo de entrada, somente se o token estiver contido em vários segmentos.</summary>
      <returns>Uma sequência somente leitura de byte.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>Obtém o valor bruto do último token processado como uma fatia de ReadOnlySpan&lt;byte&gt; do conteúdo de entrada, se o token couber em um único segmento ou se o leitor foi construído com um conteúdo JSON contido em um ReadOnlySpan&lt;byte&gt;.</summary>
      <returns>Uma extensão de somente leitura de bytes.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Compara o texto codificado em UTF-8 em um intervalo de bytes somente leitura com o valor do token JSON sem escape na origem e retorna um valor que indica se eles são correspondentes.</summary>
      <param name="utf8Text">O texto codificado em UTF-8 a ser comparado.</param>
      <returns>
        <see langword="true" /> se o valor do token JSON na origem corresponder ao texto de pesquisa codificado em UTF-8; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O token JSON não é uma cadeia de caracteres JSON (ou seja, não é <see cref="F:System.Text.Json.JsonTokenType.String" /> nem <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>Compara o texto em um intervalo de caracteres somente leitura com o valor do token JSON sem escape na origem e retorna um valor que indica se eles são correspondentes.</summary>
      <param name="text">O texto para comparação.</param>
      <returns>
        <see langword="true" /> se o valor do token JSON na origem corresponder ao texto de pesquisa; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O token JSON não é uma cadeia de caracteres JSON (ou seja, não é <see cref="F:System.Text.Json.JsonTokenType.String" /> nem <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>Compara o texto da cadeia de caracteres com o valor do token JSON sem escape na origem e retorna um valor que indica se eles são correspondentes.</summary>
      <param name="text">O texto para comparação.</param>
      <returns>
        <see langword="true" /> se o valor do token JSON na origem corresponder ao texto de pesquisa; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">O token JSON não é uma cadeia de caracteres JSON (ou seja, não é <see cref="F:System.Text.Json.JsonTokenType.String" /> nem <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>Fornece uma API de alto desempenho para gravação somente de encaminhamento e sem cache, de texto JSON codificado em UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> usando o <see cref="T:System.Buffers.IBufferWriter`1" /> especificado para gravar as opções de saída e de personalização.</summary>
      <param name="bufferWriter">O destino para gravar texto JSON.</param>
      <param name="options">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonWriter" />. Por padrão, ele grava JSON minimizado (sem espaços em branco extra) e valida que o JSON sendo gravado é estruturalmente válido de acordo com o RFC do JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> usando o fluxo especificado para gravar as opções de saída e de personalização.</summary>
      <param name="utf8Json">O destino para gravar texto JSON.</param>
      <param name="options">Define o comportamento personalizado do <see cref="T:System.Text.Json.Utf8JsonWriter" />. Por padrão, ele grava JSON minimizado (sem espaços em branco extra) e valida que o JSON sendo gravado é estruturalmente válido de acordo com o RFC do JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>Obtém o número total de bytes confirmados para a saída pela instância atual até o momento.</summary>
      <returns>O número total de bytes confirmados na saída pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> até agora.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>Obtém o número de bytes gravados pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> até o momento que ainda não foram liberados para a saída e confirmados.</summary>
      <returns>O número de bytes gravados até o momento pelo <see cref="T:System.Text.Json.Utf8JsonWriter" /> que ainda não foram liberados para a saída e confirmados.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>Obtém a profundidade do token atual.</summary>
      <returns>A profundidade do token atual.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>Confirma qualquer texto JSON restante que ainda não foi liberado e libera todos os recursos usados pela instância atual.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>Confirma de maneira assíncrona qualquer texto JSON restante que ainda não foi liberado e libera todos os recursos usados pela instância atual.</summary>
      <returns>Uma tarefa que representa a operação assíncrona de descarte.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>Confirma o texto JSON gravado até o momento, o que o torna visível para o destino de saída.</summary>
      <exception cref="T:System.ObjectDisposedException">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>Confirma de maneira assíncrona o texto JSON escrito até o momento, o que o torna visível para o destino de saída.</summary>
      <param name="cancellationToken">O token para monitorar quanto às solicitações de cancelamento. O valor padrão é <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Uma tarefa que representa a operação de liberação assíncrona.</returns>
      <exception cref="T:System.ObjectDisposedException">A instância foi descartada.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>Obtém o comportamento personalizado ao gravar JSON usando essa instância, que indica se a saída precisa ser formatada durante a gravação e se a validação estrutural de JSON deve ser ignorada e quais caracteres devem ser para escape.</summary>
      <returns>O comportamento personalizado dessa instância do gravador para formatação, validação e saída.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>Redefine o estado interno dessa instância para que ela possa ser reutilizada.</summary>
      <exception cref="T:System.ObjectDisposedException">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>Redefine o estado interno dessa instância para que ela possa ser reutilizada com uma nova instância de <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter">O destino para gravar texto JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>Redefine o estado interno dessa instância para que ela possa ser reutilizada com uma nova instância de <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json">O destino para gravar texto JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">A instância foi descartada.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome da propriedade e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome codificado em UTF-8 da propriedade a ser gravada.</param>
      <param name="bytes">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome da propriedade e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="bytes">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome da propriedade e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="bytes">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome da propriedade pré-codificada e o valor de bytes brutos (como uma cadeia de caracteres JSON codificada em Base64) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome codificado em JSON da propriedade a ser gravada.</param>
      <param name="bytes">Os dados binários a serem gravados como texto codificado Base64.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Grava o valor de bytes brutos como uma cadeia de caracteres JSON codificada em Base64 como um elemento de uma matriz JSON.</summary>
      <param name="bytes">Os dados binários a serem gravados como um elemento de cadeia de caracteres JSON codificada em Base64 de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um literal JSON true ou false como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>Grava um valor de <see cref="T:System.Boolean" /> (como um literal JSON true ou false) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um literal JSON true ou false como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>Grava um valor de texto UTF-8 como um comentário JSON.</summary>
      <param name="utf8Value">O valor codificado em UTF-8 a ser gravado como um comentário JSON entre /*..*/.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.
- ou -
<paramref name="utf8Value" /> contém um delimitador de comentário (ou seja, */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>Grava um valor de texto UTF-16 como um comentário JSON.</summary>
      <param name="value">O valor codificado em UTF-16 a ser gravado como um comentário JSON transcodificado em UTF-8 entre /*..*/.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.
- ou -
<paramref name="value" /> contém um delimitador de comentário (ou seja, */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>Grava um valor de texto de cadeia de caracteres como um comentário JSON.</summary>
      <param name="value">O valor codificado em UTF-16 a ser gravado como um comentário JSON transcodificado em UTF-8 entre /*..*/.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.
- ou -
<paramref name="value" /> contém um delimitador de comentário (ou seja, */).</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>Grava o fim de uma matriz JSON.</summary>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>Grava o fim de um objeto JSON.</summary>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>Grava o nome da propriedade pré-codificada e o literal JSON null como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>Grava o literal JSON null como um elemento de uma matriz JSON.</summary>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>Grava um nome de propriedade especificado como um intervalo de bytes somente leitura a um valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Decimal" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Double" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Int32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Int64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Single" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.UInt32" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.UInt64" /> (como um número JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como um número JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>Grava um valor de <see cref="T:System.Decimal" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>Grava um valor de <see cref="T:System.Double" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>Grava um valor de <see cref="T:System.Int32" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>Grava um valor de <see cref="T:System.Int64" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>Grava um valor de <see cref="T:System.Single" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>Grava um valor de <see cref="T:System.UInt32" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>Grava um valor de <see cref="T:System.UInt64" /> (como um número JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como um número JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome da propriedade UTF-8 (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>Grava o nome da propriedade (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>Grava o nome da propriedade (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>Grava o nome da propriedade pré-codificada (como uma cadeia de caracteres JSON) como a primeira parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>Grava o início de uma matriz JSON.</summary>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>Grava o início de uma matriz JSON com um nome de propriedade especificado como um intervalo de bytes somente leitura como a chave.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 da matriz JSON a ser gravada.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>Grava o início de uma matriz JSON com um nome de propriedade especificado como um intervalo de caracteres somente leitura como a chave.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 da matriz JSON a ser transcodificada e gravada como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>Grava o início de uma matriz JSON com um nome de propriedade especificado como uma cadeia de caracteres como a chave.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 da matriz JSON a ser transcodificada e gravada como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>Grava o início de uma matriz JSON com um nome de propriedade pré-codificada como a chave.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON da matriz JSON a ser transcodificada e gravada como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON excedeu a profundidade máxima de 1.000.
- ou -
A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>Grava o início de um objeto JSON.</summary>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>Grava o início de um objeto JSON com um nome de propriedade especificado como um intervalo de bytes somente leitura como a chave.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>Grava o início de um objeto JSON com um nome de propriedade especificado como um intervalo de caracteres somente leitura como a chave.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>Grava o início de um objeto JSON com um nome de propriedade especificado como uma cadeia de caracteres como a chave.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON ultrapassa a profundidade máxima de 1.000.
- ou -
A validação está habilitada e esta operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>Grava o início de um objeto JSON com um nome de propriedade pré-codificada como a chave.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">A profundidade do JSON excedeu a profundidade máxima de 1.000.
- ou -
A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>Grava o nome de uma propriedade UTF-8 e um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>Grava o nome de uma propriedade UTF-8 e um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>Grava o nome de uma propriedade UTF-8 e um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome de uma propriedade UTF-8 e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="utf8Value">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>Grava o nome de uma propriedade UTF-8 e o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>Grava o nome de uma propriedade UTF-8 e o valor de texto de uma cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>Grava o nome da propriedade UTF-8 e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="utf8PropertyName">O nome da propriedade codificado em UTF-8 do objeto JSON a ser gravado.</param>
      <param name="value">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada, e este método resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>Grava um nome de propriedade especificado como um intervalo de caracteres somente leitura a um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome de uma propriedade UTF-16 e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="utf8Value">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Grava o nome de uma propriedade UTF-16 e o valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Grava o nome de uma propriedade UTF-16 e o valor de texto de uma cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>Grava o nome da propriedade e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="utf8Value">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de texto UTF-16 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>Grava um nome de propriedade especificado como uma cadeia de caracteres e um valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em UTF-16 do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor codificado em UTF-16 a ser gravado como uma cadeia de caracteres JSON transcodificada em codificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome ou o valor da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>Grava o nome da propriedade e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O nome da propriedade especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Grava o nome da propriedade pré-codificada e o valor de texto UTF-8 (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="utf8Value">O valor codificado em UTF-8 a ser gravado como uma cadeia de caracteres JSON como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>Grava o nome da propriedade pré-codificada e o valor de texto (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON transcodificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>Grava o nome da propriedade pré-codificada e o valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON transcodificado em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>Grava o nome da propriedade pré-codificada e o valor pré-codificado (como uma cadeia de caracteres JSON) como parte de um par nome/valor de um objeto JSON.</summary>
      <param name="propertyName">O nome da propriedade codificado em JSON do objeto JSON a ser transcodificado e gravado como UTF-8.</param>
      <param name="value">O valor codificado em JSON a ser gravado como uma cadeia de caracteres JSON transcodificada em UTF-8 como parte do par nome/valor.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>Grava um valor de <see cref="T:System.DateTime" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>Grava um valor de <see cref="T:System.DateTimeOffset" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>Grava um valor de <see cref="T:System.Guid" /> (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor a ser gravado como uma cadeia de caracteres JSON como um elemento de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação resultaria na escrita de JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Grava um valor de texto UTF-8 (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="utf8Value">O valor codificado em UTF-8 a ser gravado como um elemento de cadeia de caracteres JSON de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>Grava um valor de texto UTF-16 (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor codificado em UTF-16 a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>Grava um valor de texto de cadeia de caracteres (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor codificado em UTF-16 a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</param>
      <exception cref="T:System.ArgumentException">O valor especificado é muito grande.</exception>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>Grava o valor de texto pré-codificado (como uma cadeia de caracteres JSON) como um elemento de uma matriz JSON.</summary>
      <param name="value">O valor codificado em JSON a ser gravado como um elemento de cadeia de caracteres JSON transcodificado em UTF-8 de uma matriz JSON.</param>
      <exception cref="T:System.InvalidOperationException">A validação está habilitada e a operação de gravação produziria JSON inválido.</exception>
    </member>
  </members>
</doc>
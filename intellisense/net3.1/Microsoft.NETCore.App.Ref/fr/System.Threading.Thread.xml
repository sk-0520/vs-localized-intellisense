<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>Encapsule un emplacement mémoire pour stocker des données locales. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>Vérifie que les ressources sont libérées et que toute autre opération de nettoyage est effectuée quand le garbage collector récupère l'objet <see cref="T:System.LocalDataStoreSlot" />.</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>Spécifie l'état apartment (cloisonné) de <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <see cref="T:System.Threading.Thread" /> crée et entre un apartment (cloisonné) MTA (multithreaded apartment).</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <see cref="T:System.Threading.Thread" /> crée et entre un thread cloisonné STA (single thread apartment).</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>La propriété <see cref="P:System.Threading.Thread.ApartmentState" /> n'a pas été définie.</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>Fournit des méthodes pour définir et capturer la pile compressée sur le thread actuel. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>Capture la pile compressée du thread actuel.</summary>
      <returns>Objet <see cref="T:System.Threading.CompressedStack" />.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>Crée une copie de la pile compressée en cours.</summary>
      <returns>Objet <see cref="T:System.Threading.CompressedStack" /> représentant la pile compressée en cours.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>Obtient la pile compressée pour le thread actuel.</summary>
      <returns>
        <see cref="T:System.Threading.CompressedStack" /> pour le thread actuel.</returns>
      <exception cref="T:System.Security.SecurityException">Un appelant dans la chaîne d'appel ne dispose pas de l'autorisation requise pour accéder à du code non managé.

ou -
La demande de <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> a échoué.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Définit l'objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec les informations de contexte logiques nécessaires à la recréation d'une instance de ce contexte d'exécution.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à remplir à l'aide des informations de sérialisation.</param>
      <param name="context">Structure <see cref="T:System.Runtime.Serialization.StreamingContext" /> représentant le contexte de destination de la sérialisation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>Exécute une méthode dans la pile compressée spécifiée sur le thread actuel.</summary>
      <param name="compressedStack">
        <see cref="T:System.Threading.CompressedStack" /> à définir.</param>
      <param name="callback">
        <see cref="T:System.Threading.ContextCallback" /> représentant la méthode à exécuter dans le contexte de sécurité spécifié.</param>
      <param name="state">Objet à passer à la méthode de rappel.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> est <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Représente la méthode qui s’exécute sur un élément <see cref="T:System.Threading.Thread" />.</summary>
      <param name="obj">Objet qui contient les données de la procédure thread.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Crée et contrôle un thread, définit sa priorité et obtient son état.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />, en spécifiant un délégué qui permet à un objet d'être passé au thread quand le thread est démarré.</summary>
      <param name="start">Délégué qui représente les méthodes à appeler au début de l'exécution de ce thread.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />, en spécifiant un délégué qui permet à un objet d'être passé au thread quand le thread est démarré et en spécifiant la taille de pile maximale pour le thread.</summary>
      <param name="start">Délégué <see cref="T:System.Threading.ParameterizedThreadStart" /> qui représente les méthodes à appeler au début de l'exécution de ce thread.</param>
      <param name="maxStackSize">Taille de pile maximale, en octets, à utiliser par le thread, ou 0 pour utiliser la taille de pile maximale par défaut spécifiée dans l'en-tête pour le fichier exécutable.
Important   Pour le code partiellement fiable, <paramref name="maxStackSize" /> est ignoré s’il est supérieur à la taille de la pile par défaut. Aucune exception n'est levée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" /> .</summary>
      <param name="start">Délégué <see cref="T:System.Threading.ThreadStart" /> qui représente les méthodes à appeler au début de l'exécution de ce thread.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="start" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Thread" />, en spécifiant la taille de pile maximale pour le thread.</summary>
      <param name="start">Délégué <see cref="T:System.Threading.ThreadStart" /> qui représente les méthodes à appeler au début de l'exécution de ce thread.</param>
      <param name="maxStackSize">Taille de pile maximale, en octets, à utiliser par le thread, ou 0 pour utiliser la taille de pile maximale par défaut spécifiée dans l'en-tête pour le fichier exécutable.
Important   Pour le code partiellement fiable, <paramref name="maxStackSize" /> est ignoré s’il est supérieur à la taille de la pile par défaut. Aucune exception n'est levée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> est inférieur à zéro.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>Déclenche <see cref="T:System.Threading.ThreadAbortException" /> dans le thread sur lequel l'appel a lieu pour commencer le processus d'arrêt du thread. L'appel de cette méthode arrête généralement le thread.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core uniquement : ce membre n’est pas pris en charge.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant ne possède pas l'autorisation requise.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Le thread en cours d’abandon est actuellement suspendu.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>Déclenche une <see cref="T:System.Threading.ThreadAbortException" /> dans le thread sur lequel l'appel a lieu pour commencer le processus d'arrêt du thread, tout en fournissant des informations sur les exceptions relatives à l'arrêt du thread. L'appel de cette méthode arrête généralement le thread.</summary>
      <param name="stateInfo">Objet contenant des informations spécifiques à l'application, telles que l'état, qui peuvent être utilisées par le thread en cours d'abandon.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core uniquement : ce membre n’est pas pris en charge.</exception>
      <exception cref="T:System.Security.SecurityException">L'appelant ne possède pas l'autorisation requise.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Le thread en cours d’abandon est actuellement suspendu.</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>Alloue sur tous les threads un emplacement de données sans nom. Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <returns>Emplacement de données nommé alloué sur tous les threads.</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>Alloue sur tous les threads un emplacement de données nommé. Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nom de l'emplacement de données à allouer.</param>
      <returns>Emplacement de données nommé alloué sur tous les threads.</returns>
      <exception cref="T:System.ArgumentException">Un emplacement de données portant le nom spécifié existe déjà.</exception>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>Obtient ou définit l'état de cloisonnement de ce thread.</summary>
      <returns>Une des valeurs de <see cref="T:System.Threading.ApartmentState" />. La valeur initiale est <see langword="Unknown" />.</returns>
      <exception cref="T:System.ArgumentException">Une tentative est effectuée pour définir cette propriété sur un état qui n’est pas un état de cloisonnement valide (un état autre que celui de thread unique cloisonné (<see langword="STA" />) ou de multithread cloisonné (<see langword="MTA" />)).</exception>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>Avertit un hôte que l'exécution est sur le point d'entrer dans une zone de code dans laquelle les effets d'un abandon de thread ou d'une exception non gérée peuvent compromettre d'autres tâches dans le domaine d'application.</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>Avertit un hôte que le code managé est sur le point d'exécuter des instructions qui dépendent de l'identité du thread du système d'exploitation physique actuel.</summary>
      <exception cref="T:System.Security.SecurityException">L'appelant ne possède pas l'autorisation requise.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Obtient ou définit la culture du thread actuel.</summary>
      <returns>Objet qui représente la culture du thread actuel.</returns>
      <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">.NET Core uniquement : la lecture ou l’écriture de la culture d’un thread à partir d’un autre thread n’est pas prise en charge.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>Obtient ou définit le principal actuel du thread (pour une sécurité basée sur les rôles).</summary>
      <returns>Valeur <see cref="T:System.Security.Principal.IPrincipal" /> représentant le contexte de sécurité.</returns>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation nécessaire pour définir le principal.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Obtient le thread en cours d'exécution.</summary>
      <returns>
        <see cref="T:System.Threading.Thread" /> constituant la représentation du thread en cours d'exécution.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Obtient ou définit la culture actuelle utilisée par le Gestionnaire de ressources pour rechercher des ressources spécifiques à la culture au moment de l'exécution.</summary>
      <returns>Objet qui représente la culture actuelle.</returns>
      <exception cref="T:System.ArgumentNullException">La propriété est définie sur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La propriété a la valeur d’un nom de culture qui ne peut pas être utilisé pour localiser un fichier de ressources. Les noms de fichiers des ressources doivent inclure uniquement des lettres, des chiffres, des traits d’union ou des traits de soulignement.</exception>
      <exception cref="T:System.InvalidOperationException">.NET Core uniquement : la lecture ou l’écriture de la culture d’un thread à partir d’un autre thread n’est pas prise en charge.</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>Désactive le nettoyage automatique des wrappers RCW (Runtime Callable Wrapper) pour le thread actuel.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>Avertit un hôte que l’exécution est sur le point d’entrer dans une zone de code dans laquelle les effets d’un abandon de thread ou d’une exception non gérée sont limités à la tâche actuelle.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>Avertit un hôte que le code managé a terminé l'exécution des instructions qui dépendent de l'identité du thread du système d'exploitation physique actuel.</summary>
      <exception cref="T:System.Security.SecurityException">L'appelant ne possède pas l'autorisation requise.</exception>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>Obtient un objet <see cref="T:System.Threading.ExecutionContext" /> qui contient des informations relatives aux divers contextes du thread actuel.</summary>
      <returns>Objet <see cref="T:System.Threading.ExecutionContext" /> qui consolide des informations de contexte pour le thread actuel.</returns>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>Vérifie que les ressources sont libérées et que toute autre opération de nettoyage est effectuée quand le garbage collector récupère l'objet <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>Élimine l'association entre un nom et un emplacement pour tous les threads du processus. Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nom de l'emplacement de données à libérer.</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>Retourne une valeur <see cref="T:System.Threading.ApartmentState" /> qui indique l'état de cloisonnement.</summary>
      <returns>Une des valeurs <see cref="T:System.Threading.ApartmentState" /> qui indique l'état de cloisonnement du thread managé. La valeur par défaut est <see cref="F:System.Threading.ApartmentState.Unknown" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>Retourne un objet <see cref="T:System.Threading.CompressedStack" /> qui peut être utilisé pour capturer la pile pour le thread actuel.</summary>
      <returns>None.</returns>
      <exception cref="T:System.InvalidOperationException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId">
      <summary>Obtient un ID utilisé pour indiquer le processeur sur lequel le thread actuel s’exécute.</summary>
      <returns>Entier représentant l’ID de processeur mis en cache.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>Récupère la valeur de l'emplacement spécifié sur le thread actif, dans le domaine actuel du thread actif. Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">
        <see cref="T:System.LocalDataStoreSlot" /> à partir duquel obtenir la valeur.</param>
      <returns>Valeur récupérée.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Retourne le domaine actuel dans lequel le thread actif est en cours d'exécution.</summary>
      <returns>
        <see cref="T:System.AppDomain" /> représentant le domaine d'application actuel du thread en cours d'exécution.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>Retourne un identificateur unique de domaine d'application.</summary>
      <returns>Entier signé 32 bits identifiant de manière unique le domaine d'application.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Retourne un code de hachage pour le thread actuel.</summary>
      <returns>Valeur de code de hachage entier.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>Recherche un emplacement de données nommé. Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nom de l'emplacement de données local.</param>
      <returns>
        <see cref="T:System.LocalDataStoreSlot" /> alloué pour ce thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>Interrompt un thread dont l'état est <see cref="F:System.Threading.ThreadState.WaitSleepJoin" />.</summary>
      <exception cref="T:System.Security.SecurityException">L’appelant ne possède pas le <see cref="T:System.Security.Permissions.SecurityPermission" /> nécessaire.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Obtient une valeur indiquant l'état de l'exécution du thread actuel.</summary>
      <returns>
        <see langword="true" /> si ce thread a été démarré et s’il ne s’est pas arrêté normalement ou s’il a été abandonné ; Sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Obtient ou définit une valeur indiquant si le thread est un thread d'arrière-plan ou non.</summary>
      <returns>
        <see langword="true" /> si ce thread est ou doit devenir un thread d'arrière-plan ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.ThreadStateException">Le thread est inactif.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>Obtient une valeur indiquant si un thread appartient au pool de threads managés ou non.</summary>
      <returns>
        <see langword="true" /> si ce thread appartient au pool de threads managés ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Bloque le thread appelant jusqu’à ce que le thread représenté par cette instance s’arrête, tout en continuant d’exécuter le pompage COM et <see langword="SendMessage" /> standard.</summary>
      <exception cref="T:System.Threading.ThreadStateException">L’appelant a tenté de joindre un thread dont l’état est <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">Le thread est interrompu lors de l’attente.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Bloque le thread appelant jusqu'à ce que le thread représenté par cette instance s'arrête ou que la durée spécifiée soit écoulée, tout en continuant d'exécuter le pompage COM et SendMessage standard.</summary>
      <param name="millisecondsTimeout">Nombre de millisecondes à attendre l'arrêt du thread.</param>
      <returns>
        <see langword="true" /> si le thread s'est arrêté ; <see langword="false" /> s'il ne s'est pas arrêté après l'expiration du délai spécifié par le paramètre <paramref name="millisecondsTimeout" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur de <paramref name="millisecondsTimeout" /> est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> en millisecondes.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Le thread n’a pas été démarré.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" /> est inférieur à -1 (Timeout.Infinite).</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">Le thread a été interrompu lors de l’attente.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>Bloque le thread appelant jusqu'à ce que le thread représenté par cette instance s'arrête ou que la durée spécifiée soit écoulée, tout en continuant d'exécuter le pompage COM et SendMessage standard.</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" /> ayant pour valeur la durée à attendre l'arrêt du thread.</param>
      <returns>
        <see langword="true" /> si le thread s'est arrêté ; <see langword="false" /> s'il ne s'est pas arrêté après l'expiration du délai spécifié par le paramètre <paramref name="timeout" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur de <paramref name="timeout" /> est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> en millisecondes, ou est supérieure à <see cref="F:System.Int32.MaxValue" /> millisecondes.</exception>
      <exception cref="T:System.Threading.ThreadStateException">L’appelant a tenté de joindre un thread dont l’état est <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Obtient un identificateur unique pour le thread managé actuel.</summary>
      <returns>Entier représentant un identificateur unique pour ce thread managé.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Synchronise l'accès à la mémoire comme suit : le processeur qui exécute le thread actuel ne peut pas réorganiser les instructions de sorte que les accès à la mémoire antérieurs à l'appel de <see cref="M:System.Threading.Thread.MemoryBarrier" /> s'exécutent après les accès à la mémoire postérieurs à l'appel de <see cref="M:System.Threading.Thread.MemoryBarrier" />.</summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Obtient ou définit le nom du thread.</summary>
      <returns>Chaîne contenant le nom du thread ou <see langword="null" /> si aucun nom n'a été défini.</returns>
      <exception cref="T:System.InvalidOperationException">Une opération ensembliste a été demandée, mais la propriété <see langword="Name" /> a déjà été définie.</exception>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>Obtient ou définit une valeur indiquant la priorité de planification d'un thread.</summary>
      <returns>Une des valeurs de <see cref="T:System.Threading.ThreadPriority" />. La valeur par défaut est <see cref="F:System.Threading.ThreadPriority.Normal" />.</returns>
      <exception cref="T:System.Threading.ThreadStateException">Le thread a atteint un état final, tel que <see cref="F:System.Threading.ThreadState.Aborted" />.</exception>
      <exception cref="T:System.ArgumentException">La valeur spécifiée pour une opération set n’est pas une valeur <see cref="T:System.Threading.ThreadPriority" /> valide.</exception>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>Annule un <see cref="M:System.Threading.Thread.Abort(System.Object)" /> demandé pour le thread actuel.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core uniquement : ce membre n’est pas pris en charge.</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" /> n’a pas été appelé sur le thread actuel.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant n’a pas l’autorisation de sécurité requise pour le thread actuel.</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>Reprend un thread qui a été suspendu.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core uniquement : ce membre n’est pas pris en charge.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Le thread n’a pas été démarré, est inactif ou n’est pas dans l’état interrompu.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant ne possède pas le <see cref="T:System.Security.Permissions.SecurityPermission" /> nécessaire.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>Définit l'état de cloisonnement d'un thread avant qu'il ne soit démarré.</summary>
      <param name="state">Nouvel état de cloisonnement.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core uniquement : ce membre n’est pas pris en charge sur les plateformes macOS et Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> n’est pas un état de cloisonnement valide.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Le thread a déjà été démarré.</exception>
      <exception cref="T:System.InvalidOperationException">L’état de cloisonnement a déjà été initialisé.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>Applique une <see cref="T:System.Threading.CompressedStack" /> capturée au thread actuel.</summary>
      <param name="stack">Objet <see cref="T:System.Threading.CompressedStack" /> à appliquer au thread actuel.</param>
      <exception cref="T:System.InvalidOperationException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>Définit les données dans l'emplacement spécifié sur le thread en cours d'exécution, pour le domaine actuel de ce thread. Pour de meilleures performances, utilisez à la place les champs marqués avec l'attribut <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">
        <see cref="T:System.LocalDataStoreSlot" /> dans lequel définir la valeur.</param>
      <param name="data">Valeur à définir.</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Suspend le thread actuel pendant le nombre spécifié de millisecondes.</summary>
      <param name="millisecondsTimeout">Nombre de millisecondes pendant lesquelles le thread est suspendu. Si la valeur de l'argument <paramref name="millisecondsTimeout" /> est égale à zéro, le thread abandonne le reste de sa tranche de temps à n'importe quel thread de priorité égale prêt à être exécuté. S'il n'existe pas d'autres threads de priorité égale prêts à être exécutés, l'exécution du thread actuel n'est pas suspendue.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur du délai d’attente est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Suspend le thread actuel pendant la durée spécifiée.</summary>
      <param name="timeout">Durée pendant laquelle le thread est suspendu. Si la valeur de l’argument <paramref name="millisecondsTimeout" /> est <see cref="F:System.TimeSpan.Zero" />, le thread abandonne le reste de sa tranche de temps à n’importe quel thread de priorité égale prêt à être exécuté. S'il n'existe pas d'autres threads de priorité égale prêts à être exécutés, l'exécution du thread actuel n'est pas suspendue.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur de <paramref name="timeout" /> est négative et n’est pas égale à <see cref="F:System.Threading.Timeout.Infinite" /> en millisecondes, ou est supérieure à <see cref="F:System.Int32.MaxValue" /> millisecondes.</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Provoque l'attente d'un thread pendant le nombre de fois défini par le paramètre <paramref name="iterations" />.</summary>
      <param name="iterations">Entier signé 32 bits qui définit le temps pendant lequel un thread doit attendre.</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Provoque le changement, par le système d'exploitation, de l'état de l'instance actuelle en <see cref="F:System.Threading.ThreadState.Running" />.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Le thread a déjà été démarré.</exception>
      <exception cref="T:System.OutOfMemoryException">La mémoire disponible est insuffisante pour démarrer ce thread.</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Provoque le changement, par le système d'exploitation, de l'état de l'instance actuelle en <see cref="F:System.Threading.ThreadState.Running" />, et fournit éventuellement un objet contenant les données que la méthode exécutée par le thread doit utiliser.</summary>
      <param name="parameter">Objet contenant les données que la méthode exécutée par le thread doit utiliser.</param>
      <exception cref="T:System.Threading.ThreadStateException">Le thread a déjà été démarré.</exception>
      <exception cref="T:System.OutOfMemoryException">La mémoire disponible est insuffisante pour démarrer ce thread.</exception>
      <exception cref="T:System.InvalidOperationException">Ce thread a été créé à l’aide d’un délégué <see cref="T:System.Threading.ThreadStart" /> au lieu d’un délégué <see cref="T:System.Threading.ParameterizedThreadStart" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>Suspend le thread ou, s'il est déjà suspendu, n'a aucun effet.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core uniquement : ce membre n’est pas pris en charge.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Le thread n’a pas été démarré ou est inactif.</exception>
      <exception cref="T:System.Security.SecurityException">L’appelant ne possède pas le <see cref="T:System.Security.Permissions.SecurityPermission" /> nécessaire.</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Obtient une valeur contenant les états du thread actuel.</summary>
      <returns>Une des valeurs <see cref="T:System.Threading.ThreadState" /> indiquant l'état du thread actuel. La valeur initiale est <see cref="F:System.Threading.ThreadState.Unstarted" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>Définit l'état de cloisonnement d'un thread avant qu'il ne soit démarré.</summary>
      <param name="state">Nouvel état de cloisonnement.</param>
      <returns>
        <see langword="true" /> si l'état de cloisonnement est défini ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core uniquement : ce membre n’est pas pris en charge sur les plateformes macOS et Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> n’est pas un état de cloisonnement valide.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Le thread a démarré et s’est arrêté, ou l’appel n’est pas effectué depuis le contexte du thread pendant que le thread est en cours d’exécution.</exception>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>Lit la valeur d'un champ. Il s'agit de la dernière valeur écrite par un processeur d'un ordinateur, quel que soit le nombre de processeurs ou l'état du cache de processeurs.</summary>
      <param name="address">Champ à lire.</param>
      <returns>Dernière valeur écrite dans le champ par un processeur.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>Écrit immédiatement une valeur dans un champ pour que la valeur soit visible pour tous les processeurs de l'ordinateur.</summary>
      <param name="address">Champ dans lequel la valeur doit être écrite.</param>
      <param name="value">Valeur à écrire.</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>Oblige le thread appelant à céder l'exécution à un autre thread prêt à s'exécuter sur le processeur actuel. Le système d'exploitation sélectionne le thread auquel l'exécution doit être cédée.</summary>
      <returns>
        <see langword="true" /> si le système d'exploitation a basculé l'exécution vers un autre thread ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>Exception levée lors d'un appel adressé à la méthode <see cref="M:System.Threading.Thread.Abort(System.Object)" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>Obtient un objet contenant des informations spécifiques de l'application et liées à l'abandon de thread.</summary>
      <returns>Objet contenant des informations spécifiques de l'application.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>Fournit des données pour l'événement <see cref="E:System.Windows.Forms.Application.ThreadException" />.</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadExceptionEventArgs" />.</summary>
      <param name="t">
        <see cref="T:System.Exception" /> survenue.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>Obtient le <see cref="T:System.Exception" /> qui s'est produit.</summary>
      <returns>
        <see cref="T:System.Exception" /> survenue.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>Représente la méthode qui gérera l’événement <see cref="E:System.Windows.Forms.Application.ThreadException" /> d’un <see cref="T:System.Windows.Forms.Application" />.</summary>
      <param name="sender">Source de l'événement.</param>
      <param name="e">
        <see cref="T:System.Threading.ThreadExceptionEventArgs" /> qui contient les données d'événement.</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>Exception levée lorsque l'interruption survient alors que <see cref="T:System.Threading.Thread" />est en état d'attente.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadInterruptedException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadInterruptedException" /> avec des données sérialisées.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles relatives à la source ou à la destination.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadInterruptedException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadInterruptedException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>Spécifie la priorité de planification de <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>Il est possible de planifier <see cref="T:System.Threading.Thread" /> après les threads de priorité <see langword="Highest" /> et avant les threads de priorité <see langword="Normal" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>Il est possible de planifier <see cref="T:System.Threading.Thread" /> après les threads de priorité <see langword="Normal" /> et avant les threads de priorité <see langword="Lowest" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>Il est possible de planifier <see cref="T:System.Threading.Thread" /> avant les threads de toute autre priorité.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>Il est possible de planifier <see cref="T:System.Threading.Thread" /> après les threads de toute autre priorité.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>Il est possible de planifier <see cref="T:System.Threading.Thread" /> après les threads de priorité <see langword="AboveNormal" /> et avant les threads de priorité <see langword="BelowNormal" />. Par défaut, les threads ont une priorité <see langword="Normal" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Représente la méthode qui s’exécute sur un élément <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>Exception levée lorsqu'une erreur se produit dans un thread managé après le démarrage du thread de système d'exploitation sous-jacent, mais avant que le thread soit prêt à exécuter le code utilisateur.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Spécifie les états d'exécution de <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>L'état du thread inclut <see cref="F:System.Threading.ThreadState.AbortRequested" /> et le thread est à présent inactif ; toutefois, son état n'est pas encore passé à <see cref="F:System.Threading.ThreadState.Stopped" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>La méthode <see cref="M:System.Threading.Thread.Abort(System.Object)" /> a été appelée sur le thread, mais ce dernier n'a pas encore reçu <see cref="T:System.Threading.ThreadAbortException" /> en attente qui tentera de l'arrêter.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>Le thread est exécuté en tant que thread d'arrière-plan, par opposition à un thread de premier plan. Cet état est contrôlé par définition de la propriété <see cref="P:System.Threading.Thread.IsBackground" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>Le thread a été démarré et n’est pas encore arrêté.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>Le thread s'est arrêté.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>Une demande d'arrêt du thread est en cours. Ceci est exclusivement destiné à un usage interne.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>Le thread a été suspendu.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>Une demande de suspension du thread est en cours.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>La méthode <see cref="M:System.Threading.Thread.Start" /> n'a pas été appelée sur le thread.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>Le thread est bloqué. Cela peut résulter de l’appel de <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> ou <see cref="M:System.Threading.Thread.Join" />, d’une demande de verrouillage (par exemple l’appel de <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> ou <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />) ou de l’attente d’un objet de synchronisation de threads tel que <see cref="T:System.Threading.ManualResetEvent" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>Exception qui est levée lorsque <see cref="T:System.Threading.Thread" /> est dans un état <see cref="P:System.Threading.Thread.ThreadState" /> non valide pour l'appel de méthode.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadStateException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadStateException" /> avec des données sérialisées.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles relatives à la source ou à la destination.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadStateException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.ThreadStateException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="innerException">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Channels</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Channels.BoundedChannelFullMode">
      <summary>Spécifie le comportement à utiliser lors de l’écriture vers un canal limité qui est déjà plein.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropNewest">
      <summary>Supprime et ignore l’élément le plus récent dans le canal afin de libérer de l’espace pour l’élément en cours d’écriture.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropOldest">
      <summary>Supprime et ignore l’élément le plus ancien dans le canal afin de libérer de l’espace pour l’élément en cours d’écriture.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropWrite">
      <summary>Supprime l’élément en cours d’écriture.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.Wait">
      <summary>Attend que de l’espace soit disponible afin de terminer l’opération d’écriture.</summary>
    </member>
    <member name="T:System.Threading.Channels.BoundedChannelOptions">
      <summary>Fournit des options qui contrôlent le comportement des instances <see cref="T:System.Threading.Channels.Channel`1" /> délimitées.</summary>
    </member>
    <member name="M:System.Threading.Channels.BoundedChannelOptions.#ctor(System.Int32)">
      <summary>Initialise les options.</summary>
      <param name="capacity">Nombre maximal d'éléments que le canal limité peut stocker.</param>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.Capacity">
      <summary>Obtient ou définit le nombre maximal d'éléments que le canal limité peut stocker.</summary>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.FullMode">
      <summary>Obtient ou définit le comportement induit par les opérations d’écriture lorsque le canal est plein.</summary>
    </member>
    <member name="T:System.Threading.Channels.Channel">
      <summary>Fournit des méthodes statiques pour la création de canaux.</summary>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Int32)">
      <summary>Crée un canal avec la capacité maximale spécifiée.</summary>
      <param name="capacity">Nombre maximal d'éléments que le canal peut stocker.</param>
      <typeparam name="T">Spécifie le type de données dans le canal.</typeparam>
      <returns>Le canal créé.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Threading.Channels.BoundedChannelOptions)">
      <summary>Crée un canal avec la capacité maximale spécifiée.</summary>
      <param name="options">Options qui conditionnent le comportement du canal.</param>
      <typeparam name="T">Spécifie le type de données dans le canal.</typeparam>
      <returns>Le canal créé.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1">
      <summary>Crée un canal illimité utilisable par un nombre quelconque de lecteurs et d’enregistreurs simultanément.</summary>
      <typeparam name="T">Type de données dans le canal.</typeparam>
      <returns>Le canal créé.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1(System.Threading.Channels.UnboundedChannelOptions)">
      <summary>Crée un canal illimité conditionné par les options fournies.</summary>
      <param name="options">Options qui conditionnent le comportement du canal.</param>
      <typeparam name="T">Spécifie le type de données dans le canal.</typeparam>
      <returns>Le canal créé.</returns>
    </member>
    <member name="T:System.Threading.Channels.Channel`1">
      <summary>Fournit une classe de base pour les canaux qui prennent en charge la lecture et l’écriture d’éléments de type <typeparamref name="T" />.</summary>
      <typeparam name="T">Spécifie le type de données accessibles en lecture et en écriture dans le canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`1.#ctor">
      <summary>Initialise une instance de la classe <see cref="T:System.Threading.Channels.Channel`1" />.</summary>
    </member>
    <member name="T:System.Threading.Channels.Channel`2">
      <summary>Fournit une classe de base pour les canaux qui prennent en charge la lecture d’éléments de type <typeparamref name="TRead" /> et l’écriture d’éléments de type <typeparamref name="TWrite" />.</summary>
      <typeparam name="TWrite">Spécifie le type de données qui peuvent être écrites dans le canal.</typeparam>
      <typeparam name="TRead">Spécifie le type de données qui peuvent être lues à partir du canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.#ctor">
      <summary>Initialise une instance de la classe <see cref="T:System.Threading.Channels.Channel`2" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelReader{`1}">
      <summary>Cast implicite d’un <see cref="T:System.Threading.Channels.Channel`2" /> vers sa moitié accessible en lecture.</summary>
      <param name="channel">Élément <see cref="T:System.Threading.Channels.Channel`2" /> casté.</param>
      <returns>Moitié accessible en lecture.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelWriter{`0}">
      <summary>Cast implicite d’un <see cref="T:System.Threading.Channels.Channel`2" /> vers sa moitié accessible en écriture.</summary>
      <param name="channel">Élément <see cref="T:System.Threading.Channels.Channel`2" /> casté.</param>
      <returns>Moitié accessible en écriture.</returns>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Reader">
      <summary>Obtient la moitié accessible en lecture de ce canal.</summary>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Writer">
      <summary>Obtient la moitié accessible en écriture de ce canal.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelClosedException">
      <summary>Exception levée lorsqu’un canal est utilisé après sa fermeture.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="innerException">Exception à l'origine de cette exception.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Channels.ChannelClosedException" /> avec des données sérialisées.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="message">Message décrivant l'erreur.</param>
      <param name="innerException">Exception à l'origine de cette exception.</param>
    </member>
    <member name="T:System.Threading.Channels.ChannelOptions">
      <summary>Fournit des options qui contrôlent le comportement des instances de canal.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelOptions.#ctor">
      <summary>Initialise une instance de la classe <see cref="T:System.Threading.Channels.ChannelOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations">
      <summary>
        <see langword="true" /> si les opérations effectuées sur un canal peuvent appeler de façon synchrone des continuations abonnées aux notifications d’opérations asynchrones en attente ; <see langword="false" /> si toutes les continuations doivent être appelées de façon asynchrone.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleReader">
      <summary>
        <see langword="true" /> si les lecteurs provenant du canal garantissent qu’il y aura seulement au plus une opération de lecture à la fois ; <see langword="false" /> si aucune contrainte de ce type n’est garantie.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleWriter">
      <summary>
        <see langword="true" /> si les enregistreurs vers le canal garantissent qu’il y aura seulement au plus une opération d’écriture à la fois ; <see langword="false" /> si aucune contrainte de ce type n’est garantie.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelReader`1">
      <summary>Fournit une classe de base pour la lecture à partir d’un canal.</summary>
      <typeparam name="T">Spécifie le type de données qui peuvent être lues à partir du canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.#ctor">
      <summary>Initialise une instance de la classe <see cref="T:System.Threading.Channels.ChannelReader`1" />.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelReader`1.Completion">
      <summary>Obtient une tâche <see cref="T:System.Threading.Tasks.Task" /> qui se termine lorsque plus aucune donnée ne sera disponible pour la lecture à partir de ce canal.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAllAsync(System.Threading.CancellationToken)">
      <summary>Crée un <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> qui permet la lecture de toutes les données du canal.</summary>
      <param name="cancellationToken">Jeton d’annulation à utiliser pour annuler l’énumération.</param>
      <returns>L’énumérable asynchrone créé.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAsync(System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone un élément à partir du canal.</summary>
      <param name="cancellationToken">Une tâche <see cref="T:System.Threading.CancellationToken" /> est également utilisé pour l'opération de lecture.</param>
      <returns>Tâche <see cref="T:System.Threading.Tasks.ValueTask`1" /> qui représente l'opération de lecture asynchrone.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.TryRead(`0@)">
      <summary>Tente de lire un élément depuis le canal.</summary>
      <param name="item">Élément de lecture ou valeur par défaut si aucun élément n’a pu être lu.</param>
      <returns>
        <see langword="true" /> si un élément a été lu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.WaitToReadAsync(System.Threading.CancellationToken)">
      <summary>Retourne une tâche <see cref="T:System.Threading.Tasks.ValueTask`1" /> qui se termine lorsque des données sont disponibles en lecture.</summary>
      <param name="cancellationToken">Tâche <see cref="T:System.Threading.CancellationToken" /> utilisée pour annuler l'opération d’attente.</param>
      <returns>
        <see cref="T:System.Threading.Tasks.ValueTask`1" /> qui s’effectue en retournant un résultat <see langword="true" /> quand des données sont disponibles en lecture, ou un résultat <see langword="false" /> quand aucune autre donnée n’est disponible en lecture en raison de l’exécution réussie du canal.
Si l’exécution du canal entraîne la levée d’une exception, l’exécution de la tâche entraîne également la levée d’une exception.
.</returns>
    </member>
    <member name="T:System.Threading.Channels.ChannelWriter`1">
      <summary>Fournit une classe de base pour l’écriture dans un canal.</summary>
      <typeparam name="T">Spécifie le type de données qui peuvent être écrites dans le canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.#ctor">
      <summary>Initialise une instance de la classe <see cref="T:System.Threading.Channels.ChannelWriter`1" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.Complete(System.Exception)">
      <summary>Marque le canal comme étant terminé, ce qui signifie qu’aucun autre élément ne sera écrit sur ce dernier.</summary>
      <param name="error">Exception facultative indiquant un échec qui entraîne l’arrêt du canal.</param>
      <exception cref="T:System.InvalidOperationException">Le canal a déjà été marqué comme étant terminé.</exception>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryComplete(System.Exception)">
      <summary>Tente de marquer le canal comme étant terminé, ce qui signifie qu’aucune autre donnée y sera écrite.</summary>
      <param name="error">Exception <see cref="T:System.Exception" /> indiquant l’échec qui empêche l’écriture de données supplémentaires, ou valeur null en cas de succès.</param>
      <returns>
        <see langword="true" /> si cette opération termine correctement le canal. Sinon, <see langword="false" /> si le canal n’a pas pu être marqué comme étant terminé, par exemple s’il a déjà été marqué comme tel, ou en raison de la non prise en charge de la terminaison.
.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryWrite(`0)">
      <summary>Tente d'écrire l'élément spécifié sur le canal.</summary>
      <param name="item">Élément à écrire.</param>
      <returns>
        <see langword="true" /> si l’élément a été écrit ; Sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WaitToWriteAsync(System.Threading.CancellationToken)">
      <summary>Retourne une tâche <see cref="T:System.Threading.Tasks.ValueTask`1" /> qui se termine lorsque de l’espace est disponible pour écrire un élément.</summary>
      <param name="cancellationToken">Tâche <see cref="T:System.Threading.CancellationToken" /> utilisée pour annuler l'opération d’attente.</param>
      <returns>Tâche <see cref="T:System.Threading.Tasks.ValueTask`1" /> qui se termine avec un résultat <see langword="true" /> lorsque de l’espace est disponible pour écrire un élément ou avec un résultat <see langword="false" /> si aucune autre écriture ne sera possible.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WriteAsync(`0,System.Threading.CancellationToken)">
      <summary>Écrit de façon asynchrone un élément sur le canal.</summary>
      <param name="item">Valeur à écrire sur le canal.</param>
      <param name="cancellationToken">Tâche <see cref="T:System.Threading.CancellationToken" /> utilisée pour annuler l'opération d’écriture.</param>
      <returns>Tâche <see cref="T:System.Threading.Tasks.ValueTask" /> qui représente l'opération d'écriture asynchrone.</returns>
    </member>
    <member name="T:System.Threading.Channels.UnboundedChannelOptions">
      <summary>Fournit des options qui contrôlent le comportement des instances <see cref="T:System.Threading.Channels.Channel`1" /> non délimitées.</summary>
    </member>
    <member name="M:System.Threading.Channels.UnboundedChannelOptions.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Threading.Channels.UnboundedChannelOptions" />.</summary>
    </member>
  </members>
</doc>
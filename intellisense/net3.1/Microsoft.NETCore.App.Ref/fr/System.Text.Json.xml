<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>Définit comment le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> gère les commentaires.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>Autorise les commentaires dans l’entrée JSON et les considère comme des jetons valides. Lors de la lecture, l’appelant peut accéder aux valeurs de commentaire.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>N’autorise pas les commentaires dans l’entrée JSON. Les commentaires sont considérés comme du code JSON non valide le cas échéant et une <see cref="T:System.Text.Json.JsonException" /> est levée. Valeur par défaut.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>Autorise les commentaires dans l’entrée JSON et les ignore. Le <see cref="T:System.Text.Json.Utf8JsonReader" /> se comporte comme si aucun commentaire n’était présent.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>Fournit un mécanisme permettant d’examiner le contenu structurel d’une valeur JSON sans instancier automatiquement des valeurs de données.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>Libère les ressources utilisées par cette instance de <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analyse une séquence sous forme de texte encodé en UTF-8 qui représente une valeur de type octet JSON unique dans un JsonDocument.</summary>
      <param name="utf8Json">Texte JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns>Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>Analyse un <see cref="T:System.IO.Stream" /> sous forme de données encodées en UTF-8 qui représente une valeur JSON unique dans un JsonDocument. Le flux est lu dans son intégralité.</summary>
      <param name="utf8Json">Données JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns>Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analyse la mémoire sous forme de texte encodé en UTF-8 qui représente une valeur de type octet JSON unique dans un JsonDocument.</summary>
      <param name="utf8Json">Texte JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns>Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>Analyse du texte qui représente une valeur de caractère JSON unique dans un JsonDocument.</summary>
      <param name="json">Texte JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns>Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>Analyse du texte qui représente une valeur de chaîne JSON unique dans un JsonDocument.</summary>
      <param name="json">Texte JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <returns>Représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>Analyse un <see cref="T:System.IO.Stream" /> sous forme de données encodées en UTF-8 qui représente une valeur JSON unique dans un JsonDocument. Le flux est lu dans son intégralité.</summary>
      <param name="utf8Json">Données JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement du lecteur lors de l’analyse.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns>Tâche destinée à produire une représentation JsonDocument de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> ne représente pas une valeur JSON unique valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="readerOptions" /> contient des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>Analyse une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni.</summary>
      <param name="reader">Lecteur à partir duquel effectuer la lecture.</param>
      <returns>Un JsonDocument représentant la valeur (et les valeurs imbriquées) lues par le lecteur.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contient des options non prises en charge.
-ou-
Le jeton <paramref name="reader" /> actuel ne démarre pas et ne représente pas une valeur.</exception>
      <exception cref="T:System.Text.Json.JsonException">Une valeur n’a pas pu être lue par le lecteur.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>Obtient l’élément racine de ce document JSON.</summary>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur du document.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>Tente d’analyser une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni.</summary>
      <param name="reader">Lecteur à partir duquel effectuer la lecture.</param>
      <param name="document">Quand la méthode retourne une valeur, contient le document analysé.</param>
      <returns>
        <see langword="true" /> si une valeur a été lue et analysée dans un JsonDocument ; <see langword="false" /> si le lecteur a manqué de données lors de l’analyse. Toutes les autres situations entraînent la levée d’une exception.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> contient des options non prises en charge.
-ou-
Le jeton <paramref name="reader" /> actuel ne démarre pas et ne représente pas une valeur.</exception>
      <exception cref="T:System.Text.Json.JsonException">Une valeur n’a pas pu être lue par le lecteur.</exception>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Écrit le document dans l’enregistreur fourni sous la forme d’une valeur JSON.</summary>
      <param name="writer">Enregistreur dans lequel écrire le document.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de ce <see cref="P:System.Text.Json.JsonDocument.RootElement" /> aboutit à du code JSON non valide.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>Offre la possibilité à l’utilisateur de définir un comportement personnalisé lors de l’analyse de JSON pour créer un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>Obtient ou définit une valeur qui indique si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée) dans la charge utile JSON en cours de lecture.</summary>
      <returns>
        <see langword="true" /> si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="false" /></returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>Obtient ou définit une valeur qui détermine comment <see cref="T:System.Text.Json.JsonDocument" /> gère les commentaires lors de la lecture des données JSON.</summary>
      <returns>L’une des valeurs d’énumération qui indique comment les commentaires sont gérés.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">L’énum de gestion des commentaires est définie avec une valeur qui n’est pas prise en charge (ou qui n’est pas dans la plage d’énums <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>Obtient ou définit la profondeur maximale autorisée lors de l’analyse de données JSON, avec la valeur par défaut (c’est-à-dire 0) indiquant une profondeur maximale de 64.</summary>
      <returns>Profondeur maximale autorisée lors de l’analyse des données JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La profondeur maximale est définie avec une valeur négative.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>Représente une valeur JSON spécifique dans un <see cref="T:System.Text.Json.JsonDocument" />.</summary>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>Représente un énumérateur pour le contenu d’un tableau JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>Libère les ressources utilisées par cette instance de <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein du tableau.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant de la collection.</summary>
      <returns>
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>Rétablit l'énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur pour un tableau de <see cref="T:System.Text.Json.JsonElement" /> permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>Obtient un JsonElement qui peut être stocké de manière sécurisée au-delà de la durée de vie du <see cref="T:System.Text.Json.JsonDocument" /> d’origine.</summary>
      <returns>JsonElement pouvant être stocké de manière sécurisée au-delà de la durée de vie du <see cref="T:System.Text.Json.JsonDocument" /> d’origine.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>Obtient un énumérateur pour énumérer les valeurs du tableau JSON représenté par ce JsonElement.</summary>
      <returns>Énumérateur permettant d’énumérer les valeurs du tableau JSON représenté par ce JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>Obtient un énumérateur pour énumérer les propriétés de l’objet JSON représenté par ce JsonElement.</summary>
      <returns>Énumérateur permettant d’énumérer les propriétés de l’objet JSON représenté par ce JsonElement.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>Obtient le nombre de valeurs contenues dans la valeur de tableau actuelle.</summary>
      <returns>Nombre de valeurs contenues dans la valeur de tableau actuelle.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>Obtient la valeur de l’élément sous la forme <see cref="T:System.Boolean" />.</summary>
      <returns>Valeur de l’élément sous la forme <see cref="T:System.Boolean" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est ni <see cref="F:System.Text.Json.JsonValueKind.True" /> ni <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.Byte" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Byte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>Obtient la valeur de l’élément sous forme d’un tableau d’octets.</summary>
      <returns>Valeur décodée sous la forme d’un tableau d’octets.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur n’est pas encodée en texte en Base64 et donc ne peut pas être décodée en octets.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>Obtient la valeur de l’élément sous la forme <see cref="T:System.DateTime" />.</summary>
      <returns>Valeur de l’élément sous la forme <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être lue comme <see cref="T:System.DateTime" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>Obtient la valeur de l’élément sous la forme <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Valeur de l’élément sous la forme <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être lue comme <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.Decimal" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Decimal" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.Double" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Double" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>Obtient la valeur de l’élément sous la forme <see cref="T:System.Guid" />.</summary>
      <returns>Valeur de l’élément sous la forme <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Guid" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.Int16" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Int16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.Int32" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Int32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.Int64" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Int64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>Obtient un <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur d’une propriété obligatoire identifiée par <paramref name="utf8PropertyName" />.</summary>
      <param name="utf8PropertyName">Représentation UTF-8 (sans marque d’ordre d’octet) du nom de la propriété à retourner.</param>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur de la propriété demandée.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Aucune propriété n’a été trouvée avec le nom demandé.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>Obtient un <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur d’une propriété obligatoire identifiée par <paramref name="propertyName" />.</summary>
      <param name="propertyName">Nom de la propriété dont la valeur doit être retournée.</param>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur de la propriété demandée.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Aucune propriété n’a été trouvée avec le nom demandé.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>Obtient un <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur d’une propriété obligatoire identifiée par <paramref name="propertyName" />.</summary>
      <param name="propertyName">Nom de la propriété dont la valeur doit être retournée.</param>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" /> représentant la valeur de la propriété demandée.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Aucune propriété n’a été trouvée avec le nom demandé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>Obtient une chaîne qui représente les données d’entrée d’origine associées à cette valeur.</summary>
      <returns>Données d’entrée d’origine associées à cette valeur.</returns>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.SByte" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.SByte" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.Single" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.Single" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>Obtient la valeur de l’élément sous la forme <see cref="T:System.String" />.</summary>
      <returns>Valeur de l’élément sous la forme <see cref="T:System.String" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est ni <see cref="F:System.Text.Json.JsonValueKind.String" /> ni <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.UInt16" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.UInt16" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.UInt32" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.UInt32" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>Obtient le nombre JSON actuel sous la forme <see cref="T:System.UInt64" />.</summary>
      <returns>Nombre JSON actuel sous la forme <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur ne peut pas être représentée sous la forme <see cref="T:System.UInt64" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>Obtient la valeur à l’index spécifié si la valeur actuelle est un <see cref="F:System.Text.Json.JsonValueKind.Array" />.</summary>
      <param name="index">Index d'élément.</param>
      <returns>Valeur à l’index spécifié.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> n’est pas dans la plage [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>Représente un énumérateur pour les propriétés d’un objet JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>Libère les ressources utilisées par cette instance de <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>Retourne un énumérateur qui effectue une itération des propriétés d’un objet.</summary>
      <returns>Énumérateur permettant d’effectuer une itération au sein de l’objet.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>Avance l’énumérateur à l’élément suivant de la collection.</summary>
      <returns>
        <see langword="true" /> si l'énumérateur a pu avancer jusqu'à l'élément suivant ; <see langword="false" /> si l'énumérateur a dépassé la fin de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>Rétablit l'énumérateur à sa position initiale, qui précède le premier élément de la collection.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur pour des objets <see cref="T:System.Text.Json.JsonProperty" /> permettant d’effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retourne un énumérateur qui itère au sein d’une collection.</summary>
      <returns>Énumérateur permettant d'effectuer une itération au sein de la collection.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>Obtient l’élément de la collection situé à la position actuelle de l’énumérateur.</summary>
      <returns>Élément dans la collection à la position actuelle de l'énumérateur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>Obtient une représentation sous forme de chaîne de la valeur actuelle adaptée au type valeur.</summary>
      <returns>Représentation sous forme de chaîne de la valeur actuelle adaptée au type valeur.</returns>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Byte" />.</summary>
      <param name="value">Quand la méthode est retournée, contient l’équivalent en octet du nombre JSON actuel si la conversion a réussi.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Byte" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Tente de représenter la chaîne JSON actuelle sous la forme d’un tableau d’octets, en supposant qu’elle est encodée en Base64.</summary>
      <param name="value">Si la méthode réussit, contient la représentation binaire décodée du texte en Base64.</param>
      <returns>
        <see langword="true" /> si la totalité de la valeur de jeton est encodée en texte en Base64 valide et peut être décodée en octets ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>Tente de représenter la chaîne JSON actuelle sous la forme <see cref="T:System.DateTime" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur de date et heure équivalant à la chaîne JSON actuelle.</param>
      <returns>
        <see langword="true" /> si la chaîne peut être représentée sous la forme <see cref="T:System.DateTime" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Tente de représenter la chaîne JSON actuelle sous la forme <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient la date et l’heure équivalant à la chaîne JSON actuelle.</param>
      <returns>
        <see langword="true" /> si la chaîne peut être représentée sous la forme <see cref="T:System.DateTimeOffset" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Decimal" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur décimale équivalant au nombre JSON actuel.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Decimal" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Double" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient une valeur à virgule flottante double précision équivalant au nombre JSON actuel.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Double" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>Tente de représenter la chaîne JSON actuelle sous la forme <see cref="T:System.Guid" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient le GUID équivalant à la chaîne JSON actuelle.</param>
      <returns>
        <see langword="true" /> si la chaîne peut être représentée sous la forme <see cref="T:System.Guid" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Int16" />.</summary>
      <param name="value">Quand la méthode est retournée, contient l’équivalent en entier 16 bits du nombre JSON actuel si la conversion a réussi.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Int16" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Int32" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur entière 32 bits équivalant au nombre JSON actuel.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Int32" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Int64" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur entière 64 bits équivalant au nombre JSON actuel.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Int64" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>Recherche une propriété nommée <paramref name="utf8PropertyName" /> dans l’objet actuel et retourne une valeur indiquant si cette propriété existe ou non. Si la propriété existe, la méthode affecte sa valeur à l’argument <paramref name="value" />.</summary>
      <param name="utf8PropertyName">Représentation UTF-8 (sans marque d’ordre d’octet) du nom de la propriété à retourner.</param>
      <param name="value">Reçoit la valeur de la propriété trouvée.</param>
      <returns>
        <see langword="true" /> si la propriété a été trouvée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>Recherche une propriété nommée <paramref name="propertyName" /> dans l’objet actuel et retourne une valeur indiquant si cette propriété existe ou non. Si la propriété existe, la méthode affecte sa valeur à l’argument <paramref name="value" />.</summary>
      <param name="propertyName">Nom de la propriété à rechercher.</param>
      <param name="value">Quand cette méthode est retournée, contient la valeur de la propriété spécifiée.</param>
      <returns>
        <see langword="true" /> si la propriété a été trouvée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>Recherche une propriété nommée <paramref name="propertyName" /> dans l’objet actuel et retourne une valeur indiquant si cette propriété existe ou non. Si la propriété existe, sa valeur est affectée à l’argument <paramref name="value" />.</summary>
      <param name="propertyName">Nom de la propriété à rechercher.</param>
      <param name="value">Quand cette méthode est retournée, contient la valeur de la propriété spécifiée.</param>
      <returns>
        <see langword="true" /> si la propriété a été trouvée ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.SByte" />.</summary>
      <param name="value">Quand la méthode est retournée, contient l’équivalent en octet signé du nombre JSON actuel si la conversion a réussi.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.SByte" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.Single" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient une valeur à virgule flottante simple précision équivalant au nombre JSON actuel.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.Single" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.UInt16" />.</summary>
      <param name="value">Quand la méthode est retournée, contient l’équivalent en entier 16 bits non signé du nombre JSON actuel si la conversion a réussi.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.UInt16" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.UInt32" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur entière 32 bits non signée équivalant au nombre JSON actuel.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.UInt32" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>Tente de représenter le nombre JSON actuel sous la forme <see cref="T:System.UInt64" />.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur entière 64 bits non signée équivalant au nombre JSON actuel.</param>
      <returns>
        <see langword="true" /> si le nombre peut être représenté sous la forme <see cref="T:System.UInt64" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Compare le texte représenté par une étendue d’octets encodée en UTF8 avec la valeur de chaîne de cet élément.</summary>
      <param name="utf8Text">Texte encodé en UTF-8 avec lequel effectuer la comparaison.</param>
      <returns>
        <see langword="true" /> si la valeur de chaîne de cet élément a le même encodage UTF-8 que <paramref name="utf8Text" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>Compare une étendue de caractères en lecture seule spécifiée avec la valeur de chaîne de cet élément.</summary>
      <param name="text">Texte avec lequel comparer.</param>
      <returns>
        <see langword="true" /> si la valeur de chaîne de cet élément correspond à <paramref name="text" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>Compare une chaîne spécifiée avec la valeur de chaîne de cet élément.</summary>
      <param name="text">Texte avec lequel comparer.</param>
      <returns>
        <see langword="true" /> si la valeur de chaîne de cet élément correspond à <paramref name="text" /> ; sinon <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>Obtient le type de la valeur JSON actuelle.</summary>
      <returns>Type de la valeur JSON actuelle.</returns>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Écrit l’élément dans l’enregistreur fourni sous la forme d’une valeur JSON.</summary>
      <param name="writer">Enregistreur dans lequel écrire le message.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="writer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de cette valeur est <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>Fournit des méthodes pour transformer du texte encodé en UTF-8 ou UTF-16 dans un format approprié pour JSON.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Encode une valeur texte UTF-8 sous la forme d’une chaîne JSON.</summary>
      <param name="utf8Value">Texte encodé en UTF-8 à convertir en texte encodé en JSON.</param>
      <param name="encoder">Encodeur à utiliser lors de l’échappement de la chaîne, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</param>
      <returns>Texte JSON encodé.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" /> est trop grand.
ou
<paramref name="utf8Value" /> contient des octets UTF-8 non valides.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Encode une valeur texte spécifiée en chaîne JSON.</summary>
      <param name="value">Valeur à convertir en texte encodé en JSON.</param>
      <param name="encoder">Encodeur à utiliser lors de l’échappement de la chaîne, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</param>
      <returns>Texte JSON encodé.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> est trop grand.

ou -

<paramref name="value" /> contient des caractères UTF-16 non valides.</exception>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Encode la valeur texte de la chaîne en chaîne JSON.</summary>
      <param name="value">Valeur à convertir en texte encodé en JSON.</param>
      <param name="encoder">Encodeur à utiliser lors de l’échappement de la chaîne, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</param>
      <returns>Texte JSON encodé.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> est trop grand.

ou -

<paramref name="value" /> contient des caractères UTF-16 non valides.</exception>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>Obtient la représentation encodée en UTF-8 du texte JSON préencodé.</summary>
      <returns>Représentation encodée en UTF-8 du texte JSON pré-encodé.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>Détermine si cette instance et un objet spécifié, qui doit aussi être une instance <see cref="T:System.Text.Json.JsonEncodedText" />, ont la même valeur.</summary>
      <param name="obj">Objet à comparer à cette instance.</param>
      <returns>
        <see langword="true" /> si l'instance actuelle et <paramref name="obj" /> sont égaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>Détermine si cette instance et une autre instance <see cref="T:System.Text.Json.JsonEncodedText" /> spécifiée ont la même valeur.</summary>
      <param name="other">Objet à comparer à cette instance.</param>
      <returns>
        <see langword="true" /> si cette instance et <paramref name="other" /> ont la même valeur ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>Retourne le code de hachage pour ce <see cref="T:System.Text.Json.JsonEncodedText" />.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>Convertit la valeur de cette instance en <see cref="T:System.String" />.</summary>
      <returns>Chaîne encodée en UTF-16 sous-jacente.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>Définit un objet exception personnalisé qui est levé lorsque du texte JSON non valide a été trouvé, que la profondeur maximale définie est passée ou que le texte JSON n’est pas compatible avec le type d’une propriété sur un objet.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonException" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Crée un objet exception avec des données sérialisées.</summary>
      <param name="info">Données d'objet sérialisées sur l'exception levée.</param>
      <param name="context">Objet qui contient des informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d’erreur spécifique au contexte.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d’erreur spécifique au contexte.</param>
      <param name="innerException">Exception à l'origine de l'exception actuelle.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Crée un nouvel objet d’exception pour relayer les informations de l’erreur à l’utilisateur.</summary>
      <param name="message">Message d’erreur spécifique au contexte.</param>
      <param name="path">Chemin où le texte JSON non valide a été trouvé.</param>
      <param name="lineNumber">Numéro de ligne (commençant à 0) auquel le texte JSON non valide a été trouvé lors de la désérialisation.</param>
      <param name="bytePositionInLine">Nombre d’octets dans la ligne actuelle (commençant à 0) où le texte JSON non valide a été trouvé.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>Crée un objet exception pour relayer les informations de l’erreur à l’utilisateur, qui incluent une exception interne spécifiée.</summary>
      <param name="message">Message d’erreur spécifique au contexte.</param>
      <param name="path">Chemin où le texte JSON non valide a été trouvé.</param>
      <param name="lineNumber">Numéro de ligne (commençant à 0) auquel le texte JSON non valide a été trouvé lors de la désérialisation.</param>
      <param name="bytePositionInLine">Nombre d’octets (commençant à 0) dans la ligne actuelle où le texte JSON non valide a été trouvé.</param>
      <param name="innerException">Exception à l'origine de l'exception actuelle.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>Obtient le nombre d’octets de base zéro lus dans la ligne actuelle avant l’exception.</summary>
      <returns>Nombre d’octets de base zéro lus dans la ligne active avant l’exception.</returns>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Définit <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec des informations concernant l'exception.</summary>
      <param name="info">Données d'objet sérialisées sur l'exception levée.</param>
      <param name="context">Objet qui contient des informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>Obtient le nombre de lignes de base zéro lues avant l’exception.</summary>
      <returns>Nombre de lignes de base zéro lues avant l’exception.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>Obtient un message qui décrit l'exception actuelle.</summary>
      <returns>Message d'erreur qui décri l'exception actuelle.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>Obtient le chemin dans le texte JSON où l’exception a été trouvée.</summary>
      <returns>Chemin d’accès dans le JSON où l’exception a été rencontrée.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>Détermine la stratégie de nommage utilisée pour convertir un nom basé sur une chaîne en un autre format, tel qu’un format de casse mixte.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>Obtient la stratégie de nommage pour la casse mixte.</summary>
      <returns>Stratégie de nommage pour la casse mixte.</returns>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>En cas de substitution dans une classe dérivée, convertit le nom spécifié en fonction de la stratégie.</summary>
      <param name="name">Nom à convertir.</param>
      <returns>Nom converti.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>Représente une propriété unique pour un objet JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>Obtient le nom de cette propriété.</summary>
      <returns>Nom de cette propriété.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Compare le texte encodé en UTF-8 spécifié en nom de cette propriété.</summary>
      <param name="utf8Text">Texte encodé en UTF-8 avec lequel effectuer la comparaison.</param>
      <returns>
        <see langword="true" /> si le nom de cette propriété a le même encodage UTF-8 que <paramref name="utf8Text" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Type" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>Compare le texte spécifié comme étendue de caractères avec le nom de cette propriété.</summary>
      <param name="text">Texte avec lequel comparer.</param>
      <returns>
        <see langword="true" /> si le nom de cette propriété correspond à <paramref name="text" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Type" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>Compare la chaîne spécifiée en nom de cette propriété.</summary>
      <param name="text">Texte avec lequel comparer.</param>
      <returns>
        <see langword="true" /> si le nom de cette propriété correspond à <paramref name="text" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Type" /> de cette valeur n’est pas <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>Fournit une représentation sous forme de chaîne de la propriété à des fins de débogage.</summary>
      <returns>Chaîne contenant la valeur non interprétée de la propriété, qui commence à l’open-quote de déclaration et qui se termine au dernier caractère de la valeur.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>Obtient la valeur de cette propriété.</summary>
      <returns>Valeur de cette propriété.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Écrit la propriété dans l’enregistreur fourni en tant que propriété nommée d’objet JSON.</summary>
      <param name="writer">Enregistreur dans lequel écrire la propriété.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> est trop grande pour être une propriété d’objet JSON.</exception>
      <exception cref="T:System.InvalidOperationException">Le <see cref="P:System.Text.Json.JsonElement.ValueKind" /> de <see cref="P:System.Text.Json.JsonProperty.Value" /> de cette propriété JSON aboutit à du code JSON non valide.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Text.Json.JsonDocument" /> parent a été supprimé.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>Offre la possibilité à l’utilisateur de définir un comportement personnalisé lors de la lecture de JSON.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>Obtient ou définit une valeur qui définit si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée) dans la charge utile JSON en cours de lecture.</summary>
      <returns>
        <see langword="true" /> si une virgule supplémentaire est autorisée ; Sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>Obtient ou définit une valeur qui détermine comment <see cref="T:System.Text.Json.Utf8JsonReader" /> gère les commentaires lors de la lecture des données JSON.</summary>
      <returns>L’une des valeurs d’énumération qui indique comment les commentaires sont gérés.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La propriété est actuellement définie avec une valeur qui n’est pas membre de l’énumération <see cref="T:System.Text.Json.JsonCommentHandling" />.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>Obtient ou définit la profondeur maximale autorisée lors de la lecture de code JSON, avec la valeur par défaut (c’est-à-dire 0) indiquant une profondeur maximale de 64.</summary>
      <returns>Profondeur maximale autorisée lors de la lecture de JSON.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">La profondeur maximale est actuellement définie sur une valeur négative.</exception>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>Définit un type opaque qui détient et enregistre toutes les informations d’état pertinentes qui doivent être fournies au <see cref="T:System.Text.Json.Utf8JsonReader" /> pour continuer la lecture après avoir traité les données incomplètes.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>Construit une nouvelle instance de <see cref="T:System.Text.Json.JsonReaderState" />.</summary>
      <param name="options">Définit le comportement personnalisé du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui diffère de la RFC JSON (par exemple, la façon de gérer les commentaires ou la profondeur maximale autorisée lors de la lecture). Par défaut, <see cref="T:System.Text.Json.Utf8JsonReader" /> suit strictement la RFC JSON (les commentaires dans le code JSON ne sont pas valides) et lit jusqu’à une profondeur maximale de 64.</param>
      <exception cref="T:System.ArgumentException">La profondeur maximale est définie sur une valeur non positive (&lt; 0).</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>Obtient le comportement personnalisé à utiliser lors de la lecture des données JSON avec le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> qui peut dévier du respect strict de la spécification JSON, qui est le comportement par défaut.</summary>
      <returns>Comportement personnalisé à utiliser lors de la lecture de données JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>Fournit les fonctionnalités permettant de sérialiser des objets ou des types valeur en JSON et de désérialiser JSON en objets ou types valeur.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analyse le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance d’un type spécifié.</summary>
      <param name="utf8Json">Texte JSON à analyser.</param>
      <param name="returnType">Type de l’objet à convertir et à retourner.</param>
      <param name="options">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <returns>Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="returnType" /> n’est pas compatible avec le JSON.
-ou-
Données restantes au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analyse le texte représentant une valeur JSON unique dans une instance d’un type spécifié.</summary>
      <param name="json">Texte JSON à analyser.</param>
      <param name="returnType">Type de l’objet à convertir et à retourner.</param>
      <param name="options">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <returns>Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> ou <paramref name="returnType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Données restantes dans la chaîne au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Lit une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni et la convertit en une instance d’un type spécifié.</summary>
      <param name="reader">Lecteur à partir duquel lire le JSON.</param>
      <param name="returnType">Type de l’objet à convertir et à retourner.</param>
      <param name="options">Options permettant de contrôler le comportement du sérialiseur lors de la lecture.</param>
      <returns>Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="returnType" /> n’est pas compatible avec le JSON.
-ou-
Une valeur n’a pas pu être lue par le lecteur.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> utilise des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>Analyse le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance du type spécifié par un paramètre de type générique.</summary>
      <param name="utf8Json">Texte JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <typeparam name="TValue">Type de cible du texte encodé en UTF-8.</typeparam>
      <returns>Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Données restantes au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>Analyse le texte représentant une valeur JSON unique dans une instance du type spécifié par un paramètre de type générique.</summary>
      <param name="json">Texte JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement lors de l’analyse.</param>
      <typeparam name="TValue">Type de cible de la valeur JSON.</typeparam>
      <returns>Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Données restantes dans la chaîne au-delà d’une seule valeur JSON.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>Lit une valeur JSON (notamment des objets ou des tableaux) à partir du lecteur fourni dans une instance du type spécifié par un paramètre de type générique.</summary>
      <param name="reader">Lecteur à partir duquel lire le JSON.</param>
      <param name="options">Options permettant de contrôler le comportement du sérialiseur lors de la lecture.</param>
      <typeparam name="TValue">Type de cible de la valeur JSON.</typeparam>
      <returns>Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Une valeur n’a pas pu être lue par le lecteur.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> utilise des options non prises en charge.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Lit de manière asynchrone le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance d’un type spécifié. Le flux sera lu dans son intégralité.</summary>
      <param name="utf8Json">Données JSON à analyser.</param>
      <param name="returnType">Type de l’objet à convertir et à retourner.</param>
      <param name="options">Options permettant de contrôler le comportement lors de la lecture.</param>
      <param name="cancellationToken">Jeton d’annulation pouvant être utilisé pour annuler l’opération de lecture.</param>
      <returns>Représentation <paramref name="returnType" /> de la valeur JSON.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> ou <paramref name="returnType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Il reste des données dans le flux.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Lit de façon asynchrone le texte encodé en UTF-8 représentant une valeur JSON unique dans une instance d’un type spécifié par un paramètre de type générique. Le flux sera lu dans son intégralité.</summary>
      <param name="utf8Json">Données JSON à analyser.</param>
      <param name="options">Options permettant de contrôler le comportement lors de la lecture.</param>
      <param name="cancellationToken">Jeton pouvant être utilisé pour annuler l’opération de lecture.</param>
      <typeparam name="TValue">Type de cible de la valeur JSON.</typeparam>
      <returns>Représentation <typeparamref name="TValue" /> de la valeur JSON.</returns>
      <exception cref="T:System.Text.Json.JsonException">Le JSON n’est pas valide.
-ou-
<typeparamref name="TValue" /> n’est pas compatible avec le JSON.
-ou-
Il reste des données dans le flux.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Convertit la valeur d’un type spécifié en chaîne JSON.</summary>
      <param name="value">Valeur à convertir.</param>
      <param name="inputType">Type de <paramref name="value" /> à convertir.</param>
      <param name="options">Options pour contrôler le comportement de conversion.</param>
      <returns>Représentation sous forme de chaîne JSON de la valeur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Écrit la représentation JSON du type spécifié dans l’enregistreur fourni.</summary>
      <param name="writer">Enregistreur JSON dans lequel écrire.</param>
      <param name="value">Valeur à convertir et à écrire.</param>
      <param name="inputType">Type de <paramref name="value" /> à convertir.</param>
      <param name="options">Options pour contrôler le comportement de sérialisation.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Convertit la valeur d’un type spécifié par un paramètre de type générique en chaîne JSON.</summary>
      <param name="value">Valeur à convertir.</param>
      <param name="options">Options pour contrôler le comportement de sérialisation.</param>
      <typeparam name="TValue">Type de la valeur à sérialiser.</typeparam>
      <returns>Représentation sous forme de chaîne JSON de la valeur.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Écrit la représentation JSON d’un type spécifié par un paramètre de type générique dans l’enregistreur fourni.</summary>
      <param name="writer">Enregistreur JSON dans lequel écrire.</param>
      <param name="value">Valeur à convertir et à écrire.</param>
      <param name="options">Options pour contrôler le comportement de sérialisation.</param>
      <typeparam name="TValue">Type de la valeur à sérialiser.</typeparam>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Convertit de façon asynchrone la valeur d’un type spécifié en texte JSON encodé en UTF-8 et l’écrit dans le flux spécifié.</summary>
      <param name="utf8Json">Flux UTF-8 dans lequel écrire.</param>
      <param name="value">Valeur à convertir.</param>
      <param name="inputType">Type de <paramref name="value" /> à convertir.</param>
      <param name="options">Options pour contrôler le comportement de sérialisation.</param>
      <param name="cancellationToken">Jeton pouvant être utilisé pour annuler l’opération d’écriture.</param>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Convertit de façon asynchrone une valeur d’un type spécifié par un paramètre de type générique en texte JSON encodé en UTF-8 et l’écrit dans un flux.</summary>
      <param name="utf8Json">Flux UTF-8 dans lequel écrire.</param>
      <param name="value">Valeur à convertir.</param>
      <param name="options">Options pour contrôler le comportement de sérialisation.</param>
      <param name="cancellationToken">Jeton pouvant être utilisé pour annuler l’opération d’écriture.</param>
      <typeparam name="TValue">Type de la valeur à sérialiser.</typeparam>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Convertit une valeur du type spécifié en chaîne JSON, encodée en octets UTF-8.</summary>
      <param name="value">Valeur à convertir.</param>
      <param name="inputType">Type de <paramref name="value" /> à convertir.</param>
      <param name="options">Options pour contrôler le comportement de conversion.</param>
      <returns>Représentation sous forme de chaîne JSON de la valeur, encodée en octets UTF-8.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Convertit la valeur d’un type spécifié par un paramètre de type générique en chaîne JSON encodée en octets UTF-8.</summary>
      <param name="value">Valeur à convertir.</param>
      <param name="options">Options pour contrôler le comportement de conversion.</param>
      <typeparam name="TValue">Type de la valeur.</typeparam>
      <returns>Représentation sous forme de chaîne JSON de la valeur, encodée en octets UTF-8.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>Fournit des options à utiliser avec <see cref="T:System.Text.Json.JsonSerializer" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.JsonSerializerOptions" /> .</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>Obtient ou définit une valeur qui indique si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée) dans la charge utile JSON en cours de désérialisation.</summary>
      <returns>
        <see langword="true" /> si une virgule supplémentaire à la fin d’une liste de valeurs JSON dans un objet ou un tableau est autorisée (et ignorée); Sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>Obtient la liste des convertisseurs définis par l’utilisateur qui ont été inscrits.</summary>
      <returns>Liste des convertisseurs personnalisés.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>Obtient ou définit la taille de la mémoire tampon par défaut, en octets, à utiliser lors de la création de mémoires tampons temporaires.</summary>
      <returns>Taille de la mémoire tampon par défaut, en octets.</returns>
      <exception cref="T:System.ArgumentException">La taille de la mémoire tampon est inférieure à 1.</exception>
      <exception cref="T:System.InvalidOperationException">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>Obtient ou définit la stratégie utilisée pour convertir le nom de clé de <see cref="T:System.Collections.IDictionary" /> dans un autre format, tel que la casse mixte.</summary>
      <returns>Stratégie utilisée pour convertir le nom d’une clé de <see cref="T:System.Collections.IDictionary" /> dans un autre format.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>Obtient ou définit l’encodeur à utiliser lors de l’échappement de chaînes, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</summary>
      <returns>Encodage de caractères JavaScript.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>Retourne le convertisseur pour le type spécifié.</summary>
      <param name="typeToConvert">Type pour lequel retourner un convertisseur.</param>
      <returns>Premier convertisseur qui prend en charge le type donné, ou <see langword="null" /> s’il n’existe aucun convertisseur.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>Obtient ou définit une valeur qui détermine si des valeurs <see langword="null" /> sont ignorées pendant la sérialisation et la désérialisation. La valeur par défaut est <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> d’ignorer les valeurs null lors de la sérialisation et de la désérialisation ; Sinon, consultez langword = "false"/&gt;.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>Obtient une valeur qui détermine si des propriétés en lecture seule sont ignorées pendant la sérialisation. La valeur par défaut est <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> d’ignorer les propriétés en lecture seule lors de la sérialisation ; Sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>Obtient ou définit la profondeur maximale autorisée lors de la sérialisation ou de la désérialisation de code JSON, avec la valeur par défaut de 0 indiquant une profondeur maximale de 64.</summary>
      <returns>Profondeur maximale autorisée lors de la sérialisation ou de la désérialisation de JSON.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La profondeur maximale est définie avec une valeur négative.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>Obtient ou définit une valeur qui détermine si le nom d’une propriété utilise une comparaison qui ne respecte pas la casse pendant la désérialisation. La valeur par défaut est <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> comparer des noms de propriétés à l’aide d’une comparaison qui ne respecte pas la casse ; Sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>Obtient ou définit une valeur qui spécifie la stratégie utilisée pour convertir le nom d’une propriété d’un objet dans un autre format, par exemple, la casse mixte. Sinon, <see langword="null" /> pour laisser inchangés les noms de propriété.</summary>
      <returns>Une stratégie d’attribution de noms de propriété ou <see langword="null" /> pour ne pas modifier les noms de propriété.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>Obtient ou définit une valeur qui définit la façon dont les commentaires sont gérés pendant la désérialisation.</summary>
      <returns>Valeur qui indique si les commentaires sont autorisés, interdits ou ignorés.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">L’énum de gestion des commentaires est définie avec une valeur qui n’est pas prise en charge (ou qui n’est pas dans la plage d’énums <see cref="T:System.Text.Json.JsonCommentHandling" />).</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>Obtient ou définit une valeur qui définit si JSON doit utiliser l’impression en mode Pretty. Par défaut, JSON est sérialisé sans espace blanc supplémentaire.</summary>
      <returns>
        <see langword="true" /> si JSON doit être assez imprimé sur la sérialisation ; Sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Cette propriété a été définie après la sérialisation ou la désérialisation.</exception>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>Définit les différents jetons JSON qui composent un texte JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>Le type de jeton est une chaîne de commentaire.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>Le type de jeton est la fin d’un tableau JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>Le type de jeton est la fin d’un objet JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>Le type de jeton est le littéral JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>Il n’existe aucune valeur (contrairement à <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>Le type de jeton est le littéral JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>Le type de jeton est un nombre JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>Le type de jeton est un nom de propriété JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>Le type de jeton est le début d’un tableau JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>Le type de jeton est le début d’un objet JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>Le type de jeton est une chaîne JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>Le type de jeton est le littéral JSON true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>Spécifie le type de données d’une valeur JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>Tableau JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>La valeur JSON false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>La valeur JSON null.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>Nombre JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>Objet JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>Chaîne JSON.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>La valeur JSON true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>Il n’existe aucune valeur (contrairement à <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>Autorise l’utilisateur à définir un comportement personnalisé lors de l’écriture de code JSON en utilisant le <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>Obtient ou définit l’encodeur à utiliser lors de l’échappement de chaînes, ou <see langword="null" /> pour utiliser l’encodeur par défaut.</summary>
      <returns>Encodeur de caractère JavaScript utilisé pour substituer le comportement d’échappement.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>Obtient ou définit une valeur qui indique si le <see cref="T:System.Text.Json.Utf8JsonWriter" /> doit mettre en forme la sortie JSON, qui inclut la mise en retrait des jetons JSON imbriqués, l’ajout de nouvelles lignes et l’ajout d’espaces blancs entre les noms et les valeur de propriété.</summary>
      <returns>
        <see langword="true" /> pour mettre en forme la sortie JSON ; <see langword="false" /> à écrire sans espace blanc supplémentaire. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>Obtient ou définit une valeur qui indique si le <see cref="T:System.Text.Json.Utf8JsonWriter" /> doit ignorer la validation structurelle et autoriser l’utilisateur à écrire du code JSON non valide.</summary>
      <returns>
        <see langword="true" /> d’ignorer la validation structurelle et d’autoriser le JSON non valide ; <see langword="false" /> pour lever une <see cref="T:System.InvalidOperationException" /> lors d’une tentative d’écriture de JSON non valide.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>Fournit la classe de base pour les attributs de sérialisation.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>Crée une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>Convertit un objet ou une valeur vers ou depuis JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>En cas de remplacement dans une classe dérivée, détermine si l’instance de convertisseur peut convertir le type d’objet spécifié.</summary>
      <param name="typeToConvert">Type de l’objet pour vérifier s’il peut être converti par cette instance de convertisseur.</param>
      <returns>
        <see langword="true" /> si l’instance peut convertir le type d’objet spécifié ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>Convertit un objet ou une valeur vers ou depuis JSON.</summary>
      <typeparam name="T">Type de l’objet ou de la valeur géré par le convertisseur.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>Détermine si le type spécifié peut être converti.</summary>
      <param name="typeToConvert">Type avec lequel effectuer la comparaison.</param>
      <returns>
        <see langword="true" /> si le type peut être converti ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Lit et convertit le code JSON en type <typeparamref name="T" />.</summary>
      <param name="reader">Lecteur.</param>
      <param name="typeToConvert">Type à convertir.</param>
      <param name="options">Objet qui spécifie les options de sérialisation à utiliser.</param>
      <returns>Valeur convertie.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>Écrit une valeur spécifiée au format JSON.</summary>
      <param name="writer">Enregistreur dans lequel écrire.</param>
      <param name="value">Valeur à convertir en JSON.</param>
      <param name="options">Objet qui spécifie les options de sérialisation à utiliser.</param>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>En cas de placement sur une propriété ou un type, spécifie le type de convertisseur à utiliser.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> avec le type de convertisseur spécifié.</summary>
      <param name="converterType">Type du convertisseur.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>Obtient le type de <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />, ou <see langword="null" /> s’il a été créé sans type.</summary>
      <returns>Type de l' <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />ou <see langword="null" /> s’il a été créé sans type.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>En cas de substitution dans une classe dérivée et si <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> est <see langword="null" />, permet à la classe dérivée de créer un <see cref="T:System.Text.Json.Serialization.JsonConverter" /> afin de passer un état supplémentaire.</summary>
      <param name="typeToConvert">Type du convertisseur.</param>
      <returns>Convertisseur personnalisé.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>Prend en charge la conversion de plusieurs types en utilisant un modèle de fabrique.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>En cas de substitution dans une classe dérivée, initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Crée un convertisseur pour un type spécifié.</summary>
      <param name="typeToConvert">Type géré par le convertisseur.</param>
      <param name="options">Options de sérialisation à utiliser.</param>
      <returns>Convertisseur pour lequel <typeparamref name="T" /> est compatible avec <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>Lorsqu’elles sont placées sur une propriété de type <see cref="T:System.Collections.Generic.IDictionary`2" />, toutes les propriétés qui n’ont pas de membre correspondant sont ajoutées à ce dictionnaire pendant la désérialisation et écrites pendant la sérialisation.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>Instancie une nouvelle instance de la classe <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>Empêche une propriété d’être sérialisée ou désérialisée.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>Spécifie le nom de la propriété qui est présent dans le JSON lors de la sérialisation et de la désérialisation. Cela remplace toute stratégie de nommage spécifiée par <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> avec le nom de la propriété spécifié.</summary>
      <param name="name">Nom de la propriété.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>Obtient le nom de la propriété.</summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>Convertit les valeurs d’énumération en chaînes et inversement.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>Initialise une instance de la classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> avec la stratégie de nommage par défaut qui autorise les entiers.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>Initialise une instance de la classe <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> avec une stratégie de nommage spécifiée et une valeur qui indique si les valeurs d’énumération non définies sont autorisées.</summary>
      <param name="namingPolicy">Stratégie de nommage facultative pour l’écriture de valeurs enum.</param>
      <param name="allowIntegerValues">
        <see langword="true" /> pour autoriser les valeurs enum non définies ; sinon, <see langword="false" />. Quand la valeur est <see langword="true" />, si une valeur enum n’est pas définie, elle est générée sous forme de nombre plutôt que sous forme de chaîne.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>Détermine si le type spécifié peut être converti en enum.</summary>
      <param name="typeToConvert">Type à vérifier.</param>
      <returns>
        <see langword="true" /> si le type peut être converti ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Crée un convertisseur pour le type spécifié.</summary>
      <param name="typeToConvert">Type géré par le convertisseur.</param>
      <param name="options">Options de sérialisation à utiliser.</param>
      <returns>Convertisseur pour lequel <typeparamref name="T" /> est compatible avec <paramref name="typeToConvert" />.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>Fournit une API hautes performances pour un accès en transfert seul et en lecture seule à du texte JSON encodé en UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une séquence en lecture seule de texte encodé en UTF-8 et indique si l’entrée contient tout le texte à traiter.</summary>
      <param name="jsonData">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="isFinalBlock">
        <see langword="true" /> pour indiquer que la séquence d’entrée contient l’ensemble des données à traiter ; <see langword="false" /> pour indiquer que l’étendue d’entrée contient des données partielles avec davantage de données à suivre.</param>
      <param name="state">Objet qui contient l’état du lecteur. S’il s’agit du premier appel au constructeur, passe l’état par défaut ; sinon, transmet la valeur de la propriété <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> à partir de l’instance précédente du <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une séquence en lecture seule de texte encodé en UTF-8 à l’aide des options spécifiées.</summary>
      <param name="jsonData">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="options">Définit le comportement personnalisé du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui diffère de la RFC JSON (par exemple, la façon de gérer les commentaires ou la profondeur maximale autorisée lors de la lecture). Par défaut, <see cref="T:System.Text.Json.Utf8JsonReader" /> suit strictement la RFC JSON ; les commentaires dans le code JSON ne sont pas valides, et la profondeur maximale est de 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une étendue en lecture seule de texte encodé en UTF-8 et indique si l’entrée contient tout le texte à traiter.</summary>
      <param name="jsonData">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="isFinalBlock">
        <see langword="true" /> pour indiquer que la séquence d’entrée contient l’ensemble des données à traiter ; <see langword="false" /> pour indiquer que l’étendue d’entrée contient des données partielles avec davantage de données à suivre.</param>
      <param name="state">Objet qui contient l’état du lecteur. S’il s’agit du premier appel au constructeur, passe l’état par défaut ; sinon, transmet la valeur de la propriété <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> à partir de l’instance précédente du <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Text.Json.Utf8JsonReader" /> qui traite une étendue en lecture seule de texte encodé en UTF-8 à l’aide des options spécifiées.</summary>
      <param name="jsonData">Texte JSON encodé en UTF-8 à traiter.</param>
      <param name="options">Définit le comportement personnalisé du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui diffère de la RFC JSON (par exemple, la façon de gérer les commentaires ou la profondeur maximale autorisée lors de la lecture). Par défaut, <see cref="T:System.Text.Json.Utf8JsonReader" /> suit strictement la RFC JSON ; les commentaires dans le code JSON ne sont pas valides, et la profondeur maximale est de 64.</param>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>Obtient le nombre total d’octets consommés jusqu’à présent par cette instance du <see cref="T:System.Text.Json.Utf8JsonReader" />.</summary>
      <returns>Nombre total d’octets consommés jusqu’à présent.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>Obtient la profondeur du jeton actuel.</summary>
      <returns>Profondeur du jeton actuel.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>Obtient l’état <see cref="T:System.Text.Json.Utf8JsonReader" /> actuel à passer à un constructeur <see cref="T:System.Text.Json.Utf8JsonReader" /> avec davantage de données.</summary>
      <returns>État actuel du lecteur.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>Lit la prochaine valeur du jeton JSON de la source comme <see cref="T:System.Boolean" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.True" /> ; <see langword="false" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.False" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas une valeur booléenne (autrement dit, <see cref="F:System.Text.Json.JsonTokenType.True" /> ou <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.Byte" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Byte.MinValue" /> ou supérieur à <see cref="F:System.Byte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>Analyse la valeur actuelle du jeton JSON à partir de la source et décode la chaîne JSON encodée en Base64 en tant que tableau d’octets.</summary>
      <returns>Tableau d’octets qui représente la valeur actuelle du jeton JSON.</returns>
      <exception cref="T:System.InvalidOperationException">Le type du jeton JSON n’est pas une <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur n’est pas encodée en texte en Base64 et ne peut donc pas être décodée en octets.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>Analyse la valeur actuelle du jeton JSON à partir de la source en tant que commentaire, transcodé en <see cref="T:System.String" />.</summary>
      <returns>Commentaire qui représente la valeur actuelle du jeton JSON.</returns>
      <exception cref="T:System.InvalidOperationException">Le jeton JSON n’est pas un commentaire.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.DateTime" />.</summary>
      <returns>La valeur de date et heure, si l’intégralité de la valeur du jeton encodé en UTF-8 peut être correctement analysée.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON ne peut pas être lue comme <see cref="T:System.DateTime" />.
-ou-
L’intégralité de la valeur du jeton encodé UTF-8 ne peut pas être analysée pour obtenir une valeur <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>L’offset de date et heure, si l’intégralité de la valeur du jeton encodé en UTF-8 peut être correctement analysée.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON ne peut pas être lue comme <see cref="T:System.DateTimeOffset" />.
-ou-
L’intégralité de la valeur du jeton encodé UTF-8 ne peut pas être analysée pour obtenir une valeur <see cref="T:System.DateTimeOffset" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Decimal" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Decimal" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Decimal.MinValue" /> ou supérieur à <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Double" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Double.MinValue" /> ou supérieur à <see cref="F:System.Double.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Guid" />.</summary>
      <returns>La valeur GUID, si l’intégralité de la valeur du jeton encodé en UTF-8 peut être correctement analysée.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON est dans un format non pris en charge pour un GUID.
-ou-
L’intégralité de la valeur du jeton encodé UTF-8 ne peut pas être analysée pour obtenir une valeur <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.Int16" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int16.MinValue" /> ou supérieur à <see cref="F:System.Int16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int32" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int32.MinValue" /> ou supérieur à <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Int64" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Int64.MinValue" /> ou supérieur à <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.SByte" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.SByte.MinValue" /> ou supérieur à <see cref="F:System.SByte.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.Single" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.Single.MinValue" /> ou supérieur à <see cref="F:System.Single.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>Lit la prochaine valeur du jeton JSON de la source, non échappée et transcodée, comme une chaîne.</summary>
      <returns>Valeur du jeton analysée comme une chaîne, ou <see langword="null" /> si <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> est <see cref="F:System.Text.Json.JsonTokenType.Null" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas une chaîne (autrement dit, ni <see cref="F:System.Text.Json.JsonTokenType.String" />, ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, ni <see cref="F:System.Text.Json.JsonTokenType.Null" />).
-ou-
La chaîne JSON contient des octets UTF-8 non valides ou des substituts UTF-16 non valides.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>Analyse la valeur du jeton JSON actuelle de la source comme <see cref="T:System.UInt16" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Le format numérique de la valeur du jeton JSON est incorrect (par exemple, il contient une valeur fractionnaire ou est écrit en notation scientifique).
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt16.MinValue" /> ou supérieur à <see cref="F:System.UInt16.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt32" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt32.MinValue" /> ou supérieur à <see cref="F:System.UInt32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>Lit la prochaine valeur du jeton JSON de la source et l’analyse pour obtenir une valeur <see cref="T:System.UInt64" />.</summary>
      <returns>Valeur du jeton encodé en UTF-8 analysée pour obtenir une valeur <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">La valeur du jeton JSON est dans un format numérique incorrect. Par exemple, elle contient un nombre décimal ou est écrite en notation scientifique.
-ou-
La valeur du jeton JSON représente un nombre inférieur à <see cref="F:System.UInt64.MinValue" /> ou supérieur à <see cref="F:System.UInt64.MaxValue" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>Obtient une valeur qui indique quelle propriété <c>Value</c> utiliser pour obtenir la valeur du jeton.</summary>
      <returns>
        <see langword="true" /> si <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> doit être utilisé pour récupérer la valeur de jeton ; <see langword="false" /> si <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> doit être utilisé à la place.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>Obtient le mode de cette instance du <see cref="T:System.Text.Json.Utf8JsonReader" /> qui indique si toutes les données JSON ont été fournies ou s’il y a d’autres données à venir.</summary>
      <returns>
        <see langword="true" /> si le lecteur a été construit avec l’étendue d’entrée ou la séquence contenant l’ensemble des données JSON à traiter ; <see langword="false" /> si le lecteur a été construit avec une plage d’entrée ou une séquence qui peut contenir des données JSON partielles avec davantage de données à suivre.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>Obtient la <see cref="T:System.SequencePosition" /> actuelle dans la ReadOnlySequence&lt;byte&gt; de l’entrée encodée en UTF-8 fournie ou la <see cref="T:System.SequencePosition" /> par défaut si le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> a été construit avec un ReadOnlySpan&lt;byte&gt;.</summary>
      <returns>Le <see cref="T:System.SequencePosition" /> actuel dans le ReadOnlySequence d’entrée encodé UTF-8 fourni&lt;octet&gt; ou un <see cref="T:System.SequencePosition" /> par défaut si le struct <see cref="T:System.Text.Json.Utf8JsonReader" /> a été construit avec un&lt;d’octets ReadOnlySpan&gt;.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>Lit le prochain jeton JSON de la source d’entrée.</summary>
      <returns>
        <see langword="true" /> si le jeton a été correctement lu ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException">Un jeton JSON non valide selon la RFC JSON est détecté.
-ou-
La profondeur actuelle dépasse la limite récursive définie par la profondeur maximale.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>Ignore les enfants du jeton JSON actuel.</summary>
      <exception cref="T:System.InvalidOperationException">Le lecteur s’est vu donner des données partielles avec d’autres données à suivre (c’est-à-dire, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> est <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException">Un jeton JSON non valide a été trouvé en ignorant, selon la RFC JSON.
-ou-
La profondeur actuelle dépasse la limite récursive définie par la profondeur maximale.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>Obtient l’index à partir duquel commence le dernier jeton JSON traité (dans le texte d’entrée encodé en UTF-8 donné), en ignorant tout espace blanc.</summary>
      <returns>Index de départ du dernier jeton JSON traité dans le texte d’entrée encodé UTF-8 donné.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>Obtient le type du dernier jeton JSON traité dans le texte JSON encodé en UTF-8.</summary>
      <returns>Type du dernier jeton JSON traité.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Byte" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Byte" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source et décode la chaîne JSON encodée en Base64 en tant que tableau d’octets et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Lorsque cette méthode est retournée, contient la représentation binaire décodée du texte en Base64.</param>
      <returns>
        <see langword="true" /> si la totalité de la valeur de jeton est encodée en texte en Base64 valide et peut être décodée en octets ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le jeton JSON n’est pas une <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.DateTime" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.DateTime" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.DateTimeOffset" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.DateTimeOffset" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Decimal" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Decimal" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Double" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Double" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Guid" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Guid" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Int16" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int16" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Int32" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int32" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Int64" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Int64" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.SByte" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.SByte" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.Single" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.Single" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.UInt16" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt16" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.UInt32" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt32" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>Tente d’analyser la valeur du jeton JSON actuelle de la source en tant que <see cref="T:System.UInt64" /> et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="value">Quand cette méthode est retournée, contient la valeur analysée.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton encodé en UTF-8 toute entière peut être analysée correctement pour obtenir une valeur <see cref="T:System.UInt64" /> ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">La valeur du jeton JSON n’est pas un <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>Tente d’ignorer les enfants du jeton JSON actuel.</summary>
      <returns>
        <see langword="true" /> s’il y a suffisamment de données pour que les enfants soient ignorés ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.Text.Json.JsonException">Un jeton JSON non valide a été trouvé en ignorant, selon la RFC JSON.
ou
La profondeur actuelle dépasse la limite récursive définie par la profondeur maximale.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>Obtient la valeur brute du dernier jeton traité en tant que section ReadOnlySequence&lt;byte&gt; de la charge utile d’entrée, uniquement si le jeton est contenu dans plusieurs segments.</summary>
      <returns>Séquence en lecture seule d’octets.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>Obtient la valeur brute du dernier jeton traité en tant que section ReadOnlySpan&lt;byte&gt; de la charge utile d’entrée, si le jeton entre dans un seul segment ou si le lecteur a été construit avec une charge utile JSON contenue dans un ReadOnlySpan&lt;byte&gt;.</summary>
      <returns>Étendue d’octets en lecture seule.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Compare le texte encodé en UTF-8 dans une étendue en lecture seule d’octets à la valeur du jeton JSON sans séquence d’échappement dans la source et retourne une valeur qui indique s’ils correspondent.</summary>
      <param name="utf8Text">Texte encodé en UTF-8 avec lequel effectuer la comparaison.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton JSON dans la source correspond au texte de recherche encodé en UTF-8 ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le jeton JSON n’est pas une chaîne JSON (autrement dit, n’est ni <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>Compare le texte dans une étendue en lecture seule de caractères en lecture seule à la valeur du jeton JSON sans séquence d’échappement dans la source et retourne une valeur qui indique s’ils correspondent.</summary>
      <param name="text">Texte avec lequel comparer.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton JSON dans la source correspond au texte de recherche ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le jeton JSON n’est pas une chaîne JSON (autrement dit, n’est ni <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>Compare le texte de chaîne à la valeur du jeton JSON sans séquence d’échappement dans la source et retourne une valeur qui indique s’ils correspondent.</summary>
      <param name="text">Texte avec lequel comparer.</param>
      <returns>
        <see langword="true" /> si la valeur du jeton JSON dans la source correspond au texte de recherche ; sinon, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Le jeton JSON n’est pas une chaîne JSON (autrement dit, n’est ni <see cref="F:System.Text.Json.JsonTokenType.String" /> ni <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>Fournit une API hautes performances pour l’écriture en transfert seul et non mise en cache de texte JSON encodé en UTF-8.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> à l’aide du <see cref="T:System.Buffers.IBufferWriter`1" /> spécifié pour écrire les options de sortie et de personnalisation.</summary>
      <param name="bufferWriter">Destination du texte JSON écrit.</param>
      <param name="options">Définit le comportement personnalisé de <see cref="T:System.Text.Json.Utf8JsonWriter" />. Par défaut, il écrit le texte JSON au format réduit (aucun espace blanc) et vérifie que le texte JSON en cours d’écriture est structurellement valide, conformément à la RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Text.Json.Utf8JsonWriter" /> à l’aide du flux spécifié pour écrire les options de sortie et de personnalisation.</summary>
      <param name="utf8Json">Destination du texte JSON écrit.</param>
      <param name="options">Définit le comportement personnalisé de <see cref="T:System.Text.Json.Utf8JsonWriter" />. Par défaut, il écrit le texte JSON au format réduit (aucun espace blanc) et vérifie que le texte JSON en cours d’écriture est structurellement valide, conformément à la RFC JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> est <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>Obtient le nombre total d’octets validés dans la sortie par l’instance actuelle jusqu’ici.</summary>
      <returns>Nombre total d’octets validés à la sortie par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu’à présent.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>Obtient le nombre d’octets écrits par <see cref="T:System.Text.Json.Utf8JsonWriter" /> jusqu’ici qui n’ont pas encore été vidés dans la sortie ni validés.</summary>
      <returns>Nombre d’octets écrits jusqu’à présent par le <see cref="T:System.Text.Json.Utf8JsonWriter" /> qui n’ont pas encore été vidés dans la sortie et validés.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>Obtient la profondeur du jeton actuel.</summary>
      <returns>Profondeur du jeton actuel.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>Valide tout texte JSON restant qui n’a pas encore été vidé et libère toutes les ressources utilisées par l’instance actuelle.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>Valide de manière asynchrone tout texte JSON restant qui n’a pas encore été vidé et libère toutes les ressources utilisées par l’instance actuelle.</summary>
      <returns>Tâche représentant l’opération de suppression asynchrone.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>Valide le texte JSON écrit jusqu’ici, ce qui le rend visible pour la destination de sortie.</summary>
      <exception cref="T:System.ObjectDisposedException">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>Valide de manière asynchrone le texte JSON écrit jusqu’ici, ce qui le rend visible pour la destination de sortie.</summary>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche représentant l’opération de vidage asynchrone.</returns>
      <exception cref="T:System.ObjectDisposedException">L’instance a été supprimée.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>Obtient le comportement personnalisé lors de l’écriture de texte JSON à l’aide de cette instance. Indique s’il faut mettre en forme la sortie lors de l’écriture, s’il faut ignorer la validation structurelle du texte JSON, et les caractères d’échappement.</summary>
      <returns>Comportement personnalisé de cette instance du writer pour la mise en forme, la validation et l’échappement.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>Réinitialise l’état interne de cette instance en vue de sa réutilisation.</summary>
      <exception cref="T:System.ObjectDisposedException">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>Réinitialise l’état interne de cette instance en vue de sa réutilisation avec une nouvelle instance de <see cref="T:System.Buffers.IBufferWriter`1" />.</summary>
      <param name="bufferWriter">Destination du texte JSON écrit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>Réinitialise l’état interne de cette instance en vue de sa réutilisation avec une nouvelle instance de <see cref="T:System.IO.Stream" />.</summary>
      <param name="utf8Json">Destination du texte JSON écrit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L’instance a été supprimée.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le nom de propriété et la valeur d’octets bruts (sous forme de chaîne JSON encodée en base 64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom encodé en UTF-8 de la propriété à écrire.</param>
      <param name="bytes">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le nom de propriété et la valeur d’octets bruts (sous forme de chaîne JSON encodée en base 64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="bytes">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le nom de propriété et la valeur d’octets bruts (sous forme de chaîne JSON encodée en base 64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="bytes">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le nom de propriété préencodé et la valeur d’octets bruts (sous forme de chaîne JSON encodée en Base64) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom encodé en JSON de la propriété à écrire.</param>
      <param name="bytes">Données binaires à écrire sous forme de texte encodé Base64.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit la valeur d’octets bruts sous forme de chaîne JSON encodée en Base64 comme élément d’un tableau JSON.</summary>
      <param name="bytes">Données binaires à écrire sous forme d’un élément de chaîne JSON encodé en Base64 d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous forme d’un littéral JSON true ou false dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>Écrit une valeur <see cref="T:System.Boolean" /> (sous la forme d’un littéral JSON true ou false) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un littéral JSON true ou false comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit une valeur texte UTF-8 sous la forme d’un commentaire JSON.</summary>
      <param name="utf8Value">Valeur encodée au format UTF-8 à écrire sous la forme d’un commentaire JSON dans /*..*/.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.
-ou-
<paramref name="utf8Value" /> contient un délimiteur de commentaire (c.-à-d. */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>Écrit une valeur texte UTF-16 sous la forme d’un commentaire JSON.</summary>
      <param name="value">Valeur encodée au format UTF-16 à écrire sous la forme d’un commentaire JSON transcodé au format UTF-8 dans /*..*/.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.
-ou-
<paramref name="value" /> contient un délimiteur de commentaire (c.-à-d. */).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>Écrit la valeur texte de chaîne sous la forme d’un commentaire JSON.</summary>
      <param name="value">Valeur encodée au format UTF-16 à écrire sous la forme d’un commentaire JSON transcodé au format UTF-8 dans /*..*/.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.
-ou-
<paramref name="value" /> contient un délimiteur de commentaire (c.-à-d. */).</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="value" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>Écrit la fin d’un tableau JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>Écrit la fin d’un objet JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et le littéral null JSON dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et le littéral JSON null dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et le littéral JSON null dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>Écrit le nom de propriété préencodé et le littéral JSON null dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>Écrit le littéral JSON null comme élément d’un tableau JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>Écrit une valeur <see cref="T:System.Decimal" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>Écrit une valeur <see cref="T:System.Double" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>Écrit une valeur <see cref="T:System.Int32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>Écrit une valeur <see cref="T:System.Int64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>Écrit une valeur <see cref="T:System.Single" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>Écrit une valeur <see cref="T:System.UInt32" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>Écrit une valeur <see cref="T:System.UInt64" /> (sous la forme d’un nombre JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’un nombre JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le nom de propriété UTF-8 (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>Écrit le nom de propriété (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>Écrit le nom de propriété (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>Écrit le nom de propriété préencodé (sous la forme d’une chaîne JSON) dans la première partie d’une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>Écrit le début d’un tableau JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets comme clé.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 du tableau JSON à écrire.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule comme clé.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>Écrit le début d’un tableau JSON avec un nom de propriété spécifié sous la forme d’une chaîne comme clé.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 du tableau JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>Écrit le début d’un tableau JSON avec un nom de propriété préencodé comme clé.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON du tableau JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.
-ou-
La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>Écrit le début d’un objet JSON.</summary>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une étendue en lecture seule d’octets comme clé.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule comme clé.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>Écrit le début d’un objet JSON avec un nom de propriété spécifié sous la forme d’une chaîne comme clé.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La profondeur du JSON dépasse la profondeur maximale de 1 000.
-ou-
La validation est activée, et cette opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>Écrit le début d’un objet JSON avec un nom de propriété préencodé comme clé.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <exception cref="T:System.InvalidOperationException">La profondeur du texte JSON a dépassé la profondeur maximale de 1 000.
-ou-
La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>Écrit un nom de propriété UTF-8 et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Écrit un nom de propriété UTF-8 et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="utf8Value">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>Écrit un nom de propriété UTF-8 et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>Écrit un nom de propriété UTF-8 et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>Écrit le nom de propriété UTF-8 et la valeur préencodée (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="utf8PropertyName">Nom de propriété encodé en UTF-8 de l’objet JSON à écrire.</param>
      <param name="value">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, mais cette méthode entraînerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une étendue de caractères en lecture seule et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Écrit un nom de propriété UTF-16 et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="utf8Value">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Écrit un nom de propriété UTF-16 et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Écrit un nom de propriété UTF-16 et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>Écrit le nom de propriété et la valeur préencodée (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="utf8Value">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte UTF-16 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>Écrit un nom de propriété spécifié sous la forme d’une chaîne et une valeur texte de chaîne (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en UTF-16 de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’une chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La taille du nom ou de la valeur de la propriété spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>Écrit le nom de propriété et la valeur préencodée (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">Le nom de la propriété spécifiée est trop grand.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="propertyName" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>Écrit le nom de propriété préencodé et la valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Écrit le nom de propriété préencodé et la valeur texte UTF-8 (sous la forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="utf8Value">Valeur encodée en UTF-8 à écrire sous la forme d’une chaîne JSON dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>Écrit le nom de propriété préencodé et la valeur texte (sous forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>Écrit le nom de propriété préencodé et la valeur texte de chaîne (sous forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>Écrit le nom de propriété préencodé et la valeur préencodée (sous forme d’une chaîne JSON) dans une paire nom/valeur d’un objet JSON.</summary>
      <param name="propertyName">Nom de propriété encodé en JSON de l’objet JSON à transcoder et à écrire au format UTF-8.</param>
      <param name="value">Valeur encodée en JSON à écrire sous forme de chaîne JSON transcodée en UTF-8 dans la paire nom/valeur.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>Écrit une valeur <see cref="T:System.DateTime" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>Écrit une valeur <see cref="T:System.DateTimeOffset" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>Écrit une valeur <see cref="T:System.Guid" /> (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur à écrire sous la forme d’une chaîne JSON comme élément d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération provoquerait l’écriture d’un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit une valeur texte UTF-8 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="utf8Value">Valeur encodée en UTF-8 à écrire sous la forme d’un élément de chaîne JSON d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>Écrit une valeur texte UTF-16 (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>Écrit une valeur texte de chaîne (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur encodée en UTF-16 à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</param>
      <exception cref="T:System.ArgumentException">La valeur spécifiée est trop grande.</exception>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>Écrit la valeur texte préencodée (sous la forme d’une chaîne JSON) comme élément d’un tableau JSON.</summary>
      <param name="value">Valeur encodée en JSON à écrire sous la forme d’un élément de chaîne JSON encodé en UTF-8 d’un tableau JSON.</param>
      <exception cref="T:System.InvalidOperationException">La validation est activée, et l’opération d’écriture produirait un JSON non valide.</exception>
    </member>
  </members>
</doc>
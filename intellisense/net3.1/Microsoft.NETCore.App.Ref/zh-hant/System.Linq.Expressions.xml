<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>表示呼叫位置上的二元動態運算，並提供繫結語意和運算詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 類別的新執行個體。</summary>
      <param name="operation">二元運算類型。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態二元運算的繫結。</summary>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行二元動態運算的繫結。</summary>
      <param name="target">動態二元運算的目標。</param>
      <param name="arg">動態二元運算的右運算元。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行二元動態運算的繫結。</summary>
      <param name="target">動態二元運算的目標。</param>
      <param name="arg">動態二元運算的右運算元。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>二元運算類型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件，表示二元運算的類型。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>作業的結果型別。</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 上的一組繫結限制，符合它的動態繫結即為有效的繫結。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>將 <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體清單上的繫結限制結合成一組限制。</summary>
      <param name="contributingObjects">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體的清單，要從中結合限制。</param>
      <returns>一組新的繫結限制。</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>表示一組空的繫結限制。 這個欄位是唯讀的。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>建立繫結限制，該限制會檢查運算式中是否有任意不可變屬性。</summary>
      <param name="expression">表示限制的運算式。</param>
      <returns>新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>建立繫結限制，該限制會檢查運算式中是否有物件執行個體識別。</summary>
      <param name="expression">要測試的運算式。</param>
      <param name="instance">要測試的確切物件執行個體。</param>
      <returns>新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立繫結限制，該限制會檢查運算式中是否有執行階段型別識別。</summary>
      <param name="expression">要測試的運算式。</param>
      <param name="type">要測試的確切型別。</param>
      <returns>新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>將此繫結限制集與目前的繫結限制合併。</summary>
      <param name="restrictions">與目前繫結限制合併的繫結限制集。</param>
      <returns>一組新的繫結限制。</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>建立表示繫結限制的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示限制的運算式樹狀架構。</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>描述動態繫結處理序中的引數。</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>建立新的 CallInfo，表示動態繫結處理序中的引數。</summary>
      <param name="argCount">引數數目。</param>
      <param name="argNames">引數名稱。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>建立新的 <c>PositionalArgumentInfo</c>。</summary>
      <param name="argCount">引數數目。</param>
      <param name="argNames">引數名稱。</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>引數數目。</summary>
      <returns>引數數目。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>引數名稱。</summary>
      <returns>引數名稱的唯讀集合。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>判斷指定的 CallInfo 執行個體是否視為等於目前的執行個體。</summary>
      <param name="obj">要與目前執行個體比較的 <see cref="T:System.Dynamic.CallInfo" /> 執行個體。</param>
      <returns>如果指定的執行個體等於目前執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Dynamic.CallInfo" /> 的雜湊函式。</summary>
      <returns>目前 <see cref="T:System.Dynamic.CallInfo" /> 的雜湊碼。</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>表示呼叫位置上的轉換動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.ConvertBinder" /> 的新執行個體。</summary>
      <param name="type">要轉換的目標類型。</param>
      <param name="explicit">如果轉換應該考慮明確轉換，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態轉換作業的繫結。</summary>
      <param name="target">動態轉換作業的目標。</param>
      <param name="args">動態轉換作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>取得值，這個值表示轉換是否應該考慮明確轉換。</summary>
      <returns>
        <see langword="true" />如果有明確的轉換，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態轉換作業的繫結。</summary>
      <param name="target">動態轉換作業的目標。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態轉換作業的繫結。</summary>
      <param name="target">動態轉換作業的目標。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>要轉換的目標類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>表示呼叫位置上的動態建立作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 的新執行個體。</summary>
      <param name="callInfo">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態建立作業的繫結。</summary>
      <param name="target">動態建立作業的目標。</param>
      <param name="args">動態建立作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>取得位於呼叫位置的引數簽章。</summary>
      <returns>位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態建立作業的繫結。</summary>
      <param name="target">動態建立作業的目標。</param>
      <param name="args">動態建立作業的引數。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態建立作業的繫結。</summary>
      <param name="target">動態建立作業的目標。</param>
      <param name="args">動態建立作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>表示呼叫位置上的動態刪除索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新執行個體。</summary>
      <param name="callInfo">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態刪除索引作業的繫結。</summary>
      <param name="target">動態刪除索引作業的目標。</param>
      <param name="args">動態刪除索引作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>取得位於呼叫位置的引數簽章。</summary>
      <returns>位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態刪除索引作業的繫結。</summary>
      <param name="target">動態刪除索引作業的目標。</param>
      <param name="indexes">動態刪除索引作業的引數。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態刪除索引作業的繫結。</summary>
      <param name="target">動態刪除索引作業的目標。</param>
      <param name="indexes">動態刪除索引作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>表示呼叫位置上的動態刪除成員作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新執行個體。</summary>
      <param name="name">要刪除的成員名稱。</param>
      <param name="ignoreCase">如果名稱忽略大小寫後應該符合，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態刪除成員作業的繫結。</summary>
      <param name="target">動態刪除成員作業的目標。</param>
      <param name="args">動態刪除成員作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態刪除成員作業的繫結。</summary>
      <param name="target">動態刪除成員作業的目標。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態刪除成員作業的繫結。</summary>
      <param name="target">動態刪除成員作業的目標。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>
        <see langword="true" />如果字串比較應該忽略大小寫，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>取得要刪除的成員名稱。</summary>
      <returns>要刪除的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>表示動態繫結以及參與動態繫結之物件的繫結邏輯。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類別的新執行個體。</summary>
      <param name="expression">運算式，表示動態繫期過程中的這個 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <param name="restrictions">繫結限制集，符合它的繫結即為有效的繫結。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類別的新執行個體。</summary>
      <param name="expression">運算式，表示動態繫期過程中的這個 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <param name="restrictions">繫結限制集，符合它的繫結即為有效的繫結。</param>
      <param name="value">由 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>執行動態二元運算的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.BinaryOperationBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="arg">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 的執行個體，表示二元運算的右邊。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>執行動態轉換運算的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.ConvertBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態建立執行個體作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.CreateInstanceBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於建立執行個體作業的引數) 的陣列。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態刪除索引作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於刪除索引作業的索引) 的陣列。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>執行動態刪除成員作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.DeleteMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態取得索引作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.GetIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於取得索引作業的索引) 的陣列。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>執行動態取得成員作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.GetMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.InvokeBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於叫用作業的引數) 的陣列。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用成員作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於叫用成員作業的引數) 的陣列。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>執行動態設定索引作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.SetIndexBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 執行個體 (用於設定索引作業的索引) 的陣列。</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示設定索引作業的值。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>執行動態設定成員作業的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.SetMemberBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <param name="value">
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示設定成員作業的值。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>執行動態一元運算的繫結。</summary>
      <param name="binder">
        <see cref="T:System.Dynamic.UnaryOperationBinder" /> 的執行個體，表示動態運算的詳細資料。</param>
      <returns>新的 <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>為指定的物件建立中繼物件。</summary>
      <param name="value">要取得中繼物件的物件。</param>
      <param name="expression">運算式，表示動態繫期過程中的這個 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <returns>如果指定的物件實作 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> 而且不是來自目前 AppDomain 之外的遠端物件，則傳回該物件的特定中繼物件 (由 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> 所傳回)。 否則會建立及傳回不含任何限制的全新中繼物件。</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 類型的空陣列。 這個欄位是唯讀的。</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>運算式，表示動態繫結處理序期間的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <returns>運算式，表示動態繫結處理序期間的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>傳回所有動態成員名稱的列舉型別。</summary>
      <returns>動態成員名稱的清單。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>取得值，這個值表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 是否有執行階段值。</summary>
      <returns>
        <see langword="true" />如果具有運行時間值，則為， <see langword="false" />否則為。 <see cref="T:System.Dynamic.DynamicMetaObject" /></returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>取得 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的限制型別。</summary>
      <returns>如果有執行階段值則為 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />，否則為 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> 型別。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>繫結限制集，符合它的繫結即為有效的繫結。</summary>
      <returns>繫結限制集。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>取得執行階段值的 <see cref="T:System.Type" />，如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 沒有相關值則為 null。</summary>
      <returns>執行階段值的 <see cref="T:System.Type" /> 或 null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>由這個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</summary>
      <returns>由這個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的執行階段值。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>參與 <see cref="T:System.Dynamic.DynamicMetaObject" /> 繫結通訊協定的動態呼叫位置繫結器。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>在衍生類別中覆寫時，執行動態作業的繫結。</summary>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>在一組引數上執行動態作業的執行階段繫結。</summary>
      <param name="args">動態作業的引數陣列。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 執行個體的陣列，表示繫結處理序中呼叫位置的參數。</param>
      <param name="returnLabel">LabelTarget，用來傳回動態繫結的結果。</param>
      <returns>運算式，在動態作業引數上執行測試，而且如果測試有效，則會執行動態作業。 如果後續發生的動態作業測試失敗，則會重新呼叫繫結，為新引數型別產生新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>延後到所有動態作業引數的執行階段值都計算出來時，才執行作業的繫結。</summary>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>延後到所有動態作業引數的執行階段值都計算出來時，才執行作業的繫結。</summary>
      <param name="args">動態運算的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>取得會導致繫結更新的運算式。 它表示運算式的繫結不再是有效。 這通常用於在動態物件的「版本」已變更時。</summary>
      <param name="type">產生之運算式的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性；允許任何型別。</param>
      <returns>更新的運算式。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>提供基底類別，以便指定在執行階段時的動態行為。 這個類別必須是繼承類別，您無法直接將其執行個體化。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>讓衍生型別得以初始化 <see cref="T:System.Dynamic.DynamicObject" /> 型別的新執行個體。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>傳回所有動態成員名稱的列舉型別。</summary>
      <returns>包含動態成員名稱的序列。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。 此物件可以封裝在另一個 <see cref="T:System.Dynamic.DynamicMetaObject" /> 內部，以提供個別動作的自訂行為。 這個方法支援語言實作者適用的動態語言執行階段基礎結構，但不建議直接在程式碼中使用。</summary>
      <param name="parameter">運算式，表示分派給動態虛擬方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的物件。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>提供二進位運算的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定加法和乘法這類運算的動態行為。</summary>
      <param name="binder">提供二進位運算的相關資訊。 <c>binder.Operation</c> 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。 例如，對於 <c>sum = first + second</c> 陳述式 (其中 <c>first</c> 和 <c>second</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>binder.Operation</c> 會傳回 <c>ExpressionType.Add</c>。</param>
      <param name="arg">二進位運算的右運算元。 例如，針對 <c>sum = first + second</c> 陳述式 (其中 <c>first</c> 和 <c>second</c> 衍生自 <see langword="DynamicObject" /> 類別)，<paramref name="arg" /> 等於 <c>second</c>。</param>
      <param name="result">二進位運算的結果。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>提供型別轉換作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定物件型別轉換作業的動態行為。</summary>
      <param name="binder">提供轉換作業的相關資訊。 <c>binder.Type</c> 屬性提供物件必須轉換成的目標類型。 例如，對於 C# 中的 <c>(String)sampleObject</c> (Visual Basic 中的 <c>CType(sampleObject, Type)</c>) 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Type</c> 會傳回 <see cref="T:System.String" /> 類型。 <c>binder.Explicit</c> 屬性提供發生之轉換類型的資訊。 如果是明確轉換則會傳回 <see langword="true" />，如果是隱含轉換則會傳回 <see langword="false" />。</param>
      <param name="result">型別轉換作業的結果。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>提供作業的實作，這些作業會初始化動態物件的新執行個體。 這個方法並不適用於 C# 或 Visual Basic。</summary>
      <param name="binder">提供初始設定作業的相關資訊。</param>
      <param name="args">在初始設定期間傳遞給物件的引數。 例如，對於 <c>new SampleType(100)</c> 運算 (其中 <c>SampleType</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類型)，<c>args[0]</c> 等於 100。</param>
      <param name="result">初始設定的結果。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>提供依索引刪除物件之作業的實作。 這個方法並不適用於 C# 或 Visual Basic。</summary>
      <param name="binder">提供刪除的相關資訊。</param>
      <param name="indexes">要刪除的索引。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>提供刪除物件成員之作業的實作。 這個方法並不適用於 C# 或 Visual Basic。</summary>
      <param name="binder">提供刪除的相關資訊。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>提供依索引取得值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定索引作業的動態行為。</summary>
      <param name="binder">提供作業的相關資訊。</param>
      <param name="indexes">用於作業的索引。 例如，對於 C# 中的 <c>sampleObject[3]</c> (Visual Basic 中的 <c>sampleObject(3)</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>indexes[0]</c> 等於 3。</param>
      <param name="result">索引作業的結果。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大部分情況下，會擲回執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>提供取得成員值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定取得屬性值這類作業的動態行為。</summary>
      <param name="binder">提供已呼叫動態作業之物件的相關資訊。 <c>binder.Name</c> 屬性會提供在其中執行動態作業之成員的名稱。 例如，對於 <c>Console.WriteLine(sampleObject.SampleProperty)</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleProperty"。 <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="result">取得作業的結果。 例如，如果是針對屬性呼叫這個方法，您可以將屬性值指派給 <paramref name="result" />。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大部分情況下，會擲回執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>提供叫用物件之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定叫用物件或委派這類作業的動態行為。</summary>
      <param name="binder">提供叫用作業的相關資訊。</param>
      <param name="args">在叫用作業期間傳遞給物件的引數。 例如，對於 <c>sampleObject(100)</c> 作業 (其中<c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>args[0]</c> 等於 100。</param>
      <param name="result">物件引動過程的結果。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 在大多數情況下，會擲回語言特有執行階段例外狀況。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>提供叫用成員之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定呼叫方法這類作業的動態行為。</summary>
      <param name="binder">提供動態作業的相關資訊。 <c>binder.Name</c> 屬性會提供在其中執行動態作業之成員的名稱。 例如，對於 <c>sampleObject.SampleMethod(100)</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleMethod"。 <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="args">在叫用作業期間傳遞給物件成員的引數。 例如，對於 <c>sampleObject.SampleMethod(100)</c> 陳述式 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>args [0]</c> 等於 100。</param>
      <param name="result">成員引動過程的結果。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>提供依索引設定值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定依指定之索引存取物件之作業的動態行為。</summary>
      <param name="binder">提供作業的相關資訊。</param>
      <param name="indexes">用於作業的索引。 例如，對於 C# 中的 <c>sampleObject[3] = 10</c> (Visual Basic 中的 <c>sampleObject(3) = 10</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<c>indexes[0]</c> 等於 3。</param>
      <param name="value">要設定給具有所指定索引之物件的值。 例如，針對 C# 中的 <c>sampleObject[3] = 10</c> (Visual Basic 中的 <c>sampleObject(3) = 10</c>) 運算 (其中 <c>sampleObject</c> 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別)，<paramref name="value" /> 等於 10。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 在大多數情況下，會擲回語言特有執行階段例外狀況。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>提供設定成員值之作業的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定設定屬性值這類作業的動態行為。</summary>
      <param name="binder">提供已呼叫動態作業之物件的相關資訊。 <c>binder.Name</c> 屬性會提供獲得指派該值之成員的名稱。 例如，對於 <c>sampleObject.SampleProperty = "Test"</c> 陳述式 (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<c>binder.Name</c> 會傳回 "SampleProperty"。 <c>binder.IgnoreCase</c> 屬性會指定成員名稱是否區分大小寫。</param>
      <param name="value">要設定給成員的值。 例如，針對 <c>sampleObject.SampleProperty = "Test"</c> (其中 <c>sampleObject</c> 是衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別執行個體)，<paramref name="value" /> 會傳回 "Test"。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>提供一元運算的實作。 衍生自 <see cref="T:System.Dynamic.DynamicObject" /> 類別的類別可以覆寫這個方法，以指定負號、遞增或遞減這類運算的動態行為。</summary>
      <param name="binder">提供一元運算的相關資訊。 <c>binder.Operation</c> 屬性會傳回 <see cref="T:System.Linq.Expressions.ExpressionType" /> 物件。 例如，對於 <c>negativeNumber = -number</c> 陳述式 (其中 <c>number</c> 衍生自 <see langword="DynamicObject" /> 類別)，<c>binder.Operation</c> 會傳回 "Negate"。</param>
      <param name="result">一元運算的結果。</param>
      <returns>如果作業成功，則為 <see langword="true" />，否則為 <see langword="false" />。 如果這個方法傳回 <see langword="false" />，語言的執行階段繫結器會決定行為。 (在大多數情況下，將會擲回特定語言的執行階段例外狀況)。</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>表示物件，此物件的成員可以在執行階段時動態加入和移除。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>初始化沒有成員的新 <see langword="ExpandoObject" />。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>當屬性值變更時發生。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供的 MetaObject 將會分派給動態虛擬方法。 此物件可以封裝在另一個 MetaObject 內部，以提供個別動作的自訂行為。</summary>
      <param name="parameter">運算式，表示分派給動態虛擬方法的 MetaObject。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 型別的物件。</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>表示呼叫位置上的動態取得索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.GetIndexBinder" /> 的新執行個體。</summary>
      <param name="callInfo">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態取得索引作業的繫結。</summary>
      <param name="target">動態取得索引作業的目標。</param>
      <param name="args">動態取得索引作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>取得位於呼叫位置的引數簽章。</summary>
      <returns>位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態取得索引作業的繫結。</summary>
      <param name="target">動態取得索引作業的目標。</param>
      <param name="indexes">動態取得索引作業的引數。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態取得索引作業的繫結。</summary>
      <param name="target">動態取得索引作業的目標。</param>
      <param name="indexes">動態取得索引作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>表示呼叫位置上的動態取得成員作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.GetMemberBinder" /> 的新執行個體。</summary>
      <param name="name">要取得的成員名稱。</param>
      <param name="ignoreCase">如果名稱忽略大小寫後應該符合，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態取得成員作業的繫結。</summary>
      <param name="target">動態取得成員作業的目標。</param>
      <param name="args">動態取得成員作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態取得成員作業的繫結。</summary>
      <param name="target">動態取得成員作業的目標。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態取得成員作業的繫結。</summary>
      <param name="target">動態取得成員作業的目標。</param>
      <param name="errorSuggestion">繫結失敗時要使用的繫結結果或 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>如果忽略大小寫，則為 <see langword="true" />;否則，<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>取得要獲得的成員名稱。</summary>
      <returns>要取得的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>運算的結果類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表運算的結果類型。</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>表示可在執行階段繫結作業的動態物件。</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>傳回負責在此物件上執行繫結作業的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</summary>
      <param name="parameter">執行階段值的運算式樹狀架構表示。</param>
      <returns>要繫結此物件的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>表示動態取得成員作業的相關資訊，這項資料表示該取得成員是否要在屬性執行取得作業時叫用這些屬性。</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>取得值，這個值表示此取得成員作業是否應該在屬性執行取得作業時叫用這些屬性。 當這個介面不存在時，預設值為 true。</summary>
      <returns>
        <see langword="true" />如果此「取得成員」作業在執行「取得」作業時應該叫用屬性，則為。否則為<see langword="false" />。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>表示呼叫位置上的叫用動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeBinder" /> 的新執行個體。</summary>
      <param name="callInfo">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用作業的繫結。</summary>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>取得位於呼叫位置的引數簽章。</summary>
      <returns>位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>表示呼叫位置上的叫用成員動態作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的新執行個體。</summary>
      <param name="name">要叫用之成員的名稱。</param>
      <param name="ignoreCase">如果名稱比對應該忽略大小寫，則為 true，否則為 false。</param>
      <param name="callInfo">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態叫用成員作業的繫結。</summary>
      <param name="target">動態叫用成員作業的目標。</param>
      <param name="args">動態叫用成員作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>取得位於呼叫位置的引數簽章。</summary>
      <returns>位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態叫用作業的繫結。</summary>
      <param name="target">動態叫用作業的目標。</param>
      <param name="args">動態叫用作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果目標動態物件無法繫結，則會執行動態叫用成員作業的繫結。</summary>
      <param name="target">動態叫用成員作業的目標。</param>
      <param name="args">動態叫用成員作業的引數。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態叫用成員作業的繫結。</summary>
      <param name="target">動態叫用成員作業的目標。</param>
      <param name="args">動態叫用成員作業的引數。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>
        <see langword="true" />如果忽略大小寫，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>取得要叫用的成員名稱。</summary>
      <returns>要叫用之成員的名稱。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>表示呼叫位置上的動態設定索引作業，並提供繫結語意和作業詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.SetIndexBinder" /> 的新執行個體。</summary>
      <param name="callInfo">位於呼叫位置的引數簽章。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態設定索引作業的繫結。</summary>
      <param name="target">動態定索引作業的目標。</param>
      <param name="args">動態設定索引作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>取得位於呼叫位置的引數簽章。</summary>
      <returns>位於呼叫位置的引數簽章。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態設定索引作業的繫結。</summary>
      <param name="target">動態定索引作業的目標。</param>
      <param name="indexes">動態設定索引作業的引數。</param>
      <param name="value">要設定給集合的值。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>在衍生類別中覆寫時，如果目標動態物件無法繫結，則會執行動態設定索引作業的繫結。</summary>
      <param name="target">動態定索引作業的目標。</param>
      <param name="indexes">動態設定索引作業的引數。</param>
      <param name="value">要設定給集合的值。</param>
      <param name="errorSuggestion">如果繫結失敗，傳回要使用的繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>代表呼叫位置上的動態設定成員作業，並提供繫結語意和作業的詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.SetMemberBinder" /> 的新執行個體。</summary>
      <param name="name">要取得的成員名稱。</param>
      <param name="ignoreCase">如果名稱忽略大小寫後應該符合，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態設定成員作業的繫結。</summary>
      <param name="target">動態設定成員作業的目標。</param>
      <param name="args">動態設定成員作業的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態組成員作業的繫結。</summary>
      <param name="target">動態設定成員作業的目標。</param>
      <param name="value">要設定給成員的值。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行動態組成員作業的繫結。</summary>
      <param name="target">動態設定成員作業的目標。</param>
      <param name="value">要設定給成員的值。</param>
      <param name="errorSuggestion">繫結失敗時要使用的繫結結果或 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>取得值，指出字串比較是否應該忽略成員名稱的大小寫。</summary>
      <returns>
        <see langword="true" />如果忽略大小寫，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>取得要獲得的成員名稱。</summary>
      <returns>要取得的成員名稱。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>表示呼叫位置上的一元動態運算，並提供繫結語意和運算詳細資料。</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 類別的新執行個體。</summary>
      <param name="operation">一元運算類型。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>執行動態一元運算的繫結。</summary>
      <param name="target">動態作業的目標。</param>
      <param name="args">動態運算的引數陣列。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行一元動態運算的繫結。</summary>
      <param name="target">動態一元運算的目標。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果目標動態物件無法繫結，則會執行一元動態運算的繫結。</summary>
      <param name="target">動態一元運算的目標。</param>
      <param name="errorSuggestion">如果繫結失敗，則傳回繫結結果，否則為 null。</param>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" />，表示繫結結果。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>一元運算類型。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 的物件，表示一元運算的類型。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>作業的結果型別。</summary>
      <returns>表示作業之結果類型的 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>代表具有二元運算子的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>
        <see langword="true" />如果可以減少運算式樹狀架構節點，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>取得聯合或複合指派運算所使用的型別轉換函式。</summary>
      <returns>代表類型轉換函式的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>取得值，這個值指出運算式樹狀節點是否表示對運算子的「消除」呼叫。</summary>
      <returns>如果節點表示消除呼叫，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>取得值，這個值指出運算式樹狀節點是否表示對運算子的「消除」呼叫，該運算子的傳回型別對可為 Null 的型別已消除。</summary>
      <returns>如果運算子的傳回型別對可為 null 的型別消除，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>取得二元作業的左運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示二元運算的左運算元。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>取得二元作業的實作方法。</summary>
      <returns>代表實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>將二進位運算式節點精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>取得二元作業的右運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示二元運算的右運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="left">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 屬性。</param>
      <param name="conversion">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性。</param>
      <param name="right">結果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>表示區塊，其中包含可定義變數的運算式序列。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>取得這個區塊中的運算式。</summary>
      <returns>唯讀集合，包含這個區塊中的所有運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>取得這個區塊中的最後一個運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示這個區塊中的最後一個運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="variables">結果的 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 屬性。</param>
      <param name="expressions">結果的 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 屬性。</param>
      <returns>如果沒有變更任何子系則為這個運算式，否則為具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>取得這個區塊中定義的變數。</summary>
      <returns>唯讀集合，包含這個區塊中定義的所有變數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>表示 try 區塊中的 catch 陳述式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>取得 catch 區塊的主體。</summary>
      <returns>表示 catch 主體的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>取得 <see cref="T:System.Linq.Expressions.CatchBlock" /> 篩選條件的主體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示 <see cref="T:System.Linq.Expressions.CatchBlock" /> 篩選條件的主體。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>取得這個處理常式所攔截 <see cref="T:System.Exception" /> 的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示這個處理常式所攔截 <see cref="T:System.Exception" /> 的型別。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Object" /></summary>
      <returns>
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="variable">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 屬性。</param>
      <param name="filter">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 屬性。</param>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>取得這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件，表示這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>代表具有條件運算子的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>如果測試評估為 <see langword="false" />，則取得運算式來執行。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要執行的運算式 (如果測試為 <see langword="false" />)。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>如果測試評估為 <see langword="true" />，則取得運算式來執行。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要執行的運算式 (如果測試為 <see langword="true" />)。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>傳回此運算式的節點類型。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>取得條件運算的測試。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示條件運算的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立類似這個運算式的新運算式，但使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="test">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 屬性。</param>
      <param name="ifTrue">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性。</param>
      <param name="ifFalse">結果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性。</param>
      <returns>如果沒有變更任何子系則為這個運算式，否則為具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>代表具有常數值的運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>取得常數運算式的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 等於表示之運算式的值。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>發出或清除偵錯資訊的序列點。 這可讓偵錯工具在偵錯時反白顯示正確的原始程式碼。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>取得表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</summary>
      <returns>表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾欄。</summary>
      <returns>用來產生包裝運算式的程式碼結尾欄號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾行。</summary>
      <returns>用來產生包裝運算式的程式碼結尾行號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>取得值，這個值表示 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用來清除序列點。</summary>
      <returns>
        <see langword="true" />如果是用於清除序列點，則為， <see langword="false" />否則為。 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始欄。</summary>
      <returns>用來產生包裝運算式的程式碼起始欄號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>取得這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。</summary>
      <returns>用來產生包裝運算式的程式碼起始行號。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>表示型別的預設值或空運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>代表動態運算。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>取得此動態作業的引數。</summary>
      <returns>包含此動態作業引數的唯讀集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>取得可判斷動態網站之執行階段行為的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />。</summary>
      <returns>可判斷動態網站之執行階段行為的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>取得 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <param name="arg3">傳遞至動態運算的第四個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態運算的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和兩個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <param name="arg3">傳遞至動態運算的第四個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>傳回此運算式的節點類型。 覆寫此方法時，擴充節點應傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>傳回運算式樹狀節點的引數數目。 您不應該使用這個成員。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>傳回位於索引的引數，如果索引超出範圍則擲回引數。 您不應該使用這個成員。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index">引數的索引。</param>
      <returns>傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>選擇性地建立 CallSite，並針對 DynamicExpression 的多形內嵌快取傳回 CallSite。 您不應該使用這個成員。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns>傳回 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>重寫這個節點，以提供的值取代動態運算式的引數。 <paramref name="args" /> 的數目必須符合目前的運算式數目。 您不應該使用這個類型。 它只有在組件重構時為公用，且使用於內部以取得效能最佳化。 這個 Helper 方法可在呼叫位置所使用之 DynamicExpression 的衍生特定實作類別之外重寫節點。</summary>
      <param name="args">引數。</param>
      <returns>傳回重寫的運算式 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>比較傳送到此參數的值 <paramref name="arguments" />和 <see langword="Arguments" /> 目前執行個體的 <see langword="DynamicExpression" /> 屬性。 如果參數和屬性的值相等，則會傳回目前的執行個體。 如果不相等，會傳回新的 <see langword="DynamicExpression" /> 執行個體，這和目前的執行個體完全相同，但 <see langword="Arguments" /> 屬性設定為 <paramref name="arguments" /> 參數的值。</summary>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 屬性。</param>
      <returns>如果未變更任何子系，則為這個運算式；否則為已更新子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>代表動態運算式樹狀結構的造訪者或重寫器。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回 <see cref="T:System.Linq.Expressions.Expression" />，修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>表示 <see cref="T:System.Collections.IEnumerable" /> 集合中單一項目的初始設定式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>取得可用來將項目加入 <see cref="T:System.Collections.IEnumerable" /> 集合的執行個體方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，代表會將項目加入集合的執行個體方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>取得引數集合，這些引數會傳遞到將項目加入至 <see cref="T:System.Collections.IEnumerable" /> 集合的方法。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，表示將項目加入至集合之方法的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index">引數的索引。</param>
      <returns>傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>傳回 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的文字表示。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 物件的文字表示。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>提供基底類別，表示運算式樹狀架構節點的類別可由此基底類別衍生。 它也包含 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) Factory 方法來建立各種節點類型。 這是 <see langword="abstract" /> 類別。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>建構 <see cref="T:System.Linq.Expressions.Expression" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.Expression" /> 類別的新執行個體。</summary>
      <param name="nodeType">
        <see cref="T:System.Linq.Expressions.ExpressionType" /> 可設定為節點類型。</param>
      <param name="type">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術加法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Addition 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術加法運算。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的加法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的加法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術加法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Addition 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術加法運算。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> ，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的加法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="AND" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="AND" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="AND" />。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="AND" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第一個運算元計算結果為 <see langword="AND" /> 時才求第二個運算元之值的 <see langword="true" /> 條件運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="AND" /> 運算子。
-或-
<paramref name="left" />.Type 和 <paramref name="right" />.Type 是不相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表只在第一個運算元解析為 true 時才評估第二個運算元的條件 <see langword="AND" /> 運算。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="AND" /> 運算子。
-或-
<paramref name="method" /> 為 <see langword="null" />，且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元 AND 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" /> 以存取多維陣列。</summary>
      <param name="array">表示多維陣列的運算式。</param>
      <param name="indexes">包含用於對陣列進行索引之運算式的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" /> 以存取陣列。</summary>
      <param name="array">表示要編制索引之陣列的運算式。</param>
      <param name="indexes">包含用於對陣列進行索引之運算式的陣列。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表將陣列索引運算子套用到陣序規範大於 1 的陣列。</summary>
      <param name="array">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列類型。
-或-
<paramref name="array" />.Type 的陣序規範不符合 <paramref name="indexes" /> 中的項目數。
-或-
<paramref name="indexes" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不代表 <see cref="T:System.Int32" /> 類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表將陣列索引運算子套用到陣序規範 1 的陣列。</summary>
      <param name="array">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="index">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="index" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列類型。
-或-
<paramref name="array" />.Type 代表其陣序規範不為 1 的陣列類型。
-或-
<paramref name="index" />.Type 不代表 <see cref="T:System.Int32" /> 類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表將陣列索引運算子套用到多維陣列。</summary>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 執行個體 (用於陣列索引運算的索引) 的陣列。</param>
      <param name="indexes">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列類型。
-或-
<paramref name="array" />.Type 的陣序規範不符合 <paramref name="indexes" /> 中的項目數。
-或-
<paramref name="indexes" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不代表 <see cref="T:System.Int32" /> 類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表用於取得一維陣列長度的運算式。</summary>
      <param name="array">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性等於 <paramref name="array" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不代表陣列類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberAssignment" />，代表初始化欄位或屬性。</summary>
      <param name="member">要將 <see cref="T:System.Reflection.MemberInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等於 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。
-或-
<paramref name="member" /> 所表示的屬性沒有 <see langword="set" /> 存取子。
-或-
無法將 <paramref name="expression" />.Type 指派給 <paramref name="member" /> 代表的欄位或屬性類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberAssignment" />，代表使用屬性存取子方法初始化成員。</summary>
      <param name="propertyAccessor">代表屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，代表在 <paramref name="propertyAccessor" /> 中存取的屬性，以及將 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性設定為 <paramref name="expression" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。
-或-
<paramref name="propertyAccessor" /> 所存取的屬性沒有 <see langword="set" /> 存取子。
-或-
無法將 <paramref name="expression" />.Type 指派給 <paramref name="member" /> 代表的欄位或屬性類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定的運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含兩個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0">區塊中的第一個運算式。</param>
      <param name="arg1">區塊中的第二個運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含三個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0">區塊中的第一個運算式。</param>
      <param name="arg1">區塊中的第二個運算式。</param>
      <param name="arg2">區塊中的第三個運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含四個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0">區塊中的第一個運算式。</param>
      <param name="arg1">區塊中的第二個運算式。</param>
      <param name="arg2">區塊中的第三個運算式。</param>
      <param name="arg3">區塊中的第四個運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立包含五個運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="arg0">區塊中的第一個運算式。</param>
      <param name="arg1">區塊中的第二個運算式。</param>
      <param name="arg2">區塊中的第三個運算式。</param>
      <param name="arg3">區塊中的第四個運算式。</param>
      <param name="arg4">區塊中的第五個運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>建立包含指定的運算式但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定的運算式、有指定之結果類型、但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type">區塊的結果類型。</param>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type">區塊的結果類型。</param>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>建立包含指定之變數和運算式的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type">區塊的結果類型。</param>
      <param name="variables">區塊中的變數。</param>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立包含指定的運算式、有指定之結果類型、但沒有任何變數的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</summary>
      <param name="type">區塊的結果類型。</param>
      <param name="expressions">區塊中的運算式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>建立表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 break 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 break 陳述式。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Break、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立代表呼叫不採用任何引數之方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體方法呼叫的執行個體 (對 <see langword="null" /> (在 Visual Basic 中為 <see langword="static" />) 方法會傳遞 <see langword="Shared" />)。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 <see langword="null" />。
-或-
<paramref name="instance" /> 為 <see langword="null" /> ， <paramref name="method" /> 則代表執行個體方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立代表呼叫至採用引數之方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> (針對 <see langword="null" /> (在 Visual Basic 中為 <see langword="static" />) 方法傳遞 <see langword="Shared" />)。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 <see langword="null" />。
-或-
<paramref name="instance" /> 為 <see langword="null" /> ， <paramref name="method" /> 則代表執行個體方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告類型。
-或-
<paramref name="arguments" /> 中的項目數不等於 <paramref name="method" />所代表之方法的參數數目。
-或-
<paramref name="arguments" /> 的一或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用兩個引數的方法。</summary>
      <param name="instance">為執行個體呼叫指定執行個體的 <see cref="T:System.Linq.Expressions.Expression" />。 (對靜態方法 (在 Visual Basic 中為共用方法) 傳遞 Null)。</param>
      <param name="method">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用三個引數的方法。</summary>
      <param name="instance">為執行個體呼叫指定執行個體的 <see cref="T:System.Linq.Expressions.Expression" />。 (對靜態方法 (在 Visual Basic 中為共用方法) 傳遞 Null)。</param>
      <param name="method">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>建立代表呼叫至採用引數之方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，指定執行個體方法呼叫的執行個體 (對 <see langword="null" /> (在 Visual Basic 中為 <see langword="static" />) 方法會傳遞 <see langword="Shared" />)。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 <see langword="null" />。
-或-
<paramref name="instance" /> 為 <see langword="null" />，<paramref name="method" /> 則代表執行個體方法。
-或-
<paramref name="arguments" /> 不是 <see langword="null" />，且它的一或多個子項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 無法指派給 <paramref name="method" /> 所代表之方法的宣告類型。
-或-
<paramref name="arguments" /> 中的項目數不等於 <paramref name="method" />所代表之方法的參數數目。
-或-
<paramref name="arguments" /> 的一或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表透過呼叫適當的 Factory 方法來呼叫方法。</summary>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />，將搜尋其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性值中的特定方法。</param>
      <param name="methodName">方法的名稱。</param>
      <param name="typeArguments">
        <see cref="T:System.Type" /> 物件的陣列，這些物件可指定泛型方法的類型參數。 當 methodName 指定非泛型方法時，這個引數應該為 Null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，這個陣列代表方法的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性等於 <paramref name="instance" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 設定為代表指定執行個體方法的 <see cref="T:System.Reflection.MethodInfo" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 設定為指定的引數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 或 <paramref name="methodName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="methodName" />.Type 或其基底類型中找不到名稱為 <paramref name="typeArguments" />、其類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="instance" /> 的方法。
-或-
<paramref name="methodName" />.Type 或其基底類型中找到多個名稱為 <paramref name="typeArguments" />、類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="instance" /> 的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫靜態方法 (在 Visual Basic 中為共用方法)。</summary>
      <param name="method">表示目標方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 的集合，代表呼叫引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用一個引數的 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法。</summary>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用兩個引數的靜態方法。</summary>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用三個引數的靜態方法。</summary>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用四個引數的靜態方法。</summary>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">表示第四個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫採用五個引數的靜態方法。</summary>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">表示第一個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">表示第二個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">表示第三個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">表示第四個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">表示第五個引數的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表呼叫有引數的 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法。</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，代表 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法，將 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為與之相等。</param>
      <param name="arguments">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 中的項目數不等於 <paramref name="method" />所代表之方法的參數數目。
-或-
<paramref name="arguments" /> 的一或多個項目無法指派給 <paramref name="method" /> 所代表之方法的對應參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，代表透過呼叫適當的 Factory 方法來呼叫 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法。</summary>
      <param name="type">包含所指定 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法的型別。</param>
      <param name="methodName">方法的名稱。</param>
      <param name="typeArguments">
        <see cref="T:System.Type" /> 物件的陣列，這些物件可指定泛型方法的類型參數。 當 methodName 指定非泛型方法時，這個引數應該為 Null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，這個陣列代表方法的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 屬性設定為 <see cref="T:System.Reflection.MethodInfo" />，代表指定的 <see langword="static" /> (在 Visual Basic 中則為 <see langword="Shared" />) 方法，且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性設定為指定的引數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="methodName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="methodName" /> 或其基底類型中找不到名稱為 <paramref name="typeArguments" />、類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="type" /> 的方法。
-或-
<paramref name="methodName" /> 或其基底類型中找到多個名稱為 <paramref name="typeArguments" />、類型參數符合 <paramref name="arguments" />，且參數類型符合 <paramref name="type" /> 的方法。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>表示節點可精簡為更簡單的節點。 如果傳回 true，則可呼叫 Reduce() 以產生精簡的形式。</summary>
      <returns>
        <see langword="true" /> 如果可以減少節點，則為，否則，<see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表包含已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式，以便用於處理常式主體。</summary>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body">catch 陳述式的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表包含 <see cref="T:System.Exception" /> 篩選條件和已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式。</summary>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body">catch 陳述式的主體。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>建立代表 catch 陳述式的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <param name="type">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch 陳述式的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表包含 <see cref="T:System.Exception" /> 篩選條件但沒有已攔截 <see cref="T:System.Exception" /> 物件參考的 catch 陳述式。</summary>
      <param name="type">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch 陳述式的主體。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>建立用於清除序列點的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="document">表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的執行個體，用於清除序列點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表聯合運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示參考類型或可為 Null 的實值類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 無法相互轉換。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>指定轉換函式，建立代表聯合運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 無法相互轉換。
-或-
<paramref name="conversion" /> 不是 <see langword="null" />，且 <paramref name="conversion" />.Type 為委派類型，其採用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示參考類型或可為 Null 的實值類型。
-或-
<paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的類型無法指派至委派類型 <paramref name="conversion" />.Type 的參數類型。
-或-
<paramref name="right" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不等於委派類型 <paramref name="conversion" />.Type 的傳回類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示條件陳述式的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <param name="test">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" />、<paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type 不是 <see cref="T:System.Boolean" />。
-或-
<paramref name="ifTrue" />.Type 不等於 <paramref name="ifFalse" />.Type。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立表示條件陳述式的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <param name="test">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為指定的值。</summary>
      <param name="value">要將 <see cref="T:System.Object" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，而 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</summary>
      <param name="value">要將 <see cref="T:System.Object" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，且 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不為 <see langword="null" />，且 <paramref name="type" /> 無法從 <paramref name="value" /> 的動態類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>建立代表 continue 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，代表含指定之類型的 continue 陳述式。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立代表類型轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>建立代表轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />，此轉換作業已指定實作方法。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。
-或-
<paramref name="expression" />.Type 無法指派給 <paramref name="method" /> 所代表方法的引數類型。
-或-
<paramref name="method" /> 所代表方法的傳回類型無法指派給 <paramref name="type" />。
-或-
<paramref name="expression" />.Type 或 <paramref name="type" /> 是不可為 Null 的實值類型，且對應之不可為 Null 的實值類型不等於 <paramref name="method" /> 所表示之方法的引數類型或傳回類型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">已找到一個以上的方法符合 <paramref name="method" /> 說明。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立代表轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />；若目標類型已溢位，此運算式便會擲回例外狀況。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>建立代表轉換作業的 <see cref="T:System.Linq.Expressions.UnaryExpression" />，如果目標類型已溢位，且已指定此作業的實作方法，則此作業會擲回例外狀況。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="expression" />.Type 和 <paramref name="type" /> 之間未定義轉換運算子。
-或-
<paramref name="expression" />.Type 無法指派給 <paramref name="method" /> 所代表方法的引數類型。
-或-
<paramref name="method" /> 所代表方法的傳回類型無法指派給 <paramref name="type" />。
-或-
<paramref name="expression" />.Type 或 <paramref name="type" /> 是不可為 Null 的實值類型，且對應之不可為 Null 的實值類型不等於 <paramref name="method" /> 所表示之方法的引數類型或傳回類型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">已找到一個以上的方法符合 <paramref name="method" /> 說明。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的時間範圍建立 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="document">表示原始程式檔的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。 必須大於 0。</param>
      <param name="startColumn">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始欄。 必須大於 0。</param>
      <param name="endLine">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾行。 必須大於或等於起始行。</param>
      <param name="endColumn">這個 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的結尾欄。 如果結尾行與起始行相同，則結尾欄必須大於或等於起始欄。 在任何情況下，都必須大於 0。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表運算式遞減 1。</summary>
      <param name="expression">要遞減的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>代表遞減後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表運算式遞減 1。</summary>
      <param name="expression">要遞減的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>代表遞減後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的類型。</summary>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，而 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的類型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表算術除法運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Division 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立代表算術除法運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> ，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的除法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表不含溢位檢查的除法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表不含溢位檢查的除法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，代表不含溢位檢查的除法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <param name="arg3">傳遞至動態運算的第四個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="returnType">動態運算式的結果類型。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>指定 <see cref="T:System.Linq.Expressions.ElementInit" /> 做為第二個引數，建立 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="addMethod">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">未將 <paramref name="addMethod" /> 所代表的方法命名為 "Add" (不區分大小寫)。
-或-
<paramref name="addMethod" /> 所代表的方法不是執行個體方法。
-或-
<paramref name="arguments" /> 所包含的項目數與 <paramref name="addMethod" /> 所代表之方法的參數數目不同。
-或-
<paramref name="arguments" /> 的一或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="addMethod" /> 所代表之方法的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>指定值陣列做為第二個引數，建立 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <param name="addMethod">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 物件陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">addMethod 所表示的方法名稱不是 "Add" (不區分大小寫)。
-或-
addMethod 所表示的方法不是執行個體方法。
-或-
引數包含的項目數目與 addMethod 所表示之方法的參數數目不同。
-或-
<paramref name="arguments" /> 的一或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="addMethod" /> 所代表之方法的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>建立具有 <see cref="T:System.Void" /> 類型的空運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義等號比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立代表相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義等號比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立表示位元 <see langword="XOR" /> 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 <see langword="XOR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立表示位元 <see langword="XOR" /> 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義類型 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的 <see langword="XOR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立代表位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立代表位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>使用 <c>op_ExclusiveOr</c> 作為使用者定義型別，建立代表位元 XOR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>建立代表存取欄位的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 若為 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，<paramref name="expression" /> 必須是 <see langword="null" />。</param>
      <param name="field">要將 <see cref="T:System.Reflection.FieldInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> 為 <see langword="null" />。
-或-
<paramref name="field" /> 所表示的欄位不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，且 <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 無法指派給 <paramref name="field" /> 所代表之欄位的宣告類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，代表存取可指定欄位名稱的欄位。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="fieldName" /> 的欄位。 如果是靜態欄位，可以是 Null。</param>
      <param name="fieldName">要存取的欄位名稱。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.FieldInfo" />，代表 <paramref name="fieldName" /> 所表示的欄位。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="fieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" />.Type 或其基底類型中沒有定義名為 <paramref name="expression" /> 的欄位。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>建立代表存取欄位的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">欄位的包含物件。 如果是靜態欄位，可以是 Null。</param>
      <param name="type">包含欄位的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">要存取的欄位。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>建立 <see cref="T:System.Type" /> 物件，這個物件代表具有特定型別引數的泛型 <c>System.Action</c> 委派類型。</summary>
      <param name="typeArgs">最多包含十六個 <see cref="T:System.Type" /> 物件的陣列，指定 <see langword="System.Action" /> 委派類型的類型引數。</param>
      <returns>
        <c>System.Action</c> 委派的類型，具有指定的型別引數。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含十六個以上的項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>取得 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定型別引數的泛型 <c>System.Func</c> 或 <c>System.Action</c> 委派類型。</summary>
      <param name="typeArgs">委派的類型引數。</param>
      <returns>委派類型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定型別引數的泛型 <c>System.Func</c> 委派類型。 最後一個類型引數指定已建立之委派的傳回類型。</summary>
      <param name="typeArgs">包含一到十七個 <see cref="T:System.Type" /> 物件的陣列，指定 <see langword="System.Func" /> 委派類型的類型引數。</param>
      <returns>
        <c>System.Func</c> 委派的類型，具有指定的型別引數。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含少於一個或多過十七個項目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>建立表示 "go to" 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為指定的值，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立表示 "go to" 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 "go to" 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 "go to" 陳述式。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Goto、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為指定的值、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表「大於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立代表「大於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表「大於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「大於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立代表「大於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" /> ，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的「大於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，代表具有 <see langword="if" /> 陳述式的條件區塊。</summary>
      <param name="test">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 屬性設定為指定的值。 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性已設定為預設運算式，而這個方法傳回之結果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的類型為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，代表具有 <see langword="if" /> 和 <see langword="else" /> 陳述式的條件區塊。</summary>
      <param name="test">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 屬性設定為指定的值。 這個方法所傳回之結果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的類型為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示運算式值遞增 1。</summary>
      <param name="expression">要遞增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>表示遞增後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表運算式遞增 1。</summary>
      <param name="expression">要遞增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>表示遞增後運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.InvocationExpression" />，將委派或 Lambda 運算式套用至引數運算式清單。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，代表要套用的委派或 Lambda 運算式。</param>
      <param name="arguments">包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，代表要套用委派或 Lambda 運算式的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.InvocationExpression" />，可將指定的委派或 Lambda 運算式套用至所提供的引數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不代表委派類型或 <see cref="T:System.Linq.Expressions.Expression`1" />。
-或-
<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="expression" /> 所表示之委派的對應參數類型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 包含的項目數與 <paramref name="expression" /> 所表示委派的參數清單不同。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.InvocationExpression" />，將委派或 Lambda 運算式套用至引數運算式清單。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，代表要套用的委派或 Lambda 運算式。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，代表要套用委派或 Lambda 運算式的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.InvocationExpression" />，可將指定的委派或 Lambda 運算式套用至所提供的引數。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不代表委派類型或 <see cref="T:System.Linq.Expressions.Expression`1" />。
-或-
<paramref name="arguments" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="expression" /> 所表示之委派的對應參數類型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 包含的項目數與 <paramref name="expression" /> 所表示委派的參數清單不同。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>傳回運算式是否評估為 false。</summary>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>傳回運算式是否評估為 false。</summary>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>傳回運算式是否評估為 true。</summary>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>傳回運算式是否評估為 true。</summary>
      <param name="expression">要評估的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含 void 類型但沒有名稱的標籤。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelExpression" />，代表沒有預設值的標籤。</summary>
      <param name="target">這個 <see cref="T:System.Linq.Expressions.LabelTarget" /> 將與之產生關聯的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <returns>沒有預設值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelExpression" />，代表包含指定之預設值的標籤。</summary>
      <param name="target">這個 <see cref="T:System.Linq.Expressions.LabelTarget" /> 將與之產生關聯的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <param name="defaultValue">透過一般控制流程到達標籤時，這個 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</param>
      <returns>包含指定之預設值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含 void 類型和指定之名稱的標籤。</summary>
      <param name="name">標籤名稱。</param>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含指定之類型的標籤。</summary>
      <param name="type">跳至標籤時所傳遞值的類型。</param>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.LabelTarget" />，代表包含指定之類型和名稱的標籤。</summary>
      <param name="type">跳至標籤時所傳遞值的類型。</param>
      <param name="name">標籤名稱。</param>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>先從運算式主體建構委派型別、指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>先從運算式主體建構委派型別、指出是否套用 tail 呼叫最佳化的參數與參數運算式的陣列，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">陣列，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>先從運算式主體建構委派型別與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>先從運算式主體建構委派型別與參數運算式的陣列，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 為 <see langword="null" />。
-或-
<paramref name="parameters" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 包含十六個以上的項目。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>先從運算式主體建構委派型別、lambda 的名稱、指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>先從運算式主體建構委派型別、lambda 的名稱與參數運算式的可列舉集合，以建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 它可用於在編譯階段不知道委派類型時。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">陣列，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType">
        <see cref="T:System.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>表示 Lambda 運算式的物件，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 為 <see langword="null" />。
-或-
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委派類型。
-或-
<paramref name="body" />.Type 表示的類型無法指派給 <paramref name="delegateType" /> 所表示之委派類型的傳回類型。
-或-
<paramref name="parameters" /> 包含的項目數與 <paramref name="delegateType" /> 所表示之委派類型的參數清單不同。
-或-
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從由 <paramref name="delegateType" /> 所表示之委派類型的對應參數類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>使用參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType">
        <see cref="T:System.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件的陣列。</param>
      <returns>表示 Lambda 運算式的物件，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 為 <see langword="null" />。
-或-
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委派類型。
-或-
<paramref name="body" />.Type 表示的類型無法指派給 <paramref name="delegateType" /> 所表示之委派類型的傳回類型。
-或-
<paramref name="parameters" /> 包含的項目數與 <paramref name="delegateType" /> 所表示之委派類型的參數清單不同。
-或-
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從由 <paramref name="delegateType" /> 所表示之委派類型的對應參數類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用 lambda 的名稱、指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用 lambda 的名稱與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其中委派型別在編譯時間為已知。</summary>
      <param name="delegateType">
        <see cref="P:System.Linq.Expressions.Expression.Type" />，代表 Lambda 的委派簽章。</param>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">Lambda 的名稱。 用於發出偵錯資訊。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 Lambda，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate">委派類型。</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>使用指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">陣列，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate">委派類型。</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate">委派類型。</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 為 <see langword="null" />。
-或-
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委派類型。
-或-
<paramref name="body" />.Type 所表示的類型無法指派給 <paramref name="TDelegate" /> 的傳回類型。
-或-
<paramref name="parameters" /> 包含的項目數與 <paramref name="TDelegate" /> 的參數清單不同。
-或-
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從 <paramref name="TDelegate" /> 之對應參數類型的類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>使用參數運算式的陣列建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件的陣列。</param>
      <typeparam name="TDelegate">委派類型。</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 為 <see langword="null" />。
-或-
<paramref name="parameters" /> 中的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委派類型。
-或-
<paramref name="body" />.Type 所表示的類型無法指派給 <paramref name="TDelegate" /> 的傳回類型。
-或-
<paramref name="parameters" /> 包含的項目數與 <paramref name="TDelegate" /> 的參數清單不同。
-或-
<paramref name="parameters" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法從 <paramref name="TDelegate" /> 之對應參數類型的類型指派。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用 lambda 的名稱、指出指出是否套用 tail 呼叫最佳化的參數與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">Lambda 的名稱。 用於產生偵錯資訊。</param>
      <param name="tailCall">
        <see cref="T:System.Boolean" />，其代表編譯所建立的運算式時，是否會套用 tail 呼叫最佳化。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate">委派類型。</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>使用 lambda 的名稱與參數運算式的可列舉集合建立 <see cref="T:System.Linq.Expressions.Expression`1" />，其中委派型別在編譯時間為已知。</summary>
      <param name="body">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">Lambda 的名稱。 用於產生偵錯資訊。</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 物件。</param>
      <typeparam name="TDelegate">委派類型。</typeparam>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元左移 (Left-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type. 定義 Left-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元左移 (Left-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" /> 且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Left-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元左移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表「小於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立代表「小於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的「小於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表「小於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立代表「小於或等於」數值比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義「小於或等於」運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其中成員是欄位或屬性。</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，表示要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的欄位或屬性。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。
-或-
<paramref name="member" /> 所表示之欄位或屬性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其中成員是欄位或屬性。</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，表示要將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為與之相等的欄位或屬性。</param>
      <param name="initializers">用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合之 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。
-或-
<paramref name="member" /> 所表示之欄位或屬性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>根據指定的屬性存取子方法建立 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <param name="propertyAccessor">代表屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.MemberInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 則會填入 <paramref name="initializers" /> 的項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。
-或-
屬性 (由 <paramref name="propertyAccessor" /> 存取表示的方法) 的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>根據指定的屬性存取子方法建立 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 物件。</summary>
      <param name="propertyAccessor">代表屬性存取子方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合之 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.MemberInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 則會填入 <paramref name="initializers" /> 的項目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。
-或-
屬性 (由 <paramref name="propertyAccessor" /> 存取表示的方法) 的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 不會實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，它使用指定的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件初始化集合。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用名為 "Add" 的方法將項目加入集合。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">未在 <paramref name="newExpression" />.Type 或其基底型別中宣告名為 "Add" (不區分大小寫) 的執行個體。
-或-
<paramref name="newExpression" />.Type 或其基底型別中的 add 方法不是只接受一個引數。
-或-
<paramref name="initializers" />的第一個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所代表的型別，無法指派給 <paramref name="newExpression" />.Type 或其基底型別上的 add 方法的引數類型。
-或-
多個名為 "Add" (不區分大小寫) 的引數相容方法存在於 <paramref name="newExpression" /> .Type 和/或其基底型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，它使用指定的 <see cref="T:System.Linq.Expressions.ElementInit" /> 物件初始化集合。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">用以填入 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合之 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，且 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用名為 "Add" 的方法將項目加入集合。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">未在 <paramref name="newExpression" />.Type 或其基底型別中宣告名為 "Add" (不區分大小寫) 的執行個體。
-或-
<paramref name="newExpression" />.Type 或其基底型別中的 add 方法不是只接受一個引數。
-或-
<paramref name="initializers" />的第一個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所代表的型別，無法指派給 <paramref name="newExpression" />.Type 或其基底型別上的 add 方法的引數類型。
-或-
多個名為 "Add" (不區分大小寫) 的引數相容方法存在於 <paramref name="newExpression" /> .Type 和/或其基底型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用指定的方法將項目加入集合。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" />，代表名為 "Add" (區分大小寫) 的執行個體方法，可將項目加入集合。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。
-或-
<paramref name="addMethod" /> 不是 <see langword="null" />，它不表示名為 "Add" (區分大小寫) 的執行個體方法，這個方法剛好只採用一個引數。
-或-
<paramref name="addMethod" /> 不是 <see langword="null" />，且 <paramref name="initializers" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性表示的類型無法指派給 <paramref name="addMethod" /> 所表示之方法的引數類型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 <see langword="null" />，且 <paramref name="newExpression" />.Type 或其基底類型上沒有採用一個類型相容引數之名為 "Add" 的執行個體方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其使用指定的方法將項目加入集合。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" />，代表採用一個引數的執行個體方法，可將項目加入集合。</param>
      <param name="initializers">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，而 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的一個或多個項目為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 未實作 <see cref="T:System.Collections.IEnumerable" />。
-或-
<paramref name="addMethod" /> 不是 <see langword="null" />，它不表示名為 "Add" (區分大小寫) 的執行個體方法，這個方法剛好只採用一個引數。
-或-
<paramref name="addMethod" /> 不是 <see langword="null" />，且 <paramref name="initializers" /> 之一個或多個項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性表示的類型無法指派給 <paramref name="addMethod" /> 所表示之方法的引數類型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 是 <see langword="null" />，且 <paramref name="newExpression" />.Type 或其基底類型上沒有採用一個類型相容引數之名為 "Add" 的執行個體方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>建立包含指定之主體的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body">迴圈的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>建立包含指定之主體和 break 目標的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body">迴圈的主體。</param>
      <param name="break">迴圈主體所使用的 break 目標。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>建立包含指定之主體的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <param name="body">迴圈的主體。</param>
      <param name="break">迴圈主體所使用的 break 目標。</param>
      <param name="continue">迴圈主體所使用的 continue 目標。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元和右運算元。</summary>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的類型。</param>
      <param name="left">代表左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">代表右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元、右運算元和實作方法。</summary>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的類型。</param>
      <param name="left">代表左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">代表右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，可指定實作的方法。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>透過呼叫適當的 Factory 方法來建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，指定左運算元、右運算元、實作方法和類型轉換函式。</summary>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定二進位運算的類型。</param>
      <param name="left">代表左運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">代表右運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />，可指定實作的方法。</param>
      <param name="conversion">代表類型轉換函式的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。 只有當 <paramref name="binaryType" /> 為 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或複合指派時，才會使用此參數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 未對應到二進位運算式節點。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.CatchBlock" />，代表含指定之項目的 catch 陳述式。</summary>
      <param name="type">這個 <see cref="P:System.Linq.Expressions.Expression.Type" /> 將處理之 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="variable">
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表這個處理常式所攔截 <see cref="T:System.Exception" /> 物件的參考。</param>
      <param name="body">catch 陳述式的主體。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 篩選條件的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態運算的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和兩個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四個引數所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arg0">動態作業的第一個引數。</param>
      <param name="arg1">傳遞至動態作業的第二個引數。</param>
      <param name="arg2">傳遞至動態作業的第三個引數。</param>
      <param name="arg3">傳遞至動態運算的第四個引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.DynamicExpression" />，代表指定之 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 所繫結的動態運算。</summary>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 所使用的委派類型。</param>
      <param name="binder">動態作業的執行階段繫結器。</param>
      <param name="arguments">動態作業的引數。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 等於 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，且 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，代表指定之 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳躍點。 也可以指定在跳躍時傳遞至標籤的值。</summary>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 <paramref name="kind" />、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，代表存取物件中的索引屬性。</summary>
      <param name="instance">屬性所屬的物件。 如果屬性為 <see langword="static" /> (在 Visual Basic 中為 <see langword="shared" />)，則應該是 Null。</param>
      <param name="indexer">
        <see cref="T:System.Linq.Expressions.Expression" />，代表要編製索引的屬性。</param>
      <param name="arguments">
        <c>IEnumerable&lt;Expression&gt;</c> (在 Visual Basic 中為 <c>IEnumerable (Of Expression)</c>)，包含將用於對屬性進行索引的引數。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>建立代表存取欄位或屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，代表成員所屬的物件。 如果是靜態成員，可以是 Null。</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，說明要存取的欄位或屬性。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含指定之項目的 try 區塊。</summary>
      <param name="type">try 運算式的結果類型。 如果為 Null，則主體和所有處理常式必須具有相同的類型。</param>
      <param name="body">try 區塊的主體。</param>
      <param name="finally">finally 區塊的主體。 如果 try 區塊沒有相關聯的 finally 區塊，則傳遞 Null。</param>
      <param name="fault">fault 區塊的主體。 如果 try 區塊沒有相關聯的 fault 區塊，則傳遞 Null。</param>
      <param name="handlers">
        <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合，代表要與 try 區塊產生關聯的 catch 陳述式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>指定運算元並呼叫適當的 Factory 方法，建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定一元運算的類型。</param>
      <param name="operand">代表運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="T:System.Type" />，指定轉換後的類型 (如果不適用，則傳遞 <see langword="null" />)。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 未對應到一元運算式節點。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>指定運算元和實作方法並透過呼叫適當的 Fatory 方法，建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />，指定一元運算的類型。</param>
      <param name="operand">代表運算元的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">
        <see cref="T:System.Type" />，指定轉換後的類型 (如果不適用，則傳遞 <see langword="null" />)。</param>
      <param name="method">代表實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，由呼叫適當的 Factory 方法所產生。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 未對應到一元運算式節點。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化欄位或屬性的成員。</summary>
      <param name="member">要將 <see cref="T:System.Reflection.MemberInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。
-或-
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="member" /> 所表示之欄位或屬性類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化欄位或屬性的成員。</summary>
      <param name="member">要將 <see cref="T:System.Reflection.MemberInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合之 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不代表欄位或屬性。
-或-
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="member" /> 所表示之欄位或屬性類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化成員的成員，該成員可透過使用屬性存取子方法來存取。</summary>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />，代表屬性存取子方法。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性則設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。
-或-
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="propertyAccessor" /> 所表示之方法存取的屬性類型成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，表示遞迴初始化成員的成員，該成員可透過使用屬性存取子方法來存取。</summary>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />，代表屬性存取子方法。</param>
      <param name="bindings">用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合之 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 屬性等於 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，並將 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，表示在 <paramref name="propertyAccessor" /> 中存取的屬性，<see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性則設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不代表屬性存取子方法。
-或-
<paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="propertyAccessor" /> 所表示之方法存取的屬性類型成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>表示建立新物件並初始化物件屬性的運算式。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="newExpression" />.Type 所表示之類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</summary>
      <param name="newExpression">要將 <see cref="T:System.Linq.Expressions.NewExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</param>
      <param name="bindings">用以填入 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合之 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，且 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="bindings" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 之項目的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 屬性不表示 <paramref name="newExpression" />.Type 所表示之類型的成員。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表算術餘數運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義餘數運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立代表算術餘數運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，且未針對 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義模數運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示餘數指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術乘法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術乘法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的乘法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的乘法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術乘法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術乘法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Multiplication 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>建立代表算術負運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元減號運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立代表算術負運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元減號運算子。
-或-
<paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其代表包含溢位檢查的算術負運算。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元減號運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其代表包含溢位檢查的算術負運算。 實作的方法可加以指定。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元減號運算子。
-或-
<paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，代表呼叫不採用任何引數的指定建構函式。</summary>
      <param name="constructor">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，而 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">由 <paramref name="constructor" /> 表示的建構函式，擁有至少一個參數。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。</summary>
      <param name="constructor">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 <see langword="null" />。
-或-
<paramref name="arguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。
-或-
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。 已指定可存取由建構函式初始化欄位的成員。</summary>
      <param name="constructor">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件。</param>
      <param name="members">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Reflection.MemberInfo" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 <see langword="null" />。
-或-
<paramref name="arguments" /> 的項目是 <see langword="null" />。
-或-
<paramref name="members" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。
-或-
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。
-或-
<paramref name="members" /> 參數的項目數與 <paramref name="arguments" /> 的不同。
-或-
<paramref name="arguments" /> 的項目有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性，它表示無法指派給 <paramref name="members" /> 其對應項目所表示成員類型的類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。 已指定可存取由建構函式初始化欄位的成員為陣列。</summary>
      <param name="constructor">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件。</param>
      <param name="members">用以填入 <see cref="T:System.Reflection.MemberInfo" /> 集合之 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 <see langword="null" />。
-或-
<paramref name="arguments" /> 的項目是 <see langword="null" />。
-或-
<paramref name="members" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 參數包含的項目數目與 <paramref name="constructor" /> 所表示之建構函式的參數數目不同。
-或-
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。
-或-
<paramref name="members" /> 參數的項目數與 <paramref name="arguments" /> 的不同。
-或-
<paramref name="arguments" /> 的項目有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性，它表示無法指派給 <paramref name="members" /> 其對應項目所表示成員類型的類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，其代表以指定之引數呼叫指定的建構函式。</summary>
      <param name="constructor">要將 <see cref="T:System.Reflection.ConstructorInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</param>
      <param name="arguments">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 為 <see langword="null" />。
-或-
<paramref name="arguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的長度不符合 <paramref name="constructor" /> 代表之建構函式的參數數目。
-或-
<paramref name="arguments" /> 項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性無法指派給 <paramref name="constructor" /> 所代表之建構函式的對應參數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewExpression" />，代表呼叫指定類型的無參數建構函式。</summary>
      <param name="type">
        <see cref="T:System.Type" />，具有不採用任何引數的建構函式。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，且 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 屬性設定為 <see cref="T:System.Reflection.ConstructorInfo" />，代表不含指定類型之參數的建構函式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 表示的類型沒有無參數建構函式。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立具有指定之陣序的陣列。</summary>
      <param name="type">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="bounds">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 為 <see langword="null" />。
-或-
<paramref name="bounds" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示整數類資料類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立具有指定之陣序的陣列。</summary>
      <param name="type">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="bounds">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="bounds" /> 為 <see langword="null" />。
-或-
<paramref name="bounds" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性不表示整數類資料類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立一維陣列，並從項目清單將此陣列初始化。</summary>
      <param name="type">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的類型無法指派給 <paramref name="type" /> 所表示的類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其代表建立一維陣列，並從項目清單將此陣列初始化。</summary>
      <param name="type">
        <see cref="T:System.Type" />，代表陣列的項目類型。</param>
      <param name="initializers">用以填入 <see cref="T:System.Linq.Expressions.Expression" /> 集合之 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，而 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="initializers" /> 為 <see langword="null" />。
-或-
<paramref name="initializers" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 之項目的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性所表示的類型無法指派給 <paramref name="type" /> 類型。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>取得這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點類型。</summary>
      <returns>其中一個 <see cref="T:System.Linq.Expressions.ExpressionType" /> 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>建立表示位元補數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元 NOT 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元補數運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。 實作的方法可加以指定。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元 NOT 運算子。
-或-
<paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義不等比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>建立代表不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">
        <see langword="true" /> 表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="true" />，<see langword="false" /> 則表示將 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 設定為 <see langword="false" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義不等比較運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>傳回表示 1 補數的運算式。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>傳回表示 1 補數的運算式。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="OR" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="OR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 運算的 <see langword="OR" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="OR" /> 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元 OR 指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第一個運算元計算結果為 <see langword="OR" /> 時才求第二個運算元之值的 <see langword="false" /> 條件運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義位元 <see langword="OR" /> 運算子。
-或-
<paramref name="left" />.Type 和 <paramref name="right" />.Type 是不相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示只在第一個運算元計算結果為 <see langword="OR" /> 時才求第二個運算元之值的 <see langword="false" /> 條件運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的位元 <see langword="OR" /> 運算子。
-或-
<paramref name="method" /> 為 <see langword="null" />，且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是相同的布林類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type">參數或變數的類型。</param>
      <returns>建立含指定之名稱和類型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type">參數或變數的類型。</param>
      <param name="name">參數或變數的名稱，僅供偵錯或列印之用。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />，且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞減 1 的運算式指派。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞減 1 的運算式指派。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞增 1 的運算式指派。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示後面接續原始運算式遞增 1 的運算式指派。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表將數字提升為乘冪數的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Exponentiation 運算子。
-或-
<paramref name="left" />.Type 和 (或) <paramref name="right" />.Type 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立代表將數字提升為乘冪數的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的乘冪運算子。
-或-
<paramref name="method" /> 是 <see langword="null" /> 和 <paramref name="left" />.Type，且/或 <paramref name="right" />.Type 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示將運算式自乘為乘冪，並且將結果指派回運算式。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞減 1，並將結果指派回運算式。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞減 1，並將結果指派回運算式。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞增 1，並將結果指派回運算式。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，可讓運算式遞增 1，並將結果指派回運算式。</summary>
      <param name="expression">要套用上述作業的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>表示結果運算式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，代表透過使用屬性存取子來存取屬性。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 如果是靜態屬性，可以是 null。</param>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />，代表屬性存取子方法。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，代表在 <paramref name="propertyAccessor" /> 中存取的屬性。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 為 <see langword="null" />。
-或-
<paramref name="propertyAccessor" /> 所表示的方法不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，且 <paramref name="expression" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 無法指派給 <paramref name="propertyAccessor" /> 所代表之方法的宣告類型。
-或-
<paramref name="propertyAccessor" /> 所表示的方法不是屬性存取子方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>建立代表存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。 如果是靜態屬性，可以是 null。</param>
      <param name="property">要將 <see cref="T:System.Reflection.PropertyInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 為 <see langword="null" />。
-或-
<paramref name="property" /> 所表示的屬性不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，且 <paramref name="expression" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 無法指派給 <paramref name="property" /> 所表示屬性的宣告類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <param name="instance">屬性所屬的物件。 如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="indexer">
        <see cref="T:System.Reflection.PropertyInfo" />，代表要編製索引的屬性。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，用於對屬性進行索引。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <param name="instance">屬性所屬的物件。 如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="indexer">
        <see cref="T:System.Reflection.PropertyInfo" />，代表要編製索引的屬性。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用於對屬性進行索引。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>建立代表存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="propertyName" /> 的屬性。 如果是靜態屬性，可以是 <see langword="null" />。</param>
      <param name="propertyName">要存取的屬性名稱。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" />，代表 <paramref name="propertyName" /> 所表示的屬性。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyName" />.Type 或其基底類型中沒有定義名為 <paramref name="expression" /> 的屬性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.IndexExpression" />，表示索引之屬性的存取結果。</summary>
      <param name="instance">屬性所屬的物件。 如果屬性為靜態/共用屬性，就必須為 null。</param>
      <param name="propertyName">索引子的名稱。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的陣列，用於對屬性進行索引。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>建立用於存取屬性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <param name="expression">屬性的包含物件。 如果是靜態屬性，可以是 null。</param>
      <param name="type">包含屬性的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName">要存取的屬性。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.MemberExpression" />，代表存取屬性或欄位。</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 包含名為 <paramref name="propertyOrFieldName" /> 的屬性或欄位。 如果是靜態成員，可以是 Null。</param>
      <param name="propertyOrFieldName">要存取之屬性或欄位的名稱。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />、<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性設定為 <paramref name="expression" />，且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 屬性設定為 <see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.FieldInfo" />，代表 <paramref name="propertyOrFieldName" /> 所表示的屬性或欄位。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="propertyOrFieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyOrFieldName" />.Type 或其基底類型中沒有定義名為 <paramref name="expression" /> 的屬性或欄位。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表具有 <see cref="T:System.Linq.Expressions.Expression" /> 類型常數值的運算式。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>將這個節點精簡為更簡單的運算式。 如果 CanReduce 傳回 true，則應該傳回有效的運算式。 這個方法可以傳回其他本身必須精簡的節點。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>將這個節點精簡為更簡單的運算式。 如果 CanReduce 傳回 true，則應該傳回有效的運算式。 這個方法可以傳回其他本身必須精簡的節點。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>將運算式精簡為已知的節點類型 (不是 Extension 節點)，如果已經是已知的類型，則僅傳回運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示參考相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示參考不相等比較的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示重新擲回例外狀況。</summary>
      <returns>表示重新擲回例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表重新擲回含指定之類型的例外狀況。</summary>
      <param name="type">運算式的新 <see cref="T:System.Type" />。</param>
      <returns>表示重新擲回例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示 return 陳述式。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Return、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且包含在跳躍時傳遞至目標標籤的 Null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示 return 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />，且，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 return 陳述式。 可以指定跳躍時傳遞至標籤的值。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">將在跳躍時傳遞至關聯標籤的值。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於Continue、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.GotoExpression" />，表示含指定之類型的 return 陳述式。</summary>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 將跳躍的目標 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等於 Return、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性設定為 <paramref name="target" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為 <paramref name="type" />，且包含在跳躍時傳遞至目標標籤的 null 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立代表位元右移 (Right-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Right-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立代表位元右移 (Right-Shift) 運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的 <see langword="Shared" />)，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Right-shift 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立表示位元右移位指派運算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體。</summary>
      <param name="variables">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 物件的集合，用來填入 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，而 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體。</summary>
      <param name="variables">用以填入 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合之 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 物件的陣列。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的執行個體，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，而 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術減法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Subtraction 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表不含溢位檢查的算術減法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> ，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的<see langword="Shared" /> )，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示不含溢位檢查的減法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，表示包含溢位檢查的減法指派運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要將 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術減法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定義 Subtraction 運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其代表包含溢位檢查的算術減法運算。</summary>
      <param name="left">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，且 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" /> ，而它所代表的方法會傳回 <see langword="void" />、不是 <see langword="static" /> (Visual Basic 中的<see langword="Shared" /> )，或者未確切採用兩個引數。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 是 <see langword="null" />，而且未定義 <paramref name="left" />.Type 和 <paramref name="right" />.Type 的減法運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="cases">這個 switch 運算式的案例集合。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">這個 switch 運算式的案例集合。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">這個 switch 運算式的案例集合。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，代表不含 default case 的 <see langword="switch" /> 陳述式。</summary>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="cases">這個 switch 運算式的案例集合。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="type">參數的結果類型。</param>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">這個 switch 運算式的案例集合。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchExpression" />，其代表具有預設情況的 <see langword="switch" /> 陳述式。</summary>
      <param name="type">參數的結果類型。</param>
      <param name="switchValue">針對每個案例所要測試的值。</param>
      <param name="defaultBody">如果 <paramref name="switchValue" /> 不符合任何案例，則為參數結果。</param>
      <param name="comparison">要使用的相等比較方法。</param>
      <param name="cases">這個 switch 運算式的案例集合。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立要在 <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件中使用的 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 物件。</summary>
      <param name="body">案例的主體。</param>
      <param name="testValues">案例的測試值。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.SwitchCase" /> 以便用於 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <param name="body">案例的主體。</param>
      <param name="testValues">案例的測試值。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>建立 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的執行個體。</summary>
      <param name="fileName">要將 <see cref="T:System.String" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</param>
      <param name="language">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</param>
      <param name="languageVendor">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</param>
      <param name="documentType">要將 <see cref="T:System.Guid" /> 設定為與之相等的 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />，其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 屬性設定為指定的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，表示擲回例外狀況。</summary>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <returns>表示例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表擲回含指定之類型的例外狀況。</summary>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">運算式的新 <see cref="T:System.Type" />。</param>
      <returns>表示例外狀況的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>傳回 <see cref="T:System.Linq.Expressions.Expression" /> 的文字表示。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的文字表示。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 catch 陳述式 (數目不拘) 但不含 fault 區塊或 finally 區塊的 try 區塊。</summary>
      <param name="body">try 區塊的主體。</param>
      <param name="handlers">零個或多個 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的陣列，表示要與 try 區塊產生關聯的 catch 陳述式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 catch 陳述式 (數目不拘) 和 finally 區塊的 try 區塊。</summary>
      <param name="body">try 區塊的主體。</param>
      <param name="finally">finally 區塊的主體。</param>
      <param name="handlers">零個或多個 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的陣列，表示要與 try 區塊產生關聯的 catch 陳述式。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 fault 區塊但不含任何 catch 陳述式的 try 區塊。</summary>
      <param name="body">try 區塊的主體。</param>
      <param name="fault">fault 區塊的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TryExpression" />，代表含 finally 區塊但不含任何 catch 陳述式的 try 區塊。</summary>
      <param name="body">try 區塊的主體。</param>
      <param name="finally">finally 區塊的主體。</param>
      <returns>建立的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定型別引數的泛型 System.Action 委派類型。</summary>
      <param name="typeArgs">Type 物件的陣列，指定 System.Action 委派類型的類型引數。</param>
      <param name="actionType">這個方法在傳回時會包含具有特定類型引數的泛型 System.Action 委派類型。 如果沒有符合 <paramref name="typeArgs" /> 的泛型 System.Action 委派，則包含 Null。這個參數以未初始化的狀態傳遞。</param>
      <returns>如果已針對特定 <paramref name="typeArgs" /> 建立泛型 System.Action 委派類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>建立 <see cref="P:System.Linq.Expressions.Expression.Type" /> 物件，這個物件代表具有特定類型引數的泛型 System.Func 委派類型。 最後一個類型引數指定已建立之委派的傳回類型。</summary>
      <param name="typeArgs">Type 物件的陣列，指定 System.Func 委派類型的類型引數。</param>
      <param name="funcType">這個方法在傳回時會包含具有特定型別引數的泛型 System.Func 委派類型。 如果沒有符合 <paramref name="typeArgs" /> 的泛型 System.Func 委派，則包含 Null。這個參數以未初始化的狀態傳遞。</param>
      <returns>如果已針對特定 <paramref name="typeArgs" /> 建立泛型 System.Func 委派類型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表明確參考或 Boxing 轉換，其中若轉換失敗，則提供 <see langword="null" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要將 <see cref="T:System.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 以比較執行階段類型識別。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> 以及 <see cref="T:System.Linq.Expressions.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設為指定值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</param>
      <param name="type">要將 <see cref="P:System.Linq.Expressions.Expression.Type" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> 以及 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 屬性設為指定值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>建立代表一元加法運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，而 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">不會為 <paramref name="expression" />.Type 定義一元正運算子。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>建立代表一元加法運算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <param name="expression">要將 <see cref="T:System.Linq.Expressions.Expression" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="method">要將 <see cref="T:System.Reflection.MethodInfo" /> 屬性設定為與之相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性等於 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 屬性設定為指定的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不是 <see langword="null" />，而且其代表的方法傳回的是 <see langword="void" />，不是 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />)，或者使用的引數不是剛好一個。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 為 <see langword="null" />，且不會為 <paramref name="expression" />.Type 定義一元正運算子。
-或-
<paramref name="expression" />.Type (如果它是可為 Null 的實質類型，則為其對應之不可為 Null 的類型) 無法指派給 <paramref name="method" /> 所代表之方法的引數類型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.UnaryExpression" />，代表明確 Unboxing。</summary>
      <param name="expression">要 Unbox 的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">運算式的新 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的執行個體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type">參數或變數的類型。</param>
      <returns>建立含指定之名稱和類型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>建立 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點，此節點可用以識別運算式樹狀中的參數或變數。</summary>
      <param name="type">參數或變數的類型。</param>
      <param name="name">參數或變數的名稱。 這個名稱僅供偵錯或列印之用。</param>
      <returns>建立含指定之名稱和類型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 節點。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>精簡節點，然後呼叫精簡後的運算式上的訪問項委派。 如果節點無法縮減，此方法會擲回例外狀況。</summary>
      <param name="visitor">
        <see cref="T:System.Func`2" /> 的執行個體。</param>
      <returns>受訪的運算式，或是在樹狀結構中應取代該運算式的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>將強類型 Lambda 運算式用樹狀架構形式的資料結構來表示。 此類別無法獲得繼承。</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 所代表之委派的型別。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>將運算式樹狀架構所描述的 Lambda 運算式編譯為可執行程式碼，並產生表示 Lambda 運算式的委派。</summary>
      <returns>
        <paramref name="TDelegate" /> 型別的委派，表示由 <see cref="T:System.Linq.Expressions.Expression`1" /> 所描述的已編譯 Lambda 運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary>將運算式樹狀架構所描述的 Lambda 運算式，編譯成已解譯或已編譯的程式碼，並產生代表 Lambda 運算式的委派。</summary>
      <param name="preferInterpretation">如有應該編譯成解譯表單的運算式，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>委派，表示 <see cref="T:System.Linq.Expressions.Expression`1" /> 所描述的已編譯 Lambda 運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>產生代表 Lambda 運算式的委派。</summary>
      <param name="debugInfoGenerator">編譯器使用的偵錯資訊產生工具，用以標記序列點以及標註區域變數。</param>
      <returns>委派，包含 Lambda 的編譯版本。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 屬性。</param>
      <param name="parameters">結果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>說明運算式樹狀結構之節點的節點型別。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>數值運算元的加法運算，例如 <c>a + b</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>數值運算元的加法複合指派運算，例如 <c>(a += b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>數值運算元的加法複合指派運算，例如 <c>(a += b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>數值運算元的加法運算，例如 <c>(a + b)</c>，包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>位元或邏輯 <see langword="AND" /> 運算，例如 C# 中的 <c>(a &amp; b)</c> 和 Visual Basic 中的 <c>(a And b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>條件 <see langword="AND" /> 運算，此種運算只有在第一個運算元評估為 <see langword="true" /> 時才會評估第二個運算元。 它對應到 C# 中的 <c>(a &amp;&amp; b)</c> 和 Visual Basic 中的 <c>(a AndAlso b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>位元或邏輯 <see langword="AND" /> 複合指派運算，例如 C# 中的 <c>(a &amp;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>一維陣列中的索引運算，例如 C# 中的 <c>array[index]</c> 或 Visual Basic 中的 <c>array(index)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>一種運算，用於取得一維陣列的長度，例如 <c>array.Length</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>指派運算，例如 <c>(a = b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>運算式的區塊。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>方法呼叫，例如在 <c>obj.sampleMethod()</c> 運算式中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>表示 Null 聯合運算的節點，例如 C# 中的 <c>(a ?? b)</c> 或 Visual Basic 中的 <c>If(a, b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>條件運算，例如 C# 中的 <c>a &gt; b ? a : b</c> 或 Visual Basic 中的 <c>If(a &gt; b, a, b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>常數值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>轉型或轉換作業，例如 C# 中的 <c>(SampleType)obj</c> 或 Visual Basic 中的 <c>CType(obj, SampleType)</c>。 對於數值轉換，如果轉換的值對目的型別而言太大，則不會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>轉型或轉換作業，例如 C# 中的 <c>(SampleType)obj</c> 或 Visual Basic 中的 <c>CType(obj, SampleType)</c>。 對於數值轉換，如果轉換的值不符合目的型別，則會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>偵錯資訊。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>一元遞減運算，例如 C# 和 Visual Basic 中的 <c>(a - 1)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>預設值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>數值運算元的除法運算，例如 <c>(a / b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>數值運算元的除法複合指派運算，例如 <c>(a /= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>動態運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>表示相等比較的節點，例如 C# 中的 <c>(a == b)</c> 或 Visual Basic 中的 <c>(a = b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>位元或邏輯 <see langword="XOR" /> 運算，例如 C# 中的 <c>(a ^ b)</c> 或 Visual Basic 中的 <c>(a Xor b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>位元或邏輯 <see langword="XOR" /> 複合指派運算，例如 C# 中的 <c>(a ^= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>延伸運算式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>「移至」運算式，例如 C# 中的 <c>goto Label</c> 或 Visual Basic 中的 <c>GoTo Label</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>「大於」比較，例如 <c>(a &gt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>「大於或等於」比較，例如 <c>(a &gt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>一元遞增運算，例如 C# 和 Visual Basic 中的 <c>(a + 1)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>索引運算或是用於存取採用引數之屬性的運算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>叫用委派或 Lambda 運算式的運算，例如 <c>sampleDelegate.Invoke()</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>
        <see langword="false" /> 條件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>
        <see langword="true" /> 條件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>標籤。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Lambda 運算式，例如 C# 中的 <c>a =&gt; a + a</c> 或 Visual Basic 中的 <c>Function(a) a + a</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>位元左移運算，例如 <c>(a &lt;&lt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>位元左移複合指派，例如 <c>(a &lt;&lt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>「小於」比較，例如 <c>(a &lt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>「小於或等於」比較，例如 <c>(a &lt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>一種運算，用於建立新的 <see cref="T:System.Collections.IEnumerable" /> 物件並以項目清單將其初始化，例如 C# 中的 <c>new List&lt;SampleType&gt;(){ a, b, c }</c> 或 Visual Basic 中的 <c>Dim sampleList = { a, b, c }</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>一種迴圈，例如 <c>for</c> 或 <c>while</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>讀取欄位或屬性的運算，例如 <c>obj.SampleProperty</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>一種運算，用於建立新的物件並初始化其中一個或多個成員，例如 C# 中的 <c>new Point { X = 1, Y = 2 }</c> 或 Visual Basic 中的 <c>New Point With {.X = 1, .Y = 2}</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>算術餘數運算，例如 C# 中的 <c>(a % b)</c> 或 Visual Basic 中的 <c>(a Mod b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>算術餘數複合指派運算，例如 C# 中的 <c>(a %= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>數值運算元的乘法運算，例如 <c>(a * b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>數值運算元的乘法複合指派運算，例如 <c>(a *= b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>數值運算元的乘法複合指派運算，例如 <c>(a *= b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>數值運算元的乘法運算，例如 <c>(a * b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>算術負數運算，例如 <c>(-a)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>算術負數運算，例如 <c>(-a)</c>，具有溢位檢查。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>一種運算，用於呼叫建構函式以建立新物件，例如 <c>new SampleType()</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>一種運算，用於建立新的陣列並指定每個維度的界限，例如 C# 中的 <c>new SampleType[dim1, dim2]</c> 或 Visual Basic 中的 <c>New SampleType(dim1, dim2)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>一種運算，用於建立新的一維陣列並以項目清單將其初始化，例如 C# 中的 <c>new SampleType[]{a, b, c}</c> 或 Visual Basic 中的 <c>New SampleType(){a, b, c}</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>位元補數或邏輯負數運算。 在 C# 中，這相當於 <c>(~a)</c> (適用於整數型別) 和 <c>(!a)</c> (適用於布林值)。 在 Visual Basic 中，則相當於 <c>(Not a)</c>。 物件 <c>a</c> 不應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>不相等比較，例如 C# 中的 <c>(a != b)</c> 或 Visual Basic 中的 <c>(a &lt;&gt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>1 的補數運算，例如 C# 中的 <c>(~a)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>位元或邏輯 <see langword="OR" /> 運算，例如 C# 中的 <c>(a | b)</c> 或 Visual Basic 中的 <c>(a Or b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>位元或邏輯 <see langword="OR" /> 複合指派，例如 C# 中的 <c>(a |= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>最少運算 (Short-Circuiting) 條件 <see langword="OR" /> 運算，例如 C# 中的 <c>(a || b)</c> 或 Visual Basic 中的 <c>(a OrElse b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>在運算式內容中定義之參數或變數的參考。 如需詳細資訊，請參閱<see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>一元後置遞減，例如 <c>(a--)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>一元後置遞增，例如 <c>(a++)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>一種數學運算，可將數字提升為乘冪數，例如 Visual Basic 中的 <c>(a ^ b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>一種複合指派運算，可將數字提升為乘冪數，例如 Visual Basic 中的 <c>(a ^= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>一元前置遞減，例如 <c>(--a)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>一元前置遞增，例如 <c>(++a)</c>。 物件 <c>a</c> 應該就地修改。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>有 <see cref="T:System.Linq.Expressions.Expression" /> 型別之常數值的運算式。 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 節點可包含參數的參考，這些參數都定義在節點所表示的運算式內容中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>位元右移運算，例如 <c>(a &gt;&gt; b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>位元右移複合指派運算，例如 <c>(a &gt;&gt;= b)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>執行階段變數的清單。 如需詳細資訊，請參閱<see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>數值運算元的減法運算，例如 <c>(a - b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>數值運算元的減法複合指派運算，例如 <c>(a -= b)</c>，不包含溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>數值運算元的減法複合指派運算，例如 <c>(a -= b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>數值運算元的算術減法運算，例如 <c>(a - b)</c>，具有溢位檢查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>切換運算，例如 C# 中的 <see langword="switch" /> 或 Visual Basic 中的 <see langword="Select Case" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>擲回例外狀況的運算，例如 <c>throw new Exception()</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>
        <see langword="try-catch" /> 運算式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>明確參考或 Boxing 轉換，轉換若失敗，則提供 <see langword="null" />，例如 C# 中的 <c>(obj as SampleType)</c> 或 Visual Basic 中的 <c>TryCast(obj, SampleType)</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>確切型別測試。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>型別測試，例如 C# 中的 <c>obj is SampleType</c> 或 Visual Basic 中的 <c>TypeOf obj is SampleType</c>。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>一元正運算，例如 <c>(+a)</c>。 預先定義之一元正運算的結果是運算元的值，但使用者定義的實作可能會有不尋常的結果。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Unbox 值型別運算，例如 MSIL 中的 <see langword="unbox" /> 和 <see langword="unbox.any" /> 指令。</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>代表運算式樹狀結構的造訪者或重寫器。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>將運算式清單分派給此類別中較為特殊的造訪方法之一。</summary>
      <param name="nodes">要造訪的運算式。</param>
      <returns>如果任何項目已經修改，則傳回修改的運算式清單，否則傳回原始運算式清單。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>將運算式分派給此類別中較為特殊的造訪方法之一。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>使用特殊的項目造訪者，造訪集合中所有的節點。</summary>
      <param name="nodes">要造訪的節點。</param>
      <param name="elementVisitor">造訪單一項目的委派，並選擇性地將它取代為新項目。</param>
      <typeparam name="T">節點的型別。</typeparam>
      <returns>如果任何項目已經修改，則傳回修改的節點清單，否則傳回原始節點清單。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>造訪運算式，並將結果轉換回原始運算式型別。</summary>
      <param name="node">要造訪的運算式。</param>
      <param name="callerName">呼叫方法的名稱，用來回報較佳的錯誤訊息。</param>
      <typeparam name="T">運算式的型別。</typeparam>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
      <exception cref="T:System.InvalidOperationException">這個節點的造訪方法傳回不同的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>瀏覽集合中的運算式，並將結果轉換回原始運算式類型。</summary>
      <param name="nodes">要造訪的運算式。</param>
      <param name="callerName">呼叫方法的名稱，用於回報更佳的錯誤訊息。</param>
      <typeparam name="T">運算式的類型。</typeparam>
      <returns>如果任一運算式已經修正，則會傳回修正的運算式集合，否則傳回原始運算式集合。</returns>
      <exception cref="T:System.InvalidOperationException">其中一個運算式的瀏覽方法傳回不同的型別。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.BlockExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ElementInit" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>造訪延伸運算式的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.IndexExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.InvocationExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>造訪 <see cref="T:System.Linq.Expressions.Expression`1" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <typeparam name="T">委派的型別。</typeparam>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.LoopExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.NewExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.SwitchCase" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.TryExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>造訪 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的子系。</summary>
      <param name="node">要造訪的運算式。</param>
      <returns>如果運算式本身或是任一子運算式已經修正，會傳回修正的運算式，否則傳回原始運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>表示無條件跳躍。 這包含 return 陳述式、break 和 continue 陳述式，以及其他跳躍。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>「移至」運算式的類型。 只做為資訊參考之用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 物件，表示「移至」運算式的類型。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>這個節點跳至的目標標籤。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 物件，表示這個節點的目標標籤。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="target">結果的 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 屬性。</param>
      <param name="value">結果的 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>傳遞給目標的值，如果目標為 System.Void 型別則為 null。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示傳遞給目標的值，或者是 null。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>指定這個 <see cref="T:System.Linq.Expressions.GotoExpression" /> 所代表的跳躍類型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>表示 break 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>表示 continue 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>
        <see cref="T:System.Linq.Expressions.GotoExpression" />，表示跳至某個位置。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>表示 return 陳述式的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>提供內部介面以存取多個樹狀節點 (DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression 和 IndexExpression) 的引數。  此 API 僅供內部使用。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>傳回運算式樹狀節點的引數數目。 此 API 僅供內部使用。</summary>
      <returns>做為 <see cref="T:System.Int32" /> 的運算式樹狀節點引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>傳回位於 <paramref name="index" /> 的引數，如果 <paramref name="index" /> 超出範圍則擲回引數。 此 API 僅供內部使用。</summary>
      <param name="index">引數的索引。</param>
      <returns>位於索引的引數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>提供內部介面，用於存取 DynamicExpression 樹狀節點的引數以及 CallSite 和 Rewriting 功能。  您不應該使用這個 API。  它只有在 DLL 重構時為公用，且存在的唯一目的是將內部效能最佳化。</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>選擇性地建立 CallSite，並針對 DynamicExpression 的多型內嵌快取傳回 CallSite。  您不應該使用這個類型。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns>針對 DynamicExpression 的多型內嵌快取傳回 CallSite。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>取得 CallSite 所使用的委派類型，也就是動態運算式多型內嵌快取中使用的規則類型。</summary>
      <returns>CallSite 使用的委派類型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>重寫這個節點，以所提供值取代動態運算式的引數。  <paramref name="args" /> 的數目必須符合目前的運算式數目。  您不應該使用這個類型。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。  這個 Helper 方法可在呼叫位置所使用之 DynamicExpression 的衍生特定實作類別之外重寫節點。</summary>
      <param name="args">用來取代這個節點的引數。</param>
      <returns>重寫的節點；如果未進行任何變更，則會傳回相同的節點。</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>表示對屬性或陣列進行索引。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>取得引數，這些引數將做為屬性或陣列的索引。</summary>
      <returns>唯讀集合，包含將做為屬性或陣列索引的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>如果運算式表示索引屬性，則取得屬性的 <see cref="T:System.Reflection.PropertyInfo" />，否則傳回 null。</summary>
      <returns>如果運算式表示索引屬性，則為屬性的 <see cref="T:System.Reflection.PropertyInfo" />，否則為 null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>要進行索引的物件。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要進行索引的物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index">引數的索引。</param>
      <returns>傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="object">結果的 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 屬性。</param>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>表示將委派或 lambda 運算式套用至引數運算式清單的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>取得要套用委派或 Lambda 運算式的引數。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，代表要套用委派的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>取得要套用的委派或 lambda 運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要套用的委派。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns>做為 <see cref="T:System.Int32" /> 的運算式樹狀節點引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index">引數的索引。</param>
      <returns>位於索引的引數，如果索引超出範圍則擲回引數，如同 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>取得此 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 屬性。</param>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>表示可放在任何 <see cref="T:System.Linq.Expressions.Expression" /> 內容中的標籤。 如果跳至標籤，它會取得對應的 <see cref="T:System.Linq.Expressions.GotoExpression" /> 所提供的值。 否則它會接收 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 中的值。 如果 <see cref="T:System.Type" /> 等於 System.Void，則不應提供任何值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>透過一般控制流程到達標籤 (例如，不是跳至標籤) 時，則為 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</summary>
      <returns>運算式物件，表示 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>與這個標籤相關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>與這個標籤相關聯的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="target">結果的 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 屬性。</param>
      <param name="defaultValue">結果的 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>用來表示 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的目標。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>取得標籤的名稱。</summary>
      <returns>標籤名稱。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Object" /></summary>
      <returns>
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>跳至標籤時所傳遞值的型別 (如果不應傳遞任何值則為 <see cref="T:System.Void" />)。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示跳至標籤時所傳遞值的型別，如果不應傳遞任何值則為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>說明 Lambda 運算式。 這會擷取類似於 .NET 方法主體的程式碼區塊。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>取得 Lambda 運算式的主體。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示 Lambda 運算式的主體。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>產生代表 Lambda 運算式的委派。</summary>
      <returns>
        <see cref="T:System.Delegate" />，包含編譯後的 Lambda 運算式版本。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary>會產生代表 Lambda 運算式的解譯或編譯委派。</summary>
      <param name="preferInterpretation">
        <see langword="true" /> 表示運算式應編譯為已解譯的形式 (如果可行)；否則為 <see langword="false" />。</param>
      <returns>委派，表示 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 物件描述的已編譯 Lambda 運算式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>產生代表 Lambda 運算式的委派。</summary>
      <param name="debugInfoGenerator">編譯器使用的偵錯資訊產生工具，用以標記序列點以及標註區域變數。</param>
      <returns>委派，包含 Lambda 的編譯版本。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>取得 Lambda 運算式的名稱。</summary>
      <returns>Lambda 運算式的名稱。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>取得 Lambda 運算式的參數。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.ParameterExpression" />，代表 Lambda 運算式的參數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>取得 Lambda 運算式的傳回型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示 Lambda 運算式的型別。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>取得值，這個值表示 Lambda 運算式是否會以 tail 呼叫最佳化來編譯。</summary>
      <returns>
        <see langword="true" />如果 lambda 運算式將使用 tail 呼叫優化進行編譯，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>表示具有集合初始設定式的建構函式呼叫。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>
        <see langword="true" />如果可以減少節點，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>取得可用來初始化集合的項目初始化設定式。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.ElementInit" />，表示用於初始化集合的項目。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>取得運算式，這個運算式包含對集合型別之建構函式的呼叫。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />，表示對集合型別之建構函式的呼叫。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>將二進位運算式節點精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="newExpression">結果的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 屬性。</param>
      <param name="initializers">結果的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>表示無限迴圈。 可使用「中斷」結束它。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>取得做為迴圈主體的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>做為迴圈主體的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>取得迴圈主體做為 break 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>迴圈主體做為 break 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>取得迴圈主體做為 continue 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>迴圈主體做為 continue 陳述式目標的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>傳回這個運算式的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="breakLabel">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 屬性。</param>
      <param name="continueLabel">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 屬性。</param>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>表示物件之欄位或屬性的指派運算。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>取得要指派到欄位或屬性的運算式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示要指派給欄位或屬性的值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>提供基底類別，從其中衍生的類別表示用於初始化新建立物件的繫結。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.MemberBinding" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Linq.Expressions.MemberBindingType" />，可區分表示的繫結型別。</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />，表示要初始化的欄位或屬性。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>取得所表示之繫結的型別。</summary>
      <returns>其中一個 <see cref="T:System.Linq.Expressions.MemberBindingType" /> 值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>取得要初始化的欄位或屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" />，表示要初始化的欄位或屬性。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>傳回 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文字表示。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文字表示。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>描述用於 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 物件中的繫結型別。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>表示以運算式的值來初始化成員的繫結。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>表示初始化項目清單中 <see cref="T:System.Collections.IList" /> 或 <see cref="T:System.Collections.Generic.ICollection`1" /> 型別之成員的繫結。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>表示遞迴初始化成員之成員的繫結。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>表示存取欄位或屬性。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>取得欄位或屬性的包含物件。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示欄位或屬性的包含物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>取得要存取的欄位或屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" />，表示要存取的欄位或屬性。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>傳回這個 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>表示呼叫建構函式，並初始化新物件的一個或多個成員。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>取得繫結，這個繫結說明如何初始化新建立物件的成員。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.MemberBinding" />，說明如何初始化成員。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>
        <see langword="true" />如果可以減少節點，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>取得表示建構函式呼叫的運算式。</summary>
      <returns>表示建構函式呼叫的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>將 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="newExpression">結果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 屬性。</param>
      <param name="bindings">結果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>表示初始化新建立物件之集合成員的項目。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>取得初始化新建立物件之集合成員的初始設定式。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.ElementInit" />，用來初始化集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="initializers">結果的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>表示初始化新建立物件之成員的成員。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>取得繫結，這個繫結說明如何初始化成員的成員。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.MemberBinding" />，說明初始化成員的成員。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="bindings">結果的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>表示呼叫靜態或執行個體方法。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>取得運算式的集合，這些運算式表示所呼叫方法的引數。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，表示已呼叫方法的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>取得要呼叫之方法的 <see cref="T:System.Reflection.MethodInfo" />。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，表示已呼叫方法。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>取得 <see cref="T:System.Linq.Expressions.Expression" />，表示執行個體 (適用於執行個體方法呼叫) 或 Null (適用於靜態方法呼叫)。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示方法的接收物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>傳回運算式樹狀節點的引數數目。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <returns>做<see cref="T:System.Int32" />為的運算式樹狀結構節點引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>傳回位於索引的引數，如果索引超出範圍則擲回引數。  您不應該使用這個成員。  它只有在組件重構時為公用，且使用於內部以取得效能最佳化。</summary>
      <param name="index">引數的索引。</param>
      <returns>傳回 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="object">結果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 屬性。</param>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>表示建立新陣列，並可能初始化新陣列的項目。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性的值是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，則取得陣列的界限，如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 屬性的值是 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，則取得值以初始化新陣列的項目。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 物件的 <see cref="T:System.Linq.Expressions.Expression" />，表示陣列的界限或初始化值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expressions">結果的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>表示建構函式呼叫。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>取得建構函式的引數。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件的集合，表示建構函式的引數。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>取得所呼叫的建構函式。</summary>
      <returns>代表所呼叫建構函式的 <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>取得可擷取以建構函式引數初始化之欄位值的成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的集合，表示可擷取以建構函式引數初始化之欄位值的成員。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>取得運算式樹狀節點的引數數目。</summary>
      <returns>運算式樹狀節點的引數數目。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>傳回位於索引的引數，如果索引超出範圍則擲回引數。</summary>
      <param name="index">引數的索引。</param>
      <returns>位於索引的引數，如果索引超出範圍則擲回。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="arguments">結果的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>表示具名參數運算式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>分派給這個節點類型的特定造訪方法。 例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 會呼叫 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <param name="visitor">瀏覽這個節點的造訪者。</param>
      <returns>瀏覽這個節點的結果。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>表示這個 <c>ParameterExpression</c> 會被視為 <see langword="ByRef" /> 參數。</summary>
      <returns>
        <see langword="true" />如果這個<c>system.linq.expressions.parameterexpression&gt;</c>是<see langword="ByRef" />參數，則為， <see langword="false" />否則為。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>取得參數或變數的名稱。</summary>
      <returns>包含參數名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>為變數提供執行階段讀取/寫入權限的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="variables">結果的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>要提供執行階段存取的變數或參數。</summary>
      <returns>唯讀集合，包含將提供執行階段存取的參數。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>表示 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的一個案例。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>取得這個案例的主體。</summary>
      <returns>表示 case 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>取得這個案例的值。 當 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 符合任何這些值時，會選取這個案例開始執行。</summary>
      <returns>這個 case 區塊的唯讀值集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>傳回表示目前 <see cref="T:System.String" /> 的 <see cref="T:System.Object" /></summary>
      <returns>
        <see cref="T:System.String" />，代表示目前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="testValues">結果的 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 屬性。</param>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>表示透過將控制權傳遞至 <see cref="T:System.Linq.Expressions.SwitchCase" /> 來處理多重選擇的控制運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>取得切換的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 物件的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>取得相等比較方法 (如果有的話)。</summary>
      <returns>表示相等比較方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>取得切換的測試。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示切換的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>取得切換的測試。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 物件，表示切換的測試。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="switchValue">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 屬性。</param>
      <param name="cases">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 屬性。</param>
      <param name="defaultBody">結果的 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>儲存發出原始程式檔偵錯符號資訊所需的資訊，特別是檔名和唯一語言識別項。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>傳回文件類型的唯一識別項 (如果有的話)。 預設為文字檔的 GUID。</summary>
      <returns>文件類型的唯一識別項。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>原始程式檔的名稱。</summary>
      <returns>表示原始程式檔名稱的字串。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>傳回語言的唯一識別項 (如果有的話)。</summary>
      <returns>語言的唯一識別項。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>傳回語言廠商的唯一識別項 (如果有的話)。</summary>
      <returns>語言廠商的唯一識別項。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>表示 try/catch/finally/fault 區塊。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>取得表示 try 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 try 區塊主體的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>取得表示 fault 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 fault 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>取得表示 finally 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 finally 區塊的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>取得與 try 區塊相關聯的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 運算式集合。</summary>
      <returns>與 try 區塊相關聯的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 運算式集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="body">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 屬性。</param>
      <param name="handlers">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 屬性。</param>
      <param name="finally">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 屬性。</param>
      <param name="fault">結果的 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>表示運算式和型別之間的作業。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>取得型別測試作業的運算式運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示型別測試作業的運算式運算元。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>傳回這個 Expression 的節點型別。 延伸節點覆寫這個方法時應該傳回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>取得此 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>取得型別測試作業的型別運算元。</summary>
      <returns>
        <see cref="T:System.Type" />，表示型別測試作業的型別運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="expression">結果的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>表示有一元 (Unary) 運算子的運算式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>取得值，指出是否可以減少運算式樹狀架構的節點。</summary>
      <returns>
        <see langword="true" />如果可以減少節點，則為，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>取得值，這個值指出運算式樹狀節點是否表示對運算子的消除呼叫。</summary>
      <returns>如果節點表示消除呼叫，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>取得值，這個值指出運算式樹狀節點是否表示對運算子的消除呼叫，該運算子的傳回型別對可為 null 的型別已消除。</summary>
      <returns>如果運算子的傳回型別對可為 null 的型別消除，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>取得一元作業的實作方法。</summary>
      <returns>代表實作方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>傳回這個 <see cref="T:System.Linq.Expressions.Expression" /> 的節點型別。</summary>
      <returns>表示這個運算式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>取得一元作業的運算元。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />，表示一元作業的運算元。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>將運算式節點精簡為更簡單的運算式。</summary>
      <returns>精簡的運算式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>取得此 <see cref="T:System.Linq.Expressions.Expression" /> 代表之運算式的靜態類型。</summary>
      <returns>代表運算式靜態類型的 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>建立與這個項目類似的新運算式，但是使用提供的子系。 如果所有子系都相同，它將會傳回這個運算式。</summary>
      <param name="operand">結果的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 屬性。</param>
      <returns>如果沒有變更任何子系，則為這個運算式，或是具有更新之子系的運算式。</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>代表排序作業的結果。</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>代表排序作業的結果。</summary>
      <typeparam name="T">資料來源的內容類型。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>提供功能，對未指定資料型別的特定資料來源評估查詢。</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>取得與這個 <see cref="T:System.Linq.IQueryable" /> 執行個體關聯的運算式樹狀架構執行時，所傳回項目的型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示與這個物件關聯的運算式樹狀架構執行時，所傳回項目的型別。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>取得與 <see cref="T:System.Linq.IQueryable" /> 之執行個體關聯的運算式樹狀架構。</summary>
      <returns>與這個 <see cref="T:System.Linq.Expressions.Expression" /> 之執行個體相關聯的 <see cref="T:System.Linq.IQueryable" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>取得與這個資料來源關聯的查詢提供者。</summary>
      <returns>與這個資料來源關聯的 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>提供功能，對已知資料型別的特定資料來源評估查詢。</summary>
      <typeparam name="T">資料來源中的資料型別。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>定義方法來建立並執行 <see cref="T:System.Linq.IQueryable" /> 物件所描述的查詢。</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>建構 <see cref="T:System.Linq.IQueryable" /> 物件，這個物件可評估由指定的運算式樹狀架構所表示的查詢。</summary>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <returns>
        <see cref="T:System.Linq.IQueryable" />，可評估由指定的運算式樹狀架構所表示的查詢。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>建構 <see cref="T:System.Linq.IQueryable`1" /> 物件，這個物件可評估由指定的運算式樹狀架構所表示的查詢。</summary>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <typeparam name="TElement">所傳回 <see cref="T:System.Linq.IQueryable`1" /> 之項目的型別。</typeparam>
      <returns>
        <see cref="T:System.Linq.IQueryable`1" />，可評估由指定的運算式樹狀架構所表示的查詢。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>執行指定之運算式樹狀架構所代表的查詢。</summary>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <returns>執行指定的查詢所產生的值。</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>執行由指定之運算式樹狀架構所代表的強型別查詢。</summary>
      <param name="expression">代表 LINQ 查詢的運算式樹狀架構。</param>
      <typeparam name="TResult">執行查詢所產生值的型別。</typeparam>
      <returns>執行指定的查詢所產生的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>動態呼叫站台的基底類別。 這個型別是做為動態站台目標的參數型別使用。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>負責在動態站台上執行繫結動態作業的類別。</summary>
      <returns>負責執行繫結動態作業的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 物件。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>使用指定的委派型別和繫結器，建立呼叫站台。</summary>
      <param name="delegateType">呼叫站台的委派型別。</param>
      <param name="binder">呼叫站台繫結器。</param>
      <returns>新的呼叫站台。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>動態站台類型。</summary>
      <typeparam name="T">委派類型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>建立動態呼叫站台的執行個體，並以負責在此呼叫站台上執行動態作業之執行階段繫結的繫結器來初始化。</summary>
      <param name="binder">負責在此呼叫站台上執行動態作業之執行階段繫結的繫結器。</param>
      <returns>動態呼叫站台的新執行個體。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>層級 0 快取：根據站台記錄的特殊化委派。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>更新委派。 當動態站台發生快取遺漏時呼叫。</summary>
      <returns>更新委派。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>負責在動態呼叫位置上執行動態作業之執行階段繫結的類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>在一組引數上執行動態作業的執行階段繫結。</summary>
      <param name="args">動態作業的引數陣列。</param>
      <param name="parameters">
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 執行個體的陣列，表示繫結處理序中呼叫位置的參數。</param>
      <param name="returnLabel">LabelTarget，用來傳回動態繫結的結果。</param>
      <returns>運算式，在動態作業引數上執行測試，而且如果測試有效，則會執行動態作業。 如果後續發生的動態作業測試失敗，則會重新呼叫繫結，為新引數型別產生新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>提供低階執行階段繫結支援。 類別可以將它覆寫，並為規則實作提供直接委派。 如此可將規則儲存至磁碟、在執行階段使用特殊化規則，或提供不同的快取原則。</summary>
      <param name="site">正在為其執行繫結的 CallSite。</param>
      <param name="args">繫結器的引數。</param>
      <typeparam name="T">CallSite 的目標型別。</typeparam>
      <returns>取代 CallSite 目標的新委派。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>將目標加入至已知目標的快取。 在呼叫 BindDelegate 產生新規則之前，會先掃描快取的目標。</summary>
      <param name="target">要加入至快取的目標委派。</param>
      <typeparam name="T">要加入的目標型別。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>取得可導致繫結更新的標籤。 它表示運算式的繫結不再是有效。 這通常用於在動態物件的「版本」已變更時。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 物件，表示可用來觸發繫結更新的標籤。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>包含 DLR CallSites 之 Helper 方法的類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>檢查 <see cref="T:System.Reflection.MethodBase" /> 是否供 DLR 內部使用，而且不應在語言程式碼堆疊上顯示。</summary>
      <param name="mb">輸入的 <see cref="T:System.Reflection.MethodBase" />。</param>
      <returns>如果輸入的 <see cref="T:System.Reflection.MethodBase" /> 是供 DLR 內部使用且不應顯示在語言程式碼堆疊上，則為 <see langword="true" />。 否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>為運算式樹狀架構中的 Lambda 運算式產生偵錯資訊。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>建立程式資料庫 (PDB) 符號產生器。</summary>
      <returns>PDB 符號產生器。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>標記 Microsoft Intermediate Language (MSIL) 程式碼中的序列點。</summary>
      <param name="method">產生的 Lambda 運算式。</param>
      <param name="ilOffset">MSIL 程式碼中要標記序列點的位移。</param>
      <param name="sequencePoint">對應於序列點的偵錯資訊。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>表示成員上 <see cref="T:System.Object" /> 的使用將視為動態分派型別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 類別的新執行個體。</summary>
      <param name="transformFlags">以型別建構的前置周遊方式，指定哪些 <see cref="T:System.Object" /> 相符項目將視為動態分派型別。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>以型別建構的前置周遊方式，指定哪些 <see cref="T:System.Object" /> 相符項目將視為動態分派型別。</summary>
      <returns>將視為動態分派型別 <see cref="T:System.Object" /> 相符項目清單。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>表示執行階段變數的值。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>取得執行階段變數的計數。</summary>
      <returns>執行階段變數的數目。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>取得指定之索引處的執行階段變數值。</summary>
      <param name="index">執行階段變數 (要傳回其值) 的以零起始的索引。</param>
      <returns>執行階段變數的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>唯讀集合的產生器。</summary>
      <typeparam name="T">集合項目的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>建構 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>建構 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />，並複製指定集合的內容。</summary>
      <param name="collection">要複製項目的來源集合。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>使用指定的初始容量，建構 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。 需要任何重新配置之前，內容是空白，但產生器有保留空間供指定數目的項目使用。</summary>
      <param name="capacity">初始容量。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
      <param name="item">要加入至 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的物件。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>取得或設定此 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的容量。</summary>
      <returns>此 ReadOnlyCollectionBuilder 的容量<c>。</c></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中移除所有項目。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>判斷 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 是否包含特定值。</summary>
      <param name="item">要在 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中尋找的物件。</param>
      <returns>如果在 <see langword="true" /> 中找到項目，則為 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>從特定的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 索引開始，將 <see cref="T:System.Array" /> 的項目複製到 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 複製過來之項目的目的端。</param>
      <param name="arrayIndex">陣列中以零起始的索引，即複製的起始處。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>取得 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的項目數目。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中的項目數。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可以用來逐一查看集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>傳回產生器中第一次出現指定值的索引。</summary>
      <param name="item">要搜尋的項目。</param>
      <returns>第一個符合項目的索引。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />。</summary>
      <param name="index">應該插入 item 之以零起始的索引。</param>
      <param name="item">要插入 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的物件。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="item">要從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 移除的物件。</param>
      <returns>如果從 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 成功移除項目，則為 <see langword="true" />；否則為 false。 如果在原始的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中找不到該項目，這個方法也會傳回 false。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>移除在指定索引處的 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>反轉整個 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 中項目的順序。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>反向指定範圍中項目的順序。</summary>
      <param name="index">要反向範圍內之以零為起始的起始索引。</param>
      <param name="count">要反向範圍中的項目數。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.Generic.ICollection`1" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從指定的陣列索引處開始，將 <see cref="T:System.Collections.Generic.ICollection`1" /> 的項目複製到陣列。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來之項目的目的端。 陣列必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Collections.ICollection" />的物件。</summary>
      <returns>可用以同步存取 <see cref="T:System.Collections.ICollection" /> 的物件。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>插入新項目的位置。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中指定項目的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入位於指定索引的 <see cref="T:System.Collections.IList" />。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="value">要插入 <see cref="T:System.Collections.IList" /> 的物件。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定大小，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IList" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定之以零為起始的項目索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除特定物件之第一個符合的元素。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的物件。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>將 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的項目複製到新的陣列。</summary>
      <returns>含有 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的項目複本的陣列。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>建立 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，其中包含 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 的所有項目，可能的話避免將項目複製到新陣列。 建立 <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> 之後，重設 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的新執行個體。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>表示執行階段繫結規則的快取。</summary>
      <typeparam name="T">委派類型。</typeparam>
    </member>
  </members>
</doc>